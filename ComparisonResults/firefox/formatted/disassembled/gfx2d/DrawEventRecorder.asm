endp
??0DrawEventRecorderPrivate@gfx@mozilla@@QAE@PAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0DrawEventRecorderPrivate@gfx@mozilla@@QAE@PAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0DrawEventRecorder@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7DrawEventRecorderPrivate@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??0?$unordered_set@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@V?$allocator@PBX@2@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '34h']
call ['??0?$unordered_set@_KU?$hash@_K@std@@U?$equal_to@_K@2@V?$allocator@_K@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
endp
?WriteHeader@DrawEventRecorderPrivate@gfx@mozilla@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['offset', '_kMagicInt']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['??$WriteElement@I@gfx@mozilla@@YAXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@ABI@Z']
add ['esp,', '8']
push ['offset', '_kMajorRevision']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
push ['eax']
call ['??$WriteElement@G@gfx@mozilla@@YAXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@ABG@Z']
add ['esp,', '8']
push ['offset', '_kMinorRevision']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
call ['??$WriteElement@G@gfx@mozilla@@YAXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@ABG@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
call ['??$WriteElement@H@gfx@mozilla@@YAXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@ABH@Z']
add ['esp,', '8']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
db ['7', 'dup(0CCh)']
endp
??0DrawEventRecorderFile@gfx@mozilla@@QAE@PBD@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0DrawEventRecorderFile@gfx@mozilla@@QAE@PBD@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['0']
mov ['ecx,', '[ebp+var_10]']
call ['??0DrawEventRecorderPrivate@gfx@mozilla@@QAE@PAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7DrawEventRecorderFile@gfx@mozilla@@6B@']
push ['1']
push ['40h']
push ['20h']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '60h']
call ['??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '60h']
mov ['eax,', '[ebp+var_10]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_10]']
call ['?WriteHeader@DrawEventRecorderPrivate@gfx@mozilla@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
db ['7', 'dup(0CCh)']
endp
??1DrawEventRecorderFile@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1DrawEventRecorderFile@gfx@mozilla@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7DrawEventRecorderFile@gfx@mozilla@@6B@']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '60h']
call ['?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '60h']
call ['??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1DrawEventRecorderPrivate@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
?Flush@DrawEventRecorderFile@gfx@mozilla@@EAEXXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '60h']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
??0DrawEventRecorderMemory@gfx@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0DrawEventRecorderMemory@gfx@mozilla@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['0']
mov ['ecx,', '[ebp+var_10]']
call ['??0DrawEventRecorderPrivate@gfx@mozilla@@QAE@PAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7DrawEventRecorderMemory@gfx@mozilla@@6B@']
push ['1']
push ['3']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '60h']
call ['??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '60h']
jz ['short', 'loc_382']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '70h']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_389']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+8],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?WriteHeader@DrawEventRecorderPrivate@gfx@mozilla@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Fh', 'dup(0CCh)']
endp
?RecordingSize@DrawEventRecorderMemory@gfx@mozilla@@QAEIXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '70h']
call ['dword', 'ptr', 'ds:__imp_?tellp@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', 'eax']
call ['??B?$fpos@H@std@@QBE_JXZ']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
?CopyRecording@DrawEventRecorderMemory@gfx@mozilla@@QAE_NPADI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
xor ['ecx,', 'ecx']
mov ['esi,', 'esp']
push ['ecx']
push ['eax']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '60h']
call ['dword', 'ptr', 'ds:__imp_?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_??7ios_base@std@@QBE_NXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_49A']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_4A1']
mov ['[ebp+var_C],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_C]']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
db ['7', 'dup(0CCh)']
endp
?WipeRecording@DrawEventRecorderMemory@gfx@mozilla@@QAEXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?WipeRecording@DrawEventRecorderMemory@gfx@mozilla@@QAEXXZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '2Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_10],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
lea ['ecx,', '[ebp+var_30]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['[ebp+var_34],', 'eax']
mov ['eax,', '[ebp+var_34]']
mov ['[ebp+var_38],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_38]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '60h']
call ['?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_30]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['esi,', 'esp']
push ['0']
push ['0']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+60h]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_14]']
lea ['ecx,', '[edx+ecx+60h]']
call ['dword', 'ptr', 'ds:__imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_14]']
call ['?WriteHeader@DrawEventRecorderPrivate@gfx@mozilla@@QAEXXZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_10]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '38h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
?Flush@DrawEventRecorderMemory@gfx@mozilla@@EAEXXZ proc	near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
call ['dword', 'ptr', 'ds:__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0DrawEventRecorderPrivate@gfx@mozilla@@QAE@PAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1DrawEventRecorder@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??0DrawEventRecorderPrivate@gfx@mozilla@@QAE@PAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0Ch']
jmp ['??1?$unordered_set@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@V?$allocator@PBX@2@@std@@QAE@XZ']
endp
__ehhandler$??0DrawEventRecorderPrivate@gfx@mozilla@@QAE@PAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0DrawEventRecorderPrivate@gfx@mozilla@@QAE@PAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$??0DrawEventRecorderFile@gfx@mozilla@@QAE@PBD@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1DrawEventRecorderPrivate@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??0DrawEventRecorderFile@gfx@mozilla@@QAE@PBD@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '60h']
jmp ['??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ']
endp
__ehhandler$??0DrawEventRecorderFile@gfx@mozilla@@QAE@PBD@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0DrawEventRecorderFile@gfx@mozilla@@QAE@PBD@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$??1DrawEventRecorderFile@gfx@mozilla@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1DrawEventRecorderPrivate@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??1DrawEventRecorderFile@gfx@mozilla@@UAE@XZ$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '60h']
jmp ['??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ']
endp
__ehhandler$??1DrawEventRecorderFile@gfx@mozilla@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1DrawEventRecorderFile@gfx@mozilla@@UAE@XZ']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$??0DrawEventRecorderMemory@gfx@mozilla@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1DrawEventRecorderPrivate@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??0DrawEventRecorderMemory@gfx@mozilla@@QAE@XZ$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '60h']
jmp ['??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ']
endp
__ehhandler$??0DrawEventRecorderMemory@gfx@mozilla@@QAE@XZ proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0DrawEventRecorderMemory@gfx@mozilla@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?WipeRecording@DrawEventRecorderMemory@gfx@mozilla@@QAEXXZ$0 proc near
lea ['ecx,', '[ebp-30h]']
jmp ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
endp
__ehhandler$?WipeRecording@DrawEventRecorderMemory@gfx@mozilla@@QAEXXZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-38h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?WipeRecording@DrawEventRecorderMemory@gfx@mozilla@@QAEXXZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0PBX@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAE@ABV?$allocator@PBX@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0V?$allocator@PBX@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@ABV?$allocator@PBX@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??$?0PBX@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAE@ABV?$allocator@PBX@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0V?$allocator@_K@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@ABV?$allocator@_K@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??$?0_K@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAE@ABV?$allocator@_K@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0_K@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAE@ABV?$allocator@_K@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$WriteElement@G@gfx@mozilla@@YAXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@ABG@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?Write@?$ElementStreamFormat@G@gfx@mozilla@@SAXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@ABG@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$WriteElement@H@gfx@mozilla@@YAXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@ABH@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?Write@?$ElementStreamFormat@H@gfx@mozilla@@SAXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@ABH@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$WriteElement@I@gfx@mozilla@@YAXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@ABI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?Write@?$ElementStreamFormat@I@gfx@mozilla@@SAXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@ABI@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@D@std@@YAPADIPAD@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_7A7']
jmp ['short', 'loc_7D1']
cmp ['[ebp+arg_0],', '0FFFFFFFFh']
ja ['short', 'loc_7C2']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_7D1']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@U?$_List_node@PBXPAX@std@@@std@@YAPAU?$_List_node@PBXPAX@0@IPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_7FF']
jmp ['short', 'loc_82D']
cmp ['[ebp+arg_0],', '15555555h']
ja ['short', 'loc_81E']
imul ['eax,', '[ebp+arg_0],', '0Ch']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_82D']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@U?$_List_node@_KPAX@std@@@std@@YAPAU?$_List_node@_KPAX@0@IPAU10@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_85B']
jmp ['short', 'loc_88B']
cmp ['[ebp+arg_0],', '0FFFFFFFh']
ja ['short', 'loc_87C']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '4']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_88B']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_8BB']
jmp ['short', 'loc_8EB']
cmp ['[ebp+arg_0],', '1FFFFFFFh']
ja ['short', 'loc_8DC']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '3']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_8EB']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPAV10@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_91B']
jmp ['short', 'loc_94B']
cmp ['[ebp+arg_0],', '3FFFFFFFh']
ja ['short', 'loc_93C']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '2']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_94B']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_97B']
jmp ['short', 'loc_9AB']
cmp ['[ebp+arg_0],', '3FFFFFFFh']
ja ['short', 'loc_99C']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '2']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_9AB']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_A31']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '4']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '4']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
jmp ['short', 'loc_A0B']
mov ['eax,', '[ebp+arg_8]']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_AA9']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '4']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '4']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
jmp ['short', 'loc_A83']
mov ['eax,', '[ebp+arg_8]']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_DebugHeapDelete@V_Facet_base@std@@@std@@YAXPAV_Facet_base@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
cmp ['[ebp+Memory],', '0']
jz ['short', 'loc_AE7']
mov ['esi,', 'esp']
push ['0']
mov ['eax,', '[ebp+Memory]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+Memory]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+Memory]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__free']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_B1D']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_B51']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_B85']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range2@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_BEB']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_BEB']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range2@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_C53']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_C53']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_4+3]']
push ['ecx']
call ['??$_Iter_cat@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range2@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z']
add ['esp,', '14h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_4+3]']
push ['ecx']
call ['??$_Iter_cat@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range2@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z']
add ['esp,', '14h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
jmp ['short', 'loc_D46']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_D5C']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+arg_8]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
jmp ['short', 'loc_D3D']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
jmp ['short', 'loc_DBE']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_DD4']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+arg_8]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
jmp ['short', 'loc_DB5']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+File]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__fgetc']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0FFFFFFFFh']
jnz ['short', 'loc_E11']
xor ['al,', 'al']
jmp ['short', 'loc_E1B']
jmp ['short', 'loc_E1B']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_4]']
mov ['[ecx],', 'dl']
mov ['al,', '1']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
jmp ['short', 'loc_E3A']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_E4E']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
jmp ['short', 'loc_E31']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
jmp ['short', 'loc_E5E']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_E72']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
jmp ['short', 'loc_E55']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@U_Container_proxy@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@U_Container_proxy@2@U32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@_Alloc_max_size@std@@SAIHABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
call ['?max_size@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QBEIXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@ABV32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@V32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@_Alloc_max_size@std@@SAIHABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
call ['?max_size@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QBEIXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@ABV32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@V32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+File]']
push ['eax']
movsx ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__fputc']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '0FFFFFFFFh']
jz ['short', 'loc_FE1']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_FE8']
mov ['[ebp+var_4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Iter_cat@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_8+3]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_19']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_18']
dd ['offset', '$LN3_18']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Iter_cat@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_8+3]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_20']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN4_19']
dd ['offset', '$LN3_19']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_17']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN4_16']
dd ['offset', '$LN3_16']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_18']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN4_17']
dd ['offset', '$LN3_17']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Rechecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAPAV10@PAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Rechecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAPAV10@PAV10@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninitialized_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z']
add ['esp,', '10h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_15']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
dd ['offset', '$LN4_14']
dd ['offset', '$LN3_14']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninitialized_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z']
add ['esp,', '10h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_16']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
dd ['offset', '$LN4_15']
dd ['offset', '$LN3_15']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+File]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__ungetc']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '0FFFFFFFFh']
jz ['short', 'loc_12AB']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_12B2']
mov ['[ebp+var_4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['ecx']
push ['ebx']
push ['esi']
push ['edi']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_1316']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
mov ['[ebp+arg_0],', 'edx']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_132E']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+arg_C]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z']
jmp ['short', 'loc_1304']
jmp ['short', 'loc_1360']
endp
__catch$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
jmp ['short', 'loc_133B']
mov ['edx,', '[ebp-14h]']
add ['edx,', '4']
mov ['[ebp-14h],', 'edx']
mov ['eax,', '[ebp-14h]']
cmp ['eax,', '[ebp+8]']
jz ['short', 'loc_1351']
mov ['ecx,', '[ebp-14h]']
push ['ecx']
mov ['ecx,', '[ebp+14h]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
jmp ['short', 'loc_1332']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN13_4']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_1370']
endp
$LN13_4		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['ecx']
push ['ebx']
push ['esi']
push ['edi']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_13FA']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
mov ['[ebp+arg_0],', 'edx']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_1412']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+arg_C]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z']
jmp ['short', 'loc_13E8']
jmp ['short', 'loc_1444']
endp
__catch$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
jmp ['short', 'loc_141F']
mov ['edx,', '[ebp-14h]']
add ['edx,', '4']
mov ['[ebp-14h],', 'edx']
mov ['eax,', '[ebp-14h]']
cmp ['eax,', '[ebp+8]']
jz ['short', 'loc_1435']
mov ['ecx,', '[ebp-14h]']
push ['ecx']
mov ['ecx,', '[ebp+14h]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
jmp ['short', 'loc_1416']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN13_5']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_1454']
endp
$LN13_5		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '18h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['ecx']
push ['ebx']
push ['esi']
push ['edi']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
push ['1B6h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z']
add ['esp,', '10h']
push ['1B7h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_1566']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '4']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_1580']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['ecx,', '[ebp+arg_C]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
jmp ['short', 'loc_1554']
jmp ['short', 'loc_15B2']
endp
__catch$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
jmp ['short', 'loc_158D']
mov ['eax,', '[ebp-14h]']
add ['eax,', '4']
mov ['[ebp-14h],', 'eax']
mov ['ecx,', '[ebp-14h]']
cmp ['ecx,', '[ebp+10h]']
jz ['short', 'loc_15A3']
mov ['edx,', '[ebp-14h]']
push ['edx']
mov ['ecx,', '[ebp+14h]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
jmp ['short', 'loc_1584']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN13_6']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_15C2']
endp
$LN13_6		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '18h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['ecx']
push ['ebx']
push ['esi']
push ['edi']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
push ['1B6h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z']
add ['esp,', '10h']
push ['1B7h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_16DA']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '4']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_16F4']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['ecx,', '[ebp+arg_C]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
jmp ['short', 'loc_16C8']
jmp ['short', 'loc_1726']
endp
__catch$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
jmp ['short', 'loc_1701']
mov ['eax,', '[ebp-14h]']
add ['eax,', '4']
mov ['[ebp-14h],', 'eax']
mov ['ecx,', '[ebp-14h]']
cmp ['ecx,', '[ebp+10h]']
jz ['short', 'loc_1717']
mov ['edx,', '[ebp-14h]']
push ['edx']
mov ['ecx,', '[ebp+14h]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
jmp ['short', 'loc_16F8']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN13_7']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_1736']
endp
$LN13_7		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninitialized_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '18h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninitialized_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '18h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninitialized_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z']
add ['esp,', '10h']
push ['eax']
lea ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Rechecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAPAV10@PAV10@@Z']
add ['esp,', '8']
mov ['eax,', '[eax]']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninitialized_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z']
add ['esp,', '10h']
push ['eax']
lea ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Rechecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAPAV10@PAV10@@Z']
add ['esp,', '8']
mov ['eax,', '[eax]']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@$$CBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@$$CBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@D@std@@YAPADAAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@PAU?$_List_node@PBXPAX@std@@@std@@YAPAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@PAU?$_List_node@_KPAX@std@@@std@@YAPAPAU?$_List_node@_KPAX@0@AAPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@PBX@std@@YAPAPBXAAPBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@_K@std@@YAPA_KAA_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_19CA']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_19D1']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@AAPAU?$_List_node@PBXPAX@std@@@std@@YAAAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPAU?$_List_node@PBXPAX@1@AAPAU31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_1AFE']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@AAPAU?$_List_node@PBXPAX@std@@@std@@YAAAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_1B05']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPAU?$_List_node@PBXPAX@1@AAPAU31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@AAPAU?$_List_node@PBXPAX@std@@@std@@YAAAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@AAPAU?$_List_node@_KPAX@std@@@std@@YAAAPAU?$_List_node@_KPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PAPAU?$_List_node@_KPAX@1@AAPAU31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_1C32']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@AAPAU?$_List_node@_KPAX@std@@@std@@YAAAPAU?$_List_node@_KPAX@0@AAPAU10@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_1C39']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PAPAU?$_List_node@_KPAX@1@AAPAU31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@AAPAU?$_List_node@_KPAX@std@@@std@@YAAAPAU?$_List_node@_KPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['8']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_1DA8']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
mov ['edx,', '[eax]']
mov ['eax,', '[eax+4]']
mov ['ecx,', '[ebp+var_18]']
mov ['[ecx],', 'edx']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'edx']
jmp ['short', 'loc_1DAF']
mov ['[ebp+var_1C],', '0']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@U_Container_proxy@2@U32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@ABV32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?construct@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@ABV32@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_200E']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
mov ['edx,', '[eax]']
mov ['eax,', '[ebp+var_18]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_2015']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z$0 proc	near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@V32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@ABV32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?construct@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@ABV32@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_2276']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
mov ['edx,', '[eax]']
mov ['eax,', '[ebp+var_18]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_227D']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z$0	proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@V32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAU?$_List_node@PBXPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@PAU?$_List_node@PBXPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPAU?$_List_node@PBXPAX@1@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAU?$_List_node@PBXPAX@std@@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAU?$_List_node@PBXPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPAU?$_List_node@PBXPAX@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@PAU?$_List_node@PBXPAX@std@@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAU?$_List_node@_KPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@PAU?$_List_node@_KPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PAPAU?$_List_node@_KPAX@1@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAU?$_List_node@_KPAX@std@@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAU?$_List_node@_KPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PAPAU?$_List_node@_KPAX@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@PAU?$_List_node@_KPAX@std@@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PBX@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@PBX@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPBX@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PBX@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@PBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@U_Container_proxy@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@U_Container_proxy@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@U_Container_proxy@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@_K@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPA_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@_K@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PA_K@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@_K@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPA_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@_K@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PA_K@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@_K@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPA_K@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0A3Eh']
push ['offset', '??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0A3Eh']
push ['offset', '??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@AAPAU?$_List_node@PBXPAX@std@@@std@@YAAAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@AAPAU?$_List_node@_KPAX@std@@@std@@YAAAPAU?$_List_node@_KPAX@0@AAPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '34h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_40]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['esi,', 'esp']
push ['0']
lea ['ecx,', '[ebp+var_14]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['eax,', 'ds:?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B']
mov ['[ebp+var_20],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', 'dword', 'ptr', 'ds:__imp_?id@?$codecvt@DDH@std@@2V0locale@2@A']
call ['dword', 'ptr', 'ds:__imp_??Bid@locale@std@@QAEIXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '0']
jz ['short', 'loc_285B']
jmp ['loc_28E6']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_2869']
mov ['edx,', '[ebp+var_20]']
mov ['[ebp+var_2C],', 'edx']
jmp ['short', 'loc_28E6']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp_?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '0FFFFFFFFh']
jnz ['short', 'loc_28AF']
mov ['esi,', 'esp']
push ['offset', '??_C@_08EPJLHIJG@bad?5cast?$AA@']
lea ['ecx,', '[ebp+var_3C]']
call ['dword', 'ptr', 'ds:__imp_??0bad_cast@std@@QAE@PBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['offset', '__TI2?AVbad_cast@std@@']
lea ['edx,', '[ebp+var_3C]']
push ['edx']
call ['__CxxThrowException@8']
jmp ['short', 'loc_28E6']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['ds:?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B,', 'ecx']
mov ['edx,', '[ebp+var_20]']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+var_30]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_30]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
call ['?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_2C]']
mov ['[ebp+var_40],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_14]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_40]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '40h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN13_3']
dd ['offset', '$LN10_5']
dd ['0FFFFFFE0h,', '4']
dd ['offset', '$LN11_1']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z$0 proc near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-14h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-40h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefCounted@VDrawEventRecorder@gfx@mozilla@@@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@1@ABV?$allocator@PBX@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@1@ABV?$allocator@PBX@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@QAE@ABV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@1@@Z']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$list@PBXV?$allocator@PBX@std@@@std@@QAE@ABV?$allocator@PBX@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
lea ['ecx,', '[ebp+var_14+3]']
call ['??$?0V?$allocator@PBX@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@ABV?$allocator@PBX@1@@Z']
lea ['eax,', '[ebp+var_14+3]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??0?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
movss ['xmm0,', 'ds:__real@3f800000']
movss ['dword', 'ptr', '[ecx+24h],', 'xmm0']
push ['8']
mov ['ecx,', '[ebp+var_10]']
call ['?_Init@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXI@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@1@ABV?$allocator@PBX@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$list@PBXV?$allocator@PBX@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??0?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@1@ABV?$allocator@PBX@1@@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0Ch']
jmp ['??1?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@1@ABV?$allocator@PBX@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@1@ABV?$allocator@PBX@1@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@1@ABV?$allocator@_K@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@1@ABV?$allocator@_K@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@QAE@ABV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@1@@Z']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$list@_KV?$allocator@_K@std@@@std@@QAE@ABV?$allocator@_K@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
lea ['ecx,', '[ebp+var_14+3]']
call ['??$?0V?$allocator@_K@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@ABV?$allocator@_K@1@@Z']
lea ['eax,', '[ebp+var_14+3]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??0?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
movss ['xmm0,', 'ds:__real@3f800000']
movss ['dword', 'ptr', '[ecx+24h],', 'xmm0']
push ['8']
mov ['ecx,', '[ebp+var_10]']
call ['?_Init@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXI@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@1@ABV?$allocator@_K@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$list@_KV?$allocator@_K@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??0?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@1@ABV?$allocator@_K@1@@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0Ch']
jmp ['??1?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@1@ABV?$allocator@_K@1@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@1@ABV?$allocator@_K@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Hash_oper1@$0A@U?$hash@PBX@std@@@std@@QAE@U?$hash@PBX@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Hash_oper1@$0A@U?$hash@_K@std@@@std@@QAE@U?$hash@_K@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Hash_oper2@$0A@U?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QAE@U?$hash@PBX@1@U?$equal_to@PBX@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
movzx ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Hash_oper1@$0A@U?$hash@PBX@std@@@std@@QAE@U?$hash@PBX@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Hash_oper2@$0A@U?$hash@_K@std@@U?$equal_to@_K@2@@std@@QAE@U?$hash@_K@1@U?$equal_to@_K@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
movzx ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Hash_oper1@$0A@U?$hash@_K@std@@@std@@QAE@U?$hash@_K@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Iterator_base12@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Iterator_base12@std@@QAE@ABU01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Iterator_base12@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Iterator_base12@std@@QAE@ABU01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Iterator_base12@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAE@ABV?$allocator@PBX@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAE@ABV?$allocator@PBX@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['ecx']
push ['ebx']
push ['esi']
push ['edi']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['ecx,', '[ebp+var_14]']
call ['??0?$_List_val@U?$_List_simple_types@PBX@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
call ['?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@XZ']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+4],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_14]']
call ['?_Alloc_proxy@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEXXZ']
jmp ['short', 'loc_2D89']
endp
__catch$??0?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAE@ABV?$allocator@PBX@1@@Z$0 proc near
mov ['edx,', '[ebp-14h]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN8_1']
retn
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_2D99']
endp
$LN8_1		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAE@ABV?$allocator@PBX@1@@Z$2 proc near
mov ['ecx,', '[ebp-14h]']
jmp ['??1?$_List_val@U?$_List_simple_types@PBX@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAE@ABV?$allocator@PBX@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAE@ABV?$allocator@PBX@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAE@ABV?$allocator@_K@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAE@ABV?$allocator@_K@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['ecx']
push ['ebx']
push ['esi']
push ['edi']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['ecx,', '[ebp+var_14]']
call ['??0?$_List_val@U?$_List_simple_types@_K@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
call ['?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@XZ']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+4],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_14]']
call ['?_Alloc_proxy@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEXXZ']
jmp ['short', 'loc_2E65']
endp
__catch$??0?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAE@ABV?$allocator@_K@1@@Z$0 proc near
mov ['edx,', '[ebp-14h]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN8_3']
retn
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_2E75']
endp
$LN8_3		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAE@ABV?$allocator@_K@1@@Z$2 proc near
mov ['ecx,', '[ebp-14h]']
jmp ['??1?$_List_val@U?$_List_simple_types@_K@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAE@ABV?$allocator@_K@1@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAE@ABV?$allocator@_K@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAE@ABV?$allocator@PBX@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAE@ABV?$allocator@PBX@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_buy@_KV?$allocator@_K@std@@@std@@QAE@ABV?$allocator@_K@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAE@ABV?$allocator@_K@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Adopt@_Iterator_base0@std@@QAEXPBX@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Adopt@_Iterator_base0@std@@QAEXPBX@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_val@U?$_List_simple_types@PBX@std@@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??0_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_val@U?$_List_simple_types@_K@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??0_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??0_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+18h],', '0']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QAE@U?$hash@PBX@1@U?$equal_to@PBX@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
movzx ['eax,', '[ebp+arg_4]']
push ['eax']
movzx ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Hash_oper2@$0A@U?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QAE@U?$hash@PBX@1@U?$equal_to@PBX@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@QAE@U?$hash@_K@1@U?$equal_to@_K@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
movzx ['eax,', '[ebp+arg_4]']
push ['eax']
movzx ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Hash_oper2@$0A@U?$hash@_K@std@@U?$equal_to@_K@2@@std@@QAE@U?$hash@_K@1@U?$equal_to@_K@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@QAE@ABV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@QAE@ABV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??0_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??0_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@D@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@U?$_List_node@_KPAX@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@D@std@@QAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@PBX@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@U?$_List_node@_KPAX@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@_K@std@@QAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['esi']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
call ['dword', 'ptr', 'ds:__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z$0 proc near
mov ['esi,', 'esp']
mov ['ecx,', '[ebp-10h]']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_14],', '0']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_3A5A']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '60h']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
or ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
mov ['esi,', 'esp']
push ['0']
push ['0']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '4']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['dword', 'ptr', 'ds:__imp_??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '1']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax+edx],', 'offset', '??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+4]']
sub ['eax,', '60h']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+ecx-4],', 'eax']
push ['0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
or ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z']
test ['eax,', 'eax']
jnz ['short', 'loc_3AF9']
mov ['esi,', 'esp']
push ['0']
push ['2']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '[ecx+4]']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0 proc near
mov ['eax,', '[ebp-14h]']
and ['eax,', '1']
jz ['$LN6']
and ['dword', 'ptr', '[ebp-14h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '60h']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
retn
endp
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '8']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '4']
jmp ['??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ']
endp
__ehhandler$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-10h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
lea ['ecx,', '[ebp+var_14+3]']
call ['??0?$allocator@D@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
mov ['[ebp+var_4],', '0']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
movzx ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z$0 proc	near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
lea ['ecx,', '[ebp+var_14+3]']
call ['??0?$allocator@D@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
mov ['[ebp+var_4],', '0']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
mov ['eax,', '[ebp+Str]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
lea ['ecx,', '[ebp+var_14+3]']
call ['??0?$allocator@D@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
mov ['[ebp+var_4],', '0']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['esi']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
call ['dword', 'ptr', 'ds:__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??0?$allocator@D@std@@QAE@XZ']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z']
push ['eax']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0 proc near
mov ['esi,', 'esp']
mov ['ecx,', '[ebp-10h]']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_14],', '0']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_3ED4']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+10h],', 'offset', '??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '68h']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['esi,', 'esp']
push ['0']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '18h']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['dword', 'ptr', 'ds:__imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+eax],', 'offset', '??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '68h']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
mov ['edx,', '[eax+4]']
mov ['eax,', '[ebp+var_10]']
mov ['[eax+edx-4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0	proc near
mov ['eax,', '[ebp-14h]']
and ['eax,', '1']
jz ['$LN5_2']
and ['dword', 'ptr', '[ebp-14h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '68h']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
retn
endp
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1	proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '20h']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-10h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$fpos@H@std@@QAE@H_J@Z proc	near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['[ecx+0Ch],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+10h],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$fpos@H@std@@QAE@_J@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+10h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$list@PBXV?$allocator@PBX@std@@@std@@QAE@ABV?$allocator@PBX@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAE@ABV?$allocator@PBX@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$list@_KV?$allocator@_K@std@@@std@@QAE@ABV?$allocator@_K@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_List_buy@_KV?$allocator@_K@std@@@std@@QAE@ABV?$allocator@_K@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$unordered_set@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@V?$allocator@PBX@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_8+3]']
call ['??0?$allocator@PBX@std@@QAE@XZ']
push ['eax']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_8+1]']
push ['eax']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_8]']
push ['ecx']
lea ['ecx,', '[ebp+var_8+2]']
call ['??0?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QAE@U?$hash@PBX@1@U?$equal_to@PBX@1@@Z']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@1@ABV?$allocator@PBX@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$unordered_set@_KU?$hash@_K@std@@U?$equal_to@_K@2@V?$allocator@_K@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_8+3]']
call ['??0?$allocator@_K@std@@QAE@XZ']
push ['eax']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_8+1]']
push ['eax']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_8]']
push ['ecx']
lea ['ecx,', '[ebp+var_8+2]']
call ['??0?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@QAE@U?$hash@_K@1@U?$equal_to@_K@1@@Z']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@1@ABV?$allocator@_K@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0DrawEventRecorder@gfx@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??0?$RefCounted@VDrawEventRecorder@gfx@mozilla@@@mozilla@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7DrawEventRecorder@gfx@mozilla@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Container_proxy@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Generic_error_category@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0error_category@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_Generic_error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Iostream_error_category@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Generic_error_category@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_Iostream_error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Iterator_base12@std@@QAE@ABU01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Iterator_base12@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_System_error_category@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Generic_error_category@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_System_error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0error_category@std@@QAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_4332']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefCounted@VDrawEventRecorder@gfx@mozilla@@@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['??1?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$list@PBXV?$allocator@PBX@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['??1?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$list@_KV?$allocator@_K@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Iterator_base12@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Iterator_base12@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Iterator_base12@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@@Z']
mov ['ecx,', '[ebp+var_4]']
call ['?_Free_proxy@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_List_val@U?$_List_simple_types@PBX@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@@Z']
mov ['ecx,', '[ebp+var_4]']
call ['?_Free_proxy@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_List_val@U?$_List_simple_types@_K@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_List_buy@_KV?$allocator@_K@std@@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_List_val@U?$_List_simple_types@PBX@std@@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??1_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_List_val@U?$_List_simple_types@_K@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??1_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??1_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??1_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??1_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+50h],', '0']
jz ['short', 'loc_4761']
mov ['ecx,', '[ebp+var_4]']
call ['?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+4Ch]']
test ['eax,', 'eax']
jz ['short', 'loc_4774']
mov ['ecx,', '[ebp+var_4]']
call ['?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax-60h]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+edx-60h],', 'offset', '??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx-60h]']
mov ['eax,', '[edx+4]']
sub ['eax,', '60h']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx-60h]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+ecx-64h],', 'eax']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '5Ch']
call ['??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '58h']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax-68h]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+edx-68h],', 'offset', '??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx-68h]']
mov ['eax,', '[edx+4]']
sub ['eax,', '68h']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx-68h]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+ecx-6Ch],', 'eax']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '50h']
call ['??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '48h']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$list@PBXV?$allocator@PBX@std@@@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$list@_KV?$allocator@_K@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$list@_KV?$allocator@_K@std@@@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_List_buy@_KV?$allocator@_K@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$unordered_set@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@V?$allocator@PBX@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$unordered_set@_KU?$hash@_K@std@@U?$equal_to@_K@2@V?$allocator@_K@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1DrawEventRecorder@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7DrawEventRecorder@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??1?$RefCounted@VDrawEventRecorder@gfx@mozilla@@@mozilla@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1DrawEventRecorderMemory@gfx@mozilla@@EAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7DrawEventRecorderMemory@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '60h']
call ['??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1DrawEventRecorderPrivate@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1DrawEventRecorderPrivate@gfx@mozilla@@UAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7DrawEventRecorderPrivate@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '34h']
call ['??1?$unordered_set@_KU?$hash@_K@std@@U?$equal_to@_K@2@V?$allocator@_K@2@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['??1?$unordered_set@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@V?$allocator@PBX@2@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1DrawEventRecorder@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1_Generic_error_category@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1error_category@std@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1_Iostream_error_category@std@@UAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Generic_error_category@std@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1_Iterator_base12@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_C]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
call ['?_Orphan_me@_Iterator_base12@std@@QAEXXZ']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_C]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4']
dd ['offset', '$LN3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1_System_error_category@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Generic_error_category@std@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1error_category@std@@UAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7error_category@std@@6B@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1locale@std@@QAE@XZ proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_4BDA']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['edx,', '[edx]']
mov ['esi,', 'esp']
mov ['ecx,', '[eax]']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['??$_DebugHeapDelete@V_Facet_base@std@@@std@@YAXPAV_Facet_base@0@@Z']
add ['esp,', '4']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??2@YAPAXIPAX@Z	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??3@YAXPAX0@Z	proc near		
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_4C44']
jmp ['short', 'loc_4C9A']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_4C5E']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
jmp ['short', 'loc_4C9A']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_me@_Iterator_base12@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN11']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
dd ['offset', '$LN10']
dd ['offset', '$LN8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 proc near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-18h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??8error_category@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+arg_0]']
jnz ['short', 'loc_4D40']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_4D47']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??8error_condition@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?category@error_condition@std@@QBEABVerror_category@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?category@error_condition@std@@QBEABVerror_category@2@XZ']
mov ['ecx,', 'eax']
call ['??8error_category@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_4DA6']
mov ['ecx,', '[ebp+var_4]']
call ['?value@error_condition@std@@QBEHXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?value@error_condition@std@@QBEHXZ']
cmp ['esi,', 'eax']
jnz ['short', 'loc_4DA6']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_4DAD']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??B?$fpos@H@std@@QBE_JXZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax]']
add ['edx,', '[ecx+8]']
mov ['esi,', '[eax+4]']
adc ['esi,', '[ecx+0Ch]']
mov ['eax,', 'edx']
mov ['edx,', 'esi']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_4E4F']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_4E4F']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', 'eax']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
mov ['ecx,', '[ebp+var_4]']
cmp ['[ecx+8],', 'eax']
jb ['short', 'loc_4E4F']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', 'eax']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
add ['esi,', '[eax+14h]']
mov ['edx,', '[ebp+var_4]']
cmp ['esi,', '[edx+8]']
ja ['short', 'loc_4ECC']
mov ['esi,', 'esp']
push ['4Fh']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_4E7A']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_4EA7']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['50h']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_4EA7']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['50h']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_28],', '0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['ecx,', '[ebp+var_20]']
call ['??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['edx,', '[ebp+var_28]']
or ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
dd ['offset', '$LN8_8']
dd ['offset', '$LN6_1']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z$0 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_28],', '0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['ecx,', '[ebp+var_20]']
call ['??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['edx,', '[ebp+var_28]']
or ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
dd ['offset', '$LN8_9']
dd ['offset', '$LN6_2']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z$0 proc	near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_5149']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
lea ['esi,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['esi,', '[eax+4]']
jb ['short', 'loc_5149']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[edx+ecx*4]']
cmp ['[eax+8],', 'edx']
jnb ['loc_51CF']
mov ['esi,', 'esp']
push ['9Fh']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_5177']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_51A7']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['0A0h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_51A7']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['0A0h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1BNG@JIGEKGDI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_5249']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
lea ['esi,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['esi,', '[eax+4]']
jb ['short', 'loc_5249']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[edx+ecx*4]']
cmp ['[eax+8],', 'edx']
jnb ['loc_52CF']
mov ['esi,', 'esp']
push ['9Fh']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_5277']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_52A7']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['0A0h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_52A7']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['0A0h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1BNO@ICKBMIEL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '60h']
call ['??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '60h']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '68h']
call ['??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '68h']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z	proc near
sub ['ecx,', '[ecx-4]']
jmp ['??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z proc near
sub ['ecx,', '[ecx-4]']
jmp ['??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_5412']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '60h']
call ['??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_5458']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '60h']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '60h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_549A']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '68h']
call ['??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_54E0']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '68h']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '68h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GDrawEventRecorder@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1DrawEventRecorder@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_5522']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GDrawEventRecorderFile@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1DrawEventRecorderFile@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_5562']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GDrawEventRecorderMemory@gfx@mozilla@@EAEPAXI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1DrawEventRecorderMemory@gfx@mozilla@@EAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_55A2']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GDrawEventRecorderPrivate@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1DrawEventRecorderPrivate@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_55E2']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G_Generic_error_category@std@@UAEPAXI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Generic_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_5622']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Iostream_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_5662']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G_System_error_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_System_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_56A2']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_Gerror_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_56E2']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_H@YGXPAXIHP6EPAX0@Z@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
js ['short', 'loc_5721']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['[ebp+arg_C]']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'ecx']
jmp ['short', 'loc_56FC']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['10h']
align ['10h']
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
call ['??0_Generic_error_category@std@@QAE@XZ']
push ['offset', '??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A']
call ['??0_Iostream_error_category@std@@QAE@XZ']
push ['offset', '??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
call ['??0_System_error_category@std@@QAE@XZ']
push ['offset', '??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
push ['0']
mov ['ecx,', 'offset', '?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A']
call ['dword', 'ptr', 'ds:__imp_??0id@locale@std@@QAE@I@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
push ['0']
mov ['ecx,', 'offset', '?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A']
call ['dword', 'ptr', 'ds:__imp_??0id@locale@std@@QAE@I@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__Eallocator_arg@std@@YAXXZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
xor ['eax,', 'eax']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__Epiecewise_construct@std@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
xor ['eax,', 'eax']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$yd']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
call ['??1_Generic_error_category@std@@UAE@XZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$yd']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A']
call ['??1_Iostream_error_category@std@@UAE@XZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$yd']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
call ['??1_System_error_category@std@@UAE@XZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Write@?$ElementStreamFormat@G@gfx@mozilla@@SAXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@ABG@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
push ['0']
push ['2']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['dword', 'ptr', 'ds:__imp_?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Write@?$ElementStreamFormat@H@gfx@mozilla@@SAXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@ABH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
push ['0']
push ['4']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['dword', 'ptr', 'ds:__imp_?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Write@?$ElementStreamFormat@I@gfx@mozilla@@SAXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@ABI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
push ['0']
push ['4']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['dword', 'ptr', 'ds:__imp_?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '20h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_596A']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_me@_Iterator_base12@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_59D5']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
cmp ['eax,', '[ebp+var_20]']
jz ['short', 'loc_59D5']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_28]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_me@_Iterator_base12@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[edx+4]']
mov ['[ecx+4],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_10]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_28]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
dd ['offset', '$LN11_0']
dd ['offset', '$LN8_0']
dd ['0FFFFFFD8h,', '4']
dd ['offset', '$LN9']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 proc near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-18h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 proc near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-28h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-28h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Alloc_proxy@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEXXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_C+3]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_2']
dd ['offset', '$LN3_2']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Alloc_proxy@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_C+3]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN4_8']
dd ['offset', '$LN3_8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_C+3]']
call ['?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_0']
dd ['offset', '$LN3_0']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_C+3]']
call ['?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN4_4']
dd ['offset', '$LN3_4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_C+3]']
call ['?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_11']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_10']
dd ['offset', '$LN3_10']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '1Ch']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
push ['1']
lea ['eax,', '[ebp+var_1C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@I@Z']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_5E2B']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_18]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
lea ['ecx,', '[ebp+var_1C+2]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['[ebp+var_24],', 'eax']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
call ['??$addressof@PAU?$_List_node@PBXPAX@std@@@std@@YAPAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
call ['??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['[ebp+var_28],', 'eax']
lea ['edx,', '[ebp+var_1C+1]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['[ebp+var_2C],', 'eax']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
call ['??$addressof@PAU?$_List_node@PBXPAX@std@@@std@@YAPAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
call ['??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z']
jmp ['short', 'loc_5ECA']
endp
__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z$0 proc near
push ['1']
mov ['edx,', '[ebp-18h]']
push ['edx']
lea ['eax,', '[ebp-1Ch]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN8_2']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_5EDA']
endp
$LN8_2		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-30h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '1Ch']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
push ['1']
lea ['eax,', '[ebp+var_1C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@I@Z']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_5F8B']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_18]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
lea ['ecx,', '[ebp+var_1C+2]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['[ebp+var_24],', 'eax']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
call ['??$addressof@PAU?$_List_node@_KPAX@std@@@std@@YAPAPAU?$_List_node@_KPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
call ['??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['[ebp+var_28],', 'eax']
lea ['edx,', '[ebp+var_1C+1]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['[ebp+var_2C],', 'eax']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
call ['??$addressof@PAU?$_List_node@_KPAX@std@@@std@@YAPAPAU?$_List_node@_KPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
call ['??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z']
jmp ['short', 'loc_602A']
endp
__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z$0 proc	near
push ['1']
mov ['edx,', '[ebp-18h]']
push ['edx']
lea ['eax,', '[ebp-1Ch]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@I@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN8_4']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_603A']
endp
$LN8_4		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-30h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+Size],', '1']
jnz ['short', 'loc_60A6']
lea ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
add ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?assign@?$char_traits@D@std@@SAXAADABD@Z']
add ['esp,', '8']
jmp ['short', 'loc_60C3']
movzx ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
add ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?assign@?$char_traits@D@std@@SAPADPADID@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Clrcont@_Iterator_base12@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '28h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
or ['eax,', '0Fh']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_14]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+var_18]']
jnb ['short', 'loc_614E']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'ecx']
jmp ['short', 'loc_61A0']
mov ['eax,', '[ebp+var_18]']
xor ['edx,', 'edx']
mov ['ecx,', '3']
div ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['ecx,', '[edx+18h]']
shr ['ecx,', '1']
cmp ['ecx,', 'eax']
ja ['short', 'loc_6168']
jmp ['short', 'loc_61A0']
mov ['edx,', '[ebp+var_14]']
mov ['esi,', '[edx+18h]']
shr ['esi,', '1']
mov ['ecx,', '[ebp+var_14]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
sub ['eax,', 'esi']
mov ['ecx,', '[ebp+var_14]']
cmp ['[ecx+18h],', 'eax']
ja ['short', 'loc_6195']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+18h]']
shr ['eax,', '1']
mov ['ecx,', '[ebp+var_14]']
add ['eax,', '[ecx+18h]']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_61A0']
mov ['ecx,', '[ebp+var_14]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
lea ['edx,', '[ebp+var_25]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_30]']
mov ['[ebp+var_20],', 'ecx']
jmp ['short', 'loc_6237']
endp
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
mov ['[ebp-10h],', 'esp']
mov ['edx,', '[ebp+8]']
mov ['[ebp-18h],', 'edx']
mov ['byte', 'ptr', '[ebp-4],', '2']
lea ['eax,', '[ebp-26h]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['[ebp-34h],', 'eax']
mov ['ecx,', '[ebp-18h]']
add ['ecx,', '1']
push ['ecx']
mov ['ecx,', '[ebp-34h]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z']
mov ['[ebp-38h],', 'eax']
mov ['edx,', '[ebp-38h]']
mov ['[ebp-20h],', 'edx']
jmp ['short', 'loc_6221']
endp
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
push ['0']
push ['1']
mov ['ecx,', '[ebp-14h]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN17']
retn
mov ['dword', 'ptr', '[ebp-4],', '1']
jmp ['short', 'loc_6231']
endp
$LN17		proc near		
mov ['dword', 'ptr', '[ebp-4],', '1']
mov ['eax,', 'offset', '$LN19']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_6247']
endp
$LN19		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
cmp ['dword', 'ptr', '[ebp+0Ch],', '0']
jbe ['short', 'loc_6266']
mov ['eax,', '[ebp+0Ch]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
mov ['ecx,', '[ebp-20h]']
push ['ecx']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
push ['0']
push ['1']
mov ['ecx,', '[ebp-14h]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
lea ['edx,', '[ebp-20h]']
push ['edx']
mov ['eax,', '[ebp-14h]']
add ['eax,', '4']
push ['eax']
lea ['ecx,', '[ebp-27h]']
push ['ecx']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z']
mov ['edx,', '[ebp-14h]']
mov ['eax,', '[ebp-18h]']
mov ['[edx+18h],', 'eax']
mov ['ecx,', '[ebp+0Ch]']
push ['ecx']
mov ['ecx,', '[ebp-14h]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN23']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp-0Ch]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '38h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
dd ['offset', '$LN22']
dd ['offset', '$LN20']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-3Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_7']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN4_6']
dd ['offset', '$LN3_6']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_13']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
dd ['offset', '$LN4_12']
dd ['offset', '$LN3_12']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0B0h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_BC]']
mov ['ecx,', '2Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_10],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_94],', '0']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+40h],', '0']
jz ['short', 'loc_645E']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'byte', 'ptr', '[ecx+45h]']
test ['edx,', 'edx']
jnz ['short', 'loc_646A']
mov ['al,', '1']
jmp ['loc_6744']
jmp ['loc_6744']
mov ['[ebp+var_18],', '8']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['esi,', 'esp']
push ['eax']
mov ['eax,', '[ebp+var_14]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_14]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_50],', 'eax']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_54],', 'eax']
lea ['ecx,', '[ebp+var_50]']
push ['ecx']
lea ['edx,', '[ebp+var_54]']
push ['edx']
call ['?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z']
add ['esp,', '8']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_64B6']
xor ['al,', 'al']
jmp ['loc_6744']
push ['0']
push ['8']
lea ['ecx,', '[ebp+var_44]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z']
mov ['[ebp+var_4],', '0']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
lea ['edx,', '[ebp+var_64]']
push ['edx']
lea ['ecx,', '[ebp+var_44]']
call ['?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ']
mov ['[ebp+var_98],', 'eax']
mov ['eax,', '[ebp+var_98]']
mov ['[ebp+var_9C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_9C]']
call ['??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ']
mov ['edi,', 'eax']
lea ['ecx,', '[ebp+var_44]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
add ['edi,', 'eax']
push ['edi']
lea ['ecx,', '[ebp+var_70]']
push ['ecx']
lea ['ecx,', '[ebp+var_44]']
call ['?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ']
mov ['[ebp+var_A0],', 'eax']
mov ['edx,', '[ebp+var_A0]']
mov ['[ebp+var_A4],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['ecx,', '[ebp+var_A4]']
call ['??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ']
push ['eax']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '48h']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['ecx,', '[ecx+40h]']
call ['dword', 'ptr', 'ds:__imp_?unshift@?$codecvt@DDH@std@@QBEHAAHPAD1AAPAD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_58],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_70]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_64]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
mov ['edx,', '[ebp+var_58]']
mov ['[ebp+var_A8],', 'edx']
cmp ['[ebp+var_A8],', '0']
jz ['short', 'loc_6599']
cmp ['[ebp+var_A8],', '1']
jz ['short', 'loc_65A0']
cmp ['[ebp+var_A8],', '3']
jz ['loc_66F4']
jmp ['loc_6712']
mov ['eax,', '[ebp+var_14]']
mov ['byte', 'ptr', '[eax+45h],', '0']
lea ['ecx,', '[ebp+var_7C]']
push ['ecx']
lea ['ecx,', '[ebp+var_44]']
call ['?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ']
mov ['[ebp+var_AC],', 'eax']
mov ['edx,', '[ebp+var_AC]']
mov ['[ebp+var_B0],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['ecx,', '[ebp+var_B0]']
call ['??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ']
mov ['ecx,', '[ebp+var_20]']
sub ['ecx,', 'eax']
mov ['[ebp+Count],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_7C]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
cmp ['[ebp+Count],', '0']
jbe ['short', 'loc_6657']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+50h]']
push ['eax']
mov ['ecx,', '[ebp+Count]']
push ['ecx']
push ['1']
lea ['edx,', '[ebp+var_8C]']
push ['edx']
lea ['ecx,', '[ebp+var_44]']
call ['?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ']
mov ['[ebp+var_B4],', 'eax']
mov ['eax,', '[ebp+var_B4]']
mov ['[ebp+var_B8],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['ecx,', '[ebp+var_94]']
or ['ecx,', '1']
mov ['[ebp+var_94],', 'ecx']
mov ['ecx,', '[ebp+var_B8]']
call ['??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__fwrite']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['[ebp+Count],', 'eax']
jz ['short', 'loc_6657']
mov ['[ebp+var_BC],', '1']
jmp ['short', 'loc_6661']
mov ['[ebp+var_BC],', '0']
mov ['dl,', 'byte', 'ptr', '[ebp+var_BC]']
mov ['[ebp+var_7D],', 'dl']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_94]']
and ['eax,', '1']
jz ['short', 'loc_668E']
and ['[ebp+var_94],', '0FFFFFFFEh']
lea ['ecx,', '[ebp+var_8C]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
movzx ['ecx,', '[ebp+var_7D]']
test ['ecx,', 'ecx']
jz ['short', 'loc_66B7']
mov ['[ebp+var_8D],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_44]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['al,', '[ebp+var_8D]']
jmp ['loc_6744']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'byte', 'ptr', '[edx+45h]']
test ['eax,', 'eax']
jnz ['short', 'loc_66E0']
mov ['[ebp+var_8E],', '1']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_44]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['al,', '[ebp+var_8E]']
jmp ['short', 'loc_6744']
cmp ['[ebp+Count],', '0']
jnz ['short', 'loc_66F2']
push ['0']
push ['8']
lea ['ecx,', '[ebp+var_44]']
call ['?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z']
jmp ['short', 'loc_6730']
mov ['[ebp+var_8F],', '1']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_44]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['al,', '[ebp+var_8F]']
jmp ['short', 'loc_6744']
mov ['[ebp+var_90],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_44]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['al,', '[ebp+var_90]']
jmp ['short', 'loc_6744']
jmp ['loc_64C9']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_44]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN31_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_10]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '0BCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN30_2']
dd ['offset', '$LN27']
dd ['0FFFFFFBCh,', '1Ch']
dd ['offset', '$LN28_1']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$0 proc near
lea ['ecx,', '[ebp-44h]']
jmp ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
endp
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$1 proc near
lea ['ecx,', '[ebp-64h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$2 proc near
lea ['ecx,', '[ebp-70h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$3 proc near
lea ['ecx,', '[ebp-7Ch]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$4 proc near
mov ['eax,', '[ebp-94h]']
and ['eax,', '1']
jz ['$LN25']
and ['dword', 'ptr', '[ebp-94h],', '0FFFFFFFEh']
lea ['ecx,', '[ebp-8Ch]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0BCh]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+14h],', 'ecx']
lea ['edx,', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
add ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?assign@?$char_traits@D@std@@SAXAADABD@Z']
add ['esp,', '8']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Free_proxy@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN4_3']
dd ['offset', '$LN3_3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Free_proxy@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_10']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN4_9']
dd ['offset', '$LN3_9']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN4_1']
dd ['offset', '$LN3_1']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAE@XZ']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN4_5']
dd ['offset', '$LN3_5']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAE@XZ']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_12']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN4_11']
dd ['offset', '$LN3_11']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@PBXPAX@std@@@std@@YAPAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@PBXPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@PBXPAX@std@@@std@@YAPAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['eax,', '[ebp+var_8+2]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@PBXPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z']
push ['1']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_8+1]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@_KPAX@std@@@std@@YAPAPAU?$_List_node@_KPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@_KPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@@Z']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@_KPAX@std@@@std@@YAPAPAU?$_List_node@_KPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['eax,', '[ebp+var_8+2]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@_KPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@@Z']
push ['1']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_8+1]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@I@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Freenode@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@PBXPAX@std@@@std@@YAPAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@PBXPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@PBXPAX@std@@@std@@YAPAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['eax,', '[ebp+var_8+2]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@PBXPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?_Myval@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPBXPAU?$_List_node@PBXPAX@2@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PBX@std@@YAPAPBXAAPBX@Z']
add ['esp,', '4']
push ['eax']
lea ['edx,', '[ebp+var_8+1]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PBX@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPBX@Z']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Freenode@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@_KPAX@std@@@std@@YAPAPAU?$_List_node@_KPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@_KPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@@Z']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@_KPAX@std@@@std@@YAPAPAU?$_List_node@_KPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['eax,', '[ebp+var_8+2]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@_KPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@@Z']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?_Myval@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAA_KPAU?$_List_node@_KPAX@2@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@_K@std@@YAPA_KAA_K@Z']
add ['esp,', '4']
push ['eax']
lea ['edx,', '[ebp+var_8+1]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@_K@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPA_K@Z']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@I@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_6F14']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_6F1E']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
cmp ['edx,', '[ecx+0Ch]']
jnb ['short', 'loc_6F66']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+eax*4]']
mov ['[ebp+var_10],', 'ecx']
jmp ['short', 'loc_6F6D']
mov ['[ebp+var_10],', '0']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_6F86']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
movzx ['edx,', 'byte', 'ptr', '[ecx+14h]']
test ['edx,', 'edx']
jnz ['short', 'loc_6F8D']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_6FC5']
jmp ['short', 'loc_6FC5']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+0Ch]']
jnb ['short', 'loc_6FBB']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+ecx*4]']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_6FC2']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_14]']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jnz ['short', 'loc_701F']
mov ['ecx,', '[ebp+var_8]']
or ['ecx,', '4']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '2']
jnz ['short', 'loc_7030']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '8']
jz ['short', 'loc_7041']
mov ['edx,', '[ebp+var_8]']
or ['edx,', '8']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '4']
jz ['short', 'loc_7052']
mov ['ecx,', '[ebp+var_8]']
or ['ecx,', '10h']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+Size],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
jnb ['short', 'loc_708F']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_70AF']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
jmp ['short', 'loc_70F9']
movzx ['edx,', '[ebp+arg_4]']
test ['edx,', 'edx']
jz ['short', 'loc_70E9']
cmp ['[ebp+arg_0],', '10h']
jnb ['short', 'loc_70E9']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+14h]']
jnb ['short', 'loc_70D0']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+Size],', 'edx']
jmp ['short', 'loc_70D9']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+Size],', 'ecx']
mov ['edx,', '[ebp+Size]']
push ['edx']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
jmp ['short', 'loc_70F9']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_70F9']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
cmp ['[ebp+arg_0],', '0']
jbe ['short', 'loc_7108']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_710F']
mov ['[ebp+var_C],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_C]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Grow_to@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEII@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '1']
sub ['eax,', 'ecx']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_716A']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_7175']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '1']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_7189']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Grow_to@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '1']
sub ['eax,', 'ecx']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_71E2']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_71ED']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '1']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_7201']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Init@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
shl ['ecx,', '1']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['edx,', '[ebp+arg_0]']
sub ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+1Ch],', 'edx']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+20h],', 'edx']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Init@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
shl ['ecx,', '1']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['edx,', '[ebp+arg_0]']
sub ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+1Ch],', 'edx']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+20h],', 'edx']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_4],', '1']
jnz ['short', 'loc_72FC']
mov ['[ebp+var_18],', '1']
jmp ['short', 'loc_7303']
mov ['[ebp+var_18],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_18]']
mov ['[eax+4Ch],', 'cl']
mov ['edx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[edx+45h],', '0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_737F']
mov ['eax,', '1']
test ['eax,', 'eax']
jz ['short', 'loc_737F']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
mov ['[ebp+var_14],', 'ecx']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx+50h],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', 'ds:?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA']
mov ['[ecx+48h],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+40h],', '0']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+Dst],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+38h],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['[ecx+3Ch],', 'edx']
cmp ['[ebp+Size],', '0']
jz ['loc_74E5']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '6']
cmp ['ecx,', '6']
jz ['loc_74E5']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['?allocate@?$allocator@D@std@@QAEPADI@Z']
mov ['[ebp+Dst],', 'eax']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '[ebp+Size]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+38h],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+3Ch]']
and ['eax,', '4']
jnz ['short', 'loc_745C']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '[ebp+Size]']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+3Ch]']
and ['edx,', '2']
jnz ['short', 'loc_74D6']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '18h']
jz ['short', 'loc_747D']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '[ebp+Size]']
mov ['[ebp+var_C],', 'edx']
jmp ['short', 'loc_7483']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '[ebp+Size]']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_74D6']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+Dst]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
or ['ecx,', '1']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+3Ch],', 'ecx']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['dword', 'ptr', 'ds:__imp_?always_noconv@codecvt_base@std@@QBE_NXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_752C']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+40h],', '0']
jmp ['short', 'loc_7547']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx+40h],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '50h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_60]']
mov ['ecx,', '14h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_58],', '0']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['eax,', '[ebp+var_14]']
jnz ['short', 'loc_75C9']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_C]']
cmp ['ecx,', '[eax+4]']
jb ['short', 'loc_75C9']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+arg_C]']
jnb ['short', 'loc_75EA']
mov ['esi,', 'esp']
push ['67Ah']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_C]']
sub ['edx,', '[ecx+4]']
sar ['edx,', '2']
mov ['[ebp+var_18],', 'edx']
cmp ['[ebp+arg_10],', '0']
jnz ['short', 'loc_7604']
jmp ['loc_7973']
mov ['ecx,', '[ebp+var_14]']
call ['?_Unused_capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_10]']
jnb ['loc_7802']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+var_14]']
call ['?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
sub ['eax,', 'esi']
cmp ['eax,', '[ebp+arg_10]']
jnb ['short', 'loc_7636']
mov ['ecx,', '[ebp+var_14]']
call ['?_Xlen@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXXZ']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
add ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Grow_to@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEII@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
lea ['ecx,', '[ebp+var_45]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[ebp+var_20],', 'eax']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_C]']
sub ['eax,', '[edx+4]']
sar ['eax,', '2']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_28],', '0']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
call ['??$addressof@$$CBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_20]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '1']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z']
mov ['edx,', '[ebp+var_28]']
add ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_20]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z']
jmp ['short', 'loc_775D']
endp
__catch$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0 proc near
cmp ['dword', 'ptr', '[ebp-28h],', '1']
jle ['short', 'loc_770B']
mov ['eax,', '[ebp-24h]']
mov ['ecx,', '[ebp-20h]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['eax,', '[ebp-20h]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
cmp ['dword', 'ptr', '[ebp-28h],', '0']
jle ['short', 'loc_7733']
mov ['ecx,', '[ebp-24h]']
mov ['edx,', '[ebp-20h]']
lea ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+18h]']
lea ['edx,', '[eax+ecx*4]']
push ['edx']
mov ['eax,', '[ebp-24h]']
mov ['ecx,', '[ebp-20h]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['ecx,', '[ebp-14h]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['eax,', '[ebp-1Ch]']
push ['eax']
mov ['ecx,', '[ebp-20h]']
push ['ecx']
lea ['edx,', '[ebp-46h]']
push ['edx']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN26']
retn
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_776D']
endp
$LN26		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
add ['eax,', '[ebp+arg_10]']
mov ['[ebp+arg_10],', 'eax']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_77C4']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[edx+0Ch]']
sub ['ecx,', '[eax+4]']
sar ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+4]']
push ['eax']
lea ['ecx,', '[ebp+var_47]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_14]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+var_20]']
lea ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+var_14]']
mov ['[edx+0Ch],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_20]']
lea ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_20]']
mov ['[ecx+4],', 'edx']
jmp ['loc_7973']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', '[ebp+arg_C]']
sar ['ecx,', '2']
cmp ['ecx,', '[ebp+arg_10]']
jnb ['loc_78F4']
mov ['edx,', '[ebp+arg_14]']
mov ['eax,', '[edx]']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ebp+arg_C]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
call ['??$addressof@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
sub ['eax,', '[ebp+arg_C]']
sar ['eax,', '2']
mov ['ecx,', '[ebp+arg_10]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z']
jmp ['short', 'loc_789E']
endp
__catch$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$2 proc near
mov ['ecx,', '[ebp-14h]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '[ebp+18h]']
lea ['ecx,', '[edx+eax*4]']
push ['ecx']
mov ['edx,', '[ebp+18h]']
mov ['eax,', '[ebp+14h]']
lea ['ecx,', '[eax+edx*4]']
push ['ecx']
mov ['ecx,', '[ebp-14h]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN28']
retn
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_78AE']
endp
$LN28		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+arg_10]']
lea ['edx,', '[eax+ecx*4]']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
shl ['edx,', '2']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', 'edx']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
call ['??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z']
add ['esp,', '0Ch']
jmp ['short', 'loc_7973']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_3C],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_44]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
shl ['ecx,', '2']
mov ['edx,', '[ebp+var_44]']
sub ['edx,', 'ecx']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['edx,', '[ebp+var_44]']
push ['edx']
mov ['eax,', '[ebp+arg_10]']
shl ['eax,', '2']
mov ['ecx,', '[ebp+var_44]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
call ['??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00@Z']
add ['esp,', '0Ch']
lea ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ebp+arg_C]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
call ['??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z']
add ['esp,', '0Ch']
lea ['edx,', '[ebp+var_54]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['[ebp+var_5C],', 'eax']
mov ['eax,', '[ebp+var_5C]']
mov ['[ebp+var_60],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_60]']
call ['??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
mov ['eax,', '[ebp+var_58]']
or ['eax,', '1']
mov ['[ebp+var_58],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_54]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN33']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '60h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['4']
dd ['offset', '$LN32']
dd ['offset', '$LN29']
dd ['0FFFFFFC4h,', '4']
dd ['offset', '$LN30']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$4 proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$5 proc near
lea ['ecx,', '[ebp-54h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-64h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '50h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_60]']
mov ['ecx,', '14h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_58],', '0']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['eax,', '[ebp+var_14]']
jnz ['short', 'loc_7ABD']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_C]']
cmp ['ecx,', '[eax+4]']
jb ['short', 'loc_7ABD']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+arg_C]']
jnb ['short', 'loc_7ADE']
mov ['esi,', 'esp']
push ['67Ah']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_C]']
sub ['edx,', '[ecx+4]']
sar ['edx,', '2']
mov ['[ebp+var_18],', 'edx']
cmp ['[ebp+arg_10],', '0']
jnz ['short', 'loc_7AF8']
jmp ['loc_7E67']
mov ['ecx,', '[ebp+var_14]']
call ['?_Unused_capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_10]']
jnb ['loc_7CF6']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+var_14]']
call ['?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
sub ['eax,', 'esi']
cmp ['eax,', '[ebp+arg_10]']
jnb ['short', 'loc_7B2A']
mov ['ecx,', '[ebp+var_14]']
call ['?_Xlen@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXXZ']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
add ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Grow_to@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEII@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
lea ['ecx,', '[ebp+var_45]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[ebp+var_20],', 'eax']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_C]']
sub ['eax,', '[edx+4]']
sar ['eax,', '2']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_28],', '0']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
call ['??$addressof@$$CBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_20]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '1']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z']
mov ['edx,', '[ebp+var_28]']
add ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_20]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z']
jmp ['short', 'loc_7C51']
endp
__catch$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$0 proc near
cmp ['dword', 'ptr', '[ebp-28h],', '1']
jle ['short', 'loc_7BFF']
mov ['eax,', '[ebp-24h]']
mov ['ecx,', '[ebp-20h]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['eax,', '[ebp-20h]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
cmp ['dword', 'ptr', '[ebp-28h],', '0']
jle ['short', 'loc_7C27']
mov ['ecx,', '[ebp-24h]']
mov ['edx,', '[ebp-20h]']
lea ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+18h]']
lea ['edx,', '[eax+ecx*4]']
push ['edx']
mov ['eax,', '[ebp-24h]']
mov ['ecx,', '[ebp-20h]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['ecx,', '[ebp-14h]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['eax,', '[ebp-1Ch]']
push ['eax']
mov ['ecx,', '[ebp-20h]']
push ['ecx']
lea ['edx,', '[ebp-46h]']
push ['edx']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN26_0']
retn
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_7C61']
endp
$LN26_0		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
add ['eax,', '[ebp+arg_10]']
mov ['[ebp+arg_10],', 'eax']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_7CB8']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[edx+0Ch]']
sub ['ecx,', '[eax+4]']
sar ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+4]']
push ['eax']
lea ['ecx,', '[ebp+var_47]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_14]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+var_20]']
lea ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+var_14]']
mov ['[edx+0Ch],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_20]']
lea ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_20]']
mov ['[ecx+4],', 'edx']
jmp ['loc_7E67']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', '[ebp+arg_C]']
sar ['ecx,', '2']
cmp ['ecx,', '[ebp+arg_10]']
jnb ['loc_7DE8']
mov ['edx,', '[ebp+arg_14]']
mov ['eax,', '[edx]']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ebp+arg_C]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
call ['??$addressof@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
sub ['eax,', '[ebp+arg_C]']
sar ['eax,', '2']
mov ['ecx,', '[ebp+arg_10]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z']
jmp ['short', 'loc_7D92']
endp
__catch$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$2 proc near
mov ['ecx,', '[ebp-14h]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '[ebp+18h]']
lea ['ecx,', '[edx+eax*4]']
push ['ecx']
mov ['edx,', '[ebp+18h]']
mov ['eax,', '[ebp+14h]']
lea ['ecx,', '[eax+edx*4]']
push ['ecx']
mov ['ecx,', '[ebp-14h]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN28_0']
retn
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_7DA2']
endp
$LN28_0		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+arg_10]']
lea ['edx,', '[eax+ecx*4]']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
shl ['edx,', '2']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', 'edx']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
call ['??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z']
add ['esp,', '0Ch']
jmp ['short', 'loc_7E67']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_3C],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_44]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
shl ['ecx,', '2']
mov ['edx,', '[ebp+var_44]']
sub ['edx,', 'ecx']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['edx,', '[ebp+var_44]']
push ['edx']
mov ['eax,', '[ebp+arg_10]']
shl ['eax,', '2']
mov ['ecx,', '[ebp+var_44]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
call ['??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00@Z']
add ['esp,', '0Ch']
lea ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ebp+arg_C]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
call ['??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z']
add ['esp,', '0Ch']
lea ['edx,', '[ebp+var_54]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['[ebp+var_5C],', 'eax']
mov ['eax,', '[ebp+var_5C]']
mov ['[ebp+var_60],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_60]']
call ['??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
mov ['eax,', '[ebp+var_58]']
or ['eax,', '1']
mov ['[ebp+var_58],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_54]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN33_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '60h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['4']
dd ['offset', '$LN32_0']
dd ['offset', '$LN29_0']
dd ['0FFFFFFC4h,', '4']
dd ['offset', '$LN30_0']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$4 proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$5 proc near
lea ['ecx,', '[ebp-54h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-64h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_7F74']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
cmp ['[ebp+arg_0],', 'eax']
jb ['short', 'loc_7F74']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
mov ['ecx,', '[ebp+var_4]']
add ['eax,', '[ecx+14h]']
cmp ['eax,', '[ebp+arg_0]']
ja ['short', 'loc_7F7A']
xor ['al,', 'al']
jmp ['short', 'loc_7F7C']
jmp ['short', 'loc_7F7C']
mov ['al,', '1']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+50h],', '0']
jz ['short', 'loc_7FBD']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+50h]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp___lock_file']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+18h],', '10h']
jb ['short', 'loc_8000']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_8009']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+18h],', '10h']
jb ['short', 'loc_8050']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_8059']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Myval@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPBXPAU?$_List_node@PBXPAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '8']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Myval@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAA_KPAU?$_List_node@_KPAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '8']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Orphan_me@_Iterator_base12@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_811B']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
add ['edx,', '4']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_80DE']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
cmp ['edx,', '[ebp+var_4]']
jz ['short', 'loc_80DE']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
add ['ecx,', '4']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_80BF']
mov ['edx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[edx],', '0']
jnz ['short', 'loc_8107']
mov ['esi,', 'esp']
push ['0C9h']
push ['offset', '??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['dword', 'ptr', 'ds:__imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_81F6']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_81F6']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[edx+8]']
cmp ['ecx,', '[eax+4]']
jz ['short', 'loc_81CA']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_81D9']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+8]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_81D9']
mov ['edx,', '[ebp+var_20]']
mov ['ecx,', '[edx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_81F4']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax]']
call ['?_Clrcont@_Iterator_base12@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_20]']
mov ['ecx,', '[ecx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
jmp ['short', 'loc_819F']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
dd ['offset', '$LN12_0']
dd ['offset', '$LN10_0']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z$0 proc	near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-18h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['dword', 'ptr', 'ds:__imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_8352']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_8352']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[edx+8]']
cmp ['ecx,', '[eax+4]']
jz ['short', 'loc_8326']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_8335']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+8]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_8335']
mov ['edx,', '[ebp+var_20]']
mov ['ecx,', '[edx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_8350']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax]']
call ['?_Clrcont@_Iterator_base12@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_20]']
mov ['ecx,', '[ecx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
jmp ['short', 'loc_82FB']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
dd ['offset', '$LN12_2']
dd ['offset', '$LN10_2']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z$0	proc near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-18h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
call ['dword', 'ptr', 'ds:__imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_84A5']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_84A5']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+arg_0]']
jb ['short', 'loc_8479']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx+8]']
jnb ['short', 'loc_8488']
mov ['ecx,', '[ebp+var_20]']
mov ['ecx,', '[ecx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_84A3']
mov ['edx,', '[ebp+var_20]']
mov ['ecx,', '[edx]']
call ['?_Clrcont@_Iterator_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
jmp ['short', 'loc_8457']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN12_1']
dd ['offset', '$LN10_1']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z$0 proc	near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-18h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
call ['dword', 'ptr', 'ds:__imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_85F9']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_85F9']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+arg_0]']
jb ['short', 'loc_85CD']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx+8]']
jnb ['short', 'loc_85DC']
mov ['ecx,', '[ebp+var_20]']
mov ['ecx,', '[ecx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_85F7']
mov ['edx,', '[ebp+var_20]']
mov ['ecx,', '[edx]']
call ['?_Clrcont@_Iterator_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
jmp ['short', 'loc_85AB']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
dd ['offset', '$LN12_3']
dd ['offset', '$LN10_3']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z$0	proc near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-18h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '44h']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_86F6']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+3Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+38h]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+38h]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '44h']
cmp ['eax,', 'ecx']
jz ['short', 'loc_8763']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+38h],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+3Ch],', 'eax']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '45h']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '44h']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '44h']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
movzx ['eax,', '[ebp+arg_0]']
test ['eax,', 'eax']
jnz ['short', 'loc_87C4']
jmp ['short', 'loc_8837']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+18h],', '10h']
jb ['short', 'loc_8837']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
push ['ecx']
lea ['edx,', '[ebp+var_C+3]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z']
cmp ['[ebp+Size],', '0']
jbe ['short', 'loc_8816']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '4']
push ['edx']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
add ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
lea ['eax,', '[ebp+var_C+2]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+18h],', '0Fh']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '1']
jz ['short', 'loc_88FB']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_88B0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_88C5']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_8]']
sub ['edx,', 'eax']
push ['edx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['?deallocate@?$allocator@D@std@@QAEXPADI@Z']
mov ['esi,', 'esp']
push ['0']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+38h],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+3Ch]']
and ['edx,', '0FFFFFFFEh']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+3Ch],', 'edx']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Tidy@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?clear@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Tidy@?$list@_KV?$allocator@_K@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?clear@?$list@_KV?$allocator@_K@std@@@std@@QAEXXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Tidy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_8A2D']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+0Ch]']
sub ['ecx,', '[eax+4]']
sar ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Tidy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_8ACD']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+0Ch]']
sub ['ecx,', '[eax+4]']
sar ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninitialized_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
lea ['eax,', '[eax+edx*4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_8']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
dd ['offset', '$LN4_7']
dd ['offset', '$LN3_7']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninitialized_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
lea ['eax,', '[eax+edx*4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_14']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
dd ['offset', '$LN4_13']
dd ['offset', '$LN3_13']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unchecked_end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unchecked_end@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unchecked_end@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+50h],', '0']
jz ['short', 'loc_8CFD']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+50h]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp___unlock_file']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unused_capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+8]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unused_capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+8]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['offset', '??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Xlength_error@std@@YAXPBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Xlen@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['offset', '??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Xlength_error@std@@YAXPBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Xlen@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['offset', '??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Xlength_error@std@@YAXPBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['offset', '??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Xout_of_range@std@@YAXPBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@D@std@@QAEPADI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@I@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEPAU?$_List_node@_KPAX@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@D@std@@QAEPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@D@std@@YAPADIPAD@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@U?$_List_node@PBXPAX@std@@@std@@YAPAU?$_List_node@PBXPAX@0@IPAU10@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEPAU?$_List_node@_KPAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@U?$_List_node@_KPAX@std@@@std@@YAPAU?$_List_node@_KPAX@0@IPAU10@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPAV10@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPAV10@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', 'ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB']
sub ['ecx,', '[eax+14h]']
cmp ['ecx,', '[ebp+Size]']
ja ['short', 'loc_90E8']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
cmp ['[ebp+Size],', '0']
jbe ['short', 'loc_9133']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
add ['eax,', '[ebp+Size]']
mov ['[ebp+var_8],', 'eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_9133']
movzx ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+Size],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_9174']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+Size],', 'eax']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+Size]']
jnb ['short', 'loc_9190']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+Size],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+arg_0]']
jnz ['short', 'loc_91B7']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z']
jmp ['short', 'loc_91F9']
push ['0']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_91F9']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ']
add ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+Size]']
cmp ['eax,', 'ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB']
jnz ['short', 'loc_922D']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
push ['0']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_9261']
movzx ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['490h']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['?length@?$char_traits@D@std@@SAIPBD@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+Size],', '0']
jz ['short', 'loc_92EE']
push ['47Fh']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_9321']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
mov ['ecx,', '[ebp+Src]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z']
jmp ['short', 'loc_935E']
push ['0']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_935B']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$char_traits@D@std@@SAPADPADID@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+Size]']
push ['eax']
movsx ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['_memset']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '30h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?clear@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXXZ']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_20]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+var_30]']
mov ['[ebp+var_34],', 'eax']
mov ['[ebp+var_4],', '0']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
mov ['edx,', '[ebp+var_34]']
push ['edx']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_38],', 'eax']
lea ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_3C],', 'eax']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-38h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '30h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?clear@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXXZ']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_20]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+var_30]']
mov ['[ebp+var_34],', 'eax']
mov ['[ebp+var_4],', '0']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
mov ['edx,', '[ebp+var_34]']
push ['edx']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_38],', 'eax']
lea ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_3C],', 'eax']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$0 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-38h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?category@error_code@std@@QBEABVerror_category@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?clear@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['ecx,', '[edx+4]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+8],', '0']
jmp ['short', 'loc_9720']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx+4]']
jz ['short', 'loc_974A']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Freenode@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@@Z']
jmp ['short', 'loc_971A']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?clear@?$list@_KV?$allocator@_K@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['ecx,', '[edx+4]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+8],', '0']
jmp ['short', 'loc_97D8']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx+4]']
jz ['short', 'loc_9802']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Freenode@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@@Z']
jmp ['short', 'loc_97D2']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?clear@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['[ecx+8],', 'eax']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?clear@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['[ecx+8],', 'eax']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+50h],', '0']
jnz ['short', 'loc_98E8']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_9922']
mov ['ecx,', '[ebp+var_4]']
call ['?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_98FE']
mov ['[ebp+var_8],', '0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+50h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__fclose']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_9922']
mov ['[ebp+var_8],', '0']
push ['2']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z']
mov ['eax,', '[ebp+var_8]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ']
test ['eax,', 'eax']
jnz ['short', 'loc_997E']
mov ['esi,', 'esp']
push ['0']
push ['2']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '[ecx+4]']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?construct@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@ABV32@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_99D7']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_8]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_99DE']
mov ['[ebp+var_C],', '0']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?construct@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@ABV32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_9A37']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_8]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_9A3E']
mov ['[ebp+var_C],', '0']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+Size],', '0']
jnz ['short', 'loc_9A69']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_9A80']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@D@std@@QAEXPADI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp_?_Syserror_map@std@@YAPBDH@Z']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_9D8E']
call ['?generic_category@std@@YAABVerror_category@1@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_9DA3']
jmp ['short', 'loc_9DA3']
call ['?system_category@std@@YAABVerror_category@1@XZ']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?eof@?$char_traits@D@std@@SAHXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
or ['eax,', '0FFFFFFFFh']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?eq@?$char_traits@D@std@@SA_NABD0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_4]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['ecx,', 'eax']
jnz ['short', 'loc_9E14']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_9E1B']
mov ['[ebp+var_4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_9E44']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_9E4B']
mov ['[ebp+var_4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?category@error_code@std@@QBEABVerror_category@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??8error_category@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_9E99']
mov ['ecx,', '[ebp+arg_0]']
call ['?value@error_code@std@@QBEHXZ']
cmp ['eax,', '[ebp+arg_4]']
jnz ['short', 'loc_9E99']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_9EA0']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', 'eax']
call ['??8error_condition@std@@QBE_NABV01@@Z']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_9F31']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+Dst],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_9F81']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
sub ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
ja ['short', 'loc_9F9D']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
jmp ['short', 'loc_9FE3']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_9FE3']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
add ['eax,', '[ebp+arg_0]']
mov ['[ebp+Dst],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['?move@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?generic_category@std@@YAABVerror_category@1@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_18],', '0']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_18]']
or ['ecx,', '1']
mov ['[ebp+var_18],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0 proc	near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_18],', '0']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_18]']
or ['ecx,', '1']
mov ['[ebp+var_18],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$0 proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?length@?$char_traits@D@std@@SAIPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_A1F6']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_A205']
mov ['edx,', '[ebp+Str]']
push ['edx']
call ['_strlen']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAIABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAIABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator@D@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
or ['eax,', '0FFFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QBEIXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '3FFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '3FFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAIABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@_Alloc_max_size@std@@SAIHABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAIABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@_Alloc_max_size@std@@SAIHABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@D@std@@QBEIXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@2@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QBEIXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QBEIXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '1']
ja ['short', 'loc_A3DB']
mov ['[ebp+var_10],', '1']
jmp ['short', 'loc_A3E4']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBEIXZ']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBEIXZ']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+Str],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_C],', '0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp_?_Syserror_map@std@@YAPBDH@Z']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_A4B1']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+Str],', 'ecx']
jmp ['short', 'loc_A4B8']
mov ['[ebp+Str],', 'offset', '??_C@_0O@BFJCFAAK@unknown?5error?$AA@']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_C]']
or ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_4],', '1']
jnz ['short', 'loc_A525']
push ['offset', '??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_A541']
jmp ['short', 'loc_A541']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+Str],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_C],', '0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp_?_Winerror_map@std@@YAPBDH@Z']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_A59D']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+Str],', 'ecx']
jmp ['short', 'loc_A5A4']
mov ['[ebp+Str],', 'offset', '??_C@_0O@BFJCFAAK@unknown?5error?$AA@']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_C]']
or ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+Size],', '0']
jnz ['short', 'loc_A5EA']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_A60B']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?name@_Generic_error_category@std@@UBEPBDXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_07DCLBNMLN@generic?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?name@_Iostream_error_category@std@@UBEPBDXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_08LLGCOLLL@iostream?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?name@_System_error_category@std@@UBEPBDXZ proc	near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_06FHFOAHML@system?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?not_eof@?$char_traits@D@std@@SAHABH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['ecx,', '[ebp+arg_0]']
cmp ['[ecx],', 'eax']
jz ['short', 'loc_A692']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_A6B1']
call ['?eof@?$char_traits@D@std@@SAHXZ']
test ['eax,', 'eax']
jnz ['short', 'loc_A6A4']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_A6AB']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[eax+50h],', '0']
jnz ['short', 'loc_A731']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp_?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_A735']
xor ['eax,', 'eax']
jmp ['short', 'loc_A790']
push ['1']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_18]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['dword', 'ptr', 'ds:__imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
call ['??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_18]']
call ['??1locale@std@@QAE@XZ']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1locale@std@@QAE@XZ']
endp
__ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_E8]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_10],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_B8],', '0']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_68],', 'eax']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_68]']
push ['ecx']
call ['?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z']
add ['esp,', '8']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_A851']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?not_eof@?$char_traits@D@std@@SAHABH@Z']
add ['esp,', '4']
jmp ['loc_AC69']
jmp ['short', 'loc_A8D0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_14]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_A8BD']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_14]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_14]']
call ['dword', 'ptr', 'ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['esi,', 'eax']
jnb ['short', 'loc_A8BD']
lea ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?to_char_type@?$char_traits@D@std@@SADABH@Z']
add ['esp,', '4']
mov ['bl,', 'al']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_14]']
call ['dword', 'ptr', 'ds:__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[eax],', 'bl']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_AC69']
jmp ['short', 'loc_A8D0']
mov ['edx,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[edx+50h],', '0']
jnz ['short', 'loc_A8D0']
call ['?eof@?$char_traits@D@std@@SAHXZ']
jmp ['loc_AC69']
mov ['ecx,', '[ebp+var_14]']
call ['?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+40h],', '0']
jnz ['short', 'loc_A92D']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+50h]']
push ['edx']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?to_char_type@?$char_traits@D@std@@SADABH@Z']
add ['esp,', '4']
movzx ['ecx,', 'al']
push ['ecx']
call ['??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z']
add ['esp,', '8']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_A912']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_BC],', 'eax']
jmp ['short', 'loc_A91D']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_BC],', 'eax']
mov ['eax,', '[ebp+var_BC]']
jmp ['loc_AC69']
jmp ['loc_AC69']
mov ['[ebp+var_18],', '8']
lea ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?to_char_type@?$char_traits@D@std@@SADABH@Z']
add ['esp,', '4']
mov ['[ebp+var_1D],', 'al']
push ['0']
push ['8']
lea ['ecx,', '[ebp+var_5C]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z']
mov ['[ebp+var_4],', '0']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_38]']
push ['edx']
lea ['eax,', '[ebp+var_78]']
push ['eax']
lea ['ecx,', '[ebp+var_5C]']
call ['?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ']
mov ['[ebp+var_C0],', 'eax']
mov ['ecx,', '[ebp+var_C0]']
mov ['[ebp+var_C4],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_C4]']
call ['??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ']
mov ['edi,', 'eax']
lea ['ecx,', '[ebp+var_5C]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
add ['edi,', 'eax']
push ['edi']
lea ['edx,', '[ebp+var_84]']
push ['edx']
lea ['ecx,', '[ebp+var_5C]']
call ['?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ']
mov ['[ebp+var_C8],', 'eax']
mov ['eax,', '[ebp+var_C8]']
mov ['[ebp+var_CC],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['ecx,', '[ebp+var_CC]']
call ['??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ']
push ['eax']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
lea ['edx,', '[ebp+var_1C]']
push ['edx']
lea ['eax,', '[ebp+var_1D]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '48h']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['ecx,', '[edx+40h]']
call ['dword', 'ptr', 'ds:__imp_?out@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_6C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_84]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_78]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_6C]']
mov ['[ebp+var_D0],', 'eax']
cmp ['[ebp+var_D0],', '0']
jl ['loc_AC33']
cmp ['[ebp+var_D0],', '1']
jle ['short', 'loc_AA3C']
cmp ['[ebp+var_D0],', '3']
jz ['loc_ABDF']
jmp ['loc_AC33']
lea ['ecx,', '[ebp+var_90]']
push ['ecx']
lea ['ecx,', '[ebp+var_5C]']
call ['?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ']
mov ['[ebp+var_D4],', 'eax']
mov ['edx,', '[ebp+var_D4]']
mov ['[ebp+var_D8],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['ecx,', '[ebp+var_D8]']
call ['??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ']
mov ['ecx,', '[ebp+var_38]']
sub ['ecx,', 'eax']
mov ['[ebp+Count],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_90]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
cmp ['[ebp+Count],', '0']
jbe ['short', 'loc_AAF9']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+50h]']
push ['eax']
mov ['ecx,', '[ebp+Count]']
push ['ecx']
push ['1']
lea ['edx,', '[ebp+var_A0]']
push ['edx']
lea ['ecx,', '[ebp+var_5C]']
call ['?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ']
mov ['[ebp+var_DC],', 'eax']
mov ['eax,', '[ebp+var_DC]']
mov ['[ebp+var_E0],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['ecx,', '[ebp+var_B8]']
or ['ecx,', '1']
mov ['[ebp+var_B8],', 'ecx']
mov ['ecx,', '[ebp+var_E0]']
call ['??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__fwrite']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['[ebp+Count],', 'eax']
jz ['short', 'loc_AAF9']
mov ['[ebp+var_E4],', '1']
jmp ['short', 'loc_AB03']
mov ['[ebp+var_E4],', '0']
mov ['dl,', 'byte', 'ptr', '[ebp+var_E4]']
mov ['[ebp+var_91],', 'dl']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_B8]']
and ['eax,', '1']
jz ['short', 'loc_AB33']
and ['[ebp+var_B8],', '0FFFFFFFEh']
lea ['ecx,', '[ebp+var_A0]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
movzx ['ecx,', '[ebp+var_91]']
test ['ecx,', 'ecx']
jz ['short', 'loc_AB63']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_A4],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_5C]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_A4]']
jmp ['loc_AC69']
mov ['edx,', '[ebp+var_14]']
mov ['byte', 'ptr', '[edx+45h],', '1']
lea ['eax,', '[ebp+var_1D]']
cmp ['[ebp+var_2C],', 'eax']
jz ['short', 'loc_AB95']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_A8],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_5C]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_A8]']
jmp ['loc_AC69']
cmp ['[ebp+Count],', '0']
jbe ['short', 'loc_AB9D']
jmp ['short', 'loc_ABDD']
lea ['ecx,', '[ebp+var_5C]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '20h']
jnb ['short', 'loc_ABB8']
push ['0']
push ['8']
lea ['ecx,', '[ebp+var_5C]']
call ['?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z']
jmp ['short', 'loc_ABDD']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_AC],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_5C]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_AC]']
jmp ['loc_AC69']
jmp ['short', 'loc_AC55']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+50h]']
push ['eax']
movzx ['ecx,', '[ebp+var_1D]']
push ['ecx']
call ['??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z']
add ['esp,', '8']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_AC05']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_E8],', 'eax']
jmp ['short', 'loc_AC10']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_E8],', 'eax']
mov ['ecx,', '[ebp+var_E8]']
mov ['[ebp+var_B0],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_5C]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_B0]']
jmp ['short', 'loc_AC69']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_B4],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_5C]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_B4]']
jmp ['short', 'loc_AC69']
jmp ['loc_A956']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_5C]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN42']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_10]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '0E8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
dd ['offset', '$LN41']
dd ['offset', '$LN36']
dd ['0FFFFFFD4h,', '4']
dd ['offset', '$LN37']
dd ['0FFFFFFC8h,', '4']
dd ['offset', '$LN38']
dd ['0FFFFFFA4h,', '1Ch']
dd ['offset', '$LN39']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$0 proc near
lea ['ecx,', '[ebp-5Ch]']
jmp ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
endp
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$1 proc near
lea ['ecx,', '[ebp-78h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$2 proc near
lea ['ecx,', '[ebp-84h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$3 proc near
lea ['ecx,', '[ebp-90h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$4 proc near
mov ['eax,', '[ebp-0B8h]']
and ['eax,', '1']
jz ['$LN34']
and ['dword', 'ptr', '[ebp-0B8h],', '0FFFFFFFEh']
lea ['ecx,', '[ebp-0A0h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0ECh]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+Src],', 'eax']
mov ['[ebp+Dst],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+Size],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '2']
jz ['short', 'loc_ADA7']
call ['?eof@?$char_traits@D@std@@SAHXZ']
jmp ['loc_B146']
jmp ['short', 'loc_ADD7']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_1C],', 'eax']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
lea ['eax,', '[ebp+var_1C]']
push ['eax']
call ['?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z']
add ['esp,', '8']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_ADD7']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?not_eof@?$char_traits@D@std@@SAHABH@Z']
add ['esp,', '4']
jmp ['loc_B146']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '8']
jz ['short', 'loc_AE51']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_AE51']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
cmp ['eax,', '[edx+38h]']
jnb ['short', 'loc_AE51']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['eax']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+38h]']
push ['ecx']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_AEC0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['esi,', 'eax']
jnb ['short', 'loc_AEC0']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?to_char_type@?$char_traits@D@std@@SADABH@Z']
add ['esp,', '4']
mov ['bl,', 'al']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[eax],', 'bl']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_B146']
jmp ['loc_B146']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_AEDF']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_AF0A']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['[ebp+var_20],', 'esi']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+Size],', 'eax']
mov ['ecx,', '[ebp+Size]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '1']
cmp ['edx,', '20h']
jnb ['short', 'loc_AF29']
mov ['[ebp+var_24],', '20h']
jmp ['short', 'loc_AF31']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '1']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+var_10],', '0']
jbe ['short', 'loc_AF54']
mov ['edx,', '7FFFFFFFh']
sub ['edx,', '[ebp+var_10]']
cmp ['edx,', '[ebp+var_C]']
jnb ['short', 'loc_AF54']
mov ['eax,', '[ebp+var_10]']
shr ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_AF37']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_AF64']
call ['?eof@?$char_traits@D@std@@SAHXZ']
jmp ['loc_B146']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['?allocate@?$allocator@D@std@@QAEPADI@Z']
mov ['[ebp+Dst],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+Src],', 'eax']
cmp ['[ebp+Size],', '0']
jbe ['short', 'loc_AFAE']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
cmp ['[ebp+Size],', '0']
jnz ['short', 'loc_B029']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+Dst]']
mov ['[eax+38h],', 'ecx']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '[ebp+var_C]']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+3Ch]']
and ['edx,', '4']
jz ['short', 'loc_B003']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+Dst]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_B024']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '1']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['loc_B0F4']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+38h]']
sub ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+38h],', 'eax']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '[ebp+var_C]']
mov ['esi,', 'esp']
push ['edx']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+Dst]']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '4']
jz ['short', 'loc_B0AF']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+Dst]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_B0F4']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '1']
mov ['esi,', 'esp']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+3Ch]']
and ['eax,', '1']
jz ['short', 'loc_B112']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['?deallocate@?$allocator@D@std@@QAEXPADI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
or ['ecx,', '1']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+3Ch],', 'ecx']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?to_char_type@?$char_traits@D@std@@SADABH@Z']
add ['esp,', '4']
mov ['bl,', 'al']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[eax],', 'bl']
mov ['eax,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['loc_B249']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['esi,', 'eax']
jnb ['loc_B249']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_8],', 'eax']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z']
add ['esp,', '8']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_B221']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '-1']
add ['eax,', 'edx']
push ['eax']
call ['?to_int_type@?$char_traits@D@std@@SAHABD@Z']
add ['esp,', '4']
mov ['[ebp+var_C],', 'eax']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z']
add ['esp,', '8']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_B249']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?not_eof@?$char_traits@D@std@@SAHABH@Z']
add ['esp,', '4']
jmp ['loc_B2F5']
jmp ['loc_B2F5']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+50h],', '0']
jz ['short', 'loc_B271']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_10],', 'eax']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
lea ['eax,', '[ebp+var_10]']
push ['eax']
call ['?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z']
add ['esp,', '8']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_B27A']
call ['?eof@?$char_traits@D@std@@SAHXZ']
jmp ['short', 'loc_B2F5']
jmp ['short', 'loc_B2F5']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+40h],', '0']
jnz ['short', 'loc_B2B3']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?to_char_type@?$char_traits@D@std@@SADABH@Z']
add ['esp,', '4']
mov ['byte', 'ptr', '[ebp+var_14+3],', 'al']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+50h]']
push ['edx']
lea ['eax,', '[ebp+var_14+3]']
push ['eax']
call ['??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z']
add ['esp,', '8']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_B2B3']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_B2F5']
jmp ['short', 'loc_B2F5']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '44h']
cmp ['eax,', 'edx']
jz ['short', 'loc_B2F0']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?to_char_type@?$char_traits@D@std@@SADABH@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+44h],', 'al']
mov ['ecx,', '[ebp+var_4]']
call ['?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_B2F5']
jmp ['short', 'loc_B2F5']
call ['?eof@?$char_traits@D@std@@SAHXZ']
pop ['edi']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['loc_B3D2']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['esi,', 'eax']
jbe ['short', 'loc_B3D2']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_8],', 'eax']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z']
add ['esp,', '8']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_B3DB']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?to_char_type@?$char_traits@D@std@@SADABH@Z']
add ['esp,', '4']
mov ['byte', 'ptr', '[ebp+var_C+3],', 'al']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '-1']
add ['eax,', 'edx']
push ['eax']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
call ['?eq@?$char_traits@D@std@@SA_NABD0@Z']
add ['esp,', '8']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_B3DB']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+3Ch]']
and ['eax,', '2']
jz ['short', 'loc_B3DB']
call ['?eof@?$char_traits@D@std@@SAHXZ']
jmp ['short', 'loc_B43C']
jmp ['short', 'loc_B43C']
mov ['esi,', 'esp']
push ['0FFFFFFFFh']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_10],', 'eax']
lea ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_10]']
push ['edx']
call ['?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z']
add ['esp,', '8']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_B430']
lea ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?to_char_type@?$char_traits@D@std@@SADABH@Z']
add ['esp,', '4']
mov ['bl,', 'al']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[eax],', 'bl']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?not_eof@?$char_traits@D@std@@SAHABH@Z']
add ['esp,', '4']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['dword', 'ptr', '[ebp+Pos],', 'eax']
mov ['dword', 'ptr', '[ebp+Pos+4],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '44h']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_B4AB']
cmp ['[ebp+Origin],', '1']
jnz ['short', 'loc_B4AB']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+40h],', '0']
jnz ['short', 'loc_B4AB']
mov ['eax,', 'dword', 'ptr', '[ebp+Offset]']
sub ['eax,', '1']
mov ['ecx,', 'dword', 'ptr', '[ebp+Offset+4]']
sbb ['ecx,', '0']
mov ['dword', 'ptr', '[ebp+Offset],', 'eax']
mov ['dword', 'ptr', '[ebp+Offset+4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+50h],', '0']
jz ['short', 'loc_B51B']
mov ['ecx,', '[ebp+var_4]']
call ['?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_B51B']
mov ['ecx,', 'dword', 'ptr', '[ebp+Offset]']
or ['ecx,', 'dword', 'ptr', '[ebp+Offset+4]']
jnz ['short', 'loc_B4D1']
cmp ['[ebp+Origin],', '1']
jz ['short', 'loc_B4FA']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+Origin]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+Offset+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+Offset]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+50h]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp___fseeki64']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_B51B']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+Pos]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+50h]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__fgetpos']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_B535']
mov ['ecx,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ecx]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$fpos@H@std@@QAE@_J@Z']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_B557']
mov ['ecx,', '[ebp+var_4]']
call ['?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ']
mov ['ecx,', 'dword', 'ptr', '[ebp+Pos+4]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+Pos]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+48h]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$fpos@H@std@@QAE@H_J@Z']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
dd ['offset', '$LN9_1']
dd ['offset', '$LN8_6']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_B607']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
cmp ['[ecx+38h],', 'eax']
jnb ['short', 'loc_B607']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+38h],', 'eax']
mov ['eax,', '[ebp+arg_10]']
and ['eax,', '1']
jz ['loc_B7D3']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['loc_B7D3']
cmp ['[ebp+arg_C],', '2']
jnz ['short', 'loc_B65E']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+38h]']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
cdq
add ['eax,', '[ebp+arg_4]']
adc ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_4],', 'eax']
mov ['[ebp+arg_8],', 'edx']
jmp ['short', 'loc_B6BC']
cmp ['[ebp+arg_C],', '1']
jnz ['short', 'loc_B6A5']
mov ['eax,', '[ebp+arg_10]']
and ['eax,', '2']
jnz ['short', 'loc_B6A5']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['eax,', 'esi']
cdq
add ['eax,', '[ebp+arg_4]']
adc ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_4],', 'eax']
mov ['[ebp+arg_8],', 'edx']
jmp ['short', 'loc_B6BC']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_B6BC']
mov ['ecx,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['edx,', '[ecx]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ecx+4]']
mov ['[ebp+arg_8],', 'eax']
cmp ['[ebp+arg_8],', '0']
jl ['loc_B7BE']
jg ['short', 'loc_B6D2']
cmp ['[ebp+arg_4],', '0']
jb ['loc_B7BE']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+38h]']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
cdq
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_8]']
jg ['loc_B7BE']
jl ['short', 'loc_B70F']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+var_C]']
ja ['loc_B7BE']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['eax,', 'esi']
cdq
add ['eax,', '[ebp+arg_4]']
adc ['edx,', '[ebp+arg_8]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_10]']
and ['edx,', '2']
jz ['short', 'loc_B7BC']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_B7BC']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_B7CE']
mov ['eax,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['ecx,', '[eax]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[eax+4]']
mov ['[ebp+arg_8],', 'edx']
jmp ['loc_B937']
mov ['eax,', '[ebp+arg_10]']
and ['eax,', '2']
jz ['loc_B91F']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['loc_B91F']
cmp ['[ebp+arg_C],', '2']
jnz ['short', 'loc_B82A']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+38h]']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
cdq
add ['eax,', '[ebp+arg_4]']
adc ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_4],', 'eax']
mov ['[ebp+arg_8],', 'edx']
jmp ['short', 'loc_B87F']
cmp ['[ebp+arg_C],', '1']
jnz ['short', 'loc_B869']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['eax,', 'esi']
cdq
add ['eax,', '[ebp+arg_4]']
adc ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_4],', 'eax']
mov ['[ebp+arg_8],', 'edx']
jmp ['short', 'loc_B87F']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_B87F']
mov ['eax,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['ecx,', '[eax]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[eax+4]']
mov ['[ebp+arg_8],', 'edx']
cmp ['[ebp+arg_8],', '0']
jl ['loc_B90C']
jg ['short', 'loc_B891']
cmp ['[ebp+arg_4],', '0']
jb ['short', 'loc_B90C']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+38h]']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
cdq
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_10]']
jg ['short', 'loc_B90C']
jl ['short', 'loc_B8C6']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+var_14]']
ja ['short', 'loc_B90C']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['eax,', 'esi']
cdq
add ['eax,', '[ebp+arg_4]']
adc ['edx,', '[ebp+arg_8]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_B91D']
mov ['edx,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['eax,', '[edx]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[edx+4]']
mov ['[ebp+arg_8],', 'ecx']
jmp ['short', 'loc_B937']
mov ['edx,', '[ebp+arg_4]']
or ['edx,', '[ebp+arg_8]']
jz ['short', 'loc_B937']
mov ['eax,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['ecx,', '[eax]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[eax+4]']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$fpos@H@std@@QAE@_J@Z']
mov ['eax,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['dword', 'ptr', '[ebp+Offset],', 'eax']
mov ['dword', 'ptr', '[ebp+Offset+4],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['dword', 'ptr', '[ebp+Pos],', 'eax']
mov ['dword', 'ptr', '[ebp+Pos+4],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+arg_4]']
call ['?seekpos@?$fpos@H@std@@QBE_JXZ']
mov ['dword', 'ptr', '[ebp+Pos],', 'eax']
mov ['dword', 'ptr', '[ebp+Pos+4],', 'edx']
lea ['ecx,', '[ebp+arg_4]']
call ['??B?$fpos@H@std@@QBE_JXZ']
sub ['eax,', 'dword', 'ptr', '[ebp+Pos]']
sbb ['edx,', 'dword', 'ptr', '[ebp+Pos+4]']
mov ['dword', 'ptr', '[ebp+Offset],', 'eax']
mov ['dword', 'ptr', '[ebp+Offset+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+50h],', '0']
jz ['loc_BA2F']
mov ['ecx,', '[ebp+var_4]']
call ['?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_BA2F']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+Pos]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+50h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__fsetpos']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_BA2F']
mov ['edx,', 'dword', 'ptr', '[ebp+Offset]']
or ['edx,', 'dword', 'ptr', '[ebp+Offset+4]']
jz ['short', 'loc_BA0E']
mov ['esi,', 'esp']
push ['1']
mov ['eax,', 'dword', 'ptr', '[ebp+Offset+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+Offset]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+50h]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp___fseeki64']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_BA2F']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+Pos]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+50h]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__fgetpos']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_BA49']
mov ['ecx,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ecx]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$fpos@H@std@@QAE@_J@Z']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_BA79']
lea ['ecx,', '[ebp+arg_4]']
call ['?state@?$fpos@H@std@@QBEHXZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+48h],', 'eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ']
mov ['edx,', 'dword', 'ptr', '[ebp+Pos+4]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+Pos]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+48h]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$fpos@H@std@@QAE@H_J@Z']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8_7']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['20h']
align ['4']
dd ['offset', '$LN7_0']
dd ['offset', '$LN6_0']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+arg_4]']
call ['??B?$fpos@H@std@@QBE_JXZ']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_BB3E']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
cmp ['[ecx+38h],', 'eax']
jnb ['short', 'loc_BB3E']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+38h],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_BB60']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax+4]']
jnz ['short', 'loc_BB60']
jmp ['loc_BD74']
mov ['edx,', '[ebp+arg_1C]']
and ['edx,', '1']
jz ['loc_BC9D']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['loc_BC9D']
cmp ['[ebp+var_8],', '0']
jl ['loc_BC88']
jg ['short', 'loc_BB9C']
cmp ['[ebp+var_C],', '0']
jb ['loc_BC88']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+38h]']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
cdq
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_14]']
jg ['loc_BC88']
jl ['short', 'loc_BBD9']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+var_18]']
ja ['loc_BC88']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['eax,', 'esi']
cdq
add ['eax,', '[ebp+var_C]']
adc ['edx,', '[ebp+var_8]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_1C]']
and ['edx,', '2']
jz ['short', 'loc_BC86']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_BC86']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_BC98']
mov ['eax,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_8],', 'edx']
jmp ['loc_BD74']
mov ['eax,', '[ebp+arg_1C]']
and ['eax,', '2']
jz ['loc_BD63']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['loc_BD63']
cmp ['[ebp+var_8],', '0']
jl ['loc_BD50']
jg ['short', 'loc_BCD5']
cmp ['[ebp+var_C],', '0']
jb ['short', 'loc_BD50']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+38h]']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
cdq
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_1C]']
jg ['short', 'loc_BD50']
jl ['short', 'loc_BD0A']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+var_20]']
ja ['short', 'loc_BD50']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['eax,', 'esi']
cdq
add ['eax,', '[ebp+var_C]']
adc ['edx,', '[ebp+var_8]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_BD61']
mov ['edx,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['eax,', '[edx]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[edx+4]']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_BD74']
mov ['edx,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['eax,', '[edx]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[edx+4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$fpos@H@std@@QAE@_J@Z']
mov ['eax,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['20h']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?seekpos@?$fpos@H@std@@QBE_JXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[ecx+8]']
mov ['edx,', '[ecx+0Ch]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+Mode],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+50h],', '0']
jz ['short', 'loc_BE20']
cmp ['[ebp+Buf],', '0']
jnz ['short', 'loc_BDF0']
mov ['ecx,', '[ebp+Size]']
or ['ecx,', '[ebp+arg_8]']
jnz ['short', 'loc_BDF0']
mov ['[ebp+Mode],', '4']
jmp ['short', 'loc_BDF7']
mov ['[ebp+Mode],', '0']
mov ['edx,', '[ebp+Size]']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+Mode]']
push ['eax']
mov ['ecx,', '[ebp+Buf]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+50h]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__setvbuf']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_BE26']
xor ['eax,', 'eax']
jmp ['short', 'loc_BE3A']
jmp ['short', 'loc_BE3A']
push ['1']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+50h]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+14h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?state@?$fpos@H@std@@QBEHXZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+10h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '18h']
call ['?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+50h],', '0']
jz ['short', 'loc_BFC4']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_C],', 'eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
lea ['edx,', '[ebp+var_C]']
push ['edx']
call ['?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z']
add ['esp,', '8']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_BFC4']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+50h]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__fflush']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jge ['short', 'loc_BFC4']
mov ['[ebp+var_10],', '0FFFFFFFFh']
jmp ['short', 'loc_BFCB']
mov ['[ebp+var_10],', '0']
mov ['eax,', '[ebp+var_10]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?system_category@std@@YAABVerror_category@1@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?to_char_type@?$char_traits@D@std@@SADABH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['al,', '[eax]']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?to_int_type@?$char_traits@D@std@@SAHABD@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[eax]']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0E4h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_F0]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_10],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_14]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_C0AA']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_14]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_14]']
call ['dword', 'ptr', 'ds:__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['esi,', 'eax']
jnb ['short', 'loc_C0AA']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_14]']
call ['dword', 'ptr', 'ds:__imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['?to_int_type@?$char_traits@D@std@@SAHABD@Z']
add ['esp,', '4']
jmp ['loc_C444']
jmp ['short', 'loc_C0BD']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+50h],', '0']
jnz ['short', 'loc_C0BD']
call ['?eof@?$char_traits@D@std@@SAHXZ']
jmp ['loc_C444']
mov ['ecx,', '[ebp+var_14]']
call ['?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ']
mov ['ecx,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[ecx+40h],', '0']
jnz ['short', 'loc_C11B']
mov ['byte', 'ptr', '[ebp+var_19],', '0']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+50h]']
push ['eax']
lea ['ecx,', '[ebp+var_19]']
push ['ecx']
call ['??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z']
add ['esp,', '8']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_C100']
lea ['eax,', '[ebp+var_19]']
push ['eax']
call ['?to_int_type@?$char_traits@D@std@@SAHABD@Z']
add ['esp,', '4']
mov ['[ebp+var_C4],', 'eax']
jmp ['short', 'loc_C10B']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_C4],', 'eax']
mov ['eax,', '[ebp+var_C4]']
jmp ['loc_C444']
jmp ['loc_C444']
lea ['ecx,', '[ebp+var_40]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+50h]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__fgetc']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_70],', 'eax']
cmp ['[ebp+var_70],', '0FFFFFFFFh']
jnz ['short', 'loc_C16B']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_74],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_40]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_74]']
jmp ['loc_C444']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_70]']
push ['eax']
push ['1']
lea ['ecx,', '[ebp+var_40]']
call ['?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_58]']
push ['ecx']
lea ['edx,', '[ebp+var_48]']
push ['edx']
lea ['eax,', '[ebp+Dst]']
push ['eax']
lea ['ecx,', '[ebp+var_64]']
push ['ecx']
lea ['edx,', '[ebp+var_84]']
push ['edx']
lea ['ecx,', '[ebp+var_40]']
call ['?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ']
mov ['[ebp+var_C8],', 'eax']
mov ['eax,', '[ebp+var_C8]']
mov ['[ebp+var_CC],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_CC]']
call ['??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ']
mov ['edi,', 'eax']
lea ['ecx,', '[ebp+var_40]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
add ['edi,', 'eax']
push ['edi']
lea ['ecx,', '[ebp+var_90]']
push ['ecx']
lea ['ecx,', '[ebp+var_40]']
call ['?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ']
mov ['[ebp+var_D0],', 'eax']
mov ['edx,', '[ebp+var_D0]']
mov ['[ebp+var_D4],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['ecx,', '[ebp+var_D4]']
call ['??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ']
push ['eax']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '48h']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['ecx,', '[ecx+40h]']
call ['dword', 'ptr', 'ds:__imp_?in@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_78],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_90]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_84]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
mov ['edx,', '[ebp+var_78]']
mov ['[ebp+var_D8],', 'edx']
cmp ['[ebp+var_D8],', '0']
jl ['loc_C40E']
cmp ['[ebp+var_D8],', '1']
jle ['short', 'loc_C266']
cmp ['[ebp+var_D8],', '3']
jz ['loc_C379']
jmp ['loc_C40E']
lea ['eax,', '[ebp+Dst]']
cmp ['[ebp+var_58],', 'eax']
jz ['loc_C325']
lea ['ecx,', '[ebp+var_9C]']
push ['ecx']
lea ['ecx,', '[ebp+var_40]']
call ['?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ']
mov ['[ebp+var_DC],', 'eax']
mov ['edx,', '[ebp+var_DC]']
mov ['[ebp+var_E0],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['ecx,', '[ebp+var_E0]']
call ['??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ']
mov ['esi,', 'eax']
lea ['ecx,', '[ebp+var_40]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
add ['esi,', 'eax']
sub ['esi,', '[ebp+var_64]']
mov ['[ebp+var_6C],', 'esi']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_9C]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
cmp ['[ebp+var_6C],', '0']
jle ['short', 'loc_C2F7']
mov ['eax,', '[ebp+var_6C]']
sub ['eax,', '1']
mov ['[ebp+var_6C],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+50h]']
push ['edx']
mov ['eax,', '[ebp+var_64]']
add ['eax,', '[ebp+var_6C]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__ungetc']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_C2C3']
lea ['edx,', '[ebp+Dst]']
push ['edx']
call ['?to_int_type@?$char_traits@D@std@@SAHABD@Z']
add ['esp,', '4']
mov ['[ebp+var_A0],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_40]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_A0]']
jmp ['loc_C444']
jmp ['short', 'loc_C374']
lea ['eax,', '[ebp+var_AC]']
push ['eax']
lea ['ecx,', '[ebp+var_40]']
call ['?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ']
mov ['[ebp+var_E4],', 'eax']
mov ['ecx,', '[ebp+var_E4]']
mov ['[ebp+var_E8],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['ecx,', '[ebp+var_E8]']
call ['??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ']
mov ['edx,', '[ebp+var_64]']
sub ['edx,', 'eax']
push ['edx']
push ['0']
lea ['ecx,', '[ebp+var_40]']
call ['?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_AC]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
jmp ['loc_C430']
lea ['ecx,', '[ebp+var_40]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '1']
jnb ['short', 'loc_C38B']
jmp ['loc_C430']
mov ['esi,', 'esp']
push ['1']
lea ['eax,', '[ebp+var_B8]']
push ['eax']
lea ['ecx,', '[ebp+var_40]']
call ['?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ']
mov ['[ebp+var_EC],', 'eax']
mov ['ecx,', '[ebp+var_EC]']
mov ['[ebp+var_F0],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
mov ['ecx,', '[ebp+var_F0]']
call ['??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ']
push ['eax']
push ['1']
lea ['edx,', '[ebp+Dst]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__memcpy_s']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_B8]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
lea ['eax,', '[ebp+Dst]']
push ['eax']
call ['?to_int_type@?$char_traits@D@std@@SAHABD@Z']
add ['esp,', '4']
mov ['[ebp+var_BC],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_40]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_BC]']
jmp ['short', 'loc_C444']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_C0],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_40]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_C0]']
jmp ['short', 'loc_C444']
jmp ['loc_C12A']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_40]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN36_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_10]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '0F0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN35']
dd ['offset', '$LN29_1']
dd ['0FFFFFFC0h,', '1Ch']
dd ['offset', '$LN30_1']
dd ['0FFFFFFB7h,', '1']
dd ['offset', '$LN31']
dd ['0FFFFFFA8h,', '4']
dd ['offset', '$LN32_1']
dd ['0FFFFFF9Ch,', '4']
dd ['offset', '$LN33_1']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0 proc near
lea ['ecx,', '[ebp-40h]']
jmp ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
endp
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$1 proc near
lea ['ecx,', '[ebp-84h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$2 proc near
lea ['ecx,', '[ebp-90h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$3 proc near
lea ['ecx,', '[ebp-9Ch]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$4 proc near
lea ['ecx,', '[ebp-0ACh]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$5 proc near
lea ['ecx,', '[ebp-0B8h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0F0h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_C5C2']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['esi,', 'eax']
jnb ['short', 'loc_C5C2']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['?to_int_type@?$char_traits@D@std@@SAHABD@Z']
add ['esp,', '4']
jmp ['short', 'loc_C61E']
jmp ['short', 'loc_C61E']
mov ['eax,', '[ebp+var_4]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[edx+1Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_C],', 'eax']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_14],', 'eax']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
lea ['edx,', '[ebp+var_14]']
push ['edx']
call ['?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z']
add ['esp,', '8']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_C601']
mov ['eax,', '[ebp+var_C]']
jmp ['short', 'loc_C61E']
jmp ['short', 'loc_C61E']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+10h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN8_5']
dd ['offset', '$LN7']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_C691']
call ['?eof@?$char_traits@D@std@@SAHXZ']
jmp ['loc_C7E0']
jmp ['loc_C7E0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['esi,', 'eax']
jnb ['short', 'loc_C6E0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['?to_int_type@?$char_traits@D@std@@SAHABD@Z']
add ['esp,', '4']
jmp ['loc_C7E0']
jmp ['loc_C7E0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '4']
jnz ['short', 'loc_C745']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_C745']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['esi,', 'eax']
ja ['short', 'loc_C754']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
cmp ['[edx+38h],', 'eax']
ja ['short', 'loc_C754']
call ['?eof@?$char_traits@D@std@@SAHXZ']
jmp ['loc_C7E0']
jmp ['loc_C7E0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
cmp ['[ecx+38h],', 'eax']
jnb ['short', 'loc_C786']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+38h],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+38h]']
push ['ecx']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['?to_int_type@?$char_traits@D@std@@SAHABD@Z']
add ['esp,', '4']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?value@error_code@std@@QBEHXZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?value@error_condition@std@@QBEHXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_hypot		proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
sub ['esp,', '8']
movsd ['xmm0,', '[ebp+arg_8]']
movsd ['[esp+0Ch+var_C],', 'xmm0']
sub ['esp,', '8']
movsd ['xmm0,', '[ebp+arg_0]']
movsd ['[esp+14h+var_14],', 'xmm0']
call ['dword', 'ptr', 'ds:__imp___hypot']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0']
dd ['offset', '__unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1']
dd ['offset', '__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0']
dd ['offset', '__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0']
dd ['offset', '__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z$0']
dd ['offset', '__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0']
dd ['2', 'dup(0)']
dd ['offset', '__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1']
dd ['0FFFFFFFFh,', '0']
dd ['1,', '0']
dd ['1,', '0']
dd ['offset', '__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
dd ['2']
dd ['offset', '__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
dd ['3', 'dup(0)']
dd ['1']
dd ['offset', '__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4']
dd ['2', 'dup(0)']
dd ['3,', '1']
dd ['offset', '__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1']
dd ['offset', '__unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0']
dd ['offset', '__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?WipeRecording@DrawEventRecorderMemory@gfx@mozilla@@QAEXXZ$0']
dd ['offset', '__unwindfunclet$??0DrawEventRecorderMemory@gfx@mozilla@@QAE@XZ$0']
dd ['0']
dd ['offset', '__unwindfunclet$??0DrawEventRecorderMemory@gfx@mozilla@@QAE@XZ$1']
dd ['offset', '__unwindfunclet$??1DrawEventRecorderFile@gfx@mozilla@@UAE@XZ$0']
dd ['0']
dd ['offset', '__unwindfunclet$??1DrawEventRecorderFile@gfx@mozilla@@UAE@XZ$1']
dd ['offset', '__unwindfunclet$??0DrawEventRecorderFile@gfx@mozilla@@QAE@PBD@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??0DrawEventRecorderFile@gfx@mozilla@@QAE@PBD@Z$1']
dd ['offset', '__unwindfunclet$??0DrawEventRecorderPrivate@gfx@mozilla@@QAE@PAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??0DrawEventRecorderPrivate@gfx@mozilla@@QAE@PAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z$1']
dd ['offset', '__unwindtable$?WipeRecording@DrawEventRecorderMemory@gfx@mozilla@@QAEXXZ']
align ['20h']
dd ['1']
dd ['offset', '__unwindtable$??0DrawEventRecorderMemory@gfx@mozilla@@QAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$??1DrawEventRecorderFile@gfx@mozilla@@UAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$??0DrawEventRecorderFile@gfx@mozilla@@QAE@PBD@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$??0DrawEventRecorderPrivate@gfx@mozilla@@QAE@PAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
align ['10h']
dd ['offset', '__catch$??0?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAE@ABV?$allocator@PBX@1@@Z$0']
dd ['offset', '__catchsym$??0?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAE@ABV?$allocator@PBX@1@@Z$3']
dd ['offset', '__unwindfunclet$??0?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAE@ABV?$allocator@PBX@1@@Z$2']
dd ['4', 'dup(0)']
dd ['offset', '__unwindtable$??0?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAE@ABV?$allocator@PBX@1@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??0?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAE@ABV?$allocator@PBX@1@@Z']
align ['10h']
dd ['1']
assume ['cs:_xdata$x']
align ['10h']
dd ['offset', '__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z$2']
dd ['offset', '__unwindtable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z']
dd ['1']
dd ['offset', '__tryblocktable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z$0']
dd ['offset', '__unwindtable$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@1@ABV?$allocator@PBX@1@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??0?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@1@ABV?$allocator@PBX@1@@Z$1']
dd ['offset', '__unwindtable$??0?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@1@ABV?$allocator@PBX@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0']
dd ['offset', '__unwindtable$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0']
dd ['offset', '__unwindtable$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$2']
dd ['2', 'dup(0)']
dd ['offset', '__catch$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0']
dd ['offset', '__unwindtable$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
dd ['2']
dd ['offset', '__tryblocktable$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
align ['10h']
dd ['1']
dd ['offset', '__catchsym$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$7']
dd ['2', 'dup(3),', '4,', '1']
dd ['offset', '__catchsym$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$8']
dd ['offset', '__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$4']
dd ['9', 'dup(0)']
dd ['offset', '__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$5']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z$0']
dd ['offset', '__unwindtable$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$??0?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAE@ABV?$allocator@_K@1@@Z$0']
dd ['offset', '__catchsym$??0?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAE@ABV?$allocator@_K@1@@Z$3']
dd ['offset', '__unwindfunclet$??0?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAE@ABV?$allocator@_K@1@@Z$2']
dd ['4', 'dup(0)']
dd ['offset', '__unwindtable$??0?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAE@ABV?$allocator@_K@1@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??0?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAE@ABV?$allocator@_K@1@@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z$2']
dd ['offset', '__unwindtable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z']
dd ['1']
dd ['offset', '__tryblocktable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z$0']
dd ['offset', '__unwindtable$?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@1@ABV?$allocator@_K@1@@Z$0']
align ['8']
dd ['offset', '__unwindfunclet$??0?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@1@ABV?$allocator@_K@1@@Z$1']
dd ['offset', '__unwindtable$??0?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@1@ABV?$allocator@_K@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$0']
dd ['offset', '__unwindtable$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$0']
dd ['offset', '__unwindtable$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
align ['10h']
dd ['offset', '__catch$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$2']
align ['10h']
dd ['offset', '__catch$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$0']
dd ['offset', '__unwindtable$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
dd ['2']
dd ['offset', '__tryblocktable$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
dd ['3', 'dup(0)']
dd ['1']
dd ['offset', '__catchsym$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$7']
dd ['2', 'dup(3),', '4,', '1']
dd ['offset', '__catchsym$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$8']
dd ['offset', '__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$4']
dd ['9', 'dup(0)']
dd ['offset', '__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$5']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z$0']
dd ['offset', '__unwindtable$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0']
align ['8']
dd ['offset', '__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1']
dd ['1']
dd ['offset', '__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2']
dd ['offset', '__unwindtable$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z$0']
dd ['offset', '__unwindtable$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0']
dd ['offset', '__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindtable$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$0']
align ['10h']
dd ['offset', '__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$1']
dd ['1']
dd ['offset', '__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$2']
align ['10h']
dd ['offset', '__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$3']
align ['8']
dd ['offset', '__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$4']
assume ['cs:_xdata$x']
dd ['offset', '__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0']
dd ['0']
dd ['offset', '__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$1']
dd ['1']
dd ['offset', '__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$2']
dd ['0']
dd ['offset', '__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$3']
dd ['0']
dd ['offset', '__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$4']
dd ['0']
dd ['offset', '__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$5']
assume ['cs:_xdata$x']
dd ['offset', '__unwindtable$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$0']
align ['10h']
dd ['offset', '__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$1']
dd ['1']
dd ['offset', '__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$2']
align ['10h']
dd ['offset', '__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$3']
align ['8']
dd ['offset', '__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$4']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z$0']
dd ['offset', '__unwindtable$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0']
dd ['offset', '__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z$0']
dd ['offset', '__unwindtable$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z$0']
dd ['offset', '__unwindtable$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2']
dd ['offset', '__unwindtable$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2']
dd ['offset', '__unwindtable$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0']
dd ['offset', '__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z$0']
dd ['offset', '__unwindtable$??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z$0']
dd ['offset', '__unwindtable$??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
align ['10h']
dd ['offset', '__catch$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2']
dd ['offset', '__unwindtable$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2']
dd ['offset', '__unwindtable$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
align ['10h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z$0']
dd ['offset', '__unwindtable$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z$0']
dd ['offset', '__unwindtable$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
unicode ['0,', '<C:\\Program', 'Files', '(x86)\\Microsoft', 'Visual', 'Studio', '12.0\\VC\\in>']
unicode ['0,', '<clude\\xutility>,0']
assume ['cs:_rdata']
public ['??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@']
unicode ['0,', '<ITERATOR', 'LIST', 'CORRUPTED!>,0']
align ['4']
assume ['cs:_rdata']
public ['?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB']
assume ['cs:_data$r']
public ['??_R0?AVexception@std@@@8']
align ['10h']
assume ['cs:_xdata$x']
public ['__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12']
dd ['offset', '??_R0?AVexception@std@@@8']
align ['10h']
dd ['0FFFFFFFFh,', '0']
dd ['0Ch']
dd ['offset', '??0exception@std@@QAE@ABV01@@Z']
assume ['cs:_rdata']
dd ['offset', '??_R4error_category@std@@6B@']
public ['??_7error_category@std@@6B@']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z']
assume ['cs:_rdata']
dd ['offset', '??_R4_Generic_error_category@std@@6B@']
public ['??_7_Generic_error_category@std@@6B@']
dd ['offset', '?name@_Generic_error_category@std@@UBEPBDXZ']
dd ['offset', '?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
dd ['offset', '?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z']
assume ['cs:_rdata']
public ['??_C@_07DCLBNMLN@generic?$AA@']
assume ['cs:_rdata']
public ['??_C@_0O@BFJCFAAK@unknown?5error?$AA@']
align ['10h']
assume ['cs:_rdata']
dd ['offset', '??_R4_Iostream_error_category@std@@6B@']
public ['??_7_Iostream_error_category@std@@6B@']
dd ['offset', '?name@_Iostream_error_category@std@@UBEPBDXZ']
dd ['offset', '?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
dd ['offset', '?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z']
assume ['cs:_rdata']
public ['??_C@_08LLGCOLLL@iostream?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@']
align ['10h']
assume ['cs:_rdata']
dd ['offset', '??_R4_System_error_category@std@@6B@']
public ['??_7_System_error_category@std@@6B@']
dd ['offset', '?name@_System_error_category@std@@UBEPBDXZ']
dd ['offset', '?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
dd ['offset', '?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z']
assume ['cs:_rdata']
public ['??_C@_06FHFOAHML@system?$AA@']
align ['4']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
assume ['cs:_rdata']
public ['??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
unicode ['0,', '<%s>,0']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4DrawEventRecorder@gfx@mozilla@@6B@']
public ['??_7DrawEventRecorder@gfx@mozilla@@6B@']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A']
assume ['cs:_rdata']
dd ['offset', '??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
public ['??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
dd ['offset', '?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ']
dd ['offset', '?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ']
dd ['offset', '?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z']
dd ['offset', '?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z']
dd ['offset', '?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ']
dd ['offset', '?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ']
dd ['offset', '?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ']
dd ['offset', '?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z']
dd ['offset', '?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z']
dd ['offset', '?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z']
dd ['offset', '?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z']
dd ['offset', '?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z']
dd ['offset', '?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ']
dd ['offset', '?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z']
assume ['cs:_rdata']
dd ['offset', '??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
public ['??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
assume ['cs:_rdata']
public ['??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@']
dd ['offset', 'loc_65+3']
assume ['cs:_rdata']
public ['??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@']
dd ['offset', 'loc_56+2']
assume ['cs:_rdata']
dd ['offset', '??_R4DrawEventRecorderPrivate@gfx@mozilla@@6B@']
public ['??_7DrawEventRecorderPrivate@gfx@mozilla@@6B@']
dd ['offset', '__purecall']
assume ['cs:_rdata']
dd ['offset', '??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@']
public ['??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@']
dd ['offset', '?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ']
dd ['offset', '?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ']
dd ['offset', '?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z']
dd ['offset', '?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z']
dd ['offset', '?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ']
dd ['offset', '?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ']
dd ['offset', '?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ']
dd ['offset', '?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z']
dd ['offset', '?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z']
dd ['offset', '?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z']
dd ['offset', '?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z']
dd ['offset', '?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z']
dd ['offset', '?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ']
dd ['offset', '?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z']
assume ['cs:_rdata']
dd ['offset', '??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@']
public ['??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@']
assume ['cs:_rdata']
public ['??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@']
dd ['offset', 'loc_5E+2']
assume ['cs:_rdata']
dd ['offset', '??_R4DrawEventRecorderFile@gfx@mozilla@@6B@']
public ['??_7DrawEventRecorderFile@gfx@mozilla@@6B@']
dd ['offset', '?Flush@DrawEventRecorderFile@gfx@mozilla@@EAEXXZ']
assume ['cs:_rdata']
dd ['offset', '??_R4DrawEventRecorderMemory@gfx@mozilla@@6B@']
public ['??_7DrawEventRecorderMemory@gfx@mozilla@@6B@']
dd ['offset', '?Flush@DrawEventRecorderMemory@gfx@mozilla@@EAEXXZ']
assume ['cs:_rdata']
public ['??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
unicode ['0,', '<C:\\Program', 'Files', '(x86)\\Microsoft', 'Visual', 'Studio', '12.0\\VC\\in>']
unicode ['0,', '<clude\\xstring>,0']
align ['4']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA']
assume ['cs:_rdata']
public ['??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@']
assume ['cs:_rdata']
public ['??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@']
assume ['cs:_rdata']
public ['??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@']
unicode ['0,', '<string', 'iterator', 'not', 'dereferencable>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
assume ['cs:_rdata']
public ['??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
unicode ['0,', '<"Standard', 'C++', 'Libraries', 'Out', 'of', 'Range"', '&&', '0>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
unicode ['0,', '<std::_String_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_String_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_Simple_types>']
dw ['3Ch']
unicode ['0,', '<char>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '*>,0']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
unicode ['0,', '<"out', 'of', 'range">,0']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
unicode ['0,', '<C:\\Program', 'Files', '(x86)\\Microsoft', 'Visual', 'Studio', '12.0\\VC\\in>']
unicode ['0,', '<clude\\vector>,0']
assume ['cs:_rdata']
public ['??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@']
unicode ['0,', '<vector', 'insert', 'iterator', 'outside', 'range>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@']
unicode ['0,', '<vector', 'iterator', '+', 'offset', 'out', 'of', 'range>,0']
assume ['cs:_rdata']
public ['??_C@_1BNG@JIGEKGDI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
unicode ['0,', '<std::_Vector_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_Vector_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_Simple_types>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_unchecked_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_List_simple_types>']
dw ['3Ch']
unicode ['0,', '<void', 'const', '*>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<,struct', 'std::_Iterator_base0>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '+=>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1BNO@ICKBMIEL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
unicode ['0,', '<std::_Vector_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_Vector_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_Simple_types>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_unchecked_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_List_simple_types>']
dw ['3Ch']
unicode ['0,', '<unsigned', '__int64>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<,struct', 'std::_Iterator_base0>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '+=>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
unicode ['0,', '<invalid', 'null', 'pointer>,0']
align ['4']
assume ['cs:_xdata$x']
public ['__TI2?AVbad_cast@std@@']
dd ['offset', '??1bad_cast@std@@UAE@XZ']
dd ['0']
dd ['offset', '__CTA2?AVbad_cast@std@@']
assume ['cs:_xdata$x']
public ['__CTA2?AVbad_cast@std@@']
dd ['offset', '__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12']
dd ['offset', '__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12']
assume ['cs:_data$r']
public ['??_R0?AVbad_cast@std@@@8']
dd ['0']
align ['10h']
assume ['cs:_xdata$x']
public ['__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12']
dd ['offset', '??_R0?AVbad_cast@std@@@8']
dd ['0']
dd ['0FFFFFFFFh,', '0']
dd ['0Ch']
dd ['offset', '??0bad_cast@std@@QAE@ABV01@@Z']
assume ['cs:_rdata']
public ['??_C@_08EPJLHIJG@bad?5cast?$AA@']
align ['4']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B']
assume ['cs:_rdata']
public ['??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
unicode ['0,', '<invalid', 'iterator', 'range>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
unicode ['0,', '<C:\\Program', 'Files', '(x86)\\Microsoft', 'Visual', 'Studio', '12.0\\VC\\in>']
unicode ['0,', '<clude\\xmemory>,0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
dd ['offset', '??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8']
dd ['offset', '??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8']
align ['8']
db ["'d@@',0"]
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
dd ['2']
dd ['offset', '??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
dd ['offset', '??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8']
dd ['2', 'dup(0)']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8']
dd ['0']
assume ['cs:_rdata$r']
public ['??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8']
dd ['1']
dd ['offset', '??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
dd ['offset', 'loc_65+3']
dd ['4']
dd ['offset', '??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8']
dd ['offset', '??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8']
dd ['0']
db ["'@std@@',0"]
assume ['cs:_rdata$r']
public ['??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
dd ['3,', '0Ah']
dd ['offset', '??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
dd ['offset', '??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3EA@ios_base@std@@8']
dd ['offset', '??_R17A@3EA@?$_Iosb@H@std@@8']
dd ['offset', '??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3EA@ios_base@std@@8']
dd ['offset', '??_R17A@3EA@?$_Iosb@H@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
dd ['9,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8']
dd ['8,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8']
dd ['3,', '9']
dd ['offset', '??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3EA@ios_base@std@@8']
dd ['offset', '??_R17A@3EA@?$_Iosb@H@std@@8']
dd ['offset', '??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3EA@ios_base@std@@8']
dd ['offset', '??_R17A@3EA@?$_Iosb@H@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8']
dd ['3,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8']
dd ['4']
dd ['offset', '??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3EA@ios_base@std@@8']
dd ['offset', '??_R17A@3EA@?$_Iosb@H@std@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['2,', '2', 'dup(0)']
dd ['4,', '50h']
dd ['offset', '??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['3']
dd ['offset', '??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@?0A@EA@ios_base@std@@8']
dd ['offset', '??_R17?0A@EA@?$_Iosb@H@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@ios_base@std@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3ios_base@std@@8']
assume ['cs:_data$r']
public ['??_R0?AVios_base@std@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3ios_base@std@@8']
dd ['2']
dd ['offset', '??_R2ios_base@std@@8']
assume ['cs:_rdata$r']
public ['??_R2ios_base@std@@8']
dd ['offset', '??_R17?0A@EA@?$_Iosb@H@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R17?0A@EA@?$_Iosb@H@std@@8']
dd ['0']
dd ['8,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3?$_Iosb@H@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$_Iosb@H@std@@@8']
align ['8']
assume ['cs:_rdata$r']
public ['??_R3?$_Iosb@H@std@@8']
dd ['1']
dd ['offset', '??_R2?$_Iosb@H@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$_Iosb@H@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$_Iosb@H@std@@8']
align ['10h']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3?$_Iosb@H@std@@8']
assume ['cs:_rdata$r']
public ['??_R1A@A@3EA@ios_base@std@@8']
dd ['1,', '2', 'dup(0)']
dd ['4,', '40h']
dd ['offset', '??_R3ios_base@std@@8']
assume ['cs:_rdata$r']
public ['??_R17A@3EA@?$_Iosb@H@std@@8']
dd ['0']
dd ['8,', '0']
dd ['4,', '40h']
dd ['offset', '??_R3?$_Iosb@H@std@@8']
assume ['cs:_rdata$r']
public ['??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
dd ['3,', '10h,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
dd ['4']
dd ['offset', '??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3EA@ios_base@std@@8']
dd ['offset', '??_R17A@3EA@?$_Iosb@H@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
dd ['3,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@']
dd ['offset', '??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8']
dd ['offset', '??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8']
dd ['2']
dd ['offset', '??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@']
dd ['offset', 'loc_5E+2']
dd ['4']
dd ['offset', '??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8']
dd ['offset', '??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8']
dd ['5']
dd ['offset', '??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3EA@ios_base@std@@8']
dd ['offset', '??_R17A@3EA@?$_Iosb@H@std@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8']
dd ['4,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R4error_category@std@@6B@']
dd ['offset', '??_R0?AVerror_category@std@@@8']
dd ['offset', '??_R3error_category@std@@8']
assume ['cs:_data$r']
public ['??_R0?AVerror_category@std@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3error_category@std@@8']
dd ['1']
dd ['offset', '??_R2error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R2error_category@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@error_category@std@@8']
dd ['2', 'dup(0)']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R4_Generic_error_category@std@@6B@']
dd ['offset', '??_R0?AV_Generic_error_category@std@@@8']
dd ['offset', '??_R3_Generic_error_category@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV_Generic_error_category@std@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3_Generic_error_category@std@@8']
dd ['2']
dd ['offset', '??_R2_Generic_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R2_Generic_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@error_category@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@_Generic_error_category@std@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3_Generic_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R4_Iostream_error_category@std@@6B@']
dd ['offset', '??_R0?AV_Iostream_error_category@std@@@8']
dd ['offset', '??_R3_Iostream_error_category@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV_Iostream_error_category@std@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3_Iostream_error_category@std@@8']
dd ['3']
dd ['offset', '??_R2_Iostream_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R2_Iostream_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@_Generic_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@error_category@std@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@_Iostream_error_category@std@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3_Iostream_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R4_System_error_category@std@@6B@']
dd ['offset', '??_R0?AV_System_error_category@std@@@8']
dd ['offset', '??_R3_System_error_category@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV_System_error_category@std@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3_System_error_category@std@@8']
dd ['3']
dd ['offset', '??_R2_System_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R2_System_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@_Generic_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@error_category@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@_System_error_category@std@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3_System_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R4DrawEventRecorder@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVDrawEventRecorder@gfx@mozilla@@@8']
dd ['offset', '??_R3DrawEventRecorder@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVDrawEventRecorder@gfx@mozilla@@@8']
dd ['0']
assume ['cs:_rdata$r']
public ['??_R3DrawEventRecorder@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2DrawEventRecorder@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2DrawEventRecorder@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@DrawEventRecorder@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3DrawEventRecorder@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@@mozilla@@8']
dd ['1,', '4,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3?$RefCounted@VDrawEventRecorder@gfx@mozilla@@@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$RefCounted@VDrawEventRecorder@gfx@mozilla@@@mozilla@@@8']
align ['8']
assume ['cs:_rdata$r']
public ['??_R3?$RefCounted@VDrawEventRecorder@gfx@mozilla@@@mozilla@@8']
dd ['2']
dd ['offset', '??_R2?$RefCounted@VDrawEventRecorder@gfx@mozilla@@@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2?$RefCounted@VDrawEventRecorder@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3?$RefCounted@VDrawEventRecorder@gfx@mozilla@@@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@8']
dd ['2', 'dup(0)']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@@8']
align ['10h']
db ["'la@@',0"]
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@8']
dd ['1']
dd ['offset', '??_R2?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@8']
align ['8']
dd ['4,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4DrawEventRecorderPrivate@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVDrawEventRecorderPrivate@gfx@mozilla@@@8']
dd ['offset', '??_R3DrawEventRecorderPrivate@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVDrawEventRecorderPrivate@gfx@mozilla@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3DrawEventRecorderPrivate@gfx@mozilla@@8']
dd ['4']
dd ['offset', '??_R2DrawEventRecorderPrivate@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2DrawEventRecorderPrivate@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@DrawEventRecorder@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@DrawEventRecorderPrivate@gfx@mozilla@@8']
dd ['3,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3DrawEventRecorderPrivate@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4DrawEventRecorderFile@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVDrawEventRecorderFile@gfx@mozilla@@@8']
dd ['offset', '??_R3DrawEventRecorderFile@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVDrawEventRecorderFile@gfx@mozilla@@@8']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3DrawEventRecorderFile@gfx@mozilla@@8']
dd ['5']
dd ['offset', '??_R2DrawEventRecorderFile@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2DrawEventRecorderFile@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@DrawEventRecorderPrivate@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@DrawEventRecorder@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@DrawEventRecorderFile@gfx@mozilla@@8']
dd ['4,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3DrawEventRecorderFile@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4DrawEventRecorderMemory@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVDrawEventRecorderMemory@gfx@mozilla@@@8']
dd ['offset', '??_R3DrawEventRecorderMemory@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVDrawEventRecorderMemory@gfx@mozilla@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3DrawEventRecorderMemory@gfx@mozilla@@8']
dd ['5']
dd ['offset', '??_R2DrawEventRecorderMemory@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2DrawEventRecorderMemory@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@DrawEventRecorderPrivate@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@DrawEventRecorder@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@DrawEventRecorderMemory@gfx@mozilla@@8']
dd ['4,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+10h']
dd ['offset', '??_R3DrawEventRecorderMemory@gfx@mozilla@@8']
assume ['cs:_rtc$IMZ']
assume ['cs:_rtc$TMZ']
assume ['cs:_rdata']
public ['__real@3f800000']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
extrn ['__purecall:near']
extrn ['??2@YAPAXI@Z:near']
extrn ['??3@YAXPAX@Z:near']
extrn ['_atexit:near']
extrn ['__imp___invalid_parameter:near']
extrn ['__imp_??0_Lockit@std@@QAE@H@Z:near']
extrn ['__imp_??1_Lockit@std@@QAE@XZ:near']
extrn ['__imp__fclose:near']
extrn ['__imp__fflush:near']
extrn ['__imp__fgetc:near']
extrn ['__imp__fgetpos:near']
extrn ['__imp__fputc:near']
extrn ['__imp__fsetpos:near']
extrn ['__imp___fseeki64:near']
extrn ['__imp__fwrite:near']
extrn ['__imp__setvbuf:near']
extrn ['__imp__ungetc:near']
extrn ['__imp___lock_file:near']
extrn ['__imp___unlock_file:near']
extrn ['__imp__free:near']
extrn ['__imp__memmove:near']
extrn ['_memcpy:near']
extrn ['__imp__memcpy_s:near']
extrn ['_memset:near']
extrn ['_strlen:near']
extrn ['__imp___hypot:near']
extrn ['__imp___CrtDbgReportW:near']
extrn ['__imp_?_Debug_message@std@@YAXPB_W0I@Z:near']
extrn ['__imp_??0_Container_base12@std@@QAE@XZ:near']
extrn ['__imp_??1_Container_base12@std@@QAE@XZ:near']
extrn ['__imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ:near']
extrn ['__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ:near']
extrn ['__imp_?_Xbad_alloc@std@@YAXXZ:near']
extrn ['__imp_?_Xlength_error@std@@YAXPBD@Z:near']
extrn ['__imp_?_Xout_of_range@std@@YAXPBD@Z:near']
extrn ['__imp_??0bad_cast@std@@QAE@PBD@Z:near']
extrn ['?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:near']
extrn ['__imp_??0id@locale@std@@QAE@I@Z:near']
extrn ['__imp_??Bid@locale@std@@QAEIXZ:near']
extrn ['__imp_?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:near']
extrn ['__imp_?always_noconv@codecvt_base@std@@QBE_NXZ:near']
extrn ['__imp_?in@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z:near']
extrn ['__imp_?out@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z:near']
extrn ['__imp_?unshift@?$codecvt@DDH@std@@QBEHAAHPAD1AAPAD@Z:near']
extrn ['__imp_?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:near']
extrn ['??_Eerror_category@std@@UAEPAXI@Z:near']
extrn ['__imp_?_Syserror_map@std@@YAPBDH@Z:near']
extrn ['__imp_?_Winerror_map@std@@YAPBDH@Z:near']
extrn ['??_E_Generic_error_category@std@@UAEPAXI@Z:near']
extrn ['??_E_Iostream_error_category@std@@UAEPAXI@Z:near']
extrn ['??_E_System_error_category@std@@UAEPAXI@Z:near']
extrn ['__imp_??7ios_base@std@@QBE_NXZ:near']
extrn ['__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:near']
extrn ['__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ:near']
extrn ['__imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ:near']
extrn ['__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near']
extrn ['__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near']
extrn ['__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near']
extrn ['__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near']
extrn ['__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near']
extrn ['__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z:near']
extrn ['__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z:near']
extrn ['__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near']
extrn ['__imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:near']
extrn ['__imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:near']
extrn ['__imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z:near']
extrn ['__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z:near']
extrn ['__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z:near']
extrn ['__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:near']
extrn ['__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ:near']
extrn ['__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z:near']
extrn ['__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ:near']
extrn ['__imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:near']
extrn ['__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:near']
extrn ['__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ:near']
extrn ['__imp_??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:near']
extrn ['__imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ:near']
extrn ['__imp_?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z:near']
extrn ['__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:near']
extrn ['__imp_?tellp@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@XZ:near']
extrn ['??_EDrawEventRecorder@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['__imp_?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z:near']
extrn ['__imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z:near']
extrn ['__imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ:near']
extrn ['??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:near']
extrn ['??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:near']
extrn ['__imp_?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z:near']
extrn ['??_EDrawEventRecorderPrivate@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:near']
extrn ['??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:near']
extrn ['??_EDrawEventRecorderFile@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_EDrawEventRecorderMemory@gfx@mozilla@@EAEPAXI@Z:near']
extrn ['??0bad_cast@std@@QAE@ABV01@@Z:near']
extrn ['??0exception@std@@QAE@ABV01@@Z:near']
extrn ['??1bad_cast@std@@UAE@XZ:near']
extrn ['?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:near']
extrn ['?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:near']
extrn ['?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z:near']
extrn ['?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z:near']
extrn ['?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ:near']
extrn ['?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:near']
extrn ['?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:near']
extrn ['?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z:near']
extrn ['?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['@__security_check_cookie@4:near']
extrn ['__CxxThrowException@8:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_InitBase:near']
extrn ['__RTC_Shutdown:near']
extrn ['___CxxFrameHandler3:near']
extrn ['__imp_?_BADOFF@std@@3_JB:near']
extrn ['??_7type_info@@6B@:near']
extrn ['__imp_?id@?$codecvt@DDH@std@@2V0locale@2@A:near']
extrn ['___security_cookie:near']
extrn ['__fltused:near']
end
