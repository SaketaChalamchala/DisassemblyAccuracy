endp
?HalfImage2D_SSE2@ImageHalfScaler@gfx@mozilla@@AAEXPAEHABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@0I@Z proc near
push ['ebx']
mov ['ebx,', 'esp']
sub ['esp,', '8']
and ['esp,', '0FFFFFFF0h']
add ['esp,', '4']
push ['ebp']
mov ['ebp,', '[ebx+4]']
mov ['[esp+0Ch+var_8],', 'ebp']
mov ['ebp,', 'esp']
sub ['esp,', '460h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp-460h]']
mov ['ecx,', '118h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp-4],', 'ecx']
mov ['dword', 'ptr', '[ebp-8],', '4']
mov ['dword', 'ptr', '[ebp-0Ch],', '0']
jmp ['short', 'loc_8D']
mov ['eax,', '[ebp-0Ch]']
add ['eax,', '2']
mov ['[ebp-0Ch],', 'eax']
mov ['ecx,', '[ebx+10h]']
mov ['edx,', '[ebp-0Ch]']
cmp ['edx,', '[ecx+4]']
jge ['loc_656']
mov ['eax,', '[ebp-0Ch]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
imul ['eax,', '[ebx+18h]']
add ['eax,', '[ebx+14h]']
mov ['[ebp-10h],', 'eax']
mov ['dword', 'ptr', '[ebp-14h],', '0']
mov ['eax,', '[ebp-0Ch]']
imul ['eax,', '[ebx+0Ch]']
add ['eax,', '[ebx+8]']
xor ['edx,', 'edx']
mov ['ecx,', '10h']
div ['ecx']
test ['edx,', 'edx']
jnz ['loc_1ED']
mov ['eax,', '[ebp-0Ch]']
add ['eax,', '1']
imul ['eax,', '[ebx+0Ch]']
add ['eax,', '[ebx+8]']
xor ['edx,', 'edx']
mov ['ecx,', '10h']
div ['ecx']
test ['edx,', 'edx']
jnz ['loc_1ED']
jmp ['short', 'loc_F9']
mov ['edx,', '[ebp-14h]']
add ['edx,', '8']
mov ['[ebp-14h],', 'edx']
mov ['eax,', '[ebx+10h]']
mov ['ecx,', '[eax]']
sub ['ecx,', '7']
cmp ['[ebp-14h],', 'ecx']
jge ['loc_1E8']
mov ['edx,', '[ebp-0Ch]']
imul ['edx,', '[ebx+0Ch]']
add ['edx,', '[ebx+8]']
mov ['eax,', '[ebp-14h]']
lea ['ecx,', '[edx+eax*4]']
mov ['[ebp-18h],', 'ecx']
mov ['edx,', '[ebp-0Ch]']
add ['edx,', '1']
imul ['edx,', '[ebx+0Ch]']
add ['edx,', '[ebx+8]']
mov ['eax,', '[ebp-14h]']
lea ['ecx,', '[edx+eax*4]']
mov ['[ebp-1Ch],', 'ecx']
mov ['edx,', '[ebp-18h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[edx]']
movdqa ['xmmword', 'ptr', '[ebp-50h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-50h]']
movdqa ['xmmword', 'ptr', '[ebp-30h],', 'xmm0']
mov ['eax,', '[ebp-18h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[eax+10h]']
movdqa ['xmmword', 'ptr', '[ebp-90h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-90h]']
movdqa ['xmmword', 'ptr', '[ebp-70h],', 'xmm0']
mov ['ecx,', '[ebp-1Ch]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ecx]']
movdqa ['xmmword', 'ptr', '[ebp-0D0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-0D0h]']
movdqa ['xmmword', 'ptr', '[ebp-0B0h],', 'xmm0']
mov ['edx,', '[ebp-1Ch]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[edx+10h]']
movdqa ['xmmword', 'ptr', '[ebp-110h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-110h]']
movdqa ['xmmword', 'ptr', '[ebp-0F0h],', 'xmm0']
lea ['eax,', '[ebp-0F0h]']
push ['eax']
lea ['ecx,', '[ebp-0B0h]']
push ['ecx']
lea ['edx,', '[ebp-70h]']
push ['edx']
lea ['eax,', '[ebp-30h]']
push ['eax']
call ['?avg_sse2_8x2@@YA?AT__m128i@@PAT1@000@Z']
add ['esp,', '10h']
movdqa ['xmmword', 'ptr', '[ebp-120h],', 'xmm0']
mov ['ecx,', '[ebp-10h]']
movdqu ['xmm0,', 'xmmword', 'ptr', '[ebp-120h]']
movdqu ['xmmword', 'ptr', '[ecx],', 'xmm0']
mov ['edx,', '[ebp-10h]']
add ['edx,', '10h']
mov ['[ebp-10h],', 'edx']
jmp ['loc_F0']
jmp ['loc_5BA']
mov ['eax,', '[ebp-0Ch]']
imul ['eax,', '[ebx+0Ch]']
add ['eax,', '[ebx+8]']
xor ['edx,', 'edx']
mov ['ecx,', '10h']
div ['ecx']
test ['edx,', 'edx']
jnz ['loc_337']
jmp ['short', 'loc_213']
mov ['edx,', '[ebp-14h]']
add ['edx,', '8']
mov ['[ebp-14h],', 'edx']
mov ['eax,', '[ebx+10h]']
mov ['ecx,', '[eax]']
sub ['ecx,', '7']
cmp ['[ebp-14h],', 'ecx']
jge ['loc_332']
mov ['edx,', '[ebp-0Ch]']
imul ['edx,', '[ebx+0Ch]']
add ['edx,', '[ebx+8]']
mov ['eax,', '[ebp-14h]']
lea ['ecx,', '[edx+eax*4]']
mov ['[ebp-124h],', 'ecx']
mov ['edx,', '[ebp-0Ch]']
add ['edx,', '1']
imul ['edx,', '[ebx+0Ch]']
add ['edx,', '[ebx+8]']
mov ['eax,', '[ebp-14h]']
lea ['ecx,', '[edx+eax*4]']
mov ['[ebp-128h],', 'ecx']
mov ['edx,', '[ebp-124h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[edx]']
movdqa ['xmmword', 'ptr', '[ebp-160h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-160h]']
movdqa ['xmmword', 'ptr', '[ebp-140h],', 'xmm0']
mov ['eax,', '[ebp-124h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[eax+10h]']
movdqa ['xmmword', 'ptr', '[ebp-1A0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-1A0h]']
movdqa ['xmmword', 'ptr', '[ebp-180h],', 'xmm0']
mov ['ecx,', '[ebp-128h]']
push ['ecx']
call ['?loadUnaligned128@@YA?AT__m128i@@PBT1@@Z']
add ['esp,', '4']
movdqa ['xmmword', 'ptr', '[ebp-1E0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-1E0h]']
movdqa ['xmmword', 'ptr', '[ebp-1C0h],', 'xmm0']
mov ['edx,', '[ebp-128h]']
add ['edx,', '10h']
push ['edx']
call ['?loadUnaligned128@@YA?AT__m128i@@PBT1@@Z']
add ['esp,', '4']
movdqa ['xmmword', 'ptr', '[ebp-220h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-220h]']
movdqa ['xmmword', 'ptr', '[ebp-200h],', 'xmm0']
lea ['eax,', '[ebp-200h]']
push ['eax']
lea ['ecx,', '[ebp-1C0h]']
push ['ecx']
lea ['edx,', '[ebp-180h]']
push ['edx']
lea ['eax,', '[ebp-140h]']
push ['eax']
call ['?avg_sse2_8x2@@YA?AT__m128i@@PAT1@000@Z']
add ['esp,', '10h']
movdqa ['xmmword', 'ptr', '[ebp-230h],', 'xmm0']
mov ['ecx,', '[ebp-10h]']
movdqu ['xmm0,', 'xmmword', 'ptr', '[ebp-230h]']
movdqu ['xmmword', 'ptr', '[ecx],', 'xmm0']
mov ['edx,', '[ebp-10h]']
add ['edx,', '10h']
mov ['[ebp-10h],', 'edx']
jmp ['loc_20A']
jmp ['loc_5BA']
mov ['eax,', '[ebp-0Ch]']
add ['eax,', '1']
imul ['eax,', '[ebx+0Ch]']
add ['eax,', '[ebx+8]']
xor ['edx,', 'edx']
mov ['ecx,', '10h']
div ['ecx']
test ['edx,', 'edx']
jnz ['loc_484']
jmp ['short', 'loc_360']
mov ['edx,', '[ebp-14h]']
add ['edx,', '8']
mov ['[ebp-14h],', 'edx']
mov ['eax,', '[ebx+10h]']
mov ['ecx,', '[eax]']
sub ['ecx,', '7']
cmp ['[ebp-14h],', 'ecx']
jge ['loc_47F']
mov ['edx,', '[ebp-0Ch]']
imul ['edx,', '[ebx+0Ch]']
add ['edx,', '[ebx+8]']
mov ['eax,', '[ebp-14h]']
lea ['ecx,', '[edx+eax*4]']
mov ['[ebp-234h],', 'ecx']
mov ['edx,', '[ebp-0Ch]']
add ['edx,', '1']
imul ['edx,', '[ebx+0Ch]']
add ['edx,', '[ebx+8]']
mov ['eax,', '[ebp-14h]']
lea ['ecx,', '[edx+eax*4]']
mov ['[ebp-238h],', 'ecx']
mov ['edx,', '[ebp-234h]']
push ['edx']
call ['?loadUnaligned128@@YA?AT__m128i@@PBT1@@Z']
add ['esp,', '4']
movdqa ['xmmword', 'ptr', '[ebp-270h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-270h]']
movdqa ['xmmword', 'ptr', '[ebp-250h],', 'xmm0']
mov ['eax,', '[ebp-234h]']
add ['eax,', '10h']
push ['eax']
call ['?loadUnaligned128@@YA?AT__m128i@@PBT1@@Z']
add ['esp,', '4']
movdqa ['xmmword', 'ptr', '[ebp-2B0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-2B0h]']
movdqa ['xmmword', 'ptr', '[ebp-290h],', 'xmm0']
mov ['ecx,', '[ebp-238h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ecx]']
movdqa ['xmmword', 'ptr', '[ebp-2F0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-2F0h]']
movdqa ['xmmword', 'ptr', '[ebp-2D0h],', 'xmm0']
mov ['edx,', '[ebp-238h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[edx+10h]']
movdqa ['xmmword', 'ptr', '[ebp-330h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-330h]']
movdqa ['xmmword', 'ptr', '[ebp-310h],', 'xmm0']
lea ['eax,', '[ebp-310h]']
push ['eax']
lea ['ecx,', '[ebp-2D0h]']
push ['ecx']
lea ['edx,', '[ebp-290h]']
push ['edx']
lea ['eax,', '[ebp-250h]']
push ['eax']
call ['?avg_sse2_8x2@@YA?AT__m128i@@PAT1@000@Z']
add ['esp,', '10h']
movdqa ['xmmword', 'ptr', '[ebp-340h],', 'xmm0']
mov ['ecx,', '[ebp-10h]']
movdqu ['xmm0,', 'xmmword', 'ptr', '[ebp-340h]']
movdqu ['xmmword', 'ptr', '[ecx],', 'xmm0']
mov ['edx,', '[ebp-10h]']
add ['edx,', '10h']
mov ['[ebp-10h],', 'edx']
jmp ['loc_357']
jmp ['loc_5BA']
jmp ['short', 'loc_48F']
mov ['eax,', '[ebp-14h]']
add ['eax,', '8']
mov ['[ebp-14h],', 'eax']
mov ['ecx,', '[ebx+10h]']
mov ['edx,', '[ecx]']
sub ['edx,', '7']
cmp ['[ebp-14h],', 'edx']
jge ['loc_5BA']
mov ['eax,', '[ebp-0Ch]']
imul ['eax,', '[ebx+0Ch]']
add ['eax,', '[ebx+8]']
mov ['ecx,', '[ebp-14h]']
lea ['edx,', '[eax+ecx*4]']
mov ['[ebp-344h],', 'edx']
mov ['eax,', '[ebp-0Ch]']
add ['eax,', '1']
imul ['eax,', '[ebx+0Ch]']
add ['eax,', '[ebx+8]']
mov ['ecx,', '[ebp-14h]']
lea ['edx,', '[eax+ecx*4]']
mov ['[ebp-348h],', 'edx']
mov ['eax,', '[ebp-344h]']
push ['eax']
call ['?loadUnaligned128@@YA?AT__m128i@@PBT1@@Z']
add ['esp,', '4']
movdqa ['xmmword', 'ptr', '[ebp-380h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-380h]']
movdqa ['xmmword', 'ptr', '[ebp-360h],', 'xmm0']
mov ['ecx,', '[ebp-344h]']
add ['ecx,', '10h']
push ['ecx']
call ['?loadUnaligned128@@YA?AT__m128i@@PBT1@@Z']
add ['esp,', '4']
movdqa ['xmmword', 'ptr', '[ebp-3C0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-3C0h]']
movdqa ['xmmword', 'ptr', '[ebp-3A0h],', 'xmm0']
mov ['edx,', '[ebp-348h]']
push ['edx']
call ['?loadUnaligned128@@YA?AT__m128i@@PBT1@@Z']
add ['esp,', '4']
movdqa ['xmmword', 'ptr', '[ebp-400h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-400h]']
movdqa ['xmmword', 'ptr', '[ebp-3E0h],', 'xmm0']
mov ['eax,', '[ebp-348h]']
add ['eax,', '10h']
push ['eax']
call ['?loadUnaligned128@@YA?AT__m128i@@PBT1@@Z']
add ['esp,', '4']
movdqa ['xmmword', 'ptr', '[ebp-440h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-440h]']
movdqa ['xmmword', 'ptr', '[ebp-420h],', 'xmm0']
lea ['ecx,', '[ebp-420h]']
push ['ecx']
lea ['edx,', '[ebp-3E0h]']
push ['edx']
lea ['eax,', '[ebp-3A0h]']
push ['eax']
lea ['ecx,', '[ebp-360h]']
push ['ecx']
call ['?avg_sse2_8x2@@YA?AT__m128i@@PAT1@000@Z']
add ['esp,', '10h']
movdqa ['xmmword', 'ptr', '[ebp-450h],', 'xmm0']
mov ['edx,', '[ebp-10h]']
movdqu ['xmm0,', 'xmmword', 'ptr', '[ebp-450h]']
movdqu ['xmmword', 'ptr', '[edx],', 'xmm0']
mov ['eax,', '[ebp-10h]']
add ['eax,', '10h']
mov ['[ebp-10h],', 'eax']
jmp ['loc_486']
mov ['ecx,', '[ebp-10h]']
mov ['[ebp-454h],', 'ecx']
jmp ['short', 'loc_5CE']
mov ['edx,', '[ebp-14h]']
add ['edx,', '2']
mov ['[ebp-14h],', 'edx']
mov ['eax,', '[ebx+10h]']
mov ['ecx,', '[ebp-14h]']
cmp ['ecx,', '[eax]']
jge ['short', 'loc_651']
mov ['edx,', '[ebp-0Ch]']
imul ['edx,', '[ebx+0Ch]']
add ['edx,', '[ebx+8]']
mov ['eax,', '[ebp-14h]']
lea ['ecx,', '[edx+eax*4]']
mov ['[ebp-458h],', 'ecx']
mov ['edx,', '[ebp-0Ch]']
add ['edx,', '1']
imul ['edx,', '[ebx+0Ch]']
add ['edx,', '[ebx+8]']
mov ['eax,', '[ebp-14h]']
lea ['ecx,', '[edx+eax*4]']
mov ['[ebp-45Ch],', 'ecx']
mov ['edx,', '[ebp-45Ch]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp-45Ch]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp-458h]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp-458h]']
mov ['eax,', '[edx]']
push ['eax']
call ['?Avg2x2@@YAIIIII@Z']
add ['esp,', '10h']
mov ['ecx,', '[ebp-454h]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp-454h]']
add ['edx,', '4']
mov ['[ebp-454h],', 'edx']
jmp ['loc_5C5']
jmp ['loc_84']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN44']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['esp,', 'ebp']
pop ['ebp']
mov ['esp,', 'ebx']
pop ['ebx']
retn ['14h']
align ['4']
dd ['offset', '$LN43']
dd ['offset', '$LN27']
db ['90h']
db ['3', 'dup(0FFh)']
dd ['10h']
dd ['offset', '$LN28']
dd ['0FFFFFF50h,', '10h']
dd ['offset', '$LN29']
dd ['0FFFFFF10h,', '10h']
dd ['offset', '$LN30']
dd ['0FFFFFEC0h,', '10h']
dd ['offset', '$LN31']
dd ['0FFFFFE80h,', '10h']
dd ['offset', '$LN32']
dd ['0FFFFFE40h,', '10h']
dd ['offset', '$LN33']
dd ['0FFFFFE00h,', '10h']
dd ['offset', '$LN34']
dd ['0FFFFFDB0h,', '10h']
dd ['offset', '$LN35']
dd ['0FFFFFD70h,', '10h']
dd ['offset', '$LN36']
dd ['0FFFFFD30h,', '10h']
dd ['offset', '$LN37']
dd ['0FFFFFCF0h,', '10h']
dd ['offset', '$LN38']
dd ['0FFFFFCA0h,', '10h']
dd ['offset', '$LN39']
dd ['0FFFFFC60h,', '10h']
dd ['offset', '$LN40']
dd ['0FFFFFC20h,', '10h']
dd ['offset', '$LN41']
dd ['0FFFFFBE0h,', '10h']
dd ['offset', '$LN42']
align ['2']
align ['2']
align ['2']
align ['2']
align ['2']
align ['2']
align ['2']
align ['10h']
endp
?HalfImageVertical_SSE2@ImageHalfScaler@gfx@mozilla@@AAEXPAEHABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@0I@Z proc	near
push ['ebx']
mov ['ebx,', 'esp']
sub ['esp,', '8']
and ['esp,', '0FFFFFFF0h']
add ['esp,', '4']
push ['ebp']
mov ['ebp,', '[ebx+4]']
mov ['[esp+0Ch+var_8],', 'ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1A0h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp-1A0h]']
mov ['ecx,', '68h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp-4],', 'ecx']
mov ['dword', 'ptr', '[ebp-8],', '0']
jmp ['short', 'loc_7A6']
mov ['eax,', '[ebp-8]']
add ['eax,', '2']
mov ['[ebp-8],', 'eax']
mov ['ecx,', '[ebx+10h]']
mov ['edx,', '[ebp-8]']
cmp ['edx,', '[ecx+4]']
jge ['loc_BD6']
mov ['eax,', '[ebp-8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
imul ['eax,', '[ebx+18h]']
add ['eax,', '[ebx+14h]']
mov ['[ebp-0Ch],', 'eax']
mov ['dword', 'ptr', '[ebp-10h],', '0']
mov ['eax,', '[ebp-8]']
imul ['eax,', '[ebx+0Ch]']
add ['eax,', '[ebx+8]']
xor ['edx,', 'edx']
mov ['ecx,', '10h']
div ['ecx']
test ['edx,', 'edx']
jnz ['loc_8AB']
mov ['eax,', '[ebp-8]']
add ['eax,', '1']
imul ['eax,', '[ebx+0Ch]']
add ['eax,', '[ebx+8]']
xor ['edx,', 'edx']
mov ['ecx,', '10h']
div ['ecx']
test ['edx,', 'edx']
jnz ['loc_8AB']
jmp ['short', 'loc_812']
mov ['edx,', '[ebp-10h]']
add ['edx,', '4']
mov ['[ebp-10h],', 'edx']
mov ['eax,', '[ebx+10h]']
mov ['ecx,', '[eax]']
sub ['ecx,', '3']
cmp ['[ebp-10h],', 'ecx']
jge ['loc_8A6']
mov ['edx,', '[ebp-8]']
imul ['edx,', '[ebx+0Ch]']
add ['edx,', '[ebx+8]']
mov ['eax,', '[ebp-10h]']
lea ['ecx,', '[edx+eax*4]']
mov ['[ebp-14h],', 'ecx']
mov ['edx,', '[ebp-8]']
add ['edx,', '1']
imul ['edx,', '[ebx+0Ch]']
add ['edx,', '[ebx+8]']
mov ['eax,', '[ebp-10h]']
lea ['ecx,', '[edx+eax*4]']
mov ['[ebp-18h],', 'ecx']
mov ['edx,', '[ebp-14h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[edx]']
movdqa ['xmmword', 'ptr', '[ebp-40h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-40h]']
movdqa ['xmmword', 'ptr', '[ebp-30h],', 'xmm0']
mov ['eax,', '[ebp-18h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[eax]']
movdqa ['xmmword', 'ptr', '[ebp-60h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-60h]']
movdqa ['xmmword', 'ptr', '[ebp-50h],', 'xmm0']
movdqa ['xmm1,', 'xmmword', 'ptr', '[ebp-50h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-30h]']
call ['?avg_sse2_4x2_4x1@@YA?AT__m128i@@T1@0@Z']
movdqa ['xmmword', 'ptr', '[ebp-70h],', 'xmm0']
mov ['ecx,', '[ebp-0Ch]']
movdqu ['xmm0,', 'xmmword', 'ptr', '[ebp-70h]']
movdqu ['xmmword', 'ptr', '[ecx],', 'xmm0']
mov ['edx,', '[ebp-0Ch]']
add ['edx,', '10h']
mov ['[ebp-0Ch],', 'edx']
jmp ['loc_809']
jmp ['loc_B51']
mov ['eax,', '[ebp-8]']
imul ['eax,', '[ebx+0Ch]']
add ['eax,', '[ebx+8]']
xor ['edx,', 'edx']
mov ['ecx,', '10h']
div ['ecx']
test ['edx,', 'edx']
jnz ['loc_98D']
jmp ['short', 'loc_8D1']
mov ['edx,', '[ebp-10h]']
add ['edx,', '4']
mov ['[ebp-10h],', 'edx']
mov ['eax,', '[ebx+10h]']
mov ['ecx,', '[eax]']
sub ['ecx,', '3']
cmp ['[ebp-10h],', 'ecx']
jge ['loc_988']
mov ['edx,', '[ebp-8]']
imul ['edx,', '[ebx+0Ch]']
add ['edx,', '[ebx+8]']
mov ['eax,', '[ebp-10h]']
lea ['ecx,', '[edx+eax*4]']
mov ['[ebp-74h],', 'ecx']
mov ['edx,', '[ebp-8]']
add ['edx,', '1']
imul ['edx,', '[ebx+0Ch]']
add ['edx,', '[ebx+8]']
mov ['eax,', '[ebp-10h]']
lea ['ecx,', '[edx+eax*4]']
mov ['[ebp-78h],', 'ecx']
mov ['edx,', '[ebp-74h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[edx]']
movdqa ['xmmword', 'ptr', '[ebp-0A0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-0A0h]']
movdqa ['xmmword', 'ptr', '[ebp-90h],', 'xmm0']
mov ['eax,', '[ebp-78h]']
push ['eax']
call ['?loadUnaligned128@@YA?AT__m128i@@PBT1@@Z']
add ['esp,', '4']
movdqa ['xmmword', 'ptr', '[ebp-0C0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-0C0h]']
movdqa ['xmmword', 'ptr', '[ebp-0B0h],', 'xmm0']
movdqa ['xmm1,', 'xmmword', 'ptr', '[ebp-0B0h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-90h]']
call ['?avg_sse2_4x2_4x1@@YA?AT__m128i@@T1@0@Z']
movdqa ['xmmword', 'ptr', '[ebp-0D0h],', 'xmm0']
mov ['ecx,', '[ebp-0Ch]']
movdqu ['xmm0,', 'xmmword', 'ptr', '[ebp-0D0h]']
movdqu ['xmmword', 'ptr', '[ecx],', 'xmm0']
mov ['edx,', '[ebp-0Ch]']
add ['edx,', '10h']
mov ['[ebp-0Ch],', 'edx']
jmp ['loc_8C8']
jmp ['loc_B51']
mov ['eax,', '[ebp-8]']
add ['eax,', '1']
imul ['eax,', '[ebx+0Ch]']
add ['eax,', '[ebx+8]']
xor ['edx,', 'edx']
mov ['ecx,', '10h']
div ['ecx']
test ['edx,', 'edx']
jnz ['loc_A7E']
jmp ['short', 'loc_9B6']
mov ['edx,', '[ebp-10h]']
add ['edx,', '4']
mov ['[ebp-10h],', 'edx']
mov ['eax,', '[ebx+10h]']
mov ['ecx,', '[eax]']
sub ['ecx,', '3']
cmp ['[ebp-10h],', 'ecx']
jge ['loc_A79']
mov ['edx,', '[ebp-8]']
imul ['edx,', '[ebx+0Ch]']
add ['edx,', '[ebx+8]']
mov ['eax,', '[ebp-10h]']
lea ['ecx,', '[edx+eax*4]']
mov ['[ebp-0D4h],', 'ecx']
mov ['edx,', '[ebp-8]']
add ['edx,', '1']
imul ['edx,', '[ebx+0Ch]']
add ['edx,', '[ebx+8]']
mov ['eax,', '[ebp-10h]']
lea ['ecx,', '[edx+eax*4]']
mov ['[ebp-0D8h],', 'ecx']
mov ['edx,', '[ebp-0D4h]']
push ['edx']
call ['?loadUnaligned128@@YA?AT__m128i@@PBT1@@Z']
add ['esp,', '4']
movdqa ['xmmword', 'ptr', '[ebp-100h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-100h]']
movdqa ['xmmword', 'ptr', '[ebp-0F0h],', 'xmm0']
mov ['eax,', '[ebp-0D8h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[eax]']
movdqa ['xmmword', 'ptr', '[ebp-120h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-120h]']
movdqa ['xmmword', 'ptr', '[ebp-110h],', 'xmm0']
movdqa ['xmm1,', 'xmmword', 'ptr', '[ebp-110h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-0F0h]']
call ['?avg_sse2_4x2_4x1@@YA?AT__m128i@@T1@0@Z']
movdqa ['xmmword', 'ptr', '[ebp-130h],', 'xmm0']
mov ['ecx,', '[ebp-0Ch]']
movdqu ['xmm0,', 'xmmword', 'ptr', '[ebp-130h]']
movdqu ['xmmword', 'ptr', '[ecx],', 'xmm0']
mov ['edx,', '[ebp-0Ch]']
add ['edx,', '10h']
mov ['[ebp-0Ch],', 'edx']
jmp ['loc_9AD']
jmp ['loc_B51']
jmp ['short', 'loc_A89']
mov ['eax,', '[ebp-10h]']
add ['eax,', '4']
mov ['[ebp-10h],', 'eax']
mov ['ecx,', '[ebx+10h]']
mov ['edx,', '[ecx]']
sub ['edx,', '3']
cmp ['[ebp-10h],', 'edx']
jge ['loc_B51']
mov ['eax,', '[ebp-8]']
imul ['eax,', '[ebx+0Ch]']
add ['eax,', '[ebx+8]']
mov ['ecx,', '[ebp-10h]']
lea ['edx,', '[eax+ecx*4]']
mov ['[ebp-134h],', 'edx']
mov ['eax,', '[ebp-8]']
add ['eax,', '1']
imul ['eax,', '[ebx+0Ch]']
add ['eax,', '[ebx+8]']
mov ['ecx,', '[ebp-10h]']
lea ['edx,', '[eax+ecx*4]']
mov ['[ebp-138h],', 'edx']
mov ['eax,', '[ebp-134h]']
push ['eax']
call ['?loadUnaligned128@@YA?AT__m128i@@PBT1@@Z']
add ['esp,', '4']
movdqa ['xmmword', 'ptr', '[ebp-160h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-160h]']
movdqa ['xmmword', 'ptr', '[ebp-150h],', 'xmm0']
mov ['ecx,', '[ebp-138h]']
push ['ecx']
call ['?loadUnaligned128@@YA?AT__m128i@@PBT1@@Z']
add ['esp,', '4']
movdqa ['xmmword', 'ptr', '[ebp-180h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-180h]']
movdqa ['xmmword', 'ptr', '[ebp-170h],', 'xmm0']
movdqa ['xmm1,', 'xmmword', 'ptr', '[ebp-170h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-150h]']
call ['?avg_sse2_4x2_4x1@@YA?AT__m128i@@T1@0@Z']
movdqa ['xmmword', 'ptr', '[ebp-190h],', 'xmm0']
mov ['edx,', '[ebp-0Ch]']
movdqu ['xmm0,', 'xmmword', 'ptr', '[ebp-190h]']
movdqu ['xmmword', 'ptr', '[edx],', 'xmm0']
mov ['eax,', '[ebp-0Ch]']
add ['eax,', '10h']
mov ['[ebp-0Ch],', 'eax']
jmp ['loc_A80']
mov ['ecx,', '[ebp-0Ch]']
mov ['[ebp-194h],', 'ecx']
jmp ['short', 'loc_B65']
mov ['edx,', '[ebp-10h]']
add ['edx,', '1']
mov ['[ebp-10h],', 'edx']
mov ['eax,', '[ebx+10h]']
mov ['ecx,', '[ebp-10h]']
cmp ['ecx,', '[eax]']
jge ['short', 'loc_BD1']
mov ['edx,', '[ebp-8]']
imul ['edx,', '[ebx+0Ch]']
add ['edx,', '[ebx+8]']
mov ['eax,', '[ebp-10h]']
lea ['ecx,', '[edx+eax*4]']
mov ['[ebp-198h],', 'ecx']
mov ['edx,', '[ebp-8]']
add ['edx,', '1']
imul ['edx,', '[ebx+0Ch]']
add ['edx,', '[ebx+8]']
mov ['eax,', '[ebp-10h]']
lea ['ecx,', '[edx+eax*4]']
mov ['[ebp-19Ch],', 'ecx']
mov ['edx,', '[ebp-19Ch]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp-198h]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?Avg2@@YAIII@Z']
add ['esp,', '8']
mov ['ecx,', '[ebp-194h]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp-194h]']
add ['edx,', '4']
mov ['[ebp-194h],', 'edx']
jmp ['short', 'loc_B5C']
jmp ['loc_79D']
pop ['edi']
mov ['esp,', 'ebp']
pop ['ebp']
mov ['esp,', 'ebx']
pop ['ebx']
retn ['14h']
endp
?HalfImageHorizontal_SSE2@ImageHalfScaler@gfx@mozilla@@AAEXPAEHABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@0I@Z proc near
push ['ebx']
mov ['ebx,', 'esp']
sub ['esp,', '8']
and ['esp,', '0FFFFFFF0h']
add ['esp,', '4']
push ['ebp']
mov ['ebp,', '[ebx+4]']
mov ['[esp+0Ch+var_8],', 'ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E0h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp-0E0h]']
mov ['ecx,', '38h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp-4],', 'ecx']
mov ['dword', 'ptr', '[ebp-8],', '0']
jmp ['short', 'loc_C26']
mov ['eax,', '[ebp-8]']
add ['eax,', '1']
mov ['[ebp-8],', 'eax']
mov ['ecx,', '[ebx+10h]']
mov ['edx,', '[ebp-8]']
cmp ['edx,', '[ecx+4]']
jge ['loc_E10']
mov ['eax,', '[ebp-8]']
imul ['eax,', '[ebx+18h]']
add ['eax,', '[ebx+14h]']
mov ['[ebp-0Ch],', 'eax']
mov ['dword', 'ptr', '[ebp-10h],', '0']
mov ['eax,', '[ebp-8]']
imul ['eax,', '[ebx+0Ch]']
add ['eax,', '[ebx+8]']
xor ['edx,', 'edx']
mov ['ecx,', '10h']
div ['ecx']
test ['edx,', 'edx']
jnz ['loc_CEF']
jmp ['short', 'loc_C6F']
mov ['edx,', '[ebp-10h]']
add ['edx,', '8']
mov ['[ebp-10h],', 'edx']
mov ['eax,', '[ebx+10h]']
mov ['ecx,', '[eax]']
sub ['ecx,', '7']
cmp ['[ebp-10h],', 'ecx']
jge ['short', 'loc_CEA']
mov ['edx,', '[ebp-8]']
imul ['edx,', '[ebx+0Ch]']
add ['edx,', '[ebx+8]']
mov ['eax,', '[ebp-10h]']
lea ['ecx,', '[edx+eax*4]']
mov ['[ebp-14h],', 'ecx']
mov ['edx,', '[ebp-14h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[edx]']
movdqa ['xmmword', 'ptr', '[ebp-40h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-40h]']
movdqa ['xmmword', 'ptr', '[ebp-30h],', 'xmm0']
mov ['eax,', '[ebp-14h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[eax+10h]']
movdqa ['xmmword', 'ptr', '[ebp-60h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-60h]']
movdqa ['xmmword', 'ptr', '[ebp-50h],', 'xmm0']
movdqa ['xmm1,', 'xmmword', 'ptr', '[ebp-50h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-30h]']
call ['?avg_sse2_8x1_4x1@@YA?AT__m128i@@T1@0@Z']
movdqa ['xmmword', 'ptr', '[ebp-70h],', 'xmm0']
mov ['ecx,', '[ebp-0Ch]']
movdqu ['xmm0,', 'xmmword', 'ptr', '[ebp-70h]']
movdqu ['xmmword', 'ptr', '[ecx],', 'xmm0']
mov ['edx,', '[ebp-0Ch]']
add ['edx,', '10h']
mov ['[ebp-0Ch],', 'edx']
jmp ['loc_C66']
jmp ['loc_DA3']
jmp ['short', 'loc_CFA']
mov ['eax,', '[ebp-10h]']
add ['eax,', '8']
mov ['[ebp-10h],', 'eax']
mov ['ecx,', '[ebx+10h]']
mov ['edx,', '[ecx]']
sub ['edx,', '7']
cmp ['[ebp-10h],', 'edx']
jge ['loc_DA3']
mov ['eax,', '[ebp-8]']
imul ['eax,', '[ebx+0Ch]']
add ['eax,', '[ebx+8]']
mov ['ecx,', '[ebp-10h]']
lea ['edx,', '[eax+ecx*4]']
mov ['[ebp-74h],', 'edx']
mov ['eax,', '[ebp-74h]']
push ['eax']
call ['?loadUnaligned128@@YA?AT__m128i@@PBT1@@Z']
add ['esp,', '4']
movdqa ['xmmword', 'ptr', '[ebp-0A0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-0A0h]']
movdqa ['xmmword', 'ptr', '[ebp-90h],', 'xmm0']
mov ['ecx,', '[ebp-74h]']
add ['ecx,', '10h']
push ['ecx']
call ['?loadUnaligned128@@YA?AT__m128i@@PBT1@@Z']
add ['esp,', '4']
movdqa ['xmmword', 'ptr', '[ebp-0C0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-0C0h]']
movdqa ['xmmword', 'ptr', '[ebp-0B0h],', 'xmm0']
movdqa ['xmm1,', 'xmmword', 'ptr', '[ebp-0B0h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-90h]']
call ['?avg_sse2_8x1_4x1@@YA?AT__m128i@@T1@0@Z']
movdqa ['xmmword', 'ptr', '[ebp-0D0h],', 'xmm0']
mov ['edx,', '[ebp-0Ch]']
movdqu ['xmm0,', 'xmmword', 'ptr', '[ebp-0D0h]']
movdqu ['xmmword', 'ptr', '[edx],', 'xmm0']
mov ['eax,', '[ebp-0Ch]']
add ['eax,', '10h']
mov ['[ebp-0Ch],', 'eax']
jmp ['loc_CF1']
mov ['ecx,', '[ebp-0Ch]']
mov ['[ebp-0D4h],', 'ecx']
jmp ['short', 'loc_DB7']
mov ['edx,', '[ebp-10h]']
add ['edx,', '2']
mov ['[ebp-10h],', 'edx']
mov ['eax,', '[ebx+10h]']
mov ['ecx,', '[ebp-10h]']
cmp ['ecx,', '[eax]']
jge ['short', 'loc_E0B']
mov ['edx,', '[ebp-8]']
imul ['edx,', '[ebx+0Ch]']
add ['edx,', '[ebx+8]']
mov ['eax,', '[ebp-10h]']
lea ['ecx,', '[edx+eax*4]']
mov ['[ebp-0D8h],', 'ecx']
mov ['edx,', '[ebp-0D8h]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp-0D8h]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?Avg2@@YAIII@Z']
add ['esp,', '8']
mov ['ecx,', '[ebp-0D4h]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp-0D4h]']
add ['edx,', '4']
mov ['[ebp-0D4h],', 'edx']
jmp ['short', 'loc_DAE']
jmp ['loc_C1D']
pop ['edi']
mov ['esp,', 'ebp']
pop ['ebp']
mov ['esp,', 'ebx']
pop ['ebx']
retn ['14h']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@D@std@@YAPADIPAD@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_E37']
jmp ['short', 'loc_E61']
cmp ['[ebp+arg_0],', '0FFFFFFFFh']
ja ['short', 'loc_E52']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_E61']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_E8F']
jmp ['short', 'loc_EBF']
cmp ['[ebp+arg_0],', '1FFFFFFFh']
ja ['short', 'loc_EB0']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '3']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_EBF']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_EFD']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@D@std@@YAPADAAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_FBE']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_FC5']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['8']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_10BC']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
mov ['edx,', '[eax]']
mov ['eax,', '[eax+4]']
mov ['ecx,', '[ebp+var_18]']
mov ['[ecx],', 'edx']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'edx']
jmp ['short', 'loc_10C3']
mov ['[ebp+var_1C],', '0']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??0_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+18h],', '0']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@D@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@D@std@@QAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
lea ['ecx,', '[ebp+var_14+3]']
call ['??0?$allocator@D@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
mov ['[ebp+var_4],', '0']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
mov ['eax,', '[ebp+Str]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Container_proxy@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Generic_error_category@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0error_category@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_Generic_error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Iostream_error_category@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Generic_error_category@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_Iostream_error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_System_error_category@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Generic_error_category@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_System_error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0error_category@std@@QAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??1_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1_Generic_error_category@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1error_category@std@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1_Iostream_error_category@std@@UAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Generic_error_category@std@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1_System_error_category@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Generic_error_category@std@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1error_category@std@@UAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7error_category@std@@6B@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??2@YAPAXIPAX@Z	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??3@YAXPAX0@Z	proc near		
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??8error_category@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+arg_0]']
jnz ['short', 'loc_1594']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_159B']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??8error_condition@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?category@error_condition@std@@QBEABVerror_category@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?category@error_condition@std@@QBEABVerror_category@2@XZ']
mov ['ecx,', 'eax']
call ['??8error_category@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_15FA']
mov ['ecx,', '[ebp+var_4]']
call ['?value@error_condition@std@@QBEHXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?value@error_condition@std@@QBEHXZ']
cmp ['esi,', 'eax']
jnz ['short', 'loc_15FA']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_1601']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G_Generic_error_category@std@@UAEPAXI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Generic_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1642']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Iostream_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1682']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G_System_error_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_System_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_16C2']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_Gerror_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1702']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
call ['??0_Generic_error_category@std@@QAE@XZ']
push ['offset', '??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A']
call ['??0_Iostream_error_category@std@@QAE@XZ']
push ['offset', '??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
call ['??0_System_error_category@std@@QAE@XZ']
push ['offset', '??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__Eallocator_arg@std@@YAXXZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
xor ['eax,', 'eax']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__Epiecewise_construct@std@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
xor ['eax,', 'eax']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$yd']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
call ['??1_Generic_error_category@std@@UAE@XZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$yd']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A']
call ['??1_Iostream_error_category@std@@UAE@XZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$yd']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
call ['??1_System_error_category@std@@UAE@XZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Avg2@@YAIII@Z	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_C],', '0FEFEFEFEh']
mov ['eax,', '[ebp+var_4]']
and ['eax,', '[ebp+var_C]']
shr ['eax,', '1']
add ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Avg2x2@@YAIIIII@Z proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_4]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '[ebp+arg_8]']
or ['ecx,', 'edx']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '[ebp+arg_8]']
or ['ecx,', 'eax']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_C],', '0FEFEFEFEh']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', '[ebp+arg_C]']
and ['ecx,', '[ebp+var_C]']
shr ['ecx,', '1']
mov ['edx,', '[ebp+var_4]']
and ['edx,', '[ebp+arg_C]']
add ['ecx,', 'edx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
xor ['eax,', '[ebp+var_8]']
and ['eax,', '[ebp+var_C]']
shr ['eax,', '1']
mov ['ecx,', '[ebp+var_4]']
and ['ecx,', '[ebp+var_8]']
add ['eax,', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_C+3]']
call ['?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4']
dd ['offset', '$LN3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '28h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
or ['eax,', '0Fh']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_14]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+var_18]']
jnb ['short', 'loc_19A2']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'ecx']
jmp ['short', 'loc_19F4']
mov ['eax,', '[ebp+var_18]']
xor ['edx,', 'edx']
mov ['ecx,', '3']
div ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['ecx,', '[edx+18h]']
shr ['ecx,', '1']
cmp ['ecx,', 'eax']
ja ['short', 'loc_19BC']
jmp ['short', 'loc_19F4']
mov ['edx,', '[ebp+var_14]']
mov ['esi,', '[edx+18h]']
shr ['esi,', '1']
mov ['ecx,', '[ebp+var_14]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
sub ['eax,', 'esi']
mov ['ecx,', '[ebp+var_14]']
cmp ['[ecx+18h],', 'eax']
ja ['short', 'loc_19E9']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+18h]']
shr ['eax,', '1']
mov ['ecx,', '[ebp+var_14]']
add ['eax,', '[ecx+18h]']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_19F4']
mov ['ecx,', '[ebp+var_14]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
lea ['edx,', '[ebp+var_25]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_30]']
mov ['[ebp+var_20],', 'ecx']
jmp ['short', 'loc_1A8B']
endp
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
mov ['[ebp-10h],', 'esp']
mov ['edx,', '[ebp+8]']
mov ['[ebp-18h],', 'edx']
mov ['byte', 'ptr', '[ebp-4],', '2']
lea ['eax,', '[ebp-26h]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['[ebp-34h],', 'eax']
mov ['ecx,', '[ebp-18h]']
add ['ecx,', '1']
push ['ecx']
mov ['ecx,', '[ebp-34h]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z']
mov ['[ebp-38h],', 'eax']
mov ['edx,', '[ebp-38h]']
mov ['[ebp-20h],', 'edx']
jmp ['short', 'loc_1A75']
endp
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
push ['0']
push ['1']
mov ['ecx,', '[ebp-14h]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN17']
retn
mov ['dword', 'ptr', '[ebp-4],', '1']
jmp ['short', 'loc_1A85']
endp
$LN17		proc near		
mov ['dword', 'ptr', '[ebp-4],', '1']
mov ['eax,', 'offset', '$LN19']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_1A9B']
endp
$LN19		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
cmp ['dword', 'ptr', '[ebp+0Ch],', '0']
jbe ['short', 'loc_1ABA']
mov ['eax,', '[ebp+0Ch]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
mov ['ecx,', '[ebp-20h]']
push ['ecx']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
push ['0']
push ['1']
mov ['ecx,', '[ebp-14h]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
lea ['edx,', '[ebp-20h]']
push ['edx']
mov ['eax,', '[ebp-14h]']
add ['eax,', '4']
push ['eax']
lea ['ecx,', '[ebp-27h]']
push ['ecx']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z']
mov ['edx,', '[ebp-14h]']
mov ['eax,', '[ebp-18h]']
mov ['[edx+18h],', 'eax']
mov ['ecx,', '[ebp+0Ch]']
push ['ecx']
mov ['ecx,', '[ebp-14h]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN23']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp-0Ch]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '38h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
dd ['offset', '$LN22']
dd ['offset', '$LN20']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-3Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+14h],', 'ecx']
lea ['edx,', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
add ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?assign@?$char_traits@D@std@@SAXAADABD@Z']
add ['esp,', '8']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN4_0']
dd ['offset', '$LN3_0']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+Size],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
jnb ['short', 'loc_1CA7']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_1CC7']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
jmp ['short', 'loc_1D11']
movzx ['edx,', '[ebp+arg_4]']
test ['edx,', 'edx']
jz ['short', 'loc_1D01']
cmp ['[ebp+arg_0],', '10h']
jnb ['short', 'loc_1D01']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+14h]']
jnb ['short', 'loc_1CE8']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+Size],', 'edx']
jmp ['short', 'loc_1CF1']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+Size],', 'ecx']
mov ['edx,', '[ebp+Size]']
push ['edx']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
jmp ['short', 'loc_1D11']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_1D11']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
cmp ['[ebp+arg_0],', '0']
jbe ['short', 'loc_1D20']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_1D27']
mov ['[ebp+var_C],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_C]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_1D70']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
cmp ['[ebp+arg_0],', 'eax']
jb ['short', 'loc_1D70']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
mov ['ecx,', '[ebp+var_4]']
add ['eax,', '[ecx+14h]']
cmp ['eax,', '[ebp+arg_0]']
ja ['short', 'loc_1D76']
xor ['al,', 'al']
jmp ['short', 'loc_1D78']
jmp ['short', 'loc_1D78']
mov ['al,', '1']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+18h],', '10h']
jb ['short', 'loc_1DBC']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_1DC5']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+18h],', '10h']
jb ['short', 'loc_1E0C']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_1E15']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
movzx ['eax,', '[ebp+arg_0]']
test ['eax,', 'eax']
jnz ['short', 'loc_1E50']
jmp ['short', 'loc_1EC3']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+18h],', '10h']
jb ['short', 'loc_1EC3']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
push ['ecx']
lea ['edx,', '[ebp+var_C+3]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z']
cmp ['[ebp+Size],', '0']
jbe ['short', 'loc_1EA2']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '4']
push ['edx']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
add ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
lea ['eax,', '[ebp+var_C+2]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+18h],', '0Fh']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['offset', '??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Xlength_error@std@@YAXPBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['offset', '??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Xout_of_range@std@@YAXPBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_mm_not_si128@@YA?AT__m128i@@T1@@Z proc near
push ['ebx']
mov ['ebx,', 'esp']
sub ['esp,', '8']
and ['esp,', '0FFFFFFF0h']
add ['esp,', '4']
push ['ebp']
mov ['ebp,', '[ebx+4]']
mov ['[esp+0Ch+var_8],', 'ebp']
mov ['ebp,', 'esp']
sub ['esp,', '40h']
push ['edi']
lea ['edi,', '[ebp-40h]']
mov ['ecx,', '10h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movdqa ['xmmword', 'ptr', '[ebp-10h],', 'xmm0']
movdqa ['xmm0,', 'ds:__xmm@ffffffffffffffffffffffffffffffff']
movdqa ['xmmword', 'ptr', '[ebp-30h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-30h]']
movdqa ['xmmword', 'ptr', '[ebp-20h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-10h]']
pxor ['xmm0,', 'xmmword', 'ptr', '[ebp-20h]']
movdqa ['xmmword', 'ptr', '[ebp-40h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-40h]']
pop ['edi']
mov ['esp,', 'ebp']
pop ['ebp']
mov ['esp,', 'ebx']
pop ['ebx']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@D@std@@QAEPADI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@D@std@@QAEPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@D@std@@YAPADIPAD@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+Size],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_2068']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+Size],', 'eax']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+Size]']
jnb ['short', 'loc_2084']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+Size],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+arg_0]']
jnz ['short', 'loc_20AB']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z']
jmp ['short', 'loc_20ED']
push ['0']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_20ED']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ']
add ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['490h']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['?length@?$char_traits@D@std@@SAIPBD@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+Size],', '0']
jz ['short', 'loc_217A']
push ['47Fh']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_21AD']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
mov ['ecx,', '[ebp+Src]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z']
jmp ['short', 'loc_21EA']
push ['0']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_21E7']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?avg_sse2_4x2_4x1@@YA?AT__m128i@@T1@0@Z	proc near
push ['ebx']
mov ['ebx,', 'esp']
sub ['esp,', '8']
and ['esp,', '0FFFFFFF0h']
add ['esp,', '4']
push ['ebp']
mov ['ebp,', '[ebx+4]']
mov ['[esp+0Ch+var_8],', 'ebp']
mov ['ebp,', 'esp']
sub ['esp,', '60h']
push ['edi']
lea ['edi,', '[ebp-60h]']
mov ['ecx,', '18h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movdqa ['xmmword', 'ptr', '[ebp-20h],', 'xmm1']
movdqa ['xmmword', 'ptr', '[ebp-10h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-20h]']
call ['?_mm_not_si128@@YA?AT__m128i@@T1@@Z']
movdqa ['xmmword', 'ptr', '[ebp-40h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-10h]']
call ['?_mm_not_si128@@YA?AT__m128i@@T1@@Z']
movdqa ['xmmword', 'ptr', '[ebp-30h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-30h]']
pavgb ['xmm0,', 'xmmword', 'ptr', '[ebp-40h]']
movdqa ['xmmword', 'ptr', '[ebp-50h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-50h]']
call ['?_mm_not_si128@@YA?AT__m128i@@T1@@Z']
movdqa ['xmmword', 'ptr', '[ebp-60h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-60h]']
pop ['edi']
mov ['esp,', 'ebp']
pop ['ebp']
mov ['esp,', 'ebx']
pop ['ebx']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?avg_sse2_8x1_4x1@@YA?AT__m128i@@T1@0@Z	proc near
push ['ebx']
mov ['ebx,', 'esp']
sub ['esp,', '8']
and ['esp,', '0FFFFFFF0h']
add ['esp,', '4']
push ['ebp']
mov ['ebp,', '[ebx+4]']
mov ['[esp+0Ch+var_8],', 'ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F0h']
push ['edi']
lea ['edi,', '[ebp-0F0h]']
mov ['ecx,', '3Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movdqa ['xmmword', 'ptr', '[ebp-20h],', 'xmm1']
movdqa ['xmmword', 'ptr', '[ebp-10h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-20h]']
movaps ['xmmword', 'ptr', '[ebp-50h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-10h]']
movaps ['xmmword', 'ptr', '[ebp-40h],', 'xmm0']
movaps ['xmm0,', 'xmmword', 'ptr', '[ebp-40h]']
shufps ['xmm0,', 'xmmword', 'ptr', '[ebp-50h],', '0DDh']
movaps ['xmmword', 'ptr', '[ebp-60h],', 'xmm0']
movaps ['xmm0,', 'xmmword', 'ptr', '[ebp-60h]']
movdqa ['xmmword', 'ptr', '[ebp-70h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-70h]']
movdqa ['xmmword', 'ptr', '[ebp-30h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-20h]']
movaps ['xmmword', 'ptr', '[ebp-90h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-10h]']
movaps ['xmmword', 'ptr', '[ebp-80h],', 'xmm0']
movaps ['xmm0,', 'xmmword', 'ptr', '[ebp-80h]']
shufps ['xmm0,', 'xmmword', 'ptr', '[ebp-90h],', '88h']
movaps ['xmmword', 'ptr', '[ebp-0A0h],', 'xmm0']
movaps ['xmm0,', 'xmmword', 'ptr', '[ebp-0A0h]']
movdqa ['xmmword', 'ptr', '[ebp-0B0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-0B0h]']
movdqa ['xmmword', 'ptr', '[ebp-20h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-30h]']
movdqa ['xmmword', 'ptr', '[ebp-10h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-20h]']
call ['?_mm_not_si128@@YA?AT__m128i@@T1@@Z']
movdqa ['xmmword', 'ptr', '[ebp-0D0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-10h]']
call ['?_mm_not_si128@@YA?AT__m128i@@T1@@Z']
movdqa ['xmmword', 'ptr', '[ebp-0C0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-0C0h]']
pavgb ['xmm0,', 'xmmword', 'ptr', '[ebp-0D0h]']
movdqa ['xmmword', 'ptr', '[ebp-0E0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-0E0h]']
call ['?_mm_not_si128@@YA?AT__m128i@@T1@@Z']
movdqa ['xmmword', 'ptr', '[ebp-0F0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-0F0h]']
pop ['edi']
mov ['esp,', 'ebp']
pop ['ebp']
mov ['esp,', 'ebx']
pop ['ebx']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?avg_sse2_8x2@@YA?AT__m128i@@PAT1@000@Z	proc near
push ['ebx']
mov ['ebx,', 'esp']
sub ['esp,', '8']
and ['esp,', '0FFFFFFF0h']
add ['esp,', '4']
push ['ebp']
mov ['ebp,', '[ebx+4]']
mov ['[esp+0Ch+var_8],', 'ebp']
mov ['ebp,', 'esp']
sub ['esp,', '200h']
push ['edi']
lea ['edi,', '[ebp-200h]']
mov ['ecx,', '80h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebx+0Ch]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[eax]']
movaps ['xmmword', 'ptr', '[ebp-30h],', 'xmm0']
mov ['ecx,', '[ebx+8]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ecx]']
movaps ['xmmword', 'ptr', '[ebp-20h],', 'xmm0']
movaps ['xmm0,', 'xmmword', 'ptr', '[ebp-20h]']
shufps ['xmm0,', 'xmmword', 'ptr', '[ebp-30h],', '88h']
movaps ['xmmword', 'ptr', '[ebp-40h],', 'xmm0']
movaps ['xmm0,', 'xmmword', 'ptr', '[ebp-40h]']
movdqa ['xmmword', 'ptr', '[ebp-50h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-50h]']
movdqa ['xmmword', 'ptr', '[ebp-10h],', 'xmm0']
mov ['edx,', '[ebx+0Ch]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[edx]']
movaps ['xmmword', 'ptr', '[ebp-70h],', 'xmm0']
mov ['eax,', '[ebx+8]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[eax]']
movaps ['xmmword', 'ptr', '[ebp-60h],', 'xmm0']
movaps ['xmm0,', 'xmmword', 'ptr', '[ebp-60h]']
shufps ['xmm0,', 'xmmword', 'ptr', '[ebp-70h],', '0DDh']
movaps ['xmmword', 'ptr', '[ebp-80h],', 'xmm0']
movaps ['xmm0,', 'xmmword', 'ptr', '[ebp-80h]']
movdqa ['xmmword', 'ptr', '[ebp-90h],', 'xmm0']
mov ['ecx,', '[ebx+0Ch]']
movdqu ['xmm0,', 'xmmword', 'ptr', '[ebp-90h]']
movdqu ['xmmword', 'ptr', '[ecx],', 'xmm0']
mov ['edx,', '[ebx+8]']
movdqu ['xmm0,', 'xmmword', 'ptr', '[ebp-10h]']
movdqu ['xmmword', 'ptr', '[edx],', 'xmm0']
mov ['eax,', '[ebx+14h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[eax]']
movaps ['xmmword', 'ptr', '[ebp-0B0h],', 'xmm0']
mov ['ecx,', '[ebx+10h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ecx]']
movaps ['xmmword', 'ptr', '[ebp-0A0h],', 'xmm0']
movaps ['xmm0,', 'xmmword', 'ptr', '[ebp-0A0h]']
shufps ['xmm0,', 'xmmword', 'ptr', '[ebp-0B0h],', '88h']
movaps ['xmmword', 'ptr', '[ebp-0C0h],', 'xmm0']
movaps ['xmm0,', 'xmmword', 'ptr', '[ebp-0C0h]']
movdqa ['xmmword', 'ptr', '[ebp-0D0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-0D0h]']
movdqa ['xmmword', 'ptr', '[ebp-10h],', 'xmm0']
mov ['edx,', '[ebx+14h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[edx]']
movaps ['xmmword', 'ptr', '[ebp-0F0h],', 'xmm0']
mov ['eax,', '[ebx+10h]']
movdqa ['xmm0,', 'xmmword', 'ptr', '[eax]']
movaps ['xmmword', 'ptr', '[ebp-0E0h],', 'xmm0']
movaps ['xmm0,', 'xmmword', 'ptr', '[ebp-0E0h]']
shufps ['xmm0,', 'xmmword', 'ptr', '[ebp-0F0h],', '0DDh']
movaps ['xmmword', 'ptr', '[ebp-100h],', 'xmm0']
movaps ['xmm0,', 'xmmword', 'ptr', '[ebp-100h]']
movdqa ['xmmword', 'ptr', '[ebp-110h],', 'xmm0']
mov ['ecx,', '[ebx+14h]']
movdqu ['xmm0,', 'xmmword', 'ptr', '[ebp-110h]']
movdqu ['xmmword', 'ptr', '[ecx],', 'xmm0']
mov ['edx,', '[ebx+10h]']
movdqu ['xmm0,', 'xmmword', 'ptr', '[ebp-10h]']
movdqu ['xmmword', 'ptr', '[edx],', 'xmm0']
mov ['eax,', '[ebx+10h]']
mov ['ecx,', '[ebx+0Ch]']
movdqu ['xmm0,', 'xmmword', 'ptr', '[ecx]']
pxor ['xmm0,', 'xmmword', 'ptr', '[eax]']
movdqa ['xmmword', 'ptr', '[ebp-130h],', 'xmm0']
mov ['edx,', '[ebx+8]']
movdqu ['xmm0,', 'xmmword', 'ptr', '[edx]']
pxor ['xmm0,', 'xmmword', 'ptr', '[ebp-130h]']
movdqa ['xmmword', 'ptr', '[ebp-140h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-140h]']
movdqa ['xmmword', 'ptr', '[ebp-120h],', 'xmm0']
mov ['eax,', '[ebx+10h]']
mov ['ecx,', '[ebx+0Ch]']
movdqu ['xmm0,', 'xmmword', 'ptr', '[ecx]']
pand ['xmm0,', 'xmmword', 'ptr', '[eax]']
movdqa ['xmmword', 'ptr', '[ebp-180h],', 'xmm0']
mov ['edx,', '[ebx+10h]']
mov ['eax,', '[ebx+8]']
movdqu ['xmm0,', 'xmmword', 'ptr', '[eax]']
pand ['xmm0,', 'xmmword', 'ptr', '[edx]']
movdqa ['xmmword', 'ptr', '[ebp-170h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-170h]']
por ['xmm0,', 'xmmword', 'ptr', '[ebp-180h]']
movdqa ['xmmword', 'ptr', '[ebp-190h],', 'xmm0']
mov ['ecx,', '[ebx+0Ch]']
mov ['edx,', '[ebx+8]']
movdqu ['xmm0,', 'xmmword', 'ptr', '[edx]']
pand ['xmm0,', 'xmmword', 'ptr', '[ecx]']
movdqa ['xmmword', 'ptr', '[ebp-160h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-160h]']
por ['xmm0,', 'xmmword', 'ptr', '[ebp-190h]']
movdqa ['xmmword', 'ptr', '[ebp-1A0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-1A0h]']
movdqa ['xmmword', 'ptr', '[ebp-150h],', 'xmm0']
mov ['eax,', '[ebx+14h]']
movdqu ['xmm0,', 'xmmword', 'ptr', '[eax]']
call ['?_mm_not_si128@@YA?AT__m128i@@T1@@Z']
movdqa ['xmmword', 'ptr', '[ebp-1C0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-120h]']
call ['?_mm_not_si128@@YA?AT__m128i@@T1@@Z']
movdqa ['xmmword', 'ptr', '[ebp-1B0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-1B0h]']
pavgb ['xmm0,', 'xmmword', 'ptr', '[ebp-1C0h]']
movdqa ['xmmword', 'ptr', '[ebp-1D0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-1D0h]']
movdqa ['xmmword', 'ptr', '[ebp-120h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-150h]']
call ['?_mm_not_si128@@YA?AT__m128i@@T1@@Z']
movdqa ['xmmword', 'ptr', '[ebp-1E0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-120h]']
pavgb ['xmm0,', 'xmmword', 'ptr', '[ebp-1E0h]']
movdqa ['xmmword', 'ptr', '[ebp-1F0h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-1F0h]']
call ['?_mm_not_si128@@YA?AT__m128i@@T1@@Z']
movdqa ['xmmword', 'ptr', '[ebp-200h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-200h]']
pop ['edi']
mov ['esp,', 'ebp']
pop ['ebp']
mov ['esp,', 'ebx']
pop ['ebx']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?category@error_code@std@@QBEABVerror_category@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+Size],', '0']
jnz ['short', 'loc_26A9']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_26C0']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@D@std@@QAEXPADI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp_?_Syserror_map@std@@YAPBDH@Z']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_279E']
call ['?generic_category@std@@YAABVerror_category@1@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_27B3']
jmp ['short', 'loc_27B3']
call ['?system_category@std@@YAABVerror_category@1@XZ']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?category@error_code@std@@QBEABVerror_category@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??8error_category@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_283D']
mov ['ecx,', '[ebp+arg_0]']
call ['?value@error_code@std@@QBEHXZ']
cmp ['eax,', '[ebp+arg_4]']
jnz ['short', 'loc_283D']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_2844']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', 'eax']
call ['??8error_condition@std@@QBE_NABV01@@Z']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_28D5']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+Dst],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_2925']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
sub ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
ja ['short', 'loc_2941']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
jmp ['short', 'loc_2987']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_2987']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
add ['eax,', '[ebp+arg_0]']
mov ['[ebp+Dst],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['?move@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?generic_category@std@@YAABVerror_category@1@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?length@?$char_traits@D@std@@SAIPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_29C6']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_29D5']
mov ['edx,', '[ebp+Str]']
push ['edx']
call ['_strlen']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?loadUnaligned128@@YA?AT__m128i@@PBT1@@Z proc near
push ['ebx']
mov ['ebx,', 'esp']
sub ['esp,', '8']
and ['esp,', '0FFFFFFF0h']
add ['esp,', '4']
push ['ebp']
mov ['ebp,', '[ebx+4]']
mov ['[esp+0Ch+var_8],', 'ebp']
mov ['ebp,', 'esp']
sub ['esp,', '50h']
push ['edi']
lea ['edi,', '[ebp-50h]']
mov ['ecx,', '14h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movaps ['xmm0,', 'ds:__xmm@00000000000000000000000000000000']
movaps ['xmmword', 'ptr', '[ebp-20h],', 'xmm0']
mov ['eax,', '[ebx+8]']
movaps ['xmm0,', 'xmmword', 'ptr', '[ebp-20h]']
movlps ['xmm0,', 'qword', 'ptr', '[eax]']
movaps ['xmmword', 'ptr', '[ebp-30h],', 'xmm0']
movaps ['xmm0,', 'xmmword', 'ptr', '[ebp-30h]']
movaps ['xmmword', 'ptr', '[ebp-10h],', 'xmm0']
mov ['ecx,', '[ebx+8]']
add ['ecx,', '8']
movaps ['xmm0,', 'xmmword', 'ptr', '[ebp-10h]']
movhps ['xmm0,', 'qword', 'ptr', '[ecx]']
movaps ['xmmword', 'ptr', '[ebp-40h],', 'xmm0']
movaps ['xmm0,', 'xmmword', 'ptr', '[ebp-40h]']
movdqa ['xmmword', 'ptr', '[ebp-50h],', 'xmm0']
movdqa ['xmm0,', 'xmmword', 'ptr', '[ebp-50h]']
pop ['edi']
mov ['esp,', 'ebp']
pop ['ebp']
mov ['esp,', 'ebx']
pop ['ebx']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator@D@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
or ['eax,', '0FFFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@D@std@@QBEIXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '1']
ja ['short', 'loc_2AEF']
mov ['[ebp+var_10],', '1']
jmp ['short', 'loc_2AF8']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+Str],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_C],', '0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp_?_Syserror_map@std@@YAPBDH@Z']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_2B55']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+Str],', 'ecx']
jmp ['short', 'loc_2B5C']
mov ['[ebp+Str],', 'offset', '??_C@_0O@BFJCFAAK@unknown?5error?$AA@']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_C]']
or ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_4],', '1']
jnz ['short', 'loc_2BC9']
push ['offset', '??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_2BE5']
jmp ['short', 'loc_2BE5']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+Str],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_C],', '0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp_?_Winerror_map@std@@YAPBDH@Z']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_2C41']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+Str],', 'ecx']
jmp ['short', 'loc_2C48']
mov ['[ebp+Str],', 'offset', '??_C@_0O@BFJCFAAK@unknown?5error?$AA@']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_C]']
or ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+Size],', '0']
jnz ['short', 'loc_2C8E']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_2CAF']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?name@_Generic_error_category@std@@UBEPBDXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_07DCLBNMLN@generic?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?name@_Iostream_error_category@std@@UBEPBDXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_08LLGCOLLL@iostream?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?name@_System_error_category@std@@UBEPBDXZ proc	near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_06FHFOAHML@system?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+14h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?system_category@std@@YAABVerror_category@1@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?value@error_code@std@@QBEHXZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?value@error_condition@std@@QBEHXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_hypot		proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
sub ['esp,', '8']
movsd ['xmm0,', '[ebp+arg_8]']
movsd ['[esp+0Ch+var_C],', 'xmm0']
sub ['esp,', '8']
movsd ['xmm0,', '[ebp+arg_0]']
movsd ['[esp+14h+var_14],', 'xmm0']
call ['dword', 'ptr', 'ds:__imp___hypot']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0']
dd ['offset', '__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
align ['10h']
dd ['offset', '__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0']
align ['10h']
dd ['offset', '__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1']
dd ['0FFFFFFFFh,', '0']
dd ['1,', '0']
dd ['1,', '0']
dd ['offset', '__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
dd ['2']
dd ['offset', '__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
dd ['3', 'dup(0)']
dd ['1']
dd ['offset', '__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4']
dd ['2', 'dup(0)']
dd ['3,', '1']
dd ['offset', '__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0']
dd ['offset', '__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0']
dd ['offset', '__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4error_category@std@@6B@']
public ['??_7error_category@std@@6B@']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z']
assume ['cs:_rdata']
dd ['offset', '??_R4_Generic_error_category@std@@6B@']
public ['??_7_Generic_error_category@std@@6B@']
dd ['offset', '?name@_Generic_error_category@std@@UBEPBDXZ']
dd ['offset', '?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
dd ['offset', '?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z']
assume ['cs:_rdata']
public ['??_C@_07DCLBNMLN@generic?$AA@']
assume ['cs:_rdata']
public ['??_C@_0O@BFJCFAAK@unknown?5error?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4_Iostream_error_category@std@@6B@']
public ['??_7_Iostream_error_category@std@@6B@']
dd ['offset', '?name@_Iostream_error_category@std@@UBEPBDXZ']
dd ['offset', '?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
dd ['offset', '?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z']
assume ['cs:_rdata']
public ['??_C@_08LLGCOLLL@iostream?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4_System_error_category@std@@6B@']
public ['??_7_System_error_category@std@@6B@']
dd ['offset', '?name@_System_error_category@std@@UBEPBDXZ']
dd ['offset', '?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
dd ['offset', '?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z']
assume ['cs:_rdata']
public ['??_C@_06FHFOAHML@system?$AA@']
align ['10h']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
assume ['cs:_rdata']
public ['??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
unicode ['0,', '<C:\\Program', 'Files', '(x86)\\Microsoft', 'Visual', 'Studio', '12.0\\VC\\in>']
unicode ['0,', '<clude\\xstring>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@']
assume ['cs:_rdata']
public ['??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@']
assume ['cs:_rdata']
public ['??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
unicode ['0,', '<invalid', 'null', 'pointer>,0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R4error_category@std@@6B@']
dd ['offset', '??_R0?AVerror_category@std@@@8']
dd ['offset', '??_R3error_category@std@@8']
assume ['cs:_data$r']
public ['??_R0?AVerror_category@std@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3error_category@std@@8']
dd ['1']
dd ['offset', '??_R2error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R2error_category@std@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@error_category@std@@8']
dd ['2', 'dup(0)']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '?HalfImage2D_SSE2@ImageHalfScaler@gfx@mozilla@@AAEXPAEHABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@0I@Z']
dd ['offset', '??_R3error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R4_Generic_error_category@std@@6B@']
dd ['offset', '??_R0?AV_Generic_error_category@std@@@8']
dd ['offset', '??_R3_Generic_error_category@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV_Generic_error_category@std@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3_Generic_error_category@std@@8']
dd ['2']
dd ['offset', '??_R2_Generic_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R2_Generic_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@error_category@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@_Generic_error_category@std@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '?HalfImage2D_SSE2@ImageHalfScaler@gfx@mozilla@@AAEXPAEHABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@0I@Z']
dd ['offset', '??_R3_Generic_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R4_Iostream_error_category@std@@6B@']
dd ['offset', '??_R0?AV_Iostream_error_category@std@@@8']
dd ['offset', '??_R3_Iostream_error_category@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV_Iostream_error_category@std@@@8']
align ['10h']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3_Iostream_error_category@std@@8']
dd ['3']
dd ['offset', '??_R2_Iostream_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R2_Iostream_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@_Generic_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@error_category@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@_Iostream_error_category@std@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '?HalfImage2D_SSE2@ImageHalfScaler@gfx@mozilla@@AAEXPAEHABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@0I@Z']
dd ['offset', '??_R3_Iostream_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R4_System_error_category@std@@6B@']
dd ['offset', '??_R0?AV_System_error_category@std@@@8']
dd ['offset', '??_R3_System_error_category@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV_System_error_category@std@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3_System_error_category@std@@8']
dd ['3']
dd ['offset', '??_R2_System_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R2_System_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@_Generic_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@error_category@std@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@_System_error_category@std@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '?HalfImage2D_SSE2@ImageHalfScaler@gfx@mozilla@@AAEXPAEHABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@0I@Z']
dd ['offset', '??_R3_System_error_category@std@@8']
assume ['cs:_rtc$IMZ']
assume ['cs:_rtc$TMZ']
assume ['cs:_rdata']
public ['__xmm@00000000000000000000000000000000']
assume ['cs:_rdata']
public ['__xmm@ffffffffffffffffffffffffffffffff']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
extrn ['__purecall:near']
extrn ['??2@YAPAXI@Z:near']
extrn ['??3@YAXPAX@Z:near']
extrn ['_atexit:near']
extrn ['__imp__memmove:near']
extrn ['_memcpy:near']
extrn ['_strlen:near']
extrn ['__imp___hypot:near']
extrn ['__imp_?_Debug_message@std@@YAXPB_W0I@Z:near']
extrn ['__imp_??0_Container_base12@std@@QAE@XZ:near']
extrn ['__imp_??1_Container_base12@std@@QAE@XZ:near']
extrn ['__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ:near']
extrn ['__imp_?_Xbad_alloc@std@@YAXXZ:near']
extrn ['__imp_?_Xlength_error@std@@YAXPBD@Z:near']
extrn ['__imp_?_Xout_of_range@std@@YAXPBD@Z:near']
extrn ['??_Eerror_category@std@@UAEPAXI@Z:near']
extrn ['__imp_?_Syserror_map@std@@YAPBDH@Z:near']
extrn ['__imp_?_Winerror_map@std@@YAPBDH@Z:near']
extrn ['??_E_Generic_error_category@std@@UAEPAXI@Z:near']
extrn ['??_E_Iostream_error_category@std@@UAEPAXI@Z:near']
extrn ['??_E_System_error_category@std@@UAEPAXI@Z:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['@__security_check_cookie@4:near']
extrn ['__CxxThrowException@8:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_InitBase:near']
extrn ['__RTC_Shutdown:near']
extrn ['___CxxFrameHandler3:near']
extrn ['??_7type_info@@6B@:near']
extrn ['___security_cookie:near']
extrn ['__fltused:near']
end
