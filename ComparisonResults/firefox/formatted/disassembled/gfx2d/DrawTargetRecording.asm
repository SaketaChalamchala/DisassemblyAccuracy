endp
?BytesPerPixel@gfx@mozilla@@YAHW4SurfaceFormat@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['al,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ebp+var_4],', 'al']
cmp ['byte', 'ptr', '[ebp+var_4],', '6']
jz ['short', 'loc_13E']
cmp ['byte', 'ptr', '[ebp+var_4],', '7']
jz ['short', 'loc_137']
jmp ['short', 'loc_145']
mov ['eax,', '1']
jmp ['short', 'loc_14A']
mov ['eax,', '2']
jmp ['short', 'loc_14A']
mov ['eax,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_98]']
mov ['ecx,', '23h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_70],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['??0DrawTarget@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7DrawTargetRecording@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??0?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@PAVDrawEventRecorderPrivate@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??0?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@PAVDrawTarget@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
movzx ['eax,', '[ebp+arg_8]']
test ['eax,', 'eax']
jz ['short', 'loc_22C']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_74],', 'eax']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+var_74]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_74]']
mov ['edx,', '[eax+14h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_78],', 'eax']
mov ['eax,', '[ebp+var_78]']
mov ['[ebp+var_7C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['ecx,', '[ebp+var_70]']
or ['ecx,', '1']
mov ['[ebp+var_70],', 'ecx']
mov ['edx,', '[ebp+var_7C]']
mov ['[ebp+var_80],', 'edx']
jmp ['short', 'loc_261']
push ['0']
lea ['ecx,', '[ebp+var_28]']
call ['??0?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@P80@AEXNM@Z@Z']
mov ['[ebp+var_84],', 'eax']
mov ['eax,', '[ebp+var_84]']
mov ['[ebp+var_88],', 'eax']
mov ['[ebp+var_4],', '4']
mov ['ecx,', '[ebp+var_70]']
or ['ecx,', '2']
mov ['[ebp+var_70],', 'ecx']
mov ['edx,', '[ebp+var_88]']
mov ['[ebp+var_80],', 'edx']
mov ['eax,', '[ebp+var_80]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
lea ['ecx,', '[ebp+var_18]']
call ['??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z']
mov ['[ebp+var_4],', '6']
mov ['edx,', '[ebp+var_70]']
and ['edx,', '2']
jz ['short', 'loc_28E']
and ['[ebp+var_70],', '0FFFFFFFDh']
lea ['ecx,', '[ebp+var_28]']
call ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
mov ['eax,', '[ebp+var_70]']
and ['eax,', '1']
jz ['short', 'loc_2A6']
and ['[ebp+var_70],', '0FFFFFFFEh']
lea ['ecx,', '[ebp+var_24]']
call ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_8C],', 'eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_90],', 'eax']
lea ['ecx,', '[ebp+var_18]']
call ['??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
push ['eax']
movzx ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?GetFormat@DrawTarget@gfx@mozilla@@QBE?AW4SurfaceFormat@23@XZ']
movzx ['edx,', 'al']
push ['edx']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_68]']
push ['eax']
mov ['ecx,', '[ebp+var_8C]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_8C]']
mov ['eax,', '[edx+18h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_90]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_90]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['ecx,', 'al']
push ['ecx']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_6C],', 'esp']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
lea ['ecx,', '[ebp+var_60]']
call ['??0RecordedDrawTargetCreation@gfx@mozilla@@QAE@UReferencePtr@12@W4BackendType@12@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@_NPAVSourceSurface@12@@Z']
mov ['[ebp+var_94],', 'eax']
mov ['eax,', '[ebp+var_94]']
mov ['[ebp+var_98],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '8']
mov ['ecx,', '[ebp+var_98]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_60]']
call ['??1RecordedDrawTargetCreation@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?GetFormat@DrawTarget@gfx@mozilla@@QBE?AW4SurfaceFormat@23@XZ']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+39h],', 'al']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN19_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '98h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
dd ['offset', '$LN18_1']
dd ['offset', '$LN16_1']
db ['0Bh', 'dup(0CCh)']
endp
??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '50h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_5C]']
mov ['ecx,', '14h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0DrawTarget@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7DrawTargetRecording@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '3Ch']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??0?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@ABV0@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_4C],', 'eax']
mov ['esi,', 'esp']
movzx ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+var_4C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_4C]']
mov ['edx,', '[eax+84h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_50]']
mov ['[ebp+var_54],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['ecx,', '[ebp+var_54]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??$?0VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
lea ['ecx,', '[ebp+var_14]']
call ['??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
movzx ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_48],', 'esp']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
lea ['ecx,', '[ebp+var_44]']
call ['??0RecordedCreateSimilarDrawTarget@gfx@mozilla@@QAE@UReferencePtr@12@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z']
mov ['[ebp+var_58],', 'eax']
mov ['eax,', '[ebp+var_58]']
mov ['[ebp+var_5C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
mov ['ecx,', '[ebp+var_5C]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
lea ['ecx,', '[ebp+var_44]']
call ['??1RecordedCreateSimilarDrawTarget@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?GetFormat@DrawTarget@gfx@mozilla@@QBE?AW4SurfaceFormat@23@XZ']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+39h],', 'al']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '5Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
db ['0Bh', 'dup(0CCh)']
endp
??1DrawTargetRecording@gfx@mozilla@@UAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1DrawTargetRecording@gfx@mozilla@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '38h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_44]']
mov ['ecx,', '0Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7DrawTargetRecording@gfx@mozilla@@6B@']
mov ['[ebp+var_4],', '2']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_3C],', 'esp']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
lea ['ecx,', '[ebp+var_38]']
call ['??0RecordedDrawTargetDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z']
mov ['[ebp+var_40],', 'eax']
mov ['eax,', '[ebp+var_40]']
mov ['[ebp+var_44],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['ecx,', '[ebp+var_44]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_38]']
call ['??1RecordedDrawTargetDestruction@gfx@mozilla@@UAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1DrawTarget@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '44h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '70h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_7C]']
mov ['ecx,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_64],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_68],', 'eax']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_68]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_68]']
mov ['eax,', '[edx+14h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_6C],', 'eax']
mov ['ecx,', '[ebp+var_6C]']
mov ['[ebp+var_70],', 'ecx']
mov ['[ebp+var_4],', '1']
mov ['edx,', '[ebp+var_70]']
push ['edx']
lea ['ecx,', '[ebp+var_18]']
call ['??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
push ['18h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_34],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
cmp ['[ebp+var_34],', '0']
jz ['short', 'loc_713']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
call ['??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_34]']
call ['??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z']
mov ['[ebp+var_74],', 'eax']
jmp ['short', 'loc_71A']
mov ['[ebp+var_74],', '0']
mov ['eax,', '[ebp+var_74]']
mov ['[ebp+var_30],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
lea ['ecx,', '[ebp+var_24]']
call ['??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
mov ['edx,', '[ebp+var_10]']
push ['edx']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_60],', 'esp']
lea ['eax,', '[ebp+var_24]']
push ['eax']
call ['??$?0VSourceSurface@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VSourceSurface@gfx@mozilla@@@@@Z']
lea ['ecx,', '[ebp+var_5C]']
call ['??0RecordedSnapshot@gfx@mozilla@@QAE@UReferencePtr@12@PAVDrawTarget@12@@Z']
mov ['[ebp+var_78],', 'eax']
mov ['ecx,', '[ebp+var_78]']
mov ['[ebp+var_7C],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
mov ['edx,', '[ebp+var_7C]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_5C]']
call ['??1RecordedSnapshot@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_24]']
call ['?forget@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ']
mov ['ecx,', '[ebp+var_64]']
or ['ecx,', '1']
mov ['[ebp+var_64],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_24]']
call ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN16_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '7Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
dd ['offset', '$LN15_0']
dd ['offset', '$LN12_10']
dd ['0FFFFFFDCh,', '4']
dd ['offset', '$LN13_6']
db ['0Bh', 'dup(0CCh)']
endp
?DrawSurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@1ABUDrawSurfaceOptions@23@ABUDrawOptions@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?DrawSurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@1ABUDrawSurfaceOptions@23@ABUDrawOptions@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '6Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_78]']
mov ['ecx,', '1Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['offset', '$SG86569']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
push ['eax']
call ['?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_6C],', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_68]']
call ['??0RecordedDrawSurface@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@2ABUDrawSurfaceOptions@12@ABUDrawOptions@12@@Z']
mov ['[ebp+var_70],', 'eax']
mov ['ecx,', '[ebp+var_70]']
mov ['[ebp+var_74],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_74]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_68]']
call ['??1RecordedDrawSurface@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_78],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?GetSourceSurface@gfx@mozilla@@YAPAVSourceSurface@12@PAV312@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+var_78]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_78]']
mov ['edx,', '[eax+2Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '78h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
db ['8', 'dup(0CCh)']
endp
?DrawFilter@DrawTargetRecording@gfx@mozilla@@UAEXPAVFilterNode@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?DrawFilter@DrawTargetRecording@gfx@mozilla@@UAEXPAVFilterNode@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '5Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_68]']
mov ['ecx,', '17h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_973']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_5C],', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_58]']
call ['??0RecordedDrawFilter@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUDrawOptions@12@@Z']
mov ['[ebp+var_60],', 'eax']
mov ['ecx,', '[ebp+var_60]']
mov ['[ebp+var_64],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_64]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_58]']
call ['??1RecordedDrawFilter@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_68],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?GetFilterNode@FilterNodeRecording@gfx@mozilla@@SAPAVFilterNode@23@PAV423@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_68]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_68]']
mov ['eax,', '[edx+30h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '68h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
db ['9', 'dup(0CCh)']
endp
?DrawSurfaceWithShadow@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUColor@23@1MW4CompositionOp@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?DrawSurfaceWithShadow@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUColor@23@1MW4CompositionOp@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '64h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_70]']
mov ['ecx,', '19h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['offset', '$SG86581']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
push ['eax']
call ['?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z']
add ['esp,', '0Ch']
movzx ['ecx,', '[ebp+arg_14]']
push ['ecx']
push ['ecx']
movss ['xmm0,', '[ebp+arg_10]']
movss ['[esp+84h+var_84],', 'xmm0']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_64],', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_60]']
call ['??0RecordedDrawSurfaceWithShadow@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUColor@12@2MW4CompositionOp@12@@Z']
mov ['[ebp+var_68],', 'eax']
mov ['ecx,', '[ebp+var_68]']
mov ['[ebp+var_6C],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_6C]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_60]']
call ['??1RecordedDrawSurfaceWithShadow@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_70],', 'eax']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+arg_14]']
push ['eax']
push ['ecx']
movss ['xmm0,', '[ebp+arg_10]']
movss ['[esp+84h+var_84],', 'xmm0']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?GetSourceSurface@gfx@mozilla@@YAPAVSourceSurface@12@PAV312@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+var_70]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_70]']
mov ['edx,', '[eax+34h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '70h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
endp
?ClearRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?ClearRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '40h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_4C]']
mov ['ecx,', '10h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['ecx,', '[ebp+var_40]']
call ['??0RecordedClearRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@@Z']
mov ['[ebp+var_44],', 'eax']
mov ['edx,', '[ebp+var_44]']
mov ['[ebp+var_48],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_48]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_40]']
call ['??1RecordedClearRect@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_4C],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_4C]']
mov ['edx,', '[eax+38h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '4Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
db ['0Bh', 'dup(0CCh)']
endp
?CopySurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?CopySurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '54h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_60]']
mov ['ecx,', '15h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['offset', '$SG86688']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
push ['eax']
call ['?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_54],', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['ecx,', '[ebp+var_50]']
call ['??0RecordedCopySurface@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@@Z']
mov ['[ebp+var_58],', 'eax']
mov ['edx,', '[ebp+var_58]']
mov ['[ebp+var_5C],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_5C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_50]']
call ['??1RecordedCopySurface@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_60],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?GetSourceSurface@gfx@mozilla@@YAPAVSourceSurface@12@PAV312@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_60]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_60]']
mov ['eax,', '[edx+3Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '60h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
db ['8', 'dup(0CCh)']
endp
?FillRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?FillRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0D0h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?EnsurePatternDependenciesStored@DrawTargetRecording@gfx@mozilla@@AAEXABVPattern@23@@Z']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['ecx,', '[ebp+var_88]']
call ['??0RecordedFillRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUDrawOptions@12@@Z']
mov ['[ebp+var_CC],', 'eax']
mov ['edx,', '[ebp+var_CC]']
mov ['[ebp+var_D0],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_D0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_88]']
call ['??1RecordedFillRect@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_D4],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
lea ['ecx,', '[ebp+var_C8]']
call ['??0AdjustedPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z']
mov ['[ebp+var_D8],', 'eax']
mov ['eax,', '[ebp+var_D8]']
mov ['[ebp+var_DC],', 'eax']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_DC]']
call ['??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_D4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_D4]']
mov ['edx,', '[eax+44h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_C8]']
call ['??1AdjustedPattern@gfx@mozilla@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '0DCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
db ['9', 'dup(0CCh)']
endp
?StrokeRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?StrokeRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0E8h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_F4]']
mov ['ecx,', '3Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?EnsurePatternDependenciesStored@DrawTargetRecording@gfx@mozilla@@AAEXABVPattern@23@@Z']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
lea ['ecx,', '[ebp+var_A0]']
call ['??0RecordedStrokeRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z']
mov ['[ebp+var_E4],', 'eax']
mov ['eax,', '[ebp+var_E4]']
mov ['[ebp+var_E8],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_E8]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_A0]']
call ['??1RecordedStrokeRect@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_EC],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['ecx,', '[ebp+var_E0]']
call ['??0AdjustedPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z']
mov ['[ebp+var_F0],', 'eax']
mov ['edx,', '[ebp+var_F0]']
mov ['[ebp+var_F4],', 'edx']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_F4]']
call ['??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_EC]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_EC]']
mov ['eax,', '[edx+48h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_E0]']
call ['??1AdjustedPattern@gfx@mozilla@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '0F4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
endp
?StrokeLine@DrawTargetRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?StrokeLine@DrawTargetRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0E8h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_F4]']
mov ['ecx,', '3Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?EnsurePatternDependenciesStored@DrawTargetRecording@gfx@mozilla@@AAEXABVPattern@23@@Z']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_A0]']
call ['??0RecordedStrokeLine@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@1ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z']
mov ['[ebp+var_E4],', 'eax']
mov ['ecx,', '[ebp+var_E4]']
mov ['[ebp+var_E8],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_E8]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_A0]']
call ['??1RecordedStrokeLine@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_EC],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
lea ['ecx,', '[ebp+var_E0]']
call ['??0AdjustedPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z']
mov ['[ebp+var_F0],', 'eax']
mov ['eax,', '[ebp+var_F0]']
mov ['[ebp+var_F4],', 'eax']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_F4]']
call ['??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_EC]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_EC]']
mov ['eax,', '[edx+4Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_E0]']
call ['??1AdjustedPattern@gfx@mozilla@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '0F4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
db ['9', 'dup(0CCh)']
endp
?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0FCh']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_108]']
mov ['ecx,', '3Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z']
mov ['[ebp+var_F0],', 'eax']
mov ['edx,', '[ebp+var_F0]']
mov ['[ebp+var_F4],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_F4]']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
call ['??$?0VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?EnsurePatternDependenciesStored@DrawTargetRecording@gfx@mozilla@@AAEXABVPattern@23@@Z']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_AC],', 'esp']
lea ['edx,', '[ebp+var_18]']
push ['edx']
call ['??$?0VPathRecording@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VPathRecording@gfx@mozilla@@@@@Z']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_A8]']
call ['??0RecordedStroke@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z']
mov ['[ebp+var_F8],', 'eax']
mov ['ecx,', '[ebp+var_F8]']
mov ['[ebp+var_FC],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['edx,', '[ebp+var_FC]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_A8]']
call ['??1RecordedStroke@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_100],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
lea ['ecx,', '[ebp+var_EC]']
call ['??0AdjustedPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z']
mov ['[ebp+var_104],', 'eax']
mov ['eax,', '[ebp+var_104]']
mov ['[ebp+var_108],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['ecx,', '[ebp+var_108]']
call ['??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
call ['??C?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ']
add ['eax,', '0Ch']
mov ['ecx,', 'eax']
call ['??B?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_100]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_100]']
mov ['eax,', '[edx+50h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_EC]']
call ['??1AdjustedPattern@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10_11']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '108h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['10h']
dd ['offset', '$LN9_6']
dd ['offset', '$LN7_4']
align ['8']
endp
?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0E4h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_F0]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z']
mov ['[ebp+var_D8],', 'eax']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_DC],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_DC]']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
call ['??$?0VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?EnsurePatternDependenciesStored@DrawTargetRecording@gfx@mozilla@@AAEXABVPattern@23@@Z']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_94],', 'esp']
lea ['edx,', '[ebp+var_18]']
push ['edx']
call ['??$?0VPathRecording@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VPathRecording@gfx@mozilla@@@@@Z']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_90]']
call ['??0RecordedFill@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@@Z']
mov ['[ebp+var_E0],', 'eax']
mov ['ecx,', '[ebp+var_E0]']
mov ['[ebp+var_E4],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['edx,', '[ebp+var_E4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_90]']
call ['??1RecordedFill@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_E8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['ecx,', '[ebp+var_D4]']
call ['??0AdjustedPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z']
mov ['[ebp+var_EC],', 'eax']
mov ['edx,', '[ebp+var_EC]']
mov ['[ebp+var_F0],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['ecx,', '[ebp+var_F0]']
call ['??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
call ['??C?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ']
add ['eax,', '0Ch']
mov ['ecx,', 'eax']
call ['??B?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ']
push ['eax']
mov ['eax,', '[ebp+var_E8]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_E8]']
mov ['eax,', '[edx+54h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_D4]']
call ['??1AdjustedPattern@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10_12']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '0F0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
dd ['offset', '$LN9_7']
dd ['offset', '$LN7_5']
db ['0Eh', 'dup(0CCh)']
endp
?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '144h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_150]']
mov ['ecx,', '51h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_10],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?EnsurePatternDependenciesStored@DrawTargetRecording@gfx@mozilla@@AAEXABVPattern@23@@Z']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '3Ch']
call ['?get@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?GetUserData@ScaledFont@gfx@mozilla@@QAEPAXPAUUserDataKey@23@@Z']
test ['eax,', 'eax']
jnz ['loc_172D']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['ecx,', '[ebp+var_58]']
call ['??0RecordedFontData@gfx@mozilla@@QAE@PAVScaledFont@12@@Z']
mov ['[ebp+var_4],', '0']
lea ['edx,', '[ebp+var_78]']
push ['edx']
lea ['ecx,', '[ebp+var_58]']
call ['?GetFontDetails@RecordedFontData@gfx@mozilla@@QAE_NAAURecordedFontDetails@23@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['loc_1694']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_78+4]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+var_78]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?HasStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAE_N_K@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_160F']
lea ['ecx,', '[ebp+var_58]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['edx,', 'dword', 'ptr', '[ebp+var_78+4]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+var_78]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?AddStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAEX_K@Z']
sub ['esp,', '18h']
mov ['ecx,', 'esp']
mov ['edx,', 'dword', 'ptr', '[ebp+var_78]']
mov ['[ecx],', 'edx']
mov ['eax,', 'dword', 'ptr', '[ebp+var_78+4]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_70]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+var_6C]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+var_68]']
mov ['[ecx+10h],', 'edx']
mov ['eax,', '[ebp+var_64]']
mov ['[ecx+14h],', 'eax']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_B4],', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
lea ['ecx,', '[ebp+var_B0]']
call ['??0RecordedScaledFontCreation@gfx@mozilla@@QAE@UReferencePtr@12@URecordedFontDetails@12@@Z']
mov ['[ebp+var_13C],', 'eax']
mov ['eax,', '[ebp+var_13C]']
mov ['[ebp+var_140],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_140]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_B0]']
call ['??1RecordedScaledFontCreation@gfx@mozilla@@UAE@XZ']
push ['8']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_BC],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
cmp ['[ebp+var_BC],', '0']
jz ['short', 'loc_16C4']
mov ['ecx,', '[ebp+var_BC]']
call ['??0RecordingFontUserData@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_144],', 'eax']
jmp ['short', 'loc_16CE']
mov ['[ebp+var_144],', '0']
mov ['edx,', '[ebp+var_144]']
mov ['[ebp+var_B8],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_B8]']
mov ['[ebp+var_80],', 'eax']
mov ['ecx,', '[ebp+var_80]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '3Ch']
push ['eax']
mov ['ecx,', '[ebp+var_80]']
add ['ecx,', '4']
call ['??4?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAEAAV0@ABV0@@Z']
push ['offset', '?RecordingFontUserDataDestroyFunc@gfx@mozilla@@YAXPAX@Z']
mov ['ecx,', '[ebp+var_80]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '3Ch']
call ['?get@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?AddUserData@ScaledFont@gfx@mozilla@@QAEXPAUUserDataKey@23@PAXP6AX1@Z@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_58]']
call ['??1RecordedFontData@gfx@mozilla@@UAE@XZ']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_138],', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['eax,', '[ebp+var_14]']
push ['eax']
lea ['ecx,', '[ebp+var_134]']
call ['??0RecordedFillGlyphs@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@PBUGlyph@12@I@Z']
mov ['[ebp+var_148],', 'eax']
mov ['ecx,', '[ebp+var_148]']
mov ['[ebp+var_14C],', 'ecx']
mov ['[ebp+var_4],', '3']
mov ['edx,', '[ebp+var_14C]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_134]']
call ['??1RecordedFillGlyphs@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_150],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_150]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_150]']
mov ['edx,', '[eax+58h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN16_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_10]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '150h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
dd ['offset', '$LN15_1']
dd ['offset', '$LN12_11']
db ['88h,', '0FFh']
dw ['0FFFFh']
dd ['18h']
dd ['offset', '$LN13_7']
db ['0Bh', 'dup(0CCh)']
endp
?Mask@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?Mask@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '140h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_14C]']
mov ['ecx,', '50h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?EnsurePatternDependenciesStored@DrawTargetRecording@gfx@mozilla@@AAEXABVPattern@23@@Z']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?EnsurePatternDependenciesStored@DrawTargetRecording@gfx@mozilla@@AAEXABVPattern@23@@Z']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
lea ['ecx,', '[ebp+var_B0]']
call ['??0RecordedMask@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@1ABUDrawOptions@12@@Z']
mov ['[ebp+var_134],', 'eax']
mov ['eax,', '[ebp+var_134]']
mov ['[ebp+var_138],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_138]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_B0]']
call ['??1RecordedMask@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_13C],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_F0]']
call ['??0AdjustedPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z']
mov ['[ebp+var_140],', 'eax']
mov ['ecx,', '[ebp+var_140]']
mov ['[ebp+var_144],', 'ecx']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_144]']
call ['??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ']
push ['eax']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
lea ['ecx,', '[ebp+var_130]']
call ['??0AdjustedPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z']
mov ['[ebp+var_148],', 'eax']
mov ['eax,', '[ebp+var_148]']
mov ['[ebp+var_14C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['ecx,', '[ebp+var_14C]']
call ['??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_13C]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_13C]']
mov ['eax,', '[edx+5Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_130]']
call ['??1AdjustedPattern@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_F0]']
call ['??1AdjustedPattern@gfx@mozilla@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '14Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
endp
?MaskSurface@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?MaskSurface@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0D4h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_E0]']
mov ['ecx,', '35h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?EnsurePatternDependenciesStored@DrawTargetRecording@gfx@mozilla@@AAEXABVPattern@23@@Z']
push ['offset', '$SG86522']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
push ['eax']
call ['?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
lea ['eax,', '[ebp+arg_8]']
push ['eax']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_8C],', 'esp']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['ecx,', '[ebp+var_88]']
call ['??0RecordedMaskSurface@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@UReferencePtr@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUDrawOptions@12@@Z']
mov ['[ebp+var_D0],', 'eax']
mov ['edx,', '[ebp+var_D0]']
mov ['[ebp+var_D4],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_D4]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_88]']
call ['??1RecordedMaskSurface@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_D8],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['?GetSourceSurface@gfx@mozilla@@YAPAVSourceSurface@12@PAV312@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
lea ['ecx,', '[ebp+var_CC]']
call ['??0AdjustedPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z']
mov ['[ebp+var_DC],', 'eax']
mov ['eax,', '[ebp+var_DC]']
mov ['[ebp+var_E0],', 'eax']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_E0]']
call ['??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_D8]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_D8]']
mov ['eax,', '[edx+60h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_CC]']
call ['??1AdjustedPattern@gfx@mozilla@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '0E0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['8']
endp
?PushClip@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?PushClip@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '54h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_60]']
mov ['ecx,', '15h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z']
mov ['[ebp+var_50],', 'eax']
mov ['edx,', '[ebp+var_50]']
mov ['[ebp+var_54],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_54]']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
call ['??$?0VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_4C],', 'esp']
lea ['edx,', '[ebp+var_18]']
push ['edx']
call ['??$?0VPathRecording@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VPathRecording@gfx@mozilla@@@@@Z']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_48]']
call ['??0RecordedPushClip@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@@Z']
mov ['[ebp+var_58],', 'eax']
mov ['ecx,', '[ebp+var_58]']
mov ['[ebp+var_5C],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['edx,', '[ebp+var_5C]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_48]']
call ['??1RecordedPushClip@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_60],', 'eax']
lea ['ecx,', '[ebp+var_18]']
call ['??C?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ']
add ['eax,', '0Ch']
mov ['ecx,', 'eax']
call ['??B?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ']
mov ['esi,', 'esp']
push ['eax']
mov ['eax,', '[ebp+var_60]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_60]']
mov ['eax,', '[edx+64h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_8']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '60h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
dd ['offset', '$LN8_9']
dd ['offset', '$LN6_5']
db ['0Ah', 'dup(0CCh)']
endp
?PushClipRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?PushClipRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '40h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_4C]']
mov ['ecx,', '10h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['ecx,', '[ebp+var_40]']
call ['??0RecordedPushClipRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@@Z']
mov ['[ebp+var_44],', 'eax']
mov ['edx,', '[ebp+var_44]']
mov ['[ebp+var_48],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_48]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_40]']
call ['??1RecordedPushClipRect@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_4C],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_4C]']
mov ['edx,', '[eax+68h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '4Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
db ['0Bh', 'dup(0CCh)']
endp
?PopClip@DrawTargetRecording@gfx@mozilla@@UAEXXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?PopClip@DrawTargetRecording@gfx@mozilla@@UAEXXZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '30h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_30]']
call ['??0RecordedPopClip@gfx@mozilla@@QAE@PAVDrawTarget@12@@Z']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_34]']
mov ['[ebp+var_38],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_38]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_30]']
call ['??1RecordedPopClip@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_3C],', 'eax']
mov ['eax,', '[ebp+var_3C]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_3C]']
mov ['eax,', '[edx+6Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
?PushLayer@DrawTargetRecording@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?PushLayer@DrawTargetRecording@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '78h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_84]']
mov ['ecx,', '1Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_1ED9']
push ['offset', '$SG86719']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
push ['eax']
call ['?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z']
add ['esp,', '0Ch']
movss ['xmm0,', '[ebp+arg_4]']
ucomiss ['xmm0,', 'ds:__real@00000000']
lahf
test ['ah,', '44h']
jnp ['short', 'loc_1EF1']
mov ['[ebp+var_71],', '1']
jmp ['short', 'loc_1EF5']
mov ['[ebp+var_71],', '0']
movzx ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
push ['ecx']
movss ['xmm0,', '[ebp+arg_4]']
movss ['[esp+0A4h+var_A4],', 'xmm0']
movzx ['edx,', '[ebp+var_71]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_70]']
call ['??0RecordedPushLayer@gfx@mozilla@@QAE@PAVDrawTarget@12@_NMPAVSourceSurface@12@ABVMatrix@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@1@Z']
mov ['[ebp+var_78],', 'eax']
mov ['ecx,', '[ebp+var_78]']
mov ['[ebp+var_7C],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_7C]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_70]']
call ['??1RecordedPushLayer@gfx@mozilla@@UAE@XZ']
movss ['xmm0,', '[ebp+arg_4]']
ucomiss ['xmm0,', 'ds:__real@00000000']
lahf
test ['ah,', '44h']
jnp ['short', 'loc_1F6F']
mov ['[ebp+var_7D],', '1']
jmp ['short', 'loc_1F73']
mov ['[ebp+var_7D],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_84],', 'eax']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['ecx']
movss ['xmm0,', '[ebp+arg_4]']
movss ['[esp+0A4h+var_A4],', 'xmm0']
movzx ['ecx,', '[ebp+var_7D]']
push ['ecx']
mov ['edx,', '[ebp+var_84]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_84]']
mov ['edx,', '[eax+70h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '84h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['8']
endp
?PopLayer@DrawTargetRecording@gfx@mozilla@@UAEXXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?PopLayer@DrawTargetRecording@gfx@mozilla@@UAEXXZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '30h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_30]']
call ['??0RecordedPopLayer@gfx@mozilla@@QAE@PAVDrawTarget@12@@Z']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_34]']
mov ['[ebp+var_38],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_38]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_30]']
call ['??1RecordedPopLayer@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_3C],', 'eax']
mov ['eax,', '[ebp+var_3C]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_3C]']
mov ['eax,', '[edx+74h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '80h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_8C]']
mov ['ecx,', '20h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_74],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_78],', 'eax']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+var_78]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_78]']
mov ['edx,', '[eax+78h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_7C],', 'eax']
mov ['eax,', '[ebp+var_7C]']
mov ['[ebp+var_80],', 'eax']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_80]']
push ['ecx']
lea ['ecx,', '[ebp+var_18]']
call ['??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
push ['18h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_34],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
cmp ['[ebp+var_34],', '0']
jz ['short', 'loc_218D']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
call ['??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_34]']
call ['??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z']
mov ['[ebp+var_84],', 'eax']
jmp ['short', 'loc_2197']
mov ['[ebp+var_84],', '0']
mov ['edx,', '[ebp+var_84]']
mov ['[ebp+var_30],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['eax,', '[ebp+var_30]']
push ['eax']
lea ['ecx,', '[ebp+var_24]']
call ['??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
movzx ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_70],', 'esp']
lea ['edx,', '[ebp+var_24]']
push ['edx']
call ['??$?0VSourceSurface@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VSourceSurface@gfx@mozilla@@@@@Z']
lea ['ecx,', '[ebp+var_6C]']
call ['??0RecordedSourceSurfaceCreation@gfx@mozilla@@QAE@UReferencePtr@12@PAEHABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z']
mov ['[ebp+var_88],', 'eax']
mov ['eax,', '[ebp+var_88]']
mov ['[ebp+var_8C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
mov ['ecx,', '[ebp+var_8C]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_6C]']
call ['??1RecordedSourceSurfaceCreation@gfx@mozilla@@UAE@XZ']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
lea ['ecx,', '[ebp+var_24]']
call ['?forget@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ']
mov ['eax,', '[ebp+var_74]']
or ['eax,', '1']
mov ['[ebp+var_74],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_24]']
call ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN16_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '8Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
dd ['offset', '$LN15_2']
dd ['offset', '$LN12_12']
dd ['0FFFFFFDCh,', '4']
dd ['offset', '$LN13_8']
db ['0Fh', 'dup(0CCh)']
endp
?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '64h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_70]']
mov ['ecx,', '19h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4C],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_50],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_38]']
push ['ecx']
mov ['edx,', '[ebp+var_50]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_50]']
mov ['edx,', '[eax+7Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_54],', 'eax']
mov ['eax,', '[ebp+var_54]']
mov ['[ebp+var_58],', 'eax']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_58]']
push ['ecx']
lea ['ecx,', '[ebp+var_18]']
call ['??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
push ['18h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_40],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_2387']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
call ['??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_40]']
call ['??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z']
mov ['[ebp+var_5C],', 'eax']
jmp ['short', 'loc_238E']
mov ['[ebp+var_5C],', '0']
mov ['edx,', '[ebp+var_5C]']
mov ['[ebp+var_3C],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
lea ['ecx,', '[ebp+var_24]']
call ['??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_18]']
call ['??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
mov ['[ebp+var_60],', 'eax']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_44]']
push ['ecx']
mov ['edx,', '[ebp+var_60]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_60]']
mov ['edx,', '[eax+14h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_64],', 'eax']
mov ['eax,', '[ebp+var_64]']
mov ['[ebp+var_68],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
mov ['ecx,', '[ebp+var_68]']
push ['ecx']
lea ['ecx,', '[ebp+var_30]']
call ['??$?0VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '8']
lea ['ecx,', '[ebp+var_44]']
call ['??1?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ']
lea ['ecx,', '[ebp+var_30]']
call ['??B?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QBEPAVDataSourceSurface@gfx@mozilla@@XZ']
test ['eax,', 'eax']
jnz ['short', 'loc_243D']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_48]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+arg_4]']
mov ['eax,', '[edx+14h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_6C],', 'eax']
mov ['ecx,', '[ebp+var_6C]']
mov ['[ebp+var_70],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '9']
mov ['edx,', '[ebp+var_70]']
push ['edx']
lea ['ecx,', '[ebp+var_30]']
call ['??$?4VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAEAAV0@$$QAU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '8']
lea ['ecx,', '[ebp+var_48]']
call ['??1?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ']
push ['offset', '$SG86776']
lea ['ecx,', '[ebp+var_30]']
call ['??B?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QBEPAVDataSourceSurface@gfx@mozilla@@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_24]']
call ['??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
push ['eax']
call ['?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z']
add ['esp,', '10h']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_24]']
call ['?forget@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ']
mov ['ecx,', '[ebp+var_4C]']
or ['ecx,', '1']
mov ['[ebp+var_4C],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_30]']
call ['??1?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_24]']
call ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN20_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '70h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN19_4']
dd ['offset', '$LN15_3']
dd ['0FFFFFFDCh,', '4']
dd ['offset', '$LN16_5']
dd ['0FFFFFFD0h,', '4']
dd ['offset', '$LN17_3']
align ['4']
endp
?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '58h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_64]']
mov ['ecx,', '16h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_48],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_4C],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_38]']
push ['ecx']
mov ['edx,', '[ebp+var_4C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_4C]']
mov ['edx,', '[eax+80h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_50]']
mov ['[ebp+var_54],', 'eax']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_54]']
push ['ecx']
lea ['ecx,', '[ebp+var_18]']
call ['??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
push ['18h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_40],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_25EA']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
call ['??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_40]']
call ['??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z']
mov ['[ebp+var_58],', 'eax']
jmp ['short', 'loc_25F1']
mov ['[ebp+var_58],', '0']
mov ['edx,', '[ebp+var_58]']
mov ['[ebp+var_3C],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
lea ['ecx,', '[ebp+var_24]']
call ['??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_18]']
call ['??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
mov ['[ebp+var_5C],', 'eax']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_44]']
push ['ecx']
mov ['edx,', '[ebp+var_5C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_5C]']
mov ['edx,', '[eax+14h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_60],', 'eax']
mov ['eax,', '[ebp+var_60]']
mov ['[ebp+var_64],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
mov ['ecx,', '[ebp+var_64]']
push ['ecx']
lea ['ecx,', '[ebp+var_30]']
call ['??$?0VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '8']
lea ['ecx,', '[ebp+var_44]']
call ['??1?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ']
push ['offset', '$SG86796']
lea ['ecx,', '[ebp+var_30]']
call ['??B?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QBEPAVDataSourceSurface@gfx@mozilla@@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_24]']
call ['??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
push ['eax']
call ['?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
lea ['ecx,', '[ebp+var_24]']
call ['?forget@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ']
mov ['eax,', '[ebp+var_48]']
or ['eax,', '1']
mov ['[ebp+var_48],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_30]']
call ['??1?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_24]']
call ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN18_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '64h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN17_4']
dd ['offset', '$LN13_9']
dd ['0FFFFFFDCh,', '4']
dd ['offset', '$LN14_2']
dd ['0FFFFFFD0h,', '4']
dd ['offset', '$LN15_4']
db ['0Ah', 'dup(0CCh)']
endp
?CreateSimilarDrawTarget@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?CreateSimilarDrawTarget@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_1C],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'eax']
lea ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
lea ['eax,', '[ebp+var_14]']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['??$MakeAndAddRef@VDrawTargetRecording@gfx@mozilla@@QBV123@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@AAW4SurfaceFormat@23@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@$$QBQBVDrawTargetRecording@gfx@0@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@30@AAW4SurfaceFormat@30@@Z']
add ['esp,', '10h']
mov ['[ebp+var_20],', 'eax']
mov ['edx,', '[ebp+var_20]']
mov ['[ebp+var_24],', 'edx']
mov ['[ebp+var_4],', '1']
mov ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$?0VDrawTargetRecording@gfx@mozilla@@@?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@@Z']
mov ['ecx,', '[ebp+var_1C]']
or ['ecx,', '1']
mov ['[ebp+var_1C],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
db ['0Dh', 'dup(0CCh)']
endp
?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '30h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_28],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_2C],', 'eax']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[eax+90h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+var_30]']
mov ['[ebp+var_34],', 'eax']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_34]']
push ['ecx']
lea ['ecx,', '[ebp+var_18]']
call ['??$?0VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
lea ['eax,', '[ebp+var_18]']
push ['eax']
lea ['ecx,', '[ebp+var_24]']
push ['ecx']
call ['??$MakeAndAddRef@VPathBuilderRecording@gfx@mozilla@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@gfx@0@@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_38],', 'eax']
mov ['edx,', '[ebp+var_38]']
mov ['[ebp+var_3C],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$?0VPathBuilderRecording@gfx@mozilla@@@?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@@Z']
mov ['ecx,', '[ebp+var_28]']
or ['ecx,', '1']
mov ['[ebp+var_28],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_24]']
call ['??1?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN11_5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN10_13']
dd ['offset', '$LN8_10']
db ['8', 'dup(0CCh)']
endp
?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '78h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_84]']
mov ['ecx,', '1Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_6C],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_70],', 'eax']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
lea ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_70]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_70]']
mov ['eax,', '[edx+94h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_74],', 'eax']
mov ['ecx,', '[ebp+var_74]']
mov ['[ebp+var_78],', 'ecx']
mov ['[ebp+var_4],', '1']
mov ['edx,', '[ebp+var_78]']
push ['edx']
lea ['ecx,', '[ebp+var_18]']
call ['??$?0VGradientStops@gfx@mozilla@@@?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$already_AddRefed@VGradientStops@gfx@mozilla@@@@QAE@XZ']
push ['10h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_34],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
cmp ['[ebp+var_34],', '0']
jz ['short', 'loc_2A16']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
call ['??B?$RefPtr@VGradientStops@gfx@mozilla@@@@QBEPAVGradientStops@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_34]']
call ['??0GradientStopsRecording@gfx@mozilla@@QAE@PAVGradientStops@12@PAVDrawEventRecorderPrivate@12@@Z']
mov ['[ebp+var_7C],', 'eax']
jmp ['short', 'loc_2A1D']
mov ['[ebp+var_7C],', '0']
mov ['eax,', '[ebp+var_7C]']
mov ['[ebp+var_30],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
lea ['ecx,', '[ebp+var_24]']
call ['??0?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@PAVGradientStops@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
movzx ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_68],', 'esp']
lea ['edx,', '[ebp+var_24]']
push ['edx']
call ['??$?0VGradientStops@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VGradientStops@gfx@mozilla@@@@@Z']
lea ['ecx,', '[ebp+var_64]']
call ['??0RecordedGradientStopsCreation@gfx@mozilla@@QAE@UReferencePtr@12@PAUGradientStop@12@IW4ExtendMode@12@@Z']
mov ['[ebp+var_80],', 'eax']
mov ['eax,', '[ebp+var_80]']
mov ['[ebp+var_84],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
mov ['ecx,', '[ebp+var_84]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_64]']
call ['??1RecordedGradientStopsCreation@gfx@mozilla@@UAE@XZ']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
lea ['ecx,', '[ebp+var_24]']
call ['?forget@?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@XZ']
mov ['eax,', '[ebp+var_6C]']
or ['eax,', '1']
mov ['[ebp+var_6C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_24]']
call ['??1?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN16_6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '84h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
dd ['offset', '$LN15_5']
dd ['offset', '$LN12_13']
dd ['0FFFFFFDCh,', '4']
dd ['offset', '$LN13_10']
align ['8']
endp
?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '70h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_7C]']
mov ['ecx,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_64],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_68],', 'eax']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+var_68]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_68]']
mov ['edx,', '[eax+98h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_6C],', 'eax']
mov ['eax,', '[ebp+var_6C]']
mov ['[ebp+var_70],', 'eax']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_70]']
push ['ecx']
lea ['ecx,', '[ebp+var_18]']
call ['??$?0VFilterNode@gfx@mozilla@@@?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$already_AddRefed@VFilterNode@gfx@mozilla@@@@QAE@XZ']
push ['10h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_34],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
cmp ['[ebp+var_34],', '0']
jz ['short', 'loc_2BFB']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
call ['??B?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_34]']
call ['??0FilterNodeRecording@gfx@mozilla@@QAE@PAVFilterNode@12@PAVDrawEventRecorderPrivate@12@@Z']
mov ['[ebp+var_74],', 'eax']
jmp ['short', 'loc_2C02']
mov ['[ebp+var_74],', '0']
mov ['edx,', '[ebp+var_74]']
mov ['[ebp+var_30],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['eax,', '[ebp+var_30]']
push ['eax']
lea ['ecx,', '[ebp+var_24]']
call ['??0?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@PAVFilterNode@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
movzx ['ecx,', '[ebp+arg_4]']
push ['ecx']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_60],', 'esp']
lea ['edx,', '[ebp+var_24]']
push ['edx']
call ['??$?0VFilterNode@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VFilterNode@gfx@mozilla@@@@@Z']
lea ['ecx,', '[ebp+var_5C]']
call ['??0RecordedFilterNodeCreation@gfx@mozilla@@QAE@UReferencePtr@12@W4FilterType@12@@Z']
mov ['[ebp+var_78],', 'eax']
mov ['eax,', '[ebp+var_78]']
mov ['[ebp+var_7C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
mov ['ecx,', '[ebp+var_7C]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_5C]']
call ['??1RecordedFilterNodeCreation@gfx@mozilla@@UAE@XZ']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
lea ['ecx,', '[ebp+var_24]']
call ['?forget@?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@XZ']
mov ['eax,', '[ebp+var_64]']
or ['eax,', '1']
mov ['[ebp+var_64],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_24]']
call ['??1?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN16_7']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '7Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN15_6']
dd ['offset', '$LN12_14']
dd ['0FFFFFFDCh,', '4']
dd ['offset', '$LN13_11']
align ['4']
endp
?SetTransform@DrawTargetRecording@gfx@mozilla@@UAEXABVMatrix@23@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?SetTransform@DrawTargetRecording@gfx@mozilla@@UAEXABVMatrix@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['ecx,', '[ebp+var_48]']
call ['??0RecordedSetTransform@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVMatrix@12@@Z']
mov ['[ebp+var_4C],', 'eax']
mov ['edx,', '[ebp+var_4C]']
mov ['[ebp+var_50],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_50]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_48]']
call ['??1RecordedSetTransform@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?SetTransform@DrawTarget@gfx@mozilla@@UAEXABVMatrix@23@@Z']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_54],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_54]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_54]']
mov ['eax,', '[edx+9Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
db ['0Ch', 'dup(0CCh)']
endp
?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0B4h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '2Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_94],', '0']
lea ['ecx,', '[ebp+var_18]']
call ['??0?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ']
mov ['[ebp+var_4],', '1']
mov ['eax,', '[ebp+arg_4]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['al,', '6']
jnz ['short', 'loc_2EB6']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['ecx,', '[ebp+var_18]']
call ['??4?$RefPtr@VPathRecording@gfx@mozilla@@@@QAEAAV0@PAVPathRecording@gfx@mozilla@@@Z']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_3C],', 'esp']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?HasStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAE_NUReferencePtr@23@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_2EB1']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['ecx,', '[ebp+var_18]']
call ['?forget@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@XZ']
mov ['edx,', '[ebp+var_94]']
or ['edx,', '1']
mov ['[ebp+var_94],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_312C']
jmp ['loc_3060']
xor ['eax,', 'eax']
jnz ['short', 'loc_2EB6']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
mov ['eax,', '[edx+24h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1D],', 'al']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_98],', 'eax']
mov ['esi,', 'esp']
movzx ['ecx,', '[ebp+var_1D]']
push ['ecx']
lea ['edx,', '[ebp+var_40]']
push ['edx']
mov ['eax,', '[ebp+var_98]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_98]']
mov ['eax,', '[edx+90h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_9C],', 'eax']
mov ['ecx,', '[ebp+var_9C]']
mov ['[ebp+var_A0],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['edx,', '[ebp+var_A0]']
push ['edx']
lea ['ecx,', '[ebp+var_28]']
call ['??$?0VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
lea ['ecx,', '[ebp+var_40]']
call ['??1?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
push ['20h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_48],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
cmp ['[ebp+var_48],', '0']
jz ['short', 'loc_2F72']
movzx ['eax,', '[ebp+var_1D]']
push ['eax']
lea ['ecx,', '[ebp+var_28]']
call ['??B?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_48]']
call ['??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z']
mov ['[ebp+var_A4],', 'eax']
jmp ['short', 'loc_2F7C']
mov ['[ebp+var_A4],', '0']
mov ['ecx,', '[ebp+var_A4]']
mov ['[ebp+var_44],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['edx,', '[ebp+var_44]']
push ['edx']
lea ['ecx,', '[ebp+var_34]']
call ['??0?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@PAVPathBuilderRecording@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_34]']
call ['??B?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QBEPAVPathBuilderRecording@gfx@mozilla@@XZ']
mov ['esi,', 'esp']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+arg_4]']
mov ['eax,', '[edx+20h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
lea ['ecx,', '[ebp+var_34]']
call ['??C?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QBEPAVPathBuilderRecording@gfx@mozilla@@XZ']
mov ['[ebp+var_A8],', 'eax']
lea ['ecx,', '[ebp+var_50]']
push ['ecx']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_4C]']
push ['edx']
mov ['eax,', '[ebp+var_A8]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_A8]']
mov ['eax,', '[edx+20h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_AC],', 'eax']
mov ['ecx,', '[ebp+var_AC]']
mov ['[ebp+var_B0],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
mov ['ecx,', '[ebp+var_B0]']
call ['??$downcast@VPathRecording@gfx@mozilla@@@?$already_AddRefed@VPath@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@XZ']
mov ['[ebp+var_B4],', 'eax']
mov ['edx,', '[ebp+var_B4]']
mov ['[ebp+var_B8],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '8']
mov ['eax,', '[ebp+var_B8]']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
call ['??$?4VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAEAAV0@$$QAU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_50]']
call ['??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_4C]']
call ['??1?$already_AddRefed@VPath@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
lea ['ecx,', '[ebp+var_34]']
call ['??1?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_28]']
call ['??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
lea ['ecx,', '[ebp+var_18]']
call ['??B?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_88]']
call ['??0RecordedPathCreation@gfx@mozilla@@QAE@PAVPathRecording@12@@Z']
mov ['[ebp+var_BC],', 'eax']
mov ['ecx,', '[ebp+var_BC]']
mov ['[ebp+var_C0],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '9']
mov ['edx,', '[ebp+var_C0]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_88]']
call ['??1RecordedPathCreation@gfx@mozilla@@UAE@XZ']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_8C],', 'esp']
lea ['eax,', '[ebp+var_18]']
push ['eax']
call ['??$?0VPathRecording@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VPathRecording@gfx@mozilla@@@@@Z']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?AddStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['[ebp+var_90],', 'eax']
lea ['ecx,', '[ebp+var_90]']
push ['ecx']
lea ['ecx,', '[ebp+var_18]']
call ['??C?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ']
add ['eax,', '24h']
mov ['ecx,', 'eax']
call ['?push_back@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEX$$QAPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
lea ['ecx,', '[ebp+var_18]']
call ['?forget@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@XZ']
mov ['eax,', '[ebp+var_94]']
or ['eax,', '1']
mov ['[ebp+var_94],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN26_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
dd ['offset', '$LN25']
dd ['offset', '$LN21_0']
dd ['0FFFFFFD8h,', '4']
dd ['offset', '$LN22_1']
db ['0CCh']
db ['3', 'dup(0FFh)']
dd ['4']
dd ['offset', '$LN23_1']
align ['8']
endp
?EnsurePatternDependenciesStored@DrawTargetRecording@gfx@mozilla@@AAEXABVPattern@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movsx ['ecx,', 'al']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_C],', '3']
ja ['short', 'loc_323C']
mov ['edx,', '[ebp+var_C]']
jmp ['ds:$LN15_7[edx*4]']
jmp ['short', 'loc_323C']
xor ['eax,', 'eax']
jnz ['short', '$LN7_6']
jmp ['short', 'loc_323C']
xor ['ecx,', 'ecx']
jnz ['short', '$LN3_16']
jmp ['short', 'loc_323C']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'edx']
push ['offset', '$SG87311']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '4']
call ['??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
push ['eax']
call ['?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z']
add ['esp,', '0Ch']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
dd ['offset', '$LN1']
dd ['offset', '$LN7_6']
dd ['offset', '$LN3_16']
db ['8', 'dup(0CCh)']
endp
?RecordingSourceSurfaceUserDataFunc@gfx@mozilla@@YAXPAX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?RecordingSourceSurfaceUserDataFunc@gfx@mozilla@@YAXPAX@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '40h']
push ['edi']
lea ['edi,', '[ebp+var_4C]']
mov ['ecx,', '10h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['eax,', '[ebp+this]']
mov ['[ebp+var_10],', 'eax']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
push ['eax']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RemoveStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_38],', 'esp']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
push ['eax']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
lea ['ecx,', '[ebp+var_34]']
call ['??0RecordedSourceSurfaceDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_44]']
mov ['[ebp+var_48],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_48]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1RecordedSourceSurfaceDestruction@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_40],', 'eax']
mov ['ecx,', '[ebp+var_40]']
mov ['[ebp+var_3C],', 'ecx']
cmp ['[ebp+var_3C],', '0']
jz ['short', 'loc_3339']
push ['1']
mov ['ecx,', '[ebp+var_3C]']
call ['??_GRecordingSourceSurfaceUserData@gfx@mozilla@@QAEPAXI@Z']
mov ['[ebp+var_4C],', 'eax']
jmp ['short', 'loc_3340']
mov ['[ebp+var_4C],', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '4Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1A8h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_1B4]']
mov ['ecx,', '6Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
cmp ['[ebp+arg_8],', '0']
jnz ['loc_358D']
mov ['eax,', '[ebp+Str]']
push ['eax']
push ['offset', '$SG85048']
push ['0FFFFFFFFh']
push ['0']
call ['?DefaultOptions@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@SAH_N@Z']
add ['esp,', '4']
push ['eax']
lea ['ecx,', '[ebp+var_F8]']
call ['??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z']
mov ['[ebp+var_19C],', 'eax']
mov ['ecx,', '[ebp+var_19C]']
mov ['[ebp+var_1A0],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_1A0]']
call ['??6?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEAAV012@QBD@Z']
mov ['ecx,', 'eax']
call ['??6?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEAAV012@QBD@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_F8]']
call ['??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_100]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['ecx,', 'al']
push ['ecx']
call ['?BytesPerPixel@gfx@mozilla@@YAHW4SurfaceFormat@12@@Z']
add ['esp,', '4']
imul ['eax,', '[esi]']
mov ['[ebp+var_10],', 'eax']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_10C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_10]']
imul ['ecx,', '[eax+4]']
mov ['[ebp+Size],', 'ecx']
mov ['edx,', '[ebp+Size]']
push ['edx']
call ['??_U@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+Dst],', 'eax']
cmp ['[ebp+Dst],', '0']
jz ['short', 'loc_34C1']
mov ['eax,', '[ebp+Size]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_memset_0']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+Dst]']
mov ['[ebp+var_1A4],', 'edx']
jmp ['short', 'loc_34CB']
mov ['[ebp+var_1A4],', '0']
mov ['eax,', '[ebp+var_1A4]']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
call ['??0?$UniquePtr@$$BY0A@EV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QAE@PAE@Z']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['ecx,', 'al']
push ['ecx']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_150]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['ecx,', '[ebp+var_18]']
call ['?get@?$UniquePtr@$$BY0A@EV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QBEPAEXZ']
push ['eax']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_154],', 'esp']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
lea ['ecx,', '[ebp+var_148]']
call ['??0RecordedSourceSurfaceCreation@gfx@mozilla@@QAE@UReferencePtr@12@PAEHABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z']
mov ['[ebp+var_1A8],', 'eax']
mov ['eax,', '[ebp+var_1A8]']
mov ['[ebp+var_1AC],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['ecx,', '[ebp+var_1AC]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_148]']
call ['??1RecordedSourceSurfaceCreation@gfx@mozilla@@UAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$UniquePtr@$$BY0A@EV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QAE@XZ']
jmp ['loc_364E']
push ['0']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
lea ['ecx,', '[ebp+var_34]']
call ['??0ScopedMap@DataSourceSurface@gfx@mozilla@@QAE@PAV123@W4MapType@123@@Z']
mov ['[ebp+var_4],', '3']
mov ['eax,', '[ebp+arg_8]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['ecx,', 'al']
push ['ecx']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_194]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+arg_8]']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
lea ['ecx,', '[ebp+var_34]']
call ['?GetStride@ScopedMap@DataSourceSurface@gfx@mozilla@@QBEHXZ']
push ['eax']
lea ['ecx,', '[ebp+var_34]']
call ['?GetData@ScopedMap@DataSourceSurface@gfx@mozilla@@QBEPAEXZ']
push ['eax']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_198],', 'esp']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
lea ['ecx,', '[ebp+var_18C]']
call ['??0RecordedSourceSurfaceCreation@gfx@mozilla@@QAE@UReferencePtr@12@PAEHABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z']
mov ['[ebp+var_1B0],', 'eax']
mov ['eax,', '[ebp+var_1B0]']
mov ['[ebp+var_1B4],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['ecx,', '[ebp+var_1B4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_18C]']
call ['??1RecordedSourceSurfaceCreation@gfx@mozilla@@UAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1ScopedMap@DataSourceSurface@gfx@mozilla@@UAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN16_8']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '1B4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN15_8']
dd ['offset', '$LN12_16']
db ['0CCh']
db ['3', 'dup(0FFh)']
dd ['14h']
dd ['offset', '$LN13_13']
db ['9', 'dup(0CCh)']
endp
?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '30h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_20],', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['ecx,', '[ebp+arg_0]']
call ['?HasStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAE_NUReferencePtr@23@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_3713']
jmp ['loc_3801']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_24]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+arg_4]']
mov ['eax,', '[edx+14h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_34]']
mov ['[ebp+var_38],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_38]']
push ['edx']
lea ['ecx,', '[ebp+var_14]']
call ['??$?0VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_24]']
call ['??1?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+Str]']
push ['eax']
lea ['ecx,', '[ebp+var_14]']
call ['??B?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QBEPAVDataSourceSurface@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z']
add ['esp,', '10h']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_28],', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['ecx,', '[ebp+arg_0]']
call ['?AddStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z']
push ['8']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_30],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
cmp ['[ebp+var_30],', '0']
jz ['short', 'loc_37AF']
mov ['ecx,', '[ebp+var_30]']
call ['??0RecordingSourceSurfaceUserData@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_3C],', 'eax']
jmp ['short', 'loc_37B6']
mov ['[ebp+var_3C],', '0']
mov ['ecx,', '[ebp+var_3C]']
mov ['[ebp+var_2C],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['edx,', '[ebp+var_2C]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '4']
call ['??4?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAEAAV0@PAVDrawEventRecorderPrivate@gfx@mozilla@@@Z']
push ['offset', '?RecordingSourceSurfaceUserDataFunc@gfx@mozilla@@YAXPAX@Z']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['?AddUserData@SourceSurface@gfx@mozilla@@QAEXPAUUserDataKey@23@PAXP6AX1@Z@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_14]']
call ['??1?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12_17']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN11_6']
dd ['offset', '$LN9_10']
db ['0Bh', 'dup(0CCh)']
endp
?GetSourceSurface@gfx@mozilla@@YAPAVSourceSurface@12@PAV312@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['al,', '0Ah']
jz ['short', 'loc_387B']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_3886']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '10h']
call ['??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
?GetGradientStops@gfx@mozilla@@YAPAVGradientStops@12@PAV312@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['al,', '6']
jz ['short', 'loc_38BB']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_38C6']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '8']
call ['??B?$RefPtr@VGradientStops@gfx@mozilla@@@@QBEPAVGradientStops@gfx@mozilla@@XZ']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
?RecordingFontUserDataDestroyFunc@gfx@mozilla@@YAXPAX@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?RecordingFontUserDataDestroyFunc@gfx@mozilla@@YAXPAX@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '3Ch']
push ['edi']
lea ['edi,', '[ebp+var_48]']
mov ['ecx,', '0Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['eax,', '[ebp+this]']
mov ['[ebp+var_10],', 'eax']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_34],', 'esp']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
push ['eax']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
lea ['ecx,', '[ebp+var_30]']
call ['??0RecordedScaledFontDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z']
mov ['[ebp+var_40],', 'eax']
mov ['ecx,', '[ebp+var_40]']
mov ['[ebp+var_44],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_44]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_30]']
call ['??1RecordedScaledFontDestruction@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_3C],', 'eax']
mov ['ecx,', '[ebp+var_3C]']
mov ['[ebp+var_38],', 'ecx']
cmp ['[ebp+var_38],', '0']
jz ['short', 'loc_3984']
push ['1']
mov ['ecx,', '[ebp+var_38]']
call ['??_GRecordingFontUserData@gfx@mozilla@@QAEPAXI@Z']
mov ['[ebp+var_48],', 'eax']
jmp ['short', 'loc_398B']
mov ['[ebp+var_48],', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '48h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$0	proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1DrawTarget@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$1	proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '3Ch']
jmp ['??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$2	proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '40h']
jmp ['??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$3	proc near
mov ['eax,', '[ebp-70h]']
and ['eax,', '1']
jz ['locret_39DE']
and ['dword', 'ptr', '[ebp-70h],', '0FFFFFFFEh']
lea ['ecx,', '[ebp-24h]']
jmp ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
retn
endp
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$4	proc near
mov ['eax,', '[ebp-70h]']
and ['eax,', '2']
jz ['locret_39F7']
and ['dword', 'ptr', '[ebp-70h],', '0FFFFFFFDh']
lea ['ecx,', '[ebp-28h]']
jmp ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
retn
endp
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$5	proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$6	proc near
lea ['ecx,', '[ebp-60h]']
jmp ['??1RecordedDrawTargetCreation@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-98h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z$0	proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1DrawTarget@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z$1	proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '3Ch']
jmp ['??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z$2	proc near
lea ['ecx,', '[ebp-14h]']
jmp ['??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z$3	proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '40h']
jmp ['??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z$4	proc near
lea ['ecx,', '[ebp-44h]']
jmp ['??1RecordedCreateSimilarDrawTarget@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-5Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$??1DrawTargetRecording@gfx@mozilla@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1DrawTarget@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??1DrawTargetRecording@gfx@mozilla@@UAE@XZ$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '3Ch']
jmp ['??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??1DrawTargetRecording@gfx@mozilla@@UAE@XZ$2 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '40h']
jmp ['??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??1DrawTargetRecording@gfx@mozilla@@UAE@XZ$3 proc near
lea ['ecx,', '[ebp-38h]']
jmp ['??1RecordedDrawTargetDestruction@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??1DrawTargetRecording@gfx@mozilla@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-40h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1DrawTargetRecording@gfx@mozilla@@UAE@XZ']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$0 proc near
lea ['ecx,', '[ebp-2Ch]']
jmp ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$1 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$2 proc near
mov ['eax,', '[ebp-34h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$3 proc near
lea ['ecx,', '[ebp-24h]']
jmp ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$4 proc near
lea ['ecx,', '[ebp-5Ch]']
jmp ['??1RecordedSnapshot@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$5 proc near
mov ['eax,', '[ebp-64h]']
and ['eax,', '1']
jz ['locret_3AF3']
and ['dword', 'ptr', '[ebp-64h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
retn
endp
__ehhandler$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-7Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?DrawSurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@1ABUDrawSurfaceOptions@23@ABUDrawOptions@23@@Z$0 proc near
lea ['ecx,', '[ebp-68h]']
jmp ['??1RecordedDrawSurface@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?DrawSurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@1ABUDrawSurfaceOptions@23@ABUDrawOptions@23@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-78h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?DrawSurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@1ABUDrawSurfaceOptions@23@ABUDrawOptions@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?DrawFilter@DrawTargetRecording@gfx@mozilla@@UAEXPAVFilterNode@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z$0	proc near
lea ['ecx,', '[ebp-58h]']
jmp ['??1RecordedDrawFilter@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?DrawFilter@DrawTargetRecording@gfx@mozilla@@UAEXPAVFilterNode@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-68h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?DrawFilter@DrawTargetRecording@gfx@mozilla@@UAEXPAVFilterNode@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?DrawSurfaceWithShadow@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUColor@23@1MW4CompositionOp@23@@Z$0 proc near
lea ['ecx,', '[ebp-60h]']
jmp ['??1RecordedDrawSurfaceWithShadow@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?DrawSurfaceWithShadow@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUColor@23@1MW4CompositionOp@23@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-70h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?DrawSurfaceWithShadow@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUColor@23@1MW4CompositionOp@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?ClearRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z$0 proc near
lea ['ecx,', '[ebp-40h]']
jmp ['??1RecordedClearRect@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?ClearRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-4Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?ClearRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?CopySurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$0 proc near
lea ['ecx,', '[ebp-50h]']
jmp ['??1RecordedCopySurface@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?CopySurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-60h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?CopySurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?FillRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z$0 proc	near
lea ['ecx,', '[ebp-88h]']
jmp ['??1RecordedFillRect@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$?FillRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z$1 proc	near
lea ['ecx,', '[ebp-0C8h]']
jmp ['??1AdjustedPattern@gfx@mozilla@@QAE@XZ']
endp
__ehhandler$?FillRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0DCh]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?FillRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?StrokeRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0 proc near
lea ['ecx,', '[ebp-0A0h]']
jmp ['??1RecordedStrokeRect@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$?StrokeRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$1 proc near
lea ['ecx,', '[ebp-0E0h]']
jmp ['??1AdjustedPattern@gfx@mozilla@@QAE@XZ']
endp
__ehhandler$?StrokeRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0F4h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?StrokeRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?StrokeLine@DrawTargetRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0 proc	near
lea ['ecx,', '[ebp-0A0h]']
jmp ['??1RecordedStrokeLine@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$?StrokeLine@DrawTargetRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$1 proc	near
lea ['ecx,', '[ebp-0E0h]']
jmp ['??1AdjustedPattern@gfx@mozilla@@QAE@XZ']
endp
__ehhandler$?StrokeLine@DrawTargetRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0F4h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?StrokeLine@DrawTargetRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$1 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$2 proc near
lea ['ecx,', '[ebp-0A8h]']
jmp ['??1RecordedStroke@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$3 proc near
lea ['ecx,', '[ebp-0ECh]']
jmp ['??1AdjustedPattern@gfx@mozilla@@QAE@XZ']
endp
__ehhandler$?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-108h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z$0 proc	near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z$1 proc	near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z$2 proc	near
lea ['ecx,', '[ebp-90h]']
jmp ['??1RecordedFill@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z$3 proc	near
lea ['ecx,', '[ebp-0D4h]']
jmp ['??1AdjustedPattern@gfx@mozilla@@QAE@XZ']
endp
__ehhandler$?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0F0h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z$0 proc near
lea ['ecx,', '[ebp-58h]']
jmp ['??1RecordedFontData@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z$1 proc near
lea ['ecx,', '[ebp-0B0h]']
jmp ['??1RecordedScaledFontCreation@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z$2 proc near
mov ['eax,', '[ebp-0BCh]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z$3 proc near
lea ['ecx,', '[ebp-134h]']
jmp ['??1RecordedFillGlyphs@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-150h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?Mask@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z$0 proc near
lea ['ecx,', '[ebp-0B0h]']
jmp ['??1RecordedMask@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$?Mask@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z$1 proc near
lea ['ecx,', '[ebp-0F0h]']
jmp ['??1AdjustedPattern@gfx@mozilla@@QAE@XZ']
endp
__unwindfunclet$?Mask@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z$2 proc near
lea ['ecx,', '[ebp-130h]']
jmp ['??1AdjustedPattern@gfx@mozilla@@QAE@XZ']
endp
__ehhandler$?Mask@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?Mask@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?MaskSurface@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z$0 proc near
lea ['ecx,', '[ebp-88h]']
jmp ['??1RecordedMaskSurface@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$?MaskSurface@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z$1 proc near
lea ['ecx,', '[ebp-0CCh]']
jmp ['??1AdjustedPattern@gfx@mozilla@@QAE@XZ']
endp
__ehhandler$?MaskSurface@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0E0h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?MaskSurface@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?PushClip@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@@Z$0 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?PushClip@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@@Z$1 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?PushClip@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@@Z$2 proc near
lea ['ecx,', '[ebp-48h]']
jmp ['??1RecordedPushClip@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?PushClip@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-60h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?PushClip@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?PushClipRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z$0 proc near
lea ['ecx,', '[ebp-40h]']
jmp ['??1RecordedPushClipRect@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?PushClipRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-4Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?PushClipRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?PopClip@DrawTargetRecording@gfx@mozilla@@UAEXXZ$0 proc	near
lea ['ecx,', '[ebp-30h]']
jmp ['??1RecordedPopClip@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?PopClip@DrawTargetRecording@gfx@mozilla@@UAEXXZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-3Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?PopClip@DrawTargetRecording@gfx@mozilla@@UAEXXZ']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?PushLayer@DrawTargetRecording@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z$0 proc	near
lea ['ecx,', '[ebp-70h]']
jmp ['??1RecordedPushLayer@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?PushLayer@DrawTargetRecording@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-84h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?PushLayer@DrawTargetRecording@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?PopLayer@DrawTargetRecording@gfx@mozilla@@UAEXXZ$0 proc near
lea ['ecx,', '[ebp-30h]']
jmp ['??1RecordedPopLayer@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?PopLayer@DrawTargetRecording@gfx@mozilla@@UAEXXZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-3Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?PopLayer@DrawTargetRecording@gfx@mozilla@@UAEXXZ']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z$0 proc near
lea ['ecx,', '[ebp-2Ch]']
jmp ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z$1 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z$2 proc near
mov ['eax,', '[ebp-34h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z$3 proc near
lea ['ecx,', '[ebp-24h]']
jmp ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z$4 proc near
lea ['ecx,', '[ebp-6Ch]']
jmp ['??1RecordedSourceSurfaceCreation@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z$5 proc near
mov ['eax,', '[ebp-74h]']
and ['eax,', '1']
jz ['locret_3EAE']
and ['dword', 'ptr', '[ebp-74h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
retn
endp
__ehhandler$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$0	proc near
lea ['ecx,', '[ebp-38h]']
jmp ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$1	proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$2	proc near
mov ['eax,', '[ebp-40h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$3	proc near
lea ['ecx,', '[ebp-24h]']
jmp ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$4	proc near
lea ['ecx,', '[ebp-44h]']
jmp ['??1?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$5	proc near
lea ['ecx,', '[ebp-30h]']
jmp ['??1?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$6	proc near
lea ['ecx,', '[ebp-48h]']
jmp ['??1?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$7	proc near
mov ['eax,', '[ebp-4Ch]']
and ['eax,', '1']
jz ['locret_3F20']
and ['dword', 'ptr', '[ebp-4Ch],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
retn
endp
__ehhandler$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-70h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$0 proc near
lea ['ecx,', '[ebp-38h]']
jmp ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$1 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$2 proc near
mov ['eax,', '[ebp-40h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$3 proc near
lea ['ecx,', '[ebp-24h]']
jmp ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$4 proc near
lea ['ecx,', '[ebp-44h]']
jmp ['??1?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$5 proc near
lea ['ecx,', '[ebp-30h]']
jmp ['??1?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$6 proc near
mov ['eax,', '[ebp-48h]']
and ['eax,', '1']
jz ['locret_3F87']
and ['dword', 'ptr', '[ebp-48h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
retn
endp
__ehhandler$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-64h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$0 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$1 proc near
mov ['eax,', '[ebp-1Ch]']
and ['eax,', '1']
jz ['locret_3FC3']
and ['dword', 'ptr', '[ebp-1Ch],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
retn
endp
__ehhandler$?CreateSimilarDrawTarget@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?CreateSimilarDrawTarget@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$0 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$1 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$2 proc near
lea ['ecx,', '[ebp-24h]']
jmp ['??1?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$3 proc near
mov ['eax,', '[ebp-28h]']
and ['eax,', '1']
jz ['locret_400F']
and ['dword', 'ptr', '[ebp-28h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
retn
endp
__ehhandler$?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-3Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z$0 proc near
lea ['ecx,', '[ebp-2Ch]']
jmp ['??1?$already_AddRefed@VGradientStops@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z$1 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z$2 proc near
mov ['eax,', '[ebp-34h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z$3 proc near
lea ['ecx,', '[ebp-24h]']
jmp ['??1?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z$4 proc near
lea ['ecx,', '[ebp-64h]']
jmp ['??1RecordedGradientStopsCreation@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z$5 proc near
mov ['eax,', '[ebp-6Ch]']
and ['eax,', '1']
jz ['locret_406E']
and ['dword', 'ptr', '[ebp-6Ch],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$already_AddRefed@VGradientStops@gfx@mozilla@@@@QAE@XZ']
retn
endp
__ehhandler$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-84h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z$0	proc near
lea ['ecx,', '[ebp-2Ch]']
jmp ['??1?$already_AddRefed@VFilterNode@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z$1	proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z$2	proc near
mov ['eax,', '[ebp-34h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z$3	proc near
lea ['ecx,', '[ebp-24h]']
jmp ['??1?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z$4	proc near
lea ['ecx,', '[ebp-5Ch]']
jmp ['??1RecordedFilterNodeCreation@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z$5	proc near
mov ['eax,', '[ebp-64h]']
and ['eax,', '1']
jz ['locret_40D0']
and ['dword', 'ptr', '[ebp-64h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$already_AddRefed@VFilterNode@gfx@mozilla@@@@QAE@XZ']
retn
endp
__ehhandler$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-7Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?SetTransform@DrawTargetRecording@gfx@mozilla@@UAEXABVMatrix@23@@Z$0 proc near
lea ['ecx,', '[ebp-48h]']
jmp ['??1RecordedSetTransform@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?SetTransform@DrawTargetRecording@gfx@mozilla@@UAEXABVMatrix@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?SetTransform@DrawTargetRecording@gfx@mozilla@@UAEXABVMatrix@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$0 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$1 proc near
mov ['eax,', '[ebp-94h]']
and ['eax,', '1']
jz ['locret_4135']
and ['dword', 'ptr', '[ebp-94h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ']
retn
endp
__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$2 proc near
lea ['ecx,', '[ebp-40h]']
jmp ['??1?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$3 proc near
lea ['ecx,', '[ebp-28h]']
jmp ['??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$4 proc near
mov ['eax,', '[ebp-48h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$5 proc near
lea ['ecx,', '[ebp-34h]']
jmp ['??1?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$6 proc near
lea ['ecx,', '[ebp-4Ch]']
jmp ['??1?$already_AddRefed@VPath@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$7 proc near
lea ['ecx,', '[ebp-50h]']
jmp ['??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$8 proc near
lea ['ecx,', '[ebp-88h]']
jmp ['??1RecordedPathCreation@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0C0h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?RecordingSourceSurfaceUserDataFunc@gfx@mozilla@@YAXPAX@Z$0 proc near
lea ['ecx,', '[ebp-34h]']
jmp ['??1RecordedSourceSurfaceDestruction@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?RecordingSourceSurfaceUserDataFunc@gfx@mozilla@@YAXPAX@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-48h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?RecordingSourceSurfaceUserDataFunc@gfx@mozilla@@YAXPAX@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z$0 proc near
lea ['ecx,', '[ebp-0F8h]']
jmp ['??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ']
endp
__unwindfunclet$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z$1 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$UniquePtr@$$BY0A@EV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QAE@XZ']
endp
__unwindfunclet$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z$2 proc near
lea ['ecx,', '[ebp-148h]']
jmp ['??1RecordedSourceSurfaceCreation@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z$3 proc near
lea ['ecx,', '[ebp-34h]']
jmp ['??1ScopedMap@DataSourceSurface@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z$4 proc near
lea ['ecx,', '[ebp-18Ch]']
jmp ['??1RecordedSourceSurfaceCreation@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1B4h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z$0	proc near
lea ['ecx,', '[ebp-24h]']
jmp ['??1?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z$1	proc near
lea ['ecx,', '[ebp-14h]']
jmp ['??1?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z$2	proc near
mov ['eax,', '[ebp-30h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__ehhandler$?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-3Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?RecordingFontUserDataDestroyFunc@gfx@mozilla@@YAXPAX@Z$0 proc near
lea ['ecx,', '[ebp-30h]']
jmp ['??1RecordedScaledFontDestruction@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?RecordingFontUserDataDestroyFunc@gfx@mozilla@@YAXPAX@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-44h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?RecordingFontUserDataDestroyFunc@gfx@mozilla@@YAXPAX@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0AAPAEV?$DefaultDelete@$$BY0A@E@mozilla@@@?$Pair@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QAE@AAPAE$$QAV?$DefaultDelete@$$BY0A@E@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$Forward@V?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@YA$$QAV?$DefaultDelete@$$BY0A@E@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$Forward@AAPAE@mozilla@@YAAAPAEAAPAE@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??$?0AAPAEV?$DefaultDelete@$$BY0A@E@mozilla@@@?$PairHelper@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@$00$0A@@detail@mozilla@@IAE@AAPAE$$QAV?$DefaultDelete@$$BY0A@E@2@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0AAPAEV?$DefaultDelete@$$BY0A@E@mozilla@@@?$PairHelper@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@$00$0A@@detail@mozilla@@IAE@AAPAE$$QAV?$DefaultDelete@$$BY0A@E@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$Forward@V?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@YA$$QAV?$DefaultDelete@$$BY0A@E@0@AAV10@@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$Forward@AAPAE@mozilla@@YAAAPAEAAPAE@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0I@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IIW4ArgType@012@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$?0I@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IIW4ArgType@012@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['1Eh']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_C]']
mov ['[ecx+24h],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
push ['4']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z']
push ['4']
lea ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$?0I@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IIW4ArgType@012@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??$?0I@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IIW4ArgType@012@@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '28h']
jmp ['??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
endp
__ehhandler$??$?0I@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IIW4ArgType@012@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$?0I@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IIW4ArgType@012@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0M@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IMW4ArgType@012@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$?0M@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IMW4ArgType@012@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['1Eh']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_C]']
mov ['[ecx+24h],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
push ['4']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z']
push ['4']
lea ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$?0M@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IMW4ArgType@012@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??$?0M@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IMW4ArgType@012@@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '28h']
jmp ['??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
endp
__ehhandler$??$?0M@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IMW4ArgType@012@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$?0M@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IMW4ArgType@012@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$?0U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['1Eh']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_10]']
mov ['[ecx+24h],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
push ['8']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z']
push ['8']
lea ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$?0U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??$?0U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '28h']
jmp ['??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
endp
__ehhandler$??$?0U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$?0U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0U?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$?0U?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['1Eh']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_18]']
mov ['[ecx+24h],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
push ['10h']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z']
push ['10h']
lea ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$?0U?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z$0 proc	near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??$?0U?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z$1 proc	near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '28h']
jmp ['??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
endp
__ehhandler$??$?0U?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$?0U?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$?0U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['1Eh']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_10]']
mov ['[ecx+24h],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
push ['8']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z']
push ['8']
lea ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$?0U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z$0 proc	near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??$?0U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z$1 proc	near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '28h']
jmp ['??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
endp
__ehhandler$??$?0U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$?0U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0U?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$?0U?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['1Eh']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_14]']
mov ['[ecx+24h],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
push ['0Ch']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z']
push ['0Ch']
lea ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$?0U?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??$?0U?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '28h']
jmp ['??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
endp
__ehhandler$??$?0U?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$?0U?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$?0U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['1Eh']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_10]']
mov ['[ecx+24h],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
push ['8']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z']
push ['8']
lea ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$?0U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??$?0U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '28h']
jmp ['??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
endp
__ehhandler$??$?0U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$?0U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0U?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$?0U?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['1Eh']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_18]']
mov ['[ecx+24h],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
push ['10h']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z']
push ['10h']
lea ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$?0U?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??$?0U?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '28h']
jmp ['??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
endp
__ehhandler$??$?0U?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$?0U?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$?0U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['1Eh']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_10]']
mov ['[ecx+24h],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
push ['8']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z']
push ['8']
lea ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$?0U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??$?0U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '28h']
jmp ['??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
endp
__ehhandler$??$?0U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$?0U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0UColor@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IUColor@12@W4ArgType@012@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$?0UColor@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IUColor@12@W4ArgType@012@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['1Eh']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_18]']
mov ['[ecx+24h],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
push ['10h']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z']
push ['10h']
lea ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$?0UColor@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IUColor@12@W4ArgType@012@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??$?0UColor@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IUColor@12@W4ArgType@012@@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '28h']
jmp ['??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
endp
__ehhandler$??$?0UColor@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IUColor@12@W4ArgType@012@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$?0UColor@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IUColor@12@W4ArgType@012@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$forward@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YA$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YA$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@$$QA_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@$$QA_N@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$forward@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YA$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@_N@std@@YA$$QA_NAA_N@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_10]']
mov ['al,', '[eax]']
mov ['[edx+0Ch],', 'al']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@$$QA_N@Z$0	proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@$$QA_N@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@$$QA_N@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@1@$$QA_N@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@1@$$QA_N@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$forward@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@@std@@YA$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@_N@std@@YA$$QA_NAA_N@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_10]']
mov ['al,', '[eax]']
mov ['[edx+0Ch],', 'al']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@1@$$QA_N@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@1@$$QA_N@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@1@$$QA_N@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?take@?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAEPAVDataSourceSurface@gfx@mozilla@@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?take@?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VDrawTargetRecording@gfx@mozilla@@@?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?take@?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@QAEPAVDrawTargetRecording@gfx@mozilla@@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VFilterNode@gfx@mozilla@@@?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?take@?$already_AddRefed@VFilterNode@gfx@mozilla@@@@QAEPAVFilterNode@gfx@mozilla@@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VFilterNode@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VFilterNode@gfx@mozilla@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?get@?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
cdq
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VGradientStops@gfx@mozilla@@@?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?take@?$already_AddRefed@VGradientStops@gfx@mozilla@@@@QAEPAVGradientStops@gfx@mozilla@@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VGradientStops@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VGradientStops@gfx@mozilla@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?get@?$RefPtr@VGradientStops@gfx@mozilla@@@@QBEPAVGradientStops@gfx@mozilla@@XZ']
cdq
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VMatrix5x4@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix5x4@12@W4ArgType@012@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$?0VMatrix5x4@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix5x4@12@W4ArgType@012@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['1Eh']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_58]']
mov ['[ecx+24h],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
push ['50h']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z']
push ['50h']
lea ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['5Ch']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$?0VMatrix5x4@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix5x4@12@W4ArgType@012@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??$?0VMatrix5x4@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix5x4@12@W4ArgType@012@@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '28h']
jmp ['??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
endp
__ehhandler$??$?0VMatrix5x4@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix5x4@12@W4ArgType@012@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$?0VMatrix5x4@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix5x4@12@W4ArgType@012@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VMatrix@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix@12@W4ArgType@012@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$?0VMatrix@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix@12@W4ArgType@012@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['1Eh']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_20]']
mov ['[ecx+24h],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
push ['18h']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z']
push ['18h']
lea ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['24h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$?0VMatrix@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix@12@W4ArgType@012@@Z$0 proc	near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??$?0VMatrix@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix@12@W4ArgType@012@@Z$1 proc	near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '28h']
jmp ['??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
endp
__ehhandler$??$?0VMatrix@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix@12@W4ArgType@012@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$?0VMatrix@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix@12@W4ArgType@012@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?take@?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAEPAVPathBuilder@gfx@mozilla@@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VPathBuilderRecording@gfx@mozilla@@@?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?take@?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAEPAVPathBuilderRecording@gfx@mozilla@@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?take@?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAEPAVPathRecording@gfx@mozilla@@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VPathRecording@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VPathRecording@gfx@mozilla@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?get@?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ']
cdq
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?take@?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAEPAVSourceSurface@gfx@mozilla@@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VSourceSurface@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VSourceSurface@gfx@mozilla@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?get@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
cdq
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0_N@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@I_NW4ArgType@012@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$?0_N@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@I_NW4ArgType@012@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['1Eh']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_C]']
mov ['[ecx+24h],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
push ['1']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z']
push ['1']
lea ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$?0_N@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@I_NW4ArgType@012@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??$?0_N@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@I_NW4ArgType@012@@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '28h']
jmp ['??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
endp
__ehhandler$??$?0_N@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@I_NW4ArgType@012@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$?0_N@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@I_NW4ArgType@012@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?4VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAEAAV0@$$QAU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?take@?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAEPAVDataSourceSurface@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?assign_assuming_AddRef@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@AAEXPAVDataSourceSurface@gfx@mozilla@@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?4VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAEAAV0@$$QAU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?take@?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAEPAVPathRecording@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?assign_assuming_AddRef@?$RefPtr@VPathRecording@gfx@mozilla@@@@AAEXPAVPathRecording@gfx@mozilla@@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '78h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_88]']
mov ['ecx,', '1Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['?length@?$char_traits@D@std@@SAIPBD@Z']
add ['esp,', '4']
xor ['ecx,', 'ecx']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[eax+4]']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?width@ios_base@std@@QBE_JXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_50],', 'eax']
mov ['[ebp+var_4C],', 'edx']
cmp ['[ebp+var_4C],', '0']
jl ['short', 'loc_550D']
jg ['short', 'loc_54B3']
cmp ['[ebp+var_50],', '0']
jbe ['short', 'loc_550D']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[edx+4]']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?width@ios_base@std@@QBE_JXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_58],', 'eax']
mov ['[ebp+var_54],', 'edx']
mov ['eax,', '[ebp+var_54]']
cmp ['eax,', '[ebp+var_18]']
jl ['short', 'loc_550D']
jg ['short', 'loc_54E5']
mov ['ecx,', '[ebp+var_58]']
cmp ['ecx,', '[ebp+var_1C]']
jbe ['short', 'loc_550D']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[eax+4]']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?width@ios_base@std@@QBE_JXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
sub ['eax,', '[ebp+var_1C]']
sbb ['edx,', '[ebp+var_18]']
mov ['dword', 'ptr', '[ebp+var_60],', 'eax']
mov ['dword', 'ptr', '[ebp+var_60+4],', 'edx']
jmp ['short', 'loc_5516']
xorpd ['xmm0,', 'xmm0']
movlpd ['[ebp+var_60],', 'xmm0']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_60]']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+var_60+4]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_30]']
call ['??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_30]']
call ['??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_5552']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '4']
mov ['[ebp+var_14],', 'edx']
jmp ['loc_57C0']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?flags@ios_base@std@@QBEHXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_64],', 'eax']
mov ['eax,', '[ebp+var_64]']
and ['eax,', '1C0h']
cmp ['eax,', '40h']
jz ['loc_563D']
jmp ['short', 'loc_559A']
mov ['ecx,', '[ebp+var_24]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+var_20]']
sbb ['edx,', '0']
mov ['[ebp+var_24],', 'ecx']
mov ['[ebp+var_20],', 'edx']
cmp ['[ebp+var_20],', '0']
jl ['loc_563D']
jg ['short', 'loc_55B0']
cmp ['[ebp+var_24],', '0']
jbe ['loc_563D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_65],', 'al']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_6C],', 'eax']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+var_65]']
push ['eax']
mov ['ecx,', '[ebp+var_6C]']
call ['dword', 'ptr', 'ds:__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_70],', 'eax']
mov ['ecx,', '[ebp+var_70]']
mov ['[ebp+var_38],', 'ecx']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_3C],', 'eax']
lea ['edx,', '[ebp+var_38]']
push ['edx']
lea ['eax,', '[ebp+var_3C]']
push ['eax']
call ['?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z']
add ['esp,', '8']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_5638']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '4']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_563D']
jmp ['loc_5588']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_569F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_74],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+var_74]']
call ['dword', 'ptr', 'ds:__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_7C],', 'eax']
mov ['[ebp+var_78],', 'edx']
mov ['eax,', '[ebp+var_7C]']
cmp ['eax,', '[ebp+var_1C]']
jnz ['short', 'loc_5696']
mov ['ecx,', '[ebp+var_78]']
cmp ['ecx,', '[ebp+var_18]']
jz ['short', 'loc_569F']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '4']
mov ['[ebp+var_14],', 'edx']
cmp ['[ebp+var_14],', '0']
jnz ['loc_5768']
jmp ['short', 'loc_56BD']
mov ['eax,', '[ebp+var_24]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+var_20]']
sbb ['ecx,', '0']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'ecx']
cmp ['[ebp+var_20],', '0']
jl ['loc_5768']
jg ['short', 'loc_56D3']
cmp ['[ebp+var_24],', '0']
jbe ['loc_5768']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[eax+4]']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_7D],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[edx+4]']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_84],', 'eax']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+var_7D]']
push ['eax']
mov ['ecx,', '[ebp+var_84]']
call ['dword', 'ptr', 'ds:__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_88],', 'eax']
mov ['ecx,', '[ebp+var_88]']
mov ['[ebp+var_40],', 'ecx']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_44],', 'eax']
lea ['edx,', '[ebp+var_40]']
push ['edx']
lea ['eax,', '[ebp+var_44]']
push ['eax']
call ['?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z']
add ['esp,', '8']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_5763']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '4']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_5768']
jmp ['loc_56AB']
mov ['esi,', 'esp']
push ['0']
push ['0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ecx+4]']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?width@ios_base@std@@QAE_J_J@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_57B0']
endp
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0 proc near
mov ['esi,', 'esp']
push ['1']
push ['4']
mov ['eax,', '[ebp+8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+8]']
add ['edx,', '[ecx+4]']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '$LN23_0']
retn
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_57C0']
endp
$LN23_0		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0']
mov ['esi,', 'esp']
push ['0']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[edx+4]']
call ['dword', 'ptr', 'ds:__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_48],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_30]']
call ['??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_48]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN32']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '88h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN31']
dd ['offset', '$LN29']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2 proc near
lea ['ecx,', '[ebp-30h]']
jmp ['??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ']
endp
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$Forward@AAPAE@mozilla@@YAAAPAEAAPAE@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$Forward@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@@mozilla@@YAAAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAV1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$Forward@AAW4FillRule@gfx@mozilla@@@mozilla@@YAAAW4FillRule@gfx@0@AAW4120@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$Forward@AAW4SurfaceFormat@gfx@mozilla@@@mozilla@@YAAAW4SurfaceFormat@gfx@0@AAW4120@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$Forward@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@mozilla@@YAABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@0@ABU120@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$Forward@QBVDrawTargetRecording@gfx@mozilla@@@mozilla@@YA$$QBQBVDrawTargetRecording@gfx@0@ABQBV120@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$Forward@V?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@YA$$QAV?$DefaultDelete@$$BY0A@E@0@AAV10@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$MakeAndAddRef@VDrawTargetRecording@gfx@mozilla@@QBV123@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@AAW4SurfaceFormat@23@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@$$QBQBVDrawTargetRecording@gfx@0@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@30@AAW4SurfaceFormat@30@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$MakeAndAddRef@VDrawTargetRecording@gfx@mozilla@@QBV123@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@AAW4SurfaceFormat@23@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@$$QBQBVDrawTargetRecording@gfx@0@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@30@AAW4SurfaceFormat@30@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_24],', '0']
push ['44h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_4],', '1']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_593B']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??$Forward@AAW4SurfaceFormat@gfx@mozilla@@@mozilla@@YAAAW4SurfaceFormat@gfx@0@AAW4120@@Z']
add ['esp,', '4']
mov ['cl,', '[eax]']
movzx ['edx,', 'cl']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$Forward@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@mozilla@@YAABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@0@ABU120@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$Forward@QBVDrawTargetRecording@gfx@mozilla@@@mozilla@@YA$$QBQBVDrawTargetRecording@gfx@0@ABQBV120@@Z']
add ['esp,', '4']
mov ['edx,', '[eax]']
push ['edx']
mov ['ecx,', '[ebp+var_20]']
call ['??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z']
mov ['[ebp+var_28],', 'eax']
jmp ['short', 'loc_5942']
mov ['[ebp+var_28],', '0']
mov ['eax,', '[ebp+var_28]']
mov ['[ebp+var_1C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
lea ['ecx,', '[ebp+var_14]']
call ['??0?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@QAE@PAVDrawTargetRecording@gfx@mozilla@@@Z']
mov ['[ebp+var_4],', '2']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
lea ['ecx,', '[ebp+var_14]']
call ['?forget@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@XZ']
mov ['eax,', '[ebp+var_24]']
or ['eax,', '1']
mov ['[ebp+var_24],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_14]']
call ['??1?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12_18']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN11_7']
dd ['offset', '$LN9_11']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$MakeAndAddRef@VDrawTargetRecording@gfx@mozilla@@QBV123@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@AAW4SurfaceFormat@23@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@$$QBQBVDrawTargetRecording@gfx@0@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@30@AAW4SurfaceFormat@30@@Z$0 proc near
mov ['eax,', '[ebp-20h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$??$MakeAndAddRef@VDrawTargetRecording@gfx@mozilla@@QBV123@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@AAW4SurfaceFormat@23@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@$$QBQBVDrawTargetRecording@gfx@0@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@30@AAW4SurfaceFormat@30@@Z$1 proc near
lea ['ecx,', '[ebp-14h]']
jmp ['??1?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??$MakeAndAddRef@VDrawTargetRecording@gfx@mozilla@@QBV123@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@AAW4SurfaceFormat@23@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@$$QBQBVDrawTargetRecording@gfx@0@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@30@AAW4SurfaceFormat@30@@Z$2 proc near
mov ['eax,', '[ebp-24h]']
and ['eax,', '1']
jz ['$LN8_12']
and ['dword', 'ptr', '[ebp-24h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@QAE@XZ']
retn
endp
__ehhandler$??$MakeAndAddRef@VDrawTargetRecording@gfx@mozilla@@QBV123@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@AAW4SurfaceFormat@23@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@$$QBQBVDrawTargetRecording@gfx@0@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@30@AAW4SurfaceFormat@30@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$MakeAndAddRef@VDrawTargetRecording@gfx@mozilla@@QBV123@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@AAW4SurfaceFormat@23@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@$$QBQBVDrawTargetRecording@gfx@0@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@30@AAW4SurfaceFormat@30@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$MakeAndAddRef@VPathBuilderRecording@gfx@mozilla@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@gfx@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$MakeAndAddRef@VPathBuilderRecording@gfx@mozilla@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@gfx@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_24],', '0']
push ['20h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_4],', '1']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_5AA3']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$Forward@AAW4FillRule@gfx@mozilla@@@mozilla@@YAAAW4FillRule@gfx@0@AAW4120@@Z']
add ['esp,', '4']
mov ['cl,', '[eax]']
movzx ['edx,', 'cl']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$Forward@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@@mozilla@@YAAAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAV1@@Z']
add ['esp,', '4']
mov ['ecx,', 'eax']
call ['??B?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
call ['??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z']
mov ['[ebp+var_28],', 'eax']
jmp ['short', 'loc_5AAA']
mov ['[ebp+var_28],', '0']
mov ['ecx,', '[ebp+var_28]']
mov ['[ebp+var_1C],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
lea ['ecx,', '[ebp+var_14]']
call ['??0?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@PAVPathBuilderRecording@gfx@mozilla@@@Z']
mov ['[ebp+var_4],', '2']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_14]']
call ['?forget@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@XZ']
mov ['ecx,', '[ebp+var_24]']
or ['ecx,', '1']
mov ['[ebp+var_24],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_14]']
call ['??1?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12_19']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN11_8']
dd ['offset', '$LN9_12']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$MakeAndAddRef@VPathBuilderRecording@gfx@mozilla@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@gfx@0@@Z$0 proc	near
mov ['eax,', '[ebp-20h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$??$MakeAndAddRef@VPathBuilderRecording@gfx@mozilla@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@gfx@0@@Z$1 proc	near
lea ['ecx,', '[ebp-14h]']
jmp ['??1?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??$MakeAndAddRef@VPathBuilderRecording@gfx@mozilla@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@gfx@0@@Z$2 proc	near
mov ['eax,', '[ebp-24h]']
and ['eax,', '1']
jz ['$LN8_13']
and ['dword', 'ptr', '[ebp-24h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ']
retn
endp
__ehhandler$??$MakeAndAddRef@VPathBuilderRecording@gfx@mozilla@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@gfx@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$MakeAndAddRef@VPathBuilderRecording@gfx@mozilla@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@gfx@0@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@D@std@@YAPADIPAD@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_5B93']
jmp ['short', 'loc_5BBD']
cmp ['[ebp+arg_0],', '0FFFFFFFFh']
ja ['short', 'loc_5BAE']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_5BBD']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@E@std@@YAPAEIPAE@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_5BEB']
jmp ['short', 'loc_5C15']
cmp ['[ebp+arg_0],', '0FFFFFFFFh']
ja ['short', 'loc_5C06']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_5C15']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@IPAPAV123@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_5C43']
jmp ['short', 'loc_5C73']
cmp ['[ebp+arg_0],', '3FFFFFFFh']
ja ['short', 'loc_5C64']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '2']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_5C73']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@U?$_List_node@PBXPAX@std@@@std@@YAPAU?$_List_node@PBXPAX@0@IPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_5CA3']
jmp ['short', 'loc_5CD1']
cmp ['[ebp+arg_0],', '15555555h']
ja ['short', 'loc_5CC2']
imul ['eax,', '[ebp+arg_0],', '0Ch']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_5CD1']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@U?$_List_node@_KPAX@std@@@std@@YAPAU?$_List_node@_KPAX@0@IPAU10@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_5CFF']
jmp ['short', 'loc_5D2F']
cmp ['[ebp+arg_0],', '0FFFFFFFh']
ja ['short', 'loc_5D20']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '4']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_5D2F']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_5D5F']
jmp ['short', 'loc_5D8F']
cmp ['[ebp+arg_0],', '1FFFFFFFh']
ja ['short', 'loc_5D80']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '3']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_5D8F']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPAV10@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_5DBF']
jmp ['short', 'loc_5DEF']
cmp ['[ebp+arg_0],', '3FFFFFFFh']
ja ['short', 'loc_5DE0']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '2']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_5DEF']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_5E1F']
jmp ['short', 'loc_5E4F']
cmp ['[ebp+arg_0],', '3FFFFFFFh']
ja ['short', 'loc_5E40']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '2']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_5E4F']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Buynode@AB_K@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@1@PAU21@0AB_K@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Buynode@AB_K@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@1@PAU21@0AB_K@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '18h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['??$forward@AB_K@std@@YAAB_KAB_K@Z']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_18]']
push ['eax']
call ['?_Myval@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAA_KPAU?$_List_node@_KPAX@2@@Z']
add ['esp,', '4']
mov ['[ebp+var_24],', 'eax']
lea ['ecx,', '[ebp+var_1C+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['[ebp+var_28],', 'eax']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
push ['eax']
call ['??$addressof@_K@std@@YAPA_KAA_K@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_28]']
call ['??$construct@_KAB_K@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPA_KAB_K@Z']
jmp ['short', 'loc_5F34']
endp
__catch$??$_Buynode@AB_K@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@1@PAU21@0AB_K@Z$0 proc near
push ['1']
mov ['ecx,', '[ebp-18h]']
push ['ecx']
lea ['edx,', '[ebp-1Ah]']
push ['edx']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@I@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN7_13']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_5F44']
endp
$LN7_13		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$??$_Buynode@AB_K@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@1@PAU21@0AB_K@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-2Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Buynode@AB_K@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@1@PAU21@0AB_K@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Buynode@PBX@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@1@PAU21@0$$QAPBX@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Buynode@PBX@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@1@PAU21@0$$QAPBX@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '18h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['??$forward@PBX@std@@YA$$QAPBXAAPBX@Z']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_18]']
push ['eax']
call ['?_Myval@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPBXPAU?$_List_node@PBXPAX@2@@Z']
add ['esp,', '4']
mov ['[ebp+var_24],', 'eax']
lea ['ecx,', '[ebp+var_1C+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['[ebp+var_28],', 'eax']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
push ['eax']
call ['??$addressof@PBX@std@@YAPAPBXAAPBX@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_28]']
call ['??$construct@PBXPBX@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPBX$$QAPBX@Z']
jmp ['short', 'loc_6054']
endp
__catch$??$_Buynode@PBX@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@1@PAU21@0$$QAPBX@Z$0 proc near
push ['1']
mov ['ecx,', '[ebp-18h]']
push ['ecx']
lea ['edx,', '[ebp-1Ah]']
push ['edx']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN7_12']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_6064']
endp
$LN7_12		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$??$_Buynode@PBX@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@1@PAU21@0$$QAPBX@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-2Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Buynode@PBX@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@1@PAU21@0$$QAPBX@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Buynode_if_nil@ABQBX@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABQBXV21@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Buynode_if_nil@AB_K@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@AB_KU_Nil@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@AB_K@std@@YAAB_KAB_K@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?push_front@?$list@_KV?$allocator@_K@std@@@std@@QAEXAB_K@Z']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_begin@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Buynode_if_nil@AB_K@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@AB_KV21@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Buynode_if_nil@PBX@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAPBXU_Nil@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@PBX@std@@YA$$QAPBXAAPBX@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?push_front@?$list@PBXV?$allocator@PBX@std@@@std@@QAEX$$QAPBX@Z']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_61DD']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '4']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '4']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
jmp ['short', 'loc_61B7']
mov ['eax,', '[ebp+arg_8]']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_6255']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '4']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '4']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
jmp ['short', 'loc_622F']
mov ['eax,', '[ebp+arg_8]']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_6285']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_pointer@E@std@@YAXPAEPB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_62B9']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_pointer@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_62ED']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_6321']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_6355']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range2@PAE@std@@YAXPAE0PB_WIUrandom_access_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_63BB']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Debug_pointer@E@std@@YAXPAEPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Debug_pointer@E@std@@YAXPAEPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_63BB']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range2@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_6423']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Debug_pointer@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Debug_pointer@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_6423']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range2@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_648B']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_648B']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range2@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_64F3']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_64F3']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '1']
lea ['eax,', '[ebp+arg_C]']
push ['eax']
lea ['ecx,', '[ebp+arg_0]']
call ['??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z']
mov ['byte', 'ptr', '[ebp+var_10+3],', 'al']
mov ['cl,', 'byte', 'ptr', '[ebp+var_10+3]']
mov ['byte', 'ptr', '[ebp+var_10+3],', 'cl']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z$0	proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z$1	proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range@PAE@std@@YAXPAE0PB_WI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_4+3]']
push ['ecx']
call ['??$_Iter_cat@PAE@std@@YA?AUrandom_access_iterator_tag@0@ABQAE@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range2@PAE@std@@YAXPAE0PB_WIUrandom_access_iterator_tag@0@@Z']
add ['esp,', '14h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0PB_WI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_4+3]']
push ['ecx']
call ['??$_Iter_cat@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range2@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0PB_WIUrandom_access_iterator_tag@0@@Z']
add ['esp,', '14h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_4+3]']
push ['ecx']
call ['??$_Iter_cat@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range2@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z']
add ['esp,', '14h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_4+3]']
push ['ecx']
call ['??$_Iter_cat@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range2@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z']
add ['esp,', '14h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '1']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_10+3]']
push ['ecx']
call ['??$_Iter_cat@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@@Z']
add ['esp,', '8']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_10+2]']
push ['edx']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_18]']
push ['ecx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
lea ['edx,', '[ebp+arg_C]']
push ['edx']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_20],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_18],', 'esp']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_24],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z']
add ['esp,', '24h']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z$0 proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z$1 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z$2 proc near
mov ['ecx,', '[ebp-14h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
jmp ['short', 'loc_6826']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_683C']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+arg_8]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
jmp ['short', 'loc_681D']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
jmp ['short', 'loc_689E']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_68B4']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+arg_8]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
jmp ['short', 'loc_6895']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@M@std@@@std@@@std@@YAXPAM0AAU?$_Wrap_alloc@V?$allocator@M@std@@@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@MM@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAM0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@M@std@@@std@@@std@@YAXPAM0AAU?$_Wrap_alloc@V?$allocator@M@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@M@std@@@std@@@std@@YAXPAM0AAU?$_Wrap_alloc@V?$allocator@M@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAXPAUPathOp@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@UPathOp@gfx@mozilla@@U123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUPathOp@gfx@mozilla@@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAXPAUPathOp@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAXPAUPathOp@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
jmp ['short', 'loc_6A06']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1Ch']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_6A1C']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+arg_8]']
call ['??$destroy@UPathOp@gfx@mozilla@@@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@@Z']
jmp ['short', 'loc_69FD']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_6A5B']
lea ['ecx,', '[ebp+arg_0]']
call ['??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAEAAV01@XZ']
lea ['eax,', '[ebp+arg_C]']
push ['eax']
lea ['ecx,', '[ebp+arg_0]']
call ['??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_6A7D']
mov ['edx,', '[ebp+arg_18]']
mov ['eax,', '[edx]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_18]']
mov ['[ecx],', 'eax']
jmp ['short', 'loc_6A53']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z$0 proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z$1 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '1']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_10+3]']
push ['ecx']
call ['??$_Iter_cat@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
mov ['ecx,', '[ebp+arg_18]']
push ['ecx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
lea ['edx,', '[ebp+arg_C]']
push ['edx']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_20],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_18],', 'esp']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_24],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z']
add ['esp,', '20h']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z$0 proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z$1 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z$2 proc near
mov ['ecx,', '[ebp-14h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
jmp ['short', 'loc_6BF2']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_6C06']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
jmp ['short', 'loc_6BE9']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
jmp ['short', 'loc_6C16']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_6C2A']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
jmp ['short', 'loc_6C0D']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@_Alloc_max_size@std@@SAIHABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
call ['?max_size@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QBEIXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@ABV32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@V32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@_Alloc_max_size@std@@SAIHABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
call ['?max_size@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QBEIXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@ABV32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@V32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '0A0h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_B0]']
mov ['ecx,', '28h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_68],', '0']
lea ['ecx,', '[ebp+var_20]']
call ['??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z']
add ['esp,', '4']
mov ['[ebp+var_6C],', 'eax']
mov ['ecx,', '[ebp+var_6C]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Hashval@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IBEIABQBX@Z']
mov ['[ebp+var_70],', 'eax']
mov ['edx,', '[ebp+var_70]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
lea ['ecx,', '[ebp+var_40]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_End@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[ebp+var_74],', 'eax']
mov ['edx,', '[ebp+var_74]']
mov ['eax,', '[edx]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
lea ['edx,', '[ebp+var_44]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[ebp+var_78],', 'eax']
mov ['eax,', '[ebp+var_78]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
mov ['[ebp+var_79],', 'al']
movzx ['ecx,', '[ebp+var_79]']
test ['ecx,', 'ecx']
jz ['loc_6F30']
lea ['ecx,', '[ebp+var_20]']
call ['??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
mov ['[ebp+var_80],', 'eax']
mov ['ecx,', '[ebp+var_80]']
call ['??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ']
mov ['[ebp+var_84],', 'eax']
mov ['edx,', '[ebp+var_84]']
push ['edx']
call ['?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z']
add ['esp,', '4']
mov ['[ebp+var_88],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z']
add ['esp,', '4']
mov ['[ebp+var_8C],', 'eax']
mov ['ecx,', '[ebp+var_88]']
push ['ecx']
mov ['edx,', '[ebp+var_8C]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z']
mov ['[ebp+var_8D],', 'al']
movzx ['eax,', '[ebp+var_8D]']
test ['eax,', 'eax']
jz ['short', 'loc_6E59']
jmp ['loc_6F2B']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_6EB9']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z']
add ['esp,', '4']
mov ['[ebp+var_94],', 'eax']
lea ['ecx,', '[ebp+var_20]']
call ['??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ']
mov ['[ebp+var_98],', 'eax']
mov ['eax,', '[ebp+var_98]']
push ['eax']
call ['?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z']
add ['esp,', '4']
mov ['[ebp+var_9C],', 'eax']
mov ['ecx,', '[ebp+var_94]']
push ['ecx']
mov ['edx,', '[ebp+var_9C]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z']
mov ['[ebp+var_9D],', 'al']
movzx ['eax,', '[ebp+var_9D]']
test ['eax,', 'eax']
jz ['short', 'loc_6EC5']
lea ['ecx,', '[ebp+var_20]']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
jmp ['short', 'loc_6F30']
jmp ['short', 'loc_6F2B']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_45],', '0']
mov ['edx,', '[ebp+var_20]']
push ['edx']
lea ['eax,', '[ebp+var_54]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_A4],', 'eax']
mov ['ecx,', '[ebp+var_A4]']
mov ['[ebp+var_A8],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['edx,', '[ebp+var_45]']
push ['edx']
mov ['eax,', '[ebp+var_A8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@$$QA_N@Z']
mov ['ecx,', '[ebp+var_68]']
or ['ecx,', '1']
mov ['[ebp+var_68],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_54]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_7023']
jmp ['loc_6DBF']
jmp ['short', 'loc_6F4D']
endp
__catch$??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z$0	proc near
mov ['edx,', '[ebp+10h]']
push ['edx']
mov ['ecx,', '[ebp-14h]']
call ['?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN19_7']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_6F5D']
endp
$LN19_7		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@ABQBX@std@@YAABQBXABQBX@Z']
add ['esp,', '4']
push ['eax']
lea ['edx,', '[ebp+var_2C]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Buynode_if_nil@ABQBX@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABQBXV21@@Z']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_38],', 'eax']
lea ['ecx,', '[ebp+var_38]']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_6FAC']
mov ['edx,', '[ebp+var_38]']
push ['edx']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Unchecked_splice@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@00@Z']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Insert_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0I@Z']
mov ['ecx,', '[ebp+var_14]']
call ['?_Check_size@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXXZ']
mov ['[ebp+var_55],', '1']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
lea ['eax,', '[ebp+var_64]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_AC],', 'eax']
mov ['ecx,', '[ebp+var_AC]']
mov ['[ebp+var_B0],', 'ecx']
mov ['[ebp+var_4],', '3']
lea ['edx,', '[ebp+var_55]']
push ['edx']
mov ['eax,', '[ebp+var_B0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@$$QA_N@Z']
mov ['ecx,', '[ebp+var_68]']
or ['ecx,', '1']
mov ['[ebp+var_68],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_64]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN25_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0B0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
dd ['offset', '$LN24_1']
dd ['offset', '$LN20_5']
dd ['0FFFFFFD4h,', '4']
dd ['offset', '$LN21_3']
dd ['0FFFFFFC8h,', '4']
dd ['offset', '$LN22_4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z$2	proc near
lea ['ecx,', '[ebp-54h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z$4	proc near
lea ['ecx,', '[ebp-64h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0B4h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Insert@AB_K@?$list@_KV?$allocator@_K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@AB_K@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@AB_K@std@@YAAB_KAB_K@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[eax]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??$_Buynode@AB_K@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@1@PAU21@0AB_K@Z']
mov ['[ebp+var_C],', 'eax']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['?_Incsize@?$list@_KV?$allocator@_K@std@@@std@@QAEXI@Z']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_C]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_C]']
mov ['[eax],', 'edx']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '0A0h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_B0]']
mov ['ecx,', '28h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_68],', '0']
lea ['ecx,', '[ebp+var_20]']
call ['??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z']
add ['esp,', '4']
mov ['[ebp+var_6C],', 'eax']
mov ['ecx,', '[ebp+var_6C]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Hashval@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IBEIAB_K@Z']
mov ['[ebp+var_70],', 'eax']
mov ['edx,', '[ebp+var_70]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
lea ['ecx,', '[ebp+var_40]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_End@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[ebp+var_74],', 'eax']
mov ['edx,', '[ebp+var_74]']
mov ['eax,', '[edx]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
lea ['edx,', '[ebp+var_44]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Begin@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[ebp+var_78],', 'eax']
mov ['eax,', '[ebp+var_78]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
mov ['[ebp+var_79],', 'al']
movzx ['ecx,', '[ebp+var_79]']
test ['ecx,', 'ecx']
jz ['loc_7371']
lea ['ecx,', '[ebp+var_20]']
call ['??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
mov ['[ebp+var_80],', 'eax']
mov ['ecx,', '[ebp+var_80]']
call ['??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEAB_KXZ']
mov ['[ebp+var_84],', 'eax']
mov ['edx,', '[ebp+var_84]']
push ['edx']
call ['?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z']
add ['esp,', '4']
mov ['[ebp+var_88],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z']
add ['esp,', '4']
mov ['[ebp+var_8C],', 'eax']
mov ['ecx,', '[ebp+var_88]']
push ['ecx']
mov ['edx,', '[ebp+var_8C]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??R?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBE_NAB_K0@Z']
mov ['[ebp+var_8D],', 'al']
movzx ['eax,', '[ebp+var_8D]']
test ['eax,', 'eax']
jz ['short', 'loc_7299']
jmp ['loc_736C']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_72F9']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z']
add ['esp,', '4']
mov ['[ebp+var_94],', 'eax']
lea ['ecx,', '[ebp+var_20]']
call ['??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEAB_KXZ']
mov ['[ebp+var_98],', 'eax']
mov ['eax,', '[ebp+var_98]']
push ['eax']
call ['?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z']
add ['esp,', '4']
mov ['[ebp+var_9C],', 'eax']
mov ['ecx,', '[ebp+var_94]']
push ['ecx']
mov ['edx,', '[ebp+var_9C]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??R?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBE_NAB_K0@Z']
mov ['[ebp+var_9D],', 'al']
movzx ['eax,', '[ebp+var_9D]']
test ['eax,', 'eax']
jz ['short', 'loc_7305']
lea ['ecx,', '[ebp+var_20]']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
jmp ['short', 'loc_7371']
jmp ['short', 'loc_736C']
movzx ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXU_Nil@2@@Z']
mov ['[ebp+var_45],', '0']
mov ['edx,', '[ebp+var_20]']
push ['edx']
lea ['eax,', '[ebp+var_54]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_A4],', 'eax']
mov ['ecx,', '[ebp+var_A4]']
mov ['[ebp+var_A8],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['edx,', '[ebp+var_45]']
push ['edx']
mov ['eax,', '[ebp+var_A8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@1@$$QA_N@Z']
mov ['ecx,', '[ebp+var_68]']
or ['ecx,', '1']
mov ['[ebp+var_68],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_54]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_7466']
jmp ['loc_71FF']
jmp ['short', 'loc_738F']
endp
__catch$??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z$0 proc near
movzx ['edx,', 'byte', 'ptr', '[ebp+10h]']
push ['edx']
mov ['ecx,', '[ebp-14h]']
call ['?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXU_Nil@2@@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN19_6']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_739F']
endp
$LN19_6		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
movzx ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@AB_K@std@@YAAB_KAB_K@Z']
add ['esp,', '4']
push ['eax']
lea ['edx,', '[ebp+var_2C]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Buynode_if_nil@AB_K@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@AB_KU_Nil@1@@Z']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_38],', 'eax']
lea ['ecx,', '[ebp+var_38]']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_73EF']
mov ['edx,', '[ebp+var_38]']
push ['edx']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Unchecked_splice@?$list@_KV?$allocator@_K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@00@Z']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Insert_bucket@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0I@Z']
mov ['ecx,', '[ebp+var_14]']
call ['?_Check_size@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXXZ']
mov ['[ebp+var_55],', '1']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
lea ['eax,', '[ebp+var_64]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_AC],', 'eax']
mov ['ecx,', '[ebp+var_AC]']
mov ['[ebp+var_B0],', 'ecx']
mov ['[ebp+var_4],', '3']
lea ['edx,', '[ebp+var_55]']
push ['edx']
mov ['eax,', '[ebp+var_B0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@1@$$QA_N@Z']
mov ['ecx,', '[ebp+var_68]']
or ['ecx,', '1']
mov ['[ebp+var_68],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_64]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN25_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0B0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
dd ['offset', '$LN24_0']
dd ['offset', '$LN20_4']
dd ['0FFFFFFD4h,', '4']
dd ['offset', '$LN21_2']
dd ['0FFFFFFC8h,', '4']
dd ['offset', '$LN22_3']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z$2 proc near
lea ['ecx,', '[ebp-54h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z$4 proc near
lea ['ecx,', '[ebp-64h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0B4h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '0A0h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_B0]']
mov ['ecx,', '28h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_68],', '0']
lea ['ecx,', '[ebp+var_20]']
call ['??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z']
add ['esp,', '4']
mov ['[ebp+var_6C],', 'eax']
mov ['ecx,', '[ebp+var_6C]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Hashval@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IBEIAB_K@Z']
mov ['[ebp+var_70],', 'eax']
mov ['edx,', '[ebp+var_70]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
lea ['ecx,', '[ebp+var_40]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_End@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[ebp+var_74],', 'eax']
mov ['edx,', '[ebp+var_74]']
mov ['eax,', '[edx]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
lea ['edx,', '[ebp+var_44]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Begin@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[ebp+var_78],', 'eax']
mov ['eax,', '[ebp+var_78]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
mov ['[ebp+var_79],', 'al']
movzx ['ecx,', '[ebp+var_79]']
test ['ecx,', 'ecx']
jz ['loc_7714']
lea ['ecx,', '[ebp+var_20]']
call ['??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
mov ['[ebp+var_80],', 'eax']
mov ['ecx,', '[ebp+var_80]']
call ['??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEAB_KXZ']
mov ['[ebp+var_84],', 'eax']
mov ['edx,', '[ebp+var_84]']
push ['edx']
call ['?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z']
add ['esp,', '4']
mov ['[ebp+var_88],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z']
add ['esp,', '4']
mov ['[ebp+var_8C],', 'eax']
mov ['ecx,', '[ebp+var_88]']
push ['ecx']
mov ['edx,', '[ebp+var_8C]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??R?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBE_NAB_K0@Z']
mov ['[ebp+var_8D],', 'al']
movzx ['eax,', '[ebp+var_8D]']
test ['eax,', 'eax']
jz ['short', 'loc_763D']
jmp ['loc_770F']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_769D']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z']
add ['esp,', '4']
mov ['[ebp+var_94],', 'eax']
lea ['ecx,', '[ebp+var_20]']
call ['??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEAB_KXZ']
mov ['[ebp+var_98],', 'eax']
mov ['eax,', '[ebp+var_98]']
push ['eax']
call ['?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z']
add ['esp,', '4']
mov ['[ebp+var_9C],', 'eax']
mov ['ecx,', '[ebp+var_94]']
push ['ecx']
mov ['edx,', '[ebp+var_9C]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??R?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBE_NAB_K0@Z']
mov ['[ebp+var_9D],', 'al']
movzx ['eax,', '[ebp+var_9D]']
test ['eax,', 'eax']
jz ['short', 'loc_76A9']
lea ['ecx,', '[ebp+var_20]']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
jmp ['short', 'loc_7714']
jmp ['short', 'loc_770F']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_45],', '0']
mov ['edx,', '[ebp+var_20]']
push ['edx']
lea ['eax,', '[ebp+var_54]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_A4],', 'eax']
mov ['ecx,', '[ebp+var_A4]']
mov ['[ebp+var_A8],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['edx,', '[ebp+var_45]']
push ['edx']
mov ['eax,', '[ebp+var_A8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@1@$$QA_N@Z']
mov ['ecx,', '[ebp+var_68]']
or ['ecx,', '1']
mov ['[ebp+var_68],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_54]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_7807']
jmp ['loc_75A3']
jmp ['short', 'loc_7731']
endp
__catch$??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z$0 proc near
mov ['edx,', '[ebp+10h]']
push ['edx']
mov ['ecx,', '[ebp-14h]']
call ['?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN19_8']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_7741']
endp
$LN19_8		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@AB_K@std@@YAAB_KAB_K@Z']
add ['esp,', '4']
push ['eax']
lea ['edx,', '[ebp+var_2C]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Buynode_if_nil@AB_K@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@AB_KV21@@Z']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_38],', 'eax']
lea ['ecx,', '[ebp+var_38]']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_7790']
mov ['edx,', '[ebp+var_38]']
push ['edx']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Unchecked_splice@?$list@_KV?$allocator@_K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@00@Z']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Insert_bucket@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0I@Z']
mov ['ecx,', '[ebp+var_14]']
call ['?_Check_size@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXXZ']
mov ['[ebp+var_55],', '1']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
lea ['eax,', '[ebp+var_64]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_AC],', 'eax']
mov ['ecx,', '[ebp+var_AC]']
mov ['[ebp+var_B0],', 'ecx']
mov ['[ebp+var_4],', '3']
lea ['edx,', '[ebp+var_55]']
push ['edx']
mov ['eax,', '[ebp+var_B0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@1@$$QA_N@Z']
mov ['ecx,', '[ebp+var_68]']
or ['ecx,', '1']
mov ['[ebp+var_68],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_64]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN25_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0B0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
dd ['offset', '$LN24_2']
dd ['offset', '$LN20_6']
dd ['0FFFFFFD4h,', '4']
dd ['offset', '$LN21_4']
dd ['0FFFFFFC8h,', '4']
dd ['offset', '$LN22_5']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z$2 proc near
lea ['ecx,', '[ebp-54h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z$4 proc near
lea ['ecx,', '[ebp-64h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0B4h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Insert@PBX@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAPBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@PBX@std@@YA$$QAPBXAAPBX@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[eax]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??$_Buynode@PBX@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@1@PAU21@0$$QAPBX@Z']
mov ['[ebp+var_C],', 'eax']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['?_Incsize@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXI@Z']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_C]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_C]']
mov ['[eax],', 'edx']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '0A0h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_B0]']
mov ['ecx,', '28h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_68],', '0']
lea ['ecx,', '[ebp+var_20]']
call ['??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z']
add ['esp,', '4']
mov ['[ebp+var_6C],', 'eax']
mov ['ecx,', '[ebp+var_6C]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Hashval@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IBEIABQBX@Z']
mov ['[ebp+var_70],', 'eax']
mov ['edx,', '[ebp+var_70]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
lea ['ecx,', '[ebp+var_40]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_End@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[ebp+var_74],', 'eax']
mov ['edx,', '[ebp+var_74]']
mov ['eax,', '[edx]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
lea ['edx,', '[ebp+var_44]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[ebp+var_78],', 'eax']
mov ['eax,', '[ebp+var_78]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
mov ['[ebp+var_79],', 'al']
movzx ['ecx,', '[ebp+var_79]']
test ['ecx,', 'ecx']
jz ['loc_7B55']
lea ['ecx,', '[ebp+var_20]']
call ['??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
mov ['[ebp+var_80],', 'eax']
mov ['ecx,', '[ebp+var_80]']
call ['??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ']
mov ['[ebp+var_84],', 'eax']
mov ['edx,', '[ebp+var_84]']
push ['edx']
call ['?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z']
add ['esp,', '4']
mov ['[ebp+var_88],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z']
add ['esp,', '4']
mov ['[ebp+var_8C],', 'eax']
mov ['ecx,', '[ebp+var_88]']
push ['ecx']
mov ['edx,', '[ebp+var_8C]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z']
mov ['[ebp+var_8D],', 'al']
movzx ['eax,', '[ebp+var_8D]']
test ['eax,', 'eax']
jz ['short', 'loc_7A7D']
jmp ['loc_7B50']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_7ADD']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z']
add ['esp,', '4']
mov ['[ebp+var_94],', 'eax']
lea ['ecx,', '[ebp+var_20]']
call ['??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ']
mov ['[ebp+var_98],', 'eax']
mov ['eax,', '[ebp+var_98]']
push ['eax']
call ['?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z']
add ['esp,', '4']
mov ['[ebp+var_9C],', 'eax']
mov ['ecx,', '[ebp+var_94]']
push ['ecx']
mov ['edx,', '[ebp+var_9C]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z']
mov ['[ebp+var_9D],', 'al']
movzx ['eax,', '[ebp+var_9D]']
test ['eax,', 'eax']
jz ['short', 'loc_7AE9']
lea ['ecx,', '[ebp+var_20]']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
jmp ['short', 'loc_7B55']
jmp ['short', 'loc_7B50']
movzx ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXU_Nil@2@@Z']
mov ['[ebp+var_45],', '0']
mov ['edx,', '[ebp+var_20]']
push ['edx']
lea ['eax,', '[ebp+var_54]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_A4],', 'eax']
mov ['ecx,', '[ebp+var_A4]']
mov ['[ebp+var_A8],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['edx,', '[ebp+var_45]']
push ['edx']
mov ['eax,', '[ebp+var_A8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@$$QA_N@Z']
mov ['ecx,', '[ebp+var_68]']
or ['ecx,', '1']
mov ['[ebp+var_68],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_54]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_7C4A']
jmp ['loc_79E3']
jmp ['short', 'loc_7B73']
endp
__catch$??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z$0 proc near
movzx ['edx,', 'byte', 'ptr', '[ebp+10h]']
push ['edx']
mov ['ecx,', '[ebp-14h]']
call ['?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXU_Nil@2@@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN19_5']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_7B83']
endp
$LN19_5		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
movzx ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@PBX@std@@YA$$QAPBXAAPBX@Z']
add ['esp,', '4']
push ['eax']
lea ['edx,', '[ebp+var_2C]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Buynode_if_nil@PBX@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAPBXU_Nil@1@@Z']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_38],', 'eax']
lea ['ecx,', '[ebp+var_38]']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_7BD3']
mov ['edx,', '[ebp+var_38]']
push ['edx']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Unchecked_splice@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@00@Z']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Insert_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0I@Z']
mov ['ecx,', '[ebp+var_14]']
call ['?_Check_size@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXXZ']
mov ['[ebp+var_55],', '1']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
lea ['eax,', '[ebp+var_64]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_AC],', 'eax']
mov ['ecx,', '[ebp+var_AC]']
mov ['[ebp+var_B0],', 'ecx']
mov ['[ebp+var_4],', '3']
lea ['edx,', '[ebp+var_55]']
push ['edx']
mov ['eax,', '[ebp+var_B0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@$$QA_N@Z']
mov ['ecx,', '[ebp+var_68]']
or ['ecx,', '1']
mov ['[ebp+var_68],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_64]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN25_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0B0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
dd ['offset', '$LN24']
dd ['offset', '$LN20_3']
dd ['0FFFFFFD4h,', '4']
dd ['offset', '$LN21_1']
dd ['0FFFFFFC8h,', '4']
dd ['offset', '$LN22_2']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z$2 proc near
lea ['ecx,', '[ebp-54h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z$4 proc near
lea ['ecx,', '[ebp-64h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0B4h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Iter_cat@PAE@std@@YA?AUrandom_access_iterator_tag@0@ABQAE@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_8+3]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_41']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_31']
dd ['offset', '$LN3_32']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Iter_cat@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_8+3]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_42']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN4_32']
dd ['offset', '$LN3_33']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Iter_cat@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_8+3]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_39']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_29']
dd ['offset', '$LN3_30']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Iter_cat@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_8+3]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_40']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN4_30']
dd ['offset', '$LN3_31']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Iter_cat@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_8+3]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_32']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_22']
dd ['offset', '$LN3_23']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_31']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_21']
dd ['offset', '$LN3_22']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Ptr_cat@MM@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAM0@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_33']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_23']
dd ['offset', '$LN3_24']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Ptr_cat@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_35']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_25']
dd ['offset', '$LN3_26']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Ptr_cat@UPathOp@gfx@mozilla@@U123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUPathOp@gfx@mozilla@@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_34']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_24']
dd ['offset', '$LN3_25']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_36']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_26']
dd ['offset', '$LN3_27']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_37']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_27']
dd ['offset', '$LN3_28']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Rechecked@PAEPAE@std@@YAAAPAEAAPAEPAE@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Rechecked@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@@std@@YAAAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAPAV123@PAPAV123@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Rechecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAPAV10@PAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Rechecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAPAV10@PAV10@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninitialized_move@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z']
add ['esp,', '10h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_27']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
dd ['offset', '$LN4_18']
dd ['offset', '$LN3_19']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Umove@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV234@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninitialized_move@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@U?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@00AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@@Z']
add ['esp,', '10h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_28']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['10h']
dd ['offset', '$LN4_19']
dd ['offset', '$LN3_20']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninitialized_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z']
add ['esp,', '10h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_29']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
dd ['offset', '$LN4_20']
dd ['offset', '$LN3_21']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninitialized_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z']
add ['esp,', '10h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_38']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
dd ['offset', '$LN4_28']
dd ['offset', '$LN3_29']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Unchecked@PAE@std@@YAPAEPAE@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Unchecked@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_def_fill_n@EIE@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['?_Fill_n@std@@YAPAEPAEIE@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['ecx']
push ['ebx']
push ['esi']
push ['edi']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_8346']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
mov ['[ebp+arg_0],', 'edx']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_835E']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+arg_C]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z']
jmp ['short', 'loc_8334']
jmp ['short', 'loc_8390']
endp
__catch$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
jmp ['short', 'loc_836B']
mov ['edx,', '[ebp-14h]']
add ['edx,', '4']
mov ['[ebp-14h],', 'edx']
mov ['eax,', '[ebp-14h]']
cmp ['eax,', '[ebp+8]']
jz ['short', 'loc_8381']
mov ['ecx,', '[ebp-14h]']
push ['ecx']
mov ['ecx,', '[ebp+14h]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
jmp ['short', 'loc_8362']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN13_14']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_83A0']
endp
$LN13_14	proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['ecx']
push ['ebx']
push ['esi']
push ['edi']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_842A']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
mov ['[ebp+arg_0],', 'edx']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_8442']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+arg_C]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z']
jmp ['short', 'loc_8418']
jmp ['short', 'loc_8474']
endp
__catch$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
jmp ['short', 'loc_844F']
mov ['edx,', '[ebp-14h]']
add ['edx,', '4']
mov ['[ebp-14h],', 'edx']
mov ['eax,', '[ebp-14h]']
cmp ['eax,', '[ebp+8]']
jz ['short', 'loc_8465']
mov ['ecx,', '[ebp-14h]']
push ['ecx']
mov ['ecx,', '[ebp+14h]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
jmp ['short', 'loc_8446']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN13_15']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_8484']
endp
$LN13_15	proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_move@EEE@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+Size],', '0CCCCCCCCh']
push ['1D6h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Debug_range@PAE@std@@YAXPAE0PB_WI@Z']
add ['esp,', '10h']
push ['1D7h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['??$_Debug_pointer@E@std@@YAXPAEPB_WI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+Src]']
mov ['[ebp+Size],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '[ebp+Size]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_move@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Val_type@PAE@std@@YAPAEPAE@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Uninit_move@EEE@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z']
add ['esp,', '18h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_move@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@U?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@00AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Ptr_cat@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Val_type@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Uninit_move@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@PAV123@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@00AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z']
add ['esp,', '18h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '18h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['ecx']
push ['ebx']
push ['esi']
push ['edi']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
push ['1B6h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z']
add ['esp,', '10h']
push ['1B7h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_86BE']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '4']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_86D8']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['ecx,', '[ebp+arg_C]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
jmp ['short', 'loc_86AC']
jmp ['short', 'loc_870A']
endp
__catch$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
jmp ['short', 'loc_86E5']
mov ['eax,', '[ebp-14h]']
add ['eax,', '4']
mov ['[ebp-14h],', 'eax']
mov ['ecx,', '[ebp-14h]']
cmp ['ecx,', '[ebp+10h]']
jz ['short', 'loc_86FB']
mov ['edx,', '[ebp-14h]']
push ['edx']
mov ['ecx,', '[ebp+14h]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
jmp ['short', 'loc_86DC']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN13_16']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_871A']
endp
$LN13_16	proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '18h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['ecx']
push ['ebx']
push ['esi']
push ['edi']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
push ['1B6h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z']
add ['esp,', '10h']
push ['1B7h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_8832']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '4']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_884C']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['ecx,', '[ebp+arg_C]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
jmp ['short', 'loc_8820']
jmp ['short', 'loc_887E']
endp
__catch$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
jmp ['short', 'loc_8859']
mov ['eax,', '[ebp-14h]']
add ['eax,', '4']
mov ['[ebp-14h],', 'eax']
mov ['ecx,', '[ebp-14h]']
cmp ['ecx,', '[ebp+10h]']
jz ['short', 'loc_886F']
mov ['edx,', '[ebp-14h]']
push ['edx']
mov ['ecx,', '[ebp+14h]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
jmp ['short', 'loc_8850']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN13_17']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_888E']
endp
$LN13_17	proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_move@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@PAV123@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@00AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
push ['1D6h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Debug_range@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0PB_WI@Z']
add ['esp,', '10h']
push ['1D7h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['??$_Debug_pointer@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PB_WI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+Src]']
sar ['eax,', '2']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '2']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
lea ['eax,', '[eax+ecx*4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninitialized_default_fill_n@PAEIU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['??$_Val_type@PAE@std@@YAPAEPAE@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['??$_Uninit_def_fill_n@EIE@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z']
add ['esp,', '14h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninitialized_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '18h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninitialized_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '18h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninitialized_move@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Unchecked@PAE@std@@YAPAEPAE@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$_Unchecked@PAE@std@@YAPAEPAE@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Unchecked@PAE@std@@YAPAEPAE@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Uninit_move@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z']
add ['esp,', '10h']
push ['eax']
lea ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Rechecked@PAEPAE@std@@YAAAPAEAAPAEPAE@Z']
add ['esp,', '8']
mov ['eax,', '[eax]']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninitialized_move@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@U?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@00AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Unchecked@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$_Unchecked@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Unchecked@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Uninit_move@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@U?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@00AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@@Z']
add ['esp,', '10h']
push ['eax']
lea ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Rechecked@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@@std@@YAAAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAPAV123@PAPAV123@@Z']
add ['esp,', '8']
mov ['eax,', '[eax]']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninitialized_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z']
add ['esp,', '10h']
push ['eax']
lea ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Rechecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAPAV10@PAV10@@Z']
add ['esp,', '8']
mov ['eax,', '[eax]']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninitialized_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z']
add ['esp,', '10h']
push ['eax']
lea ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Rechecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAPAV10@PAV10@@Z']
add ['esp,', '8']
mov ['eax,', '[eax]']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Val_type@PAE@std@@YAPAEPAE@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Val_type@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@$$CBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@$$CBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@D@std@@YAPADAAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@PAU?$_List_node@PBXPAX@std@@@std@@YAPAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@PAU?$_List_node@_KPAX@std@@@std@@YAPAPAU?$_List_node@_KPAX@0@AAPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAV123@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@PBX@std@@YAPAPBXAAPBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@_K@std@@YAPA_KAA_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_8CAE']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_8CB5']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@AAPAU?$_List_node@PBXPAX@std@@@std@@YAAAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPAU?$_List_node@PBXPAX@1@AAPAU31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_8DE2']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@AAPAU?$_List_node@PBXPAX@std@@@std@@YAAAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_8DE9']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPAU?$_List_node@PBXPAX@1@AAPAU31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@AAPAU?$_List_node@PBXPAX@std@@@std@@YAAAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@AAPAU?$_List_node@_KPAX@std@@@std@@YAAAPAU?$_List_node@_KPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PAPAU?$_List_node@_KPAX@1@AAPAU31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_8F16']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@AAPAU?$_List_node@_KPAX@std@@@std@@YAAAPAU?$_List_node@_KPAX@0@AAPAU10@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_8F1D']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PAPAU?$_List_node@_KPAX@1@AAPAU31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@AAPAU?$_List_node@_KPAX@std@@@std@@YAAAPAU?$_List_node@_KPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV234@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YA$$QAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAV123@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$allocator_traits@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@SAXAAV?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@1@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV345@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV234@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV234@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_904A']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YA$$QAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAV123@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_9051']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV234@@Z$0	proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV234@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV234@@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$allocator_traits@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@SAXAAV?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@1@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV345@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YA$$QAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAV123@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV234@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PBXPBX@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPBX$$QAPBX@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@PBX@std@@YA$$QAPBXAAPBX@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@PBXPBX@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPBX$$QAPBX@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PBXPBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX$$QAPBX@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@PBXPBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX$$QAPBX@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_917E']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@PBX@std@@YA$$QAPBXAAPBX@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_9185']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@PBXPBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX$$QAPBX@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@PBXPBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX$$QAPBX@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@PBXPBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX$$QAPBX@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PBXPBX@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPBX$$QAPBX@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@PBX@std@@YA$$QAPBXAAPBX@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@PBXPBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX$$QAPBX@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['8']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_92B8']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
mov ['edx,', '[eax]']
mov ['eax,', '[eax+4]']
mov ['ecx,', '[ebp+var_18]']
mov ['[ecx],', 'edx']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'edx']
jmp ['short', 'loc_92BF']
mov ['[ebp+var_1C],', '0']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@ABV32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?construct@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@ABV32@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_94F2']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
mov ['edx,', '[eax]']
mov ['eax,', '[ebp+var_18]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_94F9']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z$0 proc	near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@V32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@ABV32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?construct@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@ABV32@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_975A']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
mov ['edx,', '[eax]']
mov ['eax,', '[ebp+var_18]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_9761']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z$0	proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@V32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@_KAB_K@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPA_KAB_K@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@AB_K@std@@YAAB_KAB_K@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@_KAB_K@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PA_KAB_K@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@_KAB_K@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPA_KAB_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@_KAB_K@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPA_KAB_K@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['8']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_98C0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@AB_K@std@@YAAB_KAB_K@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_18]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['eax,', '[eax+4]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_98C7']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@_KAB_K@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPA_KAB_K@Z$0	proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@_KAB_K@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPA_KAB_K@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@_KAB_K@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPA_KAB_K@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@_KAB_K@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PA_KAB_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@AB_K@std@@YAAB_KAB_K@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@_KAB_K@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPA_KAB_K@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAU?$_List_node@PBXPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@PAU?$_List_node@PBXPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPAU?$_List_node@PBXPAX@1@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAU?$_List_node@PBXPAX@std@@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAU?$_List_node@PBXPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPAU?$_List_node@PBXPAX@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@PAU?$_List_node@PBXPAX@std@@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAU?$_List_node@_KPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@PAU?$_List_node@_KPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PAPAU?$_List_node@_KPAX@1@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAU?$_List_node@_KPAX@std@@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAU?$_List_node@_KPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PAPAU?$_List_node@_KPAX@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@PAU?$_List_node@_KPAX@std@@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PBX@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@PBX@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPBX@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PBX@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@PBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@UPathOp@gfx@mozilla@@@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@UPathOp@gfx@mozilla@@@?$allocator_traits@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@SAXAAV?$allocator@UPathOp@gfx@mozilla@@@1@PAUPathOp@gfx@mozilla@@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@UPathOp@gfx@mozilla@@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@UPathOp@gfx@mozilla@@@?$allocator_traits@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@SAXAAV?$allocator@UPathOp@gfx@mozilla@@@1@PAUPathOp@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@UPathOp@gfx@mozilla@@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@_K@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPA_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@_K@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PA_K@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@_K@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPA_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@_K@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PA_K@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@_K@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPA_K@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$downcast@VPathRecording@gfx@mozilla@@@?$already_AddRefed@VPath@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_C],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@PAVPathRecording@gfx@mozilla@@@Z']
mov ['ecx,', '[ebp+var_C]']
or ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0A3Eh']
push ['offset', '??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0A3Eh']
push ['offset', '??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@AAPAU?$_List_node@PBXPAX@std@@@std@@YAAAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@AAPAU?$_List_node@_KPAX@std@@@std@@YAAAPAU?$_List_node@_KPAX@0@AAPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@ABQBX@std@@YAABQBXABQBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@AB_K@std@@YAAB_KAB_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YA$$QAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAV123@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@PBX@std@@YA$$QAPBXAAPBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YA$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@AAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@@std@@YA$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@0@AAV10@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@_N@std@@YA$$QA_NAA_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$Atomic@I$01X@mozilla@@QAE@I@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$AtomicBaseIncDec@I$01@detail@mozilla@@QAE@I@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$AtomicBase@I$01@detail@mozilla@@QAE@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?convert@?$ToStorageTypeArgument@I@detail@mozilla@@SAII@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$atomic@I@std@@QAE@I@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$AtomicBaseIncDec@I$01@detail@mozilla@@QAE@I@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$AtomicBase@I$01@detail@mozilla@@QAE@I@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@IAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$BasePoint@MU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
movss ['xmm0,', 'ds:__real@00000000']
movss ['dword', 'ptr', '[eax],', 'xmm0']
mov ['ecx,', '[ebp+var_4]']
movss ['xmm0,', 'ds:__real@00000000']
movss ['dword', 'ptr', '[ecx+4],', 'xmm0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$BaseRect@HU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@U?$IntMarginTyped@UUnknownUnits@gfx@mozilla@@@23@@gfx@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+8],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$DefaultDelete@$$BY0A@E@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$BaseRect@HU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@U?$IntMarginTyped@UUnknownUnits@gfx@mozilla@@@23@@gfx@mozilla@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['1']
push ['3']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax+0B0h],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['byte', 'ptr', '[ecx+0B8h],', '0']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
push ['2']
call ['?ShouldOutputMessage@BasicLogger@gfx@mozilla@@SA_NH@Z']
add ['esp,', '4']
movzx ['eax,', 'al']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?Init@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@AAEXH_NW4LogReason@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ']
endp
__ehhandler$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$BasePoint@MU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefCounted@VFilterNode@gfx@mozilla@@@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefCounted@VGradientStops@gfx@mozilla@@@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@IAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$Atomic@I$01X@mozilla@@QAE@I@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@PAVDataSourceSurface@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_A268']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?AddRef@?$AddRefTraits@VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@SAXPAVDataSourceSurface@gfx@mozilla@@@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@ABV0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_A2AA']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?AddRef@?$AddRefTraits@VDrawEventRecorderPrivate@gfx@mozilla@@@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@SAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@PAVDrawEventRecorderPrivate@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_A2EC']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?AddRef@?$AddRefTraits@VDrawEventRecorderPrivate@gfx@mozilla@@@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@SAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@PAVDrawTarget@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_A34C']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?AddRef@?$AddRefTraits@VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@SAXPAVDrawTarget@gfx@mozilla@@@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@QAE@PAVDrawTargetRecording@gfx@mozilla@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_A38C']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?AddRef@?$AddRefTraits@VDrawTargetRecording@gfx@mozilla@@@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@SAXPAVDrawTargetRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@PAVFilterNode@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_A3CC']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?AddRef@?$AddRefTraits@VFilterNode@gfx@mozilla@@@?$RefPtr@VFilterNode@gfx@mozilla@@@@SAXPAVFilterNode@gfx@mozilla@@@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@PAVGradientStops@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_A40C']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?AddRef@?$AddRefTraits@VGradientStops@gfx@mozilla@@@?$RefPtr@VGradientStops@gfx@mozilla@@@@SAXPAVGradientStops@gfx@mozilla@@@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@PAVPathBuilder@gfx@mozilla@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_A44C']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?AddRef@?$AddRefTraits@VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@SAXPAVPathBuilder@gfx@mozilla@@@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@PAVPathBuilderRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_A48C']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?AddRef@?$AddRefTraits@VPathBuilderRecording@gfx@mozilla@@@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@SAXPAVPathBuilderRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_A4EC']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?AddRef@?$AddRefTraits@VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@SAXPAVSourceSurface@gfx@mozilla@@@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$UniquePtr@$$BY0A@EV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QAE@PAE@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_8+3]']
call ['??0?$DefaultDelete@$$BY0A@E@mozilla@@QAE@XZ']
push ['eax']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??$?0AAPAEV?$DefaultDelete@$$BY0A@E@mozilla@@@?$Pair@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QAE@AAPAE$$QAV?$DefaultDelete@$$BY0A@E@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@ABU01@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Iterator_base12@std@@QAE@ABU01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Iterator_base12@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Iterator012@Ubidirectional_iterator_tag@std@@_KHPB_KAB_KU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Iterator_base12@std@@QAE@ABU01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Iterator012@Ubidirectional_iterator_tag@std@@_KHPB_KAB_KU_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Iterator_base12@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@EHPBEABEU_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Iterator_base12@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Iterator_base12@std@@QAE@ABU01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Iterator_base12@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Iterator_base12@std@@QAE@ABU01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Iterator_base12@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Adopt@_Iterator_base0@std@@QAEXPBX@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@ABU01@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z$0 proc	near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Adopt@_Iterator_base0@std@@QAEXPBX@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Iterator012@Ubidirectional_iterator_tag@std@@_KHPB_KAB_KU_Iterator_base12@2@@std@@QAE@ABU01@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Ubidirectional_iterator_tag@std@@_KHPB_KAB_KU_Iterator_base12@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z$0	proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Ubidirectional_iterator_tag@std@@_KHPB_KAB_KU_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??0_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+18h],', '0']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Vector_val@U?$_Simple_types@M@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_val@U?$_Simple_types@M@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z$0 proc	near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base12@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base12@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@EHPBEABEU_Iterator_base12@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base12@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@EHPBEABEU_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base12@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base12@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base12@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base12@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??0_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_val@U?$_Simple_types@M@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??0_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??0_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@D@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@E@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@M@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@M@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@U?$_List_node@_KPAX@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@UPathOp@gfx@mozilla@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@D@std@@QAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@E@std@@QAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@M@std@@QAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@U?$_List_node@_KPAX@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@UPathOp@gfx@mozilla@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@QAE@PAVDrawTargetRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$already_AddRefed@VFilterNode@gfx@mozilla@@@@QAE@PAVFilterNode@gfx@mozilla@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$already_AddRefed@VGradientStops@gfx@mozilla@@@@QAE@PAVGradientStops@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAE@PAVPathBuilderRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@PAVPathRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@P80@AEXNM@Z@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$atomic@I@std@@QAE@I@Z proc	near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??4atomic_uint@std@@QAEII@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8+3]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
lea ['ecx,', '[ebp+var_14+3]']
call ['??0?$allocator@D@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
mov ['[ebp+var_4],', '0']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
mov ['eax,', '[ebp+Str]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
lea ['ecx,', '[ebp+var_14+3]']
call ['??0?$allocator@D@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
mov ['[ebp+var_4],', '0']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
lea ['ecx,', '[ebp+var_14+3]']
call ['??0?$allocator@D@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
mov ['[ebp+var_4],', '0']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['esi']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
call ['dword', 'ptr', 'ds:__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??0?$allocator@D@std@@QAE@XZ']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z']
push ['eax']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0 proc near
mov ['esi,', 'esp']
mov ['ecx,', '[ebp-10h]']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_14],', '0']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_B91C']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+10h],', 'offset', '??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '68h']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['esi,', 'esp']
push ['0']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '18h']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['dword', 'ptr', 'ds:__imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+eax],', 'offset', '??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '68h']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
mov ['edx,', '[eax+4]']
mov ['eax,', '[ebp+var_10]']
mov ['[eax+edx-4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0	proc near
mov ['eax,', '[ebp-14h]']
and ['eax,', '1']
jz ['$LN5_6']
and ['dword', 'ptr', '[ebp-14h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '68h']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
retn
endp
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1	proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '20h']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-10h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$fpos@H@std@@QAE@_J@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+10h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_8+3]']
call ['??0?$allocator@E@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_8+3]']
call ['??0?$allocator@M@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_8+3]']
call ['??0?$allocator@UPathOp@gfx@mozilla@@@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0AdjustedPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+3Ch],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+38h],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0Color@gfx@mozilla@@QAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
movss ['xmm0,', 'ds:__real@00000000']
movss ['dword', 'ptr', '[eax],', 'xmm0']
mov ['ecx,', '[ebp+var_4]']
movss ['xmm0,', 'ds:__real@00000000']
movss ['dword', 'ptr', '[ecx+4],', 'xmm0']
mov ['edx,', '[ebp+var_4]']
movss ['xmm0,', 'ds:__real@00000000']
movss ['dword', 'ptr', '[edx+8],', 'xmm0']
mov ['eax,', '[ebp+var_4]']
movss ['xmm0,', 'ds:__real@00000000']
movss ['dword', 'ptr', '[eax+0Ch],', 'xmm0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0ColorPattern@gfx@mozilla@@QAE@ABUColor@12@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0Pattern@gfx@mozilla@@IAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7ColorPattern@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ecx],', 'eax']
mov ['eax,', '[edx+4]']
mov ['[ecx+4],', 'eax']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[edx+0Ch]']
mov ['[ecx+0Ch],', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0DrawTarget@gfx@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0DrawTarget@gfx@mozilla@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??0?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7DrawTarget@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??0UserData@gfx@mozilla@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['??0Matrix@gfx@mozilla@@QAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??0?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@QAE@XZ']
mov ['ecx,', '[ebp+var_10]']
mov ['dl,', '[ecx+38h]']
and ['dl,', '0FEh']
mov ['eax,', '[ebp+var_10]']
mov ['[eax+38h],', 'dl']
mov ['ecx,', '[ebp+var_10]']
mov ['dl,', '[ecx+38h]']
and ['dl,', '0FDh']
mov ['eax,', '[ebp+var_10]']
mov ['[eax+38h],', 'dl']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0DrawTarget@gfx@mozilla@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '4']
jmp ['??1?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ']
endp
__unwindfunclet$??0DrawTarget@gfx@mozilla@@QAE@XZ$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '8']
jmp ['??1UserData@gfx@mozilla@@QAE@XZ']
endp
__ehhandler$??0DrawTarget@gfx@mozilla@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0DrawTarget@gfx@mozilla@@QAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0FilterNode@gfx@mozilla@@IAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??0?$RefCounted@VFilterNode@gfx@mozilla@@@mozilla@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7FilterNode@gfx@mozilla@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0FilterNodeRecording@gfx@mozilla@@QAE@PAVFilterNode@12@PAVDrawEventRecorderPrivate@12@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0FilterNodeRecording@gfx@mozilla@@QAE@PAVFilterNode@12@PAVDrawEventRecorderPrivate@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0FilterNode@gfx@mozilla@@IAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7FilterNodeRecording@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??0?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@PAVFilterNode@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??0?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@PAVDrawEventRecorderPrivate@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?AddStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0FilterNodeRecording@gfx@mozilla@@QAE@PAVFilterNode@12@PAVDrawEventRecorderPrivate@12@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1FilterNode@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??0FilterNodeRecording@gfx@mozilla@@QAE@PAVFilterNode@12@PAVDrawEventRecorderPrivate@12@@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '8']
jmp ['??1?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??0FilterNodeRecording@gfx@mozilla@@QAE@PAVFilterNode@12@PAVDrawEventRecorderPrivate@12@@Z$2 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0Ch']
jmp ['??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ']
endp
__ehhandler$??0FilterNodeRecording@gfx@mozilla@@QAE@PAVFilterNode@12@PAVDrawEventRecorderPrivate@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0FilterNodeRecording@gfx@mozilla@@QAE@PAVFilterNode@12@PAVDrawEventRecorderPrivate@12@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0Glyph@gfx@mozilla@@QAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0GradientStops@gfx@mozilla@@IAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??0?$RefCounted@VGradientStops@gfx@mozilla@@@mozilla@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7GradientStops@gfx@mozilla@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0GradientStopsRecording@gfx@mozilla@@QAE@PAVGradientStops@12@PAVDrawEventRecorderPrivate@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0GradientStopsRecording@gfx@mozilla@@QAE@PAVGradientStops@12@PAVDrawEventRecorderPrivate@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0GradientStops@gfx@mozilla@@IAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7GradientStopsRecording@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??0?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@PAVGradientStops@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??0?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@PAVDrawEventRecorderPrivate@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?AddStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0GradientStopsRecording@gfx@mozilla@@QAE@PAVGradientStops@12@PAVDrawEventRecorderPrivate@12@@Z$0 proc	near
mov ['ecx,', '[ebp-10h]']
jmp ['??1GradientStops@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??0GradientStopsRecording@gfx@mozilla@@QAE@PAVGradientStops@12@PAVDrawEventRecorderPrivate@12@@Z$1 proc	near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '8']
jmp ['??1?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??0GradientStopsRecording@gfx@mozilla@@QAE@PAVGradientStops@12@PAVDrawEventRecorderPrivate@12@@Z$2 proc	near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0Ch']
jmp ['??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ']
endp
__ehhandler$??0GradientStopsRecording@gfx@mozilla@@QAE@PAVGradientStops@12@PAVDrawEventRecorderPrivate@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0GradientStopsRecording@gfx@mozilla@@QAE@PAVGradientStops@12@PAVDrawEventRecorderPrivate@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0LinearGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0PAVGradientStops@12@ABVMatrix@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0LinearGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0PAVGradientStops@12@ABVMatrix@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0Pattern@gfx@mozilla@@IAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7LinearGradientPattern@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ecx+4]']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+4],', 'edx']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+0Ch],', 'eax']
mov ['[edx+10h],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '14h']
call ['??0?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@PAVGradientStops@gfx@mozilla@@@Z']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[edx]']
mov ['[ecx],', 'eax']
mov ['eax,', '[edx+4]']
mov ['[ecx+4],', 'eax']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[edx+0Ch]']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[edx+10h]']
mov ['[ecx+10h],', 'eax']
mov ['edx,', '[edx+14h]']
mov ['[ecx+14h],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0LinearGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0PAVGradientStops@12@ABVMatrix@12@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1Pattern@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0LinearGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0PAVGradientStops@12@ABVMatrix@12@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0LinearGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0PAVGradientStops@12@ABVMatrix@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0Matrix@gfx@mozilla@@QAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
movss ['xmm0,', 'ds:__real@3f800000']
movss ['dword', 'ptr', '[eax],', 'xmm0']
mov ['ecx,', '[ebp+var_4]']
movss ['xmm0,', 'ds:__real@00000000']
movss ['dword', 'ptr', '[ecx+4],', 'xmm0']
mov ['edx,', '[ebp+var_4]']
movss ['xmm0,', 'ds:__real@00000000']
movss ['dword', 'ptr', '[edx+8],', 'xmm0']
mov ['eax,', '[ebp+var_4]']
movss ['xmm0,', 'ds:__real@3f800000']
movss ['dword', 'ptr', '[eax+0Ch],', 'xmm0']
mov ['ecx,', '[ebp+var_4]']
movss ['xmm0,', 'ds:__real@00000000']
movss ['dword', 'ptr', '[ecx+10h],', 'xmm0']
mov ['edx,', '[ebp+var_4]']
movss ['xmm0,', 'ds:__real@00000000']
movss ['dword', 'ptr', '[edx+14h],', 'xmm0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0PathBuilder@gfx@mozilla@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0PathSink@gfx@mozilla@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7PathBuilder@gfx@mozilla@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0PathBuilder@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7PathBuilderRecording@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??0?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@PAVPathBuilder@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['edx,', '[ebp+var_10]']
mov ['al,', '[ebp+arg_4]']
mov ['[edx+0Ch],', 'al']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['??0?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1PathBuilder@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '8']
jmp ['??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
endp
__ehhandler$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0PathSink@gfx@mozilla@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??0?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7PathSink@gfx@mozilla@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0Pattern@gfx@mozilla@@IAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7Pattern@gfx@mozilla@@6B@']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RadialGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0MMPAVGradientStops@12@ABVMatrix@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0RadialGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0MMPAVGradientStops@12@ABVMatrix@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0Pattern@gfx@mozilla@@IAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RadialGradientPattern@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ecx+4]']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+4],', 'edx']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+0Ch],', 'eax']
mov ['[edx+10h],', 'ecx']
mov ['eax,', '[ebp+var_10]']
movss ['xmm0,', '[ebp+arg_8]']
movss ['dword', 'ptr', '[eax+14h],', 'xmm0']
mov ['ecx,', '[ebp+var_10]']
movss ['xmm0,', '[ebp+arg_C]']
movss ['dword', 'ptr', '[ecx+18h],', 'xmm0']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '1Ch']
call ['??0?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@PAVGradientStops@gfx@mozilla@@@Z']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '20h']
mov ['ecx,', '[ebp+arg_14]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['edx,', '[ecx+4]']
mov ['[eax+4],', 'edx']
mov ['edx,', '[ecx+8]']
mov ['[eax+8],', 'edx']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+0Ch],', 'edx']
mov ['edx,', '[ecx+10h]']
mov ['[eax+10h],', 'edx']
mov ['ecx,', '[ecx+14h]']
mov ['[eax+14h],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0RadialGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0MMPAVGradientStops@12@ABVMatrix@12@@Z$0 proc	near
mov ['ecx,', '[ebp-10h]']
jmp ['??1Pattern@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0RadialGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0MMPAVGradientStops@12@ABVMatrix@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0RadialGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0MMPAVGradientStops@12@ABVMatrix@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedClearRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['5']
mov ['ecx,', '[ebp+var_4]']
call ['??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', 'offset', '??_7RecordedClearRect@gfx@mozilla@@6B@']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '20h']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['ecx,', '[eax+4]']
mov ['[edx+4],', 'ecx']
mov ['ecx,', '[eax+8]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[eax+0Ch]']
mov ['[edx+0Ch],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedCopySurface@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['6']
mov ['ecx,', '[ebp+var_4]']
call ['??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', 'offset', '??_7RecordedCopySurface@gfx@mozilla@@6B@']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['[edx+24h],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '28h']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['ecx,', '[eax+4]']
mov ['[edx+4],', 'ecx']
mov ['ecx,', '[eax+8]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[eax+0Ch]']
mov ['[edx+0Ch],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ecx+4]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+38h],', 'edx']
mov ['[ecx+3Ch],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedCreateSimilarDrawTarget@gfx@mozilla@@QAE@UReferencePtr@12@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['20h']
mov ['ecx,', '[ebp+var_4]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedCreateSimilarDrawTarget@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+18h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ecx+1Ch],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ecx+4]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+20h],', 'edx']
mov ['[ecx+24h],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['al,', '[ebp+arg_C]']
mov ['[edx+28h],', 'al']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedDrawFilter@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUDrawOptions@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['1Dh']
mov ['ecx,', '[ebp+var_4]']
call ['??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', 'offset', '??_7RecordedDrawFilter@gfx@mozilla@@6B@']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['[edx+24h],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '28h']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['ecx,', '[eax+4]']
mov ['[edx+4],', 'ecx']
mov ['ecx,', '[eax+8]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[eax+0Ch]']
mov ['[edx+0Ch],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ecx+4]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+38h],', 'edx']
mov ['[ecx+3Ch],', 'eax']
mov ['edx,', '[ebp+arg_14]']
mov ['eax,', '[edx]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+40h],', 'eax']
mov ['[edx+44h],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedDrawSurface@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@2ABUDrawSurfaceOptions@12@ABUDrawOptions@12@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['0Fh']
mov ['ecx,', '[ebp+var_4]']
call ['??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', 'offset', '??_7RecordedDrawSurface@gfx@mozilla@@6B@']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['[edx+24h],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '28h']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['ecx,', '[eax+4]']
mov ['[edx+4],', 'ecx']
mov ['ecx,', '[eax+8]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[eax+0Ch]']
mov ['[edx+0Ch],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '38h']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx]']
mov ['[ecx],', 'eax']
mov ['eax,', '[edx+4]']
mov ['[ecx+4],', 'eax']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[edx+0Ch]']
mov ['[ecx+0Ch],', 'edx']
mov ['eax,', '[ebp+arg_14]']
mov ['cx,', '[eax]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+48h],', 'cx']
mov ['eax,', '[ebp+arg_18]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+4Ch],', 'ecx']
mov ['[eax+50h],', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedDrawSurfaceWithShadow@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUColor@12@2MW4CompositionOp@12@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['10h']
mov ['ecx,', '[ebp+var_4]']
call ['??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', 'offset', '??_7RecordedDrawSurfaceWithShadow@gfx@mozilla@@6B@']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['[edx+24h],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+28h],', 'eax']
mov ['[edx+2Ch],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '30h']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['edx,', '[ecx+4]']
mov ['[eax+4],', 'edx']
mov ['edx,', '[ecx+8]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ecx+0Ch]']
mov ['[eax+0Ch],', 'ecx']
mov ['edx,', '[ebp+arg_14]']
mov ['eax,', '[edx]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+40h],', 'eax']
mov ['[edx+44h],', 'ecx']
mov ['eax,', '[ebp+var_4]']
movss ['xmm0,', '[ebp+arg_18]']
movss ['dword', 'ptr', '[eax+48h],', 'xmm0']
mov ['ecx,', '[ebp+var_4]']
mov ['dl,', '[ebp+arg_1C]']
mov ['[ecx+4Ch],', 'dl']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['20h']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedDrawTargetCreation@gfx@mozilla@@QAE@UReferencePtr@12@W4BackendType@12@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@_NPAVSourceSurface@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0RecordedDrawTargetCreation@gfx@mozilla@@QAE@UReferencePtr@12@W4BackendType@12@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@_NPAVSourceSurface@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['0']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedDrawTargetCreation@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+18h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ecx+1Ch],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['dl,', '[ebp+arg_8]']
mov ['[ecx+20h],', 'dl']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['eax,', '[ebp+var_10]']
mov ['[eax+24h],', 'ecx']
mov ['[eax+28h],', 'edx']
mov ['ecx,', '[ebp+var_10]']
mov ['dl,', '[ebp+arg_10]']
mov ['[ecx+2Ch],', 'dl']
mov ['eax,', '[ebp+var_10]']
mov ['cl,', '[ebp+arg_14]']
mov ['[eax+2Dh],', 'cl']
mov ['edx,', '[ebp+arg_18]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '30h']
call ['??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0RecordedDrawTargetCreation@gfx@mozilla@@QAE@UReferencePtr@12@W4BackendType@12@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@_NPAVSourceSurface@12@@Z$0	proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0RecordedDrawTargetCreation@gfx@mozilla@@QAE@UReferencePtr@12@W4BackendType@12@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@_NPAVSourceSurface@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0RecordedDrawTargetCreation@gfx@mozilla@@QAE@UReferencePtr@12@W4BackendType@12@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@_NPAVSourceSurface@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedDrawTargetDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedDrawTargetDestruction@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+18h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ecx+1Ch],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx],', 'offset', '??_7RecordedDrawingEvent@gfx@mozilla@@6B@']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedEvent@gfx@mozilla@@IAE@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedEvent@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+4],', 'edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedFill@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0RecordedFill@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['0Bh']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx],', 'offset', '??_7RecordedFill@gfx@mozilla@@6B@']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['[edx+24h],', 'ecx']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+64h],', 'eax']
mov ['[edx+68h],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?StorePattern@RecordedEvent@gfx@mozilla@@QBEXAAUPatternStorage@23@ABVPattern@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0RecordedFill@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@@Z$0	proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0RecordedFill@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0RecordedFill@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedFillGlyphs@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@PBUGlyph@12@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0RecordedFillGlyphs@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@PBUGlyph@12@I@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['0Ch']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx],', 'offset', '??_7RecordedFillGlyphs@gfx@mozilla@@6B@']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['[edx+24h],', 'ecx']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+64h],', 'eax']
mov ['[edx+68h],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?StorePattern@RecordedEvent@gfx@mozilla@@QBEXAAUPatternStorage@23@ABVPattern@23@@Z']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_18]']
mov ['[edx+70h],', 'eax']
mov ['ecx,', '[ebp+arg_18]']
mov ['[ebp+var_14],', 'ecx']
xor ['ecx,', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['edx,', '0Ch']
mul ['edx']
seto ['cl']
neg ['ecx']
or ['ecx,', 'eax']
push ['ecx']
call ['??_U@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_1C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
cmp ['[ebp+var_1C],', '0']
jz ['short', 'loc_C97D']
push ['offset', '??0Glyph@gfx@mozilla@@QAE@XZ']
mov ['eax,', '[ebp+var_14]']
push ['eax']
push ['0Ch']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
call ['??_H@YGXPAXIHP6EPAX0@Z@Z']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_20],', 'edx']
jmp ['short', 'loc_C984']
mov ['[ebp+var_20],', '0']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_18],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_18]']
mov ['[ecx+6Ch],', 'edx']
imul ['eax,', '[ebp+arg_18],', '0Ch']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+6Ch]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0RecordedFillGlyphs@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@PBUGlyph@12@I@Z$0 proc	near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??0RecordedFillGlyphs@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@PBUGlyph@12@I@Z$1 proc	near
mov ['eax,', '[ebp-1Ch]']
push ['eax']
call ['??_V@YAXPAX@Z']
pop ['ecx']
retn
endp
__ehhandler$??0RecordedFillGlyphs@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@PBUGlyph@12@I@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0RecordedFillGlyphs@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@PBUGlyph@12@I@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedFillRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUDrawOptions@12@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0RecordedFillRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUDrawOptions@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['2']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx],', 'offset', '??_7RecordedFillRect@gfx@mozilla@@6B@']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '20h']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['ecx,', '[eax+4]']
mov ['[edx+4],', 'ecx']
mov ['ecx,', '[eax+8]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[eax+0Ch]']
mov ['[edx+0Ch],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ecx+4]']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+6Ch],', 'edx']
mov ['[ecx+70h],', 'eax']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '30h']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?StorePattern@RecordedEvent@gfx@mozilla@@QBEXAAUPatternStorage@23@ABVPattern@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0RecordedFillRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUDrawOptions@12@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0RecordedFillRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUDrawOptions@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0RecordedFillRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUDrawOptions@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedFilterNodeCreation@gfx@mozilla@@QAE@UReferencePtr@12@W4FilterType@12@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['1Bh']
mov ['ecx,', '[ebp+var_4]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedFilterNodeCreation@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+18h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ecx+1Ch],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['dl,', '[ebp+arg_8]']
mov ['[ecx+20h],', 'dl']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedFilterNodeDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['1Ch']
mov ['ecx,', '[ebp+var_4]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedFilterNodeDestruction@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+18h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ecx+1Ch],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IPBMI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IPBMI@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['1Eh']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+24h],', '0Dh']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['edx,', '[ebp+arg_C]']
shl ['edx,', '2']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z']
mov ['eax,', '[ebp+arg_C]']
shl ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IPBMI@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??0RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IPBMI@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '28h']
jmp ['??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
endp
__ehhandler$??0RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IPBMI@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IPBMI@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@I0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@I0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['1Fh']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedFilterNodeSetInput@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
push ['0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '30h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@I0@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@I0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@I0@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@IPAVSourceSurface@12@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@IPAVSourceSurface@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['1Fh']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedFilterNodeSetInput@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
push ['0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '30h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@IPAVSourceSurface@12@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@IPAVSourceSurface@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@IPAVSourceSurface@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedFontData@gfx@mozilla@@QAE@PAVScaledFont@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0RecordedFontData@gfx@mozilla@@QAE@PAVScaledFont@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['esi']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['21h']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedFontData@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+18h],', '0']
mov ['edx,', '[ebp+var_10]']
mov ['byte', 'ptr', '[edx+38h],', '0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_10]']
push ['eax']
push ['offset', '?FontDataProc@RecordedFontData@gfx@mozilla@@SAXPBEIIMPAX@Z']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+38h],', 'al']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0RecordedFontData@gfx@mozilla@@QAE@PAVScaledFont@12@@Z$0 proc	near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0RecordedFontData@gfx@mozilla@@QAE@PAVScaledFont@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0RecordedFontData@gfx@mozilla@@QAE@PAVScaledFont@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedGradientStopsCreation@gfx@mozilla@@QAE@UReferencePtr@12@PAUGradientStop@12@IW4ExtendMode@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['15h']
mov ['ecx,', '[ebp+var_4]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedGradientStopsCreation@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+18h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ecx+1Ch],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['[ecx+20h],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[eax+24h],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['al,', '[ebp+arg_10]']
mov ['[edx+28h],', 'al']
mov ['ecx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[ecx+29h],', '0']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedGradientStopsDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['16h']
mov ['ecx,', '[ebp+var_4]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedGradientStopsDestruction@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+18h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ecx+1Ch],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedMask@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@1ABUDrawOptions@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0RecordedMask@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@1ABUDrawOptions@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['0Dh']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx],', 'offset', '??_7RecordedMask@gfx@mozilla@@6B@']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+98h],', 'eax']
mov ['[edx+9Ch],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '20h']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?StorePattern@RecordedEvent@gfx@mozilla@@QBEXAAUPatternStorage@23@ABVPattern@23@@Z']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '5Ch']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?StorePattern@RecordedEvent@gfx@mozilla@@QBEXAAUPatternStorage@23@ABVPattern@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0RecordedMask@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@1ABUDrawOptions@12@@Z$0	proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0RecordedMask@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@1ABUDrawOptions@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0RecordedMask@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@1ABUDrawOptions@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedMaskSurface@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@UReferencePtr@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUDrawOptions@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0RecordedMaskSurface@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@UReferencePtr@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUDrawOptions@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['1Ah']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx],', 'offset', '??_7RecordedMaskSurface@gfx@mozilla@@6B@']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_8]']
mov ['[edx+60h],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['[edx+64h],', 'ecx']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+68h],', 'eax']
mov ['[edx+6Ch],', 'ecx']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['eax,', '[ebp+var_10]']
mov ['[eax+70h],', 'ecx']
mov ['[eax+74h],', 'edx']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '20h']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?StorePattern@RecordedEvent@gfx@mozilla@@QBEXAAUPatternStorage@23@ABVPattern@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0RecordedMaskSurface@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@UReferencePtr@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUDrawOptions@12@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0RecordedMaskSurface@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@UReferencePtr@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUDrawOptions@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0RecordedMaskSurface@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@UReferencePtr@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUDrawOptions@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedPopClip@gfx@mozilla@@QAE@PAVDrawTarget@12@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['0Ah']
mov ['ecx,', '[ebp+var_4]']
call ['??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', 'offset', '??_7RecordedPopClip@gfx@mozilla@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedPopLayer@gfx@mozilla@@QAE@PAVDrawTarget@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['23h']
mov ['ecx,', '[ebp+var_4]']
call ['??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', 'offset', '??_7RecordedPopLayer@gfx@mozilla@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedPushClip@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['8']
mov ['ecx,', '[ebp+var_4]']
call ['??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', 'offset', '??_7RecordedPushClip@gfx@mozilla@@6B@']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['[edx+24h],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedPushClipRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['9']
mov ['ecx,', '[ebp+var_4]']
call ['??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', 'offset', '??_7RecordedPushClipRect@gfx@mozilla@@6B@']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '20h']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['ecx,', '[eax+4]']
mov ['[edx+4],', 'ecx']
mov ['ecx,', '[eax+8]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[eax+0Ch]']
mov ['[edx+0Ch],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedPushLayer@gfx@mozilla@@QAE@PAVDrawTarget@12@_NMPAVSourceSurface@12@ABVMatrix@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@1@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0RecordedPushLayer@gfx@mozilla@@QAE@PAVDrawTarget@12@_NMPAVSourceSurface@12@ABVMatrix@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@1@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['22h']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx],', 'offset', '??_7RecordedPushLayer@gfx@mozilla@@6B@']
mov ['edx,', '[ebp+var_10]']
mov ['al,', '[ebp+arg_4]']
mov ['[edx+20h],', 'al']
mov ['ecx,', '[ebp+var_10]']
movss ['xmm0,', '[ebp+arg_8]']
movss ['dword', 'ptr', '[ecx+24h],', 'xmm0']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '30h']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['edx,', '[ecx+4]']
mov ['[eax+4],', 'edx']
mov ['edx,', '[ecx+8]']
mov ['[eax+8],', 'edx']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+0Ch],', 'edx']
mov ['edx,', '[ecx+10h]']
mov ['[eax+10h],', 'edx']
mov ['ecx,', '[ecx+14h]']
mov ['[eax+14h],', 'ecx']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '48h']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['ecx,', '[eax+4]']
mov ['[edx+4],', 'ecx']
mov ['ecx,', '[eax+8]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[eax+0Ch]']
mov ['[edx+0Ch],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['dl,', '[ebp+arg_18]']
mov ['[ecx+58h],', 'dl']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0RecordedPushLayer@gfx@mozilla@@QAE@PAVDrawTarget@12@_NMPAVSourceSurface@12@ABVMatrix@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@1@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0RecordedPushLayer@gfx@mozilla@@QAE@PAVDrawTarget@12@_NMPAVSourceSurface@12@ABVMatrix@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@1@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0RecordedPushLayer@gfx@mozilla@@QAE@PAVDrawTarget@12@_NMPAVSourceSurface@12@ABVMatrix@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@1@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedScaledFontCreation@gfx@mozilla@@QAE@UReferencePtr@12@URecordedFontDetails@12@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['18h']
mov ['ecx,', '[ebp+var_4]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedScaledFontCreation@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+18h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ecx+1Ch],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['[ecx+20h],', 'edx']
mov ['eax,', '[ebp+arg_C]']
mov ['[ecx+24h],', 'eax']
mov ['ecx,', '[ebp+var_4]']
movss ['xmm0,', '[ebp+arg_18]']
movss ['dword', 'ptr', '[ecx+28h],', 'xmm0']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_14]']
mov ['[edx+2Ch],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['20h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedScaledFontDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['19h']
mov ['ecx,', '[ebp+var_4]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedScaledFontDestruction@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+18h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ecx+1Ch],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedSetTransform@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVMatrix@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['7']
mov ['ecx,', '[ebp+var_4]']
call ['??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', 'offset', '??_7RecordedSetTransform@gfx@mozilla@@6B@']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '20h']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['ecx,', '[eax+4]']
mov ['[edx+4],', 'ecx']
mov ['ecx,', '[eax+8]']
mov ['[edx+8],', 'ecx']
mov ['ecx,', '[eax+0Ch]']
mov ['[edx+0Ch],', 'ecx']
mov ['ecx,', '[eax+10h]']
mov ['[edx+10h],', 'ecx']
mov ['eax,', '[eax+14h]']
mov ['[edx+14h],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedSnapshot@gfx@mozilla@@QAE@UReferencePtr@12@PAVDrawTarget@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0RecordedSnapshot@gfx@mozilla@@QAE@UReferencePtr@12@PAVDrawTarget@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['17h']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedSnapshot@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+18h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ecx+1Ch],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '20h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0RecordedSnapshot@gfx@mozilla@@QAE@UReferencePtr@12@PAVDrawTarget@12@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0RecordedSnapshot@gfx@mozilla@@QAE@UReferencePtr@12@PAVDrawTarget@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0RecordedSnapshot@gfx@mozilla@@QAE@UReferencePtr@12@PAVDrawTarget@12@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedSourceSurfaceCreation@gfx@mozilla@@QAE@UReferencePtr@12@PAEHABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['13h']
mov ['ecx,', '[ebp+var_4]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedSourceSurfaceCreation@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+18h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ecx+1Ch],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['[ecx+20h],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[eax+24h],', 'ecx']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+28h],', 'eax']
mov ['[edx+2Ch],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['cl,', '[ebp+arg_14]']
mov ['[eax+30h],', 'cl']
mov ['edx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[edx+31h],', '0']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedSourceSurfaceDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['14h']
mov ['ecx,', '[ebp+var_4]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedSourceSurfaceDestruction@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+18h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ecx+1Ch],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedStroke@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0RecordedStroke@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['0Eh']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx],', 'offset', '??_7RecordedStroke@gfx@mozilla@@6B@']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['[edx+24h],', 'ecx']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '64h']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['ecx,', '[eax+4]']
mov ['[edx+4],', 'ecx']
mov ['ecx,', '[eax+8]']
mov ['[edx+8],', 'ecx']
mov ['ecx,', '[eax+0Ch]']
mov ['[edx+0Ch],', 'ecx']
mov ['ecx,', '[eax+10h]']
mov ['[edx+10h],', 'ecx']
mov ['eax,', '[eax+14h]']
mov ['[edx+14h],', 'eax']
mov ['ecx,', '[ebp+arg_14]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ecx+4]']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+7Ch],', 'edx']
mov ['[ecx+80h],', 'eax']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '28h']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?StorePattern@RecordedEvent@gfx@mozilla@@QBEXAAUPatternStorage@23@ABVPattern@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0RecordedStroke@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0RecordedStroke@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0RecordedStroke@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedStrokeLine@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@1ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0RecordedStrokeLine@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@1ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx],', 'offset', '??_7RecordedStrokeLine@gfx@mozilla@@6B@']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+20h],', 'eax']
mov ['[edx+24h],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['eax,', '[ebp+var_10]']
mov ['[eax+28h],', 'ecx']
mov ['[eax+2Ch],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '6Ch']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx]']
mov ['[ecx],', 'eax']
mov ['eax,', '[edx+4]']
mov ['[ecx+4],', 'eax']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[edx+0Ch]']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[edx+10h]']
mov ['[ecx+10h],', 'eax']
mov ['edx,', '[edx+14h]']
mov ['[ecx+14h],', 'edx']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['eax,', '[ebp+var_10]']
mov ['[eax+84h],', 'ecx']
mov ['[eax+88h],', 'edx']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '30h']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?StorePattern@RecordedEvent@gfx@mozilla@@QBEXAAUPatternStorage@23@ABVPattern@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0RecordedStrokeLine@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@1ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0RecordedStrokeLine@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@1ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0RecordedStrokeLine@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@1ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedStrokeRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0RecordedStrokeRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['3']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx],', 'offset', '??_7RecordedStrokeRect@gfx@mozilla@@6B@']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '20h']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['ecx,', '[eax+4]']
mov ['[edx+4],', 'ecx']
mov ['ecx,', '[eax+8]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[eax+0Ch]']
mov ['[edx+0Ch],', 'eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '6Ch']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[edx]']
mov ['[ecx],', 'eax']
mov ['eax,', '[edx+4]']
mov ['[ecx+4],', 'eax']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[edx+0Ch]']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[edx+10h]']
mov ['[ecx+10h],', 'eax']
mov ['edx,', '[edx+14h]']
mov ['[ecx+14h],', 'edx']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['eax,', '[ebp+var_10]']
mov ['[eax+84h],', 'ecx']
mov ['[eax+88h],', 'edx']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '30h']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?StorePattern@RecordedEvent@gfx@mozilla@@QBEXAAUPatternStorage@23@ABVPattern@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0RecordedStrokeRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z$0	proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0RecordedStrokeRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0RecordedStrokeRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordingFontUserData@gfx@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??0?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordingSourceSurfaceUserData@gfx@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??0?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
cdq
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0ScopedMap@DataSourceSurface@gfx@mozilla@@QAE@PAV123@W4MapType@123@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0ScopedMap@DataSourceSurface@gfx@mozilla@@QAE@PAV123@W4MapType@123@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['esi']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7ScopedMap@DataSourceSurface@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??0?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@PAVDataSourceSurface@gfx@mozilla@@@Z']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '8']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+10h],', 'al']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0ScopedMap@DataSourceSurface@gfx@mozilla@@QAE@PAV123@W4MapType@123@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '4']
jmp ['??1?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__ehhandler$??0ScopedMap@DataSourceSurface@gfx@mozilla@@QAE@PAV123@W4MapType@123@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0ScopedMap@DataSourceSurface@gfx@mozilla@@QAE@PAV123@W4MapType@123@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0SourceSurface@gfx@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0SourceSurface@gfx@mozilla@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??0?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7SourceSurface@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??0UserData@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0SourceSurface@gfx@mozilla@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '4']
jmp ['??1?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ']
endp
__ehhandler$??0SourceSurface@gfx@mozilla@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0SourceSurface@gfx@mozilla@@QAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0SourceSurface@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7SourceSurfaceRecording@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '14h']
call ['??0?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@PAVDrawEventRecorderPrivate@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '14h']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?AddStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z$0 proc	near
mov ['ecx,', '[ebp-10h]']
jmp ['??1SourceSurface@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z$1 proc	near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '10h']
jmp ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z$2 proc	near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '14h']
jmp ['??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ']
endp
__ehhandler$??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0Pattern@gfx@mozilla@@IAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7SurfacePattern@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z']
mov ['edx,', '[ebp+var_10]']
mov ['al,', '[ebp+arg_4]']
mov ['[edx+8],', 'al']
mov ['ecx,', '[ebp+var_10]']
mov ['dl,', '[ebp+arg_C]']
mov ['[ecx+9],', 'dl']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '0Ch']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['edx,', '[ecx+4]']
mov ['[eax+4],', 'edx']
mov ['edx,', '[ecx+8]']
mov ['[eax+8],', 'edx']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+0Ch],', 'edx']
mov ['edx,', '[ecx+10h]']
mov ['[eax+10h],', 'edx']
mov ['ecx,', '[ecx+14h]']
mov ['[eax+14h],', 'ecx']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '24h']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['ecx,', '[eax+4]']
mov ['[edx+4],', 'ecx']
mov ['ecx,', '[eax+8]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[eax+0Ch]']
mov ['[edx+0Ch],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1Pattern@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0UserData@gfx@mozilla@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Container_proxy@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Generic_error_category@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0error_category@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_Generic_error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Iostream_error_category@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Generic_error_category@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_Iostream_error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Iterator_base12@std@@QAE@ABU01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Iterator_base12@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[edx+4]']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_DE28']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '[eax+4]']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_System_error_category@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Generic_error_category@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_System_error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0error_category@std@@QAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['esi']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[edx+4]']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?good@ios_base@std@@QBE_NXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_DF82']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[edx+4]']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_DF82']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '[ebp+arg_0]']
jz ['short', 'loc_DF82']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
call ['dword', 'ptr', 'ds:__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?good@ios_base@std@@QBE_NXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+4],', 'al']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ']
endp
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@IAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ']
endp
__ehhandler$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_E0AA']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_E0E6']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefCounted@VFilterNode@gfx@mozilla@@@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_E122']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefCounted@VGradientStops@gfx@mozilla@@@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_E15E']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@IAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_E19A']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_E1C8']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?Release@?$AddRefTraits@VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@SAXPAVDataSourceSurface@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_E1FC']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?Release@?$AddRefTraits@VDrawEventRecorderPrivate@gfx@mozilla@@@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@SAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_E230']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?Release@?$AddRefTraits@VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@SAXPAVDrawTarget@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_E264']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?Release@?$AddRefTraits@VDrawTargetRecording@gfx@mozilla@@@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@SAXPAVDrawTargetRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_E298']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?Release@?$AddRefTraits@VFilterNode@gfx@mozilla@@@?$RefPtr@VFilterNode@gfx@mozilla@@@@SAXPAVFilterNode@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_E2CC']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?Release@?$AddRefTraits@VGradientStops@gfx@mozilla@@@?$RefPtr@VGradientStops@gfx@mozilla@@@@SAXPAVGradientStops@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_E300']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?Release@?$AddRefTraits@VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@SAXPAVPathBuilder@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_E334']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?Release@?$AddRefTraits@VPathBuilderRecording@gfx@mozilla@@@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@SAXPAVPathBuilderRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_E368']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?Release@?$AddRefTraits@VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@SAXPAVPathRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_E39C']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?Release@?$AddRefTraits@VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@SAXPAVSourceSurface@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$UniquePtr@$$BY0A@EV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?reset@?$UniquePtr@$$BY0A@EV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QAEX$$T@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Iterator_base12@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Iterator012@Ubidirectional_iterator_tag@std@@_KHPB_KAB_KU_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Iterator_base12@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Iterator012@Urandom_access_iterator_tag@std@@EHPBEABEU_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Iterator_base12@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Iterator_base12@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Iterator_base12@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Iterator012@Ubidirectional_iterator_tag@std@@_KHPB_KAB_KU_Iterator_base12@2@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??1_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_val@U?$_Simple_types@M@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@EHPBEABEU_Iterator_base12@2@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??1_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_val@U?$_Simple_types@M@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??1_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??1_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_E7B6']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_E7CE']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_E7E6']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$already_AddRefed@VFilterNode@gfx@mozilla@@@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_E7FE']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$already_AddRefed@VGradientStops@gfx@mozilla@@@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_E816']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$already_AddRefed@VPath@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_E82E']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_E846']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_E85E']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_E876']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_E88E']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax-68h]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+edx-68h],', 'offset', '??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx-68h]']
mov ['eax,', '[edx+4]']
sub ['eax,', '68h']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx-68h]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+ecx-6Ch],', 'eax']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '50h']
call ['??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '48h']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$vector@MV?$allocator@M@std@@@std@@IAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1AdjustedPattern@gfx@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+3Ch],', '0']
jz ['short', 'loc_EAAD']
mov ['esi,', 'esp']
push ['0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+3Ch]']
mov ['eax,', '[ebp+var_4]']
mov ['edx,', '[edx]']
mov ['ecx,', '[eax+3Ch]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1ColorPattern@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1Pattern@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1DrawTarget@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1DrawTarget@gfx@mozilla@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7DrawTarget@gfx@mozilla@@6B@']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??1UserData@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??1?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??1DrawTarget@gfx@mozilla@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '4']
jmp ['??1?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ']
endp
__ehhandler$??1DrawTarget@gfx@mozilla@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1DrawTarget@gfx@mozilla@@UAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1FilterNode@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7FilterNode@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??1?$RefCounted@VFilterNode@gfx@mozilla@@@mozilla@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1FilterNodeRecording@gfx@mozilla@@UAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1FilterNodeRecording@gfx@mozilla@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '34h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_40]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7FilterNodeRecording@gfx@mozilla@@6B@']
mov ['[ebp+var_4],', '2']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RemoveStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_38],', 'esp']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
lea ['ecx,', '[ebp+var_34]']
call ['??0RecordedFilterNodeDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z']
mov ['[ebp+var_3C],', 'eax']
mov ['ecx,', '[ebp+var_3C]']
mov ['[ebp+var_40],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['edx,', '[ebp+var_40]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_34]']
call ['??1RecordedFilterNodeDestruction@gfx@mozilla@@UAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??1?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1FilterNode@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '40h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??1FilterNodeRecording@gfx@mozilla@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1FilterNode@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??1FilterNodeRecording@gfx@mozilla@@UAE@XZ$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '8']
jmp ['??1?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??1FilterNodeRecording@gfx@mozilla@@UAE@XZ$2 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0Ch']
jmp ['??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??1FilterNodeRecording@gfx@mozilla@@UAE@XZ$3 proc near
lea ['ecx,', '[ebp-34h]']
jmp ['??1RecordedFilterNodeDestruction@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??1FilterNodeRecording@gfx@mozilla@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-3Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1FilterNodeRecording@gfx@mozilla@@UAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1GradientStops@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7GradientStops@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??1?$RefCounted@VGradientStops@gfx@mozilla@@@mozilla@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1GradientStopsRecording@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1GradientStopsRecording@gfx@mozilla@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '34h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_40]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7GradientStopsRecording@gfx@mozilla@@6B@']
mov ['[ebp+var_4],', '2']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RemoveStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_38],', 'esp']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
lea ['ecx,', '[ebp+var_34]']
call ['??0RecordedGradientStopsDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z']
mov ['[ebp+var_3C],', 'eax']
mov ['ecx,', '[ebp+var_3C]']
mov ['[ebp+var_40],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['edx,', '[ebp+var_40]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_34]']
call ['??1RecordedGradientStopsDestruction@gfx@mozilla@@UAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??1?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1GradientStops@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '40h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??1GradientStopsRecording@gfx@mozilla@@UAE@XZ$0	proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1GradientStops@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??1GradientStopsRecording@gfx@mozilla@@UAE@XZ$1	proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '8']
jmp ['??1?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??1GradientStopsRecording@gfx@mozilla@@UAE@XZ$2	proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0Ch']
jmp ['??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??1GradientStopsRecording@gfx@mozilla@@UAE@XZ$3	proc near
lea ['ecx,', '[ebp-34h]']
jmp ['??1RecordedGradientStopsDestruction@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??1GradientStopsRecording@gfx@mozilla@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-3Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1GradientStopsRecording@gfx@mozilla@@UAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1LinearGradientPattern@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1LinearGradientPattern@gfx@mozilla@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '14h']
call ['??1?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1Pattern@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??1LinearGradientPattern@gfx@mozilla@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1Pattern@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??1LinearGradientPattern@gfx@mozilla@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1LinearGradientPattern@gfx@mozilla@@UAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1PathBuilder@gfx@mozilla@@UAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1PathSink@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1PathBuilderRecording@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1PathBuilderRecording@gfx@mozilla@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['??1?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1PathBuilder@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??1PathBuilderRecording@gfx@mozilla@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1PathBuilder@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??1PathBuilderRecording@gfx@mozilla@@UAE@XZ	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1PathBuilderRecording@gfx@mozilla@@UAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1PathSink@gfx@mozilla@@UAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7PathSink@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??1?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1Pattern@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7Pattern@gfx@mozilla@@6B@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RadialGradientPattern@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1RadialGradientPattern@gfx@mozilla@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '1Ch']
call ['??1?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1Pattern@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??1RadialGradientPattern@gfx@mozilla@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1Pattern@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??1RadialGradientPattern@gfx@mozilla@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1RadialGradientPattern@gfx@mozilla@@UAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedClearRect@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedCopySurface@gfx@mozilla@@UAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedCreateSimilarDrawTarget@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedDrawFilter@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedDrawSurface@gfx@mozilla@@UAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedDrawSurfaceWithShadow@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedDrawTargetCreation@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1RecordedDrawTargetCreation@gfx@mozilla@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '30h']
call ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??1RecordedDrawTargetCreation@gfx@mozilla@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??1RecordedDrawTargetCreation@gfx@mozilla@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1RecordedDrawTargetCreation@gfx@mozilla@@UAE@XZ']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedDrawTargetDestruction@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedEvent@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedEvent@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedFill@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedFillRect@gfx@mozilla@@UAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedFilterNodeDestruction@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '28h']
call ['??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedFilterNodeSetInput@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedGradientStopsDestruction@gfx@mozilla@@UAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedMask@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedMaskSurface@gfx@mozilla@@UAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedPopClip@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedPopLayer@gfx@mozilla@@UAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedPushClip@gfx@mozilla@@UAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedPushClipRect@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedPushLayer@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedScaledFontCreation@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedScaledFontDestruction@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedSetTransform@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedSnapshot@gfx@mozilla@@UAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedSourceSurfaceDestruction@gfx@mozilla@@UAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedStroke@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedStrokeLine@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedStrokeRect@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordingFontUserData@gfx@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordingSourceSurfaceUserData@gfx@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1ScopedMap@DataSourceSurface@gfx@mozilla@@UAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1ScopedMap@DataSourceSurface@gfx@mozilla@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7ScopedMap@DataSourceSurface@gfx@mozilla@@6B@']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
movzx ['edx,', 'byte', 'ptr', '[ecx+10h]']
test ['edx,', 'edx']
jz ['short', 'loc_F61E']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??C?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QBEPAVDataSourceSurface@gfx@mozilla@@XZ']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_14]']
mov ['eax,', '[edx+2Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??1?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??1ScopedMap@DataSourceSurface@gfx@mozilla@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '4']
jmp ['??1?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__ehhandler$??1ScopedMap@DataSourceSurface@gfx@mozilla@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-10h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1ScopedMap@DataSourceSurface@gfx@mozilla@@UAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1SourceSurface@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1SourceSurface@gfx@mozilla@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7SourceSurface@gfx@mozilla@@6B@']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??1UserData@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??1?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??1SourceSurface@gfx@mozilla@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '4']
jmp ['??1?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ']
endp
__ehhandler$??1SourceSurface@gfx@mozilla@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1SourceSurface@gfx@mozilla@@UAE@XZ']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '34h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_40]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7SourceSurfaceRecording@gfx@mozilla@@6B@']
mov ['[ebp+var_4],', '2']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '14h']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RemoveStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_38],', 'esp']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
lea ['ecx,', '[ebp+var_34]']
call ['??0RecordedSourceSurfaceDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z']
mov ['[ebp+var_3C],', 'eax']
mov ['ecx,', '[ebp+var_3C]']
mov ['[ebp+var_40],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['edx,', '[ebp+var_40]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '14h']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_34]']
call ['??1RecordedSourceSurfaceDestruction@gfx@mozilla@@UAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '14h']
call ['??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1SourceSurface@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '40h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ$0	proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1SourceSurface@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ$1	proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '10h']
jmp ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ$2	proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '14h']
jmp ['??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ$3	proc near
lea ['ecx,', '[ebp-34h]']
jmp ['??1RecordedSourceSurfaceDestruction@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-3Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1SurfacePattern@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1SurfacePattern@gfx@mozilla@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1Pattern@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??1SurfacePattern@gfx@mozilla@@UAE@XZ$0	proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1Pattern@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??1SurfacePattern@gfx@mozilla@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1SurfacePattern@gfx@mozilla@@UAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1UserData@gfx@mozilla@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Destroy@UserData@gfx@mozilla@@QAEXXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1_Generic_error_category@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1error_category@std@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1_Iostream_error_category@std@@UAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Generic_error_category@std@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1_Iterator_base12@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_C]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
call ['?_Orphan_me@_Iterator_base12@std@@QAEXXZ']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_C]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4']
dd ['offset', '$LN3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[eax+4]']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_FA4E']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+var_10]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1_System_error_category@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Generic_error_category@std@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1error_category@std@@UAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7error_category@std@@6B@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?uncaught_exception@std@@YA_NXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_FAD9']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
mov ['ecx,', '[ecx]']
call ['dword', 'ptr', 'ds:__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??2@YAPAXIPAX@Z	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??3@YAXPAX0@Z	proc near		
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??4?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAEAAV0@ABV0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?assign_with_AddRef@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@AAEXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??4?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAEAAV0@PAVDrawEventRecorderPrivate@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?assign_with_AddRef@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@AAEXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??4?$RefPtr@VPathRecording@gfx@mozilla@@@@QAEAAV0@PAVPathRecording@gfx@mozilla@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?assign_with_AddRef@?$RefPtr@VPathRecording@gfx@mozilla@@@@AAEXPAVPathRecording@gfx@mozilla@@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_FBD8']
jmp ['short', 'loc_FC2E']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_FBF2']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
jmp ['short', 'loc_FC2E']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_me@_Iterator_base12@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN11']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
dd ['offset', '$LN10']
dd ['offset', '$LN8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 proc near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-18h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??4atomic_uint@std@@QAEII@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['?atomic_store@std@@YAXPAUatomic_uint@1@I@Z']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??6?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEAAV012@QBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?LogIt@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_FD2E']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_FD17']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_FD1E']
mov ['[ebp+var_8],', '0']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
add ['esp,', '8']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_FD82']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['esi,', 'eax']
jz ['loc_FE08']
mov ['esi,', 'esp']
push ['121h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DI@MDELDGPI@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@']
test ['eax,', 'eax']
jz ['short', 'loc_FDB0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_FDE0']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['122h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_FDE0']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['122h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1NK@BJPMEIHF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
push ['offset', '??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+8]']
jnz ['short', 'loc_FE1F']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_FE26']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_FE7A']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['esi,', 'eax']
jz ['loc_FF00']
mov ['esi,', 'esp']
push ['121h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DI@MDELDGPI@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@']
test ['eax,', 'eax']
jz ['short', 'loc_FEA8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_FED8']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['122h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_FED8']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['122h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1OC@LGMEKDCA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
push ['offset', '??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+8]']
jnz ['short', 'loc_FF17']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_FF1E']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_FF60']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_FF67']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_FF9C']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_FFA3']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??8error_category@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+arg_0]']
jnz ['short', 'loc_FFD4']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_FFDB']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??8error_condition@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?category@error_condition@std@@QBEABVerror_category@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?category@error_condition@std@@QBEABVerror_category@2@XZ']
mov ['ecx,', 'eax']
call ['??8error_category@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_1003A']
mov ['ecx,', '[ebp+var_4]']
call ['?value@error_condition@std@@QBEHXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?value@error_condition@std@@QBEHXZ']
cmp ['esi,', 'eax']
jnz ['short', 'loc_1003A']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_10041']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1008B']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_10092']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_100DB']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_100E2']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1012B']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_10132']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1017B']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_10182']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??A?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
ja ['loc_1023E']
mov ['esi,', 'esp']
push ['4B1h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_101E6']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_10216']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['4B2h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_10216']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['4B2h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1CME@JIAKHOAG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAu?$AAn?$AAc@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??A?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
ja ['loc_10302']
mov ['esi,', 'esp']
push ['4B1h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_102AA']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_102DA']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['4B2h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_102DA']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['4B2h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1CNE@DOHGKKOB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAu?$AAn?$AAc@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??B?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QBEPAVDataSourceSurface@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QBEPAVDataSourceSurface@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??B?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??B?$RefPtr@VGradientStops@gfx@mozilla@@@@QBEPAVGradientStops@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VGradientStops@gfx@mozilla@@@@QBEPAVGradientStops@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??B?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??B?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??B?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QBEPAVPathBuilderRecording@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QBEPAVPathBuilderRecording@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??B?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??B?$fpos@H@std@@QBE_JXZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax]']
add ['edx,', '[ecx+8]']
mov ['esi,', '[eax+4]']
adc ['esi,', '[ecx+0Ch]']
mov ['eax,', 'edx']
mov ['edx,', 'esi']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '64h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_70]']
mov ['ecx,', '19h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+38h]']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[edx+38h]']
mov ['edx,', '[eax+4]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movsx ['eax,', 'al']
mov ['[ebp+var_60],', 'eax']
cmp ['[ebp+var_60],', '3']
ja ['loc_106C2']
mov ['ecx,', '[ebp+var_60]']
jmp ['ds:$LN23_2[ecx*4]']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+38h]']
jmp ['loc_10715']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+38h]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
push ['34h']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_24],', '0']
jz ['short', 'loc_10575']
lea ['ecx,', '[ebp+var_34]']
call ['??0?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@QAE@XZ']
push ['eax']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+9]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '0Ch']
push ['edx']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+8]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '4']
call ['??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
push ['eax']
call ['?GetSourceSurface@gfx@mozilla@@YAPAVSourceSurface@12@PAV312@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
call ['??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z']
mov ['[ebp+var_64],', 'eax']
jmp ['short', 'loc_1057C']
mov ['[ebp+var_64],', '0']
mov ['edx,', '[ebp+var_64]']
mov ['[ebp+var_20],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+3Ch],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+3Ch]']
jmp ['loc_10715']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+38h]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
push ['30h']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_3C],', 'eax']
mov ['[ebp+var_4],', '1']
cmp ['[ebp+var_3C],', '0']
jz ['short', 'loc_105FB']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '18h']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '14h']
call ['??B?$RefPtr@VGradientStops@gfx@mozilla@@@@QBEPAVGradientStops@gfx@mozilla@@XZ']
push ['eax']
call ['?GetGradientStops@gfx@mozilla@@YAPAVGradientStops@12@PAV312@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '0Ch']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '4']
push ['edx']
mov ['ecx,', '[ebp+var_3C]']
call ['??0LinearGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0PAVGradientStops@12@ABVMatrix@12@@Z']
mov ['[ebp+var_68],', 'eax']
jmp ['short', 'loc_10602']
mov ['[ebp+var_68],', '0']
mov ['eax,', '[ebp+var_68]']
mov ['[ebp+var_38],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_38]']
mov ['[ecx+3Ch],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['eax,', '[eax+3Ch]']
jmp ['loc_10715']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+38h]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
push ['38h']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_44],', 'eax']
mov ['[ebp+var_4],', '2']
cmp ['[ebp+var_44],', '0']
jz ['short', 'loc_1069D']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '20h']
push ['ecx']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '1Ch']
call ['??B?$RefPtr@VGradientStops@gfx@mozilla@@@@QBEPAVGradientStops@gfx@mozilla@@XZ']
push ['eax']
call ['?GetGradientStops@gfx@mozilla@@YAPAVGradientStops@12@PAV312@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+var_1C]']
push ['ecx']
movss ['xmm0,', 'dword', 'ptr', '[edx+18h]']
movss ['[esp+88h+var_88],', 'xmm0']
mov ['eax,', '[ebp+var_1C]']
push ['ecx']
movss ['xmm0,', 'dword', 'ptr', '[eax+14h]']
movss ['[esp+8Ch+var_8C],', 'xmm0']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '0Ch']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '4']
push ['edx']
mov ['ecx,', '[ebp+var_44]']
call ['??0RadialGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0MMPAVGradientStops@12@ABVMatrix@12@@Z']
mov ['[ebp+var_6C],', 'eax']
jmp ['short', 'loc_106A4']
mov ['[ebp+var_6C],', '0']
mov ['eax,', '[ebp+var_6C]']
mov ['[ebp+var_40],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_40]']
mov ['[ecx+3Ch],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['eax,', '[eax+3Ch]']
jmp ['short', 'loc_10715']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
push ['14h']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_4C],', 'eax']
mov ['[ebp+var_4],', '3']
cmp ['[ebp+var_4C],', '0']
jz ['short', 'loc_106F6']
lea ['ecx,', '[ebp+var_5C]']
call ['??0Color@gfx@mozilla@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4C]']
call ['??0ColorPattern@gfx@mozilla@@QAE@ABUColor@12@@Z']
mov ['[ebp+var_70],', 'eax']
jmp ['short', 'loc_106FD']
mov ['[ebp+var_70],', '0']
mov ['edx,', '[ebp+var_70]']
mov ['[ebp+var_48],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_48]']
jmp ['short', 'loc_10715']
mov ['eax,', '[ebp+var_10]']
mov ['eax,', '[eax+3Ch]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '70h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN4_17']
dd ['offset', '$LN3_18']
dd ['offset', '$LN2_0']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ$0 proc near
mov ['eax,', '[ebp-10h]']
push ['eax']
mov ['eax,', '[ebp-24h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__unwindfunclet$??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ$1 proc near
mov ['eax,', '[ebp-10h]']
push ['eax']
mov ['eax,', '[ebp-3Ch]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__unwindfunclet$??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ$2 proc near
mov ['eax,', '[ebp-10h]']
push ['eax']
mov ['eax,', '[ebp-44h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__unwindfunclet$??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ$3 proc near
mov ['eax,', '[ebp-10h]']
push ['eax']
mov ['eax,', '[ebp-4Ch]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-70h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??BReferencePtr@gfx@mozilla@@QBEPAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['al,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??C?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QBEPAVDataSourceSurface@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_107DE']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QBEPAVDataSourceSurface@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_10806']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_1082E']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_10856']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??C?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QBEPAVPathBuilderRecording@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_1087E']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QBEPAVPathBuilderRecording@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??C?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_108A6']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_108CE']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBEABQBXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_10923']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_10923']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
cmp ['edx,', '[eax+4]']
jnz ['loc_109A9']
mov ['esi,', 'esp']
push ['0D2h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EC@HILJLMMC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb?$AAl?$AAe@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_10951']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_10981']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['0D3h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_10981']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['0D3h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1NI@GGDPCAJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['?_Myval@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPBXPAU?$_List_node@PBXPAX@2@@Z']
add ['esp,', '4']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?_Myval@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPBXPAU?$_List_node@PBXPAX@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEAB_KXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?_Myval@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAA_KPAU?$_List_node@_KPAX@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBEABEXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_10A6A']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_10A6A']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
cmp ['edx,', '[eax+4]']
jb ['short', 'loc_10A6A']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+8]']
ja ['short', 'loc_10AE7']
mov ['esi,', 'esp']
push ['48h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_10A95']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_10AC2']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['49h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_10AC2']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['49h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1NI@PPPKFEAA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBEAAEXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBEABEXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??E?$AtomicBaseIncDec@I$01@detail@mozilla@@QAEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?inc@?$IntrinsicIncDec@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@@Z']
add ['esp,', '4']
add ['eax,', '1']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_28],', '0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAEAAV01@XZ']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['edx,', '[ebp+var_28]']
or ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN8_7']
dd ['offset', '$LN6_3']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z$0 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAEAAV01@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_10C7F']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_10C7F']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
cmp ['edx,', '[eax+4]']
jnz ['loc_10D05']
mov ['esi,', 'esp']
push ['0E6h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EA@DOGAGKDH@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_10CAD']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_10CDD']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['0E7h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_10CDD']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['0E7h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1NK@LJABKBLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['[edx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE?AV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE?AV01@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_28],', '0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAEAAV01@XZ']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['edx,', '[ebp+var_28]']
or ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN8_8']
dd ['offset', '$LN6_4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE?AV01@H@Z$0	proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE?AV01@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE?AV01@H@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAEAAV01@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_10E63']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_10E63']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
cmp ['edx,', '[eax+4]']
jnz ['loc_10EE9']
mov ['esi,', 'esp']
push ['0E6h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EA@DOGAGKDH@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_10E91']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_10EC1']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['0E7h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_10EC1']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['0E7h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1OC@BGDJEKOF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['[edx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??F?$AtomicBaseIncDec@I$01@detail@mozilla@@QAEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?dec@?$IntrinsicIncDec@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@@Z']
add ['esp,', '4']
sub ['eax,', '1']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_28],', '0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['ecx,', '[ebp+var_20]']
call ['??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['edx,', '[ebp+var_28]']
or ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_13']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
dd ['offset', '$LN8_14']
dd ['offset', '$LN6_9']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z$0 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_28],', '0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['ecx,', '[ebp+var_20]']
call ['??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['edx,', '[ebp+var_28]']
or ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_14']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
dd ['offset', '$LN8_15']
dd ['offset', '$LN6_11']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z$0 proc	near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??R?$DefaultDelete@$$BY0A@E@mozilla@@QBEXPAE@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['??_V@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??R?$_Bitwise_hash@PBX@std@@QBEIABQBX@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['4']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_Hash_seq@std@@YAIPBEI@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??R?$_Bitwise_hash@_K@std@@QBEIAB_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['8']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_Hash_seq@std@@YAIPBEI@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBEIABQBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Gethash@?$_Hash_oper1@$0A@U?$hash@PBX@std@@@std@@QBE?AU?$hash@PBX@2@XZ']
mov ['ecx,', 'eax']
call ['??R?$_Bitwise_hash@PBX@std@@QBEIABQBX@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getkeyeq@?$_Hash_oper2@$0A@U?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE?AU?$equal_to@PBX@2@XZ']
mov ['ecx,', 'eax']
call ['??R?$equal_to@PBX@std@@QBE_NABQBX0@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_1131D']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_11324']
mov ['[ebp+var_C],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_C]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??R?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBEIAB_K@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Gethash@?$_Hash_oper1@$0A@U?$hash@_K@std@@@std@@QBE?AU?$hash@_K@2@XZ']
mov ['ecx,', 'eax']
call ['??R?$_Bitwise_hash@_K@std@@QBEIAB_K@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??R?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBE_NAB_K0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getkeyeq@?$_Hash_oper2@$0A@U?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBE?AU?$equal_to@_K@2@XZ']
mov ['ecx,', 'eax']
call ['??R?$equal_to@_K@std@@QBE_NAB_K0@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_113C1']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_113C8']
mov ['[ebp+var_C],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_C]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??R?$equal_to@PBX@std@@QBE_NABQBX0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_11408']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_1140F']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??R?$equal_to@_K@std@@QBE_NAB_K0@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[edx]']
cmp ['ecx,', '[eax]']
jnz ['short', 'loc_11461']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[edx+4]']
cmp ['ecx,', '[eax+4]']
jnz ['short', 'loc_11461']
mov ['[ebp+var_10],', '1']
jmp ['short', 'loc_11468']
mov ['[ebp+var_10],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_10]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_114C5']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
lea ['esi,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['esi,', '[eax+4]']
jb ['short', 'loc_114C5']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[edx+ecx*4]']
cmp ['[eax+8],', 'edx']
jnb ['loc_1154B']
mov ['esi,', 'esp']
push ['9Fh']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_114F3']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_11523']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['0A0h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_11523']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['0A0h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1BNG@JIGEKGDI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_115C5']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
lea ['esi,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['esi,', '[eax+4]']
jb ['short', 'loc_115C5']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[edx+ecx*4]']
cmp ['[eax+8],', 'edx']
jnb ['loc_1164B']
mov ['esi,', 'esp']
push ['9Fh']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_115F3']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_11623']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['0A0h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_11623']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['0A0h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1BNO@ICKBMIEL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '68h']
call ['??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '68h']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z proc near
sub ['ecx,', '[ecx-4]']
jmp ['??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11746']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '68h']
call ['??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1178C']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '68h']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '68h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GColorPattern@gfx@mozilla@@UAEPAXI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1ColorPattern@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_117CE']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GDrawTarget@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1DrawTarget@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1180E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GDrawTargetRecording@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1DrawTargetRecording@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1184E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GFilterNode@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1FilterNode@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1188E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GFilterNodeRecording@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1FilterNodeRecording@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_118CE']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GGradientStops@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1GradientStops@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1190E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GGradientStopsRecording@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1GradientStopsRecording@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1194E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GLinearGradientPattern@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1LinearGradientPattern@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1198E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GPathBuilder@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1PathBuilder@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_119CE']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GPathBuilderRecording@gfx@mozilla@@UAEPAXI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1PathBuilderRecording@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11A0E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GPathSink@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1PathSink@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11A4E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GPattern@gfx@mozilla@@UAEPAXI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1Pattern@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11A8E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRadialGradientPattern@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RadialGradientPattern@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11ACE']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedClearRect@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedClearRect@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11B0E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedCopySurface@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedCopySurface@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11B4E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedCreateSimilarDrawTarget@gfx@mozilla@@UAEPAXI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedCreateSimilarDrawTarget@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11B8E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedDrawFilter@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawFilter@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11BCE']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedDrawSurface@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawSurface@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11C0E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedDrawSurfaceWithShadow@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawSurfaceWithShadow@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11C4E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedDrawTargetCreation@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawTargetCreation@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11C8E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedDrawTargetDestruction@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawTargetDestruction@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11CCE']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedDrawingEvent@gfx@mozilla@@UAEPAXI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11D0E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedEvent@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11D4E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedFill@gfx@mozilla@@UAEPAXI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedFill@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11D8E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedFillGlyphs@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedFillGlyphs@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11DCE']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedFillRect@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedFillRect@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11E0E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedFilterNodeCreation@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedFilterNodeCreation@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11E4E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedFilterNodeDestruction@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedFilterNodeDestruction@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11E8E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedFilterNodeSetAttribute@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11ECE']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedFilterNodeSetInput@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedFilterNodeSetInput@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11F0E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedFontData@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedFontData@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11F4E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedGradientStopsCreation@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedGradientStopsCreation@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11F8E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedGradientStopsDestruction@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedGradientStopsDestruction@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11FCE']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedMask@gfx@mozilla@@UAEPAXI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedMask@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1200E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedMaskSurface@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedMaskSurface@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1204E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedPopClip@gfx@mozilla@@UAEPAXI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedPopClip@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1208E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedPopLayer@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedPopLayer@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_120CE']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedPushClip@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedPushClip@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1210E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedPushClipRect@gfx@mozilla@@UAEPAXI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedPushClipRect@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1214E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedPushLayer@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedPushLayer@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1218E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedScaledFontCreation@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedScaledFontCreation@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_121CE']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedScaledFontDestruction@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedScaledFontDestruction@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1220E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedSetTransform@gfx@mozilla@@UAEPAXI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedSetTransform@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1224E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedSnapshot@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedSnapshot@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1228E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedSourceSurfaceCreation@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedSourceSurfaceCreation@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_122CE']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedSourceSurfaceDestruction@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedSourceSurfaceDestruction@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1230E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedStroke@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedStroke@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1234E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedStrokeLine@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedStrokeLine@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1238E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedStrokeRect@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedStrokeRect@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_123CE']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordingFontUserData@gfx@mozilla@@QAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordingFontUserData@gfx@mozilla@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1240E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordingSourceSurfaceUserData@gfx@mozilla@@QAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordingSourceSurfaceUserData@gfx@mozilla@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1244E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GScopedMap@DataSourceSurface@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1ScopedMap@DataSourceSurface@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1248E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GSourceSurface@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1SourceSurface@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_124CE']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GSourceSurfaceRecording@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1250E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GSurfacePattern@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1SurfacePattern@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1254E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G_Generic_error_category@std@@UAEPAXI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Generic_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1258E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Iostream_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_125CE']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G_System_error_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_System_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1260E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_Gerror_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1264E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_H@YGXPAXIHP6EPAX0@Z@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
js ['short', 'loc_1268D']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['[ebp+arg_C]']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'ecx']
jmp ['short', 'loc_12668']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
call ['??0_Generic_error_category@std@@QAE@XZ']
push ['offset', '??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A']
call ['??0_Iostream_error_category@std@@QAE@XZ']
push ['offset', '??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
call ['??0_System_error_category@std@@QAE@XZ']
push ['offset', '??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
push ['0']
mov ['ecx,', 'offset', '?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A']
call ['dword', 'ptr', 'ds:__imp_??0id@locale@std@@QAE@I@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
push ['0']
mov ['ecx,', 'offset', '?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A']
call ['dword', 'ptr', 'ds:__imp_??0id@locale@std@@QAE@I@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__Eallocator_arg@std@@YAXXZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
xor ['eax,', 'eax']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__Epiecewise_construct@std@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
xor ['eax,', 'eax']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$yd']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
call ['??1_Generic_error_category@std@@UAE@XZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$yd']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A']
call ['??1_Iostream_error_category@std@@UAE@XZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$yd']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
call ['??1_System_error_category@std@@UAE@XZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Add@UserData@gfx@mozilla@@QAEXPAUUserDataKey@23@PAXP6AX1@Z@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
push ['edi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_127EB']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx]']
jge ['short', 'loc_1286F']
imul ['eax,', '[ebp+var_8],', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+eax]']
jnz ['short', 'loc_1286A']
imul ['edx,', '[ebp+var_8],', '0Ch']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
cmp ['dword', 'ptr', '[ecx+edx+8],', '0']
jz ['short', 'loc_12843']
imul ['edx,', '[ebp+var_8],', '0Ch']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['esi,', 'esp']
mov ['edx,', '[ecx+edx+4]']
push ['edx']
imul ['eax,', '[ebp+var_8],', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx+eax+8]']
call ['eax']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
imul ['ecx,', '[ebp+var_8],', '0Ch']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['edx,', '[ebp+arg_4]']
mov ['[eax+ecx+4],', 'edx']
imul ['eax,', '[ebp+var_8],', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[edx+eax+8],', 'ecx']
jmp ['loc_12925']
jmp ['loc_127E2']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
add ['eax,', '1']
imul ['ecx,', 'eax,', '0Ch']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__realloc']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+4],', '0']
jnz ['short', 'loc_128E0']
xor ['eax,', 'eax']
jnz ['short', 'loc_128A3']
int ['3']
mov ['dword', 'ptr', '$SG85048,', '30h']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_128A7']
xor ['edx,', 'edx']
jnz ['short', 'loc_128A3']
mov ['eax,', '[ebp+var_4]']
imul ['ecx,', '[eax],', '0Ch']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[eax+ecx],', 'edx']
mov ['eax,', '[ebp+var_4]']
imul ['ecx,', '[eax],', '0Ch']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['edx,', '[ebp+arg_4]']
mov ['[eax+ecx+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
imul ['ecx,', '[eax],', '0Ch']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['edx,', '[ebp+arg_8]']
mov ['[eax+ecx+8],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_4]']
mov ['[edx],', 'ecx']
pop ['edi']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$AddRefTraits@VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@SAXPAVDataSourceSurface@gfx@mozilla@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsAddRefHelper@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@CAXPAVDataSourceSurface@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$AddRefTraits@VDrawEventRecorderPrivate@gfx@mozilla@@@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@SAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsAddRefHelper@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@CAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$AddRefTraits@VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@SAXPAVDrawTarget@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsAddRefHelper@?$RefPtr@VDrawTarget@gfx@mozilla@@@@CAXPAVDrawTarget@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$AddRefTraits@VDrawTargetRecording@gfx@mozilla@@@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@SAXPAVDrawTargetRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsAddRefHelper@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@CAXPAVDrawTargetRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$AddRefTraits@VFilterNode@gfx@mozilla@@@?$RefPtr@VFilterNode@gfx@mozilla@@@@SAXPAVFilterNode@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsAddRefHelper@?$RefPtr@VFilterNode@gfx@mozilla@@@@CAXPAVFilterNode@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$AddRefTraits@VGradientStops@gfx@mozilla@@@?$RefPtr@VGradientStops@gfx@mozilla@@@@SAXPAVGradientStops@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsAddRefHelper@?$RefPtr@VGradientStops@gfx@mozilla@@@@CAXPAVGradientStops@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$AddRefTraits@VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@SAXPAVPathBuilder@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsAddRefHelper@?$RefPtr@VPathBuilder@gfx@mozilla@@@@CAXPAVPathBuilder@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$AddRefTraits@VPathBuilderRecording@gfx@mozilla@@@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@SAXPAVPathBuilderRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsAddRefHelper@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@CAXPAVPathBuilderRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$AddRefTraits@VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@SAXPAVPathRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsAddRefHelper@?$RefPtr@VPathRecording@gfx@mozilla@@@@CAXPAVPathRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$AddRefTraits@VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@SAXPAVSourceSurface@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsAddRefHelper@?$RefPtr@VSourceSurface@gfx@mozilla@@@@CAXPAVSourceSurface@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_12A36']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['[eax],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_12A5A']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['[eax],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_12A7E']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['[eax],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_12AA2']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['[eax],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_12AC6']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['[eax],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_12AEA']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['[eax],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_12B0E']
mov ['ecx,', '[ebp+var_4]']
call ['??E?$AtomicBaseIncDec@I$01@detail@mozilla@@QAEIXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsAddRefHelper@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@CAXPAVDataSourceSurface@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?AddRef@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsAddRefHelper@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@CAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?AddRef@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsAddRefHelper@?$RefPtr@VDrawTarget@gfx@mozilla@@@@CAXPAVDrawTarget@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?AddRef@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsAddRefHelper@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@CAXPAVDrawTargetRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?AddRef@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsAddRefHelper@?$RefPtr@VFilterNode@gfx@mozilla@@@@CAXPAVFilterNode@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?AddRef@?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsAddRefHelper@?$RefPtr@VGradientStops@gfx@mozilla@@@@CAXPAVGradientStops@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?AddRef@?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsAddRefHelper@?$RefPtr@VPathBuilder@gfx@mozilla@@@@CAXPAVPathBuilder@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?AddRef@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsAddRefHelper@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@CAXPAVPathBuilderRecording@gfx@mozilla@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?AddRef@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsAddRefHelper@?$RefPtr@VPathRecording@gfx@mozilla@@@@CAXPAVPathRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?AddRef@?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsAddRefHelper@?$RefPtr@VSourceSurface@gfx@mozilla@@@@CAXPAVSourceSurface@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?AddRef@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsReleaseHelper@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@CAXPAVDataSourceSurface@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?Release@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsReleaseHelper@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@CAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?Release@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsReleaseHelper@?$RefPtr@VDrawTarget@gfx@mozilla@@@@CAXPAVDrawTarget@gfx@mozilla@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?Release@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsReleaseHelper@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@CAXPAVDrawTargetRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?Release@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsReleaseHelper@?$RefPtr@VFilterNode@gfx@mozilla@@@@CAXPAVFilterNode@gfx@mozilla@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?Release@?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsReleaseHelper@?$RefPtr@VGradientStops@gfx@mozilla@@@@CAXPAVGradientStops@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?Release@?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsReleaseHelper@?$RefPtr@VPathBuilder@gfx@mozilla@@@@CAXPAVPathBuilder@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?Release@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsReleaseHelper@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@CAXPAVPathBuilderRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?Release@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsReleaseHelper@?$RefPtr@VPathRecording@gfx@mozilla@@@@CAXPAVPathRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?Release@?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsReleaseHelper@?$RefPtr@VSourceSurface@gfx@mozilla@@@@CAXPAVSourceSurface@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?Release@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAEX_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '34h']
call ['?insert@?$unordered_set@_KU?$hash@_K@std@@U?$equal_to@_K@2@V?$allocator@_K@2@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@2@AB_K@Z']
lea ['ecx,', '[ebp+var_14]']
call ['??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@XZ']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+arg_0]']
call ['??BReferencePtr@gfx@mozilla@@QBEPAXXZ']
mov ['[ebp+var_8],', 'eax']
lea ['eax,', '[ebp+var_8]']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['?insert@?$unordered_set@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@V?$allocator@PBX@2@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@2@$$QAPBX@Z']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@XZ']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddUserData@ScaledFont@gfx@mozilla@@QAEXPAUUserDataKey@23@PAXP6AX1@Z@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['?Add@UserData@gfx@mozilla@@QAEXPAUUserDataKey@23@PAXP6AX1@Z@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddUserData@SourceSurface@gfx@mozilla@@QAEXPAUUserDataKey@23@PAXP6AX1@Z@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['?Add@UserData@gfx@mozilla@@QAEXPAUUserDataKey@23@PAXP6AX1@Z@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Arc@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@MMM_N@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AutoPrefix@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0B0h]']
and ['ecx,', '2']
jz ['short', 'loc_12E57']
mov ['byte', 'ptr', '[ebp+var_8+3],', '1']
jmp ['short', 'loc_12E5B']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_10]']
mov ['eax,', '[edx+14h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_28],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_28]']
push ['edx']
lea ['ecx,', '[ebp+var_18]']
call ['??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['ecx,', '[ebp+var_18]']
call ['??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
push ['eax']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[eax+3Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
dd ['offset', '$LN7_1']
dd ['offset', '$LN5_5']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$0 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$1 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__ehhandler$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-24h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?CrashAction@BasicLogger@gfx@mozilla@@SAXW4LogReason@23@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?CreateShadowDrawTarget@DrawTarget@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@M@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[edx+84h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_8]']
or ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?DefaultOptions@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@SAH_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
movzx ['eax,', '[ebp+arg_0]']
test ['eax,', 'eax']
jz ['short', 'loc_1301C']
mov ['[ebp+var_4],', '4']
jmp ['short', 'loc_13023']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_4]']
or ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Destroy@UserData@gfx@mozilla@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_1305A']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx]']
jge ['short', 'loc_130A2']
imul ['eax,', '[ebp+var_8],', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
cmp ['dword', 'ptr', '[edx+eax+8],', '0']
jz ['short', 'loc_130A0']
imul ['eax,', '[ebp+var_8],', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
mov ['eax,', '[edx+eax+4]']
push ['eax']
imul ['ecx,', '[ebp+var_8],', '0Ch']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[eax+ecx+8]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_13051']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__free']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_10],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?LogIt@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_1312E']
jmp ['short', 'loc_13194']
lea ['ecx,', '[ebp+var_34]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_34]']
call ['?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_1315C']
lea ['eax,', '[ebp+var_34]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?WriteLog@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
push ['offset', '??_C@_00CNPNBAHC@?$AA@']
lea ['ecx,', '[ebp+var_54]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_54]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_54]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10_16']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
mov ['ecx,', '[ebp+var_10]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN9_9']
db ['3', 'dup(0FFh)']
dd ['1Ch']
dd ['offset', '$LN7_7']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ$0 proc near
lea ['ecx,', '[ebp-34h]']
jmp ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
endp
__unwindfunclet$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ$1 proc near
lea ['ecx,', '[ebp-54h]']
jmp ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
endp
__ehhandler$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-50h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Flush@DrawTargetRecording@gfx@mozilla@@UAEXXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+24h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?FontDataProc@RecordedFontData@gfx@mozilla@@SAXPBEIIMPAX@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_10]']
mov ['[ebp+var_4],', 'eax']
push ['ecx']
movss ['xmm0,', '[ebp+arg_C]']
movss ['[esp+8+var_8],', 'xmm0']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?SetFontData@RecordedFontData@gfx@mozilla@@QAEXPBEIIM@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Get@UserData@gfx@mozilla@@QBEPAXPAUUserDataKey@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_132D1']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx]']
jge ['short', 'loc_132FF']
imul ['eax,', '[ebp+var_8],', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+eax]']
jnz ['short', 'loc_132FD']
imul ['edx,', '[ebp+var_8],', '0Ch']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['eax,', '[ecx+edx+4]']
jmp ['short', 'loc_13301']
jmp ['short', 'loc_132C8']
xor ['eax,', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetBackendType@DrawTargetRecording@gfx@mozilla@@UBE?AW4BackendType@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetBackendType@FilterNodeRecording@gfx@mozilla@@UAE?AW4FilterBackend@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetBackendType@GradientStopsRecording@gfx@mozilla@@UBE?AW4BackendType@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '6']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetBackendType@PathBuilderRecording@gfx@mozilla@@UBE?AW4BackendType@23@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '6']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetData@ScopedMap@DataSourceSurface@gfx@mozilla@@QBEPAEXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_133A2']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[ecx+8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetDataSurface@SourceSurfaceRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
call ['??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
mov ['[ebp+var_C],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_C]']
mov ['eax,', '[edx+14h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_8]']
or ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[eax+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetFilterNode@FilterNodeRecording@gfx@mozilla@@SAPAVFilterNode@23@PAV423@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?GetFilterNode@FilterNodeRecording@gfx@mozilla@@SAPAVFilterNode@23@PAV423@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0C8h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D4]']
mov ['ecx,', '32h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '2']
jz ['short', 'loc_1351F']
push ['offset', '??_C@_0DK@JJEBLML@Non?5recording?5filter?5node?5used?5w@']
push ['0FFFFFFFFh']
push ['0']
call ['?DefaultOptions@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@SAH_N@Z']
add ['esp,', '4']
push ['eax']
lea ['ecx,', '[ebp+var_CC]']
call ['??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['[ebp+var_D4],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_D4]']
call ['??6?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEAAV012@QBD@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_CC]']
call ['??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_1352A']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '8']
call ['??B?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '0D4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?GetFilterNode@FilterNodeRecording@gfx@mozilla@@SAPAVFilterNode@23@PAV423@@Z$0 proc near
lea ['ecx,', '[ebp-0CCh]']
jmp ['??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ']
endp
__ehhandler$?GetFilterNode@FilterNodeRecording@gfx@mozilla@@SAPAVFilterNode@23@PAV423@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0D4h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?GetFilterNode@FilterNodeRecording@gfx@mozilla@@SAPAVFilterNode@23@PAV423@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetFormat@DrawTarget@gfx@mozilla@@QBE?AW4SurfaceFormat@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['al,', '[eax+39h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetFormat@SourceSurfaceRecording@gfx@mozilla@@UBE?AW4SurfaceFormat@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
call ['??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedClearRect@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_09GPGGEOMP@ClearRect?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedCopySurface@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0M@EOFCJBAL@CopySurface?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedCreateSimilarDrawTarget@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0BI@HAALHLCF@CreateSimilarDrawTarget?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedDrawFilter@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0L@OHCNNFM@DrawFilter?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedDrawSurface@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0M@FPAGMAAM@DrawSurface?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedDrawSurfaceWithShadow@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0BG@KGEGJOEN@DrawSurfaceWithShadow?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedDrawTargetCreation@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0BE@EEEOOOM@DrawTarget?5Creation?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedDrawTargetDestruction@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0BH@OLFOHOKF@DrawTarget?5Destruction?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedFill@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_04CAMFALGN@Fill?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedFillGlyphs@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0L@JJNFGDBI@FillGlyphs?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedFillRect@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_08HBDJBON@FillRect?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedFilterNodeCreation@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0BE@PCJMNMPN@FilterNode?5Creation?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedFilterNodeDestruction@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0BH@JDMCLJID@FilterNode?5Destruction?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedFilterNodeSetAttribute@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0N@OOIBANPL@SetAttribute?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedFilterNodeSetInput@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_08KOAGOIFI@SetInput?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedFontData@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_09NHBGBJBJ@Font?5Data?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedGradientStopsCreation@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0BH@IBJOEPML@GradientStops?5Creation?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedGradientStopsDestruction@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0BK@HEGJICH@GradientStops?5Destruction?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedMask@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_04MKJKGABJ@Mask?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedMaskSurface@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0M@JMBELIOH@MaskSurface?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedPopClip@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_07LPLNABOG@PopClip?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedPopLayer@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_08BHONKBFI@PopLayer?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedPushClip@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_08LAKJJBCJ@PushClip?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedPushClipRect@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0N@NKKGNEEO@PushClipRect?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedPushLayer@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_09BMDJGKOJ@PushLayer?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedScaledFontCreation@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0BE@JGKBADFK@ScaledFont?5Creation?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedScaledFontDestruction@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0BH@BBDNGHMD@ScaledFont?5Destruction?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedSetTransform@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0N@GMAEDBFE@SetTransform?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedSnapshot@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_08PJJDBLOH@Snapshot?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedSourceSurfaceCreation@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0BH@GPIFHBMB@SourceSurface?5Creation?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedSourceSurfaceDestruction@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0BK@MBHBMPIO@SourceSurface?5Destruction?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedStroke@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_06FMECHDKF@Stroke?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedStrokeLine@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0L@NHOHLGP@StrokeLine?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedStrokeRect@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0L@MDHJFNHH@StrokeRect?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetNativeSurface@DrawTarget@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetNativeSurface@DrawTargetRecording@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+0A0h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetNativeSurface@SourceSurface@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetObjectRef@RecordedCreateSimilarDrawTarget@gfx@mozilla@@UBE?AUReferencePtr@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[eax+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetObjectRef@RecordedDrawTargetCreation@gfx@mozilla@@UBE?AUReferencePtr@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[eax+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetObjectRef@RecordedDrawTargetDestruction@gfx@mozilla@@UBE?AUReferencePtr@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[eax+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetObjectRef@RecordedFilterNodeCreation@gfx@mozilla@@UBE?AUReferencePtr@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[eax+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetObjectRef@RecordedFilterNodeDestruction@gfx@mozilla@@UBE?AUReferencePtr@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[eax+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetObjectRef@RecordedFilterNodeSetAttribute@gfx@mozilla@@UBE?AUReferencePtr@23@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[eax+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetObjectRef@RecordedFilterNodeSetInput@gfx@mozilla@@UBE?AUReferencePtr@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[eax+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetObjectRef@RecordedFontData@gfx@mozilla@@UBE?AUReferencePtr@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetObjectRef@RecordedGradientStopsCreation@gfx@mozilla@@UBE?AUReferencePtr@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[eax+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetObjectRef@RecordedGradientStopsDestruction@gfx@mozilla@@UBE?AUReferencePtr@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[eax+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetObjectRef@RecordedScaledFontCreation@gfx@mozilla@@UBE?AUReferencePtr@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[eax+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetObjectRef@RecordedScaledFontDestruction@gfx@mozilla@@UBE?AUReferencePtr@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[eax+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetObjectRef@RecordedSnapshot@gfx@mozilla@@UBE?AUReferencePtr@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[eax+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetObjectRef@RecordedSourceSurfaceCreation@gfx@mozilla@@UBE?AUReferencePtr@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[eax+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetObjectRef@RecordedSourceSurfaceDestruction@gfx@mozilla@@UBE?AUReferencePtr@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[eax+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetSize@DrawTargetRecording@gfx@mozilla@@UAE?AU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+18h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetSize@SourceSurfaceRecording@gfx@mozilla@@UBE?AU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
call ['??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetStride@ScopedMap@DataSourceSurface@gfx@mozilla@@QBEHXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_14302']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[ecx+0Ch]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetType@ColorPattern@gfx@mozilla@@UBE?AW4PatternType@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['al,', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetType@DrawTargetRecording@gfx@mozilla@@UBE?AW4DrawTargetType@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetType@LinearGradientPattern@gfx@mozilla@@UBE?AW4PatternType@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetType@RadialGradientPattern@gfx@mozilla@@UBE?AW4PatternType@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '3']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetType@SourceSurfaceRecording@gfx@mozilla@@UBE?AW4SurfaceType@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '0Ah']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetType@SurfacePattern@gfx@mozilla@@UBE?AW4PatternType@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetUserData@ScaledFont@gfx@mozilla@@QAEPAXPAUUserDataKey@23@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['?Get@UserData@gfx@mozilla@@QBEPAXPAUUserDataKey@23@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GuaranteePersistance@SourceSurface@gfx@mozilla@@MAEXXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?HasStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAE_N_K@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?HasStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAE_N_K@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '30h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
lea ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '34h']
call ['?end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_30]']
mov ['[ebp+var_34],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_34]']
push ['edx']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '34h']
call ['?find@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z']
mov ['[ebp+var_38],', 'eax']
mov ['edx,', '[ebp+var_38]']
mov ['[ebp+var_3C],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_3C]']
call ['??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QBE_NABV01@@Z']
mov ['[ebp+var_11],', 'al']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
mov ['al,', '[ebp+var_11]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?HasStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAE_N_K@Z$0 proc near
lea ['ecx,', '[ebp-2Ch]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?HasStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAE_N_K@Z$1 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?HasStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAE_N_K@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-38h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?HasStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAE_N_K@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?HasStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAE_NUReferencePtr@23@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?HasStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAE_NUReferencePtr@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '34h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_40]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
lea ['ecx,', '[ebp+arg_0]']
call ['??BReferencePtr@gfx@mozilla@@QBEPAXXZ']
mov ['dword', 'ptr', '[ebp+var_18],', 'eax']
lea ['eax,', '[ebp+var_30]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['?end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_34]']
mov ['[ebp+var_38],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_38]']
push ['edx']
lea ['eax,', '[ebp+var_18]']
push ['eax']
lea ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['?find@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z']
mov ['[ebp+var_3C],', 'eax']
mov ['edx,', '[ebp+var_3C]']
mov ['[ebp+var_40],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_40]']
call ['??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z']
mov ['[ebp+var_11],', 'al']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_24]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_30]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['al,', '[ebp+var_11]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '40h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?HasStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAE_NUReferencePtr@23@@Z$0 proc near
lea ['ecx,', '[ebp-30h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?HasStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAE_NUReferencePtr@23@@Z$1 proc near
lea ['ecx,', '[ebp-24h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?HasStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAE_NUReferencePtr@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-3Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?HasStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAE_NUReferencePtr@23@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Init@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@AAEXH_NW4LogReason@23@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+0B0h],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_8]']
mov ['[edx+0B4h],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['dl,', '[ebp+arg_4]']
mov ['[ecx+0B8h],', 'dl']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0B8h]']
test ['ecx,', 'ecx']
jz ['loc_14777']
mov ['ecx,', '[ebp+var_4]']
call ['?AutoPrefix@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['loc_146ED']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0B0h]']
and ['ecx,', '4']
jz ['short', 'loc_146A3']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_14676']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '10h']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_1467D']
mov ['[ebp+var_8],', '0']
mov ['esi,', 'esp']
push ['2']
push ['offset', '??_C@_04HGKILAJC@?$FLGFX?$AA@']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
add ['esp,', '8']
mov ['ecx,', 'eax']
call ['dword', 'ptr', 'ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_146ED']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_146B4']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_146BB']
mov ['[ebp+var_C],', '0']
push ['offset', '??_C@_01JOAMLHOP@?9?$AA@']
mov ['esi,', 'esp']
push ['2']
push ['offset', '??_C@_04HGKILAJC@?$FLGFX?$AA@']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
add ['esp,', '8']
mov ['ecx,', 'eax']
call ['dword', 'ptr', 'ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
add ['esp,', '8']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0B0h]']
and ['ecx,', '8']
jz ['short', 'loc_1474E']
mov ['ecx,', '[ebp+var_4]']
call ['?ValidReason@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1474E']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_1471B']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '10h']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_14722']
mov ['[ebp+var_10],', '0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+0B4h]']
push ['edx']
push ['offset', '??_C@_01CLKCMJKC@?5?$AA@']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
add ['esp,', '8']
mov ['ecx,', 'eax']
call ['dword', 'ptr', 'ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_1475F']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_14766']
mov ['[ebp+var_14],', '0']
push ['offset', '??_C@_03FLKELDHI@?$FN?3?5?$AA@']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
add ['esp,', '8']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?IsCurrentGroupOpaque@DrawTarget@gfx@mozilla@@UAE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?GetFormat@DrawTarget@gfx@mozilla@@QBE?AW4SurfaceFormat@23@XZ']
cmp ['al,', '1']
jnz ['short', 'loc_147B4']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_147BB']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?IsCurrentGroupOpaque@DrawTargetRecording@gfx@mozilla@@UAE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+0B0h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?IsDualDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['al,', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?IsRecording@DrawTarget@gfx@mozilla@@UBE_NXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['al,', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?IsRecording@DrawTargetRecording@gfx@mozilla@@UBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?IsTiledDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ proc	near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['al,', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?IsValid@DrawTarget@gfx@mozilla@@UBE_NXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?IsValid@GradientStops@gfx@mozilla@@UBE_NXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?IsValid@SourceSurface@gfx@mozilla@@UBE_NXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?LockBits@DrawTarget@gfx@mozilla@@UAE_NPAPAEPAU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@PAHPAW4SurfaceFormat@23@PAU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['al,', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?LogIt@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['al,', '[eax+0B8h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?NoNewline@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+0B0h]']
and ['eax,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?OutputMessage@BasicLogger@gfx@mozilla@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:?sGfxLogLevel@LoggingPrefs@gfx@mozilla@@2HA']
cmp ['eax,', '[ebp+arg_4]']
jl ['short', 'loc_1495D']
cmp ['dword', 'ptr', 'ds:?sGfxLogLevel@LoggingPrefs@gfx@mozilla@@2HA,', '4']
jge ['short', 'loc_14921']
cmp ['[ebp+arg_4],', '3']
jge ['short', 'loc_1495D']
movzx ['ecx,', '[ebp+arg_8]']
test ['ecx,', 'ecx']
jz ['short', 'loc_14932']
mov ['[ebp+var_4],', 'offset', '??_C@_00CNPNBAHC@?$AA@']
jmp ['short', 'loc_14939']
mov ['[ebp+var_4],', 'offset', '??_C@_01EEMJAFIK@?6?$AA@']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ']
push ['eax']
push ['offset', '??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@']
call ['dword', 'ptr', 'ds:__imp__printf']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?OutputSimpleEventInfo@RecordedEvent@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?PlayEvent@RecordedEvent@gfx@mozilla@@UBEXPAVTranslator@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?PopLayer@DrawTarget@gfx@mozilla@@UAEXXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_149A4']
int ['3']
mov ['dword', 'ptr', '$SG85048,', '3E6h']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_149A8']
xor ['edx,', 'edx']
jnz ['short', 'loc_149A4']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?PushLayer@DrawTarget@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_14A04']
int ['3']
mov ['dword', 'ptr', '$SG85048,', '3DFh']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_14A08']
xor ['edx,', 'edx']
jnz ['short', 'loc_14A04']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?RecordToStream@RecordedEvent@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$AddRefTraits@VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@SAXPAVDataSourceSurface@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsReleaseHelper@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@CAXPAVDataSourceSurface@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$AddRefTraits@VDrawEventRecorderPrivate@gfx@mozilla@@@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@SAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsReleaseHelper@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@CAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$AddRefTraits@VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@SAXPAVDrawTarget@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsReleaseHelper@?$RefPtr@VDrawTarget@gfx@mozilla@@@@CAXPAVDrawTarget@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$AddRefTraits@VDrawTargetRecording@gfx@mozilla@@@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@SAXPAVDrawTargetRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsReleaseHelper@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@CAXPAVDrawTargetRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$AddRefTraits@VFilterNode@gfx@mozilla@@@?$RefPtr@VFilterNode@gfx@mozilla@@@@SAXPAVFilterNode@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsReleaseHelper@?$RefPtr@VFilterNode@gfx@mozilla@@@@CAXPAVFilterNode@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$AddRefTraits@VGradientStops@gfx@mozilla@@@?$RefPtr@VGradientStops@gfx@mozilla@@@@SAXPAVGradientStops@gfx@mozilla@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsReleaseHelper@?$RefPtr@VGradientStops@gfx@mozilla@@@@CAXPAVGradientStops@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$AddRefTraits@VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@SAXPAVPathBuilder@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsReleaseHelper@?$RefPtr@VPathBuilder@gfx@mozilla@@@@CAXPAVPathBuilder@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$AddRefTraits@VPathBuilderRecording@gfx@mozilla@@@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@SAXPAVPathBuilderRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsReleaseHelper@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@CAXPAVPathBuilderRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$AddRefTraits@VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@SAXPAVPathRecording@gfx@mozilla@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsReleaseHelper@?$RefPtr@VPathRecording@gfx@mozilla@@@@CAXPAVPathRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$AddRefTraits@VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@SAXPAVSourceSurface@gfx@mozilla@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsReleaseHelper@?$RefPtr@VSourceSurface@gfx@mozilla@@@@CAXPAVSourceSurface@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_14B7C']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
sub ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_14BEC']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_14BB0']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '4']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_14BB7']
mov ['[ebp+var_18],', '0']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_14BE5']
mov ['esi,', 'esp']
push ['1']
mov ['eax,', '[ebp+var_C]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_14BEC']
mov ['[ebp+var_1C],', '0']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_14C20']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
sub ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_14C90']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_14C54']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '4']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_14C5B']
mov ['[ebp+var_18],', '0']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_14C89']
mov ['esi,', 'esp']
push ['1']
mov ['eax,', '[ebp+var_C]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_14C90']
mov ['[ebp+var_1C],', '0']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_14CC4']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
sub ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_14D34']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_14CF8']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '4']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_14CFF']
mov ['[ebp+var_18],', '0']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_14D2D']
mov ['esi,', 'esp']
push ['1']
mov ['eax,', '[ebp+var_C]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_14D34']
mov ['[ebp+var_1C],', '0']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_14D68']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
sub ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_14DD8']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_14D9C']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '4']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_14DA3']
mov ['[ebp+var_18],', '0']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_14DD1']
mov ['esi,', 'esp']
push ['1']
mov ['eax,', '[ebp+var_C]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_14DD8']
mov ['[ebp+var_1C],', '0']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_14E0C']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
sub ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_14E7C']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_14E40']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '4']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_14E47']
mov ['[ebp+var_18],', '0']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_14E75']
mov ['esi,', 'esp']
push ['1']
mov ['eax,', '[ebp+var_C]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_14E7C']
mov ['[ebp+var_1C],', '0']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_14EB0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
sub ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_14F20']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_14EE4']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '4']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_14EEB']
mov ['[ebp+var_18],', '0']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_14F19']
mov ['esi,', 'esp']
push ['1']
mov ['eax,', '[ebp+var_C]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_14F20']
mov ['[ebp+var_1C],', '0']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_14F51']
mov ['ecx,', '[ebp+var_4]']
call ['??F?$AtomicBaseIncDec@I$01@detail@mozilla@@QAEIXZ']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_14FB3']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_14F77']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '4']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_14F7E']
mov ['[ebp+var_14],', '0']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_14FAC']
mov ['esi,', 'esp']
push ['1']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_14FB3']
mov ['[ebp+var_18],', '0']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?ReleaseBits@DrawTarget@gfx@mozilla@@UAEXPAE@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?RemoveStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['dword', 'ptr', '[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+arg_0]']
call ['??BReferencePtr@gfx@mozilla@@QBEPAXXZ']
mov ['dword', 'ptr', '[ebp+var_8],', 'eax']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_1502C']
int ['3']
mov ['dword', 'ptr', '$SG85048,', '1EDh']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_15030']
xor ['edx,', 'edx']
jnz ['short', 'loc_1502C']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_1508C']
int ['3']
mov ['dword', 'ptr', '$SG85048,', '1EFh']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_15090']
xor ['edx,', 'edx']
jnz ['short', 'loc_1508C']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_150EC']
int ['3']
mov ['dword', 'ptr', '$SG85048,', '1ECh']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_150F0']
xor ['edx,', 'edx']
jnz ['short', 'loc_150EC']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_1514C']
int ['3']
mov ['dword', 'ptr', '$SG85048,', '1F3h']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_15150']
xor ['edx,', 'edx']
jnz ['short', 'loc_1514C']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_151AC']
int ['3']
mov ['dword', 'ptr', '$SG85048,', '1F0h']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_151B0']
xor ['edx,', 'edx']
jnz ['short', 'loc_151AC']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_1520C']
int ['3']
mov ['dword', 'ptr', '$SG85048,', '1EEh']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_15210']
xor ['edx,', 'edx']
jnz ['short', 'loc_1520C']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_1526C']
int ['3']
mov ['dword', 'ptr', '$SG85048,', '1EBh']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_15270']
xor ['edx,', 'edx']
jnz ['short', 'loc_1526C']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABUColor@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_152CC']
int ['3']
mov ['dword', 'ptr', '$SG85048,', '1F4h']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_152D0']
xor ['edx,', 'edx']
jnz ['short', 'loc_152CC']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABVMatrix5x4@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_1532C']
int ['3']
mov ['dword', 'ptr', '$SG85048,', '1F2h']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_15330']
xor ['edx,', 'edx']
jnz ['short', 'loc_1532C']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABVMatrix@23@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_1538C']
int ['3']
mov ['dword', 'ptr', '$SG85048,', '1F1h']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_15390']
xor ['edx,', 'edx']
jnz ['short', 'loc_1538C']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNode@gfx@mozilla@@UAEXII@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_153EC']
int ['3']
mov ['dword', 'ptr', '$SG85048,', '1E9h']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_153F0']
xor ['edx,', 'edx']
jnz ['short', 'loc_153EC']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIM@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_1544C']
int ['3']
mov ['dword', 'ptr', '$SG85048,', '1EAh']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_15450']
xor ['edx,', 'edx']
jnz ['short', 'loc_1544C']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIPBMI@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_154AC']
int ['3']
mov ['dword', 'ptr', '$SG85048,', '1F5h']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_154B0']
xor ['edx,', 'edx']
jnz ['short', 'loc_154AC']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNode@gfx@mozilla@@UAEXI_N@Z	proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_1550C']
int ['3']
mov ['dword', 'ptr', '$SG85048,', '1E8h']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_15510']
xor ['edx,', 'edx']
jnz ['short', 'loc_1550C']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['5']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[eax]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['ecx,', '[ebp+var_48]']
call ['??$?0U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z']
mov ['[ebp+var_4C],', 'eax']
mov ['edx,', '[ebp+var_4C]']
mov ['[ebp+var_50],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_50]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_48]']
call ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
mov ['[ebp+var_54],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_54]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_54]']
mov ['eax,', '[edx+30h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$0 proc	near
lea ['ecx,', '[ebp-48h]']
jmp ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['7']
mov ['eax,', '[ebp+arg_4]']
sub ['esp,', '10h']
mov ['ecx,', 'esp']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['edx,', '[eax+4]']
mov ['[ecx+4],', 'edx']
mov ['edx,', '[eax+8]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[eax+0Ch]']
mov ['[ecx+0Ch],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
lea ['ecx,', '[ebp+var_48]']
call ['??$?0U?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z']
mov ['[ebp+var_4C],', 'eax']
mov ['eax,', '[ebp+var_4C]']
mov ['[ebp+var_50],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_50]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_48]']
call ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
mov ['[ebp+var_54],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_54]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_54]']
mov ['eax,', '[edx+28h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$0 proc near
lea ['ecx,', '[ebp-48h]']
jmp ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['4']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[eax]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['ecx,', '[ebp+var_48]']
call ['??$?0U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z']
mov ['[ebp+var_4C],', 'eax']
mov ['edx,', '[ebp+var_4C]']
mov ['[ebp+var_50],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_50]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_48]']
call ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
mov ['[ebp+var_54],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_54]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_54]']
mov ['eax,', '[edx+34h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$0 proc near
lea ['ecx,', '[ebp-48h]']
jmp ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['0Bh']
mov ['eax,', '[ebp+arg_4]']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['edx,', '[eax+4]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[eax+8]']
mov ['[ecx+8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
lea ['ecx,', '[ebp+var_48]']
call ['??$?0U?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z']
mov ['[ebp+var_4C],', 'eax']
mov ['eax,', '[ebp+var_4C]']
mov ['[ebp+var_50],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_50]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_48]']
call ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
mov ['[ebp+var_54],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_54]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_54]']
mov ['eax,', '[edx+18h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z$0 proc	near
lea ['ecx,', '[ebp-48h]']
jmp ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['8']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[eax]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['ecx,', '[ebp+var_48]']
call ['??$?0U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z']
mov ['[ebp+var_4C],', 'eax']
mov ['edx,', '[ebp+var_4C]']
mov ['[ebp+var_50],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_50]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_48]']
call ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
mov ['[ebp+var_54],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_54]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_54]']
mov ['eax,', '[edx+24h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z$0 proc near
lea ['ecx,', '[ebp-48h]']
jmp ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['6']
mov ['eax,', '[ebp+arg_4]']
sub ['esp,', '10h']
mov ['ecx,', 'esp']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['edx,', '[eax+4]']
mov ['[ecx+4],', 'edx']
mov ['edx,', '[eax+8]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[eax+0Ch]']
mov ['[ecx+0Ch],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
lea ['ecx,', '[ebp+var_48]']
call ['??$?0U?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z']
mov ['[ebp+var_4C],', 'eax']
mov ['eax,', '[ebp+var_4C]']
mov ['[ebp+var_50],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_50]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_48]']
call ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
mov ['[ebp+var_54],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_54]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_54]']
mov ['eax,', '[edx+2Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z$0	proc near
lea ['ecx,', '[ebp-48h]']
jmp ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['3']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[eax]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['ecx,', '[ebp+var_48]']
call ['??$?0U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z']
mov ['[ebp+var_4C],', 'eax']
mov ['edx,', '[ebp+var_4C]']
mov ['[ebp+var_50],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_50]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_48]']
call ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
mov ['[ebp+var_54],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_54]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_54]']
mov ['eax,', '[edx+38h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z$0	proc near
lea ['ecx,', '[ebp-48h]']
jmp ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABUColor@23@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABUColor@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['0Ch']
mov ['eax,', '[ebp+arg_4]']
sub ['esp,', '10h']
mov ['ecx,', 'esp']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['edx,', '[eax+4]']
mov ['[ecx+4],', 'edx']
mov ['edx,', '[eax+8]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[eax+0Ch]']
mov ['[ecx+0Ch],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
lea ['ecx,', '[ebp+var_48]']
call ['??$?0UColor@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IUColor@12@W4ArgType@012@@Z']
mov ['[ebp+var_4C],', 'eax']
mov ['eax,', '[ebp+var_4C]']
mov ['[ebp+var_50],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_50]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_48]']
call ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
mov ['[ebp+var_54],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_54]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_54]']
mov ['eax,', '[edx+14h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABUColor@23@@Z$0 proc near
lea ['ecx,', '[ebp-48h]']
jmp ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABUColor@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABUColor@23@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix5x4@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix5x4@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['0Ah']
mov ['esi,', '[ebp+arg_4]']
sub ['esp,', '50h']
mov ['ecx,', '14h']
mov ['edi,', 'esp']
rep ['movsd']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['ecx,', '[ebp+var_48]']
call ['??$?0VMatrix5x4@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix5x4@12@W4ArgType@012@@Z']
mov ['[ebp+var_4C],', 'eax']
mov ['edx,', '[ebp+var_4C]']
mov ['[ebp+var_50],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_50]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_48]']
call ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
mov ['[ebp+var_54],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_54]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_54]']
mov ['eax,', '[edx+1Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix5x4@23@@Z$0 proc near
lea ['ecx,', '[ebp-48h]']
jmp ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix5x4@23@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix5x4@23@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['9']
mov ['eax,', '[ebp+arg_4]']
sub ['esp,', '18h']
mov ['ecx,', 'esp']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['edx,', '[eax+4]']
mov ['[ecx+4],', 'edx']
mov ['edx,', '[eax+8]']
mov ['[ecx+8],', 'edx']
mov ['edx,', '[eax+0Ch]']
mov ['[ecx+0Ch],', 'edx']
mov ['edx,', '[eax+10h]']
mov ['[ecx+10h],', 'edx']
mov ['eax,', '[eax+14h]']
mov ['[ecx+14h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
lea ['ecx,', '[ebp+var_48]']
call ['??$?0VMatrix@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix@12@W4ArgType@012@@Z']
mov ['[ebp+var_4C],', 'eax']
mov ['eax,', '[ebp+var_4C]']
mov ['[ebp+var_50],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_50]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_48]']
call ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
mov ['[ebp+var_54],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_54]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_54]']
mov ['eax,', '[edx+20h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix@23@@Z$0 proc near
lea ['ecx,', '[ebp-48h]']
jmp ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix@23@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix@23@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXII@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXII@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
lea ['ecx,', '[ebp+var_48]']
call ['??$?0I@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IIW4ArgType@012@@Z']
mov ['[ebp+var_4C],', 'eax']
mov ['eax,', '[ebp+var_4C]']
mov ['[ebp+var_50],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_50]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_48]']
call ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
mov ['[ebp+var_54],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_54]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_54]']
mov ['eax,', '[edx+40h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXII@Z$0 proc near
lea ['ecx,', '[ebp-48h]']
jmp ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXII@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXII@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIM@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIM@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['2']
push ['ecx']
movss ['xmm0,', '[ebp+arg_4]']
movss ['[esp+68h+var_68],', 'xmm0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['ecx,', '[ebp+var_48]']
call ['??$?0M@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IMW4ArgType@012@@Z']
mov ['[ebp+var_4C],', 'eax']
mov ['edx,', '[ebp+var_4C]']
mov ['[ebp+var_50],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_50]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_48]']
call ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
mov ['[ebp+var_54],', 'eax']
mov ['esi,', 'esp']
push ['ecx']
movss ['xmm0,', '[ebp+arg_4]']
movss ['[esp+64h+var_64],', 'xmm0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_54]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_54]']
mov ['edx,', '[eax+3Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIM@Z$0 proc near
lea ['ecx,', '[ebp-48h]']
jmp ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIM@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIM@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIPBMI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIPBMI@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_48]']
call ['??0RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IPBMI@Z']
mov ['[ebp+var_4C],', 'eax']
mov ['ecx,', '[ebp+var_4C]']
mov ['[ebp+var_50],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_50]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_48]']
call ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
mov ['[ebp+var_54],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_54]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_54]']
mov ['eax,', '[edx+10h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIPBMI@Z$0 proc near
lea ['ecx,', '[ebp-48h]']
jmp ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIPBMI@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIPBMI@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXI_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXI_N@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['1']
movzx ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
lea ['ecx,', '[ebp+var_48]']
call ['??$?0_N@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@I_NW4ArgType@012@@Z']
mov ['[ebp+var_4C],', 'eax']
mov ['eax,', '[ebp+var_4C]']
mov ['[ebp+var_50],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_50]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_48]']
call ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
mov ['[ebp+var_54],', 'eax']
mov ['esi,', 'esp']
movzx ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_54]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_54]']
mov ['eax,', '[edx+44h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXI_N@Z$0 proc	near
lea ['ecx,', '[ebp-48h]']
jmp ['??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXI_N@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXI_N@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetInput@FilterNode@gfx@mozilla@@UAEXIPAV123@@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_1639C']
int ['3']
mov ['dword', 'ptr', '$SG85048,', '1E6h']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_163A0']
xor ['edx,', 'edx']
jnz ['short', 'loc_1639C']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetInput@FilterNode@gfx@mozilla@@UAEXIPAVSourceSurface@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_163FC']
int ['3']
mov ['dword', 'ptr', '$SG85048,', '1E5h']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_16400']
xor ['edx,', 'edx']
jnz ['short', 'loc_163FC']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVFilterNode@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVFilterNode@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_16487']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_48]']
call ['??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@I0@Z']
mov ['[ebp+var_4C],', 'eax']
mov ['ecx,', '[ebp+var_4C]']
mov ['[ebp+var_50],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_50]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_48]']
call ['??1RecordedFilterNodeSetInput@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
mov ['[ebp+var_54],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['?GetFilterNode@FilterNodeRecording@gfx@mozilla@@SAPAVFilterNode@23@PAV423@@Z']
add ['esp,', '4']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_54]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_54]']
mov ['edx,', '[eax+8]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVFilterNode@23@@Z$0 proc near
lea ['ecx,', '[ebp-48h]']
jmp ['??1RecordedFilterNodeSetInput@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVFilterNode@23@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVFilterNode@23@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVSourceSurface@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVSourceSurface@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['offset', '??_C@_08KOAGOIFI@SetInput?$AA@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
push ['eax']
call ['?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_48]']
call ['??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@IPAVSourceSurface@12@@Z']
mov ['[ebp+var_4C],', 'eax']
mov ['ecx,', '[ebp+var_4C]']
mov ['[ebp+var_50],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_50]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ']
mov ['ecx,', 'eax']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_48]']
call ['??1RecordedFilterNodeSetInput@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ']
mov ['[ebp+var_54],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['?GetSourceSurface@gfx@mozilla@@YAPAVSourceSurface@12@PAV312@@Z']
add ['esp,', '4']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_54]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_54]']
mov ['edx,', '[eax+0Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVSourceSurface@23@@Z$0 proc near
lea ['ecx,', '[ebp-48h]']
jmp ['??1RecordedFilterNodeSetInput@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVSourceSurface@23@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVSourceSurface@23@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetPermitSubpixelAA@DrawTarget@gfx@mozilla@@UAEX_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '[ebp+arg_0]']
and ['al,', '1']
shl ['al,', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['dl,', '[ecx+38h]']
and ['dl,', '0FDh']
or ['dl,', 'al']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+38h],', 'dl']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetTransform@DrawTarget@gfx@mozilla@@UAEXABVMatrix@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '10h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['edx,', '[ecx+4]']
mov ['[eax+4],', 'edx']
mov ['edx,', '[ecx+8]']
mov ['[eax+8],', 'edx']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+0Ch],', 'edx']
mov ['edx,', '[ecx+10h]']
mov ['[eax+10h],', 'edx']
mov ['ecx,', '[ecx+14h]']
mov ['[eax+14h],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['al,', '[edx+38h]']
or ['al,', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+38h],', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?ShouldOutputMessage@BasicLogger@gfx@mozilla@@SA_NH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'dword', 'ptr', 'ds:?sGfxLogLevel@LoggingPrefs@gfx@mozilla@@2HA']
cmp ['eax,', '[ebp+arg_0]']
jl ['short', 'loc_16700']
cmp ['dword', 'ptr', 'ds:?sGfxLogLevel@LoggingPrefs@gfx@mozilla@@2HA,', '4']
jge ['short', 'loc_166FC']
cmp ['[ebp+arg_0],', '3']
jge ['short', 'loc_16700']
mov ['al,', '1']
jmp ['short', 'loc_16702']
xor ['al,', 'al']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SupportsRegionClipping@DrawTarget@gfx@mozilla@@UBE_NXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?ValidReason@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+0B4h],', '0FFFFFFFFh']
jle ['short', 'loc_16750']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+0B4h],', '65h']
jge ['short', 'loc_16750']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_16757']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?WriteLog@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?LogIt@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_167D8']
mov ['ecx,', '[ebp+var_4]']
call ['?NoNewline@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ']
movzx ['ecx,', 'al']
push ['ecx']
push ['2']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?OutputMessage@BasicLogger@gfx@mozilla@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0B0h]']
and ['ecx,', '4']
jz ['short', 'loc_167A9']
xor ['edx,', 'edx']
jnz ['short', 'loc_167A5']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0B0h]']
and ['ecx,', '8']
jz ['short', 'loc_167D8']
mov ['ecx,', '[ebp+var_4]']
call ['?ValidReason@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_167D8']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0B4h]']
push ['ecx']
call ['?CrashAction@BasicLogger@gfx@mozilla@@SAXW4LogReason@23@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '20h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_16886']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_me@_Iterator_base12@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_168F1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
cmp ['eax,', '[ebp+var_20]']
jz ['short', 'loc_168F1']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_28]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_me@_Iterator_base12@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[edx+4]']
mov ['[ecx+4],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_10]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_28]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
dd ['offset', '$LN11_0']
dd ['offset', '$LN8_0']
dd ['0FFFFFFD8h,', '4']
dd ['offset', '$LN9']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 proc near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-18h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 proc near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-28h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-28h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_C+3]']
call ['?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_1']
dd ['offset', '$LN3_1']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_C+3]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_13']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_9']
dd ['offset', '$LN3_9']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_C+3]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_7']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_3']
dd ['offset', '$LN3_3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_C+3]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_10']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_6']
dd ['offset', '$LN3_6']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '10h']
jnb ['short', 'loc_16C2E']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
add ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
push ['ecx']
call ['?move@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
jmp ['short', 'loc_16C59']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
push ['edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
mov ['[eax+14h],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
mov ['[eax+18h],', 'edx']
push ['0']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Atomic_fetch_add_4@std@@YAKPCKKW4memory_order@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '5']
ja ['short', 'loc_16D06']
mov ['ecx,', '[ebp+var_4]']
jmp ['ds:$LN12_0[ecx*4]']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_Fetch_add_relaxed_4@std@@YAKPCKK@Z']
add ['esp,', '8']
jmp ['loc_16D8E']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Fetch_add_acquire_4@std@@YAKPCKK@Z']
add ['esp,', '8']
jmp ['loc_16D8E']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?_Fetch_add_release_4@std@@YAKPCKK@Z']
add ['esp,', '8']
jmp ['loc_16D8E']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_Fetch_add_seq_cst_4@std@@YAKPCKK@Z']
add ['esp,', '8']
jmp ['loc_16D8E']
mov ['esi,', 'esp']
push ['698h']
push ['offset', '??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1CK@BEGEBJJG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', 'offset', '??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@']
test ['ecx,', 'ecx']
jz ['short', 'loc_16D34']
xor ['edx,', 'edx']
jnz ['short', 'loc_16D64']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['698h']
push ['offset', '??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_16D64']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['698h']
push ['offset', '??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DC@FMPHIJPC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAf?$AAe?$AAt?$AAc?$AAh?$AA_?$AAa?$AAd?$AAd?$AA_?$AA4?$AA?$AA@']
push ['offset', '??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN4_0']
dd ['offset', '$LN4_0']
dd ['offset', '$LN3_0']
dd ['offset', '$LN2']
dd ['offset', '$LN2']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Atomic_fetch_sub_4@std@@YAKPCKKW4memory_order@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
xor ['ecx,', 'ecx']
sub ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Atomic_fetch_add_4@std@@YAKPCKKW4memory_order@1@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Atomic_store_4@std@@YAXPCKKW4memory_order@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_16E02']
cmp ['[ebp+var_4],', '3']
jz ['short', 'loc_16E17']
cmp ['[ebp+var_4],', '5']
jz ['short', 'loc_16E2C']
jmp ['short', 'loc_16E41']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Store_relaxed_4@std@@YAXPCKK@Z']
add ['esp,', '8']
jmp ['loc_16EC7']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?_Store_release_4@std@@YAXPCKK@Z']
add ['esp,', '8']
jmp ['loc_16EC7']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_Store_seq_cst_4@std@@YAXPCKK@Z']
add ['esp,', '8']
jmp ['loc_16EC7']
mov ['esi,', 'esp']
push ['577h']
push ['offset', '??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1CK@BEGEBJJG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', 'offset', '??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@']
test ['ecx,', 'ecx']
jz ['short', 'loc_16E6F']
xor ['edx,', 'edx']
jnz ['short', 'loc_16E9F']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['577h']
push ['offset', '??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_16E9F']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['577h']
push ['offset', '??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1CK@BEBCCGEN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAs?$AAt?$AAo?$AAr?$AAe?$AA_?$AA4?$AA?$AA@']
push ['offset', '??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Begin@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '1Ch']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
push ['1']
lea ['eax,', '[ebp+var_1C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@I@Z']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_16FB3']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_18]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
lea ['ecx,', '[ebp+var_1C+2]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['[ebp+var_24],', 'eax']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
call ['??$addressof@PAU?$_List_node@PBXPAX@std@@@std@@YAPAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
call ['??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['[ebp+var_28],', 'eax']
lea ['edx,', '[ebp+var_1C+1]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['[ebp+var_2C],', 'eax']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
call ['??$addressof@PAU?$_List_node@PBXPAX@std@@@std@@YAPAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
call ['??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z']
jmp ['short', 'loc_17052']
endp
__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z$0 proc near
push ['1']
mov ['edx,', '[ebp-18h]']
push ['edx']
lea ['eax,', '[ebp-1Ch]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN8_3']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_17062']
endp
$LN8_3		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-30h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '1Ch']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
push ['1']
lea ['eax,', '[ebp+var_1C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@I@Z']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_17113']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_18]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
lea ['ecx,', '[ebp+var_1C+2]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['[ebp+var_24],', 'eax']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
call ['??$addressof@PAU?$_List_node@_KPAX@std@@@std@@YAPAPAU?$_List_node@_KPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
call ['??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['[ebp+var_28],', 'eax']
lea ['edx,', '[ebp+var_1C+1]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['[ebp+var_2C],', 'eax']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
call ['??$addressof@PAU?$_List_node@_KPAX@std@@@std@@YAPAPAU?$_List_node@_KPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
call ['??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z']
jmp ['short', 'loc_171B2']
endp
__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z$0 proc	near
push ['1']
mov ['edx,', '[ebp-18h]']
push ['edx']
lea ['eax,', '[ebp-1Ch]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@I@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN8_5']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_171C2']
endp
$LN8_5		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-30h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Check_size@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?max_load_factor@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBEMXZ']
fstp ['[ebp+var_C]']
movss ['xmm0,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_4]']
movss ['[ebp+var_10],', 'xmm0']
call ['?load_factor@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBEMXZ']
fstp ['[ebp+var_14]']
movss ['xmm0,', '[ebp+var_14]']
movss ['xmm1,', '[ebp+var_10]']
comiss ['xmm0,', 'xmm1']
jbe ['short', 'loc_17299']
mov ['ecx,', '[ebp+var_4]']
call ['?bucket_count@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '200h']
jnb ['short', 'loc_1726B']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '3']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_17285']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
shr ['eax,', '1']
cmp ['[ebp+var_8],', 'eax']
jnb ['short', 'loc_17285']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Init@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXI@Z']
mov ['ecx,', '[ebp+var_4]']
call ['?_Reinsert@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXXZ']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Check_size@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?max_load_factor@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBEMXZ']
fstp ['[ebp+var_C]']
movss ['xmm0,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_4]']
movss ['[ebp+var_10],', 'xmm0']
call ['?load_factor@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBEMXZ']
fstp ['[ebp+var_14]']
movss ['xmm0,', '[ebp+var_14]']
movss ['xmm1,', '[ebp+var_10]']
comiss ['xmm0,', 'xmm1']
jbe ['short', 'loc_17341']
mov ['ecx,', '[ebp+var_4]']
call ['?bucket_count@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '200h']
jnb ['short', 'loc_17313']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '3']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_1732D']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
shr ['eax,', '1']
cmp ['[ebp+var_8],', 'eax']
jnb ['short', 'loc_1732D']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Init@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXI@Z']
mov ['ecx,', '[ebp+var_4]']
call ['?_Reinsert@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXXZ']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Clrcont@_Iterator_base12@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '28h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
or ['eax,', '0Fh']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_14]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+var_18]']
jnb ['short', 'loc_173CA']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'ecx']
jmp ['short', 'loc_1741C']
mov ['eax,', '[ebp+var_18]']
xor ['edx,', 'edx']
mov ['ecx,', '3']
div ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['ecx,', '[edx+18h]']
shr ['ecx,', '1']
cmp ['ecx,', 'eax']
ja ['short', 'loc_173E4']
jmp ['short', 'loc_1741C']
mov ['edx,', '[ebp+var_14]']
mov ['esi,', '[edx+18h]']
shr ['esi,', '1']
mov ['ecx,', '[ebp+var_14]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
sub ['eax,', 'esi']
mov ['ecx,', '[ebp+var_14]']
cmp ['[ecx+18h],', 'eax']
ja ['short', 'loc_17411']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+18h]']
shr ['eax,', '1']
mov ['ecx,', '[ebp+var_14]']
add ['eax,', '[ecx+18h]']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_1741C']
mov ['ecx,', '[ebp+var_14]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
lea ['edx,', '[ebp+var_25]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_30]']
mov ['[ebp+var_20],', 'ecx']
jmp ['short', 'loc_174B3']
endp
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
mov ['[ebp-10h],', 'esp']
mov ['edx,', '[ebp+8]']
mov ['[ebp-18h],', 'edx']
mov ['byte', 'ptr', '[ebp-4],', '2']
lea ['eax,', '[ebp-26h]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['[ebp-34h],', 'eax']
mov ['ecx,', '[ebp-18h]']
add ['ecx,', '1']
push ['ecx']
mov ['ecx,', '[ebp-34h]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z']
mov ['[ebp-38h],', 'eax']
mov ['edx,', '[ebp-38h]']
mov ['[ebp-20h],', 'edx']
jmp ['short', 'loc_1749D']
endp
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
push ['0']
push ['1']
mov ['ecx,', '[ebp-14h]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN17']
retn
mov ['dword', 'ptr', '[ebp-4],', '1']
jmp ['short', 'loc_174AD']
endp
$LN17		proc near		
mov ['dword', 'ptr', '[ebp-4],', '1']
mov ['eax,', 'offset', '$LN19']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_174C3']
endp
$LN19		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
cmp ['dword', 'ptr', '[ebp+0Ch],', '0']
jbe ['short', 'loc_174E2']
mov ['eax,', '[ebp+0Ch]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
mov ['ecx,', '[ebp-20h]']
push ['ecx']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
push ['0']
push ['1']
mov ['ecx,', '[ebp-14h]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
lea ['edx,', '[ebp-20h]']
push ['edx']
mov ['eax,', '[ebp-14h]']
add ['eax,', '4']
push ['eax']
lea ['ecx,', '[ebp-27h]']
push ['ecx']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z']
mov ['edx,', '[ebp-14h]']
mov ['eax,', '[ebp-18h]']
mov ['[edx+18h],', 'eax']
mov ['ecx,', '[ebp+0Ch]']
push ['ecx']
mov ['ecx,', '[ebp-14h]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN23']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp-0Ch]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '38h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
dd ['offset', '$LN22']
dd ['offset', '$LN20']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-3Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_15']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN4_11']
dd ['offset', '$LN3_11']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@M@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@M@std@@@std@@@std@@YAXPAM0AAU?$_Wrap_alloc@V?$allocator@M@std@@@0@@Z']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN4_5']
dd ['offset', '$LN3_5']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Destroy@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@@Z']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_22']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN4_16']
dd ['offset', '$LN3_17']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Destroy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXPAUPathOp@gfx@mozilla@@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAXPAUPathOp@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_12']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN4_8']
dd ['offset', '$LN3_8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_17']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN4_12']
dd ['offset', '$LN3_12']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_20']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN4_14']
dd ['offset', '$LN3_14']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXU_Nil@2@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
sub ['esp,', '0Ch']
mov ['eax,', 'esp']
mov ['[ebp+var_8],', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_18],', 'eax']
lea ['edx,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
mov ['[ebp+var_1C],', 'eax']
lea ['ecx,', '[ebp+var_14]']
call ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXU_Nil@2@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
sub ['esp,', '0Ch']
mov ['eax,', 'esp']
mov ['[ebp+var_8],', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_18],', 'eax']
lea ['edx,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?erase@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z']
mov ['[ebp+var_1C],', 'eax']
lea ['ecx,', '[ebp+var_14]']
call ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_End@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', 'eax']
call ['??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1799F']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_179C2']
jmp ['short', 'loc_179C2']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['edx,', '[eax]']
mov ['[ebp+var_C],', 'edx']
lea ['ecx,', '[ebp+var_C]']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
mov ['eax,', '[eax]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN6_1']
dd ['offset', '$LN5_16']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_End@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', 'eax']
call ['??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_17A57']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_17A7A']
jmp ['short', 'loc_17A7A']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_hi@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['edx,', '[eax]']
mov ['[ebp+var_C],', 'edx']
lea ['ecx,', '[ebp+var_C]']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
mov ['eax,', '[eax]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN6_2']
dd ['offset', '$LN5_19']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+14h],', 'ecx']
lea ['edx,', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
add ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?assign@?$char_traits@D@std@@SAXAADABD@Z']
add ['esp,', '8']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
lea ['eax,', '[ebp+var_18]']
push ['eax']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ']
lea ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', 'eax']
call ['??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_17BE7']
lea ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', 'eax']
call ['??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_17BCD']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ']
mov ['esi,', '[eax]']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[eax],', 'esi']
lea ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ']
mov ['esi,', '[eax]']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[eax],', 'esi']
jmp ['short', 'loc_17BE5']
lea ['ecx,', '[ebp+var_18]']
call ['??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
mov ['esi,', '[eax]']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[eax],', 'esi']
jmp ['short', 'loc_17C1D']
lea ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', 'eax']
call ['??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_17C1D']
lea ['ecx,', '[ebp+var_18]']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
mov ['esi,', '[eax]']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[eax],', 'esi']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12_5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
dd ['offset', '$LN11_2']
dd ['offset', '$LN9_1']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z$0 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Fetch_add_acquire_4@std@@YAKPCKK@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
lock ['xadd', '[ecx],', 'eax']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Fetch_add_relaxed_4@std@@YAKPCKK@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
lock ['xadd', '[ecx],', 'eax']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Fetch_add_release_4@std@@YAKPCKK@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
lock ['xadd', '[ecx],', 'eax']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Fetch_add_seq_cst_4@std@@YAKPCKK@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
lock ['xadd', '[ecx],', 'eax']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Fill_n@std@@YAPAEPAEIE@Z proc	near	
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+Size]']
push ['eax']
movzx ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '[ebp+Size]']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN4_2']
dd ['offset', '$LN3_2']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_14']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN4_10']
dd ['offset', '$LN3_10']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_8']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN4_4']
dd ['offset', '$LN3_4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_11']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN4_7']
dd ['offset', '$LN3_7']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Freenode@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@PBXPAX@std@@@std@@YAPAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@PBXPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@PBXPAX@std@@@std@@YAPAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['eax,', '[ebp+var_8+2]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@PBXPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?_Myval@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPBXPAU?$_List_node@PBXPAX@2@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PBX@std@@YAPAPBXAAPBX@Z']
add ['esp,', '4']
push ['eax']
lea ['edx,', '[ebp+var_8+1]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PBX@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPBX@Z']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Freenode@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@_KPAX@std@@@std@@YAPAPAU?$_List_node@_KPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@_KPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@@Z']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@_KPAX@std@@@std@@YAPAPAU?$_List_node@_KPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['eax,', '[ebp+var_8+2]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@_KPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@@Z']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?_Myval@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAA_KPAU?$_List_node@_KPAX@2@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@_K@std@@YAPA_KAA_K@Z']
add ['esp,', '4']
push ['eax']
lea ['edx,', '[ebp+var_8+1]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@_K@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPA_K@Z']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@I@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@M@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@M@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_182A0']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_182AA']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Gethash@?$_Hash_oper1@$0A@U?$hash@PBX@std@@@std@@QBE?AU?$hash@PBX@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Gethash@?$_Hash_oper1@$0A@U?$hash@_K@std@@@std@@QBE?AU?$hash@_K@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getkeyeq@?$_Hash_oper2@$0A@U?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE?AU?$equal_to@PBX@2@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getkeyeq@?$_Hash_oper2@$0A@U?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBE?AU?$equal_to@_K@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jnz ['short', 'loc_1837B']
mov ['ecx,', '[ebp+var_8]']
or ['ecx,', '4']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '2']
jnz ['short', 'loc_1838C']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '8']
jz ['short', 'loc_1839D']
mov ['edx,', '[ebp+var_8]']
or ['edx,', '8']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '4']
jz ['short', 'loc_183AE']
mov ['ecx,', '[ebp+var_8]']
or ['ecx,', '10h']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+Size],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
jnb ['short', 'loc_183EB']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_1840B']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
jmp ['short', 'loc_18455']
movzx ['edx,', '[ebp+arg_4]']
test ['edx,', 'edx']
jz ['short', 'loc_18445']
cmp ['[ebp+arg_0],', '10h']
jnb ['short', 'loc_18445']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+14h]']
jnb ['short', 'loc_1842C']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+Size],', 'edx']
jmp ['short', 'loc_18435']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+Size],', 'ecx']
mov ['edx,', '[ebp+Size]']
push ['edx']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
jmp ['short', 'loc_18455']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_18455']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
cmp ['[ebp+arg_0],', '0']
jbe ['short', 'loc_18464']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_1846B']
mov ['[ebp+var_C],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_C]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Grow_to@?$vector@EV?$allocator@E@std@@@std@@IBEII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '1']
sub ['eax,', 'ecx']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_184C6']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_184D1']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '1']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_184E5']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Grow_to@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?capacity@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '1']
sub ['eax,', 'ecx']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_1853E']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_18549']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '1']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_1855D']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Grow_to@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEII@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '1']
sub ['eax,', 'ecx']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_185B6']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_185C1']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '1']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_185D5']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Grow_to@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '1']
sub ['eax,', 'ecx']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_1862E']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_18639']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '1']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_1864D']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Hash_seq@std@@YAIPBEI@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '811C9DC5h']
mov ['[ebp+var_8],', '1000193h']
mov ['[ebp+var_C],', '811C9DC5h']
mov ['[ebp+var_10],', '0']
jmp ['short', 'loc_1869E']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['short', 'loc_186C1']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_10]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
xor ['eax,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'eax']
imul ['ecx,', '[ebp+var_C],', '1000193h']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_18695']
mov ['eax,', '[ebp+var_C]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Hashval@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IBEIABQBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBEIABQBX@Z']
mov ['ecx,', '[ebp+var_4]']
and ['eax,', '[ecx+1Ch]']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+20h]']
cmp ['eax,', '[ebp+var_8]']
ja ['short', 'loc_18712']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+1Ch]']
shr ['edx,', '1']
add ['edx,', '1']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', 'edx']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Hashval@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IBEIAB_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??R?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBEIAB_K@Z']
mov ['ecx,', '[ebp+var_4]']
and ['eax,', '[ecx+1Ch]']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+20h]']
cmp ['eax,', '[ebp+var_8]']
ja ['short', 'loc_18772']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+1Ch]']
shr ['edx,', '1']
add ['edx,', '1']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', 'edx']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Incsize@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$list@PBXV?$allocator@PBX@std@@@std@@QBEIXZ']
mov ['ecx,', '[ebp+var_4]']
sub ['eax,', '[ecx+8]']
sub ['eax,', '1']
cmp ['eax,', '[ebp+arg_0]']
jnb ['short', 'loc_187C1']
mov ['esi,', 'esp']
push ['offset', '??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Xlength_error@std@@YAXPBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
add ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Incsize@?$list@_KV?$allocator@_K@std@@@std@@QAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$list@_KV?$allocator@_K@std@@@std@@QBEIXZ']
mov ['ecx,', '[ebp+var_4]']
sub ['eax,', '[ecx+8]']
sub ['eax,', '1']
cmp ['eax,', '[ebp+arg_0]']
jnb ['short', 'loc_1881D']
mov ['esi,', 'esp']
push ['offset', '??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Xlength_error@std@@YAXPBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
add ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Init@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
shl ['ecx,', '1']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['edx,', '[ebp+arg_0]']
sub ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+1Ch],', 'edx']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+20h],', 'edx']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Init@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
shl ['ecx,', '1']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['edx,', '[ebp+arg_0]']
sub ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+1Ch],', 'edx']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+20h],', 'edx']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+Dst],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+38h],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['[ecx+3Ch],', 'edx']
cmp ['[ebp+Size],', '0']
jz ['loc_18A2D']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '6']
cmp ['ecx,', '6']
jz ['loc_18A2D']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['?allocate@?$allocator@D@std@@QAEPADI@Z']
mov ['[ebp+Dst],', 'eax']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '[ebp+Size]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+38h],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+3Ch]']
and ['eax,', '4']
jnz ['short', 'loc_189A4']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '[ebp+Size]']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+3Ch]']
and ['edx,', '2']
jnz ['short', 'loc_18A1E']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '18h']
jz ['short', 'loc_189C5']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '[ebp+Size]']
mov ['[ebp+var_C],', 'edx']
jmp ['short', 'loc_189CB']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '[ebp+Size]']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_18A1E']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+Dst]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
or ['ecx,', '1']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+3Ch],', 'ecx']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Insert_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', 'eax']
call ['??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_18AA2']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
jmp ['short', 'loc_18B0B']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', 'eax']
call ['??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_18AD3']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
jmp ['short', 'loc_18B0B']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', 'eax']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
mov ['ecx,', 'eax']
call ['??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_18B0B']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', 'eax']
call ['??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Insert_bucket@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', 'eax']
call ['??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_18B7E']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_hi@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
jmp ['short', 'loc_18BE7']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', 'eax']
call ['??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_18BAF']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
jmp ['short', 'loc_18BE7']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_hi@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', 'eax']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
mov ['ecx,', 'eax']
call ['??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_18BE7']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_hi@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', 'eax']
call ['??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '50h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_60]']
mov ['ecx,', '14h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_58],', '0']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['eax,', '[ebp+var_14]']
jnz ['short', 'loc_18C69']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_C]']
cmp ['ecx,', '[eax+4]']
jb ['short', 'loc_18C69']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+arg_C]']
jnb ['short', 'loc_18C8A']
mov ['esi,', 'esp']
push ['67Ah']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_C]']
sub ['edx,', '[ecx+4]']
sar ['edx,', '2']
mov ['[ebp+var_18],', 'edx']
cmp ['[ebp+arg_10],', '0']
jnz ['short', 'loc_18CA4']
jmp ['loc_19013']
mov ['ecx,', '[ebp+var_14]']
call ['?_Unused_capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_10]']
jnb ['loc_18EA2']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+var_14]']
call ['?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
sub ['eax,', 'esi']
cmp ['eax,', '[ebp+arg_10]']
jnb ['short', 'loc_18CD6']
mov ['ecx,', '[ebp+var_14]']
call ['?_Xlen@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXXZ']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
add ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Grow_to@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEII@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
lea ['ecx,', '[ebp+var_45]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[ebp+var_20],', 'eax']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_C]']
sub ['eax,', '[edx+4]']
sar ['eax,', '2']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_28],', '0']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
call ['??$addressof@$$CBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_20]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '1']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z']
mov ['edx,', '[ebp+var_28]']
add ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_20]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z']
jmp ['short', 'loc_18DFD']
endp
__catch$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0 proc near
cmp ['dword', 'ptr', '[ebp-28h],', '1']
jle ['short', 'loc_18DAB']
mov ['eax,', '[ebp-24h]']
mov ['ecx,', '[ebp-20h]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['eax,', '[ebp-20h]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
cmp ['dword', 'ptr', '[ebp-28h],', '0']
jle ['short', 'loc_18DD3']
mov ['ecx,', '[ebp-24h]']
mov ['edx,', '[ebp-20h]']
lea ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+18h]']
lea ['edx,', '[eax+ecx*4]']
push ['edx']
mov ['eax,', '[ebp-24h]']
mov ['ecx,', '[ebp-20h]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['ecx,', '[ebp-14h]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['eax,', '[ebp-1Ch]']
push ['eax']
mov ['ecx,', '[ebp-20h]']
push ['ecx']
lea ['edx,', '[ebp-46h]']
push ['edx']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN26']
retn
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_18E0D']
endp
$LN26		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
add ['eax,', '[ebp+arg_10]']
mov ['[ebp+arg_10],', 'eax']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_18E64']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[edx+0Ch]']
sub ['ecx,', '[eax+4]']
sar ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+4]']
push ['eax']
lea ['ecx,', '[ebp+var_47]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_14]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+var_20]']
lea ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+var_14]']
mov ['[edx+0Ch],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_20]']
lea ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_20]']
mov ['[ecx+4],', 'edx']
jmp ['loc_19013']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', '[ebp+arg_C]']
sar ['ecx,', '2']
cmp ['ecx,', '[ebp+arg_10]']
jnb ['loc_18F94']
mov ['edx,', '[ebp+arg_14]']
mov ['eax,', '[edx]']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ebp+arg_C]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
call ['??$addressof@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
sub ['eax,', '[ebp+arg_C]']
sar ['eax,', '2']
mov ['ecx,', '[ebp+arg_10]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z']
jmp ['short', 'loc_18F3E']
endp
__catch$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$2 proc near
mov ['ecx,', '[ebp-14h]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '[ebp+18h]']
lea ['ecx,', '[edx+eax*4]']
push ['ecx']
mov ['edx,', '[ebp+18h]']
mov ['eax,', '[ebp+14h]']
lea ['ecx,', '[eax+edx*4]']
push ['ecx']
mov ['ecx,', '[ebp-14h]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN28']
retn
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_18F4E']
endp
$LN28		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+arg_10]']
lea ['edx,', '[eax+ecx*4]']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
shl ['edx,', '2']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', 'edx']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
call ['??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z']
add ['esp,', '0Ch']
jmp ['short', 'loc_19013']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_3C],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_44]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
shl ['ecx,', '2']
mov ['edx,', '[ebp+var_44]']
sub ['edx,', 'ecx']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['edx,', '[ebp+var_44]']
push ['edx']
mov ['eax,', '[ebp+arg_10]']
shl ['eax,', '2']
mov ['ecx,', '[ebp+var_44]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
call ['??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00@Z']
add ['esp,', '0Ch']
lea ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ebp+arg_C]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
call ['??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z']
add ['esp,', '0Ch']
lea ['edx,', '[ebp+var_54]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['[ebp+var_5C],', 'eax']
mov ['eax,', '[ebp+var_5C]']
mov ['[ebp+var_60],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_60]']
call ['??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
mov ['eax,', '[ebp+var_58]']
or ['eax,', '1']
mov ['[ebp+var_58],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_54]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN33']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '60h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['4']
dd ['offset', '$LN32_0']
dd ['offset', '$LN29_0']
dd ['0FFFFFFC4h,', '4']
dd ['offset', '$LN30']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$4 proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$5 proc near
lea ['ecx,', '[ebp-54h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-64h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '50h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_60]']
mov ['ecx,', '14h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_58],', '0']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['eax,', '[ebp+var_14]']
jnz ['short', 'loc_1915D']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_C]']
cmp ['ecx,', '[eax+4]']
jb ['short', 'loc_1915D']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+arg_C]']
jnb ['short', 'loc_1917E']
mov ['esi,', 'esp']
push ['67Ah']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_C]']
sub ['edx,', '[ecx+4]']
sar ['edx,', '2']
mov ['[ebp+var_18],', 'edx']
cmp ['[ebp+arg_10],', '0']
jnz ['short', 'loc_19198']
jmp ['loc_19507']
mov ['ecx,', '[ebp+var_14]']
call ['?_Unused_capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_10]']
jnb ['loc_19396']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+var_14]']
call ['?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
sub ['eax,', 'esi']
cmp ['eax,', '[ebp+arg_10]']
jnb ['short', 'loc_191CA']
mov ['ecx,', '[ebp+var_14]']
call ['?_Xlen@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXXZ']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
add ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Grow_to@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEII@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
lea ['ecx,', '[ebp+var_45]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[ebp+var_20],', 'eax']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_C]']
sub ['eax,', '[edx+4]']
sar ['eax,', '2']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_28],', '0']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
call ['??$addressof@$$CBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_20]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '1']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z']
mov ['edx,', '[ebp+var_28]']
add ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_20]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z']
jmp ['short', 'loc_192F1']
endp
__catch$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$0 proc near
cmp ['dword', 'ptr', '[ebp-28h],', '1']
jle ['short', 'loc_1929F']
mov ['eax,', '[ebp-24h]']
mov ['ecx,', '[ebp-20h]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['eax,', '[ebp-20h]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
cmp ['dword', 'ptr', '[ebp-28h],', '0']
jle ['short', 'loc_192C7']
mov ['ecx,', '[ebp-24h]']
mov ['edx,', '[ebp-20h]']
lea ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+18h]']
lea ['edx,', '[eax+ecx*4]']
push ['edx']
mov ['eax,', '[ebp-24h]']
mov ['ecx,', '[ebp-20h]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['ecx,', '[ebp-14h]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['eax,', '[ebp-1Ch]']
push ['eax']
mov ['ecx,', '[ebp-20h]']
push ['ecx']
lea ['edx,', '[ebp-46h]']
push ['edx']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN26_0']
retn
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_19301']
endp
$LN26_0		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
add ['eax,', '[ebp+arg_10]']
mov ['[ebp+arg_10],', 'eax']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_19358']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[edx+0Ch]']
sub ['ecx,', '[eax+4]']
sar ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+4]']
push ['eax']
lea ['ecx,', '[ebp+var_47]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_14]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+var_20]']
lea ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+var_14]']
mov ['[edx+0Ch],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_20]']
lea ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_20]']
mov ['[ecx+4],', 'edx']
jmp ['loc_19507']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', '[ebp+arg_C]']
sar ['ecx,', '2']
cmp ['ecx,', '[ebp+arg_10]']
jnb ['loc_19488']
mov ['edx,', '[ebp+arg_14]']
mov ['eax,', '[edx]']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ebp+arg_C]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
call ['??$addressof@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
sub ['eax,', '[ebp+arg_C]']
sar ['eax,', '2']
mov ['ecx,', '[ebp+arg_10]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z']
jmp ['short', 'loc_19432']
endp
__catch$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$2 proc near
mov ['ecx,', '[ebp-14h]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '[ebp+18h]']
lea ['ecx,', '[edx+eax*4]']
push ['ecx']
mov ['edx,', '[ebp+18h]']
mov ['eax,', '[ebp+14h]']
lea ['ecx,', '[eax+edx*4]']
push ['ecx']
mov ['ecx,', '[ebp-14h]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN28_0']
retn
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_19442']
endp
$LN28_0		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+arg_10]']
lea ['edx,', '[eax+ecx*4]']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
shl ['edx,', '2']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', 'edx']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
call ['??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z']
add ['esp,', '0Ch']
jmp ['short', 'loc_19507']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_3C],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_44]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
shl ['ecx,', '2']
mov ['edx,', '[ebp+var_44]']
sub ['edx,', 'ecx']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['edx,', '[ebp+var_44]']
push ['edx']
mov ['eax,', '[ebp+arg_10]']
shl ['eax,', '2']
mov ['ecx,', '[ebp+var_44]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
call ['??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00@Z']
add ['esp,', '0Ch']
lea ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ebp+arg_C]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
call ['??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z']
add ['esp,', '0Ch']
lea ['edx,', '[ebp+var_54]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['[ebp+var_5C],', 'eax']
mov ['eax,', '[ebp+var_5C]']
mov ['[ebp+var_60],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_60]']
call ['??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
mov ['eax,', '[ebp+var_58]']
or ['eax,', '1']
mov ['[ebp+var_58],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_54]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN33_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '60h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['4']
dd ['offset', '$LN32_1']
dd ['offset', '$LN29_1']
dd ['0FFFFFFC4h,', '4']
dd ['offset', '$LN30_0']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$4 proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$5 proc near
lea ['ecx,', '[ebp-54h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-64h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_19614']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
cmp ['[ebp+arg_0],', 'eax']
jb ['short', 'loc_19614']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
mov ['ecx,', '[ebp+var_4]']
add ['eax,', '[ecx+14h]']
cmp ['eax,', '[ebp+arg_0]']
ja ['short', 'loc_1961A']
xor ['al,', 'al']
jmp ['short', 'loc_1961C']
jmp ['short', 'loc_1961C']
mov ['al,', '1']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Inside@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBE_NPBQAVDrawEventRecorderPrivate@gfx@mozilla@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+8]']
jnb ['short', 'loc_19662']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
cmp ['eax,', '[ebp+arg_0]']
ja ['short', 'loc_19662']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_19669']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '24h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_30],', 'eax']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_24],', '0']
mov ['[ebp+var_4],', '0']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_28],', 'eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$list@PBXV?$allocator@PBX@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
mov ['[ebp+var_2C],', 'eax']
mov ['edx,', '[ebp+var_2C]']
mov ['[ebp+var_30],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['eax,', '[ebp+var_30]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['ecx,', '[ebp+var_24]']
or ['ecx,', '1']
mov ['[ebp+var_24],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '30h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z$0 proc	near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z$2 proc	near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-28h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_20],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$list@PBXV?$allocator@PBX@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_24],', 'eax']
mov ['edx,', '[ebp+var_24]']
mov ['[ebp+var_28],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['ecx,', '[ebp+var_20]']
or ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0 proc near
lea ['ecx,', '[ebp-1Ch]']
jmp ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_20],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$list@_KV?$allocator@_K@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_24],', 'eax']
mov ['edx,', '[ebp+var_24]']
mov ['[ebp+var_28],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['ecx,', '[ebp+var_20]']
or ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$0 proc near
lea ['ecx,', '[ebp-1Ch]']
jmp ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Make_iter@?$list@PBXV?$allocator@PBX@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Make_iter@?$list@PBXV?$allocator@PBX@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['edx,', '[ebp+var_8]']
or ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Make_iter@?$list@_KV?$allocator@_K@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Make_iter@?$list@_KV?$allocator@_K@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z']
mov ['edx,', '[ebp+var_8]']
or ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+18h],', '10h']
jb ['short', 'loc_19AC8']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_19AD1']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+18h],', '10h']
jb ['short', 'loc_19B18']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_19B21']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Myval@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPBXPAU?$_List_node@PBXPAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '8']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Myval@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAA_KPAU?$_List_node@_KPAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '8']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Orphan_me@_Iterator_base12@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_19BE3']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
add ['edx,', '4']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_19BA6']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
cmp ['edx,', '[ebp+var_4]']
jz ['short', 'loc_19BA6']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
add ['ecx,', '4']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_19B87']
mov ['edx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[edx],', '0']
jnz ['short', 'loc_19BCF']
mov ['esi,', 'esp']
push ['0C9h']
push ['offset', '??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['dword', 'ptr', 'ds:__imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_19CBE']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_19CBE']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[edx+8]']
cmp ['ecx,', '[eax+4]']
jz ['short', 'loc_19C92']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_19CA1']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+8]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_19CA1']
mov ['edx,', '[ebp+var_20]']
mov ['ecx,', '[edx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_19CBC']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax]']
call ['?_Clrcont@_Iterator_base12@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_20]']
mov ['ecx,', '[ecx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
jmp ['short', 'loc_19C67']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
dd ['offset', '$LN12_2']
dd ['offset', '$LN10_2']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z$0 proc	near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-18h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['dword', 'ptr', 'ds:__imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_19E1A']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_19E1A']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[edx+8]']
cmp ['ecx,', '[eax+4]']
jz ['short', 'loc_19DEE']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_19DFD']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+8]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_19DFD']
mov ['edx,', '[ebp+var_20]']
mov ['ecx,', '[edx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_19E18']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax]']
call ['?_Clrcont@_Iterator_base12@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_20]']
mov ['ecx,', '[ecx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
jmp ['short', 'loc_19DC3']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
dd ['offset', '$LN12_7']
dd ['offset', '$LN10_7']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z$0	proc near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-18h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
call ['dword', 'ptr', 'ds:__imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_19F6D']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_19F6D']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+arg_0]']
jb ['short', 'loc_19F41']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx+8]']
jnb ['short', 'loc_19F50']
mov ['ecx,', '[ebp+var_20]']
mov ['ecx,', '[ecx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_19F6B']
mov ['edx,', '[ebp+var_20]']
mov ['ecx,', '[edx]']
call ['?_Clrcont@_Iterator_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
jmp ['short', 'loc_19F1F']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN12_1']
dd ['offset', '$LN10_1']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z$0	proc near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-18h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Orphan_range@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_range@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
call ['dword', 'ptr', 'ds:__imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_1A0C1']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_1A0C1']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+arg_0]']
jb ['short', 'loc_1A095']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx+8]']
jnb ['short', 'loc_1A0A4']
mov ['ecx,', '[ebp+var_20]']
mov ['ecx,', '[ecx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_1A0BF']
mov ['edx,', '[ebp+var_20]']
mov ['ecx,', '[edx]']
call ['?_Clrcont@_Iterator_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
jmp ['short', 'loc_1A073']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13_12']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN12_15']
dd ['offset', '$LN10_15']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Orphan_range@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z$0	proc near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-18h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$?_Orphan_range@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_range@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
call ['dword', 'ptr', 'ds:__imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_1A215']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_1A215']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+arg_0]']
jb ['short', 'loc_1A1E9']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx+8]']
jnb ['short', 'loc_1A1F8']
mov ['ecx,', '[ebp+var_20]']
mov ['ecx,', '[ecx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_1A213']
mov ['edx,', '[ebp+var_20]']
mov ['ecx,', '[edx]']
call ['?_Clrcont@_Iterator_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
jmp ['short', 'loc_1A1C7']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN12_6']
dd ['offset', '$LN10_6']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z$0 proc	near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-18h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
call ['dword', 'ptr', 'ds:__imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_1A369']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_1A369']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+arg_0]']
jb ['short', 'loc_1A33D']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx+8]']
jnb ['short', 'loc_1A34C']
mov ['ecx,', '[ebp+var_20]']
mov ['ecx,', '[ecx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_1A367']
mov ['edx,', '[ebp+var_20]']
mov ['ecx,', '[edx]']
call ['?_Clrcont@_Iterator_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
jmp ['short', 'loc_1A31B']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13_5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
dd ['offset', '$LN12_9']
dd ['offset', '$LN10_10']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z$0	proc near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-18h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Pop_back_n@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx+8],', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '10h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_20+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEPAEI@Z']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z']
jmp ['short', 'loc_1A51F']
endp
__catch$?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z$0 proc	near
mov ['ecx,', '[ebp+8]']
push ['ecx']
mov ['edx,', '[ebp-18h]']
push ['edx']
lea ['eax,', '[ebp-1Eh]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEXPAEI@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN8_2']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_1A52F']
endp
$LN8_2		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jz ['short', 'loc_1A580']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[eax+0Ch]']
sub ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
push ['ecx']
lea ['edx,', '[ebp+var_20+1]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEXPAEI@Z']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_14]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_18]']
mov ['[ecx+4],', 'edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-24h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Reallocate@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Reallocate@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '10h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_20+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV234@00@Z']
jmp ['short', 'loc_1A697']
endp
__catch$?_Reallocate@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z$0 proc	near
mov ['ecx,', '[ebp+8]']
push ['ecx']
mov ['edx,', '[ebp-18h]']
push ['edx']
lea ['eax,', '[ebp-1Eh]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN8_11']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_1A6A7']
endp
$LN8_11		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jz ['short', 'loc_1A6FB']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Destroy@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[eax+0Ch]']
sub ['edx,', '[ecx+4]']
sar ['edx,', '2']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
push ['ecx']
lea ['edx,', '[ebp+var_20+1]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_14]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_18]']
lea ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+0Ch],', 'edx']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+var_18]']
lea ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+var_18]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$?_Reallocate@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-24h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Reallocate@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Reinsert@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '34h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_34]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
lea ['edx,', '[ebp+var_24]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ']
mov ['ecx,', 'eax']
call ['??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_1A805']
lea ['ecx,', '[ebp+var_C]']
call ['??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
lea ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ']
lea ['edx,', '[ebp+var_C]']
push ['edx']
lea ['ecx,', '[ebp+var_18]']
call ['??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
mov ['[ebp+var_1D],', 'al']
mov ['eax,', '[ebp+var_18]']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
call ['??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ']
push ['eax']
lea ['ecx,', '[ebp+var_34]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
lea ['ecx,', '[ebp+var_34]']
call ['??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@XZ']
movzx ['edx,', '[ebp+var_1D]']
test ['edx,', 'edx']
jz ['short', 'loc_1A803']
jmp ['short', 'loc_1A805']
jmp ['short', 'loc_1A7BD']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN11_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '34h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN10_5']
dd ['offset', '$LN8_4']
dd ['0FFFFFFE8h,', '4']
dd ['offset', '$LN9_2']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Reinsert@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '34h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_34]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
lea ['edx,', '[ebp+var_24]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_begin@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ']
mov ['ecx,', 'eax']
call ['??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_1A8ED']
lea ['ecx,', '[ebp+var_C]']
call ['??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
lea ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_begin@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ']
lea ['edx,', '[ebp+var_C]']
push ['edx']
lea ['ecx,', '[ebp+var_18]']
call ['??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
mov ['[ebp+var_1D],', 'al']
mov ['eax,', '[ebp+var_18]']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
call ['??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEAB_KXZ']
push ['eax']
lea ['ecx,', '[ebp+var_34]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
lea ['ecx,', '[ebp+var_34]']
call ['??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@XZ']
movzx ['edx,', '[ebp+var_1D]']
test ['edx,', 'edx']
jz ['short', 'loc_1A8EB']
jmp ['short', 'loc_1A8ED']
jmp ['short', 'loc_1A8A5']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN11_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '34h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN10_9']
dd ['offset', '$LN8_6']
dd ['0FFFFFFE8h,', '4']
dd ['offset', '$LN9_3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unused_capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
jnb ['short', 'loc_1A99A']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ']
sub ['esi,', 'eax']
cmp ['esi,', '[ebp+arg_0]']
jnb ['short', 'loc_1A97D']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xlen@?$vector@EV?$allocator@E@std@@@std@@IBEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ']
add ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow_to@?$vector@EV?$allocator@E@std@@@std@@IBEII@Z']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Reserve@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unused_capacity@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
jnb ['short', 'loc_1AA06']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ']
sub ['esi,', 'eax']
cmp ['esi,', '[ebp+arg_0]']
jnb ['short', 'loc_1A9E9']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xlen@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ']
add ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow_to@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEII@Z']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Reallocate@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Store_relaxed_4@std@@YAXPCKK@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Store_release_4@std@@YAXPCKK@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Store_seq_cst_4@std@@YAXPCKK@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
xchg ['eax,', '[ecx]']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
movzx ['eax,', '[ebp+arg_0]']
test ['eax,', 'eax']
jnz ['short', 'loc_1AA70']
jmp ['short', 'loc_1AAE3']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+18h],', '10h']
jb ['short', 'loc_1AAE3']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
push ['ecx']
lea ['edx,', '[ebp+var_C+3]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z']
cmp ['[ebp+Size],', '0']
jbe ['short', 'loc_1AAC2']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '4']
push ['edx']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
add ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
lea ['eax,', '[ebp+var_C+2]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+18h],', '0Fh']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '1']
jz ['short', 'loc_1ABA7']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_1AB5C']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_1AB71']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_8]']
sub ['edx,', 'eax']
push ['edx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['?deallocate@?$allocator@D@std@@QAEXPADI@Z']
mov ['esi,', 'esp']
push ['0']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+38h],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+3Ch]']
and ['edx,', '0FFFFFFFEh']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+3Ch],', 'edx']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_1AC8E']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+0Ch]']
sub ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEXPAEI@Z']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Tidy@?$vector@MV?$allocator@M@std@@@std@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_1AD31']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+0Ch]']
sub ['ecx,', '[eax+4]']
sar ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@M@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@M@std@@@std@@QAEXPAMI@Z']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Tidy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_1ADD8']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Destroy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXPAUPathOp@gfx@mozilla@@0@Z']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+0Ch]']
sub ['ecx,', '[eax+4]']
mov ['eax,', 'ecx']
cdq
mov ['ecx,', '1Ch']
idiv ['ecx']
push ['eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@I@Z']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninitialized_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
lea ['eax,', '[eax+edx*4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_18']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
dd ['offset', '$LN4_13']
dd ['offset', '$LN3_13']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninitialized_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
lea ['eax,', '[eax+edx*4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_21']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
dd ['offset', '$LN4_15']
dd ['offset', '$LN3_15']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
push ['eax']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unchecked_begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_begin@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unchecked_begin@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_begin@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unchecked_begin@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unchecked_begin@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unchecked_end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unchecked_end@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unchecked_end@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unchecked_splice@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+arg_8]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ']
mov ['esi,', 'eax']
lea ['ecx,', '[ebp+arg_4]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ']
push ['eax']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['[eax],', 'esi']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ']
mov ['esi,', 'eax']
lea ['ecx,', '[ebp+arg_8]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ']
push ['eax']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['[eax],', 'esi']
lea ['ecx,', '[ebp+arg_4]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ']
mov ['esi,', 'eax']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ']
push ['eax']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[eax]']
push ['edx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['[eax],', 'esi']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ']
push ['eax']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
mov ['[ebp+var_8],', 'eax']
lea ['ecx,', '[ebp+arg_8]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ']
push ['eax']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['esi,', 'eax']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ']
push ['eax']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[esi]']
mov ['[eax],', 'ecx']
lea ['ecx,', '[ebp+arg_4]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ']
push ['eax']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['esi,', 'eax']
lea ['ecx,', '[ebp+arg_8]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ']
push ['eax']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[esi]']
mov ['[eax],', 'edx']
lea ['ecx,', '[ebp+arg_4]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ']
push ['eax']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unchecked_splice@?$list@_KV?$allocator@_K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+arg_8]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ']
mov ['esi,', 'eax']
lea ['ecx,', '[ebp+arg_4]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ']
push ['eax']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['[eax],', 'esi']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ']
mov ['esi,', 'eax']
lea ['ecx,', '[ebp+arg_8]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ']
push ['eax']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['[eax],', 'esi']
lea ['ecx,', '[ebp+arg_4]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ']
mov ['esi,', 'eax']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ']
push ['eax']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[eax]']
push ['edx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['[eax],', 'esi']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ']
push ['eax']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
mov ['[ebp+var_8],', 'eax']
lea ['ecx,', '[ebp+arg_8]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ']
push ['eax']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['esi,', 'eax']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ']
push ['eax']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[esi]']
mov ['[eax],', 'ecx']
lea ['ecx,', '[ebp+arg_4]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ']
push ['eax']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['esi,', 'eax']
lea ['ecx,', '[ebp+arg_8]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ']
push ['eax']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[esi]']
mov ['[eax],', 'edx']
lea ['ecx,', '[ebp+arg_4]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ']
push ['eax']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_18],', '0CCCCCCCCh']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['eax,', '[ebp+var_10]']
jnz ['short', 'loc_1B3B1']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_8]']
cmp ['ecx,', '[eax+4]']
jnz ['short', 'loc_1B3D2']
mov ['esi,', 'esp']
push ['59Fh']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EE@BBMFLDOC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa?$AAn?$AAg@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['esi,', 'eax']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[esi]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['esi,', 'eax']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[esi]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z$0 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unlinknode@?$list@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Unlinknode@?$list@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_18],', '0CCCCCCCCh']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['eax,', '[ebp+var_10]']
jnz ['short', 'loc_1B505']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_8]']
cmp ['ecx,', '[eax+4]']
jnz ['short', 'loc_1B526']
mov ['esi,', 'esp']
push ['59Fh']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EE@BBMFLDOC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa?$AAn?$AAg@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['esi,', 'eax']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[esi]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['esi,', 'eax']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[esi]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Unlinknode@?$list@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z$0 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?_Unlinknode@?$list@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Unlinknode@?$list@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unused_capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unused_capacity@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+8]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unused_capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+8]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unused_capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+8]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+eax+1]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['??A?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Vec_hi@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+eax+1]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['??A?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['??A?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Vec_lo@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['??A?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['offset', '??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Xlength_error@std@@YAXPBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Xlen@?$vector@EV?$allocator@E@std@@@std@@IBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['offset', '??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Xlength_error@std@@YAXPBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Xlen@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['offset', '??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Xlength_error@std@@YAXPBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Xlen@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['offset', '??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Xlength_error@std@@YAXPBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Xlen@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['offset', '??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Xlength_error@std@@YAXPBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['offset', '??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Xout_of_range@std@@YAXPBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?add@?$IntrinsicAddSub@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['5']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?fetch_add@atomic_uint@std@@QAEIIW4memory_order@2@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@D@std@@QAEPADI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEPAEI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@E@std@@QAEPAEI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@I@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEPAU?$_List_node@_KPAX@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@D@std@@QAEPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@D@std@@YAPADIPAD@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@E@std@@QAEPAEI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@E@std@@YAPAEIPAE@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@IPAPAV123@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@U?$_List_node@PBXPAX@std@@@std@@YAPAU?$_List_node@PBXPAX@0@IPAU10@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEPAU?$_List_node@_KPAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@U?$_List_node@_KPAX@std@@@std@@YAPAU?$_List_node@_KPAX@0@IPAU10@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPAV10@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPAV10@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+Size],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_1BBE8']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+Size],', 'eax']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+Size]']
jnb ['short', 'loc_1BC04']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+Size],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+arg_0]']
jnz ['short', 'loc_1BC2B']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z']
jmp ['short', 'loc_1BC6D']
push ['0']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_1BC6D']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ']
add ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['490h']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['?length@?$char_traits@D@std@@SAIPBD@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+Size],', '0']
jz ['short', 'loc_1BCFA']
push ['47Fh']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1BD2D']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
mov ['ecx,', '[ebp+Src]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z']
jmp ['short', 'loc_1BD6A']
push ['0']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_1BD67']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '30h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?clear@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXXZ']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_20]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+var_30]']
mov ['[ebp+var_34],', 'eax']
mov ['[ebp+var_4],', '0']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
mov ['edx,', '[ebp+var_34]']
push ['edx']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_38],', 'eax']
lea ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_3C],', 'eax']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-38h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '30h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?clear@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXXZ']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_20]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+var_30]']
mov ['[ebp+var_34],', 'eax']
mov ['[ebp+var_4],', '0']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
mov ['edx,', '[ebp+var_34]']
push ['edx']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_38],', 'eax']
lea ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_3C],', 'eax']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$0 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-38h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign_assuming_AddRef@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@AAEXPAVDataSourceSurface@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1BF85']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?Release@?$AddRefTraits@VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@SAXPAVDataSourceSurface@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign_assuming_AddRef@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@AAEXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1BFD1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?Release@?$AddRefTraits@VDrawEventRecorderPrivate@gfx@mozilla@@@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@SAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign_assuming_AddRef@?$RefPtr@VPathRecording@gfx@mozilla@@@@AAEXPAVPathRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1C01D']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?Release@?$AddRefTraits@VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@SAXPAVPathRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign_with_AddRef@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@AAEXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_1C050']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRef@?$AddRefTraits@VDrawEventRecorderPrivate@gfx@mozilla@@@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@SAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?assign_assuming_AddRef@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@AAEXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign_with_AddRef@?$RefPtr@VPathRecording@gfx@mozilla@@@@AAEXPAVPathRecording@gfx@mozilla@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_1C08C']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRef@?$AddRefTraits@VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@SAXPAVPathRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?assign_assuming_AddRef@?$RefPtr@VPathRecording@gfx@mozilla@@@@AAEXPAVPathRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?atomic_fetch_add_explicit@std@@YAIPAUatomic_uint@1@IW4memory_order@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Atomic_fetch_add_4@std@@YAKPCKKW4memory_order@1@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?atomic_fetch_sub_explicit@std@@YAIPAUatomic_uint@1@IW4memory_order@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Atomic_fetch_sub_4@std@@YAKPCKKW4memory_order@1@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?atomic_store@std@@YAXPAUatomic_uint@1@I@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['5']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?atomic_store_explicit@std@@YAXPAUatomic_uint@1@IW4memory_order@1@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?atomic_store_explicit@std@@YAXPAUatomic_uint@1@IW4memory_order@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Atomic_store_4@std@@YAXPCKKW4memory_order@1@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?begin@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
lea ['ecx,', '[ebp+var_10]']
call ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?begin@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base12@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?bucket_count@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+20h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?bucket_count@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+20h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?capacity@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?category@error_code@std@@QBEABVerror_category@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?clear@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?clear@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXXZ']
push ['8']
mov ['ecx,', '[ebp+var_4]']
call ['?_Init@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?clear@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['ecx,', '[edx+4]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+8],', '0']
jmp ['short', 'loc_1C410']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx+4]']
jz ['short', 'loc_1C43A']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Freenode@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@@Z']
jmp ['short', 'loc_1C40A']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?clear@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['[ecx+8],', 'eax']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?clear@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['[ecx+8],', 'eax']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?construct@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@ABV32@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1C537']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_8]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_1C53E']
mov ['[ebp+var_C],', '0']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?construct@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@ABV32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1C597']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_8]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_1C59E']
mov ['[ebp+var_C],', '0']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?convert@?$ToStorageTypeArgument@I@detail@mozilla@@SAII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+Size],', '0']
jnz ['short', 'loc_1C5D1']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_1C5E8']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@D@std@@QAEXPADI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEXPAEI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@E@std@@QAEXPAEI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@M@std@@@std@@QAEXPAMI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@M@std@@QAEXPAMI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@E@std@@QAEXPAEI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@M@std@@QAEXPAMI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?dec@?$IntrinsicIncDec@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?sub@?$IntrinsicAddSub@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@I@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp_?_Syserror_map@std@@YAPBDH@Z']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_1CA52']
call ['?generic_category@std@@YAABVerror_category@1@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_1CA67']
jmp ['short', 'loc_1CA67']
call ['?system_category@std@@YAABVerror_category@1@XZ']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jnz ['short', 'loc_1CAD5']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_1CADC']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?end@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
lea ['ecx,', '[ebp+var_10]']
call ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?end@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@ABV01@@Z']
lea ['ecx,', '[ebp+var_10]']
call ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?end@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?end@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?eof@?$char_traits@D@std@@SAHXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
or ['eax,', '0FFFFFFFFh']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?eq@?$char_traits@D@std@@SA_NABD0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_4]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['ecx,', 'eax']
jnz ['short', 'loc_1CC10']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_1CC17']
mov ['[ebp+var_4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_1CC40']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_1CC47']
mov ['[ebp+var_4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '7Ch']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_88]']
mov ['ecx,', '1Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_68],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Hashval@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IBEIABQBX@Z']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
lea ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
jmp ['short', 'loc_1CCBD']
lea ['ecx,', '[ebp+var_1C]']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
mov ['eax,', '[ebp+var_14]']
push ['eax']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_End@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
call ['??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['loc_1CDF3']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
call ['??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ']
push ['eax']
call ['?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['loc_1CDEE']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_28],', 'edx']
jmp ['short', 'loc_1CD1A']
lea ['ecx,', '[ebp+var_1C]']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
mov ['eax,', '[ebp+var_14]']
push ['eax']
lea ['ecx,', '[ebp+var_34]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_End@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
call ['??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1CD63']
lea ['ecx,', '[ebp+var_1C]']
call ['??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ']
push ['eax']
call ['?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_1CD61']
jmp ['short', 'loc_1CD63']
jmp ['short', 'loc_1CD12']
lea ['edx,', '[ebp+var_1C]']
push ['edx']
lea ['ecx,', '[ebp+var_28]']
call ['??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_1CD78']
jmp ['short', 'loc_1CDF3']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
lea ['edx,', '[ebp+var_40]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_6C],', 'eax']
mov ['eax,', '[ebp+var_6C]']
mov ['[ebp+var_70],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_70]']
push ['ecx']
mov ['edx,', '[ebp+var_28]']
push ['edx']
lea ['eax,', '[ebp+var_4C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_74],', 'eax']
mov ['ecx,', '[ebp+var_74]']
mov ['[ebp+var_78],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['edx,', '[ebp+var_78]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z']
mov ['eax,', '[ebp+var_68]']
or ['eax,', '1']
mov ['[ebp+var_68],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_4C]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_40]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_1CE6B']
jmp ['loc_1CCB5']
lea ['ecx,', '[ebp+var_58]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
mov ['[ebp+var_7C],', 'eax']
mov ['edx,', '[ebp+var_7C]']
mov ['[ebp+var_80],', 'edx']
mov ['[ebp+var_4],', '2']
mov ['eax,', '[ebp+var_80]']
push ['eax']
lea ['ecx,', '[ebp+var_64]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
mov ['[ebp+var_84],', 'eax']
mov ['edx,', '[ebp+var_84]']
mov ['[ebp+var_88],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['eax,', '[ebp+var_88]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z']
mov ['ecx,', '[ebp+var_68]']
or ['ecx,', '1']
mov ['[ebp+var_68],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_64]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_58]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN22_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '88h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN21']
dd ['offset', '$LN18_0']
dd ['0FFFFFFD8h,', '4']
dd ['offset', '$LN19_1']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z$0 proc near
lea ['ecx,', '[ebp-40h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z$1 proc near
lea ['ecx,', '[ebp-4Ch]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z$3 proc near
lea ['ecx,', '[ebp-58h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z$4 proc near
lea ['ecx,', '[ebp-64h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-84h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?category@error_code@std@@QBEABVerror_category@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??8error_category@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_1CF51']
mov ['ecx,', '[ebp+arg_0]']
call ['?value@error_code@std@@QBEHXZ']
cmp ['eax,', '[ebp+arg_4]']
jnz ['short', 'loc_1CF51']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_1CF58']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', 'eax']
call ['??8error_condition@std@@QBE_NABV01@@Z']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '70h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_7C]']
mov ['ecx,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4C],', '0']
mov ['[ebp+var_4],', '1']
push ['2B4h']
push ['offset', '??_C@_1IK@IMDFCBHM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
lea ['eax,', '[ebp+arg_10]']
push ['eax']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_50],', 'eax']
mov ['ecx,', '[ebp+var_50]']
mov ['[ebp+var_54],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_18],', 'esp']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_58],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z']
add ['esp,', '20h']
lea ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
mov ['[ebp+var_5C],', 'eax']
mov ['ecx,', '[ebp+var_5C]']
mov ['[ebp+var_60],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['edx,', '[ebp+var_4C]']
or ['edx,', '1']
mov ['[ebp+var_4C],', 'edx']
mov ['eax,', '[ebp+var_60]']
push ['eax']
lea ['ecx,', '[ebp+arg_4]']
call ['??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_1D0CE']
lea ['edx,', '[ebp+var_34]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
mov ['[ebp+var_64],', 'eax']
mov ['eax,', '[ebp+var_64]']
mov ['[ebp+var_68],', 'eax']
mov ['[ebp+var_4],', '4']
mov ['ecx,', '[ebp+var_4C]']
or ['ecx,', '2']
mov ['[ebp+var_4C],', 'ecx']
mov ['edx,', '[ebp+var_68]']
push ['edx']
lea ['ecx,', '[ebp+arg_10]']
call ['??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_1D0CE']
mov ['[ebp+var_6C],', '1']
jmp ['short', 'loc_1D0D5']
mov ['[ebp+var_6C],', '0']
mov ['cl,', 'byte', 'ptr', '[ebp+var_6C]']
mov ['[ebp+var_19],', 'cl']
mov ['[ebp+var_4],', '3']
mov ['edx,', '[ebp+var_4C]']
and ['edx,', '2']
jz ['short', 'loc_1D0F6']
and ['[ebp+var_4C],', '0FFFFFFFDh']
lea ['ecx,', '[ebp+var_34]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '1']
mov ['eax,', '[ebp+var_4C]']
and ['eax,', '1']
jz ['short', 'loc_1D111']
and ['[ebp+var_4C],', '0FFFFFFFEh']
lea ['ecx,', '[ebp+var_28]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
movzx ['ecx,', '[ebp+var_19]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1D15E']
mov ['ecx,', '[ebp+var_10]']
call ['?clear@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEXXZ']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
mov ['eax,', '[ebp+var_4C]']
or ['eax,', '4']
mov ['[ebp+var_4C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_10]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_1D207']
jmp ['loc_1D1EC']
lea ['ecx,', '[ebp+arg_10]']
push ['ecx']
lea ['ecx,', '[ebp+arg_4]']
call ['??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1D1A0']
sub ['esp,', '0Ch']
mov ['eax,', 'esp']
mov ['[ebp+var_38],', 'esp']
push ['0']
push ['eax']
lea ['ecx,', '[ebp+arg_4]']
call ['??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z']
mov ['[ebp+var_70],', 'eax']
lea ['ecx,', '[ebp+var_44]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z']
mov ['[ebp+var_74],', 'eax']
lea ['ecx,', '[ebp+var_44]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
jmp ['short', 'loc_1D15E']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_48],', 'esp']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_78],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z']
mov ['[ebp+var_7C],', 'eax']
mov ['ecx,', '[ebp+var_4C]']
or ['ecx,', '4']
mov ['[ebp+var_4C],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_10]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_1D207']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_10]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '7Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$0 proc near
lea ['ecx,', '[ebp+18h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$1 proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$2 proc near
mov ['ecx,', '[ebp-14h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$4 proc near
mov ['eax,', '[ebp-4Ch]']
and ['eax,', '1']
jz ['$LN14_1']
and ['dword', 'ptr', '[ebp-4Ch],', '0FFFFFFFEh']
lea ['ecx,', '[ebp-28h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
retn
endp
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$5 proc near
mov ['eax,', '[ebp-4Ch]']
and ['eax,', '2']
jz ['$LN16_0']
and ['dword', 'ptr', '[ebp-4Ch],', '0FFFFFFFDh']
lea ['ecx,', '[ebp-34h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-78h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '3Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_48]']
mov ['ecx,', '0Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_30],', '0']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_4]']
call ['??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBEABQBXXZ']
push ['eax']
call ['?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Hashval@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IBEIABQBX@Z']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
push ['eax']
sub ['esp,', '0Ch']
mov ['esi,', 'esp']
mov ['[ebp+var_18],', 'esp']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_1C],', 'esp']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_34],', 'eax']
push ['esi']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_3C],', 'eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_20],', 'esp']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_40],', 'eax']
lea ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_44]']
mov ['[ebp+var_48],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['edx,', '[ebp+var_48]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['eax,', '[ebp+var_30]']
or ['eax,', '1']
mov ['[ebp+var_30],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '48h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z$0 proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z$4 proc near
lea ['ecx,', '[ebp-2Ch]']
jmp ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-48h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '6Ch']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_78]']
mov ['ecx,', '1Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_38],', '0']
lea ['edx,', '[ebp+var_38]']
push ['edx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_40],', 'esp']
lea ['eax,', '[ebp+var_20]']
push ['eax']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_60],', 'eax']
mov ['ecx,', '[ebp+var_60]']
mov ['[ebp+var_64],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_44],', 'esp']
lea ['edx,', '[ebp+var_2C]']
push ['edx']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_68],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
call ['??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z']
add ['esp,', '1Ch']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_48],', 'esp']
lea ['eax,', '[ebp+var_20]']
push ['eax']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_6C],', 'eax']
mov ['ecx,', '[ebp+var_6C]']
mov ['[ebp+var_70],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_4C],', 'esp']
lea ['edx,', '[ebp+var_2C]']
push ['edx']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_74],', 'eax']
lea ['eax,', '[ebp+var_58]']
push ['eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z']
mov ['[ebp+var_78],', 'eax']
lea ['ecx,', '[ebp+var_58]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_38]']
mov ['[ebp+var_5C],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_5C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '78h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
dd ['offset', '$LN12_3']
dd ['offset', '$LN9_0']
dd ['0FFFFFFC8h,', '4']
dd ['offset', '$LN10_3']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z$0 proc near
lea ['ecx,', '[ebp-2Ch]']
jmp ['??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z$1 proc near
mov ['ecx,', '[ebp-40h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z$3 proc near
mov ['ecx,', '[ebp-48h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-74h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_1D585']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+Dst],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_1D5D5']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
sub ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
ja ['short', 'loc_1D5F1']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
jmp ['short', 'loc_1D637']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_1D637']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
add ['eax,', '[ebp+arg_0]']
mov ['[ebp+Dst],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['?move@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '24h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_30],', 'eax']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_20],', '0']
mov ['[ebp+var_4],', '0']
sub ['esp,', '0Ch']
mov ['eax,', 'esp']
mov ['[ebp+var_18],', 'esp']
push ['0']
push ['eax']
lea ['ecx,', '[ebp+arg_4]']
call ['??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_28]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Freenode@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@@Z']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_1C],', 'esp']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$list@PBXV?$allocator@PBX@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
mov ['[ebp+var_30],', 'eax']
mov ['edx,', '[ebp+var_20]']
or ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '30h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z$0 proc	near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-28h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?erase@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?erase@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '24h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_30],', 'eax']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_20],', '0']
mov ['[ebp+var_4],', '0']
sub ['esp,', '0Ch']
mov ['eax,', 'esp']
mov ['[ebp+var_18],', 'esp']
push ['0']
push ['eax']
lea ['ecx,', '[ebp+arg_4]']
call ['??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE?AV01@H@Z']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Unlinknode@?$list@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_28]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Freenode@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@@Z']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_1C],', 'esp']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$list@_KV?$allocator@_K@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z']
mov ['[ebp+var_30],', 'eax']
mov ['edx,', '[ebp+var_20]']
or ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '30h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?erase@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z$0 proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?erase@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-28h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?erase@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?fetch_add@atomic_uint@std@@QAEIIW4memory_order@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['?atomic_fetch_add_explicit@std@@YAIPAUatomic_uint@1@IW4memory_order@1@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?fetch_sub@atomic_uint@std@@QAEIIW4memory_order@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['?atomic_fetch_sub_explicit@std@@YAIPAUatomic_uint@1@IW4memory_order@1@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?find@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?lower_bound@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z']
mov ['edx,', '[ebp+var_8]']
or ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?find@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?lower_bound@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z']
mov ['edx,', '[ebp+var_8]']
or ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?first@?$PairHelper@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@$00$0A@@detail@mozilla@@IAEAAPAEXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?first@?$PairHelper@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@$00$0A@@detail@mozilla@@IBEABQAEXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?forget@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_C],', '0']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?swap@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@QAEXAAPAVDrawTargetRecording@gfx@mozilla@@@Z']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@QAE@PAVDrawTargetRecording@gfx@mozilla@@@Z']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_11']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
dd ['offset', '$LN6_10']
dd ['offset', '$LN5_30']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?forget@?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_C],', '0']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?swap@?$RefPtr@VFilterNode@gfx@mozilla@@@@QAEXAAPAVFilterNode@gfx@mozilla@@@Z']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$already_AddRefed@VFilterNode@gfx@mozilla@@@@QAE@PAVFilterNode@gfx@mozilla@@@Z']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_8']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
dd ['offset', '$LN6_6']
dd ['offset', '$LN5_23']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?forget@?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_C],', '0']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?swap@?$RefPtr@VGradientStops@gfx@mozilla@@@@QAEXAAPAVGradientStops@gfx@mozilla@@@Z']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$already_AddRefed@VGradientStops@gfx@mozilla@@@@QAE@PAVGradientStops@gfx@mozilla@@@Z']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
dd ['offset', '$LN6']
dd ['offset', '$LN5_3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?forget@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_C],', '0']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?swap@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAEXAAPAVPathBuilderRecording@gfx@mozilla@@@Z']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAE@PAVPathBuilderRecording@gfx@mozilla@@@Z']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_10']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
dd ['offset', '$LN6_8']
dd ['offset', '$LN5_26']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?forget@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_C],', '0']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?swap@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAEXAAPAVPathRecording@gfx@mozilla@@@Z']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@PAVPathRecording@gfx@mozilla@@@Z']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
dd ['offset', '$LN6_7']
dd ['offset', '$LN5_25']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?forget@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_C],', '0']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?swap@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAEXAAPAVSourceSurface@gfx@mozilla@@@Z']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
dd ['offset', '$LN6_0']
dd ['offset', '$LN5_4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
lea ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_28],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_28]']
call ['??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBEAAEXZ']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ$0 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?generic_category@std@@YAABVerror_category@1@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?get@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QBEPAVDataSourceSurface@gfx@mozilla@@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?get@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?get@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?get@?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?get@?$RefPtr@VGradientStops@gfx@mozilla@@@@QBEPAVGradientStops@gfx@mozilla@@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?get@?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?get@?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?get@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QBEPAVPathBuilderRecording@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?get@?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?get@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?get@?$UniquePtr@$$BY0A@EV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QBEPAEXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?first@?$PairHelper@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@$00$0A@@detail@mozilla@@IBEABQAEXZ']
mov ['eax,', '[eax]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?inc@?$IntrinsicIncDec@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?add@?$IntrinsicAddSub@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@I@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?insert@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@2@$$QAPBX@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
movzx ['eax,', 'ds:__Nil_obj']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@PBX@std@@YA$$QAPBXAAPBX@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?insert@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@2@AB_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
movzx ['eax,', 'ds:__Nil_obj']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?insert@?$unordered_set@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@V?$allocator@PBX@2@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@2@$$QAPBX@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@PBX@std@@YA$$QAPBXAAPBX@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?insert@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@2@$$QAPBX@Z']
mov ['edx,', '[ebp+var_8]']
or ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?insert@?$unordered_set@_KU?$hash@_K@std@@U?$equal_to@_K@2@V?$allocator@_K@2@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@2@AB_K@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?insert@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@2@AB_K@Z']
mov ['edx,', '[ebp+var_8]']
or ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_18],', '0']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_18]']
or ['ecx,', '1']
mov ['[ebp+var_18],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0 proc	near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_18],', '0']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_18]']
or ['ecx,', '1']
mov ['[ebp+var_18],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$0 proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?length@?$char_traits@D@std@@SAIPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1E1DA']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_1E1E9']
mov ['edx,', '[ebp+Str]']
push ['edx']
call ['_strlen']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?load_factor@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBEMXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['dword', 'ptr', '[ebp+var_20],', 'eax']
mov ['dword', 'ptr', '[ebp+var_20+4],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['dword', 'ptr', '[ebp+var_10],', 'eax']
mov ['dword', 'ptr', '[ebp+var_10+4],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
cvtsi2sd ['xmm0,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '1Fh']
addsd ['xmm0,', 'ds:__xmm@41f00000000000000000000000000000[eax*8]']
movsd ['[ebp+var_10],', 'xmm0']
cvtsd2ss ['xmm0,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_4]']
movss ['[ebp+var_14],', 'xmm0']
call ['?bucket_count@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBEIXZ']
mov ['[ebp+var_18],', 'eax']
cvtsi2sd ['xmm0,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_18]']
shr ['ecx,', '1Fh']
addsd ['xmm0,', 'ds:__xmm@41f00000000000000000000000000000[ecx*8]']
movsd ['[ebp+var_20],', 'xmm0']
cvtsd2ss ['xmm0,', '[ebp+var_20]']
movss ['xmm1,', '[ebp+var_14]']
divss ['xmm1,', 'xmm0']
movss ['[ebp+var_24],', 'xmm1']
fld ['[ebp+var_24]']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?load_factor@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBEMXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['dword', 'ptr', '[ebp+var_20],', 'eax']
mov ['dword', 'ptr', '[ebp+var_20+4],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['dword', 'ptr', '[ebp+var_10],', 'eax']
mov ['dword', 'ptr', '[ebp+var_10+4],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
cvtsi2sd ['xmm0,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '1Fh']
addsd ['xmm0,', 'ds:__xmm@41f00000000000000000000000000000[eax*8]']
movsd ['[ebp+var_10],', 'xmm0']
cvtsd2ss ['xmm0,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_4]']
movss ['[ebp+var_14],', 'xmm0']
call ['?bucket_count@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBEIXZ']
mov ['[ebp+var_18],', 'eax']
cvtsi2sd ['xmm0,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_18]']
shr ['ecx,', '1Fh']
addsd ['xmm0,', 'ds:__xmm@41f00000000000000000000000000000[ecx*8]']
movsd ['[ebp+var_20],', 'xmm0']
cvtsd2ss ['xmm0,', '[ebp+var_20]']
movss ['xmm1,', '[ebp+var_14]']
divss ['xmm1,', 'xmm0']
movss ['[ebp+var_24],', 'xmm1']
fld ['[ebp+var_24]']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?lower_bound@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?lower_bound@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '4Ch']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_58]']
mov ['ecx,', '13h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_44],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Hashval@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IBEIABQBX@Z']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
lea ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
jmp ['short', 'loc_1E3A6']
lea ['ecx,', '[ebp+var_1C]']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
mov ['eax,', '[ebp+var_14]']
push ['eax']
lea ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_End@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
call ['??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['loc_1E4CF']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
call ['??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ']
push ['eax']
call ['?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['loc_1E4CA']
lea ['ecx,', '[ebp+var_1C]']
call ['??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ']
push ['eax']
call ['?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_1E445']
lea ['ecx,', '[ebp+var_34]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
mov ['[ebp+var_48],', 'eax']
mov ['edx,', '[ebp+var_48]']
mov ['[ebp+var_4C],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_44]']
or ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_4C]']
mov ['[ebp+var_50],', 'ecx']
jmp ['short', 'loc_1E474']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
lea ['eax,', '[ebp+var_40]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_54],', 'eax']
mov ['ecx,', '[ebp+var_54]']
mov ['[ebp+var_58],', 'ecx']
mov ['[ebp+var_4],', '1']
mov ['edx,', '[ebp+var_44]']
or ['edx,', '2']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+var_58]']
mov ['[ebp+var_50],', 'eax']
mov ['ecx,', '[ebp+var_50]']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+var_28]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['eax,', '[ebp+var_44]']
or ['eax,', '4']
mov ['[ebp+var_44],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_44]']
and ['ecx,', '2']
jz ['short', 'loc_1E4AA']
and ['[ebp+var_44],', '0FFFFFFFDh']
lea ['ecx,', '[ebp+var_40]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['edx,', '[ebp+var_44]']
and ['edx,', '1']
jz ['short', 'loc_1E4C5']
and ['[ebp+var_44],', '0FFFFFFFEh']
lea ['ecx,', '[ebp+var_34]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_1E4E7']
jmp ['loc_1E39E']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
mov ['ecx,', '[ebp+var_44]']
or ['ecx,', '4']
mov ['[ebp+var_44],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN20_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '58h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
dd ['offset', '$LN19_0']
dd ['offset', '$LN17_1']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?lower_bound@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z$0 proc near
mov ['eax,', '[ebp-44h]']
and ['eax,', '1']
jz ['$LN10_4']
and ['dword', 'ptr', '[ebp-44h],', '0FFFFFFFEh']
lea ['ecx,', '[ebp-34h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
retn
endp
__unwindfunclet$?lower_bound@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z$1 proc near
mov ['eax,', '[ebp-44h]']
and ['eax,', '2']
jz ['$LN12_4']
and ['dword', 'ptr', '[ebp-44h],', '0FFFFFFFDh']
lea ['ecx,', '[ebp-40h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?lower_bound@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?lower_bound@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?lower_bound@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?lower_bound@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '4Ch']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_58]']
mov ['ecx,', '13h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_44],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Hashval@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IBEIAB_K@Z']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
lea ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Begin@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
jmp ['short', 'loc_1E5EA']
lea ['ecx,', '[ebp+var_1C]']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
mov ['eax,', '[ebp+var_14]']
push ['eax']
lea ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_End@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
call ['??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['loc_1E713']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
call ['??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEAB_KXZ']
push ['eax']
call ['?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??R?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBE_NAB_K0@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['loc_1E70E']
lea ['ecx,', '[ebp+var_1C]']
call ['??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEAB_KXZ']
push ['eax']
call ['?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['??R?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBE_NAB_K0@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_1E689']
lea ['ecx,', '[ebp+var_34]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ']
mov ['[ebp+var_48],', 'eax']
mov ['edx,', '[ebp+var_48]']
mov ['[ebp+var_4C],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_44]']
or ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_4C]']
mov ['[ebp+var_50],', 'ecx']
jmp ['short', 'loc_1E6B8']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
lea ['eax,', '[ebp+var_40]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_54],', 'eax']
mov ['ecx,', '[ebp+var_54]']
mov ['[ebp+var_58],', 'ecx']
mov ['[ebp+var_4],', '1']
mov ['edx,', '[ebp+var_44]']
or ['edx,', '2']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+var_58]']
mov ['[ebp+var_50],', 'eax']
mov ['ecx,', '[ebp+var_50]']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+var_28]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['eax,', '[ebp+var_44]']
or ['eax,', '4']
mov ['[ebp+var_44],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_44]']
and ['ecx,', '2']
jz ['short', 'loc_1E6EE']
and ['[ebp+var_44],', '0FFFFFFFDh']
lea ['ecx,', '[ebp+var_40]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['edx,', '[ebp+var_44]']
and ['edx,', '1']
jz ['short', 'loc_1E709']
and ['[ebp+var_44],', '0FFFFFFFEh']
lea ['ecx,', '[ebp+var_34]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_1E72B']
jmp ['loc_1E5E2']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ']
mov ['ecx,', '[ebp+var_44]']
or ['ecx,', '4']
mov ['[ebp+var_44],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN20_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '58h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
dd ['offset', '$LN19_2']
dd ['offset', '$LN17_2']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?lower_bound@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z$0 proc near
mov ['eax,', '[ebp-44h]']
and ['eax,', '1']
jz ['$LN10_8']
and ['dword', 'ptr', '[ebp-44h],', '0FFFFFFFEh']
lea ['ecx,', '[ebp-34h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
retn
endp
__unwindfunclet$?lower_bound@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z$1 proc near
mov ['eax,', '[ebp-44h]']
and ['eax,', '2']
jz ['$LN12_8']
and ['dword', 'ptr', '[ebp-44h],', '0FFFFFFFDh']
lea ['ecx,', '[ebp-40h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?lower_bound@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?lower_bound@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_load_factor@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBEMXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
movss ['xmm0,', 'dword', 'ptr', '[eax+24h]']
movss ['[ebp+var_8],', 'xmm0']
fld ['[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_load_factor@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBEMXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
movss ['xmm0,', 'dword', 'ptr', '[eax+24h]']
movss ['[ebp+var_8],', 'xmm0']
fld ['[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAIABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAIABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@E@std@@@std@@SAIABV?$allocator@E@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@SAIABV?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PBXPAX@std@@@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@_KPAX@std@@@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator@D@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
or ['eax,', '0FFFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator@E@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
or ['eax,', '0FFFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '3FFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '15555555h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator@U?$_List_node@_KPAX@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '0FFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QBEIXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '3FFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '3FFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAIABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@_Alloc_max_size@std@@SAIHABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAIABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@_Alloc_max_size@std@@SAIHABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@D@std@@QBEIXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator_traits@V?$allocator@E@std@@@std@@SAIABV?$allocator@E@2@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@E@std@@QBEIXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator_traits@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@SAIABV?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@2@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QBEIXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PBXPAX@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QBEIXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@_KPAX@std@@@2@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@U?$_List_node@_KPAX@std@@@std@@QBEIXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@2@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QBEIXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QBEIXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '1']
ja ['short', 'loc_1EB2F']
mov ['[ebp+var_10],', '1']
jmp ['short', 'loc_1EB38']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$list@PBXV?$allocator@PBX@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QBEIXZ']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$list@_KV?$allocator@_K@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QBEIXZ']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QBEIXZ']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBEIXZ']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBEIXZ']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+Str],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_C],', '0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp_?_Syserror_map@std@@YAPBDH@Z']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1ECE5']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+Str],', 'ecx']
jmp ['short', 'loc_1ECEC']
mov ['[ebp+Str],', 'offset', '??_C@_0O@BFJCFAAK@unknown?5error?$AA@']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_C]']
or ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_4],', '1']
jnz ['short', 'loc_1ED59']
push ['offset', '??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_1ED75']
jmp ['short', 'loc_1ED75']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+Str],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_C],', '0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp_?_Winerror_map@std@@YAPBDH@Z']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1EDD1']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+Str],', 'ecx']
jmp ['short', 'loc_1EDD8']
mov ['[ebp+Str],', 'offset', '??_C@_0O@BFJCFAAK@unknown?5error?$AA@']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_C]']
or ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+Size],', '0']
jnz ['short', 'loc_1EE1E']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_1EE3F']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?name@_Generic_error_category@std@@UBEPBDXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_07DCLBNMLN@generic?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?name@_Iostream_error_category@std@@UBEPBDXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_08LLGCOLLL@iostream?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?name@_System_error_category@std@@UBEPBDXZ proc	near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_06FHFOAHML@system?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?not_eof@?$char_traits@D@std@@SAHABH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['ecx,', '[ebp+arg_0]']
cmp ['[ecx],', 'eax']
jz ['short', 'loc_1EEC6']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_1EEE5']
call ['?eof@?$char_traits@D@std@@SAHXZ']
test ['eax,', 'eax']
jnz ['short', 'loc_1EED8']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_1EEDF']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+Src],', 'eax']
mov ['[ebp+Dst],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+Size],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '2']
jz ['short', 'loc_1EF3B']
call ['?eof@?$char_traits@D@std@@SAHXZ']
jmp ['loc_1F2DA']
jmp ['short', 'loc_1EF6B']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_1C],', 'eax']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
lea ['eax,', '[ebp+var_1C]']
push ['eax']
call ['?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z']
add ['esp,', '8']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_1EF6B']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?not_eof@?$char_traits@D@std@@SAHABH@Z']
add ['esp,', '4']
jmp ['loc_1F2DA']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '8']
jz ['short', 'loc_1EFE5']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_1EFE5']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
cmp ['eax,', '[edx+38h]']
jnb ['short', 'loc_1EFE5']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['eax']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+38h]']
push ['ecx']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_1F054']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['esi,', 'eax']
jnb ['short', 'loc_1F054']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?to_char_type@?$char_traits@D@std@@SADABH@Z']
add ['esp,', '4']
mov ['bl,', 'al']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[eax],', 'bl']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_1F2DA']
jmp ['loc_1F2DA']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_1F073']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_1F09E']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['[ebp+var_20],', 'esi']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+Size],', 'eax']
mov ['ecx,', '[ebp+Size]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '1']
cmp ['edx,', '20h']
jnb ['short', 'loc_1F0BD']
mov ['[ebp+var_24],', '20h']
jmp ['short', 'loc_1F0C5']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '1']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+var_10],', '0']
jbe ['short', 'loc_1F0E8']
mov ['edx,', '7FFFFFFFh']
sub ['edx,', '[ebp+var_10]']
cmp ['edx,', '[ebp+var_C]']
jnb ['short', 'loc_1F0E8']
mov ['eax,', '[ebp+var_10]']
shr ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_1F0CB']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_1F0F8']
call ['?eof@?$char_traits@D@std@@SAHXZ']
jmp ['loc_1F2DA']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['?allocate@?$allocator@D@std@@QAEPADI@Z']
mov ['[ebp+Dst],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+Src],', 'eax']
cmp ['[ebp+Size],', '0']
jbe ['short', 'loc_1F142']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
cmp ['[ebp+Size],', '0']
jnz ['short', 'loc_1F1BD']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+Dst]']
mov ['[eax+38h],', 'ecx']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '[ebp+var_C]']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+3Ch]']
and ['edx,', '4']
jz ['short', 'loc_1F197']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+Dst]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_1F1B8']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '1']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['loc_1F288']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+38h]']
sub ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+38h],', 'eax']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '[ebp+var_C]']
mov ['esi,', 'esp']
push ['edx']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+Dst]']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '4']
jz ['short', 'loc_1F243']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+Dst]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_1F288']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '1']
mov ['esi,', 'esp']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+3Ch]']
and ['eax,', '1']
jz ['short', 'loc_1F2A6']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['?deallocate@?$allocator@D@std@@QAEXPADI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
or ['ecx,', '1']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+3Ch],', 'ecx']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?to_char_type@?$char_traits@D@std@@SADABH@Z']
add ['esp,', '4']
mov ['bl,', 'al']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[eax],', 'bl']
mov ['eax,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['loc_1F3BA']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['esi,', 'eax']
jbe ['short', 'loc_1F3BA']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_8],', 'eax']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z']
add ['esp,', '8']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_1F3C3']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?to_char_type@?$char_traits@D@std@@SADABH@Z']
add ['esp,', '4']
mov ['byte', 'ptr', '[ebp+var_C+3],', 'al']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '-1']
add ['eax,', 'edx']
push ['eax']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
call ['?eq@?$char_traits@D@std@@SA_NABD0@Z']
add ['esp,', '8']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1F3C3']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+3Ch]']
and ['eax,', '2']
jz ['short', 'loc_1F3C3']
call ['?eof@?$char_traits@D@std@@SAHXZ']
jmp ['short', 'loc_1F424']
jmp ['short', 'loc_1F424']
mov ['esi,', 'esp']
push ['0FFFFFFFFh']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_10],', 'eax']
lea ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_10]']
push ['edx']
call ['?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z']
add ['esp,', '8']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_1F418']
lea ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?to_char_type@?$char_traits@D@std@@SADABH@Z']
add ['esp,', '4']
mov ['bl,', 'al']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[eax],', 'bl']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?not_eof@?$char_traits@D@std@@SAHABH@Z']
add ['esp,', '4']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?push_back@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEX$$QAPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$addressof@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAV123@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Inside@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBE_NPBQAVDrawEventRecorderPrivate@gfx@mozilla@@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['loc_1F4FD']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$addressof@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAV123@@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+8]']
cmp ['ecx,', '[eax+0Ch]']
jnz ['short', 'loc_1F4A6']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['?_Reserve@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Orphan_range@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[ecx+edx*4]']
push ['eax']
call ['??$forward@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YA$$QAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAV123@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV234@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
add ['edx,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+8],', 'edx']
jmp ['short', 'loc_1F561']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ecx+8]']
cmp ['eax,', '[edx+0Ch]']
jnz ['short', 'loc_1F515']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['?_Reserve@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Orphan_range@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$forward@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YA$$QAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAV123@@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
lea ['edx,', '[ebp+var_C+2]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV234@@Z']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+8],', 'ecx']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?push_front@?$list@PBXV?$allocator@PBX@std@@@std@@QAEX$$QAPBX@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_begin@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$forward@PBX@std@@YA$$QAPBXAAPBX@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??$_Insert@PBX@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAPBX@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?push_front@?$list@_KV?$allocator@_K@std@@@std@@QAEXAB_K@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_begin@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??$_Insert@AB_K@?$list@_KV?$allocator@_K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@AB_K@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?reset@?$UniquePtr@$$BY0A@EV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QAEX$$T@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?first@?$PairHelper@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@$00$0A@@detail@mozilla@@IAEAAPAEXZ']
mov ['eax,', '[eax]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
call ['?first@?$PairHelper@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@$00$0A@@detail@mozilla@@IAEAAPAEXZ']
mov ['dword', 'ptr', '[eax],', '0']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1F667']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?second@?$PairHelper@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@$00$0A@@detail@mozilla@@IAEAAV?$DefaultDelete@$$BY0A@E@3@XZ']
mov ['ecx,', 'eax']
call ['??R?$DefaultDelete@$$BY0A@E@mozilla@@QBEXPAE@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '10h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ']
cmp ['[ebp+arg_0],', 'eax']
jnb ['short', 'loc_1F6DE']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ']
sub ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Pop_back_n@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z']
jmp ['loc_1F77B']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
jnb ['loc_1F77B']
lea ['eax,', '[ebp+var_1C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ']
mov ['ecx,', '[ebp+arg_0]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z']
mov ['[ebp+var_4],', '0']
lea ['edx,', '[ebp+var_1C+3]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ']
mov ['ecx,', '[ebp+arg_0]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
push ['eax']
call ['??$_Uninitialized_default_fill_n@PAEIU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z']
add ['esp,', '0Ch']
jmp ['short', 'loc_1F752']
endp
__catch$?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z$0 proc near
mov ['ecx,', '[ebp-14h]']
call ['?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN10_0']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_1F762']
endp
$LN10_0		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ']
mov ['ecx,', '[ebp+arg_0]']
sub ['ecx,', 'eax']
mov ['edx,', '[ebp+var_14]']
add ['ecx,', '[edx+8]']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+8],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
dd ['offset', '$LN13']
dd ['offset', '$LN11_1']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-24h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?second@?$PairHelper@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@$00$0A@@detail@mozilla@@IAEAAV?$DefaultDelete@$$BY0A@E@3@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_1F863']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
cmp ['[ecx+38h],', 'eax']
jnb ['short', 'loc_1F863']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+38h],', 'eax']
mov ['eax,', '[ebp+arg_10]']
and ['eax,', '1']
jz ['loc_1FA2F']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['loc_1FA2F']
cmp ['[ebp+arg_C],', '2']
jnz ['short', 'loc_1F8BA']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+38h]']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
cdq
add ['eax,', '[ebp+arg_4]']
adc ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_4],', 'eax']
mov ['[ebp+arg_8],', 'edx']
jmp ['short', 'loc_1F918']
cmp ['[ebp+arg_C],', '1']
jnz ['short', 'loc_1F901']
mov ['eax,', '[ebp+arg_10]']
and ['eax,', '2']
jnz ['short', 'loc_1F901']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['eax,', 'esi']
cdq
add ['eax,', '[ebp+arg_4]']
adc ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_4],', 'eax']
mov ['[ebp+arg_8],', 'edx']
jmp ['short', 'loc_1F918']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_1F918']
mov ['ecx,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['edx,', '[ecx]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ecx+4]']
mov ['[ebp+arg_8],', 'eax']
cmp ['[ebp+arg_8],', '0']
jl ['loc_1FA1A']
jg ['short', 'loc_1F92E']
cmp ['[ebp+arg_4],', '0']
jb ['loc_1FA1A']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+38h]']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
cdq
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_8]']
jg ['loc_1FA1A']
jl ['short', 'loc_1F96B']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+var_C]']
ja ['loc_1FA1A']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['eax,', 'esi']
cdq
add ['eax,', '[ebp+arg_4]']
adc ['edx,', '[ebp+arg_8]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_10]']
and ['edx,', '2']
jz ['short', 'loc_1FA18']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_1FA18']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_1FA2A']
mov ['eax,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['ecx,', '[eax]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[eax+4]']
mov ['[ebp+arg_8],', 'edx']
jmp ['loc_1FB93']
mov ['eax,', '[ebp+arg_10]']
and ['eax,', '2']
jz ['loc_1FB7B']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['loc_1FB7B']
cmp ['[ebp+arg_C],', '2']
jnz ['short', 'loc_1FA86']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+38h]']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
cdq
add ['eax,', '[ebp+arg_4]']
adc ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_4],', 'eax']
mov ['[ebp+arg_8],', 'edx']
jmp ['short', 'loc_1FADB']
cmp ['[ebp+arg_C],', '1']
jnz ['short', 'loc_1FAC5']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['eax,', 'esi']
cdq
add ['eax,', '[ebp+arg_4]']
adc ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_4],', 'eax']
mov ['[ebp+arg_8],', 'edx']
jmp ['short', 'loc_1FADB']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_1FADB']
mov ['eax,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['ecx,', '[eax]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[eax+4]']
mov ['[ebp+arg_8],', 'edx']
cmp ['[ebp+arg_8],', '0']
jl ['loc_1FB68']
jg ['short', 'loc_1FAED']
cmp ['[ebp+arg_4],', '0']
jb ['short', 'loc_1FB68']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+38h]']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
cdq
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_10]']
jg ['short', 'loc_1FB68']
jl ['short', 'loc_1FB22']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+var_14]']
ja ['short', 'loc_1FB68']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['eax,', 'esi']
cdq
add ['eax,', '[ebp+arg_4]']
adc ['edx,', '[ebp+arg_8]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_1FB79']
mov ['edx,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['eax,', '[edx]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[edx+4]']
mov ['[ebp+arg_8],', 'ecx']
jmp ['short', 'loc_1FB93']
mov ['edx,', '[ebp+arg_4]']
or ['edx,', '[ebp+arg_8]']
jz ['short', 'loc_1FB93']
mov ['eax,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['ecx,', '[eax]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[eax+4]']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$fpos@H@std@@QAE@_J@Z']
mov ['eax,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+arg_4]']
call ['??B?$fpos@H@std@@QBE_JXZ']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_1FC36']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
cmp ['[ecx+38h],', 'eax']
jnb ['short', 'loc_1FC36']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+38h],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_1FC58']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax+4]']
jnz ['short', 'loc_1FC58']
jmp ['loc_1FE6C']
mov ['edx,', '[ebp+arg_1C]']
and ['edx,', '1']
jz ['loc_1FD95']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['loc_1FD95']
cmp ['[ebp+var_8],', '0']
jl ['loc_1FD80']
jg ['short', 'loc_1FC94']
cmp ['[ebp+var_C],', '0']
jb ['loc_1FD80']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+38h]']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
cdq
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_14]']
jg ['loc_1FD80']
jl ['short', 'loc_1FCD1']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+var_18]']
ja ['loc_1FD80']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['eax,', 'esi']
cdq
add ['eax,', '[ebp+var_C]']
adc ['edx,', '[ebp+var_8]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_1C]']
and ['edx,', '2']
jz ['short', 'loc_1FD7E']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_1FD7E']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_1FD90']
mov ['eax,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_8],', 'edx']
jmp ['loc_1FE6C']
mov ['eax,', '[ebp+arg_1C]']
and ['eax,', '2']
jz ['loc_1FE5B']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['loc_1FE5B']
cmp ['[ebp+var_8],', '0']
jl ['loc_1FE48']
jg ['short', 'loc_1FDCD']
cmp ['[ebp+var_C],', '0']
jb ['short', 'loc_1FE48']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+38h]']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
cdq
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_1C]']
jg ['short', 'loc_1FE48']
jl ['short', 'loc_1FE02']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+var_20]']
ja ['short', 'loc_1FE48']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['eax,', 'esi']
cdq
add ['eax,', '[ebp+var_C]']
adc ['edx,', '[ebp+var_8]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_1FE59']
mov ['edx,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['eax,', '[edx]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[edx+4]']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_1FE6C']
mov ['edx,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['eax,', '[edx]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[edx+4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$fpos@H@std@@QAE@_J@Z']
mov ['eax,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['20h']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?size@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$list@PBXV?$allocator@PBX@std@@@std@@QBEIXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?size@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$list@_KV?$allocator@_K@std@@@std@@QBEIXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+14h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?size@?$list@PBXV?$allocator@PBX@std@@@std@@QBEIXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?size@?$list@_KV?$allocator@_K@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
sub ['eax,', '[ecx+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?size@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '7Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_7C]']
mov ['ecx,', '1Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_78],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '2']
jnz ['loc_200E5']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['loc_200E5']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_8]']
cmp ['[edx+38h],', 'eax']
jnb ['short', 'loc_2007F']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_7C],', 'eax']
jmp ['short', 'loc_20088']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+38h]']
mov ['[ebp+var_7C],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
call ['dword', 'ptr', 'ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_7C]']
sub ['edx,', 'eax']
push ['edx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
call ['dword', 'ptr', 'ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
lea ['ecx,', '[ebp+var_28]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z']
lea ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z']
mov ['ecx,', '[ebp+var_78]']
or ['ecx,', '1']
mov ['[ebp+var_78],', 'ecx']
lea ['ecx,', '[ebp+var_28]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_20196']
jmp ['loc_20196']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+3Ch]']
and ['eax,', '4']
jnz ['short', 'loc_2016E']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_2016E']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
call ['dword', 'ptr', 'ds:__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
push ['esi']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
lea ['ecx,', '[ebp+var_4C]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z']
lea ['ecx,', '[ebp+var_4C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z']
mov ['edx,', '[ebp+var_78]']
or ['edx,', '1']
mov ['[ebp+var_78],', 'edx']
lea ['ecx,', '[ebp+var_4C]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_20196']
jmp ['short', 'loc_20196']
lea ['ecx,', '[ebp+var_70]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
lea ['eax,', '[ebp+var_70]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z']
mov ['ecx,', '[ebp+var_78]']
or ['ecx,', '1']
mov ['[ebp+var_78],', 'ecx']
lea ['ecx,', '[ebp+var_70]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN18']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '7Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
dd ['offset', '$LN17_0']
dd ['offset', '$LN14']
dd ['0FFFFFFB4h,', '1Ch']
dd ['offset', '$LN15']
db ['90h']
db ['3', 'dup(0FFh)']
dd ['1Ch']
dd ['offset', '$LN16']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '18h']
call ['?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '18h']
call ['?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ']
mov ['ecx,', '[ebp+var_8]']
or ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?sub@?$IntrinsicAddSub@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['5']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?fetch_sub@atomic_uint@std@@QAEIIW4memory_order@2@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?swap@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@QAEXAAPAVDrawTargetRecording@gfx@mozilla@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?swap@?$RefPtr@VFilterNode@gfx@mozilla@@@@QAEXAAPAVFilterNode@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?swap@?$RefPtr@VGradientStops@gfx@mozilla@@@@QAEXAAPAVGradientStops@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?swap@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAEXAAPAVPathBuilderRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?swap@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAEXAAPAVPathRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?swap@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAEXAAPAVSourceSurface@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?system_category@std@@YAABVerror_category@1@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?take@?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAEPAVDataSourceSurface@gfx@mozilla@@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?take@?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAEPAVDrawTarget@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?take@?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@QAEPAVDrawTargetRecording@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?take@?$already_AddRefed@VFilterNode@gfx@mozilla@@@@QAEPAVFilterNode@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?take@?$already_AddRefed@VGradientStops@gfx@mozilla@@@@QAEPAVGradientStops@gfx@mozilla@@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?take@?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAEPAVPathBuilder@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?take@?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAEPAVPathBuilderRecording@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?take@?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAEPAVPathRecording@gfx@mozilla@@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?take@?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAEPAVSourceSurface@gfx@mozilla@@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?to_char_type@?$char_traits@D@std@@SADABH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['al,', '[eax]']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?to_int_type@?$char_traits@D@std@@SAHABD@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[eax]']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_205F1']
call ['?eof@?$char_traits@D@std@@SAHXZ']
jmp ['loc_20740']
jmp ['loc_20740']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['esi,', 'eax']
jnb ['short', 'loc_20640']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['?to_int_type@?$char_traits@D@std@@SAHABD@Z']
add ['esp,', '4']
jmp ['loc_20740']
jmp ['loc_20740']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '4']
jnz ['short', 'loc_206A5']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_206A5']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['esi,', 'eax']
ja ['short', 'loc_206B4']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
cmp ['[edx+38h],', 'eax']
ja ['short', 'loc_206B4']
call ['?eof@?$char_traits@D@std@@SAHXZ']
jmp ['loc_20740']
jmp ['loc_20740']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
cmp ['[ecx+38h],', 'eax']
jnb ['short', 'loc_206E6']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+38h],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+38h]']
push ['ecx']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['?to_int_type@?$char_traits@D@std@@SAHABD@Z']
add ['esp,', '4']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?value@error_code@std@@QBEHXZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?value@error_condition@std@@QBEHXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_MOZ_NoReturn	proc near		
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_hypot		proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
sub ['esp,', '8']
movsd ['xmm0,', '[ebp+arg_8]']
movsd ['[esp+0Ch+var_C],', 'xmm0']
sub ['esp,', '8']
movsd ['xmm0,', '[ebp+arg_0]']
movsd ['[esp+14h+var_14],', 'xmm0']
call ['dword', 'ptr', 'ds:__imp___hypot']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0']
dd ['offset', '__unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1']
dd ['offset', '__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0']
dd ['offset', '__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z$0']
dd ['offset', '__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0']
dd ['offset', '__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
align ['10h']
dd ['offset', '__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0']
align ['10h']
dd ['offset', '__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1']
dd ['0FFFFFFFFh,', '0']
dd ['1,', '0']
dd ['1,', '0']
dd ['offset', '__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
dd ['2']
dd ['offset', '__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
dd ['3', 'dup(0)']
dd ['1']
dd ['offset', '__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4']
dd ['2', 'dup(0)']
dd ['3,', '1']
dd ['offset', '__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0LinearGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0PAVGradientStops@12@ABVMatrix@12@@Z$0']
dd ['offset', '__unwindtable$??0LinearGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0PAVGradientStops@12@ABVMatrix@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??1LinearGradientPattern@gfx@mozilla@@UAE@XZ$0']
dd ['offset', '__unwindtable$??1LinearGradientPattern@gfx@mozilla@@UAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0RadialGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0MMPAVGradientStops@12@ABVMatrix@12@@Z$0']
dd ['offset', '__unwindtable$??0RadialGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0MMPAVGradientStops@12@ABVMatrix@12@@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??1RadialGradientPattern@gfx@mozilla@@UAE@XZ$0']
dd ['offset', '__unwindtable$??1RadialGradientPattern@gfx@mozilla@@UAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z$0']
dd ['offset', '__unwindtable$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??1SurfacePattern@gfx@mozilla@@UAE@XZ$0']
dd ['offset', '__unwindtable$??1SurfacePattern@gfx@mozilla@@UAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??1SourceSurface@gfx@mozilla@@UAE@XZ$0']
dd ['offset', '__unwindtable$??1SourceSurface@gfx@mozilla@@UAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0SourceSurface@gfx@mozilla@@QAE@XZ$0']
dd ['offset', '__unwindtable$??0SourceSurface@gfx@mozilla@@QAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0ScopedMap@DataSourceSurface@gfx@mozilla@@QAE@PAV123@W4MapType@123@@Z$0']
dd ['offset', '__unwindtable$??0ScopedMap@DataSourceSurface@gfx@mozilla@@QAE@PAV123@W4MapType@123@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??1ScopedMap@DataSourceSurface@gfx@mozilla@@UAE@XZ$0']
dd ['offset', '__unwindtable$??1ScopedMap@DataSourceSurface@gfx@mozilla@@UAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0DrawTarget@gfx@mozilla@@QAE@XZ$0']
dd ['0']
dd ['offset', '__unwindfunclet$??0DrawTarget@gfx@mozilla@@QAE@XZ$1']
dd ['offset', '__unwindtable$??0DrawTarget@gfx@mozilla@@QAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??1DrawTarget@gfx@mozilla@@UAE@XZ$0']
dd ['offset', '__unwindtable$??1DrawTarget@gfx@mozilla@@UAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$1']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$1']
dd ['offset', '__unwindtable$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0']
align ['10h']
dd ['offset', '__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1']
dd ['offset', '__unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0']
dd ['offset', '__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
align ['10h']
dd ['offset', '__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0']
dd ['offset', '__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3']
dd ['offset', '__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2']
dd ['4', 'dup(0)']
dd ['offset', '__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
align ['10h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z$0']
dd ['offset', '__unwindtable$??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0RecordedDrawTargetCreation@gfx@mozilla@@QAE@UReferencePtr@12@W4BackendType@12@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@_NPAVSourceSurface@12@@Z$0']
dd ['offset', '__unwindtable$??0RecordedDrawTargetCreation@gfx@mozilla@@QAE@UReferencePtr@12@W4BackendType@12@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@_NPAVSourceSurface@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??1RecordedDrawTargetCreation@gfx@mozilla@@UAE@XZ$0']
dd ['offset', '__unwindtable$??1RecordedDrawTargetCreation@gfx@mozilla@@UAE@XZ']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0RecordedFillRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUDrawOptions@12@@Z$0']
dd ['offset', '__unwindtable$??0RecordedFillRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUDrawOptions@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0RecordedStrokeRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z$0']
dd ['offset', '__unwindtable$??0RecordedStrokeRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0RecordedStrokeLine@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@1ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z$0']
dd ['offset', '__unwindtable$??0RecordedStrokeLine@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@1ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0RecordedFill@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@@Z$0']
dd ['offset', '__unwindtable$??0RecordedFill@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0RecordedFillGlyphs@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@PBUGlyph@12@I@Z$0']
align ['10h']
dd ['offset', '__unwindfunclet$??0RecordedFillGlyphs@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@PBUGlyph@12@I@Z$1']
dd ['offset', '__unwindtable$??0RecordedFillGlyphs@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@PBUGlyph@12@I@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0RecordedMask@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@1ABUDrawOptions@12@@Z$0']
dd ['offset', '__unwindtable$??0RecordedMask@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@1ABUDrawOptions@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0RecordedStroke@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z$0']
dd ['offset', '__unwindtable$??0RecordedStroke@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0RecordedPushLayer@gfx@mozilla@@QAE@PAVDrawTarget@12@_NMPAVSourceSurface@12@ABVMatrix@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@1@Z$0']
dd ['offset', '__unwindtable$??0RecordedPushLayer@gfx@mozilla@@QAE@PAVDrawTarget@12@_NMPAVSourceSurface@12@ABVMatrix@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@1@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0RecordedSnapshot@gfx@mozilla@@QAE@UReferencePtr@12@PAVDrawTarget@12@@Z$0']
dd ['offset', '__unwindtable$??0RecordedSnapshot@gfx@mozilla@@QAE@UReferencePtr@12@PAVDrawTarget@12@@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0RecordedFontData@gfx@mozilla@@QAE@PAVScaledFont@12@@Z$0']
dd ['offset', '__unwindtable$??0RecordedFontData@gfx@mozilla@@QAE@PAVScaledFont@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0RecordedMaskSurface@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@UReferencePtr@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUDrawOptions@12@@Z$0']
dd ['offset', '__unwindtable$??0RecordedMaskSurface@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@UReferencePtr@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUDrawOptions@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IPBMI@Z$0']
align ['8']
dd ['offset', '__unwindfunclet$??0RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IPBMI@Z$1']
dd ['offset', '__unwindtable$??0RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IPBMI@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z$2']
dd ['offset', '__unwindtable$?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z']
dd ['1']
dd ['offset', '__tryblocktable$?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z']
align ['10h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ$0']
dd ['offset', '__unwindtable$?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z$2']
dd ['offset', '__unwindtable$?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z']
dd ['1']
dd ['offset', '__tryblocktable$?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z$0']
dd ['offset', '__unwindtable$?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@I0@Z$0']
dd ['offset', '__unwindtable$??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@I0@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@IPAVSourceSurface@12@@Z$0']
dd ['offset', '__unwindtable$??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@IPAVSourceSurface@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?HasStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAE_NUReferencePtr@23@@Z$0']
align ['8']
dd ['offset', '__unwindfunclet$?HasStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAE_NUReferencePtr@23@@Z$1']
dd ['offset', '__unwindtable$?HasStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAE_NUReferencePtr@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?HasStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAE_N_K@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$?HasStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAE_N_K@Z$1']
dd ['offset', '__unwindtable$?HasStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAE_N_K@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
align ['10h']
dd ['offset', '__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z$2']
dd ['offset', '__unwindtable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z']
dd ['1']
dd ['offset', '__tryblocktable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z$0']
dd ['offset', '__unwindtable$?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z$0']
dd ['offset', '__unwindtable$?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z$0']
dd ['offset', '__unwindtable$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0']
dd ['offset', '__unwindtable$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z$0']
align ['8']
dd ['offset', '__unwindfunclet$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z$2']
dd ['offset', '__unwindtable$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z$4']
dd ['offset', '__unwindtable$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindtable$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$1']
dd ['1']
dd ['offset', '__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$2']
dd ['1']
dd ['offset', '__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$4']
dd ['3']
dd ['offset', '__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$5']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z$1']
dd ['0']
dd ['offset', '__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z$3']
dd ['offset', '__unwindtable$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?lower_bound@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z$0']
align ['8']
dd ['offset', '__unwindfunclet$?lower_bound@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z$1']
dd ['offset', '__unwindtable$?lower_bound@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z$1']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z$3']
dd ['2']
dd ['offset', '__unwindfunclet$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z$4']
dd ['offset', '__unwindtable$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z$0']
dd ['offset', '__unwindtable$?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0']
dd ['offset', '__unwindtable$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0']
dd ['offset', '__unwindtable$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$2']
dd ['2', 'dup(0)']
dd ['offset', '__catch$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0']
dd ['offset', '__unwindtable$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
dd ['2']
dd ['offset', '__tryblocktable$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
dd ['3', 'dup(0)']
dd ['1']
dd ['offset', '__catchsym$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$7']
dd ['2', 'dup(3),', '4,', '1']
dd ['offset', '__catchsym$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$8']
dd ['offset', '__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$4']
dd ['9', 'dup(0)']
dd ['offset', '__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$5']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z$0']
dd ['offset', '__unwindtable$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z$2']
dd ['offset', '__unwindtable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z']
dd ['1']
dd ['offset', '__tryblocktable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Unlinknode@?$list@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z$0']
dd ['offset', '__unwindtable$?_Unlinknode@?$list@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?erase@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z$0']
dd ['offset', '__unwindtable$?erase@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z$0']
dd ['offset', '__unwindtable$?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$0']
dd ['offset', '__unwindtable$?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?lower_bound@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$?lower_bound@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z$1']
dd ['offset', '__unwindtable$?lower_bound@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$0']
dd ['offset', '__unwindtable$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$0']
dd ['offset', '__unwindtable$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
align ['10h']
dd ['offset', '__catch$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$2']
align ['10h']
dd ['offset', '__catch$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$0']
dd ['offset', '__unwindtable$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
dd ['2']
dd ['offset', '__tryblocktable$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z']
dd ['3', 'dup(0)']
dd ['1']
dd ['offset', '__catchsym$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$7']
dd ['2', 'dup(3),', '4,', '1']
dd ['offset', '__catchsym$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$8']
dd ['offset', '__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$4']
dd ['9', 'dup(0)']
dd ['offset', '__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$5']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z$0']
dd ['offset', '__unwindtable$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z$0']
dd ['offset', '__unwindtable$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE?AV01@H@Z$0']
dd ['offset', '__unwindtable$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE?AV01@H@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?RecordingFontUserDataDestroyFunc@gfx@mozilla@@YAXPAX@Z$0']
dd ['offset', '__unwindfunclet$?RecordingSourceSurfaceUserDataFunc@gfx@mozilla@@YAXPAX@Z$0']
dd ['offset', '__unwindfunclet$?SetTransform@DrawTargetRecording@gfx@mozilla@@UAEXABVMatrix@23@@Z$0']
dd ['offset', '__unwindfunclet$?PopLayer@DrawTargetRecording@gfx@mozilla@@UAEXXZ$0']
dd ['offset', '__unwindfunclet$?PushLayer@DrawTargetRecording@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z$0']
dd ['offset', '__unwindfunclet$?PopClip@DrawTargetRecording@gfx@mozilla@@UAEXXZ$0']
dd ['offset', '__unwindfunclet$?PushClipRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z$0']
dd ['offset', '__unwindfunclet$?CopySurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$0']
dd ['offset', '__unwindfunclet$?ClearRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z$0']
dd ['offset', '__unwindfunclet$?DrawSurfaceWithShadow@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUColor@23@1MW4CompositionOp@23@@Z$0']
dd ['offset', '__unwindfunclet$?DrawFilter@DrawTargetRecording@gfx@mozilla@@UAEXPAVFilterNode@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z$0']
dd ['offset', '__unwindfunclet$?DrawSurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@1ABUDrawSurfaceOptions@23@ABUDrawOptions@23@@Z$0']
dd ['offset', '__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$1']
align ['8']
dd ['offset', '__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$0']
dd ['offset', '__unwindfunclet$?MaskSurface@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z$0']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$?MaskSurface@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z$1']
dd ['offset', '__unwindfunclet$?StrokeLine@DrawTargetRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$?StrokeLine@DrawTargetRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$1']
dd ['offset', '__unwindfunclet$?StrokeRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$?StrokeRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$1']
dd ['offset', '__unwindfunclet$?FillRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z$0']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$?FillRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z$1']
dd ['offset', '__unwindfunclet$?Mask@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z$0']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$?Mask@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z$1']
dd ['1']
dd ['offset', '__unwindfunclet$?Mask@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z$2']
dd ['offset', '__unwindfunclet$?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z$0']
align ['10h']
dd ['offset', '__unwindfunclet$?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z$1']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z$1']
dd ['2']
dd ['offset', '__unwindfunclet$?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z$2']
dd ['offset', '__unwindfunclet$?PushClip@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@@Z$0']
align ['10h']
dd ['offset', '__unwindfunclet$?PushClip@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@@Z$1']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$?PushClip@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@@Z$1']
dd ['2']
dd ['offset', '__unwindfunclet$?PushClip@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@@Z$2']
dd ['offset', '__unwindfunclet$?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z$0']
align ['10h']
dd ['offset', '__unwindfunclet$?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z$1']
align ['8']
dd ['offset', '__unwindfunclet$?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z$2']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z$3']
dd ['offset', '__unwindfunclet$??1DrawTargetRecording@gfx@mozilla@@UAE@XZ$0']
align ['10h']
dd ['offset', '__unwindfunclet$??1DrawTargetRecording@gfx@mozilla@@UAE@XZ$1']
dd ['1']
dd ['offset', '__unwindfunclet$??1DrawTargetRecording@gfx@mozilla@@UAE@XZ$2']
dd ['2']
dd ['offset', '__unwindfunclet$??1DrawTargetRecording@gfx@mozilla@@UAE@XZ$3']
dd ['offset', '__unwindtable$?RecordingFontUserDataDestroyFunc@gfx@mozilla@@YAXPAX@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?RecordingSourceSurfaceUserDataFunc@gfx@mozilla@@YAXPAX@Z']
align ['20h']
dd ['1']
dd ['offset', '__unwindtable$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?SetTransform@DrawTargetRecording@gfx@mozilla@@UAEXABVMatrix@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?CreateSimilarDrawTarget@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z']
align ['20h']
dd ['1']
dd ['offset', '__unwindtable$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?PopLayer@DrawTargetRecording@gfx@mozilla@@UAEXXZ']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?PushLayer@DrawTargetRecording@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?PopClip@DrawTargetRecording@gfx@mozilla@@UAEXXZ']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?PushClipRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?PushClip@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?MaskSurface@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?Mask@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z']
align ['20h']
dd ['1']
dd ['offset', '__unwindtable$?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?StrokeLine@DrawTargetRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?StrokeRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?FillRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?CopySurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?ClearRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
align ['20h']
dd ['1']
dd ['offset', '__unwindtable$?DrawSurfaceWithShadow@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUColor@23@1MW4CompositionOp@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?DrawFilter@DrawTargetRecording@gfx@mozilla@@UAEXPAVFilterNode@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?DrawSurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@1ABUDrawSurfaceOptions@23@ABUDrawOptions@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$??1DrawTargetRecording@gfx@mozilla@@UAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindfunclet$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z$0']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z$1']
dd ['1']
dd ['offset', '__unwindfunclet$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z$2']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z$3']
dd ['3']
dd ['offset', '__unwindfunclet$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z$4']
dd ['offset', '__unwindfunclet$?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$3']
dd ['0']
dd ['offset', '__unwindfunclet$?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$0']
dd ['1']
dd ['offset', '__unwindfunclet$?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$1']
dd ['0']
dd ['offset', '__unwindfunclet$?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$1']
dd ['3']
dd ['offset', '__unwindfunclet$?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$2']
dd ['offset', '__unwindfunclet$?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z$1']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z$1']
dd ['2']
dd ['offset', '__unwindfunclet$?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z$2']
dd ['2']
dd ['offset', '__unwindfunclet$?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z$3']
dd ['offset', '__unwindfunclet$?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$1']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$1']
dd ['2']
dd ['offset', '__unwindfunclet$?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$2']
dd ['2']
dd ['offset', '__unwindfunclet$?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$3']
dd ['offset', '__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z$1']
dd ['1']
dd ['offset', '__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z$2']
dd ['2']
dd ['offset', '__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z$3']
dd ['1']
dd ['offset', '__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z$3']
dd ['4']
dd ['offset', '__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z$4']
dd ['offset', '__unwindfunclet$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z$5']
dd ['0']
dd ['offset', '__unwindfunclet$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z$0']
dd ['1']
dd ['offset', '__unwindfunclet$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z$1']
dd ['0']
dd ['offset', '__unwindfunclet$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z$1']
dd ['3']
dd ['offset', '__unwindfunclet$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z$2']
dd ['3']
dd ['offset', '__unwindfunclet$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z$3']
dd ['5']
dd ['offset', '__unwindfunclet$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z$4']
dd ['offset', '__unwindfunclet$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z$5']
dd ['0']
dd ['offset', '__unwindfunclet$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z$0']
dd ['1']
dd ['offset', '__unwindfunclet$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z$1']
dd ['0']
dd ['offset', '__unwindfunclet$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z$1']
dd ['3']
dd ['offset', '__unwindfunclet$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z$2']
dd ['3']
dd ['offset', '__unwindfunclet$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z$3']
dd ['5']
dd ['offset', '__unwindfunclet$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z$4']
dd ['offset', '__unwindfunclet$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z$5']
dd ['0']
dd ['offset', '__unwindfunclet$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z$0']
dd ['1']
dd ['offset', '__unwindfunclet$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z$1']
dd ['0']
dd ['offset', '__unwindfunclet$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z$1']
dd ['3']
dd ['offset', '__unwindfunclet$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z$2']
dd ['3']
dd ['offset', '__unwindfunclet$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z$3']
dd ['5']
dd ['offset', '__unwindfunclet$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z$4']
dd ['offset', '__unwindfunclet$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$5']
dd ['0']
dd ['offset', '__unwindfunclet$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$0']
dd ['1']
dd ['offset', '__unwindfunclet$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$1']
dd ['0']
dd ['offset', '__unwindfunclet$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$1']
dd ['3']
dd ['offset', '__unwindfunclet$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$2']
dd ['3']
dd ['offset', '__unwindfunclet$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$3']
dd ['5']
dd ['offset', '__unwindfunclet$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$4']
dd ['offset', '__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$6']
dd ['0']
dd ['offset', '__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$0']
dd ['1']
dd ['offset', '__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$1']
dd ['0']
dd ['offset', '__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$1']
dd ['3']
dd ['offset', '__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$2']
dd ['3']
dd ['offset', '__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$3']
dd ['5']
dd ['offset', '__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$4']
dd ['6']
dd ['offset', '__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$5']
dd ['5']
dd ['offset', '__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$5']
dd ['offset', '__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$1']
dd ['1']
dd ['offset', '__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$2']
dd ['2']
dd ['offset', '__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$3']
dd ['3']
dd ['offset', '__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$4']
dd ['4']
dd ['offset', '__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$5']
dd ['3']
dd ['offset', '__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$5']
dd ['2']
dd ['offset', '__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$5']
dd ['7']
dd ['offset', '__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$6']
dd ['offset', '__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$1']
dd ['0']
dd ['offset', '__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$0']
dd ['1']
dd ['offset', '__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$2']
dd ['2']
dd ['offset', '__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$3']
dd ['1']
dd ['offset', '__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$3']
dd ['4']
dd ['offset', '__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$4']
dd ['4']
dd ['offset', '__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$5']
dd ['6']
dd ['offset', '__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$6']
dd ['7']
dd ['offset', '__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$7']
dd ['1']
dd ['offset', '__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$8']
dd ['offset', '__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$7']
dd ['0']
dd ['offset', '__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$0']
dd ['1']
dd ['offset', '__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$1']
dd ['0']
dd ['offset', '__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$1']
dd ['3']
dd ['offset', '__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$2']
dd ['3']
dd ['offset', '__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$3']
dd ['5']
dd ['offset', '__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$4']
dd ['6']
dd ['offset', '__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$5']
dd ['5']
dd ['offset', '__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$5']
dd ['8']
dd ['offset', '__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$6']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z$1']
dd ['offset', '__unwindtable$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??1PathBuilderRecording@gfx@mozilla@@UAE@XZ$0']
dd ['offset', '__unwindtable$??1PathBuilderRecording@gfx@mozilla@@UAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$?_Reallocate@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$?_Reallocate@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z$2']
dd ['offset', '__unwindtable$?_Reallocate@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z']
dd ['1']
dd ['offset', '__tryblocktable$?_Reallocate@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Orphan_range@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z$0']
dd ['offset', '__unwindtable$?_Orphan_range@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z$0']
dd ['offset', '__unwindtable$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ$0']
dd ['offset', '__unwindtable$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ$0']
align ['8']
dd ['offset', '__unwindfunclet$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ$1']
dd ['offset', '__unwindtable$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z$1']
dd ['1']
dd ['offset', '__unwindfunclet$??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z$2']
dd ['offset', '__unwindtable$??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ$0']
align ['8']
dd ['offset', '__unwindfunclet$??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ$1']
dd ['1']
dd ['offset', '__unwindfunclet$??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ$2']
dd ['2']
dd ['offset', '__unwindfunclet$??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ$3']
dd ['offset', '__unwindtable$??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0GradientStopsRecording@gfx@mozilla@@QAE@PAVGradientStops@12@PAVDrawEventRecorderPrivate@12@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??0GradientStopsRecording@gfx@mozilla@@QAE@PAVGradientStops@12@PAVDrawEventRecorderPrivate@12@@Z$1']
dd ['1']
dd ['offset', '__unwindfunclet$??0GradientStopsRecording@gfx@mozilla@@QAE@PAVGradientStops@12@PAVDrawEventRecorderPrivate@12@@Z$2']
dd ['offset', '__unwindtable$??0GradientStopsRecording@gfx@mozilla@@QAE@PAVGradientStops@12@PAVDrawEventRecorderPrivate@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??1GradientStopsRecording@gfx@mozilla@@UAE@XZ$0']
align ['8']
dd ['offset', '__unwindfunclet$??1GradientStopsRecording@gfx@mozilla@@UAE@XZ$1']
dd ['1']
dd ['offset', '__unwindfunclet$??1GradientStopsRecording@gfx@mozilla@@UAE@XZ$2']
dd ['2']
dd ['offset', '__unwindfunclet$??1GradientStopsRecording@gfx@mozilla@@UAE@XZ$3']
dd ['offset', '__unwindtable$??1GradientStopsRecording@gfx@mozilla@@UAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0FilterNodeRecording@gfx@mozilla@@QAE@PAVFilterNode@12@PAVDrawEventRecorderPrivate@12@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??0FilterNodeRecording@gfx@mozilla@@QAE@PAVFilterNode@12@PAVDrawEventRecorderPrivate@12@@Z$1']
dd ['1']
dd ['offset', '__unwindfunclet$??0FilterNodeRecording@gfx@mozilla@@QAE@PAVFilterNode@12@PAVDrawEventRecorderPrivate@12@@Z$2']
dd ['offset', '__unwindtable$??0FilterNodeRecording@gfx@mozilla@@QAE@PAVFilterNode@12@PAVDrawEventRecorderPrivate@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??1FilterNodeRecording@gfx@mozilla@@UAE@XZ$0']
align ['8']
dd ['offset', '__unwindfunclet$??1FilterNodeRecording@gfx@mozilla@@UAE@XZ$1']
dd ['1']
dd ['offset', '__unwindfunclet$??1FilterNodeRecording@gfx@mozilla@@UAE@XZ$2']
dd ['2']
dd ['offset', '__unwindfunclet$??1FilterNodeRecording@gfx@mozilla@@UAE@XZ$3']
dd ['offset', '__unwindtable$??1FilterNodeRecording@gfx@mozilla@@UAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?GetFilterNode@FilterNodeRecording@gfx@mozilla@@SAPAVFilterNode@23@PAV423@@Z$0']
dd ['offset', '__unwindtable$?GetFilterNode@FilterNodeRecording@gfx@mozilla@@SAPAVFilterNode@23@PAV423@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVSourceSurface@23@@Z$0']
dd ['offset', '__unwindtable$?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVSourceSurface@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVFilterNode@23@@Z$0']
dd ['offset', '__unwindtable$?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVFilterNode@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXI_N@Z$0']
dd ['offset', '__unwindtable$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXI_N@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXII@Z$0']
dd ['offset', '__unwindtable$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXII@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIM@Z$0']
dd ['offset', '__unwindtable$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIM@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z$0']
dd ['offset', '__unwindtable$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$0']
dd ['offset', '__unwindtable$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$0']
dd ['offset', '__unwindtable$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z$0']
dd ['offset', '__unwindtable$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$0']
dd ['offset', '__unwindtable$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z$0']
dd ['offset', '__unwindtable$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix@23@@Z$0']
dd ['offset', '__unwindtable$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix5x4@23@@Z$0']
dd ['offset', '__unwindtable$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix5x4@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z$0']
dd ['offset', '__unwindtable$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABUColor@23@@Z$0']
dd ['offset', '__unwindtable$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABUColor@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIPBMI@Z$0']
dd ['offset', '__unwindtable$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIPBMI@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$?0_N@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@I_NW4ArgType@012@@Z$0']
align ['8']
dd ['offset', '__unwindfunclet$??$?0_N@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@I_NW4ArgType@012@@Z$1']
dd ['offset', '__unwindtable$??$?0_N@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@I_NW4ArgType@012@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$?0I@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IIW4ArgType@012@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??$?0I@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IIW4ArgType@012@@Z$1']
dd ['offset', '__unwindtable$??$?0I@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IIW4ArgType@012@@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$?0M@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IMW4ArgType@012@@Z$0']
align ['10h']
dd ['offset', '__unwindfunclet$??$?0M@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IMW4ArgType@012@@Z$1']
dd ['offset', '__unwindtable$??$?0M@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IMW4ArgType@012@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$?0U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??$?0U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$1']
dd ['offset', '__unwindtable$??$?0U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$?0U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z$0']
align ['8']
dd ['offset', '__unwindfunclet$??$?0U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z$1']
dd ['offset', '__unwindtable$??$?0U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$?0U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??$?0U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z$1']
dd ['offset', '__unwindtable$??$?0U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$?0U?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$0']
align ['10h']
dd ['offset', '__unwindfunclet$??$?0U?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$1']
dd ['offset', '__unwindtable$??$?0U?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$?0U?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??$?0U?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z$1']
dd ['offset', '__unwindtable$??$?0U?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$?0U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$0']
align ['8']
dd ['offset', '__unwindfunclet$??$?0U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$1']
dd ['offset', '__unwindtable$??$?0U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$?0VMatrix@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix@12@W4ArgType@012@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??$?0VMatrix@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix@12@W4ArgType@012@@Z$1']
dd ['offset', '__unwindtable$??$?0VMatrix@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix@12@W4ArgType@012@@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$?0VMatrix5x4@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix5x4@12@W4ArgType@012@@Z$0']
align ['10h']
dd ['offset', '__unwindfunclet$??$?0VMatrix5x4@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix5x4@12@W4ArgType@012@@Z$1']
dd ['offset', '__unwindtable$??$?0VMatrix5x4@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix5x4@12@W4ArgType@012@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$?0U?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??$?0U?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$1']
dd ['offset', '__unwindtable$??$?0U?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$?0UColor@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IUColor@12@W4ArgType@012@@Z$0']
align ['8']
dd ['offset', '__unwindfunclet$??$?0UColor@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IUColor@12@W4ArgType@012@@Z$1']
dd ['offset', '__unwindtable$??$?0UColor@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IUColor@12@W4ArgType@012@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ$0']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ$1']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ$2']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ$3']
dd ['offset', '__unwindtable$??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$MakeAndAddRef@VDrawTargetRecording@gfx@mozilla@@QBV123@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@AAW4SurfaceFormat@23@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@$$QBQBVDrawTargetRecording@gfx@0@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@30@AAW4SurfaceFormat@30@@Z$2']
align ['10h']
dd ['offset', '__unwindfunclet$??$MakeAndAddRef@VDrawTargetRecording@gfx@mozilla@@QBV123@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@AAW4SurfaceFormat@23@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@$$QBQBVDrawTargetRecording@gfx@0@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@30@AAW4SurfaceFormat@30@@Z$0']
align ['8']
dd ['offset', '__unwindfunclet$??$MakeAndAddRef@VDrawTargetRecording@gfx@mozilla@@QBV123@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@AAW4SurfaceFormat@23@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@$$QBQBVDrawTargetRecording@gfx@0@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@30@AAW4SurfaceFormat@30@@Z$1']
dd ['offset', '__unwindtable$??$MakeAndAddRef@VDrawTargetRecording@gfx@mozilla@@QBV123@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@AAW4SurfaceFormat@23@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@$$QBQBVDrawTargetRecording@gfx@0@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@30@AAW4SurfaceFormat@30@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$MakeAndAddRef@VPathBuilderRecording@gfx@mozilla@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@gfx@0@@Z$2']
dd ['0']
dd ['offset', '__unwindfunclet$??$MakeAndAddRef@VPathBuilderRecording@gfx@mozilla@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@gfx@0@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??$MakeAndAddRef@VPathBuilderRecording@gfx@mozilla@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@gfx@0@@Z$1']
dd ['offset', '__unwindtable$??$MakeAndAddRef@VPathBuilderRecording@gfx@mozilla@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@gfx@0@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0']
dd ['offset', '__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base12@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base12@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z$0']
align ['10h']
dd ['offset', '__unwindfunclet$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z$1']
dd ['1']
dd ['offset', '__unwindfunclet$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z$2']
dd ['offset', '__unwindtable$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z$0']
dd ['1,', '2,', '1']
dd ['offset', '__catchsym$??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z$5']
dd ['offset', '__unwindfunclet$??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z$2']
dd ['0FFFFFFFFh,', '0']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z$4']
dd ['offset', '__unwindtable$??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z$1']
dd ['1']
dd ['offset', '__unwindfunclet$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z$2']
dd ['offset', '__unwindtable$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z$0']
dd ['offset', '__unwindtable$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z$0']
dd ['1,', '2,', '1']
dd ['offset', '__catchsym$??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z$5']
dd ['offset', '__unwindfunclet$??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z$2']
dd ['0FFFFFFFFh,', '0']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z$4']
dd ['offset', '__unwindtable$??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0']
dd ['offset', '__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z$0']
dd ['offset', '__unwindtable$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z$0']
align ['8']
dd ['offset', '__unwindfunclet$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z$1']
dd ['offset', '__unwindtable$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@$$QA_N@Z$0']
dd ['offset', '__unwindtable$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@$$QA_N@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z$0']
align ['8']
dd ['offset', '__unwindfunclet$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z$1']
dd ['offset', '__unwindtable$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@1@$$QA_N@Z$0']
dd ['offset', '__unwindtable$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@1@$$QA_N@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2']
dd ['offset', '__unwindtable$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
align ['10h']
dd ['1']
assume ['cs:_xdata$x']
align ['10h']
dd ['offset', '__catch$??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z$0']
dd ['1,', '2,', '1']
dd ['offset', '__catchsym$??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z$5']
dd ['offset', '__unwindfunclet$??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z$2']
dd ['0FFFFFFFFh,', '0']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z$4']
dd ['offset', '__unwindtable$??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z$0']
dd ['1,', '2,', '1']
dd ['offset', '__catchsym$??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z$5']
dd ['offset', '__unwindfunclet$??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z$2']
dd ['0FFFFFFFFh,', '0']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z$4']
dd ['offset', '__unwindtable$??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z']
align ['10h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z$0']
dd ['offset', '__unwindtable$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV234@@Z$0']
dd ['offset', '__unwindtable$??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV234@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0']
dd ['offset', '__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
align ['10h']
dd ['offset', '__catch$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2']
dd ['offset', '__unwindtable$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2']
dd ['offset', '__unwindtable$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
align ['10h']
dd ['1']
assume ['cs:_xdata$x']
align ['10h']
dd ['offset', '__catch$??$_Buynode@PBX@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@1@PAU21@0$$QAPBX@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$??$_Buynode@PBX@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@1@PAU21@0$$QAPBX@Z$2']
dd ['offset', '__unwindtable$??$_Buynode@PBX@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@1@PAU21@0$$QAPBX@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$_Buynode@PBX@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@1@PAU21@0$$QAPBX@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$??$_Buynode@AB_K@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@1@PAU21@0AB_K@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$??$_Buynode@AB_K@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@1@PAU21@0AB_K@Z$2']
dd ['offset', '__unwindtable$??$_Buynode@AB_K@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@1@PAU21@0AB_K@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$_Buynode@AB_K@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@1@PAU21@0AB_K@Z']
align ['10h']
dd ['1']
assume ['cs:_xdata$x']
align ['10h']
dd ['offset', '__catch$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2']
dd ['offset', '__unwindtable$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@PBXPBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX$$QAPBX@Z$0']
dd ['offset', '__unwindtable$??$construct@PBXPBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX$$QAPBX@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@_KAB_K@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPA_KAB_K@Z$0']
dd ['offset', '__unwindtable$??$construct@_KAB_K@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPA_KAB_K@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z$0']
dd ['offset', '__unwindtable$??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z$0']
dd ['offset', '__unwindtable$??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z$0']
dd ['offset', '__unwindtable$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z$0']
dd ['offset', '__unwindtable$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
align ['20h']
dd ['1']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
unicode ['0,', '<C:\\Program', 'Files', '(x86)\\Microsoft', 'Visual', 'Studio', '12.0\\VC\\in>']
unicode ['0,', '<clude\\xutility>,0']
assume ['cs:_rdata']
public ['??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@']
unicode ['0,', '<ITERATOR', 'LIST', 'CORRUPTED!>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_00CNPNBAHC@?$AA@']
align ['10h']
assume ['cs:_rdata']
dd ['offset', '??_R4error_category@std@@6B@']
public ['??_7error_category@std@@6B@']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z']
assume ['cs:_rdata']
dd ['offset', '??_R4_Generic_error_category@std@@6B@']
public ['??_7_Generic_error_category@std@@6B@']
dd ['offset', '?name@_Generic_error_category@std@@UBEPBDXZ']
dd ['offset', '?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
dd ['offset', '?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z']
assume ['cs:_rdata']
public ['??_C@_07DCLBNMLN@generic?$AA@']
assume ['cs:_rdata']
public ['??_C@_0O@BFJCFAAK@unknown?5error?$AA@']
align ['10h']
assume ['cs:_rdata']
dd ['offset', '??_R4_Iostream_error_category@std@@6B@']
public ['??_7_Iostream_error_category@std@@6B@']
dd ['offset', '?name@_Iostream_error_category@std@@UBEPBDXZ']
dd ['offset', '?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
dd ['offset', '?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z']
assume ['cs:_rdata']
public ['??_C@_08LLGCOLLL@iostream?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@']
align ['10h']
assume ['cs:_rdata']
dd ['offset', '??_R4_System_error_category@std@@6B@']
public ['??_7_System_error_category@std@@6B@']
dd ['offset', '?name@_System_error_category@std@@UBEPBDXZ']
dd ['offset', '?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
dd ['offset', '?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z']
assume ['cs:_rdata']
public ['??_C@_06FHFOAHML@system?$AA@']
align ['4']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
assume ['cs:_rdata']
public ['??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
unicode ['0,', '<C:\\Program', 'Files', '(x86)\\Microsoft', 'Visual', 'Studio', '12.0\\VC\\in>']
unicode ['0,', '<clude\\xatomic.h>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1CK@BEGEBJJG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@']
unicode ['0,', '<Invalid', 'memory_order>,0']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@']
assume ['cs:_rdata']
public ['??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@']
unicode ['0,', '<"Standard', 'C++', 'Libraries', 'Invalid', 'Argument"', '&&', '0>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
unicode ['0,', '<%s>,0']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@']
unicode ['0,', '<"invalid', 'argument">,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1CK@BEBCCGEN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAs?$AAt?$AAo?$AAr?$AAe?$AA_?$AA4?$AA?$AA@']
unicode ['0,', '<std::_Atomic_store_4>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1DC@FMPHIJPC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAf?$AAe?$AAt?$AAc?$AAh?$AA_?$AAa?$AAd?$AAd?$AA_?$AA4?$AA?$AA@']
unicode ['0,', '<std::_Atomic_fetch_add_4>,0']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4GradientStops@gfx@mozilla@@6B@']
public ['??_7GradientStops@gfx@mozilla@@6B@']
dd ['offset', '__purecall']
dd ['offset', '?IsValid@GradientStops@gfx@mozilla@@UBE_NXZ']
assume ['cs:_rdata']
dd ['offset', '??_R4Pattern@gfx@mozilla@@6B@']
public ['??_7Pattern@gfx@mozilla@@6B@']
dd ['offset', '__purecall']
assume ['cs:_rdata']
dd ['offset', '??_R4ColorPattern@gfx@mozilla@@6B@']
public ['??_7ColorPattern@gfx@mozilla@@6B@']
dd ['offset', '?GetType@ColorPattern@gfx@mozilla@@UBE?AW4PatternType@23@XZ']
assume ['cs:_rdata']
dd ['offset', '??_R4LinearGradientPattern@gfx@mozilla@@6B@']
public ['??_7LinearGradientPattern@gfx@mozilla@@6B@']
dd ['offset', '?GetType@LinearGradientPattern@gfx@mozilla@@UBE?AW4PatternType@23@XZ']
assume ['cs:_rdata']
dd ['offset', '??_R4RadialGradientPattern@gfx@mozilla@@6B@']
public ['??_7RadialGradientPattern@gfx@mozilla@@6B@']
dd ['offset', '?GetType@RadialGradientPattern@gfx@mozilla@@UBE?AW4PatternType@23@XZ']
assume ['cs:_rdata']
dd ['offset', '??_R4SurfacePattern@gfx@mozilla@@6B@']
public ['??_7SurfacePattern@gfx@mozilla@@6B@']
dd ['offset', '?GetType@SurfacePattern@gfx@mozilla@@UBE?AW4PatternType@23@XZ']
assume ['cs:_rdata']
dd ['offset', '??_R4SourceSurface@gfx@mozilla@@6B@']
public ['??_7SourceSurface@gfx@mozilla@@6B@']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?IsValid@SourceSurface@gfx@mozilla@@UBE_NXZ']
dd ['offset', '__purecall']
dd ['offset', '?GetNativeSurface@SourceSurface@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z']
dd ['offset', '?GuaranteePersistance@SourceSurface@gfx@mozilla@@MAEXXZ']
assume ['cs:_rdata']
dd ['offset', '??_R4ScopedMap@DataSourceSurface@gfx@mozilla@@6B@']
public ['??_7ScopedMap@DataSourceSurface@gfx@mozilla@@6B@']
assume ['cs:_rdata']
dd ['offset', '??_R4PathSink@gfx@mozilla@@6B@']
public ['??_7PathSink@gfx@mozilla@@6B@']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
assume ['cs:_rdata']
dd ['offset', '??_R4PathBuilder@gfx@mozilla@@6B@']
public ['??_7PathBuilder@gfx@mozilla@@6B@']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
assume ['cs:_rdata']
dd ['offset', '??_R4DrawTarget@gfx@mozilla@@6B@']
public ['??_7DrawTarget@gfx@mozilla@@6B@']
dd ['offset', '?IsValid@DrawTarget@gfx@mozilla@@UBE_NXZ']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?IsRecording@DrawTarget@gfx@mozilla@@UBE_NXZ']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?LockBits@DrawTarget@gfx@mozilla@@UAE_NPAPAEPAU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@PAHPAW4SurfaceFormat@23@PAU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['offset', '?ReleaseBits@DrawTarget@gfx@mozilla@@UAEXPAE@Z']
dd ['offset', '__purecall']
dd ['offset', '?DrawCapturedDT@DrawTarget@gfx@mozilla@@UAEXPAVDrawTargetCapture@23@ABVMatrix@23@@Z']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?PushLayer@DrawTarget@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z']
dd ['offset', '?PopLayer@DrawTarget@gfx@mozilla@@UAEXXZ']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?CreateCaptureDT@DrawTarget@gfx@mozilla@@UAE?AU?$already_AddRefed@VDrawTargetCapture@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['offset', '?CreateShadowDrawTarget@DrawTarget@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@M@Z']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?SetTransform@DrawTarget@gfx@mozilla@@UAEXABVMatrix@23@@Z']
dd ['offset', '?GetNativeSurface@DrawTarget@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z']
dd ['offset', '?IsDualDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ']
dd ['offset', '?IsTiledDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ']
dd ['offset', '?SupportsRegionClipping@DrawTarget@gfx@mozilla@@UBE_NXZ']
dd ['offset', '?IsCurrentGroupOpaque@DrawTarget@gfx@mozilla@@UAE_NXZ']
dd ['offset', '?SetPermitSubpixelAA@DrawTarget@gfx@mozilla@@UAEX_N@Z']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A']
assume ['cs:_rdata']
dd ['offset', '??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
public ['??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
dd ['offset', '?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ']
dd ['offset', '?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ']
dd ['offset', '?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z']
dd ['offset', '?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z']
dd ['offset', '?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ']
dd ['offset', '?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ']
dd ['offset', '?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ']
dd ['offset', '?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z']
dd ['offset', '?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z']
dd ['offset', '?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z']
dd ['offset', '?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z']
dd ['offset', '?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z']
dd ['offset', '?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ']
dd ['offset', '?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z']
assume ['cs:_rdata']
dd ['offset', '??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
public ['??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
assume ['cs:_rdata']
public ['??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@']
dd ['offset', '$SG86581']
assume ['cs:_rdata']
public ['??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@']
dd ['offset', '$SG86522+8']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedEvent@gfx@mozilla@@6B@']
public ['??_7RecordedEvent@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedEvent@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedEvent@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedEvent@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedDrawingEvent@gfx@mozilla@@6B@']
public ['??_7RecordedDrawingEvent@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedEvent@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedDrawingEvent@gfx@mozilla@@MBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedEvent@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '__purecall']
dd ['offset', '?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedDrawTargetCreation@gfx@mozilla@@6B@']
public ['??_7RecordedDrawTargetCreation@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedDrawTargetCreation@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedDrawTargetCreation@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedDrawTargetCreation@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedDrawTargetCreation@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawTargetCreation@gfx@mozilla@@UBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0BE@EEEOOOM@DrawTarget?5Creation?$AA@']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedDrawTargetDestruction@gfx@mozilla@@6B@']
public ['??_7RecordedDrawTargetDestruction@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedDrawTargetDestruction@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedDrawTargetDestruction@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedDrawTargetDestruction@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedDrawTargetDestruction@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawTargetDestruction@gfx@mozilla@@UBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0BH@OLFOHOKF@DrawTarget?5Destruction?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedCreateSimilarDrawTarget@gfx@mozilla@@6B@']
public ['??_7RecordedCreateSimilarDrawTarget@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedCreateSimilarDrawTarget@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedCreateSimilarDrawTarget@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedCreateSimilarDrawTarget@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedCreateSimilarDrawTarget@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedCreateSimilarDrawTarget@gfx@mozilla@@UBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0BI@HAALHLCF@CreateSimilarDrawTarget?$AA@']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedFillRect@gfx@mozilla@@6B@']
public ['??_7RecordedFillRect@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedFillRect@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedFillRect@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedFillRect@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedFillRect@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_08HBDJBON@FillRect?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedStrokeRect@gfx@mozilla@@6B@']
public ['??_7RecordedStrokeRect@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedStrokeRect@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedStrokeRect@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedStrokeRect@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedStrokeRect@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0L@MDHJFNHH@StrokeRect?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedStrokeLine@gfx@mozilla@@6B@']
public ['??_7RecordedStrokeLine@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedStrokeLine@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedStrokeLine@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedStrokeLine@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedStrokeLine@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0L@NHOHLGP@StrokeLine?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedFill@gfx@mozilla@@6B@']
public ['??_7RecordedFill@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedFill@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedFill@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedFill@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedFill@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_04CAMFALGN@Fill?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedFillGlyphs@gfx@mozilla@@6B@']
public ['??_7RecordedFillGlyphs@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedFillGlyphs@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedFillGlyphs@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedFillGlyphs@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedFillGlyphs@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0L@JJNFGDBI@FillGlyphs?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedMask@gfx@mozilla@@6B@']
public ['??_7RecordedMask@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedMask@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedMask@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedMask@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedMask@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_04MKJKGABJ@Mask?$AA@']
align ['10h']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedStroke@gfx@mozilla@@6B@']
public ['??_7RecordedStroke@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedStroke@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedStroke@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedStroke@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedStroke@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_06FMECHDKF@Stroke?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedClearRect@gfx@mozilla@@6B@']
public ['??_7RecordedClearRect@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedClearRect@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedClearRect@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedClearRect@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedClearRect@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_09GPGGEOMP@ClearRect?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedCopySurface@gfx@mozilla@@6B@']
public ['??_7RecordedCopySurface@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedCopySurface@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedCopySurface@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedCopySurface@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedCopySurface@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0M@EOFCJBAL@CopySurface?$AA@']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedPushClip@gfx@mozilla@@6B@']
public ['??_7RecordedPushClip@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedPushClip@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedPushClip@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedPushClip@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedPushClip@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_08LAKJJBCJ@PushClip?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedPushClipRect@gfx@mozilla@@6B@']
public ['??_7RecordedPushClipRect@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedPushClipRect@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedPushClipRect@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedPushClipRect@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedPushClipRect@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0N@NKKGNEEO@PushClipRect?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedPopClip@gfx@mozilla@@6B@']
public ['??_7RecordedPopClip@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedPopClip@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedPopClip@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedPopClip@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedPopClip@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_07LPLNABOG@PopClip?$AA@']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedPushLayer@gfx@mozilla@@6B@']
public ['??_7RecordedPushLayer@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedPushLayer@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedPushLayer@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedPushLayer@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedPushLayer@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_09BMDJGKOJ@PushLayer?$AA@']
align ['10h']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedPopLayer@gfx@mozilla@@6B@']
public ['??_7RecordedPopLayer@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedPopLayer@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedPopLayer@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedPopLayer@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedPopLayer@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_08BHONKBFI@PopLayer?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedSetTransform@gfx@mozilla@@6B@']
public ['??_7RecordedSetTransform@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedSetTransform@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedSetTransform@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedSetTransform@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedSetTransform@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0N@GMAEDBFE@SetTransform?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedDrawSurface@gfx@mozilla@@6B@']
public ['??_7RecordedDrawSurface@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedDrawSurface@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedDrawSurface@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedDrawSurface@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedDrawSurface@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0M@FPAGMAAM@DrawSurface?$AA@']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedDrawSurfaceWithShadow@gfx@mozilla@@6B@']
public ['??_7RecordedDrawSurfaceWithShadow@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedDrawSurfaceWithShadow@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedDrawSurfaceWithShadow@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedDrawSurfaceWithShadow@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedDrawSurfaceWithShadow@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0BG@KGEGJOEN@DrawSurfaceWithShadow?$AA@']
align ['10h']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedDrawFilter@gfx@mozilla@@6B@']
public ['??_7RecordedDrawFilter@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedDrawFilter@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedDrawFilter@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedDrawFilter@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedDrawFilter@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0L@OHCNNFM@DrawFilter?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedSourceSurfaceCreation@gfx@mozilla@@6B@']
public ['??_7RecordedSourceSurfaceCreation@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedSourceSurfaceCreation@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedSourceSurfaceCreation@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedSourceSurfaceCreation@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedSourceSurfaceCreation@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedSourceSurfaceCreation@gfx@mozilla@@UBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0BH@GPIFHBMB@SourceSurface?5Creation?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedSourceSurfaceDestruction@gfx@mozilla@@6B@']
public ['??_7RecordedSourceSurfaceDestruction@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedSourceSurfaceDestruction@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedSourceSurfaceDestruction@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedSourceSurfaceDestruction@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedSourceSurfaceDestruction@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedSourceSurfaceDestruction@gfx@mozilla@@UBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0BK@MBHBMPIO@SourceSurface?5Destruction?$AA@']
align ['10h']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedFilterNodeCreation@gfx@mozilla@@6B@']
public ['??_7RecordedFilterNodeCreation@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedFilterNodeCreation@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedFilterNodeCreation@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedFilterNodeCreation@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedFilterNodeCreation@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedFilterNodeCreation@gfx@mozilla@@UBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0BE@PCJMNMPN@FilterNode?5Creation?$AA@']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedFilterNodeDestruction@gfx@mozilla@@6B@']
public ['??_7RecordedFilterNodeDestruction@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedFilterNodeDestruction@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedFilterNodeDestruction@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedFilterNodeDestruction@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedFilterNodeDestruction@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedFilterNodeDestruction@gfx@mozilla@@UBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0BH@JDMCLJID@FilterNode?5Destruction?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedGradientStopsCreation@gfx@mozilla@@6B@']
public ['??_7RecordedGradientStopsCreation@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedGradientStopsCreation@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedGradientStopsCreation@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedGradientStopsCreation@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedGradientStopsCreation@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedGradientStopsCreation@gfx@mozilla@@UBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0BH@IBJOEPML@GradientStops?5Creation?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedGradientStopsDestruction@gfx@mozilla@@6B@']
public ['??_7RecordedGradientStopsDestruction@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedGradientStopsDestruction@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedGradientStopsDestruction@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedGradientStopsDestruction@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedGradientStopsDestruction@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedGradientStopsDestruction@gfx@mozilla@@UBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0BK@HEGJICH@GradientStops?5Destruction?$AA@']
align ['10h']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedSnapshot@gfx@mozilla@@6B@']
public ['??_7RecordedSnapshot@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedSnapshot@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedSnapshot@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedSnapshot@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedSnapshot@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedSnapshot@gfx@mozilla@@UBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_08PJJDBLOH@Snapshot?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedFontData@gfx@mozilla@@6B@']
public ['??_7RecordedFontData@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedFontData@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedFontData@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedFontData@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedFontData@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedFontData@gfx@mozilla@@UBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_09NHBGBJBJ@Font?5Data?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedScaledFontCreation@gfx@mozilla@@6B@']
public ['??_7RecordedScaledFontCreation@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedScaledFontCreation@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedScaledFontCreation@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedScaledFontCreation@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedScaledFontCreation@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedScaledFontCreation@gfx@mozilla@@UBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0BE@JGKBADFK@ScaledFont?5Creation?$AA@']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedScaledFontDestruction@gfx@mozilla@@6B@']
public ['??_7RecordedScaledFontDestruction@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedScaledFontDestruction@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedScaledFontDestruction@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedScaledFontDestruction@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedScaledFontDestruction@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedScaledFontDestruction@gfx@mozilla@@UBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0BH@BBDNGHMD@ScaledFont?5Destruction?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedMaskSurface@gfx@mozilla@@6B@']
public ['??_7RecordedMaskSurface@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedMaskSurface@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedMaskSurface@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedMaskSurface@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedMaskSurface@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0M@JMBELIOH@MaskSurface?$AA@']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@']
public ['??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedFilterNodeSetAttribute@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedFilterNodeSetAttribute@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedFilterNodeSetAttribute@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedFilterNodeSetAttribute@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedFilterNodeSetAttribute@gfx@mozilla@@UBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0N@OOIBANPL@SetAttribute?$AA@']
align ['10h']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedFilterNodeSetInput@gfx@mozilla@@6B@']
public ['??_7RecordedFilterNodeSetInput@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedFilterNodeSetInput@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedFilterNodeSetInput@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedFilterNodeSetInput@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedFilterNodeSetInput@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedFilterNodeSetInput@gfx@mozilla@@UBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_08KOAGOIFI@SetInput?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4DrawTargetRecording@gfx@mozilla@@6B@']
public ['??_7DrawTargetRecording@gfx@mozilla@@6B@']
dd ['offset', '?IsValid@DrawTarget@gfx@mozilla@@UBE_NXZ']
dd ['offset', '?GetType@DrawTargetRecording@gfx@mozilla@@UBE?AW4DrawTargetType@23@XZ']
dd ['offset', '?GetBackendType@DrawTargetRecording@gfx@mozilla@@UBE?AW4BackendType@23@XZ']
dd ['offset', '?IsRecording@DrawTargetRecording@gfx@mozilla@@UBE_NXZ']
dd ['offset', '?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ']
dd ['offset', '?GetSize@DrawTargetRecording@gfx@mozilla@@UAE?AU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@XZ']
dd ['offset', '?LockBits@DrawTarget@gfx@mozilla@@UAE_NPAPAEPAU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@PAHPAW4SurfaceFormat@23@PAU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['offset', '?ReleaseBits@DrawTarget@gfx@mozilla@@UAEXPAE@Z']
dd ['offset', '?Flush@DrawTargetRecording@gfx@mozilla@@UAEXXZ']
dd ['offset', '?DrawCapturedDT@DrawTarget@gfx@mozilla@@UAEXPAVDrawTargetCapture@23@ABVMatrix@23@@Z']
dd ['offset', '?DrawSurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@1ABUDrawSurfaceOptions@23@ABUDrawOptions@23@@Z']
dd ['offset', '?DrawFilter@DrawTargetRecording@gfx@mozilla@@UAEXPAVFilterNode@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z']
dd ['offset', '?DrawSurfaceWithShadow@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUColor@23@1MW4CompositionOp@23@@Z']
dd ['offset', '?ClearRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
dd ['offset', '?CopySurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['offset', '?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['offset', '?FillRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z']
dd ['offset', '?StrokeRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
dd ['offset', '?StrokeLine@DrawTargetRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
dd ['offset', '?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
dd ['offset', '?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z']
dd ['offset', '?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z']
dd ['offset', '?Mask@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z']
dd ['offset', '?MaskSurface@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z']
dd ['offset', '?PushClip@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@@Z']
dd ['offset', '?PushClipRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
dd ['offset', '?PopClip@DrawTargetRecording@gfx@mozilla@@UAEXXZ']
dd ['offset', '?PushLayer@DrawTargetRecording@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z']
dd ['offset', '?PopLayer@DrawTargetRecording@gfx@mozilla@@UAEXXZ']
dd ['offset', '?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z']
dd ['offset', '?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z']
dd ['offset', '?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z']
dd ['offset', '?CreateSimilarDrawTarget@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z']
dd ['offset', '?CreateCaptureDT@DrawTarget@gfx@mozilla@@UAE?AU?$already_AddRefed@VDrawTargetCapture@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['offset', '?CreateShadowDrawTarget@DrawTarget@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@M@Z']
dd ['offset', '?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z']
dd ['offset', '?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z']
dd ['offset', '?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z']
dd ['offset', '?SetTransform@DrawTargetRecording@gfx@mozilla@@UAEXABVMatrix@23@@Z']
dd ['offset', '?GetNativeSurface@DrawTargetRecording@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z']
dd ['offset', '?IsDualDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ']
dd ['offset', '?IsTiledDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ']
dd ['offset', '?SupportsRegionClipping@DrawTarget@gfx@mozilla@@UBE_NXZ']
dd ['offset', '?IsCurrentGroupOpaque@DrawTargetRecording@gfx@mozilla@@UAE_NXZ']
dd ['offset', '?SetPermitSubpixelAA@DrawTarget@gfx@mozilla@@UAEX_N@Z']
assume ['cs:_rdata']
dd ['offset', '??_R4PathBuilderRecording@gfx@mozilla@@6B@']
public ['??_7PathBuilderRecording@gfx@mozilla@@6B@']
dd ['offset', '?MoveTo@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
dd ['offset', '?LineTo@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
dd ['offset', '?BezierTo@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@00@Z']
dd ['offset', '?QuadraticBezierTo@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0@Z']
dd ['offset', '?Close@PathBuilderRecording@gfx@mozilla@@UAEXXZ']
dd ['offset', '?Arc@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@MMM_N@Z']
dd ['offset', '?CurrentPoint@PathBuilderRecording@gfx@mozilla@@UBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@XZ']
dd ['offset', '?Finish@PathBuilderRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VPath@gfx@mozilla@@@@XZ']
dd ['offset', '?GetBackendType@PathBuilderRecording@gfx@mozilla@@UBE?AW4BackendType@23@XZ']
assume ['cs:_rdata']
public ['??_C@_01EEMJAFIK@?6?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@']
align ['10h']
assume ['cs:_rdata']
dd ['offset', '??_R4FilterNode@gfx@mozilla@@6B@']
public ['??_7FilterNode@gfx@mozilla@@6B@']
dd ['offset', '__purecall']
dd ['offset', '?SetInput@FilterNode@gfx@mozilla@@UAEXIPAV123@@Z']
dd ['offset', '?SetInput@FilterNode@gfx@mozilla@@UAEXIPAVSourceSurface@23@@Z']
dd ['offset', '?SetAttribute@FilterNode@gfx@mozilla@@UAEXIPBMI@Z']
dd ['offset', '?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABUColor@23@@Z']
dd ['offset', '?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
dd ['offset', '?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABVMatrix5x4@23@@Z']
dd ['offset', '?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABVMatrix@23@@Z']
dd ['offset', '?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
dd ['offset', '?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['offset', '?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
dd ['offset', '?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['offset', '?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['offset', '?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
dd ['offset', '?SetAttribute@FilterNode@gfx@mozilla@@UAEXIM@Z']
dd ['offset', '?SetAttribute@FilterNode@gfx@mozilla@@UAEXII@Z']
dd ['offset', '?SetAttribute@FilterNode@gfx@mozilla@@UAEXI_N@Z']
assume ['cs:_rdata']
dd ['offset', '??_R4SourceSurfaceRecording@gfx@mozilla@@6B@']
public ['??_7SourceSurfaceRecording@gfx@mozilla@@6B@']
dd ['offset', '?GetType@SourceSurfaceRecording@gfx@mozilla@@UBE?AW4SurfaceType@23@XZ']
dd ['offset', '?GetSize@SourceSurfaceRecording@gfx@mozilla@@UBE?AU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@XZ']
dd ['offset', '?GetFormat@SourceSurfaceRecording@gfx@mozilla@@UBE?AW4SurfaceFormat@23@XZ']
dd ['offset', '?IsValid@SourceSurface@gfx@mozilla@@UBE_NXZ']
dd ['offset', '?GetDataSurface@SourceSurfaceRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@XZ']
dd ['offset', '?GetNativeSurface@SourceSurface@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z']
dd ['offset', '?GuaranteePersistance@SourceSurface@gfx@mozilla@@MAEXXZ']
assume ['cs:_rdata']
dd ['offset', '??_R4GradientStopsRecording@gfx@mozilla@@6B@']
public ['??_7GradientStopsRecording@gfx@mozilla@@6B@']
dd ['offset', '?GetBackendType@GradientStopsRecording@gfx@mozilla@@UBE?AW4BackendType@23@XZ']
dd ['offset', '?IsValid@GradientStops@gfx@mozilla@@UBE_NXZ']
assume ['cs:_rdata']
dd ['offset', '??_R4FilterNodeRecording@gfx@mozilla@@6B@']
public ['??_7FilterNodeRecording@gfx@mozilla@@6B@']
dd ['offset', '?GetBackendType@FilterNodeRecording@gfx@mozilla@@UAE?AW4FilterBackend@23@XZ']
dd ['offset', '?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVFilterNode@23@@Z']
dd ['offset', '?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVSourceSurface@23@@Z']
dd ['offset', '?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIPBMI@Z']
dd ['offset', '?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABUColor@23@@Z']
dd ['offset', '?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
dd ['offset', '?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix5x4@23@@Z']
dd ['offset', '?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix@23@@Z']
dd ['offset', '?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
dd ['offset', '?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['offset', '?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
dd ['offset', '?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['offset', '?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['offset', '?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
dd ['offset', '?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIM@Z']
dd ['offset', '?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXII@Z']
dd ['offset', '?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXI_N@Z']
assume ['cs:_rdata']
public ['??_C@_0DK@JJEBLML@Non?5recording?5filter?5node?5used?5w@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
unicode ['0,', '<C:\\Program', 'Files', '(x86)\\Microsoft', 'Visual', 'Studio', '12.0\\VC\\in>']
unicode ['0,', '<clude\\xstring>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1IK@IMDFCBHM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
unicode ['0,', '<C:\\Program', 'Files', '(x86)\\Microsoft', 'Visual', 'Studio', '12.0\\VC\\in>']
unicode ['0,', '<clude\\xhash>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
unicode ['0,', '<C:\\Program', 'Files', '(x86)\\Microsoft', 'Visual', 'Studio', '12.0\\VC\\in>']
unicode ['0,', '<clude\\list>,0']
assume ['cs:_rdata']
public ['??_C@_1DI@MDELDGPI@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@']
unicode ['0,', '<list', 'iterators', 'incompatible>,0']
assume ['cs:_rdata']
public ['??_C@_1NK@BJPMEIHF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
unicode ['0,', '<std::_List_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_List_simple_types>']
dw ['3Ch']
unicode ['0,', '<void', 'const', '*>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '==>,0']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_1OC@LGMEKDCA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
unicode ['0,', '<std::_List_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_List_simple_types>']
dw ['3Ch']
unicode ['0,', '<unsigned', '__int64>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '==>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_04HGKILAJC@?$FLGFX?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_01JOAMLHOP@?9?$AA@']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_01CLKCMJKC@?5?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_03FLKELDHI@?$FN?3?5?$AA@']
assume ['cs:_rdata']
public ['??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@']
assume ['cs:_rdata']
public ['??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@']
assume ['cs:_rdata']
public ['??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
assume ['cs:_rdata']
public ['??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
unicode ['0,', '<"Standard', 'C++', 'Libraries', 'Out', 'of', 'Range"', '&&', '0>,0']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
unicode ['0,', '<"out', 'of', 'range">,0']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
unicode ['0,', '<C:\\Program', 'Files', '(x86)\\Microsoft', 'Visual', 'Studio', '12.0\\VC\\in>']
unicode ['0,', '<clude\\vector>,0']
assume ['cs:_rdata']
public ['??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@']
unicode ['0,', '<vector', 'iterator', 'not', 'dereferencable>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1NI@PPPKFEAA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
unicode ['0,', '<std::_Vector_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_Vector_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_Simple_types>']
dw ['3Ch']
unicode ['0,', '<unsigned', 'char>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '*>,0']
assume ['cs:_rdata']
public ['??_C@_1EC@HILJLMMC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb?$AAl?$AAe@']
unicode ['0,', '<list', 'iterator', 'not', 'dereferencable>,0']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_1NI@GGDPCAJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
unicode ['0,', '<std::_List_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_List_simple_types>']
dw ['3Ch']
unicode ['0,', '<void', 'const', '*>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '*>,0']
assume ['cs:_rdata']
public ['??_C@_1EA@DOGAGKDH@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@']
unicode ['0,', '<list', 'iterator', 'not', 'incrementable>,0']
assume ['cs:_rdata']
public ['??_C@_1NK@LJABKBLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
unicode ['0,', '<std::_List_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_List_simple_types>']
dw ['3Ch']
unicode ['0,', '<void', 'const', '*>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '++>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1EE@BBMFLDOC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa?$AAn?$AAg@']
unicode ['0,', '<list', 'erase', 'iterator', 'outside', 'range>,0']
assume ['cs:_rdata']
public ['??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
unicode ['0,', '<vector', 'subscript', 'out', 'of', 'range>,0']
assume ['cs:_rdata']
public ['??_C@_1CME@JIAKHOAG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAu?$AAn?$AAc@']
unicode ['0,', '<std::vector>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_unchecked_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_List_simple_types>']
dw ['3Ch']
unicode ['0,', '<void', 'const', '*>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<,struct', 'std::_Iterator_base0>']
dw ['3Eh']
unicode ['0,', '<,struct', 'std::_Wrap_alloc>']
dw ['3Ch']
unicode ['0,', '<class', 'std::allocator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_unchecked_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_List_simple_types>']
dw ['3Ch']
unicode ['0,', '<void', 'const', '*>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<,struct', 'std::_Iterator_base0>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '[]>,0']
assume ['cs:_rdata']
public ['??_C@_1CNE@DOHGKKOB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAu?$AAn?$AAc@']
unicode ['0,', '<std::vector>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_unchecked_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_List_simple_types>']
dw ['3Ch']
unicode ['0,', '<unsigned', '__int64>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<,struct', 'std::_Iterator_base0>']
dw ['3Eh']
unicode ['0,', '<,struct', 'std::_Wrap_alloc>']
dw ['3Ch']
unicode ['0,', '<class', 'std::allocator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_unchecked_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_List_simple_types>']
dw ['3Ch']
unicode ['0,', '<unsigned', '__int64>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<,struct', 'std::_Iterator_base0>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '[]>,0']
assume ['cs:_rdata']
public ['??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@']
unicode ['0,', '<vector', 'insert', 'iterator', 'outside', 'range>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@']
unicode ['0,', '<vector', 'iterator', '+', 'offset', 'out', 'of', 'range>,0']
assume ['cs:_rdata']
public ['??_C@_1BNG@JIGEKGDI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
unicode ['0,', '<std::_Vector_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_Vector_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_Simple_types>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_unchecked_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_List_simple_types>']
dw ['3Ch']
unicode ['0,', '<void', 'const', '*>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<,struct', 'std::_Iterator_base0>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '+=>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
unicode ['0,', '<invalid', 'null', 'pointer>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1BNO@ICKBMIEL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
unicode ['0,', '<std::_Vector_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_Vector_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_Simple_types>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_unchecked_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_List_simple_types>']
dw ['3Ch']
unicode ['0,', '<unsigned', '__int64>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<,struct', 'std::_Iterator_base0>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '+=>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
unicode ['0,', '<invalid', 'iterator', 'range>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1OC@BGDJEKOF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
unicode ['0,', '<std::_List_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_List_simple_types>']
dw ['3Ch']
unicode ['0,', '<unsigned', '__int64>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '++>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
unicode ['0,', '<C:\\Program', 'Files', '(x86)\\Microsoft', 'Visual', 'Studio', '12.0\\VC\\in>']
unicode ['0,', '<clude\\xmemory>,0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
dd ['offset', '??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8']
dd ['offset', '??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8']
dd ['0']
db ["'d@@',0"]
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
dd ['2']
dd ['offset', '??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
dd ['offset', '??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8']
dd ['2', 'dup(0)']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8']
dd ['1']
dd ['offset', '??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
dd ['offset', '$SG86581']
dd ['4']
dd ['offset', '??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8']
dd ['offset', '??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8']
align ['8']
db ["'@std@@',0"]
assume ['cs:_rdata$r']
public ['??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
dd ['3,', '0Ah']
dd ['offset', '??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
dd ['offset', '??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3EA@ios_base@std@@8']
dd ['offset', '??_R17A@3EA@?$_Iosb@H@std@@8']
dd ['offset', '??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3EA@ios_base@std@@8']
dd ['offset', '??_R17A@3EA@?$_Iosb@H@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
dd ['9,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8']
dd ['8,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8']
dd ['3,', '9']
dd ['offset', '??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3EA@ios_base@std@@8']
dd ['offset', '??_R17A@3EA@?$_Iosb@H@std@@8']
dd ['offset', '??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3EA@ios_base@std@@8']
dd ['offset', '??_R17A@3EA@?$_Iosb@H@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8']
dd ['3,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8']
dd ['4']
dd ['offset', '??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3EA@ios_base@std@@8']
dd ['offset', '??_R17A@3EA@?$_Iosb@H@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['2,', '2', 'dup(0)']
dd ['4,', '50h']
dd ['offset', '??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['3']
dd ['offset', '??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@?0A@EA@ios_base@std@@8']
dd ['offset', '??_R17?0A@EA@?$_Iosb@H@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@ios_base@std@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3ios_base@std@@8']
assume ['cs:_data$r']
public ['??_R0?AVios_base@std@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3ios_base@std@@8']
dd ['2']
dd ['offset', '??_R2ios_base@std@@8']
assume ['cs:_rdata$r']
public ['??_R2ios_base@std@@8']
dd ['offset', '??_R17?0A@EA@?$_Iosb@H@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R17?0A@EA@?$_Iosb@H@std@@8']
align ['10h']
dd ['8,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$_Iosb@H@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$_Iosb@H@std@@@8']
dd ['0']
assume ['cs:_rdata$r']
public ['??_R3?$_Iosb@H@std@@8']
dd ['1']
dd ['offset', '??_R2?$_Iosb@H@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$_Iosb@H@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$_Iosb@H@std@@8']
dd ['2', 'dup(0)']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$_Iosb@H@std@@8']
assume ['cs:_rdata$r']
public ['??_R1A@A@3EA@ios_base@std@@8']
dd ['1,', '2', 'dup(0)']
dd ['4,', '40h']
dd ['offset', '??_R3ios_base@std@@8']
assume ['cs:_rdata$r']
public ['??_R17A@3EA@?$_Iosb@H@std@@8']
align ['8']
dd ['8,', '0']
dd ['4,', '40h']
dd ['offset', '??_R3?$_Iosb@H@std@@8']
assume ['cs:_rdata$r']
public ['??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
dd ['3,', '10h,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8']
align ['10h']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
dd ['4']
dd ['offset', '??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3EA@ios_base@std@@8']
dd ['offset', '??_R17A@3EA@?$_Iosb@H@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
dd ['3,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R4error_category@std@@6B@']
dd ['offset', '??_R0?AVerror_category@std@@@8']
dd ['offset', '??_R3error_category@std@@8']
assume ['cs:_data$r']
public ['??_R0?AVerror_category@std@@@8']
align ['10h']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3error_category@std@@8']
dd ['1']
dd ['offset', '??_R2error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R2error_category@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@error_category@std@@8']
align ['10h']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R4_Generic_error_category@std@@6B@']
dd ['offset', '??_R0?AV_Generic_error_category@std@@@8']
dd ['offset', '??_R3_Generic_error_category@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV_Generic_error_category@std@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3_Generic_error_category@std@@8']
dd ['2']
dd ['offset', '??_R2_Generic_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R2_Generic_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@error_category@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@_Generic_error_category@std@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3_Generic_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R4_Iostream_error_category@std@@6B@']
dd ['offset', '??_R0?AV_Iostream_error_category@std@@@8']
dd ['offset', '??_R3_Iostream_error_category@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV_Iostream_error_category@std@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3_Iostream_error_category@std@@8']
dd ['3']
dd ['offset', '??_R2_Iostream_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R2_Iostream_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@_Generic_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@error_category@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@_Iostream_error_category@std@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3_Iostream_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R4_System_error_category@std@@6B@']
dd ['offset', '??_R0?AV_System_error_category@std@@@8']
dd ['offset', '??_R3_System_error_category@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV_System_error_category@std@@@8']
align ['10h']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3_System_error_category@std@@8']
dd ['3']
dd ['offset', '??_R2_System_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R2_System_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@_Generic_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@error_category@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@_System_error_category@std@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3_System_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R4SourceSurface@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVSourceSurface@gfx@mozilla@@@8']
dd ['offset', '??_R3SourceSurface@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVSourceSurface@gfx@mozilla@@@8']
dd ['0']
assume ['cs:_rdata$r']
public ['??_R3SourceSurface@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2SourceSurface@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2SourceSurface@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@SourceSurface@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3SourceSurface@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8']
dd ['1,', '4,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@@8']
dd ['0']
db ["'lla@@',0"]
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8']
dd ['2']
dd ['offset', '??_R2?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8']
dd ['2', 'dup(0)']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@@8']
align ['10h']
db ["'@',0"]
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8']
dd ['1']
dd ['offset', '??_R2?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8']
dd ['0']
dd ['4,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4DrawTarget@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVDrawTarget@gfx@mozilla@@@8']
dd ['offset', '??_R3DrawTarget@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVDrawTarget@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3DrawTarget@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2DrawTarget@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2DrawTarget@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@DrawTarget@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3DrawTarget@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8']
dd ['1,', '4,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8']
dd ['2']
dd ['offset', '??_R2?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8']
align ['10h']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8']
dd ['1']
dd ['offset', '??_R2?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8']
align ['8']
dd ['4,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4FilterNode@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVFilterNode@gfx@mozilla@@@8']
dd ['offset', '??_R3FilterNode@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVFilterNode@gfx@mozilla@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3FilterNode@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2FilterNode@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2FilterNode@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VFilterNode@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@FilterNode@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3FilterNode@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@?$RefCounted@VFilterNode@gfx@mozilla@@@mozilla@@8']
dd ['1,', '4,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$RefCounted@VFilterNode@gfx@mozilla@@@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$RefCounted@VFilterNode@gfx@mozilla@@@mozilla@@@8']
align ['8']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3?$RefCounted@VFilterNode@gfx@mozilla@@@mozilla@@8']
dd ['2']
dd ['offset', '??_R2?$RefCounted@VFilterNode@gfx@mozilla@@@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2?$RefCounted@VFilterNode@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$RefCounted@VFilterNode@gfx@mozilla@@@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$RefCounted@VFilterNode@gfx@mozilla@@@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@8']
dd ['2', 'dup(0)']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@8']
dd ['1']
dd ['offset', '??_R2?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@8']
dd ['0']
dd ['4,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4GradientStops@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVGradientStops@gfx@mozilla@@@8']
dd ['offset', '??_R3GradientStops@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVGradientStops@gfx@mozilla@@@8']
dd ['0']
assume ['cs:_rdata$r']
public ['??_R3GradientStops@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2GradientStops@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2GradientStops@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VGradientStops@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@GradientStops@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3GradientStops@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@?$RefCounted@VGradientStops@gfx@mozilla@@@mozilla@@8']
dd ['1,', '4,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$RefCounted@VGradientStops@gfx@mozilla@@@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$RefCounted@VGradientStops@gfx@mozilla@@@mozilla@@@8']
dd ['0']
assume ['cs:_rdata$r']
public ['??_R3?$RefCounted@VGradientStops@gfx@mozilla@@@mozilla@@8']
dd ['2']
dd ['offset', '??_R2?$RefCounted@VGradientStops@gfx@mozilla@@@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2?$RefCounted@VGradientStops@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$RefCounted@VGradientStops@gfx@mozilla@@@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$RefCounted@VGradientStops@gfx@mozilla@@@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@8']
dd ['2', 'dup(0)']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@@8']
align ['10h']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@8']
dd ['1']
dd ['offset', '??_R2?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@8']
dd ['0']
dd ['4,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4Pattern@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVPattern@gfx@mozilla@@@8']
dd ['offset', '??_R3Pattern@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVPattern@gfx@mozilla@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3Pattern@gfx@mozilla@@8']
dd ['1']
dd ['offset', '??_R2Pattern@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2Pattern@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@Pattern@gfx@mozilla@@8']
dd ['2', 'dup(0)']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3Pattern@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4ColorPattern@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVColorPattern@gfx@mozilla@@@8']
dd ['offset', '??_R3ColorPattern@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVColorPattern@gfx@mozilla@@@8']
align ['10h']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3ColorPattern@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2ColorPattern@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2ColorPattern@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@Pattern@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@ColorPattern@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3ColorPattern@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4LinearGradientPattern@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVLinearGradientPattern@gfx@mozilla@@@8']
dd ['offset', '??_R3LinearGradientPattern@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVLinearGradientPattern@gfx@mozilla@@@8']
dd ['0']
assume ['cs:_rdata$r']
public ['??_R3LinearGradientPattern@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2LinearGradientPattern@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2LinearGradientPattern@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@Pattern@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@LinearGradientPattern@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3LinearGradientPattern@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RadialGradientPattern@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRadialGradientPattern@gfx@mozilla@@@8']
dd ['offset', '??_R3RadialGradientPattern@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRadialGradientPattern@gfx@mozilla@@@8']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3RadialGradientPattern@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2RadialGradientPattern@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RadialGradientPattern@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@Pattern@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RadialGradientPattern@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RadialGradientPattern@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4SurfacePattern@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVSurfacePattern@gfx@mozilla@@@8']
dd ['offset', '??_R3SurfacePattern@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVSurfacePattern@gfx@mozilla@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3SurfacePattern@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2SurfacePattern@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2SurfacePattern@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@Pattern@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@SurfacePattern@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3SurfacePattern@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4ScopedMap@DataSourceSurface@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVScopedMap@DataSourceSurface@gfx@mozilla@@@8']
dd ['offset', '??_R3ScopedMap@DataSourceSurface@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVScopedMap@DataSourceSurface@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3ScopedMap@DataSourceSurface@gfx@mozilla@@8']
dd ['1']
dd ['offset', '??_R2ScopedMap@DataSourceSurface@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2ScopedMap@DataSourceSurface@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@ScopedMap@DataSourceSurface@gfx@mozilla@@8']
dd ['2', 'dup(0)']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3ScopedMap@DataSourceSurface@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4PathSink@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVPathSink@gfx@mozilla@@@8']
dd ['offset', '??_R3PathSink@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVPathSink@gfx@mozilla@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3PathSink@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2PathSink@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2PathSink@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@PathSink@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3PathSink@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@8']
dd ['1,', '4,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@@8']
align ['10h']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@8']
dd ['2']
dd ['offset', '??_R2?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
dd ['2', 'dup(0)']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@@8']
align ['10h']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
dd ['1']
dd ['offset', '??_R2?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
align ['10h']
dd ['4,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4PathBuilder@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVPathBuilder@gfx@mozilla@@@8']
dd ['offset', '??_R3PathBuilder@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVPathBuilder@gfx@mozilla@@@8']
align ['10h']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3PathBuilder@gfx@mozilla@@8']
dd ['4']
dd ['offset', '??_R2PathBuilder@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2PathBuilder@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@PathSink@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@PathBuilder@gfx@mozilla@@8']
dd ['3,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3PathBuilder@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedEvent@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedEvent@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedEvent@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedEvent@gfx@mozilla@@@8']
dd ['0']
assume ['cs:_rdata$r']
public ['??_R3RecordedEvent@gfx@mozilla@@8']
dd ['1']
dd ['offset', '??_R2RecordedEvent@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
align ['10h']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedEvent@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedDrawingEvent@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedDrawingEvent@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedDrawingEvent@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedDrawingEvent@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedDrawingEvent@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2RecordedDrawingEvent@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedDrawingEvent@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedDrawingEvent@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedDrawingEvent@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedDrawTargetCreation@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedDrawTargetCreation@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedDrawTargetCreation@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedDrawTargetCreation@gfx@mozilla@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedDrawTargetCreation@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2RecordedDrawTargetCreation@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedDrawTargetCreation@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedDrawTargetCreation@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedDrawTargetCreation@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedDrawTargetDestruction@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedDrawTargetDestruction@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedDrawTargetDestruction@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedDrawTargetDestruction@gfx@mozilla@@@8']
dd ['0']
assume ['cs:_rdata$r']
public ['??_R3RecordedDrawTargetDestruction@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2RecordedDrawTargetDestruction@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedDrawTargetDestruction@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedDrawTargetDestruction@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedDrawTargetDestruction@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedCreateSimilarDrawTarget@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedCreateSimilarDrawTarget@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedCreateSimilarDrawTarget@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedCreateSimilarDrawTarget@gfx@mozilla@@@8']
align ['10h']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedCreateSimilarDrawTarget@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2RecordedCreateSimilarDrawTarget@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedCreateSimilarDrawTarget@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedCreateSimilarDrawTarget@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedCreateSimilarDrawTarget@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedFillRect@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedFillRect@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedFillRect@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedFillRect@gfx@mozilla@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedFillRect@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2RecordedFillRect@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedFillRect@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedDrawingEvent@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedFillRect@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedFillRect@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedStrokeRect@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedStrokeRect@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedStrokeRect@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedStrokeRect@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedStrokeRect@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2RecordedStrokeRect@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedStrokeRect@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedDrawingEvent@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedStrokeRect@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedStrokeRect@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedStrokeLine@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedStrokeLine@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedStrokeLine@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedStrokeLine@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedStrokeLine@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2RecordedStrokeLine@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedStrokeLine@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedDrawingEvent@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedStrokeLine@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedStrokeLine@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedFill@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedFill@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedFill@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedFill@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedFill@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2RecordedFill@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedFill@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedDrawingEvent@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedFill@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedFill@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedFillGlyphs@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedFillGlyphs@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedFillGlyphs@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedFillGlyphs@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedFillGlyphs@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2RecordedFillGlyphs@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedFillGlyphs@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedDrawingEvent@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedFillGlyphs@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedFillGlyphs@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedMask@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedMask@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedMask@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedMask@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedMask@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2RecordedMask@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedMask@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedDrawingEvent@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedMask@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedMask@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedStroke@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedStroke@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedStroke@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedStroke@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedStroke@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2RecordedStroke@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedStroke@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedDrawingEvent@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedStroke@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedStroke@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedClearRect@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedClearRect@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedClearRect@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedClearRect@gfx@mozilla@@@8']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3RecordedClearRect@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2RecordedClearRect@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedClearRect@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedDrawingEvent@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedClearRect@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedClearRect@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedCopySurface@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedCopySurface@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedCopySurface@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedCopySurface@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedCopySurface@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2RecordedCopySurface@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedCopySurface@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedDrawingEvent@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedCopySurface@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedCopySurface@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedPushClip@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedPushClip@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedPushClip@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedPushClip@gfx@mozilla@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3RecordedPushClip@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2RecordedPushClip@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedPushClip@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedDrawingEvent@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedPushClip@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedPushClip@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedPushClipRect@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedPushClipRect@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedPushClipRect@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedPushClipRect@gfx@mozilla@@@8']
align ['8']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3RecordedPushClipRect@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2RecordedPushClipRect@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedPushClipRect@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedDrawingEvent@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedPushClipRect@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedPushClipRect@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedPopClip@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedPopClip@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedPopClip@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedPopClip@gfx@mozilla@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedPopClip@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2RecordedPopClip@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedPopClip@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedDrawingEvent@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedPopClip@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedPopClip@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedPushLayer@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedPushLayer@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedPushLayer@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedPushLayer@gfx@mozilla@@@8']
dd ['0']
assume ['cs:_rdata$r']
public ['??_R3RecordedPushLayer@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2RecordedPushLayer@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedPushLayer@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedDrawingEvent@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedPushLayer@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedPushLayer@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedPopLayer@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedPopLayer@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedPopLayer@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedPopLayer@gfx@mozilla@@@8']
align ['10h']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedPopLayer@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2RecordedPopLayer@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedPopLayer@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedDrawingEvent@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedPopLayer@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedPopLayer@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedSetTransform@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedSetTransform@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedSetTransform@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedSetTransform@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedSetTransform@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2RecordedSetTransform@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedSetTransform@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedDrawingEvent@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedSetTransform@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedSetTransform@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedDrawSurface@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedDrawSurface@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedDrawSurface@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedDrawSurface@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedDrawSurface@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2RecordedDrawSurface@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedDrawSurface@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedDrawingEvent@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedDrawSurface@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedDrawSurface@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedDrawSurfaceWithShadow@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedDrawSurfaceWithShadow@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedDrawSurfaceWithShadow@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedDrawSurfaceWithShadow@gfx@mozilla@@@8']
dd ['0']
assume ['cs:_rdata$r']
public ['??_R3RecordedDrawSurfaceWithShadow@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2RecordedDrawSurfaceWithShadow@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedDrawSurfaceWithShadow@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedDrawingEvent@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedDrawSurfaceWithShadow@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedDrawSurfaceWithShadow@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedDrawFilter@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedDrawFilter@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedDrawFilter@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedDrawFilter@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedDrawFilter@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2RecordedDrawFilter@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedDrawFilter@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedDrawingEvent@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedDrawFilter@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedDrawFilter@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedSourceSurfaceCreation@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedSourceSurfaceCreation@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedSourceSurfaceCreation@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedSourceSurfaceCreation@gfx@mozilla@@@8']
dd ['0']
assume ['cs:_rdata$r']
public ['??_R3RecordedSourceSurfaceCreation@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2RecordedSourceSurfaceCreation@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedSourceSurfaceCreation@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedSourceSurfaceCreation@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedSourceSurfaceCreation@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedSourceSurfaceDestruction@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedSourceSurfaceDestruction@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedSourceSurfaceDestruction@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedSourceSurfaceDestruction@gfx@mozilla@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedSourceSurfaceDestruction@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2RecordedSourceSurfaceDestruction@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedSourceSurfaceDestruction@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedSourceSurfaceDestruction@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedSourceSurfaceDestruction@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedFilterNodeCreation@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedFilterNodeCreation@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedFilterNodeCreation@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedFilterNodeCreation@gfx@mozilla@@@8']
align ['10h']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3RecordedFilterNodeCreation@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2RecordedFilterNodeCreation@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedFilterNodeCreation@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedFilterNodeCreation@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedFilterNodeCreation@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedFilterNodeDestruction@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedFilterNodeDestruction@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedFilterNodeDestruction@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedFilterNodeDestruction@gfx@mozilla@@@8']
dd ['0']
assume ['cs:_rdata$r']
public ['??_R3RecordedFilterNodeDestruction@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2RecordedFilterNodeDestruction@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedFilterNodeDestruction@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedFilterNodeDestruction@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedFilterNodeDestruction@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedGradientStopsCreation@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedGradientStopsCreation@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedGradientStopsCreation@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedGradientStopsCreation@gfx@mozilla@@@8']
align ['8']
assume ['cs:_rdata$r']
public ['??_R3RecordedGradientStopsCreation@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2RecordedGradientStopsCreation@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedGradientStopsCreation@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedGradientStopsCreation@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedGradientStopsCreation@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedGradientStopsDestruction@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedGradientStopsDestruction@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedGradientStopsDestruction@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedGradientStopsDestruction@gfx@mozilla@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3RecordedGradientStopsDestruction@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2RecordedGradientStopsDestruction@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedGradientStopsDestruction@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedGradientStopsDestruction@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedGradientStopsDestruction@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedSnapshot@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedSnapshot@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedSnapshot@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedSnapshot@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedSnapshot@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2RecordedSnapshot@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedSnapshot@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedSnapshot@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedSnapshot@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedFontData@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedFontData@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedFontData@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedFontData@gfx@mozilla@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3RecordedFontData@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2RecordedFontData@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedFontData@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedFontData@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedFontData@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedScaledFontCreation@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedScaledFontCreation@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedScaledFontCreation@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedScaledFontCreation@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedScaledFontCreation@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2RecordedScaledFontCreation@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedScaledFontCreation@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedScaledFontCreation@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedScaledFontCreation@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedScaledFontDestruction@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedScaledFontDestruction@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedScaledFontDestruction@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedScaledFontDestruction@gfx@mozilla@@@8']
align ['8']
assume ['cs:_rdata$r']
public ['??_R3RecordedScaledFontDestruction@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2RecordedScaledFontDestruction@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedScaledFontDestruction@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedScaledFontDestruction@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedScaledFontDestruction@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedMaskSurface@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedMaskSurface@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedMaskSurface@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedMaskSurface@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedMaskSurface@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2RecordedMaskSurface@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedMaskSurface@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedDrawingEvent@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedMaskSurface@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedMaskSurface@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedFilterNodeSetAttribute@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedFilterNodeSetAttribute@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedFilterNodeSetAttribute@gfx@mozilla@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3RecordedFilterNodeSetAttribute@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2RecordedFilterNodeSetAttribute@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedFilterNodeSetAttribute@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedFilterNodeSetAttribute@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedFilterNodeSetAttribute@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedFilterNodeSetInput@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedFilterNodeSetInput@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedFilterNodeSetInput@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedFilterNodeSetInput@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3RecordedFilterNodeSetInput@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2RecordedFilterNodeSetInput@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedFilterNodeSetInput@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedFilterNodeSetInput@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3RecordedFilterNodeSetInput@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4DrawTargetRecording@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVDrawTargetRecording@gfx@mozilla@@@8']
dd ['offset', '??_R3DrawTargetRecording@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVDrawTargetRecording@gfx@mozilla@@@8']
align ['8']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3DrawTargetRecording@gfx@mozilla@@8']
dd ['4']
dd ['offset', '??_R2DrawTargetRecording@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2DrawTargetRecording@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@DrawTarget@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@DrawTargetRecording@gfx@mozilla@@8']
dd ['3,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3DrawTargetRecording@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4PathBuilderRecording@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVPathBuilderRecording@gfx@mozilla@@@8']
dd ['offset', '??_R3PathBuilderRecording@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVPathBuilderRecording@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3PathBuilderRecording@gfx@mozilla@@8']
dd ['5']
dd ['offset', '??_R2PathBuilderRecording@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2PathBuilderRecording@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@PathBuilder@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@PathSink@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@PathBuilderRecording@gfx@mozilla@@8']
dd ['4,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3PathBuilderRecording@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4SourceSurfaceRecording@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVSourceSurfaceRecording@gfx@mozilla@@@8']
dd ['offset', '??_R3SourceSurfaceRecording@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVSourceSurfaceRecording@gfx@mozilla@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3SourceSurfaceRecording@gfx@mozilla@@8']
dd ['4']
dd ['offset', '??_R2SourceSurfaceRecording@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2SourceSurfaceRecording@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@SourceSurface@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@SourceSurfaceRecording@gfx@mozilla@@8']
dd ['3,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3SourceSurfaceRecording@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4GradientStopsRecording@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVGradientStopsRecording@gfx@mozilla@@@8']
dd ['offset', '??_R3GradientStopsRecording@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVGradientStopsRecording@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3GradientStopsRecording@gfx@mozilla@@8']
dd ['4']
dd ['offset', '??_R2GradientStopsRecording@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2GradientStopsRecording@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@GradientStops@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VGradientStops@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@GradientStopsRecording@gfx@mozilla@@8']
dd ['3,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3GradientStopsRecording@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4FilterNodeRecording@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVFilterNodeRecording@gfx@mozilla@@@8']
dd ['offset', '??_R3FilterNodeRecording@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVFilterNodeRecording@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3FilterNodeRecording@gfx@mozilla@@8']
dd ['4']
dd ['offset', '??_R2FilterNodeRecording@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2FilterNodeRecording@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@FilterNode@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VFilterNode@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@FilterNodeRecording@gfx@mozilla@@8']
dd ['3,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG87311+10h']
dd ['offset', '??_R3FilterNodeRecording@gfx@mozilla@@8']
assume ['cs:_rtc$IMZ']
assume ['cs:_rtc$TMZ']
assume ['cs:_rdata']
public ['__real@00000000']
assume ['cs:_rdata']
public ['__real@3f800000']
assume ['cs:_rdata']
public ['__xmm@41f00000000000000000000000000000']
dd ['0']
dd ['41F00000h']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
extrn ['__purecall:near']
extrn ['??2@YAPAXI@Z:near']
extrn ['??3@YAXPAX@Z:near']
extrn ['_atexit:near']
extrn ['__imp___invalid_parameter:near']
extrn ['__imp_??0_Lockit@std@@QAE@H@Z:near']
extrn ['__imp_??1_Lockit@std@@QAE@XZ:near']
extrn ['__imp__printf:near']
extrn ['__imp__free:near']
extrn ['__imp__realloc:near']
extrn ['__imp__TerminateProcess@8:near']
extrn ['__imp__GetCurrentProcess@0:near']
extrn ['__imp__memmove:near']
extrn ['_memcpy:near']
extrn ['_memset:near']
extrn ['_strlen:near']
extrn ['__imp___hypot:near']
extrn ['__imp_?uncaught_exception@std@@YA_NXZ:near']
extrn ['??_V@YAXPAX@Z:near']
extrn ['??_U@YAPAXI@Z:near']
extrn ['__imp___CrtDbgReportW:near']
extrn ['__imp_?_Debug_message@std@@YAXPB_W0I@Z:near']
extrn ['__imp_??0_Container_base12@std@@QAE@XZ:near']
extrn ['__imp_??1_Container_base12@std@@QAE@XZ:near']
extrn ['__imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ:near']
extrn ['__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ:near']
extrn ['__imp_?_Xbad_alloc@std@@YAXXZ:near']
extrn ['__imp_?_Xlength_error@std@@YAXPBD@Z:near']
extrn ['__imp_?_Xout_of_range@std@@YAXPBD@Z:near']
extrn ['__imp_??0id@locale@std@@QAE@I@Z:near']
extrn ['??_Eerror_category@std@@UAEPAXI@Z:near']
extrn ['__imp_?_Syserror_map@std@@YAPBDH@Z:near']
extrn ['__imp_?_Winerror_map@std@@YAPBDH@Z:near']
extrn ['??_E_Generic_error_category@std@@UAEPAXI@Z:near']
extrn ['??_E_Iostream_error_category@std@@UAEPAXI@Z:near']
extrn ['??_E_System_error_category@std@@UAEPAXI@Z:near']
extrn ['__imp_?good@ios_base@std@@QBE_NXZ:near']
extrn ['__imp_?flags@ios_base@std@@QBEHXZ:near']
extrn ['__imp_?width@ios_base@std@@QBE_JXZ:near']
extrn ['__imp_?width@ios_base@std@@QAE_J_J@Z:near']
extrn ['__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:near']
extrn ['__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ:near']
extrn ['__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:near']
extrn ['__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:near']
extrn ['__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near']
extrn ['__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near']
extrn ['__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near']
extrn ['__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near']
extrn ['__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near']
extrn ['__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z:near']
extrn ['__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z:near']
extrn ['__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near']
extrn ['__imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z:near']
extrn ['__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z:near']
extrn ['__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z:near']
extrn ['__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:near']
extrn ['__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ:near']
extrn ['__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:near']
extrn ['__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:near']
extrn ['__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:near']
extrn ['__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:near']
extrn ['__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ:near']
extrn ['__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:near']
extrn ['__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:near']
extrn ['__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:near']
extrn ['??_EGradientStops@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_EPattern@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_EColorPattern@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_ELinearGradientPattern@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_ERadialGradientPattern@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_ESurfacePattern@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_ESourceSurface@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_EScopedMap@DataSourceSurface@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_EPathSink@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_EPathBuilder@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?DrawCapturedDT@DrawTarget@gfx@mozilla@@UAEXPAVDrawTargetCapture@23@ABVMatrix@23@@Z:near']
extrn ['?CreateCaptureDT@DrawTarget@gfx@mozilla@@UAE?AU?$already_AddRefed@VDrawTargetCapture@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z:near']
extrn ['??_EDrawTarget@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['__imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z:near']
extrn ['__imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ:near']
extrn ['??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:near']
extrn ['??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:near']
extrn ['?StorePattern@RecordedEvent@gfx@mozilla@@QBEXAAUPatternStorage@23@ABVPattern@23@@Z:near']
extrn ['??_ERecordedEvent@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?RecordToStream@RecordedDrawingEvent@gfx@mozilla@@MBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?GetObjectRef@RecordedDrawingEvent@gfx@mozilla@@MBE?AUReferencePtr@23@XZ:near']
extrn ['??_ERecordedDrawingEvent@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedDrawTargetCreation@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedDrawTargetCreation@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedDrawTargetCreation@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedDrawTargetCreation@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedDrawTargetDestruction@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedDrawTargetDestruction@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedDrawTargetDestruction@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedDrawTargetDestruction@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedCreateSimilarDrawTarget@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedCreateSimilarDrawTarget@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedCreateSimilarDrawTarget@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedCreateSimilarDrawTarget@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedFillRect@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedFillRect@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedFillRect@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedFillRect@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedStrokeRect@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedStrokeRect@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedStrokeRect@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedStrokeRect@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedStrokeLine@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedStrokeLine@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedStrokeLine@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedStrokeLine@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedFill@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedFill@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedFill@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedFill@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??1RecordedFillGlyphs@gfx@mozilla@@UAE@XZ:near']
extrn ['?PlayEvent@RecordedFillGlyphs@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedFillGlyphs@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedFillGlyphs@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedFillGlyphs@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedMask@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedMask@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedMask@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedMask@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedStroke@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedStroke@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedStroke@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedStroke@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedClearRect@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedClearRect@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedClearRect@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedClearRect@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedCopySurface@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedCopySurface@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedCopySurface@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedCopySurface@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedPushClip@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedPushClip@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedPushClip@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedPushClip@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedPushClipRect@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedPushClipRect@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedPushClipRect@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedPushClipRect@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedPopClip@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedPopClip@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedPopClip@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedPopClip@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedPushLayer@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedPushLayer@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedPushLayer@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedPushLayer@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedPopLayer@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedPopLayer@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedPopLayer@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedPopLayer@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedSetTransform@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedSetTransform@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedSetTransform@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedSetTransform@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedDrawSurface@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedDrawSurface@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedDrawSurface@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedDrawSurface@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedDrawSurfaceWithShadow@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedDrawSurfaceWithShadow@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedDrawSurfaceWithShadow@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedDrawSurfaceWithShadow@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedDrawFilter@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedDrawFilter@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedDrawFilter@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedDrawFilter@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??0RecordedPathCreation@gfx@mozilla@@QAE@PAVPathRecording@12@@Z:near']
extrn ['??1RecordedPathCreation@gfx@mozilla@@UAE@XZ:near']
extrn ['??1RecordedSourceSurfaceCreation@gfx@mozilla@@UAE@XZ:near']
extrn ['?PlayEvent@RecordedSourceSurfaceCreation@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedSourceSurfaceCreation@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedSourceSurfaceCreation@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedSourceSurfaceCreation@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedSourceSurfaceDestruction@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedSourceSurfaceDestruction@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedSourceSurfaceDestruction@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedSourceSurfaceDestruction@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??1RecordedFilterNodeCreation@gfx@mozilla@@UAE@XZ:near']
extrn ['?PlayEvent@RecordedFilterNodeCreation@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedFilterNodeCreation@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedFilterNodeCreation@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedFilterNodeCreation@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedFilterNodeDestruction@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedFilterNodeDestruction@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedFilterNodeDestruction@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedFilterNodeDestruction@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??1RecordedGradientStopsCreation@gfx@mozilla@@UAE@XZ:near']
extrn ['?PlayEvent@RecordedGradientStopsCreation@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedGradientStopsCreation@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedGradientStopsCreation@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedGradientStopsCreation@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedGradientStopsDestruction@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedGradientStopsDestruction@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedGradientStopsDestruction@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedGradientStopsDestruction@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedSnapshot@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedSnapshot@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedSnapshot@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedSnapshot@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??1RecordedFontData@gfx@mozilla@@UAE@XZ:near']
extrn ['?PlayEvent@RecordedFontData@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedFontData@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedFontData@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['?SetFontData@RecordedFontData@gfx@mozilla@@QAEXPBEIIM@Z:near']
extrn ['?GetFontDetails@RecordedFontData@gfx@mozilla@@QAE_NAAURecordedFontDetails@23@@Z:near']
extrn ['??_ERecordedFontData@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedScaledFontCreation@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedScaledFontCreation@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedScaledFontCreation@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedScaledFontCreation@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedScaledFontDestruction@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedScaledFontDestruction@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedScaledFontDestruction@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedScaledFontDestruction@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedMaskSurface@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedMaskSurface@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedMaskSurface@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedMaskSurface@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedFilterNodeSetAttribute@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedFilterNodeSetAttribute@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedFilterNodeSetAttribute@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedFilterNodeSetAttribute@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedFilterNodeSetInput@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedFilterNodeSetInput@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedFilterNodeSetInput@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedFilterNodeSetInput@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z:near']
extrn ['??_EDrawTargetRecording@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?MoveTo@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z:near']
extrn ['?LineTo@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z:near']
extrn ['?BezierTo@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@00@Z:near']
extrn ['?QuadraticBezierTo@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0@Z:near']
extrn ['?Close@PathBuilderRecording@gfx@mozilla@@UAEXXZ:near']
extrn ['?CurrentPoint@PathBuilderRecording@gfx@mozilla@@UBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@XZ:near']
extrn ['?Finish@PathBuilderRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VPath@gfx@mozilla@@@@XZ:near']
extrn ['??_EPathBuilderRecording@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_EFilterNode@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_ESourceSurfaceRecording@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_EGradientStopsRecording@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_EFilterNodeRecording@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:near']
extrn ['?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:near']
extrn ['?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z:near']
extrn ['?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z:near']
extrn ['?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ:near']
extrn ['?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:near']
extrn ['?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:near']
extrn ['?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z:near']
extrn ['?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['@__security_check_cookie@4:near']
extrn ['__CxxThrowException@8:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_InitBase:near']
extrn ['__RTC_Shutdown:near']
extrn ['___CxxFrameHandler3:near']
extrn ['_memset_0:near']
extrn ['__imp_?_BADOFF@std@@3_JB:near']
extrn ['??_7type_info@@6B@:near']
extrn ['?sGfxLogLevel@LoggingPrefs@gfx@mozilla@@2HA:near']
extrn ['___security_cookie:near']
extrn ['__fltused:near']
end
