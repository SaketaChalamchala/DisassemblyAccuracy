endp
?MoveTo@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_24]']
call ['??0PathOp@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_24],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_20],', 'ecx']
mov ['[ebp+var_1C],', 'edx']
lea ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
call ['?push_back@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXABUPathOp@gfx@mozilla@@@Z']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['??C?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ']
mov ['[ebp+var_2C],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[eax+4]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
dd ['offset', '$LN4_3']
dd ['offset', '$LN3_3']
endp
?LineTo@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_24]']
call ['??0PathOp@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_24],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_20],', 'ecx']
mov ['[ebp+var_1C],', 'edx']
lea ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
call ['?push_back@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXABUPathOp@gfx@mozilla@@@Z']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['??C?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ']
mov ['[ebp+var_2C],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[eax+8]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
dd ['offset', '$LN4_4']
dd ['offset', '$LN3_4']
endp
?BezierTo@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_24]']
call ['??0PathOp@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_24],', '2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_20],', 'ecx']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_18],', 'ecx']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_C],', 'edx']
lea ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
call ['?push_back@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXABUPathOp@gfx@mozilla@@@Z']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['??C?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ']
mov ['[ebp+var_2C],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_2C]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['10h']
dd ['offset', '$LN4_5']
dd ['offset', '$LN3_5']
endp
?QuadraticBezierTo@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_24]']
call ['??0PathOp@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_24],', '3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_20],', 'ecx']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_18],', 'ecx']
mov ['[ebp+var_14],', 'edx']
lea ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
call ['?push_back@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXABUPathOp@gfx@mozilla@@@Z']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['??C?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ']
mov ['[ebp+var_2C],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_2C]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_2C]']
mov ['eax,', '[edx+10h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
dd ['offset', '$LN4_6']
dd ['offset', '$LN3_6']
endp
?Close@PathBuilderRecording@gfx@mozilla@@UAEXXZ	proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_24]']
call ['??0PathOp@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_24],', '4']
lea ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
call ['?push_back@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXABUPathOp@gfx@mozilla@@@Z']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['??C?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_2C]']
mov ['eax,', '[edx+14h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_7']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_7']
dd ['offset', '$LN3_7']
endp
?CurrentPoint@PathBuilderRecording@gfx@mozilla@@UBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['??C?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+1Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
db ['0Ch', 'dup(0CCh)']
endp
?Finish@PathBuilderRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VPath@gfx@mozilla@@@@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?Finish@PathBuilderRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VPath@gfx@mozilla@@@@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '30h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_28],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??C?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ']
mov ['[ebp+var_2C],', 'eax']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_2C]']
mov ['eax,', '[edx+20h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_30]']
mov ['[ebp+var_34],', 'ecx']
mov ['[ebp+var_4],', '1']
mov ['edx,', '[ebp+var_34]']
push ['edx']
lea ['ecx,', '[ebp+var_18]']
call ['??$?0VPath@gfx@mozilla@@@?$RefPtr@VPath@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPath@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$already_AddRefed@VPath@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '0Ch']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
push ['ecx']
lea ['edx,', '[ebp+var_18]']
push ['edx']
lea ['eax,', '[ebp+var_24]']
push ['eax']
call ['??$MakeAndAddRef@VPathRecording@gfx@mozilla@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@gfx@0@@Z']
add ['esp,', '10h']
mov ['[ebp+var_38],', 'eax']
mov ['ecx,', '[ebp+var_38]']
mov ['[ebp+var_3C],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['edx,', '[ebp+var_3C]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$?0VPathRecording@gfx@mozilla@@@?$already_AddRefed@VPath@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@@Z']
mov ['eax,', '[ebp+var_28]']
or ['eax,', '1']
mov ['[ebp+var_28],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_24]']
call ['??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$RefPtr@VPath@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN11_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
dd ['offset', '$LN10_0']
dd ['offset', '$LN8_1']
db ['0Bh', 'dup(0CCh)']
endp
??1PathRecording@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1PathRecording@gfx@mozilla@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '34h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_40]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7PathRecording@gfx@mozilla@@6B@']
mov ['[ebp+var_4],', '3']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_5E4']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '24h']
call ['?size@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ']
cmp ['[ebp+var_14],', 'eax']
jnb ['short', 'loc_65F']
sub ['esp,', '8']
mov ['ecx,', 'esp']
mov ['[ebp+var_18],', 'esp']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '24h']
call ['??A?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEAAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z']
mov ['ecx,', '[eax]']
call ['?RemoveStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['ecx,', '[ebp+var_38]']
call ['??0RecordedPathDestruction@gfx@mozilla@@QAE@PAVPathRecording@12@@Z']
mov ['[ebp+var_3C],', 'eax']
mov ['edx,', '[ebp+var_3C]']
mov ['[ebp+var_40],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['eax,', '[ebp+var_40]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '24h']
call ['??A?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEAAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z']
mov ['ecx,', '[eax]']
call ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_38]']
call ['??1RecordedPathDestruction@gfx@mozilla@@UAE@XZ']
jmp ['loc_5DB']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '24h']
call ['??1?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['??1?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??1?$RefPtr@VPath@gfx@mozilla@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1Path@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '40h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
?CopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?CopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_3C],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ']
mov ['[ebp+var_40],', 'eax']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+var_40]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_40]']
mov ['edx,', '[eax+8]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_48],', 'eax']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_48]']
push ['ecx']
lea ['ecx,', '[ebp+var_18]']
call ['??$?0VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
push ['20h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_34],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
cmp ['[ebp+var_34],', '0']
jz ['short', 'loc_781']
movzx ['edx,', '[ebp+arg_4]']
push ['edx']
lea ['ecx,', '[ebp+var_18]']
call ['??B?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_34]']
call ['??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z']
mov ['[ebp+var_4C],', 'eax']
jmp ['short', 'loc_788']
mov ['[ebp+var_4C],', '0']
mov ['eax,', '[ebp+var_4C]']
mov ['[ebp+var_30],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
lea ['ecx,', '[ebp+var_24]']
call ['??0?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@PAVPathBuilderRecording@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '10h']
push ['edx']
lea ['ecx,', '[ebp+var_24]']
call ['??C?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QBEPAVPathBuilderRecording@gfx@mozilla@@XZ']
add ['eax,', '10h']
mov ['ecx,', 'eax']
call ['??4?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEAAV01@ABV01@@Z']
lea ['eax,', '[ebp+var_38]']
push ['eax']
lea ['ecx,', '[ebp+var_24]']
call ['?forget@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@XZ']
mov ['[ebp+var_50],', 'eax']
mov ['ecx,', '[ebp+var_50]']
mov ['[ebp+var_54],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
mov ['edx,', '[ebp+var_54]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$?0VPathBuilderRecording@gfx@mozilla@@@?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@@Z']
mov ['eax,', '[ebp+var_3C]']
or ['eax,', '1']
mov ['[ebp+var_3C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_24]']
call ['??1?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN16']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
dd ['offset', '$LN15']
dd ['offset', '$LN12_1']
dd ['0FFFFFFDCh,', '4']
dd ['offset', '$LN13_0']
align ['4']
endp
?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0BCh']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_C8]']
mov ['ecx,', '2Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_A8],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ']
mov ['[ebp+var_AC],', 'eax']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_64]']
push ['edx']
mov ['eax,', '[ebp+var_AC]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_AC]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_B0],', 'eax']
mov ['ecx,', '[ebp+var_B0]']
mov ['[ebp+var_B4],', 'ecx']
mov ['[ebp+var_4],', '1']
mov ['edx,', '[ebp+var_B4]']
push ['edx']
lea ['ecx,', '[ebp+var_18]']
call ['??$?0VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_64]']
call ['??1?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
push ['20h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_6C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
cmp ['[ebp+var_6C],', '0']
jz ['short', 'loc_966']
movzx ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
call ['??B?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_6C]']
call ['??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z']
mov ['[ebp+var_B8],', 'eax']
jmp ['short', 'loc_970']
mov ['[ebp+var_B8],', '0']
mov ['ecx,', '[ebp+var_B8]']
mov ['[ebp+var_68],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['edx,', '[ebp+var_68]']
push ['edx']
lea ['ecx,', '[ebp+var_24]']
call ['??0?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@PAVPathBuilderRecording@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['eax,', '[ebp+var_38]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['?begin@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@2@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
jmp ['short', 'loc_9B8']
push ['0']
lea ['ecx,', '[ebp+var_78]']
push ['ecx']
lea ['ecx,', '[ebp+var_38]']
call ['??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE?AV01@H@Z']
lea ['ecx,', '[ebp+var_78]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
lea ['edx,', '[ebp+var_88]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['?end@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@2@XZ']
mov ['[ebp+var_BC],', 'eax']
mov ['eax,', '[ebp+var_BC]']
mov ['[ebp+var_C0],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
mov ['ecx,', '[ebp+var_C0]']
push ['ecx']
lea ['ecx,', '[ebp+var_38]']
call ['??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE_NABV01@@Z']
mov ['[ebp+var_79],', 'al']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_88]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
movzx ['edx,', '[ebp+var_79]']
test ['edx,', 'edx']
jz ['loc_AD6']
lea ['ecx,', '[ebp+var_5C]']
call ['??0PathOp@gfx@mozilla@@QAE@XZ']
lea ['ecx,', '[ebp+var_38]']
call ['??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBEPBUPathOp@gfx@mozilla@@XZ']
mov ['eax,', '[eax]']
mov ['[ebp+var_5C],', 'eax']
mov ['ecx,', '[ebp+var_5C]']
cmp ['_sPointCount[ecx*4],', '1']
jl ['short', 'loc_A55']
lea ['ecx,', '[ebp+var_38]']
call ['??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBEPBUPathOp@gfx@mozilla@@XZ']
add ['eax,', '4']
push ['eax']
lea ['edx,', '[ebp+var_90]']
push ['edx']
mov ['ecx,', '[ebp+arg_4]']
call ['??DMatrix@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABU312@@Z']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_58],', 'ecx']
mov ['[ebp+var_54],', 'edx']
mov ['eax,', '[ebp+var_5C]']
cmp ['_sPointCount[eax*4],', '2']
jl ['short', 'loc_A88']
lea ['ecx,', '[ebp+var_38]']
call ['??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBEPBUPathOp@gfx@mozilla@@XZ']
add ['eax,', '0Ch']
push ['eax']
lea ['ecx,', '[ebp+var_98]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['??DMatrix@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABU312@@Z']
mov ['edx,', '[eax]']
mov ['eax,', '[eax+4]']
mov ['[ebp+var_50],', 'edx']
mov ['[ebp+var_4C],', 'eax']
mov ['ecx,', '[ebp+var_5C]']
cmp ['_sPointCount[ecx*4],', '3']
jl ['short', 'loc_ABB']
lea ['ecx,', '[ebp+var_38]']
call ['??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBEPBUPathOp@gfx@mozilla@@XZ']
add ['eax,', '14h']
push ['eax']
lea ['edx,', '[ebp+var_A0]']
push ['edx']
mov ['ecx,', '[ebp+arg_4]']
call ['??DMatrix@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABU312@@Z']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_48],', 'ecx']
mov ['[ebp+var_44],', 'edx']
lea ['eax,', '[ebp+var_5C]']
push ['eax']
lea ['ecx,', '[ebp+var_24]']
call ['??C?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QBEPAVPathBuilderRecording@gfx@mozilla@@XZ']
add ['eax,', '10h']
mov ['ecx,', 'eax']
call ['?push_back@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXABUPathOp@gfx@mozilla@@@Z']
jmp ['loc_9A2']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
lea ['ecx,', '[ebp+var_A4]']
push ['ecx']
lea ['ecx,', '[ebp+var_24]']
call ['?forget@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@XZ']
mov ['[ebp+var_C4],', 'eax']
mov ['edx,', '[ebp+var_C4]']
mov ['[ebp+var_C8],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '8']
mov ['eax,', '[ebp+var_C8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$?0VPathBuilderRecording@gfx@mozilla@@@?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@@Z']
mov ['ecx,', '[ebp+var_A8]']
or ['ecx,', '1']
mov ['[ebp+var_A8],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_A4]']
call ['??1?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_24]']
call ['??1?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN27']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '0C8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
dd ['offset', '$LN26']
dd ['offset', '$LN21']
dd ['0FFFFFFDCh,', '4']
dd ['offset', '$LN22_0']
dd ['0FFFFFFC8h,', '0Ch']
dd ['offset', '$LN23_0']
dd ['0FFFFFFA4h,', '1Ch']
dd ['offset', '$LN24']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?Finish@PathBuilderRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VPath@gfx@mozilla@@@@XZ$0 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$already_AddRefed@VPath@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?Finish@PathBuilderRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VPath@gfx@mozilla@@@@XZ$1 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$RefPtr@VPath@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?Finish@PathBuilderRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VPath@gfx@mozilla@@@@XZ$2 proc near
lea ['ecx,', '[ebp-24h]']
jmp ['??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?Finish@PathBuilderRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VPath@gfx@mozilla@@@@XZ$3 proc near
mov ['eax,', '[ebp-28h]']
and ['eax,', '1']
jz ['locret_C10']
and ['dword', 'ptr', '[ebp-28h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$already_AddRefed@VPath@gfx@mozilla@@@@QAE@XZ']
retn
endp
__ehhandler$?Finish@PathBuilderRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VPath@gfx@mozilla@@@@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-3Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?Finish@PathBuilderRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VPath@gfx@mozilla@@@@XZ']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$??1PathRecording@gfx@mozilla@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1Path@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??1PathRecording@gfx@mozilla@@UAE@XZ$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0Ch']
jmp ['??1?$RefPtr@VPath@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??1PathRecording@gfx@mozilla@@UAE@XZ$2 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '10h']
jmp ['??1?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??1PathRecording@gfx@mozilla@@UAE@XZ$3 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '24h']
jmp ['??1?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??1PathRecording@gfx@mozilla@@UAE@XZ$4 proc near
lea ['ecx,', '[ebp-38h]']
jmp ['??1RecordedPathDestruction@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??1PathRecording@gfx@mozilla@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-3Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1PathRecording@gfx@mozilla@@UAE@XZ']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?CopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$0 proc near
lea ['ecx,', '[ebp-2Ch]']
jmp ['??1?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$1 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$2 proc near
mov ['eax,', '[ebp-34h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$?CopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$3 proc near
lea ['ecx,', '[ebp-24h]']
jmp ['??1?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$4 proc near
lea ['ecx,', '[ebp-38h]']
jmp ['??1?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$5 proc near
mov ['eax,', '[ebp-3Ch]']
and ['eax,', '1']
jz ['locret_CBB']
and ['dword', 'ptr', '[ebp-3Ch],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
retn
endp
__ehhandler$?CopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?CopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z$0 proc near
lea ['ecx,', '[ebp-64h]']
jmp ['??1?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z$1 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z$2 proc near
mov ['eax,', '[ebp-6Ch]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z$3 proc near
lea ['ecx,', '[ebp-24h]']
jmp ['??1?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z$4 proc near
lea ['ecx,', '[ebp-38h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z$6 proc near
lea ['ecx,', '[ebp-88h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z$7 proc near
lea ['ecx,', '[ebp-0A4h]']
jmp ['??1?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z$8 proc near
mov ['eax,', '[ebp-0A8h]']
and ['eax,', '1']
jz ['locret_D36']
and ['dword', 'ptr', '[ebp-0A8h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
retn
endp
__ehhandler$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0C8h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$forward@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YA$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YA$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VPath@gfx@mozilla@@@?$RefPtr@VPath@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPath@gfx@mozilla@@@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?take@?$already_AddRefed@VPath@gfx@mozilla@@@@QAEPAVPath@gfx@mozilla@@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?take@?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAEPAVPathBuilder@gfx@mozilla@@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VPathBuilderRecording@gfx@mozilla@@@?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?take@?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAEPAVPathBuilderRecording@gfx@mozilla@@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VPathRecording@gfx@mozilla@@@?$already_AddRefed@VPath@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?take@?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAEPAVPathRecording@gfx@mozilla@@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?8UPathOp@gfx@mozilla@@U012@@std@@YA_NABV?$allocator@UPathOp@gfx@mozilla@@@0@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['al,', '1']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?8V?$allocator@UPathOp@gfx@mozilla@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@0@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_4+3]']
call ['??0?$allocator@UPathOp@gfx@mozilla@@@std@@QAE@ABV01@@Z']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['ecx,', '[ebp+var_4+2]']
call ['??0?$allocator@UPathOp@gfx@mozilla@@@std@@QAE@ABV01@@Z']
push ['eax']
call ['??$?8UPathOp@gfx@mozilla@@U012@@std@@YA_NABV?$allocator@UPathOp@gfx@mozilla@@@0@0@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?9V?$allocator@UPathOp@gfx@mozilla@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@0@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$?8V?$allocator@UPathOp@gfx@mozilla@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@0@Z']
add ['esp,', '8']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_F33']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_F3A']
mov ['[ebp+var_4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$Forward@AAV?$RefPtr@VPath@gfx@mozilla@@@@@mozilla@@YAAAV?$RefPtr@VPath@gfx@mozilla@@@@AAV1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$Forward@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@mozilla@@YAAAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAV12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$Forward@AAW4FillRule@gfx@mozilla@@@mozilla@@YAAAW4FillRule@gfx@0@AAW4120@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$MakeAndAddRef@VPathRecording@gfx@mozilla@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@gfx@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$MakeAndAddRef@VPathRecording@gfx@mozilla@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@gfx@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '2Ch']
push ['edi']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_28],', '0']
push ['34h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_4],', '1']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_101B']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??$Forward@AAW4FillRule@gfx@mozilla@@@mozilla@@YAAAW4FillRule@gfx@0@AAW4120@@Z']
add ['esp,', '4']
mov ['cl,', '[eax]']
movzx ['edx,', 'cl']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$Forward@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@mozilla@@YAAAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAV12@@Z']
add ['esp,', '0FFFFFFF4h']
mov ['ecx,', 'esp']
mov ['[ebp+var_24],', 'esp']
push ['eax']
call ['??0?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
mov ['[ebp+var_30],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$Forward@AAV?$RefPtr@VPath@gfx@mozilla@@@@@mozilla@@YAAAV?$RefPtr@VPath@gfx@mozilla@@@@AAV1@@Z']
add ['esp,', '4']
mov ['ecx,', 'eax']
call ['??B?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ']
push ['eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_20]']
call ['??0PathRecording@gfx@mozilla@@QAE@PAVPath@12@V?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@W4FillRule@12@@Z']
mov ['[ebp+var_34],', 'eax']
mov ['eax,', '[ebp+var_34]']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_1022']
mov ['[ebp+var_38],', '0']
mov ['ecx,', '[ebp+var_38]']
mov ['[ebp+var_1C],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
lea ['ecx,', '[ebp+var_14]']
call ['??0?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@PAVPathRecording@gfx@mozilla@@@Z']
mov ['[ebp+var_4],', '3']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_14]']
call ['?forget@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@XZ']
mov ['ecx,', '[ebp+var_28]']
or ['ecx,', '1']
mov ['[ebp+var_28],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_14]']
call ['??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '38h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN12_6']
dd ['offset', '$LN10_5']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$MakeAndAddRef@VPathRecording@gfx@mozilla@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@gfx@0@@Z$0 proc near
mov ['eax,', '[ebp-20h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$??$MakeAndAddRef@VPathRecording@gfx@mozilla@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@gfx@0@@Z$1 proc near
mov ['ecx,', '[ebp-24h]']
jmp ['??1?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$MakeAndAddRef@VPathRecording@gfx@mozilla@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@gfx@0@@Z$2 proc near
lea ['ecx,', '[ebp-14h]']
jmp ['??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??$MakeAndAddRef@VPathRecording@gfx@mozilla@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@gfx@0@@Z$3 proc near
mov ['eax,', '[ebp-28h]']
and ['eax,', '1']
jz ['$LN9_3']
and ['dword', 'ptr', '[ebp-28h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ']
retn
endp
__ehhandler$??$MakeAndAddRef@VPathRecording@gfx@mozilla@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@gfx@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-34h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$MakeAndAddRef@VPathRecording@gfx@mozilla@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@gfx@0@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@D@std@@YAPADIPAD@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_1113']
jmp ['short', 'loc_113D']
cmp ['[ebp+arg_0],', '0FFFFFFFFh']
ja ['short', 'loc_112E']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_113D']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@UPathOp@gfx@mozilla@@@std@@YAPAUPathOp@gfx@mozilla@@IPAU123@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_116B']
jmp ['short', 'loc_1199']
cmp ['[ebp+arg_0],', '9249249h']
ja ['short', 'loc_118A']
imul ['eax,', '[ebp+arg_0],', '1Ch']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_1199']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_11C7']
jmp ['short', 'loc_11F7']
cmp ['[ebp+arg_0],', '1FFFFFFFh']
ja ['short', 'loc_11E8']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '3']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_11F7']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPAV10@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_1227']
jmp ['short', 'loc_1257']
cmp ['[ebp+arg_0],', '3FFFFFFFh']
ja ['short', 'loc_1248']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '2']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_1257']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_12DD']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '4']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '4']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
jmp ['short', 'loc_12B7']
mov ['eax,', '[ebp+arg_8]']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Copy_impl@PAUPathOp@gfx@mozilla@@PAU123@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@UPathOp@gfx@mozilla@@U123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUPathOp@gfx@mozilla@@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Copy_impl@PAUPathOp@gfx@mozilla@@PAU123@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Copy_impl@PAUPathOp@gfx@mozilla@@PAU123@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
push ['edi']
jmp ['short', 'loc_1345']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '1Ch']
mov ['[ebp+arg_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '1Ch']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
cmp ['edx,', '[ebp+arg_4]']
jz ['short', 'loc_135C']
mov ['ecx,', '7']
mov ['esi,', '[ebp+arg_0]']
mov ['edi,', '[ebp+arg_8]']
rep ['movsd']
jmp ['short', 'loc_1333']
mov ['eax,', '[ebp+arg_8]']
pop ['edi']
pop ['esi']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_138D']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_pointer@UPathOp@gfx@mozilla@@@std@@YAXPAUPathOp@gfx@mozilla@@PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_13C1']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_pointer@UPathOp@gfx@mozilla@@@std@@YAXPBUPathOp@gfx@mozilla@@PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_13F5']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_1429']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range2@PAUPathOp@gfx@mozilla@@@std@@YAXPAUPathOp@gfx@mozilla@@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_148F']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Debug_pointer@UPathOp@gfx@mozilla@@@std@@YAXPAUPathOp@gfx@mozilla@@PB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Debug_pointer@UPathOp@gfx@mozilla@@@std@@YAXPAUPathOp@gfx@mozilla@@PB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_148F']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range2@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_14F7']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_14F7']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range2@PBUPathOp@gfx@mozilla@@@std@@YAXPBUPathOp@gfx@mozilla@@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_155F']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Debug_pointer@UPathOp@gfx@mozilla@@@std@@YAXPBUPathOp@gfx@mozilla@@PB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Debug_pointer@UPathOp@gfx@mozilla@@@std@@YAXPBUPathOp@gfx@mozilla@@PB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_155F']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '1']
lea ['eax,', '[ebp+arg_C]']
push ['eax']
lea ['ecx,', '[ebp+arg_0]']
call ['??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z']
mov ['byte', 'ptr', '[ebp+var_10+3],', 'al']
mov ['cl,', 'byte', 'ptr', '[ebp+var_10+3]']
mov ['byte', 'ptr', '[ebp+var_10+3],', 'cl']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z$0	proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z$1	proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range@PAUPathOp@gfx@mozilla@@@std@@YAXPAUPathOp@gfx@mozilla@@0PB_WI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_4+3]']
push ['ecx']
call ['??$_Iter_cat@PAUPathOp@gfx@mozilla@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUPathOp@gfx@mozilla@@@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range2@PAUPathOp@gfx@mozilla@@@std@@YAXPAUPathOp@gfx@mozilla@@0PB_WIUrandom_access_iterator_tag@0@@Z']
add ['esp,', '14h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_4+3]']
push ['ecx']
call ['??$_Iter_cat@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range2@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z']
add ['esp,', '14h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range@PBUPathOp@gfx@mozilla@@@std@@YAXPBUPathOp@gfx@mozilla@@0PB_WI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_4+3]']
push ['ecx']
call ['??$_Iter_cat@PBUPathOp@gfx@mozilla@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBUPathOp@gfx@mozilla@@@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range2@PBUPathOp@gfx@mozilla@@@std@@YAXPBUPathOp@gfx@mozilla@@0PB_WIUrandom_access_iterator_tag@0@@Z']
add ['esp,', '14h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '1']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_10+3]']
push ['ecx']
call ['??$_Iter_cat@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@@Z']
add ['esp,', '8']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_10+2]']
push ['edx']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_18]']
push ['ecx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
lea ['edx,', '[ebp+arg_C]']
push ['edx']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_20],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_18],', 'esp']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_24],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z']
add ['esp,', '24h']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z$0 proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z$1 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z$2 proc near
mov ['ecx,', '[ebp-14h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
jmp ['short', 'loc_184A']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_1860']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+arg_8]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
jmp ['short', 'loc_1841']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@M@std@@@std@@@std@@YAXPAM0AAU?$_Wrap_alloc@V?$allocator@M@std@@@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@MM@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAM0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@M@std@@@std@@@std@@YAXPAM0AAU?$_Wrap_alloc@V?$allocator@M@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@M@std@@@std@@@std@@YAXPAM0AAU?$_Wrap_alloc@V?$allocator@M@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAXPAUPathOp@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@UPathOp@gfx@mozilla@@U123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUPathOp@gfx@mozilla@@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAXPAUPathOp@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAXPAUPathOp@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
jmp ['short', 'loc_1962']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1Ch']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_1978']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+arg_8]']
call ['??$destroy@UPathOp@gfx@mozilla@@@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@@Z']
jmp ['short', 'loc_1959']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_19B7']
lea ['ecx,', '[ebp+arg_0]']
call ['??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAEAAV01@XZ']
lea ['eax,', '[ebp+arg_C]']
push ['eax']
lea ['ecx,', '[ebp+arg_0]']
call ['??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_19D9']
mov ['edx,', '[ebp+arg_18]']
mov ['eax,', '[edx]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_18]']
mov ['[ecx],', 'eax']
jmp ['short', 'loc_19AF']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z$0 proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z$1 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '1']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_10+3]']
push ['ecx']
call ['??$_Iter_cat@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
mov ['ecx,', '[ebp+arg_18]']
push ['ecx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
lea ['edx,', '[ebp+arg_C]']
push ['edx']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_20],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_18],', 'esp']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_24],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z']
add ['esp,', '20h']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z$0 proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z$1 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z$2 proc near
mov ['ecx,', '[ebp-14h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
jmp ['short', 'loc_1B4E']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_1B62']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
jmp ['short', 'loc_1B45']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@_Alloc_max_size@std@@SAIHABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
call ['?max_size@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QBEIXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@ABV32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@V32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Iter_cat@PAUPathOp@gfx@mozilla@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUPathOp@gfx@mozilla@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_8+3]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_33']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_30']
dd ['offset', '$LN3_30']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Iter_cat@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_8+3]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_31']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_28']
dd ['offset', '$LN3_28']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Iter_cat@PBUPathOp@gfx@mozilla@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBUPathOp@gfx@mozilla@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_8+3]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_32']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_29']
dd ['offset', '$LN3_29']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Iter_cat@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_8+3]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_27']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_24']
dd ['offset', '$LN3_24']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Ptr_cat@MM@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAM0@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_29']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_26']
dd ['offset', '$LN3_26']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Ptr_cat@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_28']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_25']
dd ['offset', '$LN3_25']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Ptr_cat@UPathOp@gfx@mozilla@@U123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUPathOp@gfx@mozilla@@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_26']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_23']
dd ['offset', '$LN3_23']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Ptr_cat@UPathOp@gfx@mozilla@@U123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBUPathOp@gfx@mozilla@@PAU234@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_25']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_22']
dd ['offset', '$LN3_22']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_30']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_27']
dd ['offset', '$LN3_27']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Rechecked@PAUPathOp@gfx@mozilla@@PAU123@@std@@YAAAPAUPathOp@gfx@mozilla@@AAPAU123@PAU123@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Rechecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAPAV10@PAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Ucopy@PAUPathOp@gfx@mozilla@@@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEPAUPathOp@gfx@mozilla@@PAU234@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninitialized_copy@PAUPathOp@gfx@mozilla@@PAU123@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z']
add ['esp,', '10h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_21']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['10h']
dd ['offset', '$LN4_19']
dd ['offset', '$LN3_19']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@1@0PAU234@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@1@0PAU234@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '2Ch']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '1']
lea ['eax,', '[ebp+var_15]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_15]']
push ['ecx']
mov ['edx,', '[ebp+arg_18]']
push ['edx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_24],', 'esp']
lea ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
mov ['[ebp+var_30],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_28],', 'esp']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_34],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@PAUPathOp@gfx@mozilla@@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@@std@@YAPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@0@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z']
add ['esp,', '20h']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_20],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_20]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10_6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '38h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
align ['4']
dd ['offset', '$LN9_5']
dd ['offset', '$LN7_1']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@1@0PAU234@@Z$0 proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@1@0PAU234@@Z$1 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@1@0PAU234@@Z$2 proc near
mov ['ecx,', '[ebp-24h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@1@0PAU234@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-34h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@1@0PAU234@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Umove@PAUPathOp@gfx@mozilla@@@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEPAUPathOp@gfx@mozilla@@PAU234@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninitialized_move@PAUPathOp@gfx@mozilla@@PAU123@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z']
add ['esp,', '10h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_22']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
dd ['offset', '$LN4_20']
dd ['offset', '$LN3_20']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninitialized_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z']
add ['esp,', '10h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_23']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['10h']
dd ['offset', '$LN4_21']
dd ['offset', '$LN3_21']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Unchecked@PAUPathOp@gfx@mozilla@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAPBUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAPBUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBEPBUPathOp@gfx@mozilla@@XZ']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAPBUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@0@@Z$0 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAPBUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@0@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAPBUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@0@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_copy@PAUPathOp@gfx@mozilla@@PAU123@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@UPathOp@gfx@mozilla@@U123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUPathOp@gfx@mozilla@@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Uninit_copy@PAUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '14h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_copy@PAUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Uninit_copy@PAUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['ecx']
push ['ebx']
push ['esi']
push ['edi']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
push ['174h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range@PAUPathOp@gfx@mozilla@@@std@@YAXPAUPathOp@gfx@mozilla@@0PB_WI@Z']
add ['esp,', '10h']
push ['175h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['??$_Debug_pointer@UPathOp@gfx@mozilla@@@std@@YAXPAUPathOp@gfx@mozilla@@PB_WI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_2306']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '1Ch']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1Ch']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_2320']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['ecx,', '[ebp+arg_C]']
call ['??$construct@UPathOp@gfx@mozilla@@AAU123@@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@AAU234@@Z']
jmp ['short', 'loc_22F4']
jmp ['short', 'loc_2352']
endp
__catch$??$_Uninit_copy@PAUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
jmp ['short', 'loc_232D']
mov ['eax,', '[ebp-14h]']
add ['eax,', '1Ch']
mov ['[ebp-14h],', 'eax']
mov ['ecx,', '[ebp-14h]']
cmp ['ecx,', '[ebp+10h]']
jz ['short', 'loc_2343']
mov ['edx,', '[ebp-14h]']
push ['edx']
mov ['ecx,', '[ebp+14h]']
call ['??$destroy@UPathOp@gfx@mozilla@@@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@@Z']
jmp ['short', 'loc_2324']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN13_7']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_2362']
endp
$LN13_7		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$??$_Uninit_copy@PAUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Uninit_copy@PAUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_copy@PBUPathOp@gfx@mozilla@@PAU123@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PBU123@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@UPathOp@gfx@mozilla@@U123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBUPathOp@gfx@mozilla@@PAU234@@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Uninit_copy@PBUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PBU123@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '14h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_copy@PBUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PBU123@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Uninit_copy@PBUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PBU123@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['ecx']
push ['ebx']
push ['esi']
push ['edi']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
push ['174h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range@PBUPathOp@gfx@mozilla@@@std@@YAXPBUPathOp@gfx@mozilla@@0PB_WI@Z']
add ['esp,', '10h']
push ['175h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['??$_Debug_pointer@UPathOp@gfx@mozilla@@@std@@YAXPAUPathOp@gfx@mozilla@@PB_WI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_246E']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '1Ch']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1Ch']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_2488']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['ecx,', '[ebp+arg_C]']
call ['??$construct@UPathOp@gfx@mozilla@@ABU123@@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@ABU234@@Z']
jmp ['short', 'loc_245C']
jmp ['short', 'loc_24BA']
endp
__catch$??$_Uninit_copy@PBUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PBU123@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
jmp ['short', 'loc_2495']
mov ['eax,', '[ebp-14h]']
add ['eax,', '1Ch']
mov ['[ebp-14h],', 'eax']
mov ['ecx,', '[ebp-14h]']
cmp ['ecx,', '[ebp+10h]']
jz ['short', 'loc_24AB']
mov ['edx,', '[ebp-14h]']
push ['edx']
mov ['ecx,', '[ebp+14h]']
call ['??$destroy@UPathOp@gfx@mozilla@@@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@@Z']
jmp ['short', 'loc_248C']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN13_6']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_24CA']
endp
$LN13_6		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$??$_Uninit_copy@PBUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PBU123@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Uninit_copy@PBUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PBU123@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['ecx']
push ['ebx']
push ['esi']
push ['edi']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_255A']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
mov ['[ebp+arg_0],', 'edx']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_2572']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+arg_C]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z']
jmp ['short', 'loc_2548']
jmp ['short', 'loc_25A4']
endp
__catch$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
jmp ['short', 'loc_257F']
mov ['edx,', '[ebp-14h]']
add ['edx,', '4']
mov ['[ebp-14h],', 'edx']
mov ['eax,', '[ebp-14h]']
cmp ['eax,', '[ebp+8]']
jz ['short', 'loc_2595']
mov ['ecx,', '[ebp-14h]']
push ['ecx']
mov ['ecx,', '[ebp+14h]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
jmp ['short', 'loc_2576']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN13_5']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_25B4']
endp
$LN13_5		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_move@PAUPathOp@gfx@mozilla@@PAU123@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@UPathOp@gfx@mozilla@@U123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUPathOp@gfx@mozilla@@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Val_type@PAUPathOp@gfx@mozilla@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninit_move@PAUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@U123@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '18h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_move@PAUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@U123@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Uninit_move@PAUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@U123@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['ecx']
push ['ebx']
push ['esi']
push ['edi']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
push ['1B6h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range@PAUPathOp@gfx@mozilla@@@std@@YAXPAUPathOp@gfx@mozilla@@0PB_WI@Z']
add ['esp,', '10h']
push ['1B7h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['??$_Debug_pointer@UPathOp@gfx@mozilla@@@std@@YAXPAUPathOp@gfx@mozilla@@PB_WI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_26C6']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '1Ch']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1Ch']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_26E0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['ecx,', '[ebp+arg_C]']
call ['??$construct@UPathOp@gfx@mozilla@@U123@@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@$$QAU234@@Z']
jmp ['short', 'loc_26B4']
jmp ['short', 'loc_2712']
endp
__catch$??$_Uninit_move@PAUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@U123@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
jmp ['short', 'loc_26ED']
mov ['eax,', '[ebp-14h]']
add ['eax,', '1Ch']
mov ['[ebp-14h],', 'eax']
mov ['ecx,', '[ebp-14h]']
cmp ['ecx,', '[ebp+10h]']
jz ['short', 'loc_2703']
mov ['edx,', '[ebp-14h]']
push ['edx']
mov ['ecx,', '[ebp+14h]']
call ['??$destroy@UPathOp@gfx@mozilla@@@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@@Z']
jmp ['short', 'loc_26E4']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN13_8']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_2722']
endp
$LN13_8		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$??$_Uninit_move@PAUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@U123@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Uninit_move@PAUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@U123@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '18h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['ecx']
push ['ebx']
push ['esi']
push ['edi']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
push ['1B6h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z']
add ['esp,', '10h']
push ['1B7h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_283A']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '4']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_2854']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['ecx,', '[ebp+arg_C]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
jmp ['short', 'loc_2828']
jmp ['short', 'loc_2886']
endp
__catch$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
jmp ['short', 'loc_2861']
mov ['eax,', '[ebp-14h]']
add ['eax,', '4']
mov ['[ebp-14h],', 'eax']
mov ['ecx,', '[ebp-14h]']
cmp ['ecx,', '[ebp+10h]']
jz ['short', 'loc_2877']
mov ['edx,', '[ebp-14h]']
push ['edx']
mov ['ecx,', '[ebp+14h]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
jmp ['short', 'loc_2858']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN13_9']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_2896']
endp
$LN13_9		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninitialized_copy@PAUPathOp@gfx@mozilla@@PAU123@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Unchecked@PAUPathOp@gfx@mozilla@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$_Unchecked@PAUPathOp@gfx@mozilla@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Unchecked@PAUPathOp@gfx@mozilla@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Uninit_copy@PAUPathOp@gfx@mozilla@@PAU123@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z']
add ['esp,', '10h']
push ['eax']
lea ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Rechecked@PAUPathOp@gfx@mozilla@@PAU123@@std@@YAAAPAUPathOp@gfx@mozilla@@AAPAU123@PAU123@@Z']
add ['esp,', '8']
mov ['eax,', '[eax]']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@PAUPathOp@gfx@mozilla@@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@@std@@YAPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@0@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@PAUPathOp@gfx@mozilla@@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@@std@@YAPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@0@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '1']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_18]']
push ['ecx']
call ['??$_Unchecked@PAUPathOp@gfx@mozilla@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@@Z']
add ['esp,', '4']
push ['eax']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
lea ['edx,', '[ebp+arg_C]']
push ['edx']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_1C],', 'eax']
call ['??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAPBUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@0@@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
push ['eax']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_18],', 'esp']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_24],', 'eax']
call ['??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAPBUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@0@@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_28],', 'eax']
mov ['eax,', '[ebp+var_28]']
push ['eax']
call ['??$_Uninit_copy@PBUPathOp@gfx@mozilla@@PAU123@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PBU123@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z']
add ['esp,', '10h']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
lea ['edx,', '[ebp+arg_18]']
push ['edx']
call ['??$_Rechecked@PAUPathOp@gfx@mozilla@@PAU123@@std@@YAAAPAUPathOp@gfx@mozilla@@AAPAU123@PAU123@@Z']
add ['esp,', '8']
mov ['eax,', '[eax]']
mov ['[ebp+var_10],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@PAUPathOp@gfx@mozilla@@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@@std@@YAPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@0@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z$0 proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@PAUPathOp@gfx@mozilla@@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@@std@@YAPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@0@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z$1 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@PAUPathOp@gfx@mozilla@@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@@std@@YAPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@0@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-24h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@PAUPathOp@gfx@mozilla@@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@@std@@YAPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@0@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninitialized_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0@Z']
add ['esp,', '8']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '18h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninitialized_move@PAUPathOp@gfx@mozilla@@PAU123@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Unchecked@PAUPathOp@gfx@mozilla@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$_Unchecked@PAUPathOp@gfx@mozilla@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Unchecked@PAUPathOp@gfx@mozilla@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Uninit_move@PAUPathOp@gfx@mozilla@@PAU123@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z']
add ['esp,', '10h']
push ['eax']
lea ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Rechecked@PAUPathOp@gfx@mozilla@@PAU123@@std@@YAAAPAUPathOp@gfx@mozilla@@AAPAU123@PAU123@@Z']
add ['esp,', '8']
mov ['eax,', '[eax]']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Uninitialized_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z']
add ['esp,', '10h']
push ['eax']
lea ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Rechecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAPAV10@PAV10@@Z']
add ['esp,', '8']
mov ['eax,', '[eax]']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Val_type@PAUPathOp@gfx@mozilla@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@$$CBUPathOp@gfx@mozilla@@@std@@YAPBUPathOp@gfx@mozilla@@ABU123@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@$$CBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@D@std@@YAPADAAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@PAU?$_List_node@PBXPAX@std@@@std@@YAPAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@PBX@std@@YAPAPBXAAPBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_2C2E']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_2C35']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@UPathOp@gfx@mozilla@@AAU123@@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@AAU234@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@AAUPathOp@gfx@mozilla@@@std@@YAAAUPathOp@gfx@mozilla@@AAU123@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@UPathOp@gfx@mozilla@@AAU123@@?$allocator_traits@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@SAXAAV?$allocator@UPathOp@gfx@mozilla@@@1@PAUPathOp@gfx@mozilla@@AAU345@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@UPathOp@gfx@mozilla@@AAU123@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@AAU234@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@UPathOp@gfx@mozilla@@AAU123@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@AAU234@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['1Ch']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_2D69']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@AAUPathOp@gfx@mozilla@@@std@@YAAAUPathOp@gfx@mozilla@@AAU123@@Z']
add ['esp,', '4']
mov ['ecx,', '7']
mov ['esi,', 'eax']
mov ['edi,', '[ebp+var_18]']
rep ['movsd']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'edx']
jmp ['short', 'loc_2D70']
mov ['[ebp+var_1C],', '0']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@UPathOp@gfx@mozilla@@AAU123@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@AAU234@@Z$0	proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@UPathOp@gfx@mozilla@@AAU123@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@AAU234@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@UPathOp@gfx@mozilla@@AAU123@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@AAU234@@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@UPathOp@gfx@mozilla@@AAU123@@?$allocator_traits@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@SAXAAV?$allocator@UPathOp@gfx@mozilla@@@1@PAUPathOp@gfx@mozilla@@AAU345@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@AAUPathOp@gfx@mozilla@@@std@@YAAAUPathOp@gfx@mozilla@@AAU123@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@UPathOp@gfx@mozilla@@AAU123@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@AAU234@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@UPathOp@gfx@mozilla@@ABU123@@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@ABU234@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@ABUPathOp@gfx@mozilla@@@std@@YAABUPathOp@gfx@mozilla@@ABU123@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@UPathOp@gfx@mozilla@@ABU123@@?$allocator_traits@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@SAXAAV?$allocator@UPathOp@gfx@mozilla@@@1@PAUPathOp@gfx@mozilla@@ABU345@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@UPathOp@gfx@mozilla@@ABU123@@?$allocator_traits@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@SAXAAV?$allocator@UPathOp@gfx@mozilla@@@1@PAUPathOp@gfx@mozilla@@ABU345@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@ABUPathOp@gfx@mozilla@@@std@@YAABUPathOp@gfx@mozilla@@ABU123@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?construct@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@ABU345@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@UPathOp@gfx@mozilla@@U123@@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@$$QAU234@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@UPathOp@gfx@mozilla@@@std@@YA$$QAUPathOp@gfx@mozilla@@AAU123@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@UPathOp@gfx@mozilla@@U123@@?$allocator_traits@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@SAXAAV?$allocator@UPathOp@gfx@mozilla@@@1@PAUPathOp@gfx@mozilla@@$$QAU345@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@UPathOp@gfx@mozilla@@U123@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@$$QAU234@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@UPathOp@gfx@mozilla@@U123@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@$$QAU234@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['1Ch']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_2F09']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@UPathOp@gfx@mozilla@@@std@@YA$$QAUPathOp@gfx@mozilla@@AAU123@@Z']
add ['esp,', '4']
mov ['ecx,', '7']
mov ['esi,', 'eax']
mov ['edi,', '[ebp+var_18]']
rep ['movsd']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'edx']
jmp ['short', 'loc_2F10']
mov ['[ebp+var_1C],', '0']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@UPathOp@gfx@mozilla@@U123@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@$$QAU234@@Z$0	proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@UPathOp@gfx@mozilla@@U123@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@$$QAU234@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@UPathOp@gfx@mozilla@@U123@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@$$QAU234@@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@UPathOp@gfx@mozilla@@U123@@?$allocator_traits@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@SAXAAV?$allocator@UPathOp@gfx@mozilla@@@1@PAUPathOp@gfx@mozilla@@$$QAU345@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@UPathOp@gfx@mozilla@@@std@@YA$$QAUPathOp@gfx@mozilla@@AAU123@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@UPathOp@gfx@mozilla@@U123@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@$$QAU234@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['8']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_3044']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
mov ['edx,', '[eax]']
mov ['eax,', '[eax+4]']
mov ['ecx,', '[ebp+var_18]']
mov ['[ecx],', 'edx']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'edx']
jmp ['short', 'loc_304B']
mov ['[ebp+var_1C],', '0']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@ABV32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?construct@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@ABV32@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_327E']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
mov ['edx,', '[eax]']
mov ['eax,', '[ebp+var_18]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_3285']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z$0 proc	near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@V32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAU?$_List_node@PBXPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@PAU?$_List_node@PBXPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPAU?$_List_node@PBXPAX@1@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAU?$_List_node@PBXPAX@std@@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAU?$_List_node@PBXPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPAU?$_List_node@PBXPAX@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@PAU?$_List_node@PBXPAX@std@@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PBX@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@PBX@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPBX@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PBX@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@PBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@UPathOp@gfx@mozilla@@@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@UPathOp@gfx@mozilla@@@?$allocator_traits@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@SAXAAV?$allocator@UPathOp@gfx@mozilla@@@1@PAUPathOp@gfx@mozilla@@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@UPathOp@gfx@mozilla@@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@UPathOp@gfx@mozilla@@@?$allocator_traits@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@SAXAAV?$allocator@UPathOp@gfx@mozilla@@@1@PAUPathOp@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@UPathOp@gfx@mozilla@@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0A3Eh']
push ['offset', '??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@AAUPathOp@gfx@mozilla@@@std@@YAAAUPathOp@gfx@mozilla@@AAU123@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@ABUPathOp@gfx@mozilla@@@std@@YAABUPathOp@gfx@mozilla@@ABU123@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@UPathOp@gfx@mozilla@@@std@@YA$$QAUPathOp@gfx@mozilla@@AAU123@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YA$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@AAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$BasePoint@MU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
movss ['xmm0,', 'ds:__real@00000000']
movss ['dword', 'ptr', '[eax],', 'xmm0']
mov ['ecx,', '[ebp+var_4]']
movss ['xmm0,', 'ds:__real@00000000']
movss ['dword', 'ptr', '[ecx+4],', 'xmm0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$BasePoint@MU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefPtr@VPath@gfx@mozilla@@@@QAE@PAVPath@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_3704']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?AddRef@?$AddRefTraits@VPath@gfx@mozilla@@@?$RefPtr@VPath@gfx@mozilla@@@@SAXPAVPath@gfx@mozilla@@@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@PAVPathBuilder@gfx@mozilla@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_3744']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?AddRef@?$AddRefTraits@VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@SAXPAVPathBuilder@gfx@mozilla@@@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@PAVPathBuilderRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_3784']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?AddRef@?$AddRefTraits@VPathBuilderRecording@gfx@mozilla@@@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@SAXPAVPathBuilderRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@PAVPathRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_37C4']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?AddRef@?$AddRefTraits@VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@SAXPAVPathRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@ABU01@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Iterator_base12@std@@QAE@ABU01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Iterator_base12@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@UPathOp@gfx@mozilla@@HPBU345@ABU345@U_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Iterator_base12@std@@QAE@ABU01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@UPathOp@gfx@mozilla@@HPBU345@ABU345@U_Iterator_base12@2@@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Iterator_base12@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Iterator_base12@std@@QAE@ABU01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Iterator_base12@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Adopt@_Iterator_base0@std@@QAEXPBX@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@ABU01@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z$0 proc	near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??0_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+18h],', '0']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Vector_val@U?$_Simple_types@M@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_val@U?$_Simple_types@M@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Vector_val@U?$_Simple_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_val@U?$_Simple_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z$0 proc	near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV01@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@UPathOp@gfx@mozilla@@HPBU345@ABU345@U_Iterator_base12@2@@std@@QAE@ABU01@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@PAUPathOp@gfx@mozilla@@PBU_Container_base12@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@PAUPathOp@gfx@mozilla@@PBU_Container_base12@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@UPathOp@gfx@mozilla@@HPBU345@ABU345@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@PAUPathOp@gfx@mozilla@@PBU_Container_base12@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@UPathOp@gfx@mozilla@@HPBU345@ABU345@U_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@PAUPathOp@gfx@mozilla@@PBU_Container_base12@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@PAUPathOp@gfx@mozilla@@PBU_Container_base12@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_val@U?$_Simple_types@M@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??0_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_val@U?$_Simple_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??0_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??0_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@D@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@M@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@M@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@UPathOp@gfx@mozilla@@@std@@QAE@ABV01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@UPathOp@gfx@mozilla@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@D@std@@QAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@M@std@@QAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@UPathOp@gfx@mozilla@@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@UPathOp@gfx@mozilla@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAE@PAVPathBuilderRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@PAVPathRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
lea ['ecx,', '[ebp+var_14+3]']
call ['??0?$allocator@D@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
mov ['[ebp+var_4],', '0']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
mov ['eax,', '[ebp+Str]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_8+3]']
call ['??0?$allocator@M@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_8+3]']
call ['??0?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@ABV01@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '1Ch']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
lea ['eax,', '[ebp+var_18+2]']
push ['eax']
lea ['ecx,', '[ebp+var_18+3]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBE?AU12@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Buy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAE_NI@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_44E4']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
push ['ecx']
sub ['esp,', '0Ch']
mov ['edx,', 'esp']
mov ['[ebp+var_1C],', 'esp']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['?end@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@2@XZ']
mov ['[ebp+var_24],', 'eax']
sub ['esp,', '0Ch']
mov ['eax,', 'esp']
mov ['[ebp+var_20],', 'esp']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?begin@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@2@XZ']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@1@0PAU234@@Z']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_2C]']
mov ['[ecx+8],', 'edx']
jmp ['short', 'loc_44D4']
endp
__catch$??0?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@ABV01@@Z$0 proc near
mov ['ecx,', '[ebp-14h]']
call ['?_Tidy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXXZ']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN11_2']
retn
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_44E4']
endp
$LN11_2		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@ABV01@@Z$2 proc near
mov ['ecx,', '[ebp-14h]']
jmp ['??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@ABV01@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-30h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@ABV01@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_8+3]']
call ['??0?$allocator@UPathOp@gfx@mozilla@@@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0PathBuilder@gfx@mozilla@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0PathSink@gfx@mozilla@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7PathBuilder@gfx@mozilla@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0PathBuilder@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7PathBuilderRecording@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??0?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@PAVPathBuilder@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['edx,', '[ebp+var_10]']
mov ['al,', '[ebp+arg_4]']
mov ['[edx+0Ch],', 'al']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['??0?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1PathBuilder@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '8']
jmp ['??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
endp
__ehhandler$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0PathOp@gfx@mozilla@@QAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@XZ']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@XZ']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '14h']
call ['??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0PathRecording@gfx@mozilla@@QAE@PAVPath@12@V?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@W4FillRule@12@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0PathRecording@gfx@mozilla@@QAE@PAVPath@12@V?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@W4FillRule@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['??0Path@gfx@mozilla@@IAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7PathRecording@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??0?$RefPtr@VPath@gfx@mozilla@@@@QAE@PAVPath@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['??0?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@ABV01@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['eax,', '[ebp+var_10]']
mov ['cl,', '[ebp+arg_14]']
mov ['[eax+20h],', 'cl']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '24h']
call ['??0?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0PathRecording@gfx@mozilla@@QAE@PAVPath@12@V?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@W4FillRule@12@@Z$0 proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??0PathRecording@gfx@mozilla@@QAE@PAVPath@12@V?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@W4FillRule@12@@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1Path@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??0PathRecording@gfx@mozilla@@QAE@PAVPath@12@V?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@W4FillRule@12@@Z$2 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0Ch']
jmp ['??1?$RefPtr@VPath@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??0PathRecording@gfx@mozilla@@QAE@PAVPath@12@V?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@W4FillRule@12@@Z$3 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '10h']
jmp ['??1?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0PathRecording@gfx@mozilla@@QAE@PAVPath@12@V?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@W4FillRule@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0PathRecording@gfx@mozilla@@QAE@PAVPath@12@V?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@W4FillRule@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0PathSink@gfx@mozilla@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??0?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7PathSink@gfx@mozilla@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedEvent@gfx@mozilla@@IAE@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedEvent@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+4],', 'edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RecordedPathDestruction@gfx@mozilla@@QAE@PAVPathRecording@12@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0RecordedPathDestruction@gfx@mozilla@@QAE@PAVPathRecording@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['12h']
mov ['ecx,', '[ebp+var_10]']
call ['??0RecordedEvent@gfx@mozilla@@IAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedPathDestruction@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0RecordedPathDestruction@gfx@mozilla@@QAE@PAVPathRecording@12@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0RecordedPathDestruction@gfx@mozilla@@QAE@PAVPathRecording@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0RecordedPathDestruction@gfx@mozilla@@QAE@PAVPathRecording@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
cdq
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Container_proxy@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Generic_error_category@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0error_category@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_Generic_error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Iostream_error_category@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Generic_error_category@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_Iostream_error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Iterator_base12@std@@QAE@ABU01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Iterator_base12@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_System_error_category@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Generic_error_category@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_System_error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0error_category@std@@QAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_4A42']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefPtr@VPath@gfx@mozilla@@@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_4A94']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?Release@?$AddRefTraits@VPath@gfx@mozilla@@@?$RefPtr@VPath@gfx@mozilla@@@@SAXPAVPath@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_4AC8']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?Release@?$AddRefTraits@VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@SAXPAVPathBuilder@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_4AFC']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?Release@?$AddRefTraits@VPathBuilderRecording@gfx@mozilla@@@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@SAXPAVPathBuilderRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_4B30']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?Release@?$AddRefTraits@VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@SAXPAVPathRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Iterator_base12@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Iterator012@Urandom_access_iterator_tag@std@@UPathOp@gfx@mozilla@@HPBU345@ABU345@U_Iterator_base12@2@@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Iterator_base12@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Iterator_base12@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??1_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_val@U?$_Simple_types@M@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_val@U?$_Simple_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@UPathOp@gfx@mozilla@@HPBU345@ABU345@U_Iterator_base12@2@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_val@U?$_Simple_types@M@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??1_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_val@U?$_Simple_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??1_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??1_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$already_AddRefed@VPath@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_4E02']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_4E1A']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_4E32']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_4E4A']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$vector@MV?$allocator@M@std@@@std@@IAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1PathBuilder@gfx@mozilla@@UAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1PathSink@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1PathBuilderRecording@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1PathBuilderRecording@gfx@mozilla@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['??1?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1PathBuilder@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??1PathBuilderRecording@gfx@mozilla@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1PathBuilder@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??1PathBuilderRecording@gfx@mozilla@@UAE@XZ	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1PathBuilderRecording@gfx@mozilla@@UAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1PathSink@gfx@mozilla@@UAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7PathSink@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??1?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedEvent@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7RecordedEvent@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RecordedPathDestruction@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1_Generic_error_category@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1error_category@std@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1_Iostream_error_category@std@@UAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Generic_error_category@std@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1_Iterator_base12@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_C]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
call ['?_Orphan_me@_Iterator_base12@std@@QAEXXZ']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_C]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4']
dd ['offset', '$LN3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1_System_error_category@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Generic_error_category@std@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1error_category@std@@UAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7error_category@std@@6B@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??2@YAPAXIPAX@Z	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??3@YAXPAX0@Z	proc near		
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??4?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEAAV01@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??4?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEAAV01@ABV01@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '14h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+arg_0]']
jz ['loc_53BC']
lea ['ecx,', '[ebp+var_20+3]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ']
push ['eax']
lea ['edx,', '[ebp+var_20+2]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ']
push ['eax']
call ['??$?9V?$allocator@UPathOp@gfx@mozilla@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@0@Z']
add ['esp,', '8']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_5201']
xor ['ecx,', 'ecx']
jz ['short', 'loc_5201']
mov ['ecx,', '[ebp+var_14]']
call ['?_Tidy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXXZ']
lea ['edx,', '[ebp+var_20+1]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Change_alloc@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@@Z']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_14]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
call ['?empty@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBE_NXZ']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_522F']
mov ['ecx,', '[ebp+var_14]']
call ['?clear@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXXZ']
jmp ['loc_53BC']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ']
cmp ['eax,', 'esi']
ja ['short', 'loc_5294']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
call ['??$_Copy_impl@PAUPathOp@gfx@mozilla@@PAU123@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Destroy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXPAUPathOp@gfx@mozilla@@0@Z']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ']
imul ['ecx,', 'eax,', '1Ch']
mov ['edx,', '[ebp+var_14]']
add ['ecx,', '[edx+4]']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+8],', 'ecx']
jmp ['loc_53BC']
mov ['ecx,', '[ebp+var_14]']
call ['?capacity@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ']
cmp ['eax,', 'esi']
ja ['short', 'loc_52FD']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ']
imul ['ecx,', 'eax,', '1Ch']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+4]']
mov ['[ebp+var_1C],', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['??$_Copy_impl@PAUPathOp@gfx@mozilla@@PAU123@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00@Z']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Ucopy@PAUPathOp@gfx@mozilla@@@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEPAUPathOp@gfx@mozilla@@PAU234@00@Z']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+8],', 'eax']
jmp ['loc_53BC']
mov ['edx,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[edx+4],', '0']
jz ['short', 'loc_534B']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Destroy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXPAUPathOp@gfx@mozilla@@0@Z']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ecx+0Ch]']
sub ['eax,', '[edx+4]']
cdq
mov ['ecx,', '1Ch']
idiv ['ecx']
push ['eax']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+4]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@I@Z']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Buy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAE_NI@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_53BC']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Ucopy@PAUPathOp@gfx@mozilla@@@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEPAUPathOp@gfx@mozilla@@PAU234@00@Z']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_24]']
mov ['[eax+8],', 'ecx']
jmp ['short', 'loc_53AC']
endp
__catch$??4?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEAAV01@ABV01@@Z$0 proc	near
mov ['ecx,', '[ebp-14h]']
call ['?_Tidy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXXZ']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN17_0']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_53BC']
endp
$LN17_0		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$??4?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEAAV01@ABV01@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-28h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??4?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEAAV01@ABV01@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_5444']
jmp ['short', 'loc_549A']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_545E']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
jmp ['short', 'loc_549A']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_me@_Iterator_base12@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN11']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
dd ['offset', '$LN10']
dd ['offset', '$LN8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 proc near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-18h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_5556']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['esi,', 'eax']
jz ['loc_55DC']
mov ['esi,', 'esp']
push ['121h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DI@MDELDGPI@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@']
test ['eax,', 'eax']
jz ['short', 'loc_5584']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_55B4']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['122h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_55B4']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['122h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1NK@BJPMEIHF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
push ['offset', '??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+8]']
jnz ['short', 'loc_55F3']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_55FA']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_563C']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_5643']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBEXABV12@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+8]']
cmp ['eax,', '[edx+8]']
jnz ['short', 'loc_5686']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_568D']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??8error_category@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+arg_0]']
jnz ['short', 'loc_56C8']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_56CF']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??8error_condition@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?category@error_condition@std@@QBEABVerror_category@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?category@error_condition@std@@QBEABVerror_category@2@XZ']
mov ['ecx,', 'eax']
call ['??8error_category@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_572E']
mov ['ecx,', '[ebp+var_4]']
call ['?value@error_condition@std@@QBEHXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?value@error_condition@std@@QBEHXZ']
cmp ['esi,', 'eax']
jnz ['short', 'loc_572E']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_5735']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_577F']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_5786']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_57CF']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_57D6']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_581F']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_5826']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??A?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEAAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
ja ['loc_58E2']
mov ['esi,', 'esp']
push ['4B1h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_588A']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_58BA']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['4B2h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_58BA']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['4B2h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1BBO@CBMDIAJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?3?$AA?3?$AAg?$AAf?$AAx?$AA?3?$AA?3@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??A?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
ja ['loc_59A6']
mov ['esi,', 'esp']
push ['4B1h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_594E']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_597E']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['4B2h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_597E']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['4B2h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1CME@JIAKHOAG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAu?$AAn?$AAc@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??B?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??B?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??BReferencePtr@gfx@mozilla@@QBEPAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??C?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_5A32']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??C?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_5A5A']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??C?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QBEPAVPathBuilderRecording@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_5A82']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QBEPAVPathBuilderRecording@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBEPBUPathOp@gfx@mozilla@@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBEABUPathOp@gfx@mozilla@@XZ']
push ['eax']
call ['?pointer_to@?$pointer_traits@PBUPathOp@gfx@mozilla@@@std@@SAPBUPathOp@gfx@mozilla@@ABU345@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBEABQBXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_5B07']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_5B07']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
cmp ['edx,', '[eax+4]']
jnz ['loc_5B8D']
mov ['esi,', 'esp']
push ['0D2h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EC@HILJLMMC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb?$AAl?$AAe@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_5B35']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_5B65']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['0D3h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_5B65']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['0D3h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1NI@GGDPCAJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['?_Myval@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPBXPAU?$_List_node@PBXPAX@2@@Z']
add ['esp,', '4']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?_Myval@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPBXPAU?$_List_node@PBXPAX@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBEABUPathOp@gfx@mozilla@@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_5C22']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_5C22']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
cmp ['edx,', '[eax+4]']
jb ['short', 'loc_5C22']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+8]']
ja ['short', 'loc_5C9F']
mov ['esi,', 'esp']
push ['48h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_5C4D']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_5C7A']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['49h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_5C7A']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['49h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1PE@HJGPOFJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??DMatrix@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABU312@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_10]']
call ['??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@XZ']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_4]']
movss ['xmm0,', 'dword', 'ptr', '[eax]']
mulss ['xmm0,', 'dword', 'ptr', '[ecx]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_4]']
movss ['xmm1,', 'dword', 'ptr', '[edx+4]']
mulss ['xmm1,', 'dword', 'ptr', '[eax+8]']
addss ['xmm0,', 'xmm1']
mov ['ecx,', '[ebp+var_4]']
addss ['xmm0,', 'dword', 'ptr', '[ecx+10h]']
movss ['[ebp+var_10],', 'xmm0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_4]']
movss ['xmm0,', 'dword', 'ptr', '[edx]']
mulss ['xmm0,', 'dword', 'ptr', '[eax+4]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_4]']
movss ['xmm1,', 'dword', 'ptr', '[ecx+4]']
mulss ['xmm1,', 'dword', 'ptr', '[edx+0Ch]']
addss ['xmm0,', 'xmm1']
mov ['eax,', '[ebp+var_4]']
addss ['xmm0,', 'dword', 'ptr', '[eax+14h]']
movss ['[ebp+var_C],', 'xmm0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_10]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[ecx+4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN4_2']
dd ['offset', '$LN3_2']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_28],', '0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAEAAV01@XZ']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['edx,', '[ebp+var_28]']
or ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN8_3']
dd ['offset', '$LN6_0']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z$0 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAEAAV01@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_5EBF']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_5EBF']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
cmp ['edx,', '[eax+4]']
jnz ['loc_5F45']
mov ['esi,', 'esp']
push ['0E6h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EA@DOGAGKDH@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_5EED']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_5F1D']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['0E7h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_5F1D']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['0E7h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1NK@LJABKBLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['[edx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE?AV01@H@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE?AV01@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_28],', '0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAEAAV01@XZ']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['edx,', '[ebp+var_28]']
or ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN8_4']
dd ['offset', '$LN6_2']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE?AV01@H@Z$0 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE?AV01@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE?AV01@H@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAEAAV01@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_60D3']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_60D3']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+8]']
ja ['short', 'loc_6150']
mov ['esi,', 'esp']
push ['65h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_60FE']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_612B']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['66h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_612B']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['66h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1PG@INBDMFAK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '1Ch']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_28],', '0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['ecx,', '[ebp+var_20]']
call ['??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['edx,', '[ebp+var_28]']
or ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
dd ['offset', '$LN8_5']
dd ['offset', '$LN6_3']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z$0 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??R?$_Bitwise_hash@PBX@std@@QBEIABQBX@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['4']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_Hash_seq@std@@YAIPBEI@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBEIABQBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Gethash@?$_Hash_oper1@$0A@U?$hash@PBX@std@@@std@@QBE?AU?$hash@PBX@2@XZ']
mov ['ecx,', 'eax']
call ['??R?$_Bitwise_hash@PBX@std@@QBEIABQBX@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getkeyeq@?$_Hash_oper2@$0A@U?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE?AU?$equal_to@PBX@2@XZ']
mov ['ecx,', 'eax']
call ['??R?$equal_to@PBX@std@@QBE_NABQBX0@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_6355']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_635C']
mov ['[ebp+var_C],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_C]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??R?$equal_to@PBX@std@@QBE_NABQBX0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_639C']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_63A3']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_63FD']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
lea ['esi,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['esi,', '[eax+4]']
jb ['short', 'loc_63FD']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[edx+ecx*4]']
cmp ['[eax+8],', 'edx']
jnb ['loc_6483']
mov ['esi,', 'esp']
push ['9Fh']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_642B']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_645B']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['0A0h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_645B']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['0A0h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1BNG@JIGEKGDI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GPathBuilder@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1PathBuilder@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_6506']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GPathBuilderRecording@gfx@mozilla@@UAEPAXI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1PathBuilderRecording@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_6546']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GPathRecording@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1PathRecording@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_6586']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GPathSink@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1PathSink@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_65C6']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedEvent@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedEvent@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_6606']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRecordedPathDestruction@gfx@mozilla@@UAEPAXI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1RecordedPathDestruction@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_6646']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G_Generic_error_category@std@@UAEPAXI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Generic_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_6686']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Iostream_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_66C6']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G_System_error_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_System_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_6706']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_Gerror_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_6746']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_H@YGXPAXIHP6EPAX0@Z@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
js ['short', 'loc_6785']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['[ebp+arg_C]']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'ecx']
jmp ['short', 'loc_6760']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
call ['??0_Generic_error_category@std@@QAE@XZ']
push ['offset', '??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A']
call ['??0_Iostream_error_category@std@@QAE@XZ']
push ['offset', '??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
call ['??0_System_error_category@std@@QAE@XZ']
push ['offset', '??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
push ['0']
mov ['ecx,', 'offset', '?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A']
call ['dword', 'ptr', 'ds:__imp_??0id@locale@std@@QAE@I@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
push ['0']
mov ['ecx,', 'offset', '?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A']
call ['dword', 'ptr', 'ds:__imp_??0id@locale@std@@QAE@I@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__Eallocator_arg@std@@YAXXZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
xor ['eax,', 'eax']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__Epiecewise_construct@std@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
xor ['eax,', 'eax']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$yd']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
call ['??1_Generic_error_category@std@@UAE@XZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$yd']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A']
call ['??1_Iostream_error_category@std@@UAE@XZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$yd']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
call ['??1_System_error_category@std@@UAE@XZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$AddRefTraits@VPath@gfx@mozilla@@@?$RefPtr@VPath@gfx@mozilla@@@@SAXPAVPath@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsAddRefHelper@?$RefPtr@VPath@gfx@mozilla@@@@CAXPAVPath@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$AddRefTraits@VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@SAXPAVPathBuilder@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsAddRefHelper@?$RefPtr@VPathBuilder@gfx@mozilla@@@@CAXPAVPathBuilder@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$AddRefTraits@VPathBuilderRecording@gfx@mozilla@@@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@SAXPAVPathBuilderRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsAddRefHelper@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@CAXPAVPathBuilderRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$AddRefTraits@VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@SAXPAVPathRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsAddRefHelper@?$RefPtr@VPathRecording@gfx@mozilla@@@@CAXPAVPathRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_6926']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['[eax],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_694A']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['[eax],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsAddRefHelper@?$RefPtr@VPath@gfx@mozilla@@@@CAXPAVPath@gfx@mozilla@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?AddRef@?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsAddRefHelper@?$RefPtr@VPathBuilder@gfx@mozilla@@@@CAXPAVPathBuilder@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?AddRef@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsAddRefHelper@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@CAXPAVPathBuilderRecording@gfx@mozilla@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?AddRef@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsAddRefHelper@?$RefPtr@VPathRecording@gfx@mozilla@@@@CAXPAVPathRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?AddRef@?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsReleaseHelper@?$RefPtr@VPath@gfx@mozilla@@@@CAXPAVPath@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?Release@?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsReleaseHelper@?$RefPtr@VPathBuilder@gfx@mozilla@@@@CAXPAVPathBuilder@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?Release@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsReleaseHelper@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@CAXPAVPathBuilderRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?Release@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsReleaseHelper@?$RefPtr@VPathRecording@gfx@mozilla@@@@CAXPAVPathRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?Release@?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Arc@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@MMM_N@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?ContainsPoint@PathRecording@gfx@mozilla@@UBE_NABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVMatrix@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[eax+10h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetBackendType@PathBuilderRecording@gfx@mozilla@@UBE?AW4BackendType@23@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '6']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetBackendType@PathRecording@gfx@mozilla@@UBE?AW4BackendType@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '6']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetBounds@PathRecording@gfx@mozilla@@UBE?AU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVMatrix@23@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[eax+18h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
call ['??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetFillRule@PathRecording@gfx@mozilla@@UBE?AW4FillRule@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['al,', '[eax+20h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetName@RecordedPathDestruction@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_0BB@OFOPLBGI@Path?5Destruction?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetObjectRef@RecordedPathDestruction@gfx@mozilla@@UBE?AUReferencePtr@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[eax+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetStrokedBounds@PathRecording@gfx@mozilla@@UBE?AU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUStrokeOptions@23@ABVMatrix@23@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+1Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?OutputSimpleEventInfo@RecordedEvent@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?PlayEvent@RecordedEvent@gfx@mozilla@@UBEXPAVTranslator@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?RecordToStream@RecordedEvent@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$AddRefTraits@VPath@gfx@mozilla@@@?$RefPtr@VPath@gfx@mozilla@@@@SAXPAVPath@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsReleaseHelper@?$RefPtr@VPath@gfx@mozilla@@@@CAXPAVPath@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$AddRefTraits@VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@SAXPAVPathBuilder@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsReleaseHelper@?$RefPtr@VPathBuilder@gfx@mozilla@@@@CAXPAVPathBuilder@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$AddRefTraits@VPathBuilderRecording@gfx@mozilla@@@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@SAXPAVPathBuilderRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsReleaseHelper@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@CAXPAVPathBuilderRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$AddRefTraits@VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@SAXPAVPathRecording@gfx@mozilla@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsReleaseHelper@?$RefPtr@VPathRecording@gfx@mozilla@@@@CAXPAVPathRecording@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_6CDC']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
sub ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_6D4C']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_6D10']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '4']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_6D17']
mov ['[ebp+var_18],', '0']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_6D45']
mov ['esi,', 'esp']
push ['1']
mov ['eax,', '[ebp+var_C]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_6D4C']
mov ['[ebp+var_1C],', '0']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_6D80']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
sub ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_6DF0']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_6DB4']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '4']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_6DBB']
mov ['[ebp+var_18],', '0']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_6DE9']
mov ['esi,', 'esp']
push ['1']
mov ['eax,', '[ebp+var_C]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_6DF0']
mov ['[ebp+var_1C],', '0']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?RemoveStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['dword', 'ptr', '[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+arg_0]']
call ['??BReferencePtr@gfx@mozilla@@QBEPAXXZ']
mov ['dword', 'ptr', '[ebp+var_8],', 'eax']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?StreamToSink@PathRecording@gfx@mozilla@@UBEXPAVPathSink@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+20h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?StrokeContainsPoint@PathRecording@gfx@mozilla@@UBE_NABUStrokeOptions@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVMatrix@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['??C?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '20h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_6F92']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_me@_Iterator_base12@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_6FFD']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
cmp ['eax,', '[ebp+var_20]']
jz ['short', 'loc_6FFD']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_28]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_me@_Iterator_base12@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[edx+4]']
mov ['[ecx+4],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_10]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_28]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
dd ['offset', '$LN11_0']
dd ['offset', '$LN8_0']
dd ['0FFFFFFD8h,', '4']
dd ['offset', '$LN9']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 proc near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-18h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 proc near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-28h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-28h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_C+3]']
call ['?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN4_0']
dd ['offset', '$LN3_0']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_C+3]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_14']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_14']
dd ['offset', '$LN3_14']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_C+3]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_11']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN4_11']
dd ['offset', '$LN3_11']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_C+3]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_8']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_8']
dd ['offset', '$LN3_8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Buy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAE_NI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_736D']
xor ['al,', 'al']
jmp ['short', 'loc_73BF']
jmp ['short', 'loc_73BD']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
jnb ['short', 'loc_7384']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xlen@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IBEXXZ']
jmp ['short', 'loc_73BD']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEPAUPathOp@gfx@mozilla@@I@Z']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['[eax+8],', 'edx']
imul ['eax,', '[ebp+arg_0],', '1Ch']
mov ['ecx,', '[ebp+var_4]']
add ['eax,', '[ecx+4]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+0Ch],', 'eax']
mov ['al,', '1']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Change_alloc@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Clrcont@_Iterator_base12@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBEXABV12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_7435']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['esi,', 'eax']
jz ['loc_74BB']
mov ['esi,', 'esp']
push ['0F0h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@']
test ['eax,', 'eax']
jz ['short', 'loc_7463']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_7493']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['0F1h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_7493']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['0F1h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1OO@FHLBLNLK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
push ['offset', '??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '28h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
or ['eax,', '0Fh']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_14]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+var_18]']
jnb ['short', 'loc_752A']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'ecx']
jmp ['short', 'loc_757C']
mov ['eax,', '[ebp+var_18]']
xor ['edx,', 'edx']
mov ['ecx,', '3']
div ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['ecx,', '[edx+18h]']
shr ['ecx,', '1']
cmp ['ecx,', 'eax']
ja ['short', 'loc_7544']
jmp ['short', 'loc_757C']
mov ['edx,', '[ebp+var_14]']
mov ['esi,', '[edx+18h]']
shr ['esi,', '1']
mov ['ecx,', '[ebp+var_14]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
sub ['eax,', 'esi']
mov ['ecx,', '[ebp+var_14]']
cmp ['[ecx+18h],', 'eax']
ja ['short', 'loc_7571']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+18h]']
shr ['eax,', '1']
mov ['ecx,', '[ebp+var_14]']
add ['eax,', '[ecx+18h]']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_757C']
mov ['ecx,', '[ebp+var_14]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
lea ['edx,', '[ebp+var_25]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_30]']
mov ['[ebp+var_20],', 'ecx']
jmp ['short', 'loc_7613']
endp
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
mov ['[ebp-10h],', 'esp']
mov ['edx,', '[ebp+8]']
mov ['[ebp-18h],', 'edx']
mov ['byte', 'ptr', '[ebp-4],', '2']
lea ['eax,', '[ebp-26h]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['[ebp-34h],', 'eax']
mov ['ecx,', '[ebp-18h]']
add ['ecx,', '1']
push ['ecx']
mov ['ecx,', '[ebp-34h]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z']
mov ['[ebp-38h],', 'eax']
mov ['edx,', '[ebp-38h]']
mov ['[ebp-20h],', 'edx']
jmp ['short', 'loc_75FD']
endp
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
push ['0']
push ['1']
mov ['ecx,', '[ebp-14h]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN17']
retn
mov ['dword', 'ptr', '[ebp-4],', '1']
jmp ['short', 'loc_760D']
endp
$LN17		proc near		
mov ['dword', 'ptr', '[ebp-4],', '1']
mov ['eax,', 'offset', '$LN19']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_7623']
endp
$LN19		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
cmp ['dword', 'ptr', '[ebp+0Ch],', '0']
jbe ['short', 'loc_7642']
mov ['eax,', '[ebp+0Ch]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
mov ['ecx,', '[ebp-20h]']
push ['ecx']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
push ['0']
push ['1']
mov ['ecx,', '[ebp-14h]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
lea ['edx,', '[ebp-20h]']
push ['edx']
mov ['eax,', '[ebp-14h]']
add ['eax,', '4']
push ['eax']
lea ['ecx,', '[ebp-27h]']
push ['ecx']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z']
mov ['edx,', '[ebp-14h]']
mov ['eax,', '[ebp-18h]']
mov ['[edx+18h],', 'eax']
mov ['ecx,', '[ebp+0Ch]']
push ['ecx']
mov ['ecx,', '[ebp-14h]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN23']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp-0Ch]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '38h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
dd ['offset', '$LN22']
dd ['offset', '$LN20']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-3Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@M@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@M@std@@@std@@@std@@YAXPAM0AAU?$_Wrap_alloc@V?$allocator@M@std@@@0@@Z']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_16']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN4_16']
dd ['offset', '$LN3_16']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Destroy@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@@Z']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_13']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN4_13']
dd ['offset', '$LN3_13']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Destroy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXPAUPathOp@gfx@mozilla@@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAXPAUPathOp@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_10']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN4_10']
dd ['offset', '$LN3_10']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_18']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN4_17']
dd ['offset', '$LN3_17']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_End@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', 'eax']
call ['??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_791F']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_7942']
jmp ['short', 'loc_7942']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['edx,', '[eax]']
mov ['[ebp+var_C],', 'edx']
lea ['ecx,', '[ebp+var_C]']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
mov ['eax,', '[eax]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN6']
dd ['offset', '$LN5_17']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+14h],', 'ecx']
lea ['edx,', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
add ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?assign@?$char_traits@D@std@@SAXAADABD@Z']
add ['esp,', '8']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
lea ['eax,', '[ebp+var_18]']
push ['eax']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ']
lea ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', 'eax']
call ['??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_7AAF']
lea ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', 'eax']
call ['??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_7A95']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ']
mov ['esi,', '[eax]']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[eax],', 'esi']
lea ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ']
mov ['esi,', '[eax]']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[eax],', 'esi']
jmp ['short', 'loc_7AAD']
lea ['ecx,', '[ebp+var_18]']
call ['??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
mov ['esi,', '[eax]']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[eax],', 'esi']
jmp ['short', 'loc_7AE5']
lea ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['ecx,', 'eax']
call ['??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_7AE5']
lea ['ecx,', '[ebp+var_18]']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
mov ['esi,', '[eax]']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[eax],', 'esi']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
dd ['offset', '$LN11_3']
dd ['offset', '$LN9_1']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z$0 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN4_1']
dd ['offset', '$LN3_1']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_15']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN4_15']
dd ['offset', '$LN3_15']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_12']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN4_12']
dd ['offset', '$LN3_12']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN4_9']
dd ['offset', '$LN3_9']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Freenode@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@PBXPAX@std@@@std@@YAPAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@PBXPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@PBXPAX@std@@@std@@YAPAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['eax,', '[ebp+var_8+2]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@PBXPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?_Myval@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPBXPAU?$_List_node@PBXPAX@2@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PBX@std@@YAPAPBXAAPBX@Z']
add ['esp,', '4']
push ['eax']
lea ['edx,', '[ebp+var_8+1]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PBX@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPBX@Z']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@M@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@M@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_7FC0']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_7FCA']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Gethash@?$_Hash_oper1@$0A@U?$hash@PBX@std@@@std@@QBE?AU?$hash@PBX@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getkeyeq@?$_Hash_oper2@$0A@U?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE?AU?$equal_to@PBX@2@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+Size],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
jnb ['short', 'loc_805F']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_807F']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
jmp ['short', 'loc_80C9']
movzx ['edx,', '[ebp+arg_4]']
test ['edx,', 'edx']
jz ['short', 'loc_80B9']
cmp ['[ebp+arg_0],', '10h']
jnb ['short', 'loc_80B9']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+14h]']
jnb ['short', 'loc_80A0']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+Size],', 'edx']
jmp ['short', 'loc_80A9']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+Size],', 'ecx']
mov ['edx,', '[ebp+Size]']
push ['edx']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
jmp ['short', 'loc_80C9']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_80C9']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
cmp ['[ebp+arg_0],', '0']
jbe ['short', 'loc_80D8']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_80DF']
mov ['[ebp+var_C],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_C]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Grow_to@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IBEII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?capacity@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '1']
sub ['eax,', 'ecx']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_813A']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_8145']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '1']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_8159']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Grow_to@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEII@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '1']
sub ['eax,', 'ecx']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_81B2']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_81BD']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '1']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_81D1']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Hash_seq@std@@YAIPBEI@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '811C9DC5h']
mov ['[ebp+var_8],', '1000193h']
mov ['[ebp+var_C],', '811C9DC5h']
mov ['[ebp+var_10],', '0']
jmp ['short', 'loc_8222']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['short', 'loc_8245']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_10]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
xor ['eax,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'eax']
imul ['ecx,', '[ebp+var_C],', '1000193h']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_8219']
mov ['eax,', '[ebp+var_C]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Hashval@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IBEIABQBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBEIABQBX@Z']
mov ['ecx,', '[ebp+var_4]']
and ['eax,', '[ecx+1Ch]']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+20h]']
cmp ['eax,', '[ebp+var_8]']
ja ['short', 'loc_8296']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+1Ch]']
shr ['edx,', '1']
add ['edx,', '1']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', 'edx']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Init@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
shl ['ecx,', '1']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['edx,', '[ebp+arg_0]']
sub ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+1Ch],', 'edx']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+20h],', 'edx']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '50h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_60]']
mov ['ecx,', '14h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_58],', '0']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['eax,', '[ebp+var_14]']
jnz ['short', 'loc_8379']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_C]']
cmp ['ecx,', '[eax+4]']
jb ['short', 'loc_8379']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+arg_C]']
jnb ['short', 'loc_839A']
mov ['esi,', 'esp']
push ['67Ah']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_C]']
sub ['edx,', '[ecx+4]']
sar ['edx,', '2']
mov ['[ebp+var_18],', 'edx']
cmp ['[ebp+arg_10],', '0']
jnz ['short', 'loc_83B4']
jmp ['loc_8723']
mov ['ecx,', '[ebp+var_14]']
call ['?_Unused_capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_10]']
jnb ['loc_85B2']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+var_14]']
call ['?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
sub ['eax,', 'esi']
cmp ['eax,', '[ebp+arg_10]']
jnb ['short', 'loc_83E6']
mov ['ecx,', '[ebp+var_14]']
call ['?_Xlen@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXXZ']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
add ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Grow_to@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEII@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
lea ['ecx,', '[ebp+var_45]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['[ebp+var_20],', 'eax']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_C]']
sub ['eax,', '[edx+4]']
sar ['eax,', '2']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_28],', '0']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
call ['??$addressof@$$CBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_20]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '1']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z']
mov ['edx,', '[ebp+var_28]']
add ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_20]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z']
jmp ['short', 'loc_850D']
endp
__catch$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0 proc near
cmp ['dword', 'ptr', '[ebp-28h],', '1']
jle ['short', 'loc_84BB']
mov ['eax,', '[ebp-24h]']
mov ['ecx,', '[ebp-20h]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['eax,', '[ebp-20h]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
cmp ['dword', 'ptr', '[ebp-28h],', '0']
jle ['short', 'loc_84E3']
mov ['ecx,', '[ebp-24h]']
mov ['edx,', '[ebp-20h]']
lea ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+18h]']
lea ['edx,', '[eax+ecx*4]']
push ['edx']
mov ['eax,', '[ebp-24h]']
mov ['ecx,', '[ebp-20h]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['ecx,', '[ebp-14h]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['eax,', '[ebp-1Ch]']
push ['eax']
mov ['ecx,', '[ebp-20h]']
push ['ecx']
lea ['edx,', '[ebp-46h]']
push ['edx']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN26_0']
retn
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_851D']
endp
$LN26_0		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ']
add ['eax,', '[ebp+arg_10]']
mov ['[ebp+arg_10],', 'eax']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_8574']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[edx+0Ch]']
sub ['ecx,', '[eax+4]']
sar ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+4]']
push ['eax']
lea ['ecx,', '[ebp+var_47]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_14]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+var_20]']
lea ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+var_14]']
mov ['[edx+0Ch],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_20]']
lea ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_20]']
mov ['[ecx+4],', 'edx']
jmp ['loc_8723']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', '[ebp+arg_C]']
sar ['ecx,', '2']
cmp ['ecx,', '[ebp+arg_10]']
jnb ['loc_86A4']
mov ['edx,', '[ebp+arg_14]']
mov ['eax,', '[edx]']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ebp+arg_C]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
call ['??$addressof@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
sub ['eax,', '[ebp+arg_C]']
sar ['eax,', '2']
mov ['ecx,', '[ebp+arg_10]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z']
jmp ['short', 'loc_864E']
endp
__catch$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$2 proc near
mov ['ecx,', '[ebp-14h]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '[ebp+18h]']
lea ['ecx,', '[edx+eax*4]']
push ['ecx']
mov ['edx,', '[ebp+18h]']
mov ['eax,', '[ebp+14h]']
lea ['ecx,', '[eax+edx*4]']
push ['ecx']
mov ['ecx,', '[ebp-14h]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN28']
retn
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_865E']
endp
$LN28		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+arg_10]']
lea ['edx,', '[eax+ecx*4]']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
shl ['edx,', '2']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', 'edx']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
call ['??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z']
add ['esp,', '0Ch']
jmp ['short', 'loc_8723']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_3C],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_44]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
shl ['ecx,', '2']
mov ['edx,', '[ebp+var_44]']
sub ['edx,', 'ecx']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['edx,', '[ebp+var_44]']
push ['edx']
mov ['eax,', '[ebp+arg_10]']
shl ['eax,', '2']
mov ['ecx,', '[ebp+var_44]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
call ['??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00@Z']
add ['esp,', '0Ch']
lea ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ebp+arg_C]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
call ['??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z']
add ['esp,', '0Ch']
lea ['edx,', '[ebp+var_54]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['[ebp+var_5C],', 'eax']
mov ['eax,', '[ebp+var_5C]']
mov ['[ebp+var_60],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_60]']
call ['??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
mov ['eax,', '[ebp+var_58]']
or ['eax,', '1']
mov ['[ebp+var_58],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_54]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN33']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '60h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['4']
dd ['offset', '$LN32']
dd ['offset', '$LN29']
dd ['0FFFFFFC4h,', '4']
dd ['offset', '$LN30']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$4 proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$5 proc near
lea ['ecx,', '[ebp-54h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-64h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_8830']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
cmp ['[ebp+arg_0],', 'eax']
jb ['short', 'loc_8830']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
mov ['ecx,', '[ebp+var_4]']
add ['eax,', '[ecx+14h]']
cmp ['eax,', '[ebp+arg_0]']
ja ['short', 'loc_8836']
xor ['al,', 'al']
jmp ['short', 'loc_8838']
jmp ['short', 'loc_8838']
mov ['al,', '1']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Inside@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IBE_NPBUPathOp@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+8]']
jnb ['short', 'loc_887E']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
cmp ['eax,', '[ebp+arg_0]']
ja ['short', 'loc_887E']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_8885']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '24h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_30],', 'eax']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_24],', '0']
mov ['[ebp+var_4],', '0']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_28],', 'eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$list@PBXV?$allocator@PBX@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
mov ['[ebp+var_2C],', 'eax']
mov ['edx,', '[ebp+var_2C]']
mov ['[ebp+var_30],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['eax,', '[ebp+var_30]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['ecx,', '[ebp+var_24]']
or ['ecx,', '1']
mov ['[ebp+var_24],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '30h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z$0 proc	near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z$2 proc	near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-28h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_20],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$list@PBXV?$allocator@PBX@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_24],', 'eax']
mov ['edx,', '[ebp+var_24]']
mov ['[ebp+var_28],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['ecx,', '[ebp+var_20]']
or ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0 proc near
lea ['ecx,', '[ebp-1Ch]']
jmp ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Make_iter@?$list@PBXV?$allocator@PBX@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Make_iter@?$list@PBXV?$allocator@PBX@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['edx,', '[ebp+var_8]']
or ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+18h],', '10h']
jb ['short', 'loc_8B3C']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_8B45']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+18h],', '10h']
jb ['short', 'loc_8B8C']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_8B95']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Myval@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPBXPAU?$_List_node@PBXPAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '8']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Orphan_me@_Iterator_base12@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_8C43']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
add ['edx,', '4']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_8C06']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
cmp ['edx,', '[ebp+var_4]']
jz ['short', 'loc_8C06']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
add ['ecx,', '4']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_8BE7']
mov ['edx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[edx],', '0']
jnz ['short', 'loc_8C2F']
mov ['esi,', 'esp']
push ['0C9h']
push ['offset', '??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['dword', 'ptr', 'ds:__imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_8D1E']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_8D1E']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[edx+8]']
cmp ['ecx,', '[eax+4]']
jz ['short', 'loc_8CF2']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_8D01']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+8]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_8D01']
mov ['edx,', '[ebp+var_20]']
mov ['ecx,', '[edx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_8D1C']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax]']
call ['?_Clrcont@_Iterator_base12@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_20]']
mov ['ecx,', '[ecx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
jmp ['short', 'loc_8CC7']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
dd ['offset', '$LN12_2']
dd ['offset', '$LN10_2']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z$0 proc	near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-18h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Orphan_range@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IBEXPAUPathOp@gfx@mozilla@@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_range@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IBEXPAUPathOp@gfx@mozilla@@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
call ['dword', 'ptr', 'ds:__imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_8E71']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_8E71']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+arg_0]']
jb ['short', 'loc_8E45']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx+8]']
jnb ['short', 'loc_8E54']
mov ['ecx,', '[ebp+var_20]']
mov ['ecx,', '[ecx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_8E6F']
mov ['edx,', '[ebp+var_20]']
mov ['ecx,', '[edx]']
call ['?_Clrcont@_Iterator_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
jmp ['short', 'loc_8E23']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN12_0']
dd ['offset', '$LN10_1']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Orphan_range@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IBEXPAUPathOp@gfx@mozilla@@0@Z$0 proc near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-18h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$?_Orphan_range@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IBEXPAUPathOp@gfx@mozilla@@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_range@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IBEXPAUPathOp@gfx@mozilla@@0@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??0_Lockit@std@@QAE@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
call ['dword', 'ptr', 'ds:__imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_8FC5']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_8FC5']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+arg_0]']
jb ['short', 'loc_8F99']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx+8]']
jnb ['short', 'loc_8FA8']
mov ['ecx,', '[ebp+var_20]']
mov ['ecx,', '[ecx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_8FC3']
mov ['edx,', '[ebp+var_20]']
mov ['ecx,', '[edx]']
call ['?_Clrcont@_Iterator_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
jmp ['short', 'loc_8F77']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_18]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
dd ['offset', '$LN12_5']
dd ['offset', '$LN10_4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z$0 proc	near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-18h]']
call ['dword', 'ptr', 'ds:__imp_??1_Lockit@std@@QAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Reallocate@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Reallocate@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXI@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '10h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_20+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEPAUPathOp@gfx@mozilla@@I@Z']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Umove@PAUPathOp@gfx@mozilla@@@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEPAUPathOp@gfx@mozilla@@PAU234@00@Z']
jmp ['short', 'loc_910B']
endp
__catch$?_Reallocate@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXI@Z$0 proc	near
mov ['ecx,', '[ebp+8]']
push ['ecx']
mov ['edx,', '[ebp-18h]']
push ['edx']
lea ['eax,', '[ebp-1Eh]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@I@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN8_2']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_911B']
endp
$LN8_2		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jz ['short', 'loc_9174']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Destroy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXPAUPathOp@gfx@mozilla@@0@Z']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_14]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+4]']
cdq
mov ['ecx,', '1Ch']
idiv ['ecx']
push ['eax']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+4]']
push ['eax']
lea ['ecx,', '[ebp+var_20+1]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@I@Z']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_14]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
imul ['edx,', '[ebp+arg_0],', '1Ch']
add ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+0Ch],', 'edx']
imul ['ecx,', '[ebp+var_1C],', '1Ch']
add ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ebp+var_14]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_18]']
mov ['[eax+4],', 'ecx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$?_Reallocate@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXI@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-24h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Reallocate@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXI@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Reserve@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unused_capacity@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
jnb ['short', 'loc_923E']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ']
sub ['esi,', 'eax']
cmp ['esi,', '[ebp+arg_0]']
jnb ['short', 'loc_9221']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xlen@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IBEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ']
add ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow_to@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IBEII@Z']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Reallocate@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXI@Z']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
movzx ['eax,', '[ebp+arg_0]']
test ['eax,', 'eax']
jnz ['short', 'loc_9278']
jmp ['short', 'loc_92EB']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+18h],', '10h']
jb ['short', 'loc_92EB']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
push ['ecx']
lea ['edx,', '[ebp+var_C+3]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z']
cmp ['[ebp+Size],', '0']
jbe ['short', 'loc_92CA']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '4']
push ['edx']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
add ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
lea ['eax,', '[ebp+var_C+2]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+18h],', '0Fh']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Tidy@?$vector@MV?$allocator@M@std@@@std@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_93A5']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+0Ch]']
sub ['ecx,', '[eax+4]']
sar ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@M@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@M@std@@@std@@QAEXPAMI@Z']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Tidy@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_9445']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Destroy@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+0Ch]']
sub ['ecx,', '[eax+4]']
sar ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Tidy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_94EC']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Destroy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXPAUPathOp@gfx@mozilla@@0@Z']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+0Ch]']
sub ['ecx,', '[eax+4]']
mov ['eax,', 'ecx']
cdq
mov ['ecx,', '1Ch']
idiv ['ecx']
push ['eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@I@Z']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninitialized_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
lea ['eax,', '[eax+edx*4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_19']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
dd ['offset', '$LN4_18']
dd ['offset', '$LN3_18']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
push ['eax']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBEPBUPathOp@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unchecked_end@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_18],', '0CCCCCCCCh']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['eax,', '[ebp+var_10]']
jnz ['short', 'loc_96A5']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_8]']
cmp ['ecx,', '[eax+4]']
jnz ['short', 'loc_96C6']
mov ['esi,', 'esp']
push ['59Fh']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EE@BBMFLDOC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa?$AAn?$AAg@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['esi,', 'eax']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[esi]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['esi,', 'eax']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[esi]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z$0 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unused_capacity@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+8]']
cdq
mov ['ecx,', '1Ch']
idiv ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Unused_capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+8]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+eax+1]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['??A?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['??A?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['offset', '??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Xlength_error@std@@YAXPBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Xlen@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['offset', '??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Xlength_error@std@@YAXPBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Xlen@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['offset', '??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Xlength_error@std@@YAXPBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['offset', '??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Xout_of_range@std@@YAXPBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@D@std@@QAEPADI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEPAUPathOp@gfx@mozilla@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEPAUPathOp@gfx@mozilla@@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@D@std@@QAEPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@D@std@@YAPADIPAD@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEPAUPathOp@gfx@mozilla@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@UPathOp@gfx@mozilla@@@std@@YAPAUPathOp@gfx@mozilla@@IPAU123@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPAV10@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+Size],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_9AD4']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+Size],', 'eax']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+Size]']
jnb ['short', 'loc_9AF0']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+Size],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+arg_0]']
jnz ['short', 'loc_9B17']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z']
jmp ['short', 'loc_9B59']
push ['0']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_9B59']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ']
add ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['490h']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['?length@?$char_traits@D@std@@SAIPBD@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+Size],', '0']
jz ['short', 'loc_9BE6']
push ['47Fh']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_9C19']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
mov ['ecx,', '[ebp+Src]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z']
jmp ['short', 'loc_9C56']
push ['0']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_9C53']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '30h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?clear@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXXZ']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_20]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+var_30]']
mov ['[ebp+var_34],', 'eax']
mov ['[ebp+var_4],', '0']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
mov ['edx,', '[ebp+var_34]']
push ['edx']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_38],', 'eax']
lea ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_3C],', 'eax']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-38h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?begin@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
lea ['ecx,', '[ebp+var_10]']
call ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?begin@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?begin@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@PAUPathOp@gfx@mozilla@@PBU_Container_base12@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?capacity@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+4]']
cdq
mov ['ecx,', '1Ch']
idiv ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?category@error_code@std@@QBEABVerror_category@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?clear@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?clear@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXXZ']
push ['8']
mov ['ecx,', '[ebp+var_4]']
call ['?_Init@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?clear@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['ecx,', '[edx+4]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+8],', '0']
jmp ['short', 'loc_9F78']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx+4]']
jz ['short', 'loc_9FA2']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Freenode@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@@Z']
jmp ['short', 'loc_9F72']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?clear@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Destroy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXPAUPathOp@gfx@mozilla@@0@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['[ecx+8],', 'eax']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?clear@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['[ecx+8],', 'eax']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?construct@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@ABU345@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
push ['edi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['1Ch']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_A0A4']
mov ['ecx,', '7']
mov ['esi,', '[ebp+arg_4]']
mov ['edi,', '[ebp+var_8]']
rep ['movsd']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_A0AB']
mov ['[ebp+var_C],', '0']
pop ['edi']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?construct@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@ABV32@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_A107']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_8]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_A10E']
mov ['[ebp+var_C],', '0']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+Size],', '0']
jnz ['short', 'loc_A139']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_A150']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@D@std@@QAEXPADI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@M@std@@@std@@QAEXPAMI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@M@std@@QAEXPAMI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@M@std@@QAEXPAMI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp_?_Syserror_map@std@@YAPBDH@Z']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_A45A']
call ['?generic_category@std@@YAABVerror_category@1@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_A46F']
jmp ['short', 'loc_A46F']
call ['?system_category@std@@YAABVerror_category@1@XZ']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?empty@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBE_NXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+4]']
cmp ['edx,', '[ecx+8]']
jnz ['short', 'loc_A4E2']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_A4E9']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?end@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
lea ['ecx,', '[ebp+var_10]']
call ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?end@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?end@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@PAUPathOp@gfx@mozilla@@PBU_Container_base12@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '7Ch']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_88]']
mov ['ecx,', '1Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_68],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Hashval@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IBEIABQBX@Z']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
lea ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
jmp ['short', 'loc_A611']
lea ['ecx,', '[ebp+var_1C]']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
mov ['eax,', '[ebp+var_14]']
push ['eax']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_End@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
call ['??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['loc_A747']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
call ['??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ']
push ['eax']
call ['?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['loc_A742']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_28],', 'edx']
jmp ['short', 'loc_A66E']
lea ['ecx,', '[ebp+var_1C]']
call ['??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ']
mov ['eax,', '[ebp+var_14]']
push ['eax']
lea ['ecx,', '[ebp+var_34]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_End@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
call ['??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_A6B7']
lea ['ecx,', '[ebp+var_1C]']
call ['??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ']
push ['eax']
call ['?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_A6B5']
jmp ['short', 'loc_A6B7']
jmp ['short', 'loc_A666']
lea ['edx,', '[ebp+var_1C]']
push ['edx']
lea ['ecx,', '[ebp+var_28]']
call ['??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_A6CC']
jmp ['short', 'loc_A747']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
lea ['edx,', '[ebp+var_40]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_6C],', 'eax']
mov ['eax,', '[ebp+var_6C]']
mov ['[ebp+var_70],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_70]']
push ['ecx']
mov ['edx,', '[ebp+var_28]']
push ['edx']
lea ['eax,', '[ebp+var_4C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_74],', 'eax']
mov ['ecx,', '[ebp+var_74]']
mov ['[ebp+var_78],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['edx,', '[ebp+var_78]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z']
mov ['eax,', '[ebp+var_68]']
or ['eax,', '1']
mov ['[ebp+var_68],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_4C]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_40]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_A7BF']
jmp ['loc_A609']
lea ['ecx,', '[ebp+var_58]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
mov ['[ebp+var_7C],', 'eax']
mov ['edx,', '[ebp+var_7C]']
mov ['[ebp+var_80],', 'edx']
mov ['[ebp+var_4],', '2']
mov ['eax,', '[ebp+var_80]']
push ['eax']
lea ['ecx,', '[ebp+var_64]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
mov ['[ebp+var_84],', 'eax']
mov ['edx,', '[ebp+var_84]']
mov ['[ebp+var_88],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['eax,', '[ebp+var_88]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z']
mov ['ecx,', '[ebp+var_68]']
or ['ecx,', '1']
mov ['[ebp+var_68],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_64]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_58]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN22_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '88h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
dd ['offset', '$LN21_0']
dd ['offset', '$LN18']
dd ['0FFFFFFD8h,', '4']
dd ['offset', '$LN19_0']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z$0 proc near
lea ['ecx,', '[ebp-40h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z$1 proc near
lea ['ecx,', '[ebp-4Ch]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z$3 proc near
lea ['ecx,', '[ebp-58h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z$4 proc near
lea ['ecx,', '[ebp-64h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-84h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?category@error_code@std@@QBEABVerror_category@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??8error_category@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_A8A5']
mov ['ecx,', '[ebp+arg_0]']
call ['?value@error_code@std@@QBEHXZ']
cmp ['eax,', '[ebp+arg_4]']
jnz ['short', 'loc_A8A5']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_A8AC']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', 'eax']
call ['??8error_condition@std@@QBE_NABV01@@Z']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '70h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_7C]']
mov ['ecx,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4C],', '0']
mov ['[ebp+var_4],', '1']
push ['2B4h']
push ['offset', '??_C@_1IK@IMDFCBHM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
lea ['eax,', '[ebp+arg_10]']
push ['eax']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_50],', 'eax']
mov ['ecx,', '[ebp+var_50]']
mov ['[ebp+var_54],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_18],', 'esp']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_58],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z']
add ['esp,', '20h']
lea ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
mov ['[ebp+var_5C],', 'eax']
mov ['ecx,', '[ebp+var_5C]']
mov ['[ebp+var_60],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['edx,', '[ebp+var_4C]']
or ['edx,', '1']
mov ['[ebp+var_4C],', 'edx']
mov ['eax,', '[ebp+var_60]']
push ['eax']
lea ['ecx,', '[ebp+arg_4]']
call ['??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_AA22']
lea ['edx,', '[ebp+var_34]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
mov ['[ebp+var_64],', 'eax']
mov ['eax,', '[ebp+var_64]']
mov ['[ebp+var_68],', 'eax']
mov ['[ebp+var_4],', '4']
mov ['ecx,', '[ebp+var_4C]']
or ['ecx,', '2']
mov ['[ebp+var_4C],', 'ecx']
mov ['edx,', '[ebp+var_68]']
push ['edx']
lea ['ecx,', '[ebp+arg_10]']
call ['??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_AA22']
mov ['[ebp+var_6C],', '1']
jmp ['short', 'loc_AA29']
mov ['[ebp+var_6C],', '0']
mov ['cl,', 'byte', 'ptr', '[ebp+var_6C]']
mov ['[ebp+var_19],', 'cl']
mov ['[ebp+var_4],', '3']
mov ['edx,', '[ebp+var_4C]']
and ['edx,', '2']
jz ['short', 'loc_AA4A']
and ['[ebp+var_4C],', '0FFFFFFFDh']
lea ['ecx,', '[ebp+var_34]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '1']
mov ['eax,', '[ebp+var_4C]']
and ['eax,', '1']
jz ['short', 'loc_AA65']
and ['[ebp+var_4C],', '0FFFFFFFEh']
lea ['ecx,', '[ebp+var_28]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
movzx ['ecx,', '[ebp+var_19]']
test ['ecx,', 'ecx']
jz ['short', 'loc_AAB2']
mov ['ecx,', '[ebp+var_10]']
call ['?clear@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEXXZ']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ']
mov ['eax,', '[ebp+var_4C]']
or ['eax,', '4']
mov ['[ebp+var_4C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_10]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_AB5B']
jmp ['loc_AB40']
lea ['ecx,', '[ebp+arg_10]']
push ['ecx']
lea ['ecx,', '[ebp+arg_4]']
call ['??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_AAF4']
sub ['esp,', '0Ch']
mov ['eax,', 'esp']
mov ['[ebp+var_38],', 'esp']
push ['0']
push ['eax']
lea ['ecx,', '[ebp+arg_4]']
call ['??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z']
mov ['[ebp+var_70],', 'eax']
lea ['ecx,', '[ebp+var_44]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z']
mov ['[ebp+var_74],', 'eax']
lea ['ecx,', '[ebp+var_44]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
jmp ['short', 'loc_AAB2']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_48],', 'esp']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_78],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z']
mov ['[ebp+var_7C],', 'eax']
mov ['ecx,', '[ebp+var_4C]']
or ['ecx,', '4']
mov ['[ebp+var_4C],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_10]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_AB5B']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_10]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '7Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$0 proc near
lea ['ecx,', '[ebp+18h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$1 proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$2 proc near
mov ['ecx,', '[ebp-14h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$4 proc near
mov ['eax,', '[ebp-4Ch]']
and ['eax,', '1']
jz ['$LN14']
and ['dword', 'ptr', '[ebp-4Ch],', '0FFFFFFFEh']
lea ['ecx,', '[ebp-28h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
retn
endp
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$5 proc near
mov ['eax,', '[ebp-4Ch]']
and ['eax,', '2']
jz ['$LN16_0']
and ['dword', 'ptr', '[ebp-4Ch],', '0FFFFFFFDh']
lea ['ecx,', '[ebp-34h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-78h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '3Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_48]']
mov ['ecx,', '0Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_30],', '0']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_4]']
call ['??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBEABQBXXZ']
push ['eax']
call ['?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Hashval@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IBEIABQBX@Z']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
push ['eax']
sub ['esp,', '0Ch']
mov ['esi,', 'esp']
mov ['[ebp+var_18],', 'esp']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_1C],', 'esp']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_34],', 'eax']
push ['esi']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_3C],', 'eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_20],', 'esp']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_40],', 'eax']
lea ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_44]']
mov ['[ebp+var_48],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['edx,', '[ebp+var_48]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['eax,', '[ebp+var_30]']
or ['eax,', '1']
mov ['[ebp+var_30],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '48h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z$0 proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z$4 proc near
lea ['ecx,', '[ebp-2Ch]']
jmp ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-48h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '6Ch']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_78]']
mov ['ecx,', '1Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_38],', '0']
lea ['edx,', '[ebp+var_38]']
push ['edx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_40],', 'esp']
lea ['eax,', '[ebp+var_20]']
push ['eax']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_60],', 'eax']
mov ['ecx,', '[ebp+var_60]']
mov ['[ebp+var_64],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_44],', 'esp']
lea ['edx,', '[ebp+var_2C]']
push ['edx']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_68],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
call ['??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z']
add ['esp,', '1Ch']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_48],', 'esp']
lea ['eax,', '[ebp+var_20]']
push ['eax']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_6C],', 'eax']
mov ['ecx,', '[ebp+var_6C]']
mov ['[ebp+var_70],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_4C],', 'esp']
lea ['edx,', '[ebp+var_2C]']
push ['edx']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_74],', 'eax']
lea ['eax,', '[ebp+var_58]']
push ['eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z']
mov ['[ebp+var_78],', 'eax']
lea ['ecx,', '[ebp+var_58]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_38]']
mov ['[ebp+var_5C],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_5C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '78h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
dd ['offset', '$LN12_3']
dd ['offset', '$LN9_0']
dd ['0FFFFFFC8h,', '4']
dd ['offset', '$LN10_3']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z$0 proc near
lea ['ecx,', '[ebp-2Ch]']
jmp ['??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z$1 proc near
mov ['ecx,', '[ebp-40h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z$3 proc near
mov ['ecx,', '[ebp-48h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-74h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_AED9']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+Dst],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_AF29']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
sub ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
ja ['short', 'loc_AF45']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
jmp ['short', 'loc_AF8B']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_AF8B']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
add ['eax,', '[ebp+arg_0]']
mov ['[ebp+Dst],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['?move@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '24h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_30],', 'eax']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_20],', '0']
mov ['[ebp+var_4],', '0']
sub ['esp,', '0Ch']
mov ['eax,', 'esp']
mov ['[ebp+var_18],', 'esp']
push ['0']
push ['eax']
lea ['ecx,', '[ebp+arg_4]']
call ['??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_28]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Freenode@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@@Z']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_1C],', 'esp']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$list@PBXV?$allocator@PBX@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
mov ['[ebp+var_30],', 'eax']
mov ['edx,', '[ebp+var_20]']
or ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '30h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z$0 proc	near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-28h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?forget@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_C],', '0']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?swap@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAEXAAPAVPathBuilderRecording@gfx@mozilla@@@Z']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAE@PAVPathBuilderRecording@gfx@mozilla@@@Z']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
dd ['offset', '$LN6_1']
dd ['offset', '$LN5_20']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?forget@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_C],', '0']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?swap@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAEXAAPAVPathRecording@gfx@mozilla@@@Z']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@PAVPathRecording@gfx@mozilla@@@Z']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
dd ['offset', '$LN6_4']
dd ['offset', '$LN5_24']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?generic_category@std@@YAABVerror_category@1@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?get@?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?get@?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?get@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QBEPAVPathBuilderRecording@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_18],', '0']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_14],', 'esp']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_18]']
or ['ecx,', '1']
mov ['[ebp+var_18],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0 proc	near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?length@?$char_traits@D@std@@SAIPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_B302']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_B311']
mov ['edx,', '[ebp+Str]']
push ['edx']
call ['_strlen']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAIABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@SAIABV?$allocator@UPathOp@gfx@mozilla@@@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator@D@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
or ['eax,', '0FFFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator@UPathOp@gfx@mozilla@@@std@@QBEIXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '9249249h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QBEIXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '3FFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAIABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@_Alloc_max_size@std@@SAIHABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@D@std@@QBEIXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator_traits@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@SAIABV?$allocator@UPathOp@gfx@mozilla@@@2@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@UPathOp@gfx@mozilla@@@std@@QBEIXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@2@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QBEIXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '1']
ja ['short', 'loc_B4A3']
mov ['[ebp+var_10],', '1']
jmp ['short', 'loc_B4AC']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBEIXZ']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+Str],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_C],', '0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp_?_Syserror_map@std@@YAPBDH@Z']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_B579']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+Str],', 'ecx']
jmp ['short', 'loc_B580']
mov ['[ebp+Str],', 'offset', '??_C@_0O@BFJCFAAK@unknown?5error?$AA@']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_C]']
or ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_4],', '1']
jnz ['short', 'loc_B5ED']
push ['offset', '??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_B609']
jmp ['short', 'loc_B609']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+Str],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_C],', '0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp_?_Winerror_map@std@@YAPBDH@Z']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_B665']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+Str],', 'ecx']
jmp ['short', 'loc_B66C']
mov ['[ebp+Str],', 'offset', '??_C@_0O@BFJCFAAK@unknown?5error?$AA@']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_C]']
or ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+Size],', '0']
jnz ['short', 'loc_B6B2']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_B6D3']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?name@_Generic_error_category@std@@UBEPBDXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_07DCLBNMLN@generic?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?name@_Iostream_error_category@std@@UBEPBDXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_08LLGCOLLL@iostream?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?name@_System_error_category@std@@UBEPBDXZ proc	near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_06FHFOAHML@system?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?pointer_to@?$pointer_traits@PBUPathOp@gfx@mozilla@@@std@@SAPBUPathOp@gfx@mozilla@@ABU345@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$addressof@$$CBUPathOp@gfx@mozilla@@@std@@YAPBUPathOp@gfx@mozilla@@ABU123@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?push_back@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXABUPathOp@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$addressof@$$CBUPathOp@gfx@mozilla@@@std@@YAPBUPathOp@gfx@mozilla@@ABU123@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Inside@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IBE_NPBUPathOp@gfx@mozilla@@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['loc_B807']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$addressof@$$CBUPathOp@gfx@mozilla@@@std@@YAPBUPathOp@gfx@mozilla@@ABU123@@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
sub ['eax,', '[ecx+4]']
cdq
mov ['ecx,', '1Ch']
idiv ['ecx']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+8]']
cmp ['ecx,', '[eax+0Ch]']
jnz ['short', 'loc_B7BB']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['?_Reserve@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXI@Z']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Orphan_range@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IBEXPAUPathOp@gfx@mozilla@@0@Z']
imul ['eax,', '[ebp+var_8],', '1Ch']
mov ['ecx,', '[ebp+var_4]']
add ['eax,', '[ecx+4]']
push ['eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$construct@UPathOp@gfx@mozilla@@AAU123@@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@AAU234@@Z']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
add ['eax,', '1Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
jmp ['short', 'loc_B862']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+8]']
cmp ['ecx,', '[eax+0Ch]']
jnz ['short', 'loc_B81F']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['?_Reserve@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXI@Z']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Orphan_range@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IBEXPAUPathOp@gfx@mozilla@@0@Z']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
lea ['eax,', '[ebp+var_C+2]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$construct@UPathOp@gfx@mozilla@@ABU123@@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@ABU234@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
add ['edx,', '1Ch']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+8],', 'edx']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBE?AU12@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
call ['?select_on_container_copy_construction@?$allocator_traits@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@SA?AV?$allocator@UPathOp@gfx@mozilla@@@2@ABV32@@Z']
add ['esp,', '8']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?select_on_container_copy_construction@?$allocator@UPathOp@gfx@mozilla@@@std@@QBE?AV12@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$allocator@UPathOp@gfx@mozilla@@@std@@QAE@ABV01@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@SA?AV?$allocator@UPathOp@gfx@mozilla@@@2@ABV32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['?select_on_container_copy_construction@?$allocator@UPathOp@gfx@mozilla@@@std@@QBE?AV12@XZ']
mov ['eax,', '[ebp+arg_0]']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+14h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?size@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?size@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
sub ['eax,', '[ecx+4]']
cdq
mov ['ecx,', '1Ch']
idiv ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?swap@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAEXAAPAVPathBuilderRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?swap@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAEXAAPAVPathRecording@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?system_category@std@@YAABVerror_category@1@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?take@?$already_AddRefed@VPath@gfx@mozilla@@@@QAEPAVPath@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?take@?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAEPAVPathBuilder@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?take@?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAEPAVPathBuilderRecording@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?take@?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAEPAVPathRecording@gfx@mozilla@@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?value@error_code@std@@QBEHXZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?value@error_condition@std@@QBEHXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_hypot		proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
sub ['esp,', '8']
movsd ['xmm0,', '[ebp+arg_8]']
movsd ['[esp+0Ch+var_C],', 'xmm0']
sub ['esp,', '8']
movsd ['xmm0,', '[ebp+arg_0]']
movsd ['[esp+14h+var_14],', 'xmm0']
call ['dword', 'ptr', 'ds:__imp___hypot']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0']
dd ['offset', '__unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1']
dd ['offset', '__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0']
dd ['offset', '__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0']
dd ['2', 'dup(0)']
dd ['offset', '__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1']
dd ['0FFFFFFFFh,', '0']
dd ['1,', '0']
dd ['1,', '0']
dd ['offset', '__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
dd ['2']
dd ['offset', '__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
dd ['3', 'dup(0)']
dd ['1']
dd ['offset', '__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4']
dd ['2', 'dup(0)']
dd ['3,', '1']
dd ['offset', '__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z$1']
dd ['offset', '__unwindtable$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindtable$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?CopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$??1PathRecording@gfx@mozilla@@UAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?Finish@PathBuilderRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VPath@gfx@mozilla@@@@XZ']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindfunclet$??1PathRecording@gfx@mozilla@@UAE@XZ$0']
align ['8']
dd ['offset', '__unwindfunclet$??1PathRecording@gfx@mozilla@@UAE@XZ$1']
dd ['1']
dd ['offset', '__unwindfunclet$??1PathRecording@gfx@mozilla@@UAE@XZ$2']
dd ['2']
dd ['offset', '__unwindfunclet$??1PathRecording@gfx@mozilla@@UAE@XZ$3']
dd ['3']
dd ['offset', '__unwindfunclet$??1PathRecording@gfx@mozilla@@UAE@XZ$4']
dd ['offset', '__unwindfunclet$?Finish@PathBuilderRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VPath@gfx@mozilla@@@@XZ$3']
align ['10h']
dd ['offset', '__unwindfunclet$?Finish@PathBuilderRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VPath@gfx@mozilla@@@@XZ$0']
dd ['1']
dd ['offset', '__unwindfunclet$?Finish@PathBuilderRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VPath@gfx@mozilla@@@@XZ$1']
align ['10h']
dd ['offset', '__unwindfunclet$?Finish@PathBuilderRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VPath@gfx@mozilla@@@@XZ$1']
dd ['3']
dd ['offset', '__unwindfunclet$?Finish@PathBuilderRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VPath@gfx@mozilla@@@@XZ$2']
dd ['offset', '__unwindfunclet$?CopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$5']
align ['8']
dd ['offset', '__unwindfunclet$?CopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$0']
dd ['1']
dd ['offset', '__unwindfunclet$?CopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$1']
align ['8']
dd ['offset', '__unwindfunclet$?CopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$1']
dd ['3']
dd ['offset', '__unwindfunclet$?CopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$2']
dd ['3']
dd ['offset', '__unwindfunclet$?CopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$3']
dd ['5']
dd ['offset', '__unwindfunclet$?CopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$4']
dd ['offset', '__unwindfunclet$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z$8']
align ['10h']
dd ['offset', '__unwindfunclet$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z$0']
dd ['1']
dd ['offset', '__unwindfunclet$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z$1']
align ['10h']
dd ['offset', '__unwindfunclet$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z$1']
dd ['3']
dd ['offset', '__unwindfunclet$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z$2']
dd ['3']
dd ['offset', '__unwindfunclet$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z$3']
dd ['5']
dd ['offset', '__unwindfunclet$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z$4']
dd ['6']
dd ['offset', '__unwindfunclet$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z$6']
dd ['5']
dd ['offset', '__unwindfunclet$?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z$7']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$??0?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@ABV01@@Z$0']
dd ['offset', '__catchsym$??0?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@ABV01@@Z$5']
dd ['offset', '__unwindfunclet$??0?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@ABV01@@Z$2']
dd ['4', 'dup(0)']
dd ['offset', '__unwindtable$??0?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@ABV01@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??0?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@ABV01@@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$??4?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEAAV01@ABV01@@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$??4?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEAAV01@ABV01@@Z$2']
dd ['offset', '__unwindtable$??4?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEAAV01@ABV01@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??4?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEAAV01@ABV01@@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$?_Reallocate@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXI@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$?_Reallocate@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXI@Z$2']
dd ['offset', '__unwindtable$?_Reallocate@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXI@Z']
dd ['1']
dd ['offset', '__tryblocktable$?_Reallocate@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXI@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Orphan_range@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IBEXPAUPathOp@gfx@mozilla@@0@Z$0']
dd ['offset', '__unwindtable$?_Orphan_range@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IBEXPAUPathOp@gfx@mozilla@@0@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??1PathBuilderRecording@gfx@mozilla@@UAE@XZ$0']
dd ['offset', '__unwindtable$??1PathBuilderRecording@gfx@mozilla@@UAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0PathRecording@gfx@mozilla@@QAE@PAVPath@12@V?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@W4FillRule@12@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??0PathRecording@gfx@mozilla@@QAE@PAVPath@12@V?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@W4FillRule@12@@Z$1']
dd ['1']
dd ['offset', '__unwindfunclet$??0PathRecording@gfx@mozilla@@QAE@PAVPath@12@V?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@W4FillRule@12@@Z$2']
dd ['2']
dd ['offset', '__unwindfunclet$??0PathRecording@gfx@mozilla@@QAE@PAVPath@12@V?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@W4FillRule@12@@Z$3']
dd ['offset', '__unwindtable$??0PathRecording@gfx@mozilla@@QAE@PAVPath@12@V?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@W4FillRule@12@@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0RecordedPathDestruction@gfx@mozilla@@QAE@PAVPathRecording@12@@Z$0']
dd ['offset', '__unwindtable$??0RecordedPathDestruction@gfx@mozilla@@QAE@PAVPathRecording@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z$0']
dd ['offset', '__unwindtable$?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z$0']
dd ['offset', '__unwindtable$?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z$0']
dd ['offset', '__unwindtable$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0']
dd ['offset', '__unwindtable$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z$2']
dd ['offset', '__unwindtable$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z$0']
align ['8']
dd ['offset', '__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z$4']
dd ['offset', '__unwindtable$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindtable$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z']
align ['20h']
dd ['1']
dd ['offset', '__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$0']
align ['10h']
dd ['offset', '__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$1']
dd ['1']
dd ['offset', '__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$2']
dd ['1']
dd ['offset', '__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$4']
dd ['3']
dd ['offset', '__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$5']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z$0']
align ['8']
dd ['offset', '__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z$1']
align ['10h']
dd ['offset', '__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z$3']
dd ['offset', '__unwindtable$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z$1']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z$3']
dd ['2']
dd ['offset', '__unwindfunclet$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z$4']
dd ['offset', '__unwindtable$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z$0']
dd ['offset', '__unwindtable$?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0']
dd ['offset', '__unwindtable$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0']
dd ['offset', '__unwindtable$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$2']
dd ['2', 'dup(0)']
dd ['offset', '__catch$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0']
dd ['offset', '__unwindtable$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
dd ['2']
dd ['offset', '__tryblocktable$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z']
align ['10h']
dd ['1']
dd ['offset', '__catchsym$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$7']
dd ['2', 'dup(3),', '4,', '1']
dd ['offset', '__catchsym$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$8']
dd ['offset', '__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$4']
dd ['9', 'dup(0)']
dd ['offset', '__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$5']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z$0']
dd ['offset', '__unwindtable$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z$0']
dd ['offset', '__unwindtable$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$MakeAndAddRef@VPathRecording@gfx@mozilla@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@gfx@0@@Z$3']
dd ['0']
dd ['offset', '__unwindfunclet$??$MakeAndAddRef@VPathRecording@gfx@mozilla@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@gfx@0@@Z$0']
dd ['1']
dd ['offset', '__unwindfunclet$??$MakeAndAddRef@VPathRecording@gfx@mozilla@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@gfx@0@@Z$1']
dd ['0']
dd ['offset', '__unwindfunclet$??$MakeAndAddRef@VPathRecording@gfx@mozilla@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@gfx@0@@Z$2']
dd ['offset', '__unwindtable$??$MakeAndAddRef@VPathRecording@gfx@mozilla@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@AAV?$RefPtr@VPath@gfx@mozilla@@@@AAV?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@AAW4FillRule@gfx@0@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@PAUPathOp@gfx@mozilla@@PBU_Container_base12@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@PAUPathOp@gfx@mozilla@@PBU_Container_base12@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE?AV01@H@Z$0']
dd ['offset', '__unwindtable$??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE?AV01@H@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@1@0PAU234@@Z$0']
align ['8']
dd ['offset', '__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@1@0PAU234@@Z$1']
dd ['1']
dd ['offset', '__unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@1@0PAU234@@Z$2']
dd ['offset', '__unwindtable$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@1@0PAU234@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z$1']
dd ['1']
dd ['offset', '__unwindfunclet$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z$2']
dd ['offset', '__unwindtable$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z$0']
align ['10h']
dd ['offset', '__unwindfunclet$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z$1']
dd ['1']
dd ['offset', '__unwindfunclet$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z$2']
dd ['offset', '__unwindtable$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z$0']
dd ['offset', '__unwindtable$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0']
dd ['offset', '__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z$0']
dd ['offset', '__unwindtable$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@PAUPathOp@gfx@mozilla@@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@@std@@YAPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@0@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@PAUPathOp@gfx@mozilla@@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@@std@@YAPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@0@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z$1']
dd ['offset', '__unwindtable$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@PAUPathOp@gfx@mozilla@@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@@std@@YAPAUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@0@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z']
align ['20h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z$0']
align ['10h']
dd ['offset', '__unwindfunclet$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z$1']
dd ['offset', '__unwindtable$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z$1']
dd ['offset', '__unwindtable$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2']
dd ['offset', '__unwindtable$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
align ['10h']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAPBUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@0@@Z$0']
dd ['offset', '__unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAPBUPathOp@gfx@mozilla@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@@0@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@UPathOp@gfx@mozilla@@AAU123@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@AAU234@@Z$0']
dd ['offset', '__unwindtable$??$construct@UPathOp@gfx@mozilla@@AAU123@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@AAU234@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0']
dd ['offset', '__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$??$_Uninit_copy@PBUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PBU123@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$??$_Uninit_copy@PBUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PBU123@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2']
dd ['offset', '__unwindtable$??$_Uninit_copy@PBUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PBU123@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$_Uninit_copy@PBUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PBU123@0PAU123@AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$??$_Uninit_copy@PAUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$??$_Uninit_copy@PAUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2']
dd ['offset', '__unwindtable$??$_Uninit_copy@PAUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$_Uninit_copy@PAUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$??$_Uninit_move@PAUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@U123@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$??$_Uninit_move@PAUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@U123@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2']
dd ['offset', '__unwindtable$??$_Uninit_move@PAUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@U123@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$_Uninit_move@PAUPathOp@gfx@mozilla@@PAU123@V?$allocator@UPathOp@gfx@mozilla@@@std@@U123@@std@@YAPAUPathOp@gfx@mozilla@@PAU123@00AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0']
dd ['0FFFFFFFFh,', '0']
dd ['2', 'dup(1)']
dd ['offset', '__catchsym$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2']
dd ['offset', '__unwindtable$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@UPathOp@gfx@mozilla@@U123@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@$$QAU234@@Z$0']
dd ['offset', '__unwindtable$??$construct@UPathOp@gfx@mozilla@@U123@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@$$QAU234@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z$0']
dd ['offset', '__unwindtable$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
unicode ['0,', '<C:\\Program', 'Files', '(x86)\\Microsoft', 'Visual', 'Studio', '12.0\\VC\\in>']
unicode ['0,', '<clude\\xutility>,0']
assume ['cs:_rdata']
public ['??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@']
unicode ['0,', '<ITERATOR', 'LIST', 'CORRUPTED!>,0']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4error_category@std@@6B@']
public ['??_7error_category@std@@6B@']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z']
assume ['cs:_rdata']
dd ['offset', '??_R4_Generic_error_category@std@@6B@']
public ['??_7_Generic_error_category@std@@6B@']
dd ['offset', '?name@_Generic_error_category@std@@UBEPBDXZ']
dd ['offset', '?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
dd ['offset', '?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z']
assume ['cs:_rdata']
public ['??_C@_07DCLBNMLN@generic?$AA@']
assume ['cs:_rdata']
public ['??_C@_0O@BFJCFAAK@unknown?5error?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4_Iostream_error_category@std@@6B@']
public ['??_7_Iostream_error_category@std@@6B@']
dd ['offset', '?name@_Iostream_error_category@std@@UBEPBDXZ']
dd ['offset', '?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
dd ['offset', '?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z']
assume ['cs:_rdata']
public ['??_C@_08LLGCOLLL@iostream?$AA@']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4_System_error_category@std@@6B@']
public ['??_7_System_error_category@std@@6B@']
dd ['offset', '?name@_System_error_category@std@@UBEPBDXZ']
dd ['offset', '?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
dd ['offset', '?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z']
assume ['cs:_rdata']
public ['??_C@_06FHFOAHML@system?$AA@']
align ['4']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
assume ['cs:_rdata']
public ['??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@']
assume ['cs:_rdata']
public ['??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@']
unicode ['0,', '<"Standard', 'C++', 'Libraries', 'Invalid', 'Argument"', '&&', '0>,0']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
unicode ['0,', '<%s>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@']
unicode ['0,', '<"invalid', 'argument">,0']
align ['10h']
assume ['cs:_rdata']
dd ['offset', '??_R4PathSink@gfx@mozilla@@6B@']
public ['??_7PathSink@gfx@mozilla@@6B@']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
assume ['cs:_rdata']
dd ['offset', '??_R4PathBuilder@gfx@mozilla@@6B@']
public ['??_7PathBuilder@gfx@mozilla@@6B@']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
assume ['cs:_rdata']
dd ['offset', '??_R4PathBuilderRecording@gfx@mozilla@@6B@']
public ['??_7PathBuilderRecording@gfx@mozilla@@6B@']
dd ['offset', '?MoveTo@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
dd ['offset', '?LineTo@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
dd ['offset', '?BezierTo@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@00@Z']
dd ['offset', '?QuadraticBezierTo@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0@Z']
dd ['offset', '?Close@PathBuilderRecording@gfx@mozilla@@UAEXXZ']
dd ['offset', '?Arc@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@MMM_N@Z']
dd ['offset', '?CurrentPoint@PathBuilderRecording@gfx@mozilla@@UBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@XZ']
dd ['offset', '?Finish@PathBuilderRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VPath@gfx@mozilla@@@@XZ']
dd ['offset', '?GetBackendType@PathBuilderRecording@gfx@mozilla@@UBE?AW4BackendType@23@XZ']
assume ['cs:_rdata']
dd ['offset', '??_R4PathRecording@gfx@mozilla@@6B@']
public ['??_7PathRecording@gfx@mozilla@@6B@']
dd ['offset', '?GetBackendType@PathRecording@gfx@mozilla@@UBE?AW4BackendType@23@XZ']
dd ['offset', '?CopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z']
dd ['offset', '?TransformedCopyToBuilder@PathRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@ABVMatrix@23@W4FillRule@23@@Z']
dd ['offset', '?ContainsPoint@PathRecording@gfx@mozilla@@UBE_NABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVMatrix@23@@Z']
dd ['offset', '?StrokeContainsPoint@PathRecording@gfx@mozilla@@UBE_NABUStrokeOptions@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVMatrix@23@@Z']
dd ['offset', '?GetBounds@PathRecording@gfx@mozilla@@UBE?AU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVMatrix@23@@Z']
dd ['offset', '?GetStrokedBounds@PathRecording@gfx@mozilla@@UBE?AU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUStrokeOptions@23@ABVMatrix@23@@Z']
dd ['offset', '?StreamToSink@PathRecording@gfx@mozilla@@UBEXPAVPathSink@23@@Z']
dd ['offset', '?GetFillRule@PathRecording@gfx@mozilla@@UBE?AW4FillRule@23@XZ']
dd ['offset', '?ComputeLength@Path@gfx@mozilla@@UAEMXZ']
dd ['offset', '?ComputePointAtLength@Path@gfx@mozilla@@UAE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@MPAU423@@Z']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedEvent@gfx@mozilla@@6B@']
public ['??_7RecordedEvent@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedEvent@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedEvent@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedEvent@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
dd ['offset', '??_R4RecordedPathDestruction@gfx@mozilla@@6B@']
public ['??_7RecordedPathDestruction@gfx@mozilla@@6B@']
dd ['offset', '?PlayEvent@RecordedPathDestruction@gfx@mozilla@@UBEXPAVTranslator@23@@Z']
dd ['offset', '?RecordToStream@RecordedPathDestruction@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z']
dd ['offset', '?OutputSimpleEventInfo@RecordedPathDestruction@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
dd ['offset', '?GetName@RecordedPathDestruction@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ']
dd ['offset', '?GetObjectRef@RecordedPathDestruction@gfx@mozilla@@UBE?AUReferencePtr@23@XZ']
dd ['offset', '?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ']
assume ['cs:_rdata']
public ['??_C@_0BB@OFOPLBGI@Path?5Destruction?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
unicode ['0,', '<C:\\Program', 'Files', '(x86)\\Microsoft', 'Visual', 'Studio', '12.0\\VC\\in>']
unicode ['0,', '<clude\\xstring>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
unicode ['0,', '<C:\\Program', 'Files', '(x86)\\Microsoft', 'Visual', 'Studio', '12.0\\VC\\in>']
unicode ['0,', '<clude\\vector>,0']
assume ['cs:_rdata']
public ['??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
unicode ['0,', '<vector', 'subscript', 'out', 'of', 'range>,0']
assume ['cs:_rdata']
public ['??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
assume ['cs:_rdata']
public ['??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
unicode ['0,', '<"Standard', 'C++', 'Libraries', 'Out', 'of', 'Range"', '&&', '0>,0']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_1BBO@CBMDIAJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?3?$AA?3?$AAg?$AAf?$AAx?$AA?3?$AA?3@']
unicode ['0,', '<std::vector>']
dw ['3Ch']
unicode ['0,', '<class', 'mozilla::gfx::DrawEventRecorderPrivate', '*,class', 'std:>']
unicode ['0,', '<:allocator>']
dw ['3Ch']
unicode ['0,', '<class', 'mozilla::gfx::DrawEventRecorderPrivate', '*>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '[]>,0']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
unicode ['0,', '<"out', 'of', 'range">,0']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_1IK@IMDFCBHM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
unicode ['0,', '<C:\\Program', 'Files', '(x86)\\Microsoft', 'Visual', 'Studio', '12.0\\VC\\in>']
unicode ['0,', '<clude\\xhash>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
unicode ['0,', '<C:\\Program', 'Files', '(x86)\\Microsoft', 'Visual', 'Studio', '12.0\\VC\\in>']
unicode ['0,', '<clude\\list>,0']
assume ['cs:_rdata']
public ['??_C@_1DI@MDELDGPI@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@']
unicode ['0,', '<list', 'iterators', 'incompatible>,0']
assume ['cs:_rdata']
public ['??_C@_1NK@BJPMEIHF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
unicode ['0,', '<std::_List_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_List_simple_types>']
dw ['3Ch']
unicode ['0,', '<void', 'const', '*>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '==>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@']
unicode ['0,', '<vector', 'iterator', 'not', 'dereferencable>,0']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_1PE@HJGPOFJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
unicode ['0,', '<std::_Vector_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_Vector_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_Simple_types>']
dw ['3Ch']
unicode ['0,', '<struct', 'mozilla::gfx::PathOp>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '*>,0']
assume ['cs:_rdata']
public ['??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@']
unicode ['0,', '<vector', 'iterator', 'not', 'incrementable>,0']
assume ['cs:_rdata']
public ['??_C@_1PG@INBDMFAK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
unicode ['0,', '<std::_Vector_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_Vector_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_Simple_types>']
dw ['3Ch']
unicode ['0,', '<struct', 'mozilla::gfx::PathOp>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '++>,0']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@']
assume ['cs:_rdata']
public ['??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@']
assume ['cs:_rdata']
public ['??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@']
unicode ['0,', '<vector', 'iterators', 'incompatible>,0']
assume ['cs:_rdata']
public ['??_C@_1OO@FHLBLNLK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
unicode ['0,', '<std::_Vector_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_Vector_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_Simple_types>']
dw ['3Ch']
unicode ['0,', '<struct', 'mozilla::gfx::PathOp>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::_Compat>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1EC@HILJLMMC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb?$AAl?$AAe@']
unicode ['0,', '<list', 'iterator', 'not', 'dereferencable>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1NI@GGDPCAJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
unicode ['0,', '<std::_List_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_List_simple_types>']
dw ['3Ch']
unicode ['0,', '<void', 'const', '*>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '*>,0']
assume ['cs:_rdata']
public ['??_C@_1EA@DOGAGKDH@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@']
unicode ['0,', '<list', 'iterator', 'not', 'incrementable>,0']
assume ['cs:_rdata']
public ['??_C@_1NK@LJABKBLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
unicode ['0,', '<std::_List_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_List_simple_types>']
dw ['3Ch']
unicode ['0,', '<void', 'const', '*>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '++>,0']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_1EE@BBMFLDOC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa?$AAn?$AAg@']
unicode ['0,', '<list', 'erase', 'iterator', 'outside', 'range>,0']
assume ['cs:_rdata']
public ['??_C@_1CME@JIAKHOAG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAu?$AAn?$AAc@']
unicode ['0,', '<std::vector>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_unchecked_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_List_simple_types>']
dw ['3Ch']
unicode ['0,', '<void', 'const', '*>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<,struct', 'std::_Iterator_base0>']
dw ['3Eh']
unicode ['0,', '<,struct', 'std::_Wrap_alloc>']
dw ['3Ch']
unicode ['0,', '<class', 'std::allocator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_unchecked_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_List_simple_types>']
dw ['3Ch']
unicode ['0,', '<void', 'const', '*>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<,struct', 'std::_Iterator_base0>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '[]>,0']
assume ['cs:_rdata']
public ['??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@']
unicode ['0,', '<vector', 'insert', 'iterator', 'outside', 'range>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@']
unicode ['0,', '<vector', 'iterator', '+', 'offset', 'out', 'of', 'range>,0']
assume ['cs:_rdata']
public ['??_C@_1BNG@JIGEKGDI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
unicode ['0,', '<std::_Vector_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_Vector_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_Simple_types>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_unchecked_const_iterator>']
dw ['3Ch']
unicode ['0,', '<class', 'std::_List_val>']
dw ['3Ch']
unicode ['0,', '<struct', 'std::_List_simple_types>']
dw ['3Ch']
unicode ['0,', '<void', 'const', '*>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<,struct', 'std::_Iterator_base0>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<', '>']
dw ['3Eh']
unicode ['0,', '<::operator', '+=>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
unicode ['0,', '<invalid', 'null', 'pointer>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
unicode ['0,', '<invalid', 'iterator', 'range>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
unicode ['0,', '<C:\\Program', 'Files', '(x86)\\Microsoft', 'Visual', 'Studio', '12.0\\VC\\in>']
unicode ['0,', '<clude\\xmemory>,0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R4error_category@std@@6B@']
dd ['offset', '??_R0?AVerror_category@std@@@8']
dd ['offset', '??_R3error_category@std@@8']
assume ['cs:_data$r']
public ['??_R0?AVerror_category@std@@@8']
align ['10h']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3error_category@std@@8']
dd ['1']
dd ['offset', '??_R2error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R2error_category@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@error_category@std@@8']
align ['10h']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+4']
dd ['offset', '??_R3error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R4_Generic_error_category@std@@6B@']
dd ['offset', '??_R0?AV_Generic_error_category@std@@@8']
dd ['offset', '??_R3_Generic_error_category@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV_Generic_error_category@std@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3_Generic_error_category@std@@8']
dd ['2']
dd ['offset', '??_R2_Generic_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R2_Generic_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@error_category@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@_Generic_error_category@std@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+4']
dd ['offset', '??_R3_Generic_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R4_Iostream_error_category@std@@6B@']
dd ['offset', '??_R0?AV_Iostream_error_category@std@@@8']
dd ['offset', '??_R3_Iostream_error_category@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV_Iostream_error_category@std@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3_Iostream_error_category@std@@8']
dd ['3']
dd ['offset', '??_R2_Iostream_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R2_Iostream_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@_Generic_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@error_category@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@_Iostream_error_category@std@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+4']
dd ['offset', '??_R3_Iostream_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R4_System_error_category@std@@6B@']
dd ['offset', '??_R0?AV_System_error_category@std@@@8']
dd ['offset', '??_R3_System_error_category@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV_System_error_category@std@@@8']
align ['10h']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3_System_error_category@std@@8']
dd ['3']
dd ['offset', '??_R2_System_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R2_System_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@_Generic_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@error_category@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@_System_error_category@std@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+4']
dd ['offset', '??_R3_System_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R4PathSink@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVPathSink@gfx@mozilla@@@8']
dd ['offset', '??_R3PathSink@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVPathSink@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3PathSink@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2PathSink@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2PathSink@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@PathSink@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+4']
dd ['offset', '??_R3PathSink@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@8']
dd ['1,', '4,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+4']
dd ['offset', '??_R3?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@8']
dd ['2']
dd ['offset', '??_R2?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+4']
dd ['offset', '??_R3?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
align ['10h']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+4']
dd ['offset', '??_R3?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
dd ['1']
dd ['offset', '??_R2?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
align ['8']
dd ['4,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+4']
dd ['offset', '??_R3?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4PathBuilder@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVPathBuilder@gfx@mozilla@@@8']
dd ['offset', '??_R3PathBuilder@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVPathBuilder@gfx@mozilla@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3PathBuilder@gfx@mozilla@@8']
dd ['4']
dd ['offset', '??_R2PathBuilder@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2PathBuilder@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@PathSink@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@PathBuilder@gfx@mozilla@@8']
dd ['3,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+4']
dd ['offset', '??_R3PathBuilder@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4PathRecording@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVPathRecording@gfx@mozilla@@@8']
dd ['offset', '??_R3PathRecording@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVPathRecording@gfx@mozilla@@@8']
dd ['0']
assume ['cs:_rdata$r']
public ['??_R3PathRecording@gfx@mozilla@@8']
dd ['4']
dd ['offset', '??_R2PathRecording@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2PathRecording@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@Path@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VPath@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@PathRecording@gfx@mozilla@@8']
dd ['3,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+4']
dd ['offset', '??_R3PathRecording@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@Path@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+4']
dd ['offset', '??_R3Path@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVPath@gfx@mozilla@@@8']
align ['8']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3Path@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2Path@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2Path@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VPath@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@?$RefCounted@VPath@gfx@mozilla@@@mozilla@@8']
dd ['1,', '4,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+4']
dd ['offset', '??_R3?$RefCounted@VPath@gfx@mozilla@@@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$RefCounted@VPath@gfx@mozilla@@@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$RefCounted@VPath@gfx@mozilla@@@mozilla@@8']
dd ['2']
dd ['offset', '??_R2?$RefCounted@VPath@gfx@mozilla@@@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2?$RefCounted@VPath@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$RefCounted@VPath@gfx@mozilla@@@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+4']
dd ['offset', '??_R3?$RefCounted@VPath@gfx@mozilla@@@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@8']
dd ['2', 'dup(0)']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+4']
dd ['offset', '??_R3?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@@8']
align ['10h']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@8']
dd ['1']
dd ['offset', '??_R2?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@8']
dd ['0']
dd ['4,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+4']
dd ['offset', '??_R3?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4PathBuilderRecording@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVPathBuilderRecording@gfx@mozilla@@@8']
dd ['offset', '??_R3PathBuilderRecording@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVPathBuilderRecording@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3PathBuilderRecording@gfx@mozilla@@8']
dd ['5']
dd ['offset', '??_R2PathBuilderRecording@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2PathBuilderRecording@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@PathBuilder@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@PathSink@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@PathBuilderRecording@gfx@mozilla@@8']
dd ['4,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+4']
dd ['offset', '??_R3PathBuilderRecording@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedEvent@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedEvent@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedEvent@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedEvent@gfx@mozilla@@@8']
dd ['0']
assume ['cs:_rdata$r']
public ['??_R3RecordedEvent@gfx@mozilla@@8']
dd ['1']
dd ['offset', '??_R2RecordedEvent@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
dd ['2', 'dup(0)']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+4']
dd ['offset', '??_R3RecordedEvent@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4RecordedPathDestruction@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVRecordedPathDestruction@gfx@mozilla@@@8']
dd ['offset', '??_R3RecordedPathDestruction@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVRecordedPathDestruction@gfx@mozilla@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3RecordedPathDestruction@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2RecordedPathDestruction@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2RecordedPathDestruction@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@RecordedEvent@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@RecordedPathDestruction@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG4896+4']
dd ['offset', '??_R3RecordedPathDestruction@gfx@mozilla@@8']
assume ['cs:_rtc$IMZ']
assume ['cs:_rtc$TMZ']
assume ['cs:_rdata']
public ['__real@00000000']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
extrn ['__purecall:near']
extrn ['??2@YAPAXI@Z:near']
extrn ['??3@YAXPAX@Z:near']
extrn ['_atexit:near']
extrn ['__imp___invalid_parameter:near']
extrn ['__imp_??0_Lockit@std@@QAE@H@Z:near']
extrn ['__imp_??1_Lockit@std@@QAE@XZ:near']
extrn ['__imp__memmove:near']
extrn ['_memcpy:near']
extrn ['_strlen:near']
extrn ['__imp___hypot:near']
extrn ['__imp___CrtDbgReportW:near']
extrn ['__imp_?_Debug_message@std@@YAXPB_W0I@Z:near']
extrn ['__imp_??0_Container_base12@std@@QAE@XZ:near']
extrn ['__imp_??1_Container_base12@std@@QAE@XZ:near']
extrn ['__imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ:near']
extrn ['__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ:near']
extrn ['__imp_?_Xbad_alloc@std@@YAXXZ:near']
extrn ['__imp_?_Xlength_error@std@@YAXPBD@Z:near']
extrn ['__imp_?_Xout_of_range@std@@YAXPBD@Z:near']
extrn ['__imp_??0id@locale@std@@QAE@I@Z:near']
extrn ['??_Eerror_category@std@@UAEPAXI@Z:near']
extrn ['__imp_?_Syserror_map@std@@YAPBDH@Z:near']
extrn ['__imp_?_Winerror_map@std@@YAPBDH@Z:near']
extrn ['??_E_Generic_error_category@std@@UAEPAXI@Z:near']
extrn ['??_E_Iostream_error_category@std@@UAEPAXI@Z:near']
extrn ['??_E_System_error_category@std@@UAEPAXI@Z:near']
extrn ['??_EPathSink@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??1Path@gfx@mozilla@@UAE@XZ:near']
extrn ['?ComputeLength@Path@gfx@mozilla@@UAEMXZ:near']
extrn ['?ComputePointAtLength@Path@gfx@mozilla@@UAE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@MPAU423@@Z:near']
extrn ['??0Path@gfx@mozilla@@IAE@XZ:near']
extrn ['??_EPathBuilder@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_EPathBuilderRecording@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_EPathRecording@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_ERecordedEvent@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?PlayEvent@RecordedPathDestruction@gfx@mozilla@@UBEXPAVTranslator@23@@Z:near']
extrn ['?RecordToStream@RecordedPathDestruction@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z:near']
extrn ['?OutputSimpleEventInfo@RecordedPathDestruction@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:near']
extrn ['??_ERecordedPathDestruction@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['@__security_check_cookie@4:near']
extrn ['__CxxThrowException@8:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_InitBase:near']
extrn ['__RTC_Shutdown:near']
extrn ['___CxxFrameHandler3:near']
extrn ['??_7type_info@@6B@:near']
extrn ['___security_cookie:near']
extrn ['__fltused:near']
end
