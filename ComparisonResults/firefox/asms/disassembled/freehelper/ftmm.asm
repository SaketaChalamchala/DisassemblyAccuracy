;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	A24D7E75AF0CB09FEFD99AA6CC216E5A
; Input	CRC32 :	03E595CC

; File Name   :	D:\compspace\objfiles\firefox\freehelper\ftmm.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRTD"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
$SG7282		db '..\..\..\src\base\ftmm.c',0 ; DATA XREF: _ft_face_get_mm_service+2Ao
		align 4
$SG7305		db 'multi-masters',0    ; DATA XREF: _ft_face_get_mm_service+9Do
		align 4
$SG7320		db '..\..\..\src\base\ftmm.c',0 ; DATA XREF: _FT_Get_Multi_Master+1Eo
		align 4
$SG7331		db '..\..\..\src\base\ftmm.c',0 ; DATA XREF: _FT_Get_MM_Var+1Eo
		align 4
$SG7344		db '..\..\..\src\base\ftmm.c',0
					; DATA XREF: _FT_Set_MM_Design_Coordinates+1Eo
		align 10h
$SG7357		db '..\..\..\src\base\ftmm.c',0
					; DATA XREF: _FT_Set_Var_Design_Coordinates+1Eo
		align 4
$SG7370		db '..\..\..\src\base\ftmm.c',0
					; DATA XREF: _FT_Set_MM_Blend_Coordinates+1Eo
		align 4
$SG7383		db '..\..\..\src\base\ftmm.c',0
					; DATA XREF: _FT_Set_Var_Blend_Coordinates+1Eo
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D4h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Get_Multi_Master
_FT_Get_Multi_Master proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		cmp	[ebp+arg_4], 0
		jnz	short loc_108
		push	offset $SG7320	; "..\\..\\..\\src\\base\\ftmm.c"
		push	4Eh ; 'N'
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		jmp	short loc_151
; ---------------------------------------------------------------------------

loc_108:				; CODE XREF: _FT_Get_Multi_Master+1Cj
		lea	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ft_face_get_mm_service
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_14E
		mov	[ebp+var_4], 6
		mov	edx, [ebp+var_C]
		cmp	dword ptr [edx], 0
		jz	short loc_14E
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		call	eax
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], eax

loc_14E:				; CODE XREF: _FT_Get_Multi_Master+4Bj
					; _FT_Get_Multi_Master+5Aj
		mov	eax, [ebp+var_4]

loc_151:				; CODE XREF: _FT_Get_Multi_Master+32j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN8
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	esi
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Get_Multi_Master endp

; ---------------------------------------------------------------------------
		align 4
$LN8		dd 1			; DATA XREF: _FT_Get_Multi_Master+81o
		dd offset $LN7
$LN7		dd 0FFFFFFF4h, 4	; DATA XREF: .text$mn:00000178o
		dd offset $LN6		; "service"
$LN6		db 'service',0          ; DATA XREF: .text$mn:00000184o
		db 4 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Get_MM_Var
_FT_Get_MM_Var	proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		cmp	[ebp+arg_4], 0
		jnz	short loc_1C8
		push	offset $SG7331	; "..\\..\\..\\src\\base\\ftmm.c"
		push	69h ; 'i'
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		jmp	short loc_213
; ---------------------------------------------------------------------------

loc_1C8:				; CODE XREF: _FT_Get_MM_Var+1Cj
		lea	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ft_face_get_mm_service
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_210
		mov	[ebp+var_4], 6
		mov	edx, [ebp+var_C]
		cmp	dword ptr [edx+0Ch], 0
		jz	short loc_210
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_C]
		mov	eax, [edx+0Ch]
		call	eax
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], eax

loc_210:				; CODE XREF: _FT_Get_MM_Var+4Bj
					; _FT_Get_MM_Var+5Bj
		mov	eax, [ebp+var_4]

loc_213:				; CODE XREF: _FT_Get_MM_Var+32j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN8_0
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	esi
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Get_MM_Var	endp

; ---------------------------------------------------------------------------
		align 4
$LN8_0		dd 1			; DATA XREF: _FT_Get_MM_Var+83o
		dd offset $LN7_0
$LN7_0		dd 0FFFFFFF4h, 4	; DATA XREF: .text$mn:00000238o
		dd offset $LN6_0	; "service"
$LN6_0		db 'service',0          ; DATA XREF: .text$mn:00000244o
		db 4 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Set_MM_Design_Coordinates
_FT_Set_MM_Design_Coordinates proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		cmp	[ebp+arg_8], 0
		jnz	short loc_28B
		push	offset $SG7344	; "..\\..\\..\\src\\base\\ftmm.c"
		push	85h ; '…'
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		jmp	short loc_2DA
; ---------------------------------------------------------------------------

loc_28B:				; CODE XREF: _FT_Set_MM_Design_Coordinates+1Cj
		lea	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ft_face_get_mm_service
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_2D7
		mov	[ebp+var_4], 6
		mov	edx, [ebp+var_C]
		cmp	dword ptr [edx+4], 0
		jz	short loc_2D7
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_C]
		mov	ecx, [eax+4]
		call	ecx
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], eax

loc_2D7:				; CODE XREF: _FT_Set_MM_Design_Coordinates+4Ej
					; _FT_Set_MM_Design_Coordinates+5Ej
		mov	eax, [ebp+var_4]

loc_2DA:				; CODE XREF: _FT_Set_MM_Design_Coordinates+35j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN8_1
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	esi
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Set_MM_Design_Coordinates endp

; ---------------------------------------------------------------------------
		align 4
$LN8_1		dd 1			; DATA XREF: _FT_Set_MM_Design_Coordinates+8Ao
		dd offset $LN7_1
$LN7_1		dd 0FFFFFFF4h, 4	; DATA XREF: .text$mn:00000300o
		dd offset $LN6_1	; "service"
$LN6_1		db 'service',0          ; DATA XREF: .text$mn:0000030Co
		db 0Ch dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Set_Var_Design_Coordinates
_FT_Set_Var_Design_Coordinates proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		cmp	[ebp+arg_8], 0
		jnz	short loc_35B
		push	offset $SG7357	; "..\\..\\..\\src\\base\\ftmm.c"
		push	0A1h ; '¡'
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		jmp	short loc_3AA
; ---------------------------------------------------------------------------

loc_35B:				; CODE XREF: _FT_Set_Var_Design_Coordinates+1Cj
		lea	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ft_face_get_mm_service
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_3A7
		mov	[ebp+var_4], 6
		mov	edx, [ebp+var_C]
		cmp	dword ptr [edx+10h], 0
		jz	short loc_3A7
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_C]
		mov	ecx, [eax+10h]
		call	ecx
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], eax

loc_3A7:				; CODE XREF: _FT_Set_Var_Design_Coordinates+4Ej
					; _FT_Set_Var_Design_Coordinates+5Ej
		mov	eax, [ebp+var_4]

loc_3AA:				; CODE XREF: _FT_Set_Var_Design_Coordinates+35j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN8_2
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	esi
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Set_Var_Design_Coordinates endp

; ---------------------------------------------------------------------------
		align 4
$LN8_2		dd 1			; DATA XREF: _FT_Set_Var_Design_Coordinates+8Ao
		dd offset $LN7_2
$LN7_2		dd 0FFFFFFF4h, 4	; DATA XREF: .text$mn:000003D0o
		dd offset $LN6_2	; "service"
$LN6_2		db 'service',0          ; DATA XREF: .text$mn:000003DCo
		db 0Ch dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Set_MM_Blend_Coordinates
_FT_Set_MM_Blend_Coordinates proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		cmp	[ebp+arg_8], 0
		jnz	short loc_42B
		push	offset $SG7370	; "..\\..\\..\\src\\base\\ftmm.c"
		push	0BDh ; '½'
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		jmp	short loc_47A
; ---------------------------------------------------------------------------

loc_42B:				; CODE XREF: _FT_Set_MM_Blend_Coordinates+1Cj
		lea	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ft_face_get_mm_service
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_477
		mov	[ebp+var_4], 6
		mov	edx, [ebp+var_C]
		cmp	dword ptr [edx+8], 0
		jz	short loc_477
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_C]
		mov	ecx, [eax+8]
		call	ecx
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], eax

loc_477:				; CODE XREF: _FT_Set_MM_Blend_Coordinates+4Ej
					; _FT_Set_MM_Blend_Coordinates+5Ej
		mov	eax, [ebp+var_4]

loc_47A:				; CODE XREF: _FT_Set_MM_Blend_Coordinates+35j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN8_3
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	esi
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Set_MM_Blend_Coordinates endp

; ---------------------------------------------------------------------------
		align 4
$LN8_3		dd 1			; DATA XREF: _FT_Set_MM_Blend_Coordinates+8Ao
		dd offset $LN7_3
$LN7_3		dd 0FFFFFFF4h, 4	; DATA XREF: .text$mn:000004A0o
		dd offset $LN6_3	; "service"
$LN6_3		db 'service',0          ; DATA XREF: .text$mn:000004ACo
		db 0Ch dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Set_Var_Blend_Coordinates
_FT_Set_Var_Blend_Coordinates proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		cmp	[ebp+arg_8], 0
		jnz	short loc_4FB
		push	offset $SG7383	; "..\\..\\..\\src\\base\\ftmm.c"
		push	0DCh ; 'Ü'
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		jmp	short loc_54A
; ---------------------------------------------------------------------------

loc_4FB:				; CODE XREF: _FT_Set_Var_Blend_Coordinates+1Cj
		lea	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ft_face_get_mm_service
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_547
		mov	[ebp+var_4], 6
		mov	edx, [ebp+var_C]
		cmp	dword ptr [edx+8], 0
		jz	short loc_547
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_C]
		mov	ecx, [eax+8]
		call	ecx
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], eax

loc_547:				; CODE XREF: _FT_Set_Var_Blend_Coordinates+4Ej
					; _FT_Set_Var_Blend_Coordinates+5Ej
		mov	eax, [ebp+var_4]

loc_54A:				; CODE XREF: _FT_Set_Var_Blend_Coordinates+35j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN8_4
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	esi
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Set_Var_Blend_Coordinates endp

; ---------------------------------------------------------------------------
		align 4
$LN8_4		dd 1			; DATA XREF: _FT_Set_Var_Blend_Coordinates+8Ao
		dd offset $LN7_4
$LN7_4		dd 0FFFFFFF4h, 4	; DATA XREF: .text$mn:00000570o
		dd offset $LN6_4	; "service"
$LN6_4		db 'service',0          ; DATA XREF: .text$mn:0000057Co
		db 0Ch dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_face_get_mm_service	proc near	; CODE XREF: _FT_Get_Multi_Master+3Cp
					; _FT_Get_MM_Var+3Cp ...

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_5D7
		push	offset $SG7282	; "..\\..\\..\\src\\base\\ftmm.c"
		push	2Fh ; '/'
		push	23h ; '#'
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 23h
		jmp	loc_6A1
; ---------------------------------------------------------------------------

loc_5D7:				; CODE XREF: _ft_face_get_mm_service+28j
		mov	[ebp+var_4], 6
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		and	edx, 100h
		jz	loc_69E

loc_5F0:				; CODE XREF: _ft_face_get_mm_service+F5j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+80h]
		mov	edx, [ecx+20h]
		mov	[ebp+var_8], edx
		cmp	[ebp+var_8], 0FFFFFFFEh
		jnz	short loc_60E
		mov	[ebp+var_8], 0
		jmp	short loc_67F
; ---------------------------------------------------------------------------

loc_60E:				; CODE XREF: _ft_face_get_mm_service+6Fj
		cmp	[ebp+var_8], 0
		jnz	short loc_67F

loc_614:				; CODE XREF: _ft_face_get_mm_service+C5j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+60h]
		mov	[ebp+var_C], ecx
		mov	[ebp+var_10], 0
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		cmp	dword ptr [eax+20h], 0
		jz	short loc_651
		mov	esi, esp
		push	offset $SG7305	; "multi-masters"
		mov	ecx, [ebp+var_C]
		push	ecx
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		mov	ecx, [eax+20h]
		call	ecx
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_10], eax

loc_651:				; CODE XREF: _ft_face_get_mm_service+99j
		mov	edx, [ebp+var_10]
		mov	[ebp+var_8], edx
		xor	eax, eax
		jnz	short loc_614
		cmp	[ebp+var_8], 0
		jz	short loc_669
		mov	ecx, [ebp+var_8]
		mov	[ebp+var_14], ecx
		jmp	short loc_670
; ---------------------------------------------------------------------------

loc_669:				; CODE XREF: _ft_face_get_mm_service+CBj
		mov	[ebp+var_14], 0FFFFFFFEh

loc_670:				; CODE XREF: _ft_face_get_mm_service+D3j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+80h]
		mov	ecx, [ebp+var_14]
		mov	[eax+20h], ecx

loc_67F:				; CODE XREF: _ft_face_get_mm_service+78j
					; _ft_face_get_mm_service+7Ej
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+var_8]
		mov	[edx], eax
		xor	ecx, ecx
		jnz	loc_5F0
		mov	edx, [ebp+arg_4]
		cmp	dword ptr [edx], 0
		jz	short loc_69E
		mov	[ebp+var_4], 0

loc_69E:				; CODE XREF: _ft_face_get_mm_service+56j
					; _ft_face_get_mm_service+101j
		mov	eax, [ebp+var_4]

loc_6A1:				; CODE XREF: _ft_face_get_mm_service+3Ej
		pop	esi
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_face_get_mm_service	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 6B0h
; COMDAT (pick any)
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 6B4h
; COMDAT (pick any)
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _FT_Throw:near	; CODE XREF: _FT_Get_Multi_Master+27p
					; _FT_Get_MM_Var+27p ...
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _FT_Get_Multi_Master+87p
					; _FT_Get_MM_Var+89p ...
		extrn __RTC_CheckEsp:near ; CODE XREF: _FT_Get_Multi_Master+72p
					; _FT_Get_Multi_Master+94p ...
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo


		end
