;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	8221FA964ADBE525ADAAF3D283649312
; Input	CRC32 :	7E1E5DDF

; File Name   :	D:\compspace\objfiles\firefox\freehelper\ftdebug.obj
; Format      :	COFF (X386MAGIC)
; includelib "uuid.lib"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
_ft_trace_toggles dd offset $SG87641	; DATA XREF: _ft_debug_init+125r
		dd offset $SG87642	; "calc"
		dd offset $SG87643	; "memory"
		dd offset $SG87644	; "stream"
		dd offset $SG87645	; "io"
		dd offset $SG87646	; "list"
		dd offset $SG87647	; "init"
		dd offset $SG87648	; "objs"
		dd offset $SG87649	; "outline"
		dd offset $SG87650	; "glyph"
		dd offset $SG87651	; "gloader"
		dd offset $SG87652	; "raster"
		dd offset $SG87653	; "smooth"
		dd offset $SG87654	; "mm"
		dd offset $SG87655	; "raccess"
		dd offset $SG87656	; "synth"
		dd offset $SG87657	; "bitmap"
		dd offset $SG87658	; "cache"
		dd offset $SG87659	; "sfdriver"
		dd offset $SG87660	; "sfobjs"
		dd offset $SG87661	; "ttcmap"
		dd offset $SG87662	; "ttkern"
		dd offset $SG87663	; "ttload"
		dd offset $SG87664	; "ttmtx"
		dd offset $SG87665	; "ttpost"
		dd offset $SG87666	; "ttsbit"
		dd offset $SG87667	; "ttbdf"
		dd offset $SG87668	; "ttdriver"
		dd offset $SG87669	; "ttgload"
		dd offset $SG87670	; "ttinterp"
		dd offset $SG87671	; "ttobjs"
		dd offset $SG87672	; "ttpload"
		dd offset $SG87673	; "ttgxvar"
		dd offset $SG87674	; "t1afm"
		dd offset $SG87675	; "t1driver"
		dd offset $SG87676	; "t1gload"
		dd offset $SG87677	; "t1hint"
		dd offset $SG87678	; "t1load"
		dd offset $SG87679	; "t1objs"
		dd offset $SG87680	; "t1parse"
		dd offset $SG87681	; "t1decode"
		dd offset $SG87682	; "psobjs"
		dd offset $SG87683	; "psconv"
		dd offset $SG87684	; "pshrec"
		dd offset $SG87685	; "pshalgo1"
		dd offset $SG87686	; "pshalgo2"
		dd offset $SG87687	; "cffdriver"
		dd offset $SG87688	; "cffgload"
		dd offset $SG87689	; "cffload"
		dd offset $SG87690	; "cffobjs"
		dd offset $SG87691	; "cffparse"
		dd offset $SG87692	; "cf2blues"
		dd offset $SG87693	; "cf2hints"
		dd offset $SG87694	; "cf2interp"
		dd offset $SG87695	; "t42"
		dd offset $SG87696	; "cidafm"
		dd offset $SG87697	; "ciddriver"
		dd offset $SG87698	; "cidgload"
		dd offset $SG87699	; "cidload"
		dd offset $SG87700	; "cidobjs"
		dd offset $SG87701	; "cidparse"
		dd offset $SG87702	; "winfnt"
		dd offset $SG87703	; "pcfdriver"
		dd offset $SG87704	; "pcfread"
		dd offset $SG87705	; "bdfdriver"
		dd offset $SG87706	; "bdflib"
		dd offset $SG87707	; "pfr"
		dd offset $SG87708	; "otvmodule"
		dd offset $SG87709	; "otvcommon"
		dd offset $SG87710	; "otvbase"
		dd offset $SG87711	; "otvgdef"
		dd offset $SG87712	; "otvgpos"
		dd offset $SG87713	; "otvgsub"
		dd offset $SG87714	; "otvjstf"
		dd offset $SG87715	; "otvmath"
		dd offset $SG87716	; "gxvmodule"
		dd offset $SG87717	; "gxvcommon"
		dd offset $SG87718	; "gxvfeat"
		dd offset $SG87719	; "gxvmort"
		dd offset $SG87720	; "gxvmorx"
		dd offset $SG87721	; "gxvbsln"
		dd offset $SG87722	; "gxvjust"
		dd offset $SG87723	; "gxvkern"
		dd offset $SG87724	; "gxvopbd"
		dd offset $SG87725	; "gxvtrak"
		dd offset $SG87726	; "gxvprop"
		dd offset $SG87727	; "gxvlcar"
		dd offset $SG87728	; "afmodule"
		dd offset $SG87729	; "afhints"
		dd offset $SG87730	; "afcjk"
		dd offset $SG87731	; "aflatin"
		dd offset $SG87732	; "aflatin2"
		dd offset $SG87733	; "afwarp"
		dd offset $SG87734	; "afharfbuzz"
		dd offset $SG87735	; "afglobal"
		align 10h
$SG87641	dd 796E61h		; DATA XREF: .data:_ft_trace_toggleso
$SG87642	db 'calc',0             ; DATA XREF: .data:00000004o
		align 4
$SG87643	db 'memory',0           ; DATA XREF: .data:00000008o
		align 4
$SG87644	db 'stream',0           ; DATA XREF: .data:0000000Co
		align 4
$SG87645	db 'io',0               ; DATA XREF: .data:00000010o
		align 10h
$SG87646	db 'list',0             ; DATA XREF: .data:00000014o
		align 4
$SG87647	db 'init',0             ; DATA XREF: .data:00000018o
		align 10h
$SG87648	db 'objs',0             ; DATA XREF: .data:0000001Co
		align 4
$SG87649	db 'outline',0          ; DATA XREF: .data:00000020o
$SG87650	db 'glyph',0            ; DATA XREF: .data:00000024o
		align 4
$SG87651	db 'gloader',0          ; DATA XREF: .data:00000028o
$SG87652	db 'raster',0           ; DATA XREF: .data:0000002Co
		align 4
$SG87653	db 'smooth',0           ; DATA XREF: .data:00000030o
		align 10h
$SG87654	db 'mm',0               ; DATA XREF: .data:00000034o
		align 4
$SG87655	db 'raccess',0          ; DATA XREF: .data:00000038o
$SG87656	db 'synth',0            ; DATA XREF: .data:0000003Co
		align 4
$SG87657	db 'bitmap',0           ; DATA XREF: .data:00000040o
		align 4
$SG87658	db 'cache',0            ; DATA XREF: .data:00000044o
		align 4
$SG87659	db 'sfdriver',0         ; DATA XREF: .data:00000048o
		align 10h
$SG87660	db 'sfobjs',0           ; DATA XREF: .data:0000004Co
		align 4
$SG87661	db 'ttcmap',0           ; DATA XREF: .data:00000050o
		align 10h
$SG87662	db 'ttkern',0           ; DATA XREF: .data:00000054o
		align 4
$SG87663	db 'ttload',0           ; DATA XREF: .data:00000058o
		align 10h
$SG87664	db 'ttmtx',0            ; DATA XREF: .data:0000005Co
		align 4
$SG87665	db 'ttpost',0           ; DATA XREF: .data:00000060o
		align 10h
$SG87666	db 'ttsbit',0           ; DATA XREF: .data:00000064o
		align 4
$SG87667	db 'ttbdf',0            ; DATA XREF: .data:00000068o
		align 10h
$SG87668	db 'ttdriver',0         ; DATA XREF: .data:0000006Co
		align 4
$SG87669	db 'ttgload',0          ; DATA XREF: .data:00000070o
$SG87670	db 'ttinterp',0         ; DATA XREF: .data:00000074o
		align 10h
$SG87671	db 'ttobjs',0           ; DATA XREF: .data:00000078o
		align 4
$SG87672	db 'ttpload',0          ; DATA XREF: .data:0000007Co
$SG87673	db 'ttgxvar',0          ; DATA XREF: .data:00000080o
$SG87674	db 't1afm',0            ; DATA XREF: .data:00000084o
		align 10h
$SG87675	db 't1driver',0         ; DATA XREF: .data:00000088o
		align 4
$SG87676	db 't1gload',0          ; DATA XREF: .data:0000008Co
$SG87677	db 't1hint',0           ; DATA XREF: .data:00000090o
		align 4
$SG87678	db 't1load',0           ; DATA XREF: .data:00000094o
		align 4
$SG87679	db 't1objs',0           ; DATA XREF: .data:00000098o
		align 4
$SG87680	db 't1parse',0          ; DATA XREF: .data:0000009Co
$SG87681	db 't1decode',0         ; DATA XREF: .data:000000A0o
		align 10h
$SG87682	db 'psobjs',0           ; DATA XREF: .data:000000A4o
		align 4
$SG87683	db 'psconv',0           ; DATA XREF: .data:000000A8o
		align 10h
$SG87684	db 'pshrec',0           ; DATA XREF: .data:000000ACo
		align 4
$SG87685	db 'pshalgo1',0         ; DATA XREF: .data:000000B0o
		align 4
$SG87686	db 'pshalgo2',0         ; DATA XREF: .data:000000B4o
		align 10h
$SG87687	db 'cffdriver',0        ; DATA XREF: .data:000000B8o
		align 4
$SG87688	db 'cffgload',0         ; DATA XREF: .data:000000BCo
		align 4
$SG87689	db 'cffload',0          ; DATA XREF: .data:000000C0o
$SG87690	db 'cffobjs',0          ; DATA XREF: .data:000000C4o
$SG87691	db 'cffparse',0         ; DATA XREF: .data:000000C8o
		align 4
$SG87692	db 'cf2blues',0         ; DATA XREF: .data:000000CCo
		align 10h
$SG87693	db 'cf2hints',0         ; DATA XREF: .data:000000D0o
		align 4
$SG87694	db 'cf2interp',0        ; DATA XREF: .data:000000D4o
		align 4
$SG87695	db 't42',0              ; DATA XREF: .data:000000D8o
$SG87696	db 'cidafm',0           ; DATA XREF: .data:000000DCo
		align 4
$SG87697	db 'ciddriver',0        ; DATA XREF: .data:000000E0o
		align 10h
$SG87698	db 'cidgload',0         ; DATA XREF: .data:000000E4o
		align 4
$SG87699	db 'cidload',0          ; DATA XREF: .data:000000E8o
$SG87700	db 'cidobjs',0          ; DATA XREF: .data:000000ECo
$SG87701	db 'cidparse',0         ; DATA XREF: .data:000000F0o
		align 4
$SG87702	db 'winfnt',0           ; DATA XREF: .data:000000F4o
		align 10h
$SG87703	db 'pcfdriver',0        ; DATA XREF: .data:000000F8o
		align 4
$SG87704	db 'pcfread',0          ; DATA XREF: .data:000000FCo
$SG87705	db 'bdfdriver',0        ; DATA XREF: .data:00000100o
		align 10h
$SG87706	db 'bdflib',0           ; DATA XREF: .data:00000104o
		align 4
$SG87707	db 'pfr',0              ; DATA XREF: .data:00000108o
$SG87708	db 'otvmodule',0        ; DATA XREF: .data:0000010Co
		align 4
$SG87709	db 'otvcommon',0        ; DATA XREF: .data:00000110o
		align 4
$SG87710	db 'otvbase',0          ; DATA XREF: .data:00000114o
$SG87711	db 'otvgdef',0          ; DATA XREF: .data:00000118o
$SG87712	db 'otvgpos',0          ; DATA XREF: .data:0000011Co
$SG87713	db 'otvgsub',0          ; DATA XREF: .data:00000120o
$SG87714	db 'otvjstf',0          ; DATA XREF: .data:00000124o
$SG87715	db 'otvmath',0          ; DATA XREF: .data:00000128o
$SG87716	db 'gxvmodule',0        ; DATA XREF: .data:0000012Co
		align 10h
$SG87717	db 'gxvcommon',0        ; DATA XREF: .data:00000130o
		align 4
$SG87718	db 'gxvfeat',0          ; DATA XREF: .data:00000134o
$SG87719	db 'gxvmort',0          ; DATA XREF: .data:00000138o
$SG87720	db 'gxvmorx',0          ; DATA XREF: .data:0000013Co
$SG87721	db 'gxvbsln',0          ; DATA XREF: .data:00000140o
$SG87722	db 'gxvjust',0          ; DATA XREF: .data:00000144o
$SG87723	db 'gxvkern',0          ; DATA XREF: .data:00000148o
$SG87724	db 'gxvopbd',0          ; DATA XREF: .data:0000014Co
$SG87725	db 'gxvtrak',0          ; DATA XREF: .data:00000150o
$SG87726	db 'gxvprop',0          ; DATA XREF: .data:00000154o
$SG87727	db 'gxvlcar',0          ; DATA XREF: .data:00000158o
$SG87728	db 'afmodule',0         ; DATA XREF: .data:0000015Co
		align 4
$SG87729	db 'afhints',0          ; DATA XREF: .data:00000160o
$SG87730	db 'afcjk',0            ; DATA XREF: .data:00000164o
		align 4
$SG87731	db 'aflatin',0          ; DATA XREF: .data:00000168o
$SG87732	db 'aflatin2',0         ; DATA XREF: .data:0000016Co
		align 4
$SG87733	db 'afwarp',0           ; DATA XREF: .data:00000170o
		align 4
$SG87734	db 'afharfbuzz',0       ; DATA XREF: .data:00000174o
		align 10h
$SG87735	db 'afglobal',0         ; DATA XREF: .data:00000178o
		align 4
; char _SG87739[]
$SG87739	db 'FT2_DEBUG',0        ; DATA XREF: _ft_debug_init+29o
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4D8h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl FT_Message(char *Format, char)
		public _FT_Message
_FT_Message	proc near

ArgList		= dword	ptr -4
Format		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+ArgList], 0CCCCCCCCh
		lea	eax, [ebp+arg_4]
		mov	[ebp+ArgList], eax
		mov	esi, esp
		mov	ecx, [ebp+ArgList]
		push	ecx		; ArgList
		mov	edx, [ebp+Format]
		push	edx		; Format
		call	dword ptr ds:__imp__vprintf
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+ArgList]
		push	eax		; Args
		mov	ecx, [ebp+Format]
		push	ecx		; Format
		push	offset ?buf@?1??FT_Message@@9@9	; Dest
		call	dword ptr ds:__imp__vsprintf
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	offset ?buf@?1??FT_Message@@9@9	; lpOutputString
		call	dword ptr ds:__imp__OutputDebugStringA@4 ; OutputDebugStringA(x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+ArgList], 0
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Message	endp

; ---------------------------------------------------------------------------
		db 0Bh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl FT_Panic(char *Format, char)
		public _FT_Panic
_FT_Panic	proc near

Args		= dword	ptr -4
Format		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+Args], 0CCCCCCCCh
		lea	eax, [ebp+arg_4]
		mov	[ebp+Args], eax
		mov	esi, esp
		mov	ecx, [ebp+Args]
		push	ecx		; Args
		mov	edx, [ebp+Format]
		push	edx		; Format
		push	offset ?buf@?1??FT_Panic@@9@9 ;	Dest
		call	dword ptr ds:__imp__vsprintf
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	offset ?buf@?1??FT_Panic@@9@9 ;	lpOutputString
		call	dword ptr ds:__imp__OutputDebugStringA@4 ; OutputDebugStringA(x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+Args], 0
		mov	esi, esp
		push	1		; Code
		call	dword ptr ds:__imp__exit
_FT_Panic	endp

; ---------------------------------------------------------------------------
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Throw
_FT_Throw	proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		mov	ecx, [ebp+arg_4]
		mov	[ebp+arg_4], ecx
		mov	edx, [ebp+arg_8]
		mov	[ebp+arg_8], edx
		xor	eax, eax
		pop	ebp
		retn
_FT_Throw	endp

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ft_debug_init
_ft_debug_init	proc near

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_24], eax
		mov	[ebp+var_20], eax
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	esi, esp
		push	offset $SG87739	; "FT2_DEBUG"
		call	dword ptr ds:__imp__getenv
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	loc_7E5
		mov	eax, [ebp+var_4]
		mov	[ebp+var_8], eax
		jmp	short loc_644
; ---------------------------------------------------------------------------

loc_63B:				; CODE XREF: _ft_debug_init:loc_689j
					; _ft_debug_init:loc_7E0j
		mov	ecx, [ebp+var_8]
		add	ecx, 1
		mov	[ebp+var_8], ecx

loc_644:				; CODE XREF: _ft_debug_init+51j
		mov	edx, [ebp+var_8]
		movsx	eax, byte ptr [edx]
		test	eax, eax
		jz	loc_7E5
		mov	ecx, [ebp+var_8]
		movsx	edx, byte ptr [ecx]
		cmp	edx, 20h ; ' '
		jz	short loc_689
		mov	eax, [ebp+var_8]
		movsx	ecx, byte ptr [eax]
		cmp	ecx, 9
		jz	short loc_689
		mov	edx, [ebp+var_8]
		movsx	eax, byte ptr [edx]
		cmp	eax, 2Ch ; ','
		jz	short loc_689
		mov	ecx, [ebp+var_8]
		movsx	edx, byte ptr [ecx]
		cmp	edx, 3Bh ; ';'
		jz	short loc_689
		mov	eax, [ebp+var_8]
		movsx	ecx, byte ptr [eax]
		cmp	ecx, 3Dh ; '='
		jnz	short loc_68B

loc_689:				; CODE XREF: _ft_debug_init+73j
					; _ft_debug_init+7Ej ...
		jmp	short loc_63B
; ---------------------------------------------------------------------------

loc_68B:				; CODE XREF: _ft_debug_init+9Fj
		mov	edx, [ebp+var_8]
		mov	[ebp+var_C], edx

loc_691:				; CODE XREF: _ft_debug_init+C7j
		mov	eax, [ebp+var_8]
		movsx	ecx, byte ptr [eax]
		test	ecx, ecx
		jz	short loc_6B1
		mov	edx, [ebp+var_8]
		movsx	eax, byte ptr [edx]
		cmp	eax, 3Ah ; ':'
		jz	short loc_6B1
		mov	ecx, [ebp+var_8]
		add	ecx, 1
		mov	[ebp+var_8], ecx
		jmp	short loc_691
; ---------------------------------------------------------------------------

loc_6B1:				; CODE XREF: _ft_debug_init+B1j
					; _ft_debug_init+BCj
		mov	edx, [ebp+var_8]
		movsx	eax, byte ptr [edx]
		test	eax, eax
		jnz	short loc_6C0
		jmp	loc_7E5
; ---------------------------------------------------------------------------

loc_6C0:				; CODE XREF: _ft_debug_init+D1j
		mov	ecx, [ebp+var_8]
		movsx	edx, byte ptr [ecx]
		cmp	edx, 3Ah ; ':'
		jnz	loc_7E0
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+var_C]
		jbe	loc_7E0
		mov	ecx, [ebp+var_8]
		sub	ecx, [ebp+var_C]
		mov	[ebp+var_18], ecx
		mov	[ebp+var_1C], 0FFFFFFFFh
		mov	[ebp+var_20], 0FFFFFFFFh
		mov	[ebp+var_10], 0
		jmp	short loc_704
; ---------------------------------------------------------------------------

loc_6FB:				; CODE XREF: _ft_debug_init:loc_768j
		mov	edx, [ebp+var_10]
		add	edx, 1
		mov	[ebp+var_10], edx

loc_704:				; CODE XREF: _ft_debug_init+111j
		cmp	[ebp+var_10], 5Fh ; '_'
		jge	short loc_76A
		mov	eax, [ebp+var_10]
		mov	ecx, _ft_trace_toggles[eax*4]
		mov	[ebp+var_24], ecx
		mov	[ebp+var_14], 0
		jmp	short loc_729
; ---------------------------------------------------------------------------

loc_720:				; CODE XREF: _ft_debug_init:loc_749j
		mov	edx, [ebp+var_14]
		add	edx, 1
		mov	[ebp+var_14], edx

loc_729:				; CODE XREF: _ft_debug_init+136j
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_18]
		jge	short loc_74B
		mov	ecx, [ebp+var_24]
		add	ecx, [ebp+var_14]
		movsx	edx, byte ptr [ecx]
		mov	eax, [ebp+var_C]
		add	eax, [ebp+var_14]
		movsx	ecx, byte ptr [eax]
		cmp	edx, ecx
		jz	short loc_749
		jmp	short loc_74B
; ---------------------------------------------------------------------------

loc_749:				; CODE XREF: _ft_debug_init+15Dj
		jmp	short loc_720
; ---------------------------------------------------------------------------

loc_74B:				; CODE XREF: _ft_debug_init+147j
					; _ft_debug_init+15Fj
		mov	edx, [ebp+var_14]
		cmp	edx, [ebp+var_18]
		jnz	short loc_768
		mov	eax, [ebp+var_24]
		add	eax, [ebp+var_14]
		movsx	ecx, byte ptr [eax]
		test	ecx, ecx
		jnz	short loc_768
		mov	edx, [ebp+var_10]
		mov	[ebp+var_20], edx
		jmp	short loc_76A
; ---------------------------------------------------------------------------

loc_768:				; CODE XREF: _ft_debug_init+169j
					; _ft_debug_init+176j
		jmp	short loc_6FB
; ---------------------------------------------------------------------------

loc_76A:				; CODE XREF: _ft_debug_init+120j
					; _ft_debug_init+17Ej
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+var_8]
		movsx	edx, byte ptr [ecx]
		test	edx, edx
		jz	short loc_798
		mov	eax, [ebp+var_8]
		movsx	ecx, byte ptr [eax]
		sub	ecx, 30h ; '0'
		mov	[ebp+var_1C], ecx
		js	short loc_791
		cmp	[ebp+var_1C], 7
		jle	short loc_798

loc_791:				; CODE XREF: _ft_debug_init+1A1j
		mov	[ebp+var_1C], 0FFFFFFFFh

loc_798:				; CODE XREF: _ft_debug_init+193j
					; _ft_debug_init+1A7j
		cmp	[ebp+var_20], 0
		jl	short loc_7E0
		cmp	[ebp+var_1C], 0
		jl	short loc_7E0
		cmp	[ebp+var_20], 0
		jnz	short loc_7D3
		mov	[ebp+var_10], 0
		jmp	short loc_7BC
; ---------------------------------------------------------------------------

loc_7B3:				; CODE XREF: _ft_debug_init+1E7j
		mov	edx, [ebp+var_10]
		add	edx, 1
		mov	[ebp+var_10], edx

loc_7BC:				; CODE XREF: _ft_debug_init+1C9j
		cmp	[ebp+var_10], 5Fh ; '_'
		jge	short loc_7D1
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_1C]
		mov	dword ptr ds:_ft_trace_levels[eax*4], ecx
		jmp	short loc_7B3
; ---------------------------------------------------------------------------

loc_7D1:				; CODE XREF: _ft_debug_init+1D8j
		jmp	short loc_7E0
; ---------------------------------------------------------------------------

loc_7D3:				; CODE XREF: _ft_debug_init+1C0j
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_1C]
		mov	dword ptr ds:_ft_trace_levels[edx*4], eax

loc_7E0:				; CODE XREF: _ft_debug_init+E1j
					; _ft_debug_init+EDj ...
		jmp	loc_63B
; ---------------------------------------------------------------------------

loc_7E5:				; CODE XREF: _ft_debug_init+45j
					; _ft_debug_init+64j ...
		pop	esi
		add	esp, 24h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_debug_init	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 7F4h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; char `FT_Message'::`2'::buf[8192]
?buf@?1??FT_Message@@9@9 db 2000h dup(?) ; DATA	XREF: _FT_Message+36o
					; _FT_Message+4Do
; char `FT_Panic'::`2'::buf[8192]
?buf@?1??FT_Panic@@9@9 db 2000h	dup(?)	; DATA XREF: _FT_Panic+1Co
					; _FT_Panic+33o
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 47F4h
; COMDAT (pick any)
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 47F8h
; COMDAT (pick any)
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ft_trace_levels:near ; DATA XREF: _ft_debug_init+1E0w
					; _ft_debug_init+1F1w
; int __cdecl _vprintf(const char *Format, va_list ArgList)
		extrn __imp__vprintf:near ; CODE XREF: _FT_Message+1Cp
					; DATA XREF: _FT_Message+1Cr
; int __cdecl _vsprintf(char *Dest, const char *Format,	va_list	Args)
		extrn __imp__vsprintf:near ; CODE XREF:	_FT_Message+3Bp
					; _FT_Panic+21p
					; DATA XREF: ...
; void __cdecl __noreturn _exit(int Code)
		extrn __imp__exit:near	; CODE XREF: _FT_Panic+50p
					; DATA XREF: _FT_Panic+50r
; char *__cdecl	_getenv(const char *VarName)
		extrn __imp__getenv:near ; CODE	XREF: _ft_debug_init+2Ep
					; DATA XREF: _ft_debug_init+2Er
; void __stdcall OutputDebugStringA(LPCSTR lpOutputString)
		extrn __imp__OutputDebugStringA@4:near ; CODE XREF: _FT_Message+52p
					; _FT_Panic+38p
					; DATA XREF: ...
		extrn __RTC_CheckEsp:near ; CODE XREF: _FT_Message+27p
					; _FT_Message+46p ...
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo


		end
