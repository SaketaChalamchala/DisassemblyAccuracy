;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	105E55D09F81C48F9424468094BD8271
; Input	CRC32 :	0B5BF2E2

; File Name   :	D:\compspace\objfiles\firefox\freehelper\ftpfr.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRTD"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
$SG7053		db 'pfr-metrics',0      ; DATA XREF: _ft_pfr_check+6Do
$SG7073		db '..\..\..\src\base\ftpfr.c',0 ; DATA XREF: _FT_Get_PFR_Metrics+25o
		align 4
$SG7083		db '..\..\..\src\base\ftpfr.c',0 ; DATA XREF: _FT_Get_PFR_Metrics:loc_1C0o
		align 4
$SG7096		db '..\..\..\src\base\ftpfr.c',0 ; DATA XREF: _FT_Get_PFR_Kerning+1Bo
		align 10h
$SG7098		db '..\..\..\src\base\ftpfr.c',0 ; DATA XREF: _FT_Get_PFR_Kerning+37o
		align 4
$SG7111		db '..\..\..\src\base\ftpfr.c',0 ; DATA XREF: _FT_Get_PFR_Advance+1Bo
		align 4
$SG7113		db '..\..\..\src\base\ftpfr.c',0 ; DATA XREF: _FT_Get_PFR_Advance+3Ao
		align 4
$SG7116		db '..\..\..\src\base\ftpfr.c',0 ; DATA XREF: _FT_Get_PFR_Advance:loc_33Do
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D0h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Get_PFR_Metrics
_FT_Get_PFR_Metrics proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_10E
		push	offset $SG7073	; "..\\..\\..\\src\\base\\ftpfr.c"
		push	35h ; '5'
		push	23h ; '#'
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 23h
		jmp	loc_1DA
; ---------------------------------------------------------------------------

loc_10E:				; CODE XREF: _FT_Get_PFR_Metrics+23j
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ft_pfr_check
		add	esp, 4
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_152
		mov	esi, esp
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax]
		call	ecx
		add	esp, 14h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], eax
		jmp	loc_1D7
; ---------------------------------------------------------------------------

loc_152:				; CODE XREF: _FT_Get_PFR_Metrics+51j
		cmp	[ebp+arg_4], 0
		jz	short loc_164
		mov	edx, [ebp+arg_0]
		movzx	eax, word ptr [edx+44h]
		mov	ecx, [ebp+arg_4]
		mov	[ecx], eax

loc_164:				; CODE XREF: _FT_Get_PFR_Metrics+86j
		cmp	[ebp+arg_8], 0
		jz	short loc_176
		mov	edx, [ebp+arg_0]
		movzx	eax, word ptr [edx+44h]
		mov	ecx, [ebp+arg_8]
		mov	[ecx], eax

loc_176:				; CODE XREF: _FT_Get_PFR_Metrics+98j
		mov	[ebp+var_10], 10000h
		mov	edx, [ebp+var_10]
		mov	[ebp+var_C], edx
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+58h], 0
		jz	short loc_1A4
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+58h]
		mov	eax, [edx+10h]
		mov	[ebp+var_C], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+58h]
		mov	eax, [edx+14h]
		mov	[ebp+var_10], eax

loc_1A4:				; CODE XREF: _FT_Get_PFR_Metrics+BAj
		cmp	[ebp+arg_C], 0
		jz	short loc_1B2
		mov	ecx, [ebp+arg_C]
		mov	edx, [ebp+var_C]
		mov	[ecx], edx

loc_1B2:				; CODE XREF: _FT_Get_PFR_Metrics+D8j
		cmp	[ebp+arg_10], 0
		jz	short loc_1C0
		mov	eax, [ebp+arg_10]
		mov	ecx, [ebp+var_10]
		mov	[eax], ecx

loc_1C0:				; CODE XREF: _FT_Get_PFR_Metrics+E6j
		push	offset $SG7083	; "..\\..\\..\\src\\base\\ftpfr.c"
		push	59h ; 'Y'
		push	2
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 2
		mov	[ebp+var_4], eax

loc_1D7:				; CODE XREF: _FT_Get_PFR_Metrics+7Dj
		mov	eax, [ebp+var_4]

loc_1DA:				; CODE XREF: _FT_Get_PFR_Metrics+39j
		pop	esi
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Get_PFR_Metrics endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Get_PFR_Kerning
_FT_Get_PFR_Kerning proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		push	esi
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		cmp	[ebp+arg_0], 0
		jnz	short loc_221
		push	offset $SG7096	; "..\\..\\..\\src\\base\\ftpfr.c"
		push	6Dh ; 'm'
		push	23h ; '#'
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 23h
		jmp	short loc_29B
; ---------------------------------------------------------------------------

loc_221:				; CODE XREF: _FT_Get_PFR_Kerning+19j
		cmp	[ebp+arg_C], 0
		jnz	short loc_23D
		push	offset $SG7098	; "..\\..\\..\\src\\base\\ftpfr.c"
		push	70h ; 'p'
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		jmp	short loc_29B
; ---------------------------------------------------------------------------

loc_23D:				; CODE XREF: _FT_Get_PFR_Kerning+35j
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ft_pfr_check
		add	esp, 4
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_27B
		mov	esi, esp
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx+4]
		call	eax
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], eax
		jmp	short loc_298
; ---------------------------------------------------------------------------

loc_27B:				; CODE XREF: _FT_Get_PFR_Kerning+60j
		mov	ecx, [ebp+arg_C]
		push	ecx
		push	2
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_FT_Get_Kerning
		add	esp, 14h
		mov	[ebp+var_4], eax

loc_298:				; CODE XREF: _FT_Get_PFR_Kerning+89j
		mov	eax, [ebp+var_4]

loc_29B:				; CODE XREF: _FT_Get_PFR_Kerning+2Fj
					; _FT_Get_PFR_Kerning+4Bj
		pop	esi
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Get_PFR_Kerning endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Get_PFR_Advance
_FT_Get_PFR_Advance proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		push	esi
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		cmp	[ebp+arg_0], 0
		jnz	short loc_2E4
		push	offset $SG7111	; "..\\..\\..\\src\\base\\ftpfr.c"
		push	89h ; '‰'
		push	23h ; '#'
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 23h
		jmp	short loc_35A
; ---------------------------------------------------------------------------

loc_2E4:				; CODE XREF: _FT_Get_PFR_Advance+19j
		cmp	[ebp+arg_8], 0
		jnz	short loc_303
		push	offset $SG7113	; "..\\..\\..\\src\\base\\ftpfr.c"
		push	8Ch ; 'Œ'
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		jmp	short loc_35A
; ---------------------------------------------------------------------------

loc_303:				; CODE XREF: _FT_Get_PFR_Advance+38j
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ft_pfr_check
		add	esp, 4
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_33D
		mov	esi, esp
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+8]
		call	edx
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], eax
		jmp	short loc_357
; ---------------------------------------------------------------------------

loc_33D:				; CODE XREF: _FT_Get_PFR_Advance+66j
		push	offset $SG7116	; "..\\..\\..\\src\\base\\ftpfr.c"
		push	93h ; '“'
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		mov	[ebp+var_4], eax

loc_357:				; CODE XREF: _FT_Get_PFR_Advance+8Bj
		mov	eax, [ebp+var_4]

loc_35A:				; CODE XREF: _FT_Get_PFR_Advance+32j
					; _FT_Get_PFR_Advance+51j
		pop	esi
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Get_PFR_Advance endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_pfr_check	proc near		; CODE XREF: _FT_Get_PFR_Metrics+42p
					; _FT_Get_PFR_Kerning+51p ...

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], 0
		cmp	[ebp+arg_0], 0
		jz	loc_439

loc_39C:				; CODE XREF: _ft_pfr_check+C3j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+80h]
		mov	edx, [ecx+28h]
		mov	[ebp+var_8], edx
		cmp	[ebp+var_8], 0FFFFFFFEh
		jnz	short loc_3BA
		mov	[ebp+var_8], 0
		jmp	short loc_42B
; ---------------------------------------------------------------------------

loc_3BA:				; CODE XREF: _ft_pfr_check+3Fj
		cmp	[ebp+var_8], 0
		jnz	short loc_42B

loc_3C0:				; CODE XREF: _ft_pfr_check+95j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+60h]
		mov	[ebp+var_C], ecx
		mov	[ebp+var_10], 0
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		cmp	dword ptr [eax+20h], 0
		jz	short loc_3FD
		mov	esi, esp
		push	offset $SG7053	; "pfr-metrics"
		mov	ecx, [ebp+var_C]
		push	ecx
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		mov	ecx, [eax+20h]
		call	ecx
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_10], eax

loc_3FD:				; CODE XREF: _ft_pfr_check+69j
		mov	edx, [ebp+var_10]
		mov	[ebp+var_8], edx
		xor	eax, eax
		jnz	short loc_3C0
		cmp	[ebp+var_8], 0
		jz	short loc_415
		mov	ecx, [ebp+var_8]
		mov	[ebp+var_14], ecx
		jmp	short loc_41C
; ---------------------------------------------------------------------------

loc_415:				; CODE XREF: _ft_pfr_check+9Bj
		mov	[ebp+var_14], 0FFFFFFFEh

loc_41C:				; CODE XREF: _ft_pfr_check+A3j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+80h]
		mov	ecx, [ebp+var_14]
		mov	[eax+28h], ecx

loc_42B:				; CODE XREF: _ft_pfr_check+48j
					; _ft_pfr_check+4Ej
		mov	edx, [ebp+var_8]
		mov	[ebp+var_4], edx
		xor	eax, eax
		jnz	loc_39C

loc_439:				; CODE XREF: _ft_pfr_check+26j
		mov	eax, [ebp+var_4]
		pop	esi
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_pfr_check	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 44Ch
; COMDAT (pick any)
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 450h
; COMDAT (pick any)
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _FT_Get_Kerning:near ; CODE XREF:	_FT_Get_PFR_Kerning+9Dp
		extrn _FT_Throw:near	; CODE XREF: _FT_Get_PFR_Metrics+2Ep
					; _FT_Get_PFR_Metrics+F9p ...
		extrn __RTC_CheckEsp:near ; CODE XREF: _FT_Get_PFR_Metrics+75p
					; _FT_Get_PFR_Metrics+110p ...
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo


		end
