;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	1C3225944CD2437091E23E6363B7C73C
; Input	CRC32 :	0A31E138

; File Name   :	D:\compspace\objfiles\firefox\freehelper\ftstroke.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRTD"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
$SG7376		db '..\..\..\src\base\ftstroke.c',0 ; DATA XREF: _ft_stroke_border_close+31o
		align 10h
$SG7377		db 'assertion failed on line %d of file %s',0Ah,0
					; DATA XREF: _ft_stroke_border_close+3Bo
$SG7406		db '..\..\..\src\base\ftstroke.c',0
					; DATA XREF: _ft_stroke_border_lineto+2Co
		align 4
$SG7407		db 'assertion failed on line %d of file %s',0Ah,0
					; DATA XREF: _ft_stroke_border_lineto+36o
$SG7427		db '..\..\..\src\base\ftstroke.c',0
					; DATA XREF: _ft_stroke_border_conicto+25o
		align 10h
$SG7428		db 'assertion failed on line %d of file %s',0Ah,0
					; DATA XREF: _ft_stroke_border_conicto+2Fo
$SG7447		db '..\..\..\src\base\ftstroke.c',0
					; DATA XREF: _ft_stroke_border_cubicto+25o
		align 4
$SG7448		db 'assertion failed on line %d of file %s',0Ah,0
					; DATA XREF: _ft_stroke_border_cubicto+2Fo
$SG7573		db '..\..\..\src\base\ftstroke.c',0
					; DATA XREF: _ft_stroke_border_export+162o
					; .text$mn:0000213Co
		align 10h
$SG7574		db 'assertion failed on line %d of file %s',0Ah,0
					; DATA XREF: _ft_stroke_border_export+16Co
$SG7603		db '..\..\..\src\base\ftstroke.c',0 ; DATA XREF: _FT_Stroker_New+27o
		align 4
$SG7605		db '..\..\..\src\base\ftstroke.c',0 ; DATA XREF: _FT_Stroker_New+49o
		align 4
$SG7781		db '..\..\..\src\base\ftstroke.c',0 ; DATA XREF: _FT_Stroker_LineTo:loc_DC9o
		align 4
$SG7807		db '..\..\..\src\base\ftstroke.c',0
					; DATA XREF: _FT_Stroker_ConicTo:loc_FE0o
		align 4
$SG7869		db '..\..\..\src\base\ftstroke.c',0
					; DATA XREF: _FT_Stroker_CubicTo:loc_1856o
		align 4
$SG7929		db '..\..\..\src\base\ftstroke.c',0
					; DATA XREF: _FT_Stroker_BeginSubPath:loc_B27o
		align 4
$SG7945		db '..\..\..\src\base\ftstroke.c',0
					; DATA XREF: _ft_stroker_add_reverse_left+48o
		align 4
$SG7946		db 'assertion failed on line %d of file %s',0Ah,0
					; DATA XREF: _ft_stroker_add_reverse_left+52o
$SG7969		db '..\..\..\src\base\ftstroke.c',0 ; DATA XREF: _FT_Stroker_EndSubPath+24o
		align 10h
$SG8000		db '..\..\..\src\base\ftstroke.c',0
					; DATA XREF: _FT_Stroker_GetBorderCounts:loc_223Ao
		align 10h
$SG8019		db '..\..\..\src\base\ftstroke.c',0 ; DATA XREF: _FT_Stroker_GetCounts+2Ao
		align 10h
$SG8061		db '..\..\..\src\base\ftstroke.c',0
					; DATA XREF: _FT_Stroker_ParseOutline+22o
		align 10h
$SG8063		db '..\..\..\src\base\ftstroke.c',0
					; DATA XREF: _FT_Stroker_ParseOutline+44o
		align 10h
$SG8107		db '..\..\..\src\base\ftstroke.c',0
					; DATA XREF: _FT_Stroker_ParseOutline:$Invalid_Outline$47o
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 330h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Outline_GetInsideBorder
_FT_Outline_GetInsideBorder proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		push	eax
		call	_FT_Outline_Get_Orientation
		add	esp, 4
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_362
		mov	[ebp+var_8], 1
		jmp	short loc_369
; ---------------------------------------------------------------------------

loc_362:				; CODE XREF: _FT_Outline_GetInsideBorder+27j
		mov	[ebp+var_8], 0

loc_369:				; CODE XREF: _FT_Outline_GetInsideBorder+30j
		mov	eax, [ebp+var_8]
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Outline_GetInsideBorder endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Outline_GetOutsideBorder
_FT_Outline_GetOutsideBorder proc near	; CODE XREF: _FT_Glyph_StrokeBorder+97p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		push	eax
		call	_FT_Outline_Get_Orientation
		add	esp, 4
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_3B2
		mov	[ebp+var_8], 0
		jmp	short loc_3B9
; ---------------------------------------------------------------------------

loc_3B2:				; CODE XREF: _FT_Outline_GetOutsideBorder+27j
		mov	[ebp+var_8], 1

loc_3B9:				; CODE XREF: _FT_Outline_GetOutsideBorder+30j
		mov	eax, [ebp+var_8]
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Outline_GetOutsideBorder endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Stroker_New
_FT_Stroker_New	proc near

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_14], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_413
		push	offset $SG7603	; "..\\..\\..\\src\\base\\ftstroke.c"
		push	31Eh
		push	21h ; '!'
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 21h
		jmp	loc_4A7
; ---------------------------------------------------------------------------

loc_413:				; CODE XREF: _FT_Stroker_New+25j
		cmp	[ebp+arg_4], 0
		jnz	short loc_432
		push	offset $SG7605	; "..\\..\\..\\src\\base\\ftstroke.c"
		push	321h
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		jmp	short loc_4A7
; ---------------------------------------------------------------------------

loc_432:				; CODE XREF: _FT_Stroker_New+47j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_10], ecx
		lea	edx, [ebp+var_8]
		push	edx
		push	84h ; '„'
		mov	eax, [ebp+var_10]
		push	eax
		call	_ft_mem_alloc
		add	esp, 0Ch
		mov	[ebp+var_14], eax
		cmp	[ebp+var_8], 0
		jnz	short loc_49C
		mov	ecx, [ebp+var_14]
		mov	edx, [ebp+arg_0]
		mov	[ecx+80h], edx
		mov	eax, [ebp+var_10]
		push	eax
		mov	ecx, 20h ; ' '
		imul	edx, ecx, 0
		mov	eax, [ebp+var_14]
		lea	ecx, [eax+edx+40h]
		push	ecx
		call	_ft_stroke_border_init
		add	esp, 8
		mov	edx, [ebp+var_10]
		push	edx
		mov	eax, 20h ; ' '
		shl	eax, 0
		mov	ecx, [ebp+var_14]
		lea	edx, [ecx+eax+40h]
		push	edx
		call	_ft_stroke_border_init
		add	esp, 8

loc_49C:				; CODE XREF: _FT_Stroker_New+86j
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_14]
		mov	[eax], ecx
		mov	eax, [ebp+var_8]

loc_4A7:				; CODE XREF: _FT_Stroker_New+3Ej
					; _FT_Stroker_New+60j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN8
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Stroker_New	endp

; ---------------------------------------------------------------------------
		align 4
$LN8		dd 1			; DATA XREF: _FT_Stroker_New+DBo
		dd offset $LN7
$LN7		dd 0FFFFFFF8h, 4	; DATA XREF: .text$mn:000004CCo
		dd offset $LN6		; "error"
$LN6		db 'error',0            ; DATA XREF: .text$mn:000004D8o
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Stroker_Set
_FT_Stroker_Set	proc near

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_0], 0
		jnz	short loc_4FB
		jmp	short loc_54A
; ---------------------------------------------------------------------------

loc_4FB:				; CODE XREF: _FT_Stroker_Set+7j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	[eax+3Ch], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_8]
		mov	[edx+2Ch], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_C]
		mov	[ecx+30h], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_10]
		mov	[eax+38h], ecx
		mov	edx, [ebp+arg_0]
		cmp	dword ptr [edx+38h], 10000h
		jge	short loc_535
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+38h], 10000h

loc_535:				; CODE XREF: _FT_Stroker_Set+39j
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_C]
		mov	[ecx+34h], edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_FT_Stroker_Rewind
		add	esp, 4

loc_54A:				; CODE XREF: _FT_Stroker_Set+9j
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_FT_Stroker_Set	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Stroker_Rewind
_FT_Stroker_Rewind proc	near		; CODE XREF: _FT_Stroker_Set+52p
					; _FT_Stroker_ParseOutline+64p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_0], 0
		jz	short loc_599
		mov	eax, 20h ; ' '
		imul	ecx, eax, 0
		mov	edx, [ebp+arg_0]
		lea	eax, [edx+ecx+40h]
		push	eax
		call	_ft_stroke_border_reset
		add	esp, 4
		mov	ecx, 20h ; ' '
		shl	ecx, 0
		mov	edx, [ebp+arg_0]
		lea	eax, [edx+ecx+40h]
		push	eax
		call	_ft_stroke_border_reset
		add	esp, 4

loc_599:				; CODE XREF: _FT_Stroker_Rewind+7j
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_FT_Stroker_Rewind endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Stroker_ParseOutline
_FT_Stroker_ParseOutline proc near	; CODE XREF: _FT_Glyph_Stroke+9Dp
					; _FT_Glyph_StrokeBorder+CAp

var_B4		= dword	ptr -0B4h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0B4h
		push	edi
		lea	edi, [ebp+var_B4]
		mov	ecx, 2Dh ; '-'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_4], 0
		jnz	short loc_5EE
		push	offset $SG8061	; "..\\..\\..\\src\\base\\ftstroke.c"
		push	83Bh
		push	14h
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 14h
		jmp	loc_A3E
; ---------------------------------------------------------------------------

loc_5EE:				; CODE XREF: _FT_Stroker_ParseOutline+20j
		cmp	[ebp+arg_0], 0
		jnz	short loc_610
		push	offset $SG8063	; "..\\..\\..\\src\\base\\ftstroke.c"
		push	83Eh
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		jmp	loc_A3E
; ---------------------------------------------------------------------------

loc_610:				; CODE XREF: _FT_Stroker_ParseOutline+42j
		mov	eax, [ebp+arg_0]
		push	eax
		call	_FT_Stroker_Rewind
		add	esp, 4
		mov	[ebp+var_48], 0
		mov	[ebp+var_44], 0
		jmp	short loc_635
; ---------------------------------------------------------------------------

loc_62C:				; CODE XREF: _FT_Stroker_ParseOutline+C4j
					; _FT_Stroker_ParseOutline+469j
		mov	ecx, [ebp+var_44]
		add	ecx, 1
		mov	[ebp+var_44], ecx

loc_635:				; CODE XREF: _FT_Stroker_ParseOutline+7Aj
		mov	edx, [ebp+arg_4]
		movsx	eax, word ptr [edx]
		cmp	[ebp+var_44], eax
		jge	loc_A1E
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+0Ch]
		mov	eax, [ebp+var_44]
		movsx	ecx, word ptr [edx+eax*2]
		mov	[ebp+var_50], ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+4]
		mov	ecx, [ebp+var_50]
		lea	edx, [eax+ecx*8]
		mov	[ebp+var_38], edx
		mov	eax, [ebp+var_50]
		cmp	eax, [ebp+var_48]
		ja	short loc_676
		mov	ecx, [ebp+var_50]
		add	ecx, 1
		mov	[ebp+var_48], ecx
		jmp	short loc_62C
; ---------------------------------------------------------------------------

loc_676:				; CODE XREF: _FT_Stroker_ParseOutline+B9j
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+4]
		mov	ecx, [ebp+var_48]
		mov	edx, [eax+ecx*8]
		mov	eax, [eax+ecx*8+4]
		mov	[ebp+var_2C], edx
		mov	[ebp+var_28], eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+4]
		mov	eax, [ebp+var_50]
		mov	ecx, [edx+eax*8]
		mov	edx, [edx+eax*8+4]
		mov	[ebp+var_C], ecx
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_1C], eax
		mov	ecx, [ebp+var_28]
		mov	[ebp+var_18], ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+4]
		mov	ecx, [ebp+var_48]
		lea	edx, [eax+ecx*8]
		mov	[ebp+var_34], edx
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+8]
		add	ecx, [ebp+var_48]
		mov	[ebp+var_3C], ecx
		mov	edx, 1
		imul	eax, edx, 0
		mov	ecx, [ebp+var_3C]
		movsx	edx, byte ptr [ecx+eax]
		and	edx, 3
		mov	[ebp+var_4C], edx
		cmp	[ebp+var_4C], 2
		jnz	short loc_6E9
		jmp	$Invalid_Outline$47
; ---------------------------------------------------------------------------

loc_6E9:				; CODE XREF: _FT_Stroker_ParseOutline+132j
		cmp	[ebp+var_4C], 0
		jnz	short loc_749
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+8]
		mov	edx, [ebp+var_50]
		movsx	eax, byte ptr [ecx+edx]
		and	eax, 3
		cmp	eax, 1
		jnz	short loc_71B
		mov	ecx, [ebp+var_C]
		mov	[ebp+var_2C], ecx
		mov	edx, [ebp+var_8]
		mov	[ebp+var_28], edx
		mov	eax, [ebp+var_38]
		sub	eax, 8
		mov	[ebp+var_38], eax
		jmp	short loc_737
; ---------------------------------------------------------------------------

loc_71B:				; CODE XREF: _FT_Stroker_ParseOutline+152j
		mov	eax, [ebp+var_2C]
		add	eax, [ebp+var_C]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+var_28]
		add	eax, [ebp+var_8]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_28], eax

loc_737:				; CODE XREF: _FT_Stroker_ParseOutline+169j
		mov	ecx, [ebp+var_34]
		sub	ecx, 8
		mov	[ebp+var_34], ecx
		mov	edx, [ebp+var_3C]
		sub	edx, 1
		mov	[ebp+var_3C], edx

loc_749:				; CODE XREF: _FT_Stroker_ParseOutline+13Dj
		movzx	eax, [ebp+arg_8]
		push	eax
		lea	ecx, [ebp+var_2C]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_FT_Stroker_BeginSubPath
		add	esp, 0Ch
		mov	[ebp+var_40], eax
		cmp	[ebp+var_40], 0
		jz	short loc_76C
		jmp	$Exit$48
; ---------------------------------------------------------------------------

loc_76C:				; CODE XREF: _FT_Stroker_ParseOutline+1B5j
					; _FT_Stroker_ParseOutline:loc_7EEj ...
		mov	eax, [ebp+var_34]
		cmp	eax, [ebp+var_38]
		jnb	$Close$49
		mov	ecx, [ebp+var_34]
		add	ecx, 8
		mov	[ebp+var_34], ecx
		mov	edx, [ebp+var_3C]
		add	edx, 1
		mov	[ebp+var_3C], edx
		mov	eax, 1
		imul	ecx, eax, 0
		mov	edx, [ebp+var_3C]
		movsx	eax, byte ptr [edx+ecx]
		and	eax, 3
		mov	[ebp+var_4C], eax
		mov	ecx, [ebp+var_4C]
		mov	[ebp+var_B4], ecx
		cmp	[ebp+var_B4], 0
		jz	short loc_7F3
		cmp	[ebp+var_B4], 1
		jz	short loc_7BF
		jmp	loc_8F2
; ---------------------------------------------------------------------------

loc_7BF:				; CODE XREF: _FT_Stroker_ParseOutline+208j
		mov	edx, [ebp+var_34]
		mov	eax, [edx]
		mov	[ebp+var_5C], eax
		mov	ecx, [ebp+var_34]
		mov	edx, [ecx+4]
		mov	[ebp+var_58], edx
		lea	eax, [ebp+var_5C]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_FT_Stroker_LineTo
		add	esp, 8
		mov	[ebp+var_40], eax
		cmp	[ebp+var_40], 0
		jz	short loc_7EE
		jmp	$Exit$48
; ---------------------------------------------------------------------------

loc_7EE:				; CODE XREF: _FT_Stroker_ParseOutline+237j
		jmp	loc_76C
; ---------------------------------------------------------------------------

loc_7F3:				; CODE XREF: _FT_Stroker_ParseOutline+1FFj
		mov	edx, [ebp+var_34]
		mov	eax, [edx]
		mov	[ebp+var_1C], eax
		mov	ecx, [ebp+var_34]
		mov	edx, [ecx+4]
		mov	[ebp+var_18], edx

$Do_Conic$50:				; CODE XREF: _FT_Stroker_ParseOutline+321j
		mov	eax, [ebp+var_34]
		cmp	eax, [ebp+var_38]
		jnb	loc_8D6
		mov	ecx, [ebp+var_34]
		add	ecx, 8
		mov	[ebp+var_34], ecx
		mov	edx, [ebp+var_3C]
		add	edx, 1
		mov	[ebp+var_3C], edx
		mov	eax, 1
		imul	ecx, eax, 0
		mov	edx, [ebp+var_3C]
		movsx	eax, byte ptr [edx+ecx]
		and	eax, 3
		mov	[ebp+var_4C], eax
		mov	ecx, 8
		imul	edx, ecx, 0
		mov	eax, [ebp+var_34]
		mov	ecx, [eax+edx]
		mov	edx, [eax+edx+4]
		mov	[ebp+var_6C], ecx
		mov	[ebp+var_68], edx
		cmp	[ebp+var_4C], 1
		jnz	short loc_87C
		lea	eax, [ebp+var_6C]
		push	eax
		lea	ecx, [ebp+var_1C]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_FT_Stroker_ConicTo
		add	esp, 0Ch
		mov	[ebp+var_40], eax
		cmp	[ebp+var_40], 0
		jz	short loc_877
		jmp	$Exit$48
; ---------------------------------------------------------------------------

loc_877:				; CODE XREF: _FT_Stroker_ParseOutline+2C0j
		jmp	loc_76C
; ---------------------------------------------------------------------------

loc_87C:				; CODE XREF: _FT_Stroker_ParseOutline+2A3j
		cmp	[ebp+var_4C], 0
		jz	short loc_887
		jmp	$Invalid_Outline$47
; ---------------------------------------------------------------------------

loc_887:				; CODE XREF: _FT_Stroker_ParseOutline+2D0j
		mov	eax, [ebp+var_1C]
		add	eax, [ebp+var_6C]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_7C], eax
		mov	eax, [ebp+var_18]
		add	eax, [ebp+var_68]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_78], eax
		lea	eax, [ebp+var_7C]
		push	eax
		lea	ecx, [ebp+var_1C]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_FT_Stroker_ConicTo
		add	esp, 0Ch
		mov	[ebp+var_40], eax
		cmp	[ebp+var_40], 0
		jz	short loc_8C5
		jmp	$Exit$48
; ---------------------------------------------------------------------------

loc_8C5:				; CODE XREF: _FT_Stroker_ParseOutline+30Ej
		mov	eax, [ebp+var_6C]
		mov	[ebp+var_1C], eax
		mov	ecx, [ebp+var_68]
		mov	[ebp+var_18], ecx
		jmp	$Do_Conic$50
; ---------------------------------------------------------------------------

loc_8D6:				; CODE XREF: _FT_Stroker_ParseOutline+25Aj
		lea	edx, [ebp+var_2C]
		push	edx
		lea	eax, [ebp+var_1C]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_FT_Stroker_ConicTo
		add	esp, 0Ch
		mov	[ebp+var_40], eax
		jmp	$Close$49
; ---------------------------------------------------------------------------

loc_8F2:				; CODE XREF: _FT_Stroker_ParseOutline+20Aj
		mov	edx, [ebp+var_34]
		add	edx, 8
		cmp	edx, [ebp+var_38]
		ja	short loc_914
		mov	eax, 1
		shl	eax, 0
		mov	ecx, [ebp+var_3C]
		movsx	edx, byte ptr [ecx+eax]
		and	edx, 3
		cmp	edx, 2
		jz	short loc_919

loc_914:				; CODE XREF: _FT_Stroker_ParseOutline+34Bj
		jmp	$Invalid_Outline$47
; ---------------------------------------------------------------------------

loc_919:				; CODE XREF: _FT_Stroker_ParseOutline+362j
		mov	eax, [ebp+var_34]
		add	eax, 10h
		mov	[ebp+var_34], eax
		mov	ecx, [ebp+var_3C]
		add	ecx, 2
		mov	[ebp+var_3C], ecx
		mov	edx, 8
		imul	eax, edx, -2
		mov	ecx, [ebp+var_34]
		mov	edx, [ecx+eax]
		mov	eax, [ecx+eax+4]
		mov	[ebp+var_8C], edx
		mov	[ebp+var_88], eax
		mov	ecx, 8
		imul	edx, ecx, -1
		mov	eax, [ebp+var_34]
		mov	ecx, [eax+edx]
		mov	edx, [eax+edx+4]
		mov	[ebp+var_9C], ecx
		mov	[ebp+var_98], edx
		mov	eax, [ebp+var_34]
		cmp	eax, [ebp+var_38]
		ja	short loc_9BE
		mov	ecx, 8
		imul	edx, ecx, 0
		mov	eax, [ebp+var_34]
		mov	ecx, [eax+edx]
		mov	edx, [eax+edx+4]
		mov	[ebp+var_AC], ecx
		mov	[ebp+var_A8], edx
		lea	eax, [ebp+var_AC]
		push	eax
		lea	ecx, [ebp+var_9C]
		push	ecx
		lea	edx, [ebp+var_8C]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_FT_Stroker_CubicTo
		add	esp, 10h
		mov	[ebp+var_40], eax
		cmp	[ebp+var_40], 0
		jz	short loc_9B9
		jmp	short $Exit$48
; ---------------------------------------------------------------------------

loc_9B9:				; CODE XREF: _FT_Stroker_ParseOutline+405j
		jmp	loc_76C
; ---------------------------------------------------------------------------

loc_9BE:				; CODE XREF: _FT_Stroker_ParseOutline+3BDj
		lea	ecx, [ebp+var_2C]
		push	ecx
		lea	edx, [ebp+var_9C]
		push	edx
		lea	eax, [ebp+var_8C]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_FT_Stroker_CubicTo
		add	esp, 10h
		mov	[ebp+var_40], eax
		jmp	short $Close$49
; ---------------------------------------------------------------------------
		jmp	loc_76C
; ---------------------------------------------------------------------------

$Close$49:				; CODE XREF: _FT_Stroker_ParseOutline+1C2j
					; _FT_Stroker_ParseOutline+33Dj ...
		cmp	[ebp+var_40], 0
		jz	short loc_9EE
		jmp	short $Exit$48
; ---------------------------------------------------------------------------

loc_9EE:				; CODE XREF: _FT_Stroker_ParseOutline+43Aj
		mov	edx, [ebp+arg_0]
		movzx	eax, byte ptr [edx+14h]
		test	eax, eax
		jnz	short loc_A10
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_FT_Stroker_EndSubPath
		add	esp, 4
		mov	[ebp+var_40], eax
		cmp	[ebp+var_40], 0
		jz	short loc_A10
		jmp	short $Exit$48
; ---------------------------------------------------------------------------

loc_A10:				; CODE XREF: _FT_Stroker_ParseOutline+447j
					; _FT_Stroker_ParseOutline+45Cj
		mov	edx, [ebp+var_50]
		add	edx, 1
		mov	[ebp+var_48], edx
		jmp	loc_62C
; ---------------------------------------------------------------------------

loc_A1E:				; CODE XREF: _FT_Stroker_ParseOutline+8Ej
		xor	eax, eax
		jmp	short loc_A3E
; ---------------------------------------------------------------------------

$Exit$48:				; CODE XREF: _FT_Stroker_ParseOutline+1B7j
					; _FT_Stroker_ParseOutline+239j ...
		mov	eax, [ebp+var_40]
		jmp	short loc_A3E
; ---------------------------------------------------------------------------

$Invalid_Outline$47:			; CODE XREF: _FT_Stroker_ParseOutline+134j
					; _FT_Stroker_ParseOutline+2D2j ...
		push	offset $SG8107	; "..\\..\\..\\src\\base\\ftstroke.c"
		push	8F0h
		push	14h
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 14h

loc_A3E:				; CODE XREF: _FT_Stroker_ParseOutline+39j
					; _FT_Stroker_ParseOutline+5Bj	...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN46
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		add	esp, 0B4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Stroker_ParseOutline endp

; ---------------------------------------------------------------------------
		align 4
$LN46		dd 9			; DATA XREF: _FT_Stroker_ParseOutline+492o
		dd offset $LN45
$LN45		dd 0FFFFFFF4h, 8	; DATA XREF: .text$mn:00000A68o
		dd offset $LN36		; "v_last"
		dd 0FFFFFFE4h, 8
		dd offset $LN37		; "v_control"
		dd 0FFFFFFD4h, 8
		dd offset $LN38		; "v_start"
		dd 0FFFFFFA4h, 8
		dd offset $LN39		; "vec"
		dd 0FFFFFF94h, 8
		dd offset $LN40		; "vec"
		dd 0FFFFFF84h, 8
		dd offset $LN41		; "v_middle"
		dd 0FFFFFF74h, 8
		dd offset $LN42		; "vec1"
		dd 0FFFFFF64h, 8
		dd offset $LN43		; "vec2"
		dd 0FFFFFF54h, 8
		dd offset $LN44
$LN44		dd 636576h		; DATA XREF: .text$mn:00000AD4o
$LN43		db 'vec2',0             ; DATA XREF: .text$mn:00000AC8o
$LN42		db 'vec1',0             ; DATA XREF: .text$mn:00000ABCo
$LN41		db 'v_middle',0         ; DATA XREF: .text$mn:00000AB0o
$LN40		db 'vec',0              ; DATA XREF: .text$mn:00000AA4o
$LN39		db 'vec',0              ; DATA XREF: .text$mn:00000A98o
$LN38		db 'v_start',0          ; DATA XREF: .text$mn:00000A8Co
$LN37		db 'v_control',0        ; DATA XREF: .text$mn:00000A80o
$LN36		db 'v_last',0           ; DATA XREF: .text$mn:00000A74o

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Stroker_BeginSubPath
_FT_Stroker_BeginSubPath proc near	; CODE XREF: _FT_Stroker_ParseOutline+1A6p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		cmp	[ebp+arg_0], 0
		jz	short loc_B27
		cmp	[ebp+arg_4], 0
		jnz	short loc_B40

loc_B27:				; CODE XREF: _FT_Stroker_BeginSubPath+Fj
		push	offset $SG7929	; "..\\..\\..\\src\\base\\ftstroke.c"
		push	6F8h
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		jmp	short loc_BAD
; ---------------------------------------------------------------------------

loc_B40:				; CODE XREF: _FT_Stroker_BeginSubPath+15j
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+14h], 1
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		mov	eax, [ecx+4]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+8], edx
		mov	[ecx+0Ch], eax
		mov	edx, [ebp+arg_0]
		mov	al, [ebp+arg_8]
		mov	[edx+15h], al
		mov	ecx, [ebp+arg_0]
		cmp	dword ptr [ecx+30h], 0
		jnz	short loc_B84
		mov	edx, [ebp+arg_0]
		movzx	eax, byte ptr [edx+15h]
		test	eax, eax
		jz	short loc_B7E
		mov	ecx, [ebp+arg_0]
		cmp	dword ptr [ecx+2Ch], 0
		jz	short loc_B84

loc_B7E:				; CODE XREF: _FT_Stroker_BeginSubPath+63j
		mov	byte ptr [ebp+var_4+3],	0
		jmp	short loc_B88
; ---------------------------------------------------------------------------

loc_B84:				; CODE XREF: _FT_Stroker_BeginSubPath+58j
					; _FT_Stroker_BeginSubPath+6Cj
		mov	byte ptr [ebp+var_4+3],	1

loc_B88:				; CODE XREF: _FT_Stroker_BeginSubPath+72j
		mov	edx, [ebp+arg_0]
		mov	al, byte ptr [ebp+var_4+3]
		mov	[edx+28h], al
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		mov	eax, [ecx+4]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+1Ch], edx
		mov	[ecx+20h], eax
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx], 0
		xor	eax, eax

loc_BAD:				; CODE XREF: _FT_Stroker_BeginSubPath+2Ej
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Stroker_BeginSubPath endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Stroker_EndSubPath
_FT_Stroker_EndSubPath proc near	; CODE XREF: _FT_Stroker_ParseOutline+44Dp

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_C03
		push	offset $SG7969	; "..\\..\\..\\src\\base\\ftstroke.c"
		push	760h
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		mov	[ebp+var_4], eax
		jmp	$Exit$16
; ---------------------------------------------------------------------------

loc_C03:				; CODE XREF: _FT_Stroker_EndSubPath+22j
		mov	eax, [ebp+arg_0]
		movzx	ecx, byte ptr [eax+15h]
		test	ecx, ecx
		jz	loc_CA6
		mov	edx, [ebp+arg_0]
		add	edx, 40h ; '@'
		mov	[ebp+var_8], edx
		push	0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ft_stroker_cap
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_C3D
		jmp	$Exit$16
; ---------------------------------------------------------------------------

loc_C3D:				; CODE XREF: _FT_Stroker_EndSubPath+76j
		push	1
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ft_stroker_add_reverse_left
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_C59
		jmp	$Exit$16
; ---------------------------------------------------------------------------

loc_C59:				; CODE XREF: _FT_Stroker_EndSubPath+92j
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+1Ch]
		mov	eax, [ecx+20h]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+8], edx
		mov	[ecx+0Ch], eax
		push	0
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+18h]
		add	eax, 0B40000h
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ft_stroker_cap
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_C93
		jmp	$Exit$16
; ---------------------------------------------------------------------------

loc_C93:				; CODE XREF: _FT_Stroker_EndSubPath+CCj
		push	0
		mov	edx, [ebp+var_8]
		push	edx
		call	_ft_stroke_border_close
		add	esp, 8
		jmp	$Exit$16
; ---------------------------------------------------------------------------

loc_CA6:				; CODE XREF: _FT_Stroker_EndSubPath+4Cj
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+8]
		cmp	edx, [ecx+1Ch]
		jnz	short loc_CC2
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+0Ch]
		cmp	edx, [ecx+20h]
		jz	short loc_CE3

loc_CC2:				; CODE XREF: _FT_Stroker_EndSubPath+F2j
		mov	eax, [ebp+arg_0]
		add	eax, 1Ch
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_FT_Stroker_LineTo
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_CE3
		jmp	$Exit$16
; ---------------------------------------------------------------------------

loc_CE3:				; CODE XREF: _FT_Stroker_EndSubPath+100j
					; _FT_Stroker_EndSubPath+11Cj
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+18h]
		mov	[edx+4], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		push	edx
		call	_FT_Angle_Diff
		add	esp, 8
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_D6A
		mov	[ebp+var_10], 0
		cmp	[ebp+var_C], 0
		jge	short loc_D21
		mov	[ebp+var_10], 1

loc_D21:				; CODE XREF: _FT_Stroker_EndSubPath+158j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+24h]
		push	ecx
		mov	edx, [ebp+var_10]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ft_stroker_inside
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_D43
		jmp	short $Exit$16
; ---------------------------------------------------------------------------

loc_D43:				; CODE XREF: _FT_Stroker_EndSubPath+17Fj
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+24h]
		push	edx
		mov	eax, 1
		sub	eax, [ebp+var_10]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ft_stroker_outside
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_D6A
		jmp	short $Exit$16
; ---------------------------------------------------------------------------

loc_D6A:				; CODE XREF: _FT_Stroker_EndSubPath+14Bj
					; _FT_Stroker_EndSubPath+1A6j
		push	0
		mov	edx, [ebp+arg_0]
		add	edx, 40h ; '@'
		push	edx
		call	_ft_stroke_border_close
		add	esp, 8
		push	1
		mov	eax, [ebp+arg_0]
		add	eax, 60h ; '`'
		push	eax
		call	_ft_stroke_border_close
		add	esp, 8

$Exit$16:				; CODE XREF: _FT_Stroker_EndSubPath+3Ej
					; _FT_Stroker_EndSubPath+78j ...
		mov	eax, [ebp+var_4]
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Stroker_EndSubPath endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Stroker_LineTo
_FT_Stroker_LineTo proc	near		; CODE XREF: _FT_Stroker_ParseOutline+228p
					; _FT_Stroker_EndSubPath+10Dp

var_34		= byte ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 34h
		push	edi
		lea	edi, [ebp+var_34]
		mov	ecx, 0Dh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_4], 0
		cmp	[ebp+arg_0], 0
		jz	short loc_DC9
		cmp	[ebp+arg_4], 0
		jnz	short loc_DE5

loc_DC9:				; CODE XREF: _FT_Stroker_LineTo+21j
		push	offset $SG7781	; "..\\..\\..\\src\\base\\ftstroke.c"
		push	512h
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		jmp	loc_F3C
; ---------------------------------------------------------------------------

loc_DE5:				; CODE XREF: _FT_Stroker_LineTo+27j
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax]
		sub	edx, [ecx+8]
		mov	[ebp+var_14], edx
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+4]
		sub	edx, [ecx+0Ch]
		mov	[ebp+var_10], edx
		cmp	[ebp+var_14], 0
		jnz	short loc_E13
		cmp	[ebp+var_10], 0
		jnz	short loc_E13
		jmp	$Exit$18
; ---------------------------------------------------------------------------

loc_E13:				; CODE XREF: _FT_Stroker_LineTo+66j
					; _FT_Stroker_LineTo+6Cj
		lea	eax, [ebp+var_14]
		push	eax
		call	_FT_Vector_Length
		add	esp, 4
		mov	[ebp+var_24], eax
		mov	ecx, [ebp+var_10]
		push	ecx
		mov	edx, [ebp+var_14]
		push	edx
		call	_FT_Atan2
		add	esp, 8
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_1C]
		add	eax, 5A0000h
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+3Ch]
		push	edx
		lea	eax, [ebp+var_14]
		push	eax
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	ecx, [ebp+arg_0]
		movzx	edx, byte ptr [ecx+14h]
		test	edx, edx
		jz	short loc_E80
		mov	eax, [ebp+var_24]
		push	eax
		mov	ecx, [ebp+var_1C]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ft_stroker_subpath_start
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_E7E
		jmp	$Exit$18
; ---------------------------------------------------------------------------

loc_E7E:				; CODE XREF: _FT_Stroker_LineTo+D7j
		jmp	short loc_EA7
; ---------------------------------------------------------------------------

loc_E80:				; CODE XREF: _FT_Stroker_LineTo+BAj
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_1C]
		mov	[eax+4], ecx
		mov	edx, [ebp+var_24]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ft_stroker_process_corner
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_EA7
		jmp	$Exit$18
; ---------------------------------------------------------------------------

loc_EA7:				; CODE XREF: _FT_Stroker_LineTo:loc_E7Ej
					; _FT_Stroker_LineTo+100j
		mov	ecx, [ebp+arg_0]
		add	ecx, 40h ; '@'
		mov	[ebp+var_8], ecx
		mov	[ebp+var_20], 1
		jmp	short loc_ECB
; ---------------------------------------------------------------------------

loc_EB9:				; CODE XREF: _FT_Stroker_LineTo+175j
		mov	edx, [ebp+var_20]
		sub	edx, 1
		mov	[ebp+var_20], edx
		mov	eax, [ebp+var_8]
		add	eax, 20h ; ' '
		mov	[ebp+var_8], eax

loc_ECB:				; CODE XREF: _FT_Stroker_LineTo+117j
		cmp	[ebp+var_20], 0
		jl	short loc_F17
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		add	edx, [ebp+var_14]
		mov	[ebp+var_30], edx
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+4]
		add	ecx, [ebp+var_10]
		mov	[ebp+var_2C], ecx
		push	1
		lea	edx, [ebp+var_30]
		push	edx
		mov	eax, [ebp+var_8]
		push	eax
		call	_ft_stroke_border_lineto
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_F05
		jmp	short $Exit$18
; ---------------------------------------------------------------------------

loc_F05:				; CODE XREF: _FT_Stroker_LineTo+161j
		mov	ecx, [ebp+var_14]
		neg	ecx
		mov	[ebp+var_14], ecx
		mov	edx, [ebp+var_10]
		neg	edx
		mov	[ebp+var_10], edx
		jmp	short loc_EB9
; ---------------------------------------------------------------------------

loc_F17:				; CODE XREF: _FT_Stroker_LineTo+12Fj
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_1C]
		mov	[eax], ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		mov	ecx, [edx+4]
		mov	edx, [ebp+arg_0]
		mov	[edx+8], eax
		mov	[edx+0Ch], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_24]
		mov	[eax+10h], ecx

$Exit$18:				; CODE XREF: _FT_Stroker_LineTo+6Ej
					; _FT_Stroker_LineTo+D9j ...
		mov	eax, [ebp+var_4]

loc_F3C:				; CODE XREF: _FT_Stroker_LineTo+40j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN17
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		add	esp, 34h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Stroker_LineTo endp

; ---------------------------------------------------------------------------
$LN17		dd 2			; DATA XREF: _FT_Stroker_LineTo+1A0o
		dd offset $LN16
$LN16		dd 0FFFFFFECh, 8	; DATA XREF: .text$mn:00000F60o
		dd offset $LN14		; "delta"
		dd 0FFFFFFD0h, 8
		dd offset $LN15		; "point"
$LN15		db 'point',0            ; DATA XREF: .text$mn:00000F78o
$LN14		db 'delta',0            ; DATA XREF: .text$mn:00000F6Co
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Stroker_ConicTo
_FT_Stroker_ConicTo proc near		; CODE XREF: _FT_Stroker_ParseOutline+2B1p
					; _FT_Stroker_ParseOutline+2FFp ...

var_1CC		= dword	ptr -1CCh
var_1C8		= dword	ptr -1C8h
var_1C4		= dword	ptr -1C4h
var_1C0		= dword	ptr -1C0h
var_1B8		= dword	ptr -1B8h
var_1B4		= dword	ptr -1B4h
var_1A8		= dword	ptr -1A8h
var_1A4		= dword	ptr -1A4h
var_19C		= dword	ptr -19Ch
var_198		= dword	ptr -198h
var_194		= dword	ptr -194h
var_18C		= dword	ptr -18Ch
var_188		= dword	ptr -188h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= dword	ptr -178h
var_174		= dword	ptr -174h
var_170		= dword	ptr -170h
var_16C		= dword	ptr -16Ch
var_168		= dword	ptr -168h
var_160		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_140		= dword	ptr -140h
var_134		= dword	ptr -134h
var_129		= byte ptr -129h
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_11C		= byte ptr -11Ch
var_2C		= byte ptr -2Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 1CCh
		push	esi
		push	edi
		lea	edi, [ebp+var_1CC]
		mov	ecx, 73h ; 's'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	[ebp+var_8], 0
		lea	eax, [ebp+var_2C]
		mov	[ebp+var_128], eax
		mov	[ebp+var_129], 1
		cmp	[ebp+arg_0], 0
		jz	short loc_FE0
		cmp	[ebp+arg_4], 0
		jz	short loc_FE0
		cmp	[ebp+arg_8], 0
		jnz	short loc_FFF

loc_FE0:				; CODE XREF: _FT_Stroker_ConicTo+42j
					; _FT_Stroker_ConicTo+48j
		push	offset $SG7807	; "..\\..\\..\\src\\base\\ftstroke.c"
		push	55Fh
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		mov	[ebp+var_8], eax
		jmp	$Exit$38
; ---------------------------------------------------------------------------

loc_FFF:				; CODE XREF: _FT_Stroker_ConicTo+4Ej
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	eax, [ecx+8]
		sub	eax, [edx]
		cmp	eax, 0FFFFFFFEh
		jle	loc_109B
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	eax, [ecx+8]
		sub	eax, [edx]
		cmp	eax, 2
		jge	short loc_109B
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	eax, [ecx+0Ch]
		sub	eax, [edx+4]
		cmp	eax, 0FFFFFFFEh
		jle	short loc_109B
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	eax, [ecx+0Ch]
		sub	eax, [edx+4]
		cmp	eax, 2
		jge	short loc_109B
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_8]
		mov	eax, [ecx]
		sub	eax, [edx]
		cmp	eax, 0FFFFFFFEh
		jle	short loc_109B
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_8]
		mov	eax, [ecx]
		sub	eax, [edx]
		cmp	eax, 2
		jge	short loc_109B
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_8]
		mov	eax, [ecx+4]
		sub	eax, [edx+4]
		cmp	eax, 0FFFFFFFEh
		jle	short loc_109B
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_8]
		mov	eax, [ecx+4]
		sub	eax, [edx+4]
		cmp	eax, 2
		jge	short loc_109B
		mov	ecx, [ebp+arg_8]
		mov	edx, [ecx]
		mov	eax, [ecx+4]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+8], edx
		mov	[ecx+0Ch], eax
		jmp	$Exit$38
; ---------------------------------------------------------------------------

loc_109B:				; CODE XREF: _FT_Stroker_ConicTo+7Dj
					; _FT_Stroker_ConicTo+91j ...
		lea	edx, [ebp+var_11C]
		mov	[ebp+var_124], edx
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	edx, [eax+4]
		mov	eax, 8
		imul	eax, 0
		mov	esi, [ebp+var_124]
		mov	[esi+eax], ecx
		mov	[esi+eax+4], edx
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		mov	eax, [ecx+4]
		mov	ecx, 8
		shl	ecx, 0
		mov	esi, [ebp+var_124]
		mov	[esi+ecx], edx
		mov	[esi+ecx+4], eax
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	ecx, [edx+0Ch]
		mov	edx, 8
		shl	edx, 1
		mov	esi, [ebp+var_124]
		mov	[esi+edx], eax
		mov	[esi+edx+4], ecx

loc_10FE:				; CODE XREF: _FT_Stroker_ConicTo+1FDj
					; _FT_Stroker_ConicTo+786j
		lea	eax, [ebp+var_11C]
		cmp	[ebp+var_124], eax
		jb	loc_171B
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	[ebp+var_140], edx
		mov	eax, [ebp+var_140]
		mov	[ebp+var_134], eax
		mov	ecx, [ebp+var_124]
		cmp	ecx, [ebp+var_128]
		jnb	short loc_1192
		lea	edx, [ebp+var_140]
		push	edx
		lea	eax, [ebp+var_134]
		push	eax
		mov	ecx, [ebp+var_124]
		push	ecx
		call	_ft_conic_is_small_enough
		add	esp, 0Ch
		movzx	edx, al
		test	edx, edx
		jnz	short loc_1192
		mov	eax, [ebp+arg_0]
		movzx	ecx, byte ptr [eax+14h]
		test	ecx, ecx
		jz	short loc_116F
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_134]
		mov	[edx], eax

loc_116F:				; CODE XREF: _FT_Stroker_ConicTo+1D2j
		mov	ecx, [ebp+var_124]
		push	ecx
		call	_ft_conic_split
		add	esp, 4
		mov	edx, [ebp+var_124]
		add	edx, 10h
		mov	[ebp+var_124], edx
		jmp	loc_10FE
; ---------------------------------------------------------------------------

loc_1192:				; CODE XREF: _FT_Stroker_ConicTo+1A3j
					; _FT_Stroker_ConicTo+1C7j
		movzx	eax, [ebp+var_129]
		test	eax, eax
		jz	short loc_11E8
		mov	[ebp+var_129], 0
		mov	ecx, [ebp+arg_0]
		movzx	edx, byte ptr [ecx+14h]
		test	edx, edx
		jz	short loc_11C9
		push	0
		mov	eax, [ebp+var_134]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ft_stroker_subpath_start
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		jmp	short loc_11E6
; ---------------------------------------------------------------------------

loc_11C9:				; CODE XREF: _FT_Stroker_ConicTo+21Dj
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_134]
		mov	[edx+4], eax
		push	0
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ft_stroker_process_corner
		add	esp, 8
		mov	[ebp+var_8], eax

loc_11E6:				; CODE XREF: _FT_Stroker_ConicTo+237j
		jmp	short loc_125D
; ---------------------------------------------------------------------------

loc_11E8:				; CODE XREF: _FT_Stroker_ConicTo+20Bj
		mov	edx, [ebp+var_134]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		call	_FT_Angle_Diff
		add	esp, 8
		push	eax
		call	_ft_pos_abs
		add	esp, 4
		cmp	eax, 78000h
		jle	short loc_125D
		mov	edx, 8
		shl	edx, 1
		mov	eax, [ebp+var_124]
		mov	ecx, [eax+edx]
		mov	edx, [eax+edx+4]
		mov	eax, [ebp+arg_0]
		mov	[eax+8], ecx
		mov	[eax+0Ch], edx
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_134]
		mov	[ecx+4], edx
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+30h], 0
		push	0
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ft_stroker_process_corner
		add	esp, 8
		mov	[ebp+var_8], eax
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+34h]
		mov	[edx+30h], ecx

loc_125D:				; CODE XREF: _FT_Stroker_ConicTo:loc_11E6j
					; _FT_Stroker_ConicTo+27Bj
		cmp	[ebp+var_8], 0
		jz	short loc_1268
		jmp	$Exit$38
; ---------------------------------------------------------------------------

loc_1268:				; CODE XREF: _FT_Stroker_ConicTo+2D1j
		mov	[ebp+var_174], 0
		mov	edx, [ebp+var_140]
		push	edx
		mov	eax, [ebp+var_134]
		push	eax
		call	_FT_Angle_Diff
		add	esp, 8
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_168], eax
		mov	ecx, [ebp+var_134]
		add	ecx, [ebp+var_168]
		mov	[ebp+var_16C], ecx
		mov	edx, [ebp+var_168]
		push	edx
		call	_FT_Cos
		add	esp, 4
		push	eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+3Ch]
		push	ecx
		call	_FT_DivFix
		add	esp, 8
		mov	[ebp+var_178], eax
		mov	edx, [ebp+arg_0]
		movzx	eax, byte ptr [edx+28h]
		test	eax, eax
		jz	short loc_1329
		mov	ecx, 8
		imul	edx, ecx, 0
		mov	eax, 8
		shl	eax, 1
		mov	ecx, [ebp+var_124]
		mov	esi, [ebp+var_124]
		mov	edx, [ecx+edx+4]
		sub	edx, [esi+eax+4]
		push	edx
		mov	eax, 8
		imul	ecx, eax, 0
		mov	edx, 8
		shl	edx, 1
		mov	eax, [ebp+var_124]
		mov	esi, [ebp+var_124]
		mov	ecx, [eax+ecx]
		sub	ecx, [esi+edx]
		push	ecx
		call	_FT_Atan2
		add	esp, 8
		mov	[ebp+var_174], eax

loc_1329:				; CODE XREF: _FT_Stroker_ConicTo+343j
		mov	edx, [ebp+arg_0]
		add	edx, 40h ; '@'
		mov	[ebp+var_17C], edx
		mov	[ebp+var_180], 0
		jmp	short loc_135F
; ---------------------------------------------------------------------------

loc_1341:				; CODE XREF: _FT_Stroker_ConicTo:loc_16CAj
					; _FT_Stroker_ConicTo:loc_16F7j
		mov	eax, [ebp+var_180]
		add	eax, 1
		mov	[ebp+var_180], eax
		mov	ecx, [ebp+var_17C]
		add	ecx, 20h ; ' '
		mov	[ebp+var_17C], ecx

loc_135F:				; CODE XREF: _FT_Stroker_ConicTo+3AFj
		cmp	[ebp+var_180], 1
		jg	loc_16FC
		imul	edx, [ebp+var_180], 0B40000h
		mov	eax, 5A0000h
		sub	eax, edx
		mov	[ebp+var_170], eax
		mov	ecx, [ebp+var_16C]
		add	ecx, [ebp+var_170]
		push	ecx
		mov	edx, [ebp+var_178]
		push	edx
		lea	eax, [ebp+var_150]
		push	eax
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	ecx, 8
		shl	ecx, 0
		mov	edx, [ebp+var_124]
		mov	eax, [ebp+var_150]
		add	eax, [edx+ecx]
		mov	[ebp+var_150], eax
		mov	ecx, 8
		shl	ecx, 0
		mov	edx, [ebp+var_124]
		mov	eax, [ebp+var_14C]
		add	eax, [edx+ecx+4]
		mov	[ebp+var_14C], eax
		mov	ecx, [ebp+var_140]
		add	ecx, [ebp+var_170]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+3Ch]
		push	eax
		lea	ecx, [ebp+var_160]
		push	ecx
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	edx, 8
		imul	eax, edx, 0
		mov	ecx, [ebp+var_124]
		mov	edx, [ebp+var_160]
		add	edx, [ecx+eax]
		mov	[ebp+var_160], edx
		mov	eax, 8
		imul	ecx, eax, 0
		mov	edx, [ebp+var_124]
		mov	eax, [ebp+var_15C]
		add	eax, [edx+ecx+4]
		mov	[ebp+var_15C], eax
		mov	ecx, [ebp+arg_0]
		movzx	edx, byte ptr [ecx+28h]
		test	edx, edx
		jz	loc_16CF
		mov	eax, [ebp+var_17C]
		mov	ecx, [eax]
		mov	edx, [ebp+var_17C]
		mov	eax, [edx+8]
		mov	edx, [eax+ecx*8-8]
		mov	eax, [eax+ecx*8-4]
		mov	[ebp+var_18C], edx
		mov	[ebp+var_188], eax
		mov	ecx, [ebp+var_15C]
		sub	ecx, [ebp+var_188]
		push	ecx
		mov	edx, [ebp+var_160]
		sub	edx, [ebp+var_18C]
		push	edx
		call	_FT_Atan2
		add	esp, 8
		mov	[ebp+var_194], eax
		mov	eax, [ebp+var_194]
		push	eax
		mov	ecx, [ebp+var_174]
		push	ecx
		call	_FT_Angle_Diff
		add	esp, 8
		push	eax
		call	_ft_pos_abs
		add	esp, 4
		cmp	eax, 5A0000h
		jle	loc_16CF
		mov	edx, 8
		shl	edx, 1
		mov	eax, [ebp+var_124]
		mov	ecx, [eax+edx+4]
		sub	ecx, [ebp+var_188]
		push	ecx
		mov	edx, 8
		shl	edx, 1
		mov	eax, [ebp+var_124]
		mov	ecx, [eax+edx]
		sub	ecx, [ebp+var_18C]
		push	ecx
		call	_FT_Atan2
		add	esp, 8
		mov	[ebp+var_198], eax
		mov	edx, 8
		imul	eax, edx, 0
		mov	ecx, [ebp+var_124]
		mov	edx, [ecx+eax+4]
		sub	edx, [ebp+var_15C]
		push	edx
		mov	eax, 8
		imul	ecx, eax, 0
		mov	edx, [ebp+var_124]
		mov	eax, [edx+ecx]
		sub	eax, [ebp+var_160]
		push	eax
		call	_FT_Atan2
		add	esp, 8
		mov	[ebp+var_19C], eax
		mov	ecx, [ebp+var_160]
		sub	ecx, [ebp+var_18C]
		mov	[ebp+var_1A8], ecx
		mov	edx, [ebp+var_15C]
		sub	edx, [ebp+var_188]
		mov	[ebp+var_1A4], edx
		lea	eax, [ebp+var_1A8]
		push	eax
		call	_FT_Vector_Length
		add	esp, 4
		mov	[ebp+var_1C0], eax
		mov	ecx, [ebp+var_194]
		sub	ecx, [ebp+var_19C]
		push	ecx
		call	_FT_Sin
		add	esp, 4
		push	eax
		call	_ft_pos_abs
		add	esp, 4
		mov	[ebp+var_1C4], eax
		mov	edx, [ebp+var_198]
		sub	edx, [ebp+var_19C]
		push	edx
		call	_FT_Sin
		add	esp, 4
		push	eax
		call	_ft_pos_abs
		add	esp, 4
		mov	[ebp+var_1C8], eax
		mov	eax, [ebp+var_1C8]
		push	eax
		mov	ecx, [ebp+var_1C4]
		push	ecx
		mov	edx, [ebp+var_1C0]
		push	edx
		call	_FT_MulDiv
		add	esp, 0Ch
		mov	[ebp+var_1CC], eax
		mov	eax, [ebp+var_198]
		push	eax
		mov	ecx, [ebp+var_1CC]
		push	ecx
		lea	edx, [ebp+var_1B8]
		push	edx
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	eax, [ebp+var_1B8]
		add	eax, [ebp+var_18C]
		mov	[ebp+var_1B8], eax
		mov	ecx, [ebp+var_1B4]
		add	ecx, [ebp+var_188]
		mov	[ebp+var_1B4], ecx
		mov	edx, [ebp+var_17C]
		mov	byte ptr [edx+10h], 0
		push	0
		lea	eax, [ebp+var_1B8]
		push	eax
		mov	ecx, [ebp+var_17C]
		push	ecx
		call	_ft_stroke_border_lineto
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_1656
		jmp	$Exit$38
; ---------------------------------------------------------------------------

loc_1656:				; CODE XREF: _FT_Stroker_ConicTo+6BFj
		push	0
		lea	edx, [ebp+var_160]
		push	edx
		mov	eax, [ebp+var_17C]
		push	eax
		call	_ft_stroke_border_lineto
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_167C
		jmp	$Exit$38
; ---------------------------------------------------------------------------

loc_167C:				; CODE XREF: _FT_Stroker_ConicTo+6E5j
		lea	ecx, [ebp+var_18C]
		push	ecx
		lea	edx, [ebp+var_150]
		push	edx
		mov	eax, [ebp+var_17C]
		push	eax
		call	_ft_stroke_border_conicto
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_16A7
		jmp	$Exit$38
; ---------------------------------------------------------------------------

loc_16A7:				; CODE XREF: _FT_Stroker_ConicTo+710j
		push	0
		lea	ecx, [ebp+var_160]
		push	ecx
		mov	edx, [ebp+var_17C]
		push	edx
		call	_ft_stroke_border_lineto
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_16CA
		jmp	short $Exit$38
; ---------------------------------------------------------------------------

loc_16CA:				; CODE XREF: _FT_Stroker_ConicTo+736j
		jmp	loc_1341
; ---------------------------------------------------------------------------

loc_16CF:				; CODE XREF: _FT_Stroker_ConicTo+4B8j
					; _FT_Stroker_ConicTo+52Fj
		lea	eax, [ebp+var_160]
		push	eax
		lea	ecx, [ebp+var_150]
		push	ecx
		mov	edx, [ebp+var_17C]
		push	edx
		call	_ft_stroke_border_conicto
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_16F7
		jmp	short $Exit$38
; ---------------------------------------------------------------------------

loc_16F7:				; CODE XREF: _FT_Stroker_ConicTo+763j
		jmp	loc_1341
; ---------------------------------------------------------------------------

loc_16FC:				; CODE XREF: _FT_Stroker_ConicTo+3D6j
		mov	eax, [ebp+var_124]
		sub	eax, 10h
		mov	[ebp+var_124], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_140]
		mov	[ecx], edx
		jmp	loc_10FE
; ---------------------------------------------------------------------------

loc_171B:				; CODE XREF: _FT_Stroker_ConicTo+17Aj
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	edx, [eax+4]
		mov	eax, [ebp+arg_0]
		mov	[eax+8], ecx
		mov	[eax+0Ch], edx

$Exit$38:				; CODE XREF: _FT_Stroker_ConicTo+6Aj
					; _FT_Stroker_ConicTo+106j ...
		mov	eax, [ebp+var_8]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN37_0
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4
		add	esp, 1CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Stroker_ConicTo endp

; ---------------------------------------------------------------------------
		align 10h
$LN37_0		dd 8			; DATA XREF: _FT_Stroker_ConicTo+7A3o
		dd offset $LN36_0
$LN36_0		dd 0FFFFFEE4h, 110h	; DATA XREF: .text$mn:00001764o
		dd offset $LN28		; "bez_stack"
		db 0CCh
		db 0FEh, 2 dup(0FFh)
		dd 4
		dd offset $LN29		; "angle_in"
		dd 0FFFFFEC0h, 4
		dd offset $LN30		; "angle_out"
		dd 0FFFFFEB0h, 8
		dd offset $LN31		; "ctrl"
		dd 0FFFFFEA0h, 8
		dd offset $LN32		; "end"
		dd 0FFFFFE74h, 8
		dd offset $LN33		; "start"
		dd 0FFFFFE58h, 8
		dd offset $LN34		; "bvec"
		dd 0FFFFFE48h, 8
		dd offset $LN35		; "delta"
$LN35		db 'delta',0            ; DATA XREF: .text$mn:000017C4o
$LN34		db 'bvec',0             ; DATA XREF: .text$mn:000017B8o
$LN33		db 'start',0            ; DATA XREF: .text$mn:000017ACo
$LN32		db 'end',0              ; DATA XREF: .text$mn:000017A0o
$LN31		db 'ctrl',0             ; DATA XREF: .text$mn:00001794o
$LN30		db 'angle_out',0        ; DATA XREF: .text$mn:00001788o
$LN29		db 'angle_in',0         ; DATA XREF: .text$mn:0000177Co
$LN28		db 'bez_stack',0        ; DATA XREF: .text$mn:00001770o
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Stroker_CubicTo
_FT_Stroker_CubicTo proc near		; CODE XREF: _FT_Stroker_ParseOutline+3F6p
					; _FT_Stroker_ParseOutline+424p

var_20C		= dword	ptr -20Ch
var_208		= dword	ptr -208h
var_204		= dword	ptr -204h
var_200		= dword	ptr -200h
var_1F8		= dword	ptr -1F8h
var_1F4		= dword	ptr -1F4h
var_1E8		= dword	ptr -1E8h
var_1E4		= dword	ptr -1E4h
var_1DC		= dword	ptr -1DCh
var_1D8		= dword	ptr -1D8h
var_1D4		= dword	ptr -1D4h
var_1CC		= dword	ptr -1CCh
var_1C8		= dword	ptr -1C8h
var_1C0		= dword	ptr -1C0h
var_1BC		= dword	ptr -1BCh
var_1B8		= dword	ptr -1B8h
var_1B4		= dword	ptr -1B4h
var_1B0		= dword	ptr -1B0h
var_1AC		= dword	ptr -1ACh
var_1A8		= dword	ptr -1A8h
var_1A4		= dword	ptr -1A4h
var_1A0		= dword	ptr -1A0h
var_19C		= dword	ptr -19Ch
var_194		= dword	ptr -194h
var_190		= dword	ptr -190h
var_184		= dword	ptr -184h
var_180		= dword	ptr -180h
var_174		= dword	ptr -174h
var_170		= dword	ptr -170h
var_164		= dword	ptr -164h
var_158		= dword	ptr -158h
var_14C		= dword	ptr -14Ch
var_141		= byte ptr -141h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_134		= byte ptr -134h
var_34		= byte ptr -34h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 20Ch
		push	esi
		push	edi
		lea	edi, [ebp+var_20C]
		mov	ecx, 83h ; 'ƒ'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	[ebp+var_8], 0
		lea	eax, [ebp+var_34]
		mov	[ebp+var_140], eax
		mov	[ebp+var_141], 1
		cmp	[ebp+arg_0], 0
		jz	short loc_1856
		cmp	[ebp+arg_4], 0
		jz	short loc_1856
		cmp	[ebp+arg_8], 0
		jz	short loc_1856
		cmp	[ebp+arg_C], 0
		jnz	short loc_1875

loc_1856:				; CODE XREF: _FT_Stroker_CubicTo+42j
					; _FT_Stroker_CubicTo+48j ...
		push	offset $SG7869	; "..\\..\\..\\src\\base\\ftstroke.c"
		push	629h
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		mov	[ebp+var_8], eax
		jmp	$Exit$40
; ---------------------------------------------------------------------------

loc_1875:				; CODE XREF: _FT_Stroker_CubicTo+54j
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	eax, [ecx+8]
		sub	eax, [edx]
		cmp	eax, 0FFFFFFFEh
		jle	loc_1961
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	eax, [ecx+8]
		sub	eax, [edx]
		cmp	eax, 2
		jge	loc_1961
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	eax, [ecx+0Ch]
		sub	eax, [edx+4]
		cmp	eax, 0FFFFFFFEh
		jle	loc_1961
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	eax, [ecx+0Ch]
		sub	eax, [edx+4]
		cmp	eax, 2
		jge	loc_1961
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_8]
		mov	eax, [ecx]
		sub	eax, [edx]
		cmp	eax, 0FFFFFFFEh
		jle	loc_1961
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_8]
		mov	eax, [ecx]
		sub	eax, [edx]
		cmp	eax, 2
		jge	short loc_1961
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_8]
		mov	eax, [ecx+4]
		sub	eax, [edx+4]
		cmp	eax, 0FFFFFFFEh
		jle	short loc_1961
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_8]
		mov	eax, [ecx+4]
		sub	eax, [edx+4]
		cmp	eax, 2
		jge	short loc_1961
		mov	ecx, [ebp+arg_8]
		mov	edx, [ebp+arg_C]
		mov	eax, [ecx]
		sub	eax, [edx]
		cmp	eax, 0FFFFFFFEh
		jle	short loc_1961
		mov	ecx, [ebp+arg_8]
		mov	edx, [ebp+arg_C]
		mov	eax, [ecx]
		sub	eax, [edx]
		cmp	eax, 2
		jge	short loc_1961
		mov	ecx, [ebp+arg_8]
		mov	edx, [ebp+arg_C]
		mov	eax, [ecx+4]
		sub	eax, [edx+4]
		cmp	eax, 0FFFFFFFEh
		jle	short loc_1961
		mov	ecx, [ebp+arg_8]
		mov	edx, [ebp+arg_C]
		mov	eax, [ecx+4]
		sub	eax, [edx+4]
		cmp	eax, 2
		jge	short loc_1961
		mov	ecx, [ebp+arg_C]
		mov	edx, [ecx]
		mov	eax, [ecx+4]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+8], edx
		mov	[ecx+0Ch], eax
		jmp	$Exit$40
; ---------------------------------------------------------------------------

loc_1961:				; CODE XREF: _FT_Stroker_CubicTo+83j
					; _FT_Stroker_CubicTo+97j ...
		lea	edx, [ebp+var_134]
		mov	[ebp+var_13C], edx
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		mov	edx, [eax+4]
		mov	eax, 8
		imul	eax, 0
		mov	esi, [ebp+var_13C]
		mov	[esi+eax], ecx
		mov	[esi+eax+4], edx
		mov	ecx, [ebp+arg_8]
		mov	edx, [ecx]
		mov	eax, [ecx+4]
		mov	ecx, 8
		shl	ecx, 0
		mov	esi, [ebp+var_13C]
		mov	[esi+ecx], edx
		mov	[esi+ecx+4], eax
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		mov	ecx, [edx+4]
		mov	edx, 8
		shl	edx, 1
		mov	esi, [ebp+var_13C]
		mov	[esi+edx], eax
		mov	[esi+edx+4], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	edx, [eax+0Ch]
		mov	eax, 8
		imul	eax, 3
		mov	esi, [ebp+var_13C]
		mov	[esi+eax], ecx
		mov	[esi+eax+4], edx

loc_19E1:				; CODE XREF: _FT_Stroker_CubicTo+283j
					; _FT_Stroker_CubicTo+8E7j
		lea	ecx, [ebp+var_134]
		cmp	[ebp+var_13C], ecx
		jb	loc_20EC
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	[ebp+var_158], eax
		mov	ecx, [ebp+var_158]
		mov	[ebp+var_164], ecx
		mov	edx, [ebp+var_164]
		mov	[ebp+var_14C], edx
		mov	eax, [ebp+var_13C]
		cmp	eax, [ebp+var_140]
		jnb	short loc_1A88
		lea	ecx, [ebp+var_164]
		push	ecx
		lea	edx, [ebp+var_158]
		push	edx
		lea	eax, [ebp+var_14C]
		push	eax
		mov	ecx, [ebp+var_13C]
		push	ecx
		call	_ft_cubic_is_small_enough
		add	esp, 10h
		movzx	edx, al
		test	edx, edx
		jnz	short loc_1A88
		mov	eax, [ebp+arg_0]
		movzx	ecx, byte ptr [eax+14h]
		test	ecx, ecx
		jz	short loc_1A65
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_14C]
		mov	[edx], eax

loc_1A65:				; CODE XREF: _FT_Stroker_CubicTo+258j
		mov	ecx, [ebp+var_13C]
		push	ecx
		call	_ft_cubic_split
		add	esp, 4
		mov	edx, [ebp+var_13C]
		add	edx, 18h
		mov	[ebp+var_13C], edx
		jmp	loc_19E1
; ---------------------------------------------------------------------------

loc_1A88:				; CODE XREF: _FT_Stroker_CubicTo+222j
					; _FT_Stroker_CubicTo+24Dj
		movzx	eax, [ebp+var_141]
		test	eax, eax
		jz	short loc_1ADE
		mov	[ebp+var_141], 0
		mov	ecx, [ebp+arg_0]
		movzx	edx, byte ptr [ecx+14h]
		test	edx, edx
		jz	short loc_1ABF
		push	0
		mov	eax, [ebp+var_14C]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ft_stroker_subpath_start
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		jmp	short loc_1ADC
; ---------------------------------------------------------------------------

loc_1ABF:				; CODE XREF: _FT_Stroker_CubicTo+2A3j
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_14C]
		mov	[edx+4], eax
		push	0
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ft_stroker_process_corner
		add	esp, 8
		mov	[ebp+var_8], eax

loc_1ADC:				; CODE XREF: _FT_Stroker_CubicTo+2BDj
		jmp	short loc_1B54
; ---------------------------------------------------------------------------

loc_1ADE:				; CODE XREF: _FT_Stroker_CubicTo+291j
		mov	edx, [ebp+var_14C]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		call	_FT_Angle_Diff
		add	esp, 8
		push	eax
		call	_ft_pos_abs
		add	esp, 4
		cmp	eax, 5A000h
		jle	short loc_1B54
		mov	edx, 8
		imul	eax, edx, 3
		mov	ecx, [ebp+var_13C]
		mov	edx, [ecx+eax]
		mov	eax, [ecx+eax+4]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+8], edx
		mov	[ecx+0Ch], eax
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_14C]
		mov	[edx+4], eax
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+30h], 0
		push	0
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ft_stroker_process_corner
		add	esp, 8
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+34h]
		mov	[eax+30h], edx

loc_1B54:				; CODE XREF: _FT_Stroker_CubicTo:loc_1ADCj
					; _FT_Stroker_CubicTo+301j
		cmp	[ebp+var_8], 0
		jz	short loc_1B5F
		jmp	$Exit$40
; ---------------------------------------------------------------------------

loc_1B5F:				; CODE XREF: _FT_Stroker_CubicTo+358j
		mov	[ebp+var_1B0], 0
		mov	eax, [ebp+var_158]
		push	eax
		mov	ecx, [ebp+var_14C]
		push	ecx
		call	_FT_Angle_Diff
		add	esp, 8
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_19C], eax
		mov	edx, [ebp+var_164]
		push	edx
		mov	eax, [ebp+var_158]
		push	eax
		call	_FT_Angle_Diff
		add	esp, 8
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_1A4], eax
		mov	ecx, [ebp+var_158]
		push	ecx
		mov	edx, [ebp+var_14C]
		push	edx
		call	_ft_angle_mean
		add	esp, 8
		mov	[ebp+var_1A0], eax
		mov	eax, [ebp+var_164]
		push	eax
		mov	ecx, [ebp+var_158]
		push	ecx
		call	_ft_angle_mean
		add	esp, 8
		mov	[ebp+var_1A8], eax
		mov	edx, [ebp+var_19C]
		push	edx
		call	_FT_Cos
		add	esp, 4
		push	eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+3Ch]
		push	ecx
		call	_FT_DivFix
		add	esp, 8
		mov	[ebp+var_1B4], eax
		mov	edx, [ebp+var_1A4]
		push	edx
		call	_FT_Cos
		add	esp, 4
		push	eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+3Ch]
		push	ecx
		call	_FT_DivFix
		add	esp, 8
		mov	[ebp+var_1B8], eax
		mov	edx, [ebp+arg_0]
		movzx	eax, byte ptr [edx+28h]
		test	eax, eax
		jz	short loc_1C8E
		mov	ecx, 8
		imul	edx, ecx, 0
		mov	eax, 8
		imul	ecx, eax, 3
		mov	eax, [ebp+var_13C]
		mov	esi, [ebp+var_13C]
		mov	edx, [eax+edx+4]
		sub	edx, [esi+ecx+4]
		push	edx
		mov	eax, 8
		imul	ecx, eax, 0
		mov	edx, 8
		imul	eax, edx, 3
		mov	edx, [ebp+var_13C]
		mov	esi, [ebp+var_13C]
		mov	ecx, [edx+ecx]
		sub	ecx, [esi+eax]
		push	ecx
		call	_FT_Atan2
		add	esp, 8
		mov	[ebp+var_1B0], eax

loc_1C8E:				; CODE XREF: _FT_Stroker_CubicTo+436j
		mov	edx, [ebp+arg_0]
		add	edx, 40h ; '@'
		mov	[ebp+var_1BC], edx
		mov	[ebp+var_1C0], 0
		jmp	short loc_1CC4
; ---------------------------------------------------------------------------

loc_1CA6:				; CODE XREF: _FT_Stroker_CubicTo:loc_2094j
					; _FT_Stroker_CubicTo:loc_20C8j
		mov	eax, [ebp+var_1C0]
		add	eax, 1
		mov	[ebp+var_1C0], eax
		mov	ecx, [ebp+var_1BC]
		add	ecx, 20h ; ' '
		mov	[ebp+var_1BC], ecx

loc_1CC4:				; CODE XREF: _FT_Stroker_CubicTo+4A4j
		cmp	[ebp+var_1C0], 1
		jg	loc_20CD
		imul	edx, [ebp+var_1C0], 0B40000h
		mov	eax, 5A0000h
		sub	eax, edx
		mov	[ebp+var_1AC], eax
		mov	ecx, [ebp+var_1A0]
		add	ecx, [ebp+var_1AC]
		push	ecx
		mov	edx, [ebp+var_1B4]
		push	edx
		lea	eax, [ebp+var_174]
		push	eax
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	ecx, 8
		shl	ecx, 1
		mov	edx, [ebp+var_13C]
		mov	eax, [ebp+var_174]
		add	eax, [edx+ecx]
		mov	[ebp+var_174], eax
		mov	ecx, 8
		shl	ecx, 1
		mov	edx, [ebp+var_13C]
		mov	eax, [ebp+var_170]
		add	eax, [edx+ecx+4]
		mov	[ebp+var_170], eax
		mov	ecx, [ebp+var_1A8]
		add	ecx, [ebp+var_1AC]
		push	ecx
		mov	edx, [ebp+var_1B8]
		push	edx
		lea	eax, [ebp+var_184]
		push	eax
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	ecx, 8
		shl	ecx, 0
		mov	edx, [ebp+var_13C]
		mov	eax, [ebp+var_184]
		add	eax, [edx+ecx]
		mov	[ebp+var_184], eax
		mov	ecx, 8
		shl	ecx, 0
		mov	edx, [ebp+var_13C]
		mov	eax, [ebp+var_180]
		add	eax, [edx+ecx+4]
		mov	[ebp+var_180], eax
		mov	ecx, [ebp+var_164]
		add	ecx, [ebp+var_1AC]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+3Ch]
		push	eax
		lea	ecx, [ebp+var_194]
		push	ecx
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	edx, 8
		imul	eax, edx, 0
		mov	ecx, [ebp+var_13C]
		mov	edx, [ebp+var_194]
		add	edx, [ecx+eax]
		mov	[ebp+var_194], edx
		mov	eax, 8
		imul	ecx, eax, 0
		mov	edx, [ebp+var_13C]
		mov	eax, [ebp+var_190]
		add	eax, [edx+ecx+4]
		mov	[ebp+var_190], eax
		mov	ecx, [ebp+arg_0]
		movzx	edx, byte ptr [ecx+28h]
		test	edx, edx
		jz	loc_2099
		mov	eax, [ebp+var_1BC]
		mov	ecx, [eax]
		mov	edx, [ebp+var_1BC]
		mov	eax, [edx+8]
		mov	edx, [eax+ecx*8-8]
		mov	eax, [eax+ecx*8-4]
		mov	[ebp+var_1CC], edx
		mov	[ebp+var_1C8], eax
		mov	ecx, [ebp+var_190]
		sub	ecx, [ebp+var_1C8]
		push	ecx
		mov	edx, [ebp+var_194]
		sub	edx, [ebp+var_1CC]
		push	edx
		call	_FT_Atan2
		add	esp, 8
		mov	[ebp+var_1D4], eax
		mov	eax, [ebp+var_1D4]
		push	eax
		mov	ecx, [ebp+var_1B0]
		push	ecx
		call	_FT_Angle_Diff
		add	esp, 8
		push	eax
		call	_ft_pos_abs
		add	esp, 4
		cmp	eax, 5A0000h
		jle	loc_2099
		mov	edx, 8
		imul	eax, edx, 3
		mov	ecx, [ebp+var_13C]
		mov	edx, [ecx+eax+4]
		sub	edx, [ebp+var_1C8]
		push	edx
		mov	eax, 8
		imul	ecx, eax, 3
		mov	edx, [ebp+var_13C]
		mov	eax, [edx+ecx]
		sub	eax, [ebp+var_1CC]
		push	eax
		call	_FT_Atan2
		add	esp, 8
		mov	[ebp+var_1D8], eax
		mov	ecx, 8
		imul	edx, ecx, 0
		mov	eax, [ebp+var_13C]
		mov	ecx, [eax+edx+4]
		sub	ecx, [ebp+var_190]
		push	ecx
		mov	edx, 8
		imul	eax, edx, 0
		mov	ecx, [ebp+var_13C]
		mov	edx, [ecx+eax]
		sub	edx, [ebp+var_194]
		push	edx
		call	_FT_Atan2
		add	esp, 8
		mov	[ebp+var_1DC], eax
		mov	eax, [ebp+var_194]
		sub	eax, [ebp+var_1CC]
		mov	[ebp+var_1E8], eax
		mov	ecx, [ebp+var_190]
		sub	ecx, [ebp+var_1C8]
		mov	[ebp+var_1E4], ecx
		lea	edx, [ebp+var_1E8]
		push	edx
		call	_FT_Vector_Length
		add	esp, 4
		mov	[ebp+var_200], eax
		mov	eax, [ebp+var_1D4]
		sub	eax, [ebp+var_1DC]
		push	eax
		call	_FT_Sin
		add	esp, 4
		push	eax
		call	_ft_pos_abs
		add	esp, 4
		mov	[ebp+var_204], eax
		mov	ecx, [ebp+var_1D8]
		sub	ecx, [ebp+var_1DC]
		push	ecx
		call	_FT_Sin
		add	esp, 4
		push	eax
		call	_ft_pos_abs
		add	esp, 4
		mov	[ebp+var_208], eax
		mov	edx, [ebp+var_208]
		push	edx
		mov	eax, [ebp+var_204]
		push	eax
		mov	ecx, [ebp+var_200]
		push	ecx
		call	_FT_MulDiv
		add	esp, 0Ch
		mov	[ebp+var_20C], eax
		mov	edx, [ebp+var_1D8]
		push	edx
		mov	eax, [ebp+var_20C]
		push	eax
		lea	ecx, [ebp+var_1F8]
		push	ecx
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	edx, [ebp+var_1F8]
		add	edx, [ebp+var_1CC]
		mov	[ebp+var_1F8], edx
		mov	eax, [ebp+var_1F4]
		add	eax, [ebp+var_1C8]
		mov	[ebp+var_1F4], eax
		mov	ecx, [ebp+var_1BC]
		mov	byte ptr [ecx+10h], 0
		push	0
		lea	edx, [ebp+var_1F8]
		push	edx
		mov	eax, [ebp+var_1BC]
		push	eax
		call	_ft_stroke_border_lineto
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_2019
		jmp	$Exit$40
; ---------------------------------------------------------------------------

loc_2019:				; CODE XREF: _FT_Stroker_CubicTo+812j
		push	0
		lea	ecx, [ebp+var_194]
		push	ecx
		mov	edx, [ebp+var_1BC]
		push	edx
		call	_ft_stroke_border_lineto
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_203F
		jmp	$Exit$40
; ---------------------------------------------------------------------------

loc_203F:				; CODE XREF: _FT_Stroker_CubicTo+838j
		lea	eax, [ebp+var_1CC]
		push	eax
		lea	ecx, [ebp+var_174]
		push	ecx
		lea	edx, [ebp+var_184]
		push	edx
		mov	eax, [ebp+var_1BC]
		push	eax
		call	_ft_stroke_border_cubicto
		add	esp, 10h
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_2071
		jmp	$Exit$40
; ---------------------------------------------------------------------------

loc_2071:				; CODE XREF: _FT_Stroker_CubicTo+86Aj
		push	0
		lea	ecx, [ebp+var_194]
		push	ecx
		mov	edx, [ebp+var_1BC]
		push	edx
		call	_ft_stroke_border_lineto
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_2094
		jmp	short $Exit$40
; ---------------------------------------------------------------------------

loc_2094:				; CODE XREF: _FT_Stroker_CubicTo+890j
		jmp	loc_1CA6
; ---------------------------------------------------------------------------

loc_2099:				; CODE XREF: _FT_Stroker_CubicTo+609j
					; _FT_Stroker_CubicTo+680j
		lea	eax, [ebp+var_194]
		push	eax
		lea	ecx, [ebp+var_184]
		push	ecx
		lea	edx, [ebp+var_174]
		push	edx
		mov	eax, [ebp+var_1BC]
		push	eax
		call	_ft_stroke_border_cubicto
		add	esp, 10h
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_20C8
		jmp	short $Exit$40
; ---------------------------------------------------------------------------

loc_20C8:				; CODE XREF: _FT_Stroker_CubicTo+8C4j
		jmp	loc_1CA6
; ---------------------------------------------------------------------------

loc_20CD:				; CODE XREF: _FT_Stroker_CubicTo+4CBj
		mov	ecx, [ebp+var_13C]
		sub	ecx, 18h
		mov	[ebp+var_13C], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_164]
		mov	[edx], eax
		jmp	loc_19E1
; ---------------------------------------------------------------------------

loc_20EC:				; CODE XREF: _FT_Stroker_CubicTo+1EDj
		mov	ecx, [ebp+arg_C]
		mov	edx, [ecx]
		mov	eax, [ecx+4]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+8], edx
		mov	[ecx+0Ch], eax

$Exit$40:				; CODE XREF: _FT_Stroker_CubicTo+70j
					; _FT_Stroker_CubicTo+15Cj ...
		mov	eax, [ebp+var_8]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN39_0
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4
		add	esp, 20Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Stroker_CubicTo endp

; ---------------------------------------------------------------------------
		align 10h
$LN39_0		dd 0Ah			; DATA XREF: _FT_Stroker_CubicTo+904o
		dd offset $LN38_0
$LN38_0		db 0CCh			; DATA XREF: .text$mn:00002134o
		db 0FEh, 2 dup(0FFh)
		dd offset $SG7573+8	; "\\src\\base\\ftstroke.c"
		dd offset $LN28_0	; "bez_stack"
		dd 0FFFFFEB4h, 4
		dd offset $LN29_0	; "angle_in"
		dd 0FFFFFEA8h, 4
		dd offset $LN30_0	; "angle_mid"
		dd 0FFFFFE9Ch, 4
		dd offset $LN31_0	; "angle_out"
		dd 0FFFFFE8Ch, 8
		dd offset $LN32_0	; "ctrl1"
		dd 0FFFFFE7Ch, 8
		dd offset $LN33_0	; "ctrl2"
		dd 0FFFFFE6Ch, 8
		dd offset $LN34_0	; "end"
		dd 0FFFFFE34h, 8
		dd offset $LN35_0	; "start"
		dd 0FFFFFE18h, 8
		dd offset $LN36_1	; "bvec"
		dd 0FFFFFE08h, 8
		dd offset $LN37_1	; "delta"
$LN37_1		db 'delta',0            ; DATA XREF: .text$mn:000021ACo
$LN36_1		db 'bvec',0             ; DATA XREF: .text$mn:000021A0o
$LN35_0		db 'start',0            ; DATA XREF: .text$mn:00002194o
$LN34_0		db 'end',0              ; DATA XREF: .text$mn:00002188o
$LN33_0		db 'ctrl2',0            ; DATA XREF: .text$mn:0000217Co
$LN32_0		db 'ctrl1',0            ; DATA XREF: .text$mn:00002170o
$LN31_0		db 'angle_out',0        ; DATA XREF: .text$mn:00002164o
$LN30_0		db 'angle_mid',0        ; DATA XREF: .text$mn:00002158o
$LN29_0		db 'angle_in',0         ; DATA XREF: .text$mn:0000214Co
$LN28_0		db 'bez_stack',0        ; DATA XREF: .text$mn:00002140o
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Stroker_GetBorderCounts
_FT_Stroker_GetBorderCounts proc near	; CODE XREF: _FT_Glyph_StrokeBorder+F0p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_8], 0
		mov	[ebp+var_14], 0
		cmp	[ebp+arg_0], 0
		jz	short loc_223A
		cmp	[ebp+arg_4], 1
		jle	short loc_2256

loc_223A:				; CODE XREF: _FT_Stroker_GetBorderCounts+32j
		push	offset $SG8000	; "..\\..\\..\\src\\base\\ftstroke.c"
		push	7C4h
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		mov	[ebp+var_1C], eax
		jmp	short $Exit$11
; ---------------------------------------------------------------------------

loc_2256:				; CODE XREF: _FT_Stroker_GetBorderCounts+38j
		lea	eax, [ebp+var_14]
		push	eax
		lea	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		shl	edx, 5
		mov	eax, [ebp+arg_0]
		lea	ecx, [eax+edx+40h]
		push	ecx
		call	_ft_stroke_border_get_counts
		add	esp, 0Ch
		mov	[ebp+var_1C], eax

$Exit$11:				; CODE XREF: _FT_Stroker_GetBorderCounts+54j
		cmp	[ebp+arg_8], 0
		jz	short loc_2285
		mov	edx, [ebp+arg_8]
		mov	eax, [ebp+var_8]
		mov	[edx], eax

loc_2285:				; CODE XREF: _FT_Stroker_GetBorderCounts+7Bj
		cmp	[ebp+arg_C], 0
		jz	short loc_2293
		mov	ecx, [ebp+arg_C]
		mov	edx, [ebp+var_14]
		mov	[ecx], edx

loc_2293:				; CODE XREF: _FT_Stroker_GetBorderCounts+89j
		mov	eax, [ebp+var_1C]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN10
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		add	esp, 1Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Stroker_GetBorderCounts endp

; ---------------------------------------------------------------------------
		align 4
$LN10		dd 2			; DATA XREF: _FT_Stroker_GetBorderCounts+9Ao
		dd offset $LN9
$LN9		dd 0FFFFFFF8h, 4	; DATA XREF: .text$mn:000022BCo
		dd offset $LN7_0	; "num_points"
		dd 0FFFFFFECh, 4
		dd offset $LN8_0	; "num_contours"
$LN8_0		db 'num_contours',0     ; DATA XREF: .text$mn:000022D4o
$LN7_0		db 'num_points',0       ; DATA XREF: .text$mn:000022C8o

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Stroker_ExportBorder
_FT_Stroker_ExportBorder proc near	; CODE XREF: _FT_Stroker_Export+Dp
					; _FT_Stroker_Export+1Fp ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		cmp	[ebp+arg_0], 0
		jz	short loc_2307
		cmp	[ebp+arg_8], 0
		jnz	short loc_2309

loc_2307:				; CODE XREF: _FT_Stroker_ExportBorder+Fj
		jmp	short loc_2340
; ---------------------------------------------------------------------------

loc_2309:				; CODE XREF: _FT_Stroker_ExportBorder+15j
		cmp	[ebp+arg_4], 0
		jz	short loc_2315
		cmp	[ebp+arg_4], 1
		jnz	short loc_2340

loc_2315:				; CODE XREF: _FT_Stroker_ExportBorder+1Dj
		mov	eax, [ebp+arg_4]
		shl	eax, 5
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax+40h]
		mov	[ebp+var_4], edx
		mov	eax, [ebp+var_4]
		movzx	ecx, byte ptr [eax+1Ch]
		test	ecx, ecx
		jz	short loc_2340
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		call	_ft_stroke_border_export
		add	esp, 8

loc_2340:				; CODE XREF: _FT_Stroker_ExportBorder:loc_2307j
					; _FT_Stroker_ExportBorder+23j	...
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Stroker_ExportBorder endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Stroker_GetCounts
_FT_Stroker_GetCounts proc near		; CODE XREF: _FT_Glyph_Stroke+BFp

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 3Ch
		push	edi
		lea	edi, [ebp+var_3C]
		mov	ecx, 0Fh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_1C], 0
		mov	[ebp+var_38], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_2396
		push	offset $SG8019	; "..\\..\\..\\src\\base\\ftstroke.c"
		push	7E3h
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		mov	[ebp+var_3C], eax
		jmp	short $Exit$14
; ---------------------------------------------------------------------------

loc_2396:				; CODE XREF: _FT_Stroker_GetCounts+28j
		lea	eax, [ebp+var_14]
		push	eax
		lea	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+arg_0]
		add	edx, 40h ; '@'
		push	edx
		call	_ft_stroke_border_get_counts
		add	esp, 0Ch
		mov	[ebp+var_3C], eax
		cmp	[ebp+var_3C], 0
		jz	short loc_23B8
		jmp	short $Exit$14
; ---------------------------------------------------------------------------

loc_23B8:				; CODE XREF: _FT_Stroker_GetCounts+64j
		lea	eax, [ebp+var_30]
		push	eax
		lea	ecx, [ebp+var_24]
		push	ecx
		mov	edx, [ebp+arg_0]
		add	edx, 60h ; '`'
		push	edx
		call	_ft_stroke_border_get_counts
		add	esp, 0Ch
		mov	[ebp+var_3C], eax
		cmp	[ebp+var_3C], 0
		jz	short loc_23DA
		jmp	short $Exit$14
; ---------------------------------------------------------------------------

loc_23DA:				; CODE XREF: _FT_Stroker_GetCounts+86j
		mov	eax, [ebp+var_8]
		add	eax, [ebp+var_24]
		mov	[ebp+var_1C], eax
		mov	ecx, [ebp+var_14]
		add	ecx, [ebp+var_30]
		mov	[ebp+var_38], ecx

$Exit$14:				; CODE XREF: _FT_Stroker_GetCounts+44j
					; _FT_Stroker_GetCounts+66j ...
		cmp	[ebp+arg_4], 0
		jz	short loc_23FA
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+var_1C]
		mov	[edx], eax

loc_23FA:				; CODE XREF: _FT_Stroker_GetCounts+A0j
		cmp	[ebp+arg_8], 0
		jz	short loc_2408
		mov	ecx, [ebp+arg_8]
		mov	edx, [ebp+var_38]
		mov	[ecx], edx

loc_2408:				; CODE XREF: _FT_Stroker_GetCounts+AEj
		mov	eax, [ebp+var_3C]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN13
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		add	esp, 3Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Stroker_GetCounts endp

; ---------------------------------------------------------------------------
		align 4
$LN13		dd 4			; DATA XREF: _FT_Stroker_GetCounts+BFo
		dd offset $LN12
$LN12		dd 0FFFFFFF8h, 4	; DATA XREF: .text$mn:00002430o
		dd offset $LN8_1	; "count1"
		dd 0FFFFFFECh, 4
		dd offset $LN9_0	; "count2"
		dd 0FFFFFFDCh, 4
		dd offset $LN10_0	; "count3"
		dd 0FFFFFFD0h, 4
		dd offset $LN11		; "count4"
$LN11		db 'count4',0           ; DATA XREF: .text$mn:00002460o
$LN10_0		db 'count3',0           ; DATA XREF: .text$mn:00002454o
$LN9_0		db 'count2',0           ; DATA XREF: .text$mn:00002448o
$LN8_1		db 'count1',0           ; DATA XREF: .text$mn:0000243Co

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Stroker_Export
_FT_Stroker_Export proc	near		; CODE XREF: _FT_Glyph_Stroke+117p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		push	eax
		push	0
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_FT_Stroker_ExportBorder
		add	esp, 0Ch
		mov	edx, [ebp+arg_4]
		push	edx
		push	1
		mov	eax, [ebp+arg_0]
		push	eax
		call	_FT_Stroker_ExportBorder
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_FT_Stroker_Export endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Stroker_Done
_FT_Stroker_Done proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		cmp	[ebp+arg_0], 0
		jz	short loc_2527
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+80h]
		mov	edx, [ecx]
		mov	[ebp+var_4], edx
		mov	eax, 20h ; ' '
		imul	ecx, eax, 0
		mov	edx, [ebp+arg_0]
		lea	eax, [edx+ecx+40h]
		push	eax
		call	_ft_stroke_border_done
		add	esp, 4
		mov	ecx, 20h ; ' '
		shl	ecx, 0
		mov	edx, [ebp+arg_0]
		lea	eax, [edx+ecx+40h]
		push	eax
		call	_ft_stroke_border_done
		add	esp, 4
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+80h], 0

loc_250C:				; CODE XREF: _FT_Stroker_Done+75j
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		call	_ft_mem_free
		add	esp, 8
		mov	[ebp+arg_0], 0
		xor	ecx, ecx
		jnz	short loc_250C

loc_2527:				; CODE XREF: _FT_Stroker_Done+Fj
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Stroker_Done endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Glyph_Stroke
_FT_Glyph_Stroke proc near

var_38		= byte ptr -38h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		push	edi
		lea	edi, [ebp+var_38]
		mov	ecx, 0Eh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_4], 6
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+80h]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+var_C]
		mov	[ebp+var_C], edx
		cmp	[ebp+arg_0], 0
		jnz	short loc_2581
		jmp	$Exit$16_0
; ---------------------------------------------------------------------------

loc_2581:				; CODE XREF: _FT_Glyph_Stroke+3Aj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		cmp	[ebp+var_8], 0
		jz	short loc_259B
		mov	edx, [ebp+var_8]
		cmp	dword ptr [edx+4], offset _ft_outline_glyph_class
		jz	short loc_25A0

loc_259B:				; CODE XREF: _FT_Glyph_Stroke+4Dj
		jmp	$Exit$16_0
; ---------------------------------------------------------------------------

loc_25A0:				; CODE XREF: _FT_Glyph_Stroke+59j
		lea	eax, [ebp+var_14]
		push	eax
		mov	ecx, [ebp+var_8]
		push	ecx
		call	_FT_Glyph_Copy
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_25BE
		jmp	$Exit$16_0
; ---------------------------------------------------------------------------

loc_25BE:				; CODE XREF: _FT_Glyph_Stroke+77j
		mov	edx, [ebp+var_14]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		mov	ecx, [ebp+var_1C]
		add	ecx, 14h
		mov	[ebp+var_20], ecx
		push	0
		mov	edx, [ebp+var_20]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		call	_FT_Stroker_ParseOutline
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_25F3
		jmp	$Fail$17
; ---------------------------------------------------------------------------

loc_25F3:				; CODE XREF: _FT_Glyph_Stroke+ACj
		lea	ecx, [ebp+var_34]
		push	ecx
		lea	edx, [ebp+var_28]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		call	_FT_Stroker_GetCounts
		add	esp, 0Ch
		mov	ecx, [ebp+var_20]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		push	eax
		call	_FT_Outline_Done
		add	esp, 8
		mov	ecx, [ebp+var_20]
		push	ecx
		mov	edx, [ebp+var_34]
		push	edx
		mov	eax, [ebp+var_28]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		push	edx
		call	_FT_Outline_New
		add	esp, 10h
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_263E
		jmp	short $Fail$17
; ---------------------------------------------------------------------------

loc_263E:				; CODE XREF: _FT_Glyph_Stroke+FAj
		xor	eax, eax
		mov	ecx, [ebp+var_20]
		mov	[ecx+2], ax
		xor	edx, edx
		mov	eax, [ebp+var_20]
		mov	[eax], dx
		mov	ecx, [ebp+var_20]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		call	_FT_Stroker_Export
		add	esp, 8
		movzx	eax, [ebp+arg_8]
		test	eax, eax
		jz	short loc_2675
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		push	edx
		call	_FT_Done_Glyph
		add	esp, 4

loc_2675:				; CODE XREF: _FT_Glyph_Stroke+125j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		mov	[eax], ecx
		jmp	short $Exit$16_0
; ---------------------------------------------------------------------------

$Fail$17:				; CODE XREF: _FT_Glyph_Stroke+AEj
					; _FT_Glyph_Stroke+FCj
		mov	edx, [ebp+var_8]
		push	edx
		call	_FT_Done_Glyph
		add	esp, 4
		mov	[ebp+var_8], 0
		movzx	eax, [ebp+arg_8]
		test	eax, eax
		jnz	short $Exit$16_0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx], 0

$Exit$16_0:				; CODE XREF: _FT_Glyph_Stroke+3Cj
					; _FT_Glyph_Stroke:loc_259Bj ...
		mov	eax, [ebp+var_4]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN15_0
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		add	esp, 38h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Glyph_Stroke endp

; ---------------------------------------------------------------------------
		align 4
$LN15_0		dd 3			; DATA XREF: _FT_Glyph_Stroke+16Ao
		dd offset $LN14_0
$LN14_0		dd 0FFFFFFECh, 4	; DATA XREF: .text$mn:000026CCo
		dd offset $LN11_0	; "copy"
		dd 0FFFFFFD8h, 4
		dd offset $LN12_0	; "num_points"
		db 0CCh
		db 3 dup(0FFh)
		dd 4
		dd offset $LN13_0	; "num_contours"
$LN13_0		db 'num_contours',0     ; DATA XREF: .text$mn:000026F0o
$LN12_0		db 'num_points',0       ; DATA XREF: .text$mn:000026E4o
$LN11_0		db 'copy',0             ; DATA XREF: .text$mn:000026D8o
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Glyph_StrokeBorder
_FT_Glyph_StrokeBorder proc near

var_3C		= byte ptr -3Ch
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 3Ch
		push	edi
		lea	edi, [ebp+var_3C]
		mov	ecx, 0Fh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_4], 6
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+80h]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+var_C]
		mov	[ebp+var_C], edx
		cmp	[ebp+arg_0], 0
		jnz	short loc_2761
		jmp	$Exit$19
; ---------------------------------------------------------------------------

loc_2761:				; CODE XREF: _FT_Glyph_StrokeBorder+3Aj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		cmp	[ebp+var_8], 0
		jz	short loc_277B
		mov	edx, [ebp+var_8]
		cmp	dword ptr [edx+4], offset _ft_outline_glyph_class
		jz	short loc_2780

loc_277B:				; CODE XREF: _FT_Glyph_StrokeBorder+4Dj
		jmp	$Exit$19
; ---------------------------------------------------------------------------

loc_2780:				; CODE XREF: _FT_Glyph_StrokeBorder+59j
		lea	eax, [ebp+var_14]
		push	eax
		mov	ecx, [ebp+var_8]
		push	ecx
		call	_FT_Glyph_Copy
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_279E
		jmp	$Exit$19
; ---------------------------------------------------------------------------

loc_279E:				; CODE XREF: _FT_Glyph_StrokeBorder+77j
		mov	edx, [ebp+var_14]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_8]
		mov	[ebp+var_1C], eax
		mov	ecx, [ebp+var_1C]
		add	ecx, 14h
		mov	[ebp+var_24], ecx
		mov	edx, [ebp+var_24]
		push	edx
		call	_FT_Outline_GetOutsideBorder
		add	esp, 4
		mov	[ebp+var_20], eax
		movzx	eax, [ebp+arg_8]
		test	eax, eax
		jz	short loc_27E0
		cmp	[ebp+var_20], 0
		jnz	short loc_27D9
		mov	[ebp+var_20], 1
		jmp	short loc_27E0
; ---------------------------------------------------------------------------

loc_27D9:				; CODE XREF: _FT_Glyph_StrokeBorder+AEj
		mov	[ebp+var_20], 0

loc_27E0:				; CODE XREF: _FT_Glyph_StrokeBorder+A8j
					; _FT_Glyph_StrokeBorder+B7j
		push	0
		mov	ecx, [ebp+var_24]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		call	_FT_Stroker_ParseOutline
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_2800
		jmp	$Fail$20
; ---------------------------------------------------------------------------

loc_2800:				; CODE XREF: _FT_Glyph_StrokeBorder+D9j
		lea	eax, [ebp+var_38]
		push	eax
		lea	ecx, [ebp+var_2C]
		push	ecx
		mov	edx, [ebp+var_20]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		call	_FT_Stroker_GetBorderCounts
		add	esp, 10h
		mov	ecx, [ebp+var_24]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		push	eax
		call	_FT_Outline_Done
		add	esp, 8
		mov	ecx, [ebp+var_24]
		push	ecx
		mov	edx, [ebp+var_38]
		push	edx
		mov	eax, [ebp+var_2C]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		push	edx
		call	_FT_Outline_New
		add	esp, 10h
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_284F
		jmp	short $Fail$20
; ---------------------------------------------------------------------------

loc_284F:				; CODE XREF: _FT_Glyph_StrokeBorder+12Bj
		xor	eax, eax
		mov	ecx, [ebp+var_24]
		mov	[ecx+2], ax
		xor	edx, edx
		mov	eax, [ebp+var_24]
		mov	[eax], dx
		mov	ecx, [ebp+var_24]
		push	ecx
		mov	edx, [ebp+var_20]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		call	_FT_Stroker_ExportBorder
		add	esp, 0Ch
		movzx	ecx, [ebp+arg_C]
		test	ecx, ecx
		jz	short loc_288A
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		push	eax
		call	_FT_Done_Glyph
		add	esp, 4

loc_288A:				; CODE XREF: _FT_Glyph_StrokeBorder+15Aj
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_8]
		mov	[ecx], edx
		jmp	short $Exit$19
; ---------------------------------------------------------------------------

$Fail$20:				; CODE XREF: _FT_Glyph_StrokeBorder+DBj
					; _FT_Glyph_StrokeBorder+12Dj
		mov	eax, [ebp+var_8]
		push	eax
		call	_FT_Done_Glyph
		add	esp, 4
		mov	[ebp+var_8], 0
		movzx	ecx, [ebp+arg_C]
		test	ecx, ecx
		jnz	short $Exit$19
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx], 0

$Exit$19:				; CODE XREF: _FT_Glyph_StrokeBorder+3Cj
					; _FT_Glyph_StrokeBorder:loc_277Bj ...
		mov	eax, [ebp+var_4]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN18
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		add	esp, 3Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Glyph_StrokeBorder endp

; ---------------------------------------------------------------------------
		align 4
$LN18		dd 3			; DATA XREF: _FT_Glyph_StrokeBorder+19Fo
		dd offset $LN17_0
$LN17_0		dd 0FFFFFFECh, 4	; DATA XREF: .text$mn:000028E0o
		dd offset $LN14_1	; "copy"
		dd 0FFFFFFD4h, 4
		dd offset $LN15_1	; "num_points"
		dd 0FFFFFFC8h, 4
		dd offset $LN16_0	; "num_contours"
$LN16_0		db 'num_contours',0     ; DATA XREF: .text$mn:00002904o
$LN15_1		db 'num_points',0       ; DATA XREF: .text$mn:000028F8o
$LN14_1		db 'copy',0             ; DATA XREF: .text$mn:000028ECo
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_pos_abs	proc near		; CODE XREF: _FT_Stroker_ConicTo+26Ep
					; _FT_Stroker_ConicTo+522p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		cmp	[ebp+arg_0], 0
		jl	short loc_2949
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_4], eax
		jmp	short loc_2951
; ---------------------------------------------------------------------------

loc_2949:				; CODE XREF: _ft_pos_abs+Fj
		mov	ecx, [ebp+arg_0]
		neg	ecx
		mov	[ebp+var_4], ecx

loc_2951:				; CODE XREF: _ft_pos_abs+17j
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
_ft_pos_abs	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_conic_split	proc near		; CODE XREF: _FT_Stroker_ConicTo+1E6p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, 8
		shl	eax, 1
		mov	ecx, 8
		shl	ecx, 2
		mov	edx, [ebp+arg_0]
		mov	esi, [ebp+arg_0]
		mov	eax, [esi+eax]
		mov	[edx+ecx], eax
		mov	ecx, 8
		shl	ecx, 0
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+ecx]
		mov	[ebp+var_8], eax
		mov	ecx, 8
		shl	ecx, 1
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+ecx]
		add	eax, [ebp+var_8]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_C], eax
		mov	eax, 8
		imul	ecx, eax, 3
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_C]
		mov	[edx+ecx], eax
		mov	ecx, [ebp+var_C]
		mov	[ebp+var_4], ecx
		mov	edx, 8
		imul	eax, edx, 0
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx+eax]
		add	eax, [ebp+var_8]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_10], eax
		mov	edx, 8
		shl	edx, 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_10]
		mov	[eax+edx], ecx
		mov	edx, [ebp+var_10]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_4]
		add	eax, [ebp+var_8]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	ecx, 8
		shl	ecx, 1
		mov	edx, [ebp+arg_0]
		mov	[edx+ecx], eax
		mov	eax, 8
		shl	eax, 1
		mov	ecx, 8
		shl	ecx, 2
		mov	edx, [ebp+arg_0]
		mov	esi, [ebp+arg_0]
		mov	eax, [esi+eax+4]
		mov	[edx+ecx+4], eax
		mov	ecx, 8
		shl	ecx, 0
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+ecx+4]
		mov	[ebp+var_8], eax
		mov	ecx, 8
		shl	ecx, 1
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+ecx+4]
		add	eax, [ebp+var_8]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_14], eax
		mov	eax, 8
		imul	ecx, eax, 3
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_14]
		mov	[edx+ecx+4], eax
		mov	ecx, [ebp+var_14]
		mov	[ebp+var_4], ecx
		mov	edx, 8
		imul	eax, edx, 0
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx+eax+4]
		add	eax, [ebp+var_8]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_18], eax
		mov	edx, 8
		shl	edx, 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_18]
		mov	[eax+edx+4], ecx
		mov	edx, [ebp+var_18]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_4]
		add	eax, [ebp+var_8]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	ecx, 8
		shl	ecx, 1
		mov	edx, [ebp+arg_0]
		mov	[edx+ecx+4], eax
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
_ft_conic_split	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_conic_is_small_enough proc near	; CODE XREF: _FT_Stroker_ConicTo+1BAp

var_38		= byte ptr -38h
var_35		= byte ptr -35h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		push	esi
		push	edi
		lea	edi, [ebp+var_38]
		mov	ecx, 0Eh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, 8
		shl	eax, 0
		mov	ecx, 8
		shl	ecx, 1
		mov	edx, [ebp+arg_0]
		mov	esi, [ebp+arg_0]
		mov	eax, [edx+eax]
		sub	eax, [esi+ecx]
		mov	[ebp+var_C], eax
		mov	ecx, 8
		shl	ecx, 0
		mov	edx, 8
		shl	edx, 1
		mov	eax, [ebp+arg_0]
		mov	esi, [ebp+arg_0]
		mov	ecx, [eax+ecx+4]
		sub	ecx, [esi+edx+4]
		mov	[ebp+var_8], ecx
		mov	edx, 8
		imul	eax, edx, 0
		mov	ecx, 8
		shl	ecx, 0
		mov	edx, [ebp+arg_0]
		mov	esi, [ebp+arg_0]
		mov	eax, [edx+eax]
		sub	eax, [esi+ecx]
		mov	[ebp+var_1C], eax
		mov	ecx, 8
		imul	edx, ecx, 0
		mov	eax, 8
		shl	eax, 0
		mov	ecx, [ebp+arg_0]
		mov	esi, [ebp+arg_0]
		mov	edx, [ecx+edx+4]
		sub	edx, [esi+eax+4]
		mov	[ebp+var_18], edx
		cmp	[ebp+var_C], 0FFFFFFFEh
		jle	short loc_2B96
		cmp	[ebp+var_C], 2
		jge	short loc_2B96
		cmp	[ebp+var_8], 0FFFFFFFEh
		jle	short loc_2B96
		cmp	[ebp+var_8], 2
		jge	short loc_2B96
		mov	[ebp+var_30], 1
		jmp	short loc_2B9D
; ---------------------------------------------------------------------------

loc_2B96:				; CODE XREF: _ft_conic_is_small_enough+99j
					; _ft_conic_is_small_enough+9Fj ...
		mov	[ebp+var_30], 0

loc_2B9D:				; CODE XREF: _ft_conic_is_small_enough+B4j
		mov	eax, [ebp+var_30]
		mov	[ebp+var_28], eax
		cmp	[ebp+var_1C], 0FFFFFFFEh
		jle	short loc_2BC4
		cmp	[ebp+var_1C], 2
		jge	short loc_2BC4
		cmp	[ebp+var_18], 0FFFFFFFEh
		jle	short loc_2BC4
		cmp	[ebp+var_18], 2
		jge	short loc_2BC4
		mov	[ebp+var_34], 1
		jmp	short loc_2BCB
; ---------------------------------------------------------------------------

loc_2BC4:				; CODE XREF: _ft_conic_is_small_enough+C7j
					; _ft_conic_is_small_enough+CDj ...
		mov	[ebp+var_34], 0

loc_2BCB:				; CODE XREF: _ft_conic_is_small_enough+E2j
		mov	ecx, [ebp+var_34]
		mov	[ebp+var_2C], ecx
		cmp	[ebp+var_28], 0
		jz	short loc_2C00
		cmp	[ebp+var_2C], 0
		jz	short loc_2BDF
		jmp	short loc_2BFE
; ---------------------------------------------------------------------------

loc_2BDF:				; CODE XREF: _ft_conic_is_small_enough+FBj
		mov	edx, [ebp+var_18]
		push	edx
		mov	eax, [ebp+var_1C]
		push	eax
		call	_FT_Atan2
		add	esp, 8
		mov	ecx, [ebp+arg_8]
		mov	[ecx], eax
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	[edx], ecx

loc_2BFE:				; CODE XREF: _ft_conic_is_small_enough+FDj
		jmp	short loc_2C51
; ---------------------------------------------------------------------------

loc_2C00:				; CODE XREF: _ft_conic_is_small_enough+F5j
		cmp	[ebp+var_2C], 0
		jz	short loc_2C27
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+var_C]
		push	eax
		call	_FT_Atan2
		add	esp, 8
		mov	ecx, [ebp+arg_8]
		mov	[ecx], eax
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	[edx], ecx
		jmp	short loc_2C51
; ---------------------------------------------------------------------------

loc_2C27:				; CODE XREF: _ft_conic_is_small_enough+124j
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+var_C]
		push	eax
		call	_FT_Atan2
		add	esp, 8
		mov	ecx, [ebp+arg_4]
		mov	[ecx], eax
		mov	edx, [ebp+var_18]
		push	edx
		mov	eax, [ebp+var_1C]
		push	eax
		call	_FT_Atan2
		add	esp, 8
		mov	ecx, [ebp+arg_8]
		mov	[ecx], eax

loc_2C51:				; CODE XREF: _ft_conic_is_small_enough:loc_2BFEj
					; _ft_conic_is_small_enough+145j
		mov	edx, [ebp+arg_8]
		mov	eax, [edx]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		push	edx
		call	_FT_Angle_Diff
		add	esp, 8
		push	eax
		call	_ft_pos_abs
		add	esp, 4
		mov	[ebp+var_24], eax
		cmp	[ebp+var_24], 1E0000h
		jge	short loc_2C80
		mov	[ebp+var_35], 1
		jmp	short loc_2C84
; ---------------------------------------------------------------------------

loc_2C80:				; CODE XREF: _ft_conic_is_small_enough+198j
		mov	[ebp+var_35], 0

loc_2C84:				; CODE XREF: _ft_conic_is_small_enough+19Ej
		mov	al, [ebp+var_35]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN20
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		add	esp, 38h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_conic_is_small_enough endp

; ---------------------------------------------------------------------------
$LN20		dd 2			; DATA XREF: _ft_conic_is_small_enough+1ABo
		dd offset $LN19
$LN19		dd 0FFFFFFF4h, 8	; DATA XREF: .text$mn:00002CACo
		dd offset $LN17_1
		dd 0FFFFFFE4h, 8
		dd offset $LN18_0
$LN18_0		db 64h,	32h, 0		; DATA XREF: .text$mn:00002CC4o
$LN17_1		db 64h			; DATA XREF: .text$mn:00002CB8o
		dd 0CCCC0031h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_cubic_split	proc near		; CODE XREF: _FT_Stroker_CubicTo+26Cp

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, 8
		imul	ecx, eax, 3
		mov	edx, 8
		imul	eax, edx, 6
		mov	edx, [ebp+arg_0]
		mov	esi, [ebp+arg_0]
		mov	ecx, [esi+ecx]
		mov	[edx+eax], ecx
		mov	edx, 8
		shl	edx, 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+edx]
		mov	[ebp+var_C], ecx
		mov	edx, 8
		shl	edx, 1
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+edx]
		mov	[ebp+var_10], ecx
		mov	edx, 8
		imul	eax, edx, 0
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx+eax]
		add	eax, [ebp+var_C]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_4], eax
		mov	edx, 8
		shl	edx, 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_4]
		mov	[eax+edx], ecx
		mov	edx, 8
		imul	eax, edx, 3
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx+eax]
		add	eax, [ebp+var_10]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_8], eax
		mov	edx, 8
		imul	eax, edx, 5
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_8]
		mov	[ecx+eax], edx
		mov	eax, [ebp+var_C]
		add	eax, [ebp+var_10]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_4]
		add	eax, [ebp+var_C]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_4], eax
		mov	eax, 8
		shl	eax, 1
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_4]
		mov	[ecx+eax], edx
		mov	eax, [ebp+var_8]
		add	eax, [ebp+var_C]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_8], eax
		mov	eax, 8
		shl	eax, 2
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_8]
		mov	[ecx+eax], edx
		mov	eax, [ebp+var_4]
		add	eax, [ebp+var_8]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	ecx, 8
		imul	edx, ecx, 3
		mov	ecx, [ebp+arg_0]
		mov	[ecx+edx], eax
		mov	edx, 8
		imul	eax, edx, 3
		mov	ecx, 8
		imul	edx, ecx, 6
		mov	ecx, [ebp+arg_0]
		mov	esi, [ebp+arg_0]
		mov	eax, [esi+eax+4]
		mov	[ecx+edx+4], eax
		mov	ecx, 8
		shl	ecx, 0
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+ecx+4]
		mov	[ebp+var_C], eax
		mov	ecx, 8
		shl	ecx, 1
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+ecx+4]
		mov	[ebp+var_10], eax
		mov	ecx, 8
		imul	edx, ecx, 0
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+edx+4]
		add	eax, [ebp+var_C]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_4], eax
		mov	ecx, 8
		shl	ecx, 0
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_4]
		mov	[edx+ecx+4], eax
		mov	ecx, 8
		imul	edx, ecx, 3
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+edx+4]
		add	eax, [ebp+var_10]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_8], eax
		mov	ecx, 8
		imul	edx, ecx, 5
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		mov	[eax+edx+4], ecx
		mov	eax, [ebp+var_C]
		add	eax, [ebp+var_10]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_4]
		add	eax, [ebp+var_C]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_4], eax
		mov	edx, 8
		shl	edx, 1
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_4]
		mov	[eax+edx+4], ecx
		mov	eax, [ebp+var_8]
		add	eax, [ebp+var_C]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_8], eax
		mov	edx, 8
		shl	edx, 2
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		mov	[eax+edx+4], ecx
		mov	eax, [ebp+var_4]
		add	eax, [ebp+var_8]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	edx, 8
		imul	ecx, edx, 3
		mov	edx, [ebp+arg_0]
		mov	[edx+ecx+4], eax
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
_ft_cubic_split	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_angle_mean	proc near		; CODE XREF: _FT_Stroker_CubicTo+3B9p
					; _FT_Stroker_CubicTo+3D5p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_FT_Angle_Diff
		add	esp, 8
		cdq
		sub	eax, edx
		sar	eax, 1
		add	eax, [ebp+arg_0]
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_ft_angle_mean	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_cubic_is_small_enough proc near	; CODE XREF: _FT_Stroker_CubicTo+240p

var_54		= byte ptr -54h
var_51		= byte ptr -51h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 54h
		push	esi
		push	edi
		lea	edi, [ebp+var_54]
		mov	ecx, 15h
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, 8
		shl	eax, 1
		mov	ecx, 8
		imul	edx, ecx, 3
		mov	ecx, [ebp+arg_0]
		mov	esi, [ebp+arg_0]
		mov	eax, [ecx+eax]
		sub	eax, [esi+edx]
		mov	[ebp+var_C], eax
		mov	ecx, 8
		shl	ecx, 1
		mov	edx, 8
		imul	eax, edx, 3
		mov	edx, [ebp+arg_0]
		mov	esi, [ebp+arg_0]
		mov	ecx, [edx+ecx+4]
		sub	ecx, [esi+eax+4]
		mov	[ebp+var_8], ecx
		mov	edx, 8
		shl	edx, 0
		mov	eax, 8
		shl	eax, 1
		mov	ecx, [ebp+arg_0]
		mov	esi, [ebp+arg_0]
		mov	edx, [ecx+edx]
		sub	edx, [esi+eax]
		mov	[ebp+var_1C], edx
		mov	eax, 8
		shl	eax, 0
		mov	ecx, 8
		shl	ecx, 1
		mov	edx, [ebp+arg_0]
		mov	esi, [ebp+arg_0]
		mov	eax, [edx+eax+4]
		sub	eax, [esi+ecx+4]
		mov	[ebp+var_18], eax
		mov	ecx, 8
		imul	edx, ecx, 0
		mov	eax, 8
		shl	eax, 0
		mov	ecx, [ebp+arg_0]
		mov	esi, [ebp+arg_0]
		mov	edx, [ecx+edx]
		sub	edx, [esi+eax]
		mov	[ebp+var_2C], edx
		mov	eax, 8
		imul	ecx, eax, 0
		mov	edx, 8
		shl	edx, 0
		mov	eax, [ebp+arg_0]
		mov	esi, [ebp+arg_0]
		mov	ecx, [eax+ecx+4]
		sub	ecx, [esi+edx+4]
		mov	[ebp+var_28], ecx
		cmp	[ebp+var_C], 0FFFFFFFEh
		jle	short loc_3014
		cmp	[ebp+var_C], 2
		jge	short loc_3014
		cmp	[ebp+var_8], 0FFFFFFFEh
		jle	short loc_3014
		cmp	[ebp+var_8], 2
		jge	short loc_3014
		mov	[ebp+var_48], 1
		jmp	short loc_301B
; ---------------------------------------------------------------------------

loc_3014:				; CODE XREF: _ft_cubic_is_small_enough+D7j
					; _ft_cubic_is_small_enough+DDj ...
		mov	[ebp+var_48], 0

loc_301B:				; CODE XREF: _ft_cubic_is_small_enough+F2j
		mov	edx, [ebp+var_48]
		mov	[ebp+var_3C], edx
		cmp	[ebp+var_1C], 0FFFFFFFEh
		jle	short loc_3042
		cmp	[ebp+var_1C], 2
		jge	short loc_3042
		cmp	[ebp+var_18], 0FFFFFFFEh
		jle	short loc_3042
		cmp	[ebp+var_18], 2
		jge	short loc_3042
		mov	[ebp+var_4C], 1
		jmp	short loc_3049
; ---------------------------------------------------------------------------

loc_3042:				; CODE XREF: _ft_cubic_is_small_enough+105j
					; _ft_cubic_is_small_enough+10Bj ...
		mov	[ebp+var_4C], 0

loc_3049:				; CODE XREF: _ft_cubic_is_small_enough+120j
		mov	eax, [ebp+var_4C]
		mov	[ebp+var_40], eax
		cmp	[ebp+var_2C], 0FFFFFFFEh
		jle	short loc_3070
		cmp	[ebp+var_2C], 2
		jge	short loc_3070
		cmp	[ebp+var_28], 0FFFFFFFEh
		jle	short loc_3070
		cmp	[ebp+var_28], 2
		jge	short loc_3070
		mov	[ebp+var_50], 1
		jmp	short loc_3077
; ---------------------------------------------------------------------------

loc_3070:				; CODE XREF: _ft_cubic_is_small_enough+133j
					; _ft_cubic_is_small_enough+139j ...
		mov	[ebp+var_50], 0

loc_3077:				; CODE XREF: _ft_cubic_is_small_enough+14Ej
		mov	ecx, [ebp+var_50]
		mov	[ebp+var_44], ecx
		cmp	[ebp+var_3C], 0
		jz	loc_312A
		cmp	[ebp+var_40], 0
		jz	short loc_30C0
		cmp	[ebp+var_44], 0
		jz	short loc_3095
		jmp	short loc_30BE
; ---------------------------------------------------------------------------

loc_3095:				; CODE XREF: _ft_cubic_is_small_enough+171j
		mov	edx, [ebp+var_28]
		push	edx
		mov	eax, [ebp+var_2C]
		push	eax
		call	_FT_Atan2
		add	esp, 8
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		mov	edx, [ebp+arg_8]
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		mov	[edx], ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	[edx], ecx

loc_30BE:				; CODE XREF: _ft_cubic_is_small_enough+173j
		jmp	short loc_3125
; ---------------------------------------------------------------------------

loc_30C0:				; CODE XREF: _ft_cubic_is_small_enough+16Bj
		cmp	[ebp+var_44], 0
		jz	short loc_30F1
		mov	edx, [ebp+var_18]
		push	edx
		mov	eax, [ebp+var_1C]
		push	eax
		call	_FT_Atan2
		add	esp, 8
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		mov	edx, [ebp+arg_8]
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		mov	[edx], ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	[edx], ecx
		jmp	short loc_3125
; ---------------------------------------------------------------------------

loc_30F1:				; CODE XREF: _ft_cubic_is_small_enough+1A4j
		mov	edx, [ebp+var_18]
		push	edx
		mov	eax, [ebp+var_1C]
		push	eax
		call	_FT_Atan2
		add	esp, 8
		mov	ecx, [ebp+arg_8]
		mov	[ecx], eax
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	[edx], ecx
		mov	edx, [ebp+var_28]
		push	edx
		mov	eax, [ebp+var_2C]
		push	eax
		call	_FT_Atan2
		add	esp, 8
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax

loc_3125:				; CODE XREF: _ft_cubic_is_small_enough:loc_30BEj
					; _ft_cubic_is_small_enough+1CFj
		jmp	loc_3221
; ---------------------------------------------------------------------------

loc_312A:				; CODE XREF: _ft_cubic_is_small_enough+161j
		cmp	[ebp+var_40], 0
		jz	short loc_31A6
		cmp	[ebp+var_44], 0
		jz	short loc_3161
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+var_C]
		push	eax
		call	_FT_Atan2
		add	esp, 8
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		mov	edx, [ebp+arg_8]
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		mov	[edx], ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	[edx], ecx
		jmp	short loc_31A4
; ---------------------------------------------------------------------------

loc_3161:				; CODE XREF: _ft_cubic_is_small_enough+214j
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+var_C]
		push	eax
		call	_FT_Atan2
		add	esp, 8
		mov	ecx, [ebp+arg_4]
		mov	[ecx], eax
		mov	edx, [ebp+var_28]
		push	edx
		mov	eax, [ebp+var_2C]
		push	eax
		call	_FT_Atan2
		add	esp, 8
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		mov	edx, [ebp+arg_C]
		mov	eax, [edx]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		push	edx
		call	_ft_angle_mean
		add	esp, 8
		mov	ecx, [ebp+arg_8]
		mov	[ecx], eax

loc_31A4:				; CODE XREF: _ft_cubic_is_small_enough+23Fj
		jmp	short loc_3221
; ---------------------------------------------------------------------------

loc_31A6:				; CODE XREF: _ft_cubic_is_small_enough+20Ej
		cmp	[ebp+var_44], 0
		jz	short loc_31E2
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+var_C]
		push	eax
		call	_FT_Atan2
		add	esp, 8
		mov	ecx, [ebp+arg_4]
		mov	[ecx], eax
		mov	edx, [ebp+var_18]
		push	edx
		mov	eax, [ebp+var_1C]
		push	eax
		call	_FT_Atan2
		add	esp, 8
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		mov	edx, [ebp+arg_8]
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		mov	[edx], ecx
		jmp	short loc_3221
; ---------------------------------------------------------------------------

loc_31E2:				; CODE XREF: _ft_cubic_is_small_enough+28Aj
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+var_C]
		push	eax
		call	_FT_Atan2
		add	esp, 8
		mov	ecx, [ebp+arg_4]
		mov	[ecx], eax
		mov	edx, [ebp+var_18]
		push	edx
		mov	eax, [ebp+var_1C]
		push	eax
		call	_FT_Atan2
		add	esp, 8
		mov	ecx, [ebp+arg_8]
		mov	[ecx], eax
		mov	edx, [ebp+var_28]
		push	edx
		mov	eax, [ebp+var_2C]
		push	eax
		call	_FT_Atan2
		add	esp, 8
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax

loc_3221:				; CODE XREF: _ft_cubic_is_small_enough:loc_3125j
					; _ft_cubic_is_small_enough:loc_31A4j ...
		mov	edx, [ebp+arg_8]
		mov	eax, [edx]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		push	edx
		call	_FT_Angle_Diff
		add	esp, 8
		push	eax
		call	_ft_pos_abs
		add	esp, 4
		mov	[ebp+var_34], eax
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		mov	edx, [ebp+arg_8]
		mov	eax, [edx]
		push	eax
		call	_FT_Angle_Diff
		add	esp, 8
		push	eax
		call	_ft_pos_abs
		add	esp, 4
		mov	[ebp+var_38], eax
		cmp	[ebp+var_34], 168000h
		jge	short loc_3279
		cmp	[ebp+var_38], 168000h
		jge	short loc_3279
		mov	[ebp+var_51], 1
		jmp	short loc_327D
; ---------------------------------------------------------------------------

loc_3279:				; CODE XREF: _ft_cubic_is_small_enough+348j
					; _ft_cubic_is_small_enough+351j
		mov	[ebp+var_51], 0

loc_327D:				; CODE XREF: _ft_cubic_is_small_enough+357j
		mov	al, [ebp+var_51]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN32_1
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		add	esp, 54h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_cubic_is_small_enough endp

; ---------------------------------------------------------------------------
		align 4
$LN32_1		dd 3			; DATA XREF: _ft_cubic_is_small_enough+364o
		dd offset $LN31_1
$LN31_1		dd 0FFFFFFF4h, 8	; DATA XREF: .text$mn:000032A8o
		dd offset $LN28_1
		dd 0FFFFFFE4h, 8
		dd offset $LN29_1
		dd 0FFFFFFD4h, 8
		dd offset $LN30_1
$LN30_1		db 64h,	33h, 0		; DATA XREF: .text$mn:000032CCo
$LN29_1		db 64h			; DATA XREF: .text$mn:000032C0o
		db 32h,	0
$LN28_1		dw 3164h		; DATA XREF: .text$mn:000032B4o
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_stroke_border_grow proc near	; CODE XREF: _ft_stroke_border_lineto+EBp
					; _ft_stroke_border_conicto+46p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		add	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		mov	[ebp+var_10], 0
		mov	ecx, [ebp+var_8]
		cmp	ecx, [ebp+var_4]
		jbe	$Exit$11_0
		mov	edx, [ebp+var_4]
		mov	[ebp+var_18], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+18h]
		mov	[ebp+var_1C], ecx

loc_3336:				; CODE XREF: _ft_stroke_border_grow+6Dj
		mov	edx, [ebp+var_18]
		cmp	edx, [ebp+var_8]
		jnb	short loc_334F
		mov	eax, [ebp+var_18]
		shr	eax, 1
		mov	ecx, [ebp+var_18]
		lea	edx, [ecx+eax+10h]
		mov	[ebp+var_18], edx
		jmp	short loc_3336
; ---------------------------------------------------------------------------

loc_334F:				; CODE XREF: _ft_stroke_border_grow+5Cj
		lea	eax, [ebp+var_10]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		push	edx
		mov	eax, [ebp+var_18]
		push	eax
		mov	ecx, [ebp+var_4]
		push	ecx
		push	8
		mov	edx, [ebp+var_1C]
		push	edx
		call	_ft_mem_realloc
		add	esp, 18h
		mov	ecx, [ebp+arg_0]
		mov	[ecx+8], eax
		cmp	[ebp+var_10], 0
		jnz	short loc_33A9
		lea	edx, [ebp+var_10]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		push	ecx
		mov	edx, [ebp+var_18]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		push	1
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_ft_mem_realloc
		add	esp, 18h
		mov	edx, [ebp+arg_0]
		mov	[edx+0Ch], eax
		cmp	[ebp+var_10], 0
		jz	short loc_33AB

loc_33A9:				; CODE XREF: _ft_stroke_border_grow+9Aj
		jmp	short $Exit$11_0
; ---------------------------------------------------------------------------

loc_33AB:				; CODE XREF: _ft_stroke_border_grow+C7j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_18]
		mov	[eax+4], ecx

$Exit$11_0:				; CODE XREF: _ft_stroke_border_grow+41j
					; _ft_stroke_border_grow:loc_33A9j
		mov	eax, [ebp+var_10]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN10_1
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		add	esp, 1Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_stroke_border_grow endp

; ---------------------------------------------------------------------------
		align 4
$LN10_1		dd 1			; DATA XREF: _ft_stroke_border_grow+DBo
		dd offset $LN9_1
$LN9_1		dd 0FFFFFFF0h, 4	; DATA XREF: .text$mn:000033DCo
		dd offset $LN8_2	; "error"
$LN8_2		db 'error',0            ; DATA XREF: .text$mn:000033E8o
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_stroke_border_close	proc near	; CODE XREF: _FT_Stroker_EndSubPath+D9p
					; _FT_Stroker_EndSubPath+1B3p ...

var_2C		= byte ptr -2Ch
var_29		= byte ptr -29h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 2Ch
		push	esi
		push	edi
		lea	edi, [ebp+var_2C]
		mov	ecx, 0Bh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	[ebp+var_8], eax

loc_3428:				; CODE XREF: _ft_stroke_border_close+4Aj
		mov	ecx, [ebp+arg_0]
		cmp	dword ptr [ecx+14h], 0
		jge	short loc_3448
		push	offset $SG7376	; "..\\..\\..\\src\\base\\ftstroke.c"
		push	162h
		push	offset $SG7377	; "assertion failed on line %d of file %s\"...
		call	_FT_Panic
		add	esp, 0Ch

loc_3448:				; CODE XREF: _ft_stroke_border_close+2Fj
		xor	edx, edx
		jnz	short loc_3428
		mov	eax, [ebp+var_4]
		add	eax, 1
		cmp	[ebp+var_8], eax
		ja	short loc_3464
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_4]
		mov	[ecx], edx
		jmp	loc_359D
; ---------------------------------------------------------------------------

loc_3464:				; CODE XREF: _ft_stroke_border_close+55j
		mov	eax, [ebp+var_8]
		sub	eax, 1
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_8]
		mov	[ecx], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	edx, [ebp+var_8]
		mov	eax, [ecx+edx*8]
		mov	ecx, [ecx+edx*8+4]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+8]
		mov	esi, [ebp+var_4]
		mov	[edx+esi*8], eax
		mov	[edx+esi*8+4], ecx
		movzx	eax, [ebp+arg_4]
		test	eax, eax
		jz	loc_3563
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		mov	eax, [ebp+var_4]
		lea	ecx, [edx+eax*8+8]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	ecx, [ebp+var_8]
		lea	edx, [eax+ecx*8-8]
		mov	[ebp+var_10], edx
		jmp	short loc_34D5
; ---------------------------------------------------------------------------

loc_34C3:				; CODE XREF: _ft_stroke_border_close+109j
		mov	eax, [ebp+var_C]
		add	eax, 8
		mov	[ebp+var_C], eax
		mov	ecx, [ebp+var_10]
		sub	ecx, 8
		mov	[ebp+var_10], ecx

loc_34D5:				; CODE XREF: _ft_stroke_border_close+C1j
		mov	edx, [ebp+var_C]
		cmp	edx, [ebp+var_10]
		jnb	short loc_350B
		mov	eax, [ebp+var_C]
		mov	ecx, [eax]
		mov	edx, [eax+4]
		mov	[ebp+var_1C], ecx
		mov	[ebp+var_18], edx
		mov	eax, [ebp+var_10]
		mov	ecx, [eax]
		mov	edx, [eax+4]
		mov	eax, [ebp+var_C]
		mov	[eax], ecx
		mov	[eax+4], edx
		mov	ecx, [ebp+var_10]
		mov	edx, [ebp+var_1C]
		mov	[ecx], edx
		mov	eax, [ebp+var_18]
		mov	[ecx+4], eax
		jmp	short loc_34C3
; ---------------------------------------------------------------------------

loc_350B:				; CODE XREF: _ft_stroke_border_close+DBj
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		mov	eax, [ebp+var_4]
		lea	ecx, [edx+eax+1]
		mov	[ebp+var_24], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+0Ch]
		mov	ecx, [ebp+var_8]
		lea	edx, [eax+ecx-1]
		mov	[ebp+var_28], edx
		jmp	short loc_353F
; ---------------------------------------------------------------------------

loc_352D:				; CODE XREF: _ft_stroke_border_close+161j
		mov	eax, [ebp+var_24]
		add	eax, 1
		mov	[ebp+var_24], eax
		mov	ecx, [ebp+var_28]
		sub	ecx, 1
		mov	[ebp+var_28], ecx

loc_353F:				; CODE XREF: _ft_stroke_border_close+12Bj
		mov	edx, [ebp+var_24]
		cmp	edx, [ebp+var_28]
		jnb	short loc_3563
		mov	eax, [ebp+var_24]
		mov	cl, [eax]
		mov	[ebp+var_29], cl
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_28]
		mov	cl, [eax]
		mov	[edx], cl
		mov	edx, [ebp+var_28]
		mov	al, [ebp+var_29]
		mov	[edx], al
		jmp	short loc_352D
; ---------------------------------------------------------------------------

loc_3563:				; CODE XREF: _ft_stroke_border_close+9Bj
					; _ft_stroke_border_close+145j
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		mov	eax, [ebp+var_4]
		movzx	ecx, byte ptr [edx+eax]
		or	ecx, 4
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+0Ch]
		mov	edx, [ebp+var_4]
		mov	[eax+edx], cl
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	edx, [ebp+var_8]
		movzx	eax, byte ptr [ecx+edx-1]
		or	eax, 8
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		mov	ecx, [ebp+var_8]
		mov	[edx+ecx-1], al

loc_359D:				; CODE XREF: _ft_stroke_border_close+5Fj
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+14h], 0FFFFFFFFh
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+10h], 0
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN18_1
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		add	esp, 2Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_stroke_border_close	endp

; ---------------------------------------------------------------------------
		align 10h
$LN18_1		dd 1			; DATA XREF: _ft_stroke_border_close+1B2o
		dd offset $LN17_2
$LN17_2		dd 0FFFFFFE4h, 8	; DATA XREF: .text$mn:000035D4o
		dd offset $LN16_1
$LN16_1		dd 706D74h, 2 dup(0CCCCCCCCh) ;	DATA XREF: .text$mn:000035E0o

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_stroke_border_lineto proc near	; CODE XREF: _FT_Stroker_LineTo+152p
					; _FT_Stroker_ConicTo+6B0p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], 0

loc_3613:				; CODE XREF: _ft_stroke_border_lineto+45j
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+14h], 0
		jge	short loc_3633
		push	offset $SG7406	; "..\\..\\..\\src\\base\\ftstroke.c"
		push	1A4h
		push	offset $SG7407	; "assertion failed on line %d of file %s\"...
		call	_FT_Panic
		add	esp, 0Ch

loc_3633:				; CODE XREF: _ft_stroke_border_lineto+2Aj
		xor	ecx, ecx
		jnz	short loc_3613
		mov	edx, [ebp+arg_0]
		movzx	eax, byte ptr [edx+10h]
		test	eax, eax
		jz	short loc_3662
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		mov	eax, [ecx+4]
		mov	ecx, [ebp+arg_0]
		mov	ecx, [ecx]
		mov	esi, [ebp+arg_0]
		mov	esi, [esi+8]
		mov	[esi+ecx*8-8], edx
		mov	[esi+ecx*8-4], eax
		jmp	loc_3741
; ---------------------------------------------------------------------------

loc_3662:				; CODE XREF: _ft_stroke_border_lineto+50j
		mov	edx, [ebp+arg_0]
		cmp	dword ptr [edx], 0
		jbe	short loc_36D5
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	edx, [ebp+arg_4]
		mov	eax, [eax+ecx*8-8]
		sub	eax, [edx]
		cmp	eax, 0FFFFFFFEh
		jle	short loc_36D5
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	eax, [ebp+arg_4]
		mov	ecx, [ecx+edx*8-8]
		sub	ecx, [eax]
		cmp	ecx, 2
		jge	short loc_36D5
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		mov	ecx, [ebp+arg_4]
		mov	edx, [edx+eax*8-4]
		sub	edx, [ecx+4]
		cmp	edx, 0FFFFFFFEh
		jle	short loc_36D5
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	edx, [ebp+arg_4]
		mov	eax, [eax+ecx*8-4]
		sub	eax, [edx+4]
		cmp	eax, 2
		jge	short loc_36D5
		mov	eax, [ebp+var_4]
		jmp	short loc_374D
; ---------------------------------------------------------------------------

loc_36D5:				; CODE XREF: _ft_stroke_border_lineto+78j
					; _ft_stroke_border_lineto+91j	...
		push	1
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ft_stroke_border_grow
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_3741
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		lea	eax, [edx+eax*8]
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		mov	eax, [ebp+arg_0]
		add	edx, [eax]
		mov	[ebp+var_C], edx
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		mov	eax, [ecx+4]
		mov	ecx, 8
		imul	ecx, 0
		mov	esi, [ebp+var_8]
		mov	[esi+ecx], edx
		mov	[esi+ecx+4], eax
		mov	edx, 1
		imul	eax, edx, 0
		mov	ecx, [ebp+var_C]
		mov	byte ptr [ecx+eax], 1
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		add	eax, 1
		mov	ecx, [ebp+arg_0]
		mov	[ecx], eax

loc_3741:				; CODE XREF: _ft_stroke_border_lineto+6Dj
					; _ft_stroke_border_lineto+FAj
		mov	edx, [ebp+arg_0]
		mov	al, [ebp+arg_8]
		mov	[edx+10h], al
		mov	eax, [ebp+var_4]

loc_374D:				; CODE XREF: _ft_stroke_border_lineto+E3j
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_stroke_border_lineto endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_stroke_border_conicto proc near	; CODE XREF: _FT_Stroker_ConicTo+701p
					; _FT_Stroker_ConicTo+754p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh

loc_377C:				; CODE XREF: _ft_stroke_border_conicto+3Ej
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+14h], 0
		jge	short loc_379C
		push	offset $SG7427	; "..\\..\\..\\src\\base\\ftstroke.c"
		push	1CEh
		push	offset $SG7428	; "assertion failed on line %d of file %s\"...
		call	_FT_Panic
		add	esp, 0Ch

loc_379C:				; CODE XREF: _ft_stroke_border_conicto+23j
		xor	ecx, ecx
		jnz	short loc_377C
		push	2
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ft_stroke_border_grow
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_3835
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		lea	ecx, [eax+ecx*8]
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+0Ch]
		mov	ecx, [ebp+arg_0]
		add	eax, [ecx]
		mov	[ebp+var_C], eax
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		mov	ecx, [edx+4]
		mov	edx, 8
		imul	edx, 0
		mov	esi, [ebp+var_8]
		mov	[esi+edx], eax
		mov	[esi+edx+4], ecx
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	edx, [eax+4]
		mov	eax, 8
		shl	eax, 0
		mov	esi, [ebp+var_8]
		mov	[esi+eax], ecx
		mov	[esi+eax+4], edx
		mov	ecx, 1
		imul	edx, ecx, 0
		mov	eax, [ebp+var_C]
		mov	byte ptr [eax+edx], 0
		mov	ecx, 1
		shl	ecx, 0
		mov	edx, [ebp+var_C]
		mov	byte ptr [edx+ecx], 1
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		add	ecx, 2
		mov	edx, [ebp+arg_0]
		mov	[edx], ecx

loc_3835:				; CODE XREF: _ft_stroke_border_conicto+55j
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+10h], 0
		mov	eax, [ebp+var_4]
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_stroke_border_conicto endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_stroke_border_cubicto proc near	; CODE XREF: _FT_Stroker_CubicTo+85Bp
					; _FT_Stroker_CubicTo+8B5p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh

loc_386C:				; CODE XREF: _ft_stroke_border_cubicto+3Ej
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+14h], 0
		jge	short loc_388C
		push	offset $SG7447	; "..\\..\\..\\src\\base\\ftstroke.c"
		push	1EFh
		push	offset $SG7448	; "assertion failed on line %d of file %s\"...
		call	_FT_Panic
		add	esp, 0Ch

loc_388C:				; CODE XREF: _ft_stroke_border_cubicto+23j
		xor	ecx, ecx
		jnz	short loc_386C
		push	3
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ft_stroke_border_grow
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	loc_3950
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		lea	ecx, [eax+ecx*8]
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+0Ch]
		mov	ecx, [ebp+arg_0]
		add	eax, [ecx]
		mov	[ebp+var_C], eax
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		mov	ecx, [edx+4]
		mov	edx, 8
		imul	edx, 0
		mov	esi, [ebp+var_8]
		mov	[esi+edx], eax
		mov	[esi+edx+4], ecx
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	edx, [eax+4]
		mov	eax, 8
		shl	eax, 0
		mov	esi, [ebp+var_8]
		mov	[esi+eax], ecx
		mov	[esi+eax+4], edx
		mov	ecx, [ebp+arg_C]
		mov	edx, [ecx]
		mov	eax, [ecx+4]
		mov	ecx, 8
		shl	ecx, 1
		mov	esi, [ebp+var_8]
		mov	[esi+ecx], edx
		mov	[esi+ecx+4], eax
		mov	edx, 1
		imul	eax, edx, 0
		mov	ecx, [ebp+var_C]
		mov	byte ptr [ecx+eax], 2
		mov	edx, 1
		shl	edx, 0
		mov	eax, [ebp+var_C]
		mov	byte ptr [eax+edx], 2
		mov	ecx, 1
		shl	ecx, 1
		mov	edx, [ebp+var_C]
		mov	byte ptr [edx+ecx], 1
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		add	ecx, 3
		mov	edx, [ebp+arg_0]
		mov	[edx], ecx

loc_3950:				; CODE XREF: _ft_stroke_border_cubicto+55j
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+10h], 0
		mov	eax, [ebp+var_4]
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_stroke_border_cubicto endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_stroke_border_arcto	proc near	; CODE XREF: _ft_stroker_arcto+92p

var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 64h
		push	edi
		lea	edi, [ebp+var_64]
		mov	ecx, 19h
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_60], 0
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		lea	edx, [ebp+var_24]
		push	edx
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_24]
		add	ecx, [eax]
		mov	[ebp+var_24], ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+var_20]
		add	eax, [edx+4]
		mov	[ebp+var_20], eax
		mov	ecx, [ebp+arg_10]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_C]
		mov	[ebp+var_8], edx
		cmp	[ebp+arg_10], 0
		jl	short loc_39D3
		mov	[ebp+var_64], 5A0000h
		jmp	short loc_39DA
; ---------------------------------------------------------------------------

loc_39D3:				; CODE XREF: _ft_stroke_border_arcto+58j
		mov	[ebp+var_64], 0FFA60000h

loc_39DA:				; CODE XREF: _ft_stroke_border_arcto+61j
		mov	eax, [ebp+var_64]
		mov	[ebp+var_10], eax

loc_39E0:				; CODE XREF: _ft_stroke_border_arcto+1B6j
		cmp	[ebp+var_4], 0
		jz	loc_3B2B
		mov	ecx, [ebp+var_4]
		mov	[ebp+var_C], ecx
		cmp	[ebp+var_C], 5A0000h
		jle	short loc_3A02
		mov	[ebp+var_C], 5A0000h
		jmp	short loc_3A12
; ---------------------------------------------------------------------------

loc_3A02:				; CODE XREF: _ft_stroke_border_arcto+87j
		cmp	[ebp+var_C], 0FFA60000h
		jge	short loc_3A12
		mov	[ebp+var_C], 0FFA60000h

loc_3A12:				; CODE XREF: _ft_stroke_border_arcto+90j
					; _ft_stroke_border_arcto+99j
		mov	edx, [ebp+var_8]
		add	edx, [ebp+var_C]
		mov	[ebp+var_14], edx
		mov	eax, [ebp+var_C]
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jge	short loc_3A2F
		mov	ecx, [ebp+var_18]
		neg	ecx
		mov	[ebp+var_18], ecx

loc_3A2F:				; CODE XREF: _ft_stroke_border_arcto+B5j
		mov	edx, [ebp+var_18]
		sar	edx, 1
		mov	[ebp+var_18], edx
		mov	eax, [ebp+var_14]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		lea	edx, [ebp+var_34]
		push	edx
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_34]
		add	ecx, [eax]
		mov	[ebp+var_34], ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+var_30]
		add	eax, [edx+4]
		mov	[ebp+var_30], eax
		mov	ecx, [ebp+var_18]
		push	ecx
		call	_FT_Cos
		add	esp, 4
		add	eax, 10000h
		imul	edx, eax, 3
		push	edx
		mov	eax, [ebp+var_18]
		push	eax
		call	_FT_Sin
		add	esp, 4
		shl	eax, 2
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		call	_FT_MulDiv
		add	esp, 0Ch
		mov	[ebp+var_5C], eax
		mov	edx, [ebp+var_8]
		add	edx, [ebp+var_10]
		push	edx
		mov	eax, [ebp+var_5C]
		push	eax
		lea	ecx, [ebp+var_44]
		push	ecx
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	edx, [ebp+var_44]
		add	edx, [ebp+var_24]
		mov	[ebp+var_44], edx
		mov	eax, [ebp+var_40]
		add	eax, [ebp+var_20]
		mov	[ebp+var_40], eax
		mov	ecx, [ebp+var_14]
		sub	ecx, [ebp+var_10]
		push	ecx
		mov	edx, [ebp+var_5C]
		push	edx
		lea	eax, [ebp+var_54]
		push	eax
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	ecx, [ebp+var_54]
		add	ecx, [ebp+var_34]
		mov	[ebp+var_54], ecx
		mov	edx, [ebp+var_50]
		add	edx, [ebp+var_30]
		mov	[ebp+var_50], edx
		lea	eax, [ebp+var_34]
		push	eax
		lea	ecx, [ebp+var_54]
		push	ecx
		lea	edx, [ebp+var_44]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ft_stroke_border_cubicto
		add	esp, 10h
		mov	[ebp+var_60], eax
		cmp	[ebp+var_60], 0
		jz	short loc_3B0B
		jmp	short loc_3B2B
; ---------------------------------------------------------------------------

loc_3B0B:				; CODE XREF: _ft_stroke_border_arcto+197j
		mov	ecx, [ebp+var_34]
		mov	[ebp+var_24], ecx
		mov	edx, [ebp+var_30]
		mov	[ebp+var_20], edx
		mov	eax, [ebp+var_4]
		sub	eax, [ebp+var_C]
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+var_14]
		mov	[ebp+var_8], ecx
		jmp	loc_39E0
; ---------------------------------------------------------------------------

loc_3B2B:				; CODE XREF: _ft_stroke_border_arcto+74j
					; _ft_stroke_border_arcto+199j
		mov	eax, [ebp+var_60]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN17_3
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		add	esp, 64h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_stroke_border_arcto	endp

; ---------------------------------------------------------------------------
		align 10h
$LN17_3		dd 4			; DATA XREF: _ft_stroke_border_arcto+1C2o
		dd offset $LN16_2
$LN16_2		dd 0FFFFFFDCh, 8	; DATA XREF: .text$mn:00003B54o
		dd offset $LN12_1
		db 0CCh
		db 3 dup(0FFh)
		dd 8
		dd offset $LN13_1
		dd 0FFFFFFBCh, 8
		dd offset $LN14_2
		dd 0FFFFFFACh, 8
		dd offset $LN15_2
$LN15_2		db 62h,	32h, 0		; DATA XREF: .text$mn:00003B84o
$LN14_2		db 61h			; DATA XREF: .text$mn:00003B78o
		db  32h	; 2
		align 2
$LN13_1		dw 62h			; DATA XREF: .text$mn:00003B6Co
$LN12_1		dd 0CCCC0061h, 3 dup(0CCCCCCCCh) ; DATA	XREF: .text$mn:00003B60o

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_stroke_border_moveto proc near	; CODE XREF: _ft_stroker_subpath_start+5Bp
					; _ft_stroker_subpath_start+97p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+14h], 0
		jl	short loc_3BBA
		push	0
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ft_stroke_border_close
		add	esp, 8

loc_3BBA:				; CODE XREF: _ft_stroke_border_moveto+Aj
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[edx+14h], ecx
		mov	edx, [ebp+arg_0]
		mov	byte ptr [edx+10h], 0
		push	0
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ft_stroke_border_lineto
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_ft_stroke_border_moveto endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_stroke_border_init proc near	; CODE XREF: _FT_Stroker_New+A8p
					; _FT_Stroker_New+C4p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	[eax+18h], ecx
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+8], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+0Ch], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx], 0
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+4], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+14h], 0FFFFFFFFh
		mov	ecx, [ebp+arg_0]
		mov	byte ptr [ecx+1Ch], 0
		pop	ebp
		retn
_ft_stroke_border_init endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_stroke_border_reset	proc near	; CODE XREF: _FT_Stroker_Rewind+19p
					; _FT_Stroker_Rewind+31p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+14h], 0FFFFFFFFh
		mov	edx, [ebp+arg_0]
		mov	byte ptr [edx+1Ch], 0
		pop	ebp
		retn
_ft_stroke_border_reset	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_stroke_border_done proc near	; CODE XREF: _FT_Stroker_Done+2Fp
					; _FT_Stroker_Done+47p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+18h]
		mov	[ebp+var_4], ecx

loc_3C74:				; CODE XREF: _ft_stroke_border_done+33j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		push	eax
		mov	ecx, [ebp+var_4]
		push	ecx
		call	_ft_mem_free
		add	esp, 8
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+8], 0
		xor	eax, eax
		jnz	short loc_3C74

loc_3C95:				; CODE XREF: _ft_stroke_border_done+54j
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		call	_ft_mem_free
		add	esp, 8
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+0Ch], 0
		xor	edx, edx
		jnz	short loc_3C95
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+4], 0
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+14h], 0FFFFFFFFh
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+1Ch], 0
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_stroke_border_done endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_stroke_border_get_counts proc near	; CODE XREF: _FT_Stroker_GetBorderCounts+6Cp
					; _FT_Stroker_GetCounts+55p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], 0
		mov	[ebp+var_8], 0
		mov	[ebp+var_C], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_10], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[ebp+var_14], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		mov	[ebp+var_18], edx
		mov	[ebp+var_1C], 0
		jmp	short loc_3D6C
; ---------------------------------------------------------------------------

loc_3D48:				; CODE XREF: _ft_stroke_border_get_counts:loc_3DC3j
		mov	eax, [ebp+var_10]
		sub	eax, 1
		mov	[ebp+var_10], eax
		mov	ecx, [ebp+var_8]
		add	ecx, 1
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+var_14]
		add	edx, 8
		mov	[ebp+var_14], edx
		mov	eax, [ebp+var_18]
		add	eax, 1
		mov	[ebp+var_18], eax

loc_3D6C:				; CODE XREF: _ft_stroke_border_get_counts+56j
		cmp	[ebp+var_10], 0
		jbe	short loc_3DC5
		mov	ecx, 1
		imul	edx, ecx, 0
		mov	eax, [ebp+var_18]
		movzx	ecx, byte ptr [eax+edx]
		and	ecx, 4
		jz	short loc_3D97
		cmp	[ebp+var_1C], 0
		jz	short loc_3D8E
		jmp	short $Fail$12
; ---------------------------------------------------------------------------

loc_3D8E:				; CODE XREF: _ft_stroke_border_get_counts+9Aj
		mov	[ebp+var_1C], 1
		jmp	short loc_3D9F
; ---------------------------------------------------------------------------

loc_3D97:				; CODE XREF: _ft_stroke_border_get_counts+94j
		cmp	[ebp+var_1C], 0
		jnz	short loc_3D9F
		jmp	short $Fail$12
; ---------------------------------------------------------------------------

loc_3D9F:				; CODE XREF: _ft_stroke_border_get_counts+A5j
					; _ft_stroke_border_get_counts+ABj
		mov	edx, 1
		imul	eax, edx, 0
		mov	ecx, [ebp+var_18]
		movzx	edx, byte ptr [ecx+eax]
		and	edx, 8
		jz	short loc_3DC3
		mov	[ebp+var_1C], 0
		mov	eax, [ebp+var_C]
		add	eax, 1
		mov	[ebp+var_C], eax

loc_3DC3:				; CODE XREF: _ft_stroke_border_get_counts+C1j
		jmp	short loc_3D48
; ---------------------------------------------------------------------------

loc_3DC5:				; CODE XREF: _ft_stroke_border_get_counts+80j
		cmp	[ebp+var_1C], 0
		jz	short loc_3DCD
		jmp	short $Fail$12
; ---------------------------------------------------------------------------

loc_3DCD:				; CODE XREF: _ft_stroke_border_get_counts+D9j
		mov	ecx, [ebp+arg_0]
		mov	byte ptr [ecx+1Ch], 1

$Exit$13:				; CODE XREF: _ft_stroke_border_get_counts+107j
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+var_8]
		mov	[edx], eax
		mov	ecx, [ebp+arg_8]
		mov	edx, [ebp+var_C]
		mov	[ecx], edx
		mov	eax, [ebp+var_4]
		jmp	short loc_3DF9
; ---------------------------------------------------------------------------

$Fail$12:				; CODE XREF: _ft_stroke_border_get_counts+9Cj
					; _ft_stroke_border_get_counts+ADj ...
		mov	[ebp+var_8], 0
		mov	[ebp+var_C], 0
		jmp	short $Exit$13
; ---------------------------------------------------------------------------

loc_3DF9:				; CODE XREF: _ft_stroke_border_get_counts+F7j
		mov	esp, ebp
		pop	ebp
		retn
_ft_stroke_border_get_counts endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_stroke_border_export proc near	; CODE XREF: _FT_Stroker_ExportBorder+48p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		shl	ecx, 3
		push	ecx		; size_t
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		push	eax		; void *
		mov	ecx, [ebp+arg_4]
		movsx	edx, word ptr [ecx+2]
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+4]
		lea	edx, [ecx+edx*8]
		push	edx		; void *
		call	_memcpy
		add	esp, 0Ch
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+0Ch]
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_4]
		movsx	edx, word ptr [ecx+2]
		mov	eax, [ebp+arg_4]
		add	edx, [eax+8]
		mov	[ebp+var_C], edx
		jmp	short loc_3E87
; ---------------------------------------------------------------------------

loc_3E6C:				; CODE XREF: _ft_stroke_border_export:loc_3EB9j
		mov	ecx, [ebp+var_4]
		sub	ecx, 1
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+var_8]
		add	edx, 1
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_C]
		add	eax, 1
		mov	[ebp+var_C], eax

loc_3E87:				; CODE XREF: _ft_stroke_border_export+6Aj
		cmp	[ebp+var_4], 0
		jbe	short loc_3EBB
		mov	ecx, [ebp+var_8]
		movzx	edx, byte ptr [ecx]
		and	edx, 1
		jz	short loc_3EA0
		mov	eax, [ebp+var_C]
		mov	byte ptr [eax],	1
		jmp	short loc_3EB9
; ---------------------------------------------------------------------------

loc_3EA0:				; CODE XREF: _ft_stroke_border_export+96j
		mov	ecx, [ebp+var_8]
		movzx	edx, byte ptr [ecx]
		and	edx, 2
		jz	short loc_3EB3
		mov	eax, [ebp+var_C]
		mov	byte ptr [eax],	2
		jmp	short loc_3EB9
; ---------------------------------------------------------------------------

loc_3EB3:				; CODE XREF: _ft_stroke_border_export+A9j
		mov	ecx, [ebp+var_C]
		mov	byte ptr [ecx],	0

loc_3EB9:				; CODE XREF: _ft_stroke_border_export+9Ej
					; _ft_stroke_border_export+B1j
		jmp	short loc_3E6C
; ---------------------------------------------------------------------------

loc_3EBB:				; CODE XREF: _ft_stroke_border_export+8Bj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	[ebp+var_10], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		mov	[ebp+var_14], edx
		mov	eax, [ebp+arg_4]
		movsx	ecx, word ptr [eax]
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+0Ch]
		lea	ecx, [eax+ecx*2]
		mov	[ebp+var_18], ecx
		mov	edx, [ebp+arg_4]
		mov	ax, [edx+2]
		mov	word ptr [ebp+var_1C], ax
		jmp	short loc_3F09
; ---------------------------------------------------------------------------

loc_3EEB:				; CODE XREF: _ft_stroke_border_export:loc_3F3Dj
		mov	ecx, [ebp+var_10]
		sub	ecx, 1
		mov	[ebp+var_10], ecx
		mov	edx, [ebp+var_14]
		add	edx, 1
		mov	[ebp+var_14], edx
		mov	ax, word ptr [ebp+var_1C]
		add	ax, 1
		mov	word ptr [ebp+var_1C], ax

loc_3F09:				; CODE XREF: _ft_stroke_border_export+E9j
		cmp	[ebp+var_10], 0
		jbe	short loc_3F3F
		mov	ecx, [ebp+var_14]
		movzx	edx, byte ptr [ecx]
		and	edx, 8
		jz	short loc_3F3D
		mov	eax, [ebp+var_18]
		mov	cx, word ptr [ebp+var_1C]
		mov	[eax], cx
		mov	edx, [ebp+var_18]
		add	edx, 2
		mov	[ebp+var_18], edx
		mov	eax, [ebp+arg_4]
		mov	cx, [eax]
		add	cx, 1
		mov	edx, [ebp+arg_4]
		mov	[edx], cx

loc_3F3D:				; CODE XREF: _ft_stroke_border_export+118j
		jmp	short loc_3EEB
; ---------------------------------------------------------------------------

loc_3F3F:				; CODE XREF: _ft_stroke_border_export+10Dj
		mov	eax, [ebp+arg_4]
		movsx	ecx, word ptr [eax+2]
		mov	edx, [ebp+arg_0]
		add	ecx, [edx]
		mov	eax, [ebp+arg_4]
		mov	[eax+2], cx

loc_3F52:				; CODE XREF: _ft_stroke_border_export+17Bj
		mov	ecx, [ebp+arg_4]
		push	ecx
		call	_FT_Outline_Check
		add	esp, 4
		test	eax, eax
		jz	short loc_3F79
		push	offset $SG7573	; "..\\..\\..\\src\\base\\ftstroke.c"
		push	2EBh
		push	offset $SG7574	; "assertion failed on line %d of file %s\"...
		call	_FT_Panic
		add	esp, 0Ch

loc_3F79:				; CODE XREF: _ft_stroke_border_export+160j
		xor	edx, edx
		jnz	short loc_3F52
		add	esp, 1Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_stroke_border_export endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_stroker_arcto proc near		; CODE XREF: _ft_stroker_cap+44p
					; _ft_stroker_outside+37p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+3Ch]
		mov	[ebp+var_C], ecx
		mov	[ebp+var_10], 0
		mov	edx, [ebp+arg_4]
		shl	edx, 5
		mov	eax, [ebp+arg_0]
		lea	ecx, [eax+edx+40h]
		mov	[ebp+var_14], ecx
		imul	edx, [ebp+arg_4], 0B40000h
		mov	eax, 5A0000h
		sub	eax, edx
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		call	_FT_Angle_Diff
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0B40000h
		jnz	short loc_4006
		mov	edx, [ebp+var_8]
		neg	edx
		shl	edx, 1
		mov	[ebp+var_4], edx

loc_4006:				; CODE XREF: _ft_stroker_arcto+6Aj
		mov	eax, [ebp+var_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		add	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+arg_0]
		add	ecx, 8
		push	ecx
		mov	edx, [ebp+var_14]
		push	edx
		call	_ft_stroke_border_arcto
		add	esp, 14h
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_14]
		mov	byte ptr [eax+10h], 0
		mov	eax, [ebp+var_10]
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_stroker_arcto endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_stroker_cap	proc near		; CODE XREF: _FT_Stroker_EndSubPath+67p
					; _FT_Stroker_EndSubPath+BDp

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 4Ch
		push	edi
		lea	edi, [ebp+var_4C]
		mov	ecx, 13h
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_4], 0
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+2Ch], 1
		jnz	short loc_40A4
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	[ecx], edx
		mov	eax, [ebp+arg_4]
		add	eax, 0B40000h
		mov	ecx, [ebp+arg_0]
		mov	[ecx+4], eax
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ft_stroker_arcto
		add	esp, 8
		mov	[ebp+var_4], eax
		jmp	$Exit$15
; ---------------------------------------------------------------------------

loc_40A4:				; CODE XREF: _ft_stroker_cap+24j
		mov	ecx, [ebp+arg_0]
		cmp	dword ptr [ecx+2Ch], 2
		jnz	loc_41A7
		imul	edx, [ebp+arg_8], 0B40000h
		mov	eax, 5A0000h
		sub	eax, edx
		mov	[ebp+var_28], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+3Ch]
		mov	[ebp+var_2C], edx
		mov	eax, [ebp+arg_8]
		shl	eax, 5
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax+40h]
		mov	[ebp+var_30], edx
		mov	eax, [ebp+arg_4]
		add	eax, [ebp+var_28]
		push	eax
		mov	ecx, [ebp+var_2C]
		push	ecx
		lea	edx, [ebp+var_20]
		push	edx
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_2C]
		push	ecx
		lea	edx, [ebp+var_10]
		push	edx
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		add	ecx, [ebp+var_20]
		add	ecx, [ebp+var_10]
		mov	[ebp+var_10], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+0Ch]
		add	eax, [ebp+var_1C]
		add	eax, [ebp+var_C]
		mov	[ebp+var_C], eax
		push	0
		lea	ecx, [ebp+var_10]
		push	ecx
		mov	edx, [ebp+var_30]
		push	edx
		call	_ft_stroke_border_lineto
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_4144
		jmp	$Exit$15
; ---------------------------------------------------------------------------

loc_4144:				; CODE XREF: _ft_stroker_cap+EDj
		mov	eax, [ebp+arg_4]
		sub	eax, [ebp+var_28]
		push	eax
		mov	ecx, [ebp+var_2C]
		push	ecx
		lea	edx, [ebp+var_20]
		push	edx
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_2C]
		push	ecx
		lea	edx, [ebp+var_10]
		push	edx
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_20]
		add	ecx, [eax+8]
		add	ecx, [ebp+var_10]
		mov	[ebp+var_10], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_1C]
		add	eax, [edx+0Ch]
		add	eax, [ebp+var_C]
		mov	[ebp+var_C], eax
		push	0
		lea	ecx, [ebp+var_10]
		push	ecx
		mov	edx, [ebp+var_30]
		push	edx
		call	_ft_stroke_border_lineto
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		jmp	$Exit$15
; ---------------------------------------------------------------------------

loc_41A7:				; CODE XREF: _ft_stroker_cap+5Bj
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+2Ch], 0
		jnz	$Exit$15
		imul	ecx, [ebp+arg_8], 0B40000h
		mov	edx, 5A0000h
		sub	edx, ecx
		mov	[ebp+var_44], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+3Ch]
		mov	[ebp+var_48], ecx
		mov	edx, [ebp+arg_8]
		shl	edx, 5
		mov	eax, [ebp+arg_0]
		lea	ecx, [eax+edx+40h]
		mov	[ebp+var_4C], ecx
		mov	edx, [ebp+arg_4]
		add	edx, [ebp+var_44]
		push	edx
		mov	eax, [ebp+var_48]
		push	eax
		lea	ecx, [ebp+var_3C]
		push	ecx
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_3C]
		add	eax, [edx+8]
		mov	[ebp+var_3C], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_38]
		add	edx, [ecx+0Ch]
		mov	[ebp+var_38], edx
		push	0
		lea	eax, [ebp+var_3C]
		push	eax
		mov	ecx, [ebp+var_4C]
		push	ecx
		call	_ft_stroke_border_lineto
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_422A
		jmp	short $Exit$15
; ---------------------------------------------------------------------------

loc_422A:				; CODE XREF: _ft_stroker_cap+1D6j
		mov	edx, [ebp+arg_4]
		sub	edx, [ebp+var_44]
		push	edx
		mov	eax, [ebp+var_48]
		push	eax
		lea	ecx, [ebp+var_3C]
		push	ecx
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_3C]
		add	eax, [edx+8]
		mov	[ebp+var_3C], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_38]
		add	edx, [ecx+0Ch]
		mov	[ebp+var_38], edx
		push	0
		lea	eax, [ebp+var_3C]
		push	eax
		mov	ecx, [ebp+var_4C]
		push	ecx
		call	_ft_stroke_border_lineto
		add	esp, 0Ch
		mov	[ebp+var_4], eax

$Exit$15:				; CODE XREF: _ft_stroker_cap+4Fj
					; _ft_stroker_cap+EFj ...
		mov	eax, [ebp+var_4]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN14_3
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		add	esp, 4Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_stroker_cap	endp

; ---------------------------------------------------------------------------
		align 4
$LN14_3		dd 3			; DATA XREF: _ft_stroker_cap+225o
		dd offset $LN13_2
$LN13_2		dd 0FFFFFFF0h, 8	; DATA XREF: .text$mn:00004298o
		dd offset $LN10_2	; "delta"
		dd 0FFFFFFE0h, 8
		dd offset $LN11_1	; "delta2"
		dd 0FFFFFFC4h, 8
		dd offset $LN12_2	; "delta"
$LN12_2		db 'delta',0            ; DATA XREF: .text$mn:000042BCo
$LN11_1		db 'delta2',0           ; DATA XREF: .text$mn:000042B0o
$LN10_2		db 'delta',0            ; DATA XREF: .text$mn:000042A4o
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_stroker_inside proc	near		; CODE XREF: _FT_Stroker_EndSubPath+170p
					; _ft_stroker_process_corner+62p

var_38		= byte ptr -38h
var_35		= byte ptr -35h
var_34		= dword	ptr -34h
var_2D		= byte ptr -2Dh
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		push	edi
		lea	edi, [ebp+var_38]
		mov	ecx, 0Eh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		shl	eax, 5
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax+40h]
		mov	[ebp+var_4], edx
		mov	[ebp+var_2C], 0
		imul	eax, [ebp+arg_4], 0B40000h
		mov	ecx, 5A0000h
		sub	ecx, eax
		mov	[ebp+var_10], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		push	edx
		call	_FT_Angle_Diff
		add	esp, 8
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_4]
		movzx	ecx, byte ptr [eax+10h]
		test	ecx, ecx
		jz	short loc_434C
		cmp	[ebp+arg_8], 0
		jnz	short loc_4352

loc_434C:				; CODE XREF: _ft_stroker_inside+64j
		mov	[ebp+var_2D], 0
		jmp	short loc_43A3
; ---------------------------------------------------------------------------

loc_4352:				; CODE XREF: _ft_stroker_inside+6Aj
		mov	edx, [ebp+var_C]
		push	edx
		call	_FT_Tan
		add	esp, 4
		push	eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+3Ch]
		push	ecx
		call	_FT_MulFix
		add	esp, 8
		push	eax
		call	_ft_pos_abs
		add	esp, 4
		mov	[ebp+var_34], eax
		cmp	[ebp+var_34], 0
		jz	short loc_4399
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+10h]
		cmp	eax, [ebp+var_34]
		jl	short loc_4399
		mov	ecx, [ebp+arg_8]
		cmp	ecx, [ebp+var_34]
		jl	short loc_4399
		mov	[ebp+var_35], 1
		jmp	short loc_439D
; ---------------------------------------------------------------------------

loc_4399:				; CODE XREF: _ft_stroker_inside+9Ej
					; _ft_stroker_inside+A9j ...
		mov	[ebp+var_35], 0

loc_439D:				; CODE XREF: _ft_stroker_inside+B7j
		mov	dl, [ebp+var_35]
		mov	[ebp+var_2D], dl

loc_43A3:				; CODE XREF: _ft_stroker_inside+70j
		movzx	eax, [ebp+var_2D]
		test	eax, eax
		jnz	short loc_43E9
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		add	edx, [ebp+var_10]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+3Ch]
		push	ecx
		lea	edx, [ebp+var_24]
		push	edx
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_24]
		add	ecx, [eax+8]
		mov	[ebp+var_24], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_20]
		add	eax, [edx+0Ch]
		mov	[ebp+var_20], eax
		mov	ecx, [ebp+var_4]
		mov	byte ptr [ecx+10h], 0
		jmp	short loc_4448
; ---------------------------------------------------------------------------

loc_43E9:				; CODE XREF: _ft_stroker_inside+C9j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		add	eax, [ebp+var_C]
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+var_C]
		push	ecx
		call	_FT_Cos
		add	esp, 4
		mov	[ebp+var_18], eax
		mov	edx, [ebp+var_18]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+3Ch]
		push	ecx
		call	_FT_DivFix
		add	esp, 8
		mov	[ebp+var_14], eax
		mov	edx, [ebp+var_8]
		add	edx, [ebp+var_10]
		push	edx
		mov	eax, [ebp+var_14]
		push	eax
		lea	ecx, [ebp+var_24]
		push	ecx
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_24]
		add	eax, [edx+8]
		mov	[ebp+var_24], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_20]
		add	edx, [ecx+0Ch]
		mov	[ebp+var_20], edx

loc_4448:				; CODE XREF: _ft_stroker_inside+107j
		push	0
		lea	eax, [ebp+var_24]
		push	eax
		mov	ecx, [ebp+var_4]
		push	ecx
		call	_ft_stroke_border_lineto
		add	esp, 0Ch
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+var_2C]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN12_3
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		add	esp, 38h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_stroker_inside endp

; ---------------------------------------------------------------------------
$LN12_3		dd 1			; DATA XREF: _ft_stroker_inside+184o
		dd offset $LN11_2
$LN11_2		dd 0FFFFFFDCh, 8	; DATA XREF: .text$mn:00004484o
		dd offset $LN10_3	; "delta"
$LN10_3		db 'delta',0            ; DATA XREF: .text$mn:00004490o
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_stroker_outside proc near		; CODE XREF: _FT_Stroker_EndSubPath+197p
					; _ft_stroker_process_corner+86p

var_70		= byte ptr -70h
var_6E		= byte ptr -6Eh
var_6D		= byte ptr -6Dh
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_22		= byte ptr -22h
var_21		= byte ptr -21h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 70h
		push	edi
		lea	edi, [ebp+var_70]
		mov	ecx, 1Ch
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		shl	eax, 5
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax+40h]
		mov	[ebp+var_4], edx
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+30h], 0
		jnz	short loc_44E7
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ft_stroker_arcto
		add	esp, 8
		mov	[ebp+var_8], eax
		jmp	$Exit$30
; ---------------------------------------------------------------------------

loc_44E7:				; CODE XREF: _ft_stroker_outside+2Dj
		mov	[ebp+var_10], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+3Ch]
		mov	[ebp+var_14], ecx
		mov	[ebp+var_18], 0
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		imul	edx, [ebp+arg_4], 0B40000h
		mov	eax, 5A0000h
		sub	eax, edx
		mov	[ebp+var_C], eax
		mov	ecx, [ebp+arg_0]
		cmp	dword ptr [ecx+30h], 1
		jnz	short loc_452C
		mov	[ebp+var_6D], 1
		jmp	short loc_4530
; ---------------------------------------------------------------------------

loc_452C:				; CODE XREF: _ft_stroker_outside+84j
		mov	[ebp+var_6D], 0

loc_4530:				; CODE XREF: _ft_stroker_outside+8Aj
		mov	dl, [ebp+var_6D]
		mov	[ebp+var_21], dl
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+30h], 2
		jz	short loc_4545
		mov	[ebp+var_6E], 1
		jmp	short loc_4549
; ---------------------------------------------------------------------------

loc_4545:				; CODE XREF: _ft_stroker_outside+9Dj
		mov	[ebp+var_6E], 0

loc_4549:				; CODE XREF: _ft_stroker_outside+A3j
		mov	cl, [ebp+var_6E]
		mov	[ebp+var_22], cl
		movzx	edx, [ebp+var_21]
		test	edx, edx
		jnz	loc_45F0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		push	eax
		call	_FT_Angle_Diff
		add	esp, 8
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0B40000h
		jnz	short loc_458C
		mov	ecx, [ebp+var_C]
		mov	[ebp+var_18], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	[ebp+var_1C], eax
		jmp	short loc_45A5
; ---------------------------------------------------------------------------

loc_458C:				; CODE XREF: _ft_stroker_outside+DAj
		mov	eax, [ebp+var_18]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_18], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		add	edx, [ebp+var_18]
		add	edx, [ebp+var_C]
		mov	[ebp+var_1C], edx

loc_45A5:				; CODE XREF: _ft_stroker_outside+EAj
		mov	eax, [ebp+var_18]
		push	eax
		call	_FT_Cos
		add	esp, 4
		mov	[ebp+var_20], eax
		mov	ecx, [ebp+var_20]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+38h]
		push	eax
		call	_FT_MulFix
		add	esp, 8
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 10000h
		jge	short loc_45F0
		movzx	ecx, [ebp+var_22]
		test	ecx, ecx
		jnz	short loc_45EC
		mov	edx, [ebp+var_18]
		push	edx
		call	_ft_pos_abs
		add	esp, 4
		cmp	eax, 39h ; '9'
		jle	short loc_45F0

loc_45EC:				; CODE XREF: _ft_stroker_outside+139j
		mov	[ebp+var_21], 1

loc_45F0:				; CODE XREF: _ft_stroker_outside+B5j
					; _ft_stroker_outside+131j ...
		movzx	eax, [ebp+var_21]
		test	eax, eax
		jz	loc_47A5
		movzx	ecx, [ebp+var_22]
		test	ecx, ecx
		jz	short loc_4657
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		add	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		lea	edx, [ebp+var_30]
		push	edx
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_30]
		add	ecx, [eax+8]
		mov	[ebp+var_30], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_2C]
		add	eax, [edx+0Ch]
		mov	[ebp+var_2C], eax
		mov	ecx, [ebp+var_4]
		mov	byte ptr [ecx+10h], 0
		push	0
		lea	edx, [ebp+var_30]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		call	_ft_stroke_border_lineto
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		jmp	loc_47A0
; ---------------------------------------------------------------------------

loc_4657:				; CODE XREF: _ft_stroker_outside+162j
		mov	ecx, [ebp+var_1C]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+38h]
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		call	_FT_MulFix
		add	esp, 8
		push	eax
		lea	edx, [ebp+var_40]
		push	edx
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_40]
		add	ecx, [eax+8]
		mov	[ebp+var_40], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_3C]
		add	eax, [edx+0Ch]
		mov	[ebp+var_3C], eax
		mov	ecx, [ebp+var_18]
		push	ecx
		call	_FT_Sin
		add	esp, 4
		push	eax
		call	_ft_pos_abs
		add	esp, 4
		push	eax
		mov	edx, 10000h
		sub	edx, [ebp+var_10]
		push	edx
		mov	eax, [ebp+var_14]
		push	eax
		call	_FT_MulDiv
		add	esp, 0Ch
		mov	[ebp+var_58], eax
		mov	ecx, [ebp+var_1C]
		add	ecx, [ebp+var_C]
		push	ecx
		mov	edx, [ebp+var_58]
		push	edx
		lea	eax, [ebp+var_50]
		push	eax
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	ecx, [ebp+var_50]
		add	ecx, [ebp+var_40]
		mov	[ebp+var_50], ecx
		mov	edx, [ebp+var_4C]
		add	edx, [ebp+var_3C]
		mov	[ebp+var_4C], edx
		push	0
		lea	eax, [ebp+var_50]
		push	eax
		mov	ecx, [ebp+var_4]
		push	ecx
		call	_ft_stroke_border_lineto
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_470A
		jmp	$Exit$30
; ---------------------------------------------------------------------------

loc_470A:				; CODE XREF: _ft_stroker_outside+263j
		mov	edx, [ebp+var_1C]
		sub	edx, [ebp+var_C]
		push	edx
		mov	eax, [ebp+var_58]
		push	eax
		lea	ecx, [ebp+var_50]
		push	ecx
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	edx, [ebp+var_50]
		add	edx, [ebp+var_40]
		mov	[ebp+var_50], edx
		mov	eax, [ebp+var_4C]
		add	eax, [ebp+var_3C]
		mov	[ebp+var_4C], eax
		push	0
		lea	ecx, [ebp+var_50]
		push	ecx
		mov	edx, [ebp+var_4]
		push	edx
		call	_ft_stroke_border_lineto
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_4753
		jmp	$Exit$30
; ---------------------------------------------------------------------------

loc_4753:				; CODE XREF: _ft_stroker_outside+2ACj
		cmp	[ebp+arg_8], 0
		jnz	short loc_47A0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		add	ecx, [ebp+var_C]
		push	ecx
		mov	edx, [ebp+var_14]
		push	edx
		lea	eax, [ebp+var_50]
		push	eax
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_50]
		add	edx, [ecx+8]
		mov	[ebp+var_50], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_4C]
		add	ecx, [eax+0Ch]
		mov	[ebp+var_4C], ecx
		push	0
		lea	edx, [ebp+var_50]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		call	_ft_stroke_border_lineto
		add	esp, 0Ch
		mov	[ebp+var_8], eax

loc_47A0:				; CODE XREF: _ft_stroker_outside+1B2j
					; _ft_stroker_outside+2B7j
		jmp	$Exit$30
; ---------------------------------------------------------------------------

loc_47A5:				; CODE XREF: _ft_stroker_outside+156j
		mov	ecx, [ebp+var_20]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+3Ch]
		push	eax
		call	_FT_DivFix
		add	esp, 8
		mov	[ebp+var_5C], eax
		mov	ecx, [ebp+var_1C]
		push	ecx
		mov	edx, [ebp+var_5C]
		push	edx
		lea	eax, [ebp+var_68]
		push	eax
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_68]
		add	edx, [ecx+8]
		mov	[ebp+var_68], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_64]
		add	ecx, [eax+0Ch]
		mov	[ebp+var_64], ecx
		push	0
		lea	edx, [ebp+var_68]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		call	_ft_stroke_border_lineto
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_4804
		jmp	short $Exit$30
; ---------------------------------------------------------------------------

loc_4804:				; CODE XREF: _ft_stroker_outside+360j
		cmp	[ebp+arg_8], 0
		jnz	short $Exit$30
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		add	edx, [ebp+var_C]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+3Ch]
		push	ecx
		lea	edx, [ebp+var_68]
		push	edx
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_68]
		add	ecx, [eax+8]
		mov	[ebp+var_68], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_64]
		add	eax, [edx+0Ch]
		mov	[ebp+var_64], eax
		push	0
		lea	ecx, [ebp+var_68]
		push	ecx
		mov	edx, [ebp+var_4]
		push	edx
		call	_ft_stroke_border_lineto
		add	esp, 0Ch
		mov	[ebp+var_8], eax

$Exit$30:				; CODE XREF: _ft_stroker_outside+42j
					; _ft_stroker_outside+265j ...
		mov	eax, [ebp+var_8]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN29_2
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		add	esp, 70h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_stroker_outside endp

; ---------------------------------------------------------------------------
		align 4
$LN29_2		dd 4			; DATA XREF: _ft_stroker_outside+3BBo
		dd offset $LN28_2
$LN28_2		dd 0FFFFFFD0h, 8	; DATA XREF: .text$mn:0000487Co
		dd offset $LN24		; "delta"
		dd 0FFFFFFC0h, 8
		dd offset $LN25		; "middle"
		dd 0FFFFFFB0h, 8
		dd offset $LN26		; "delta"
		dd 0FFFFFF98h, 8
		dd offset $LN27		; "delta"
$LN27		db 'delta',0            ; DATA XREF: .text$mn:000048ACo
$LN26		db 'delta',0            ; DATA XREF: .text$mn:000048A0o
$LN25		db 'middle',0           ; DATA XREF: .text$mn:00004894o
$LN24		db 'delta',0            ; DATA XREF: .text$mn:00004888o
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_stroker_process_corner proc	near	; CODE XREF: _FT_Stroker_LineTo+F1p
					; _FT_Stroker_ConicTo+24Bp ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		push	eax
		call	_FT_Angle_Diff
		add	esp, 8
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jnz	short loc_4912
		jmp	short $Exit$6
; ---------------------------------------------------------------------------

loc_4912:				; CODE XREF: _ft_stroker_process_corner+3Ej
		mov	[ebp+var_C], 0
		cmp	[ebp+var_8], 0
		jge	short loc_4926
		mov	[ebp+var_C], 1

loc_4926:				; CODE XREF: _ft_stroker_process_corner+4Dj
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+var_C]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ft_stroker_inside
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_4945
		jmp	short $Exit$6
; ---------------------------------------------------------------------------

loc_4945:				; CODE XREF: _ft_stroker_process_corner+71j
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, 1
		sub	edx, [ebp+var_C]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ft_stroker_outside
		add	esp, 0Ch
		mov	[ebp+var_4], eax

$Exit$6:				; CODE XREF: _ft_stroker_process_corner+40j
					; _ft_stroker_process_corner+73j
		mov	eax, [ebp+var_4]
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_stroker_process_corner endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_stroker_subpath_start proc near	; CODE XREF: _FT_Stroker_LineTo+C8p
					; _FT_Stroker_ConicTo+22Cp ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		push	edi
		lea	edi, [ebp+var_28]
		mov	ecx, 0Ah
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		add	eax, 5A0000h
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+3Ch]
		push	edx
		lea	eax, [ebp+var_C]
		push	eax
		call	_FT_Vector_From_Polar
		add	esp, 0Ch
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		add	edx, [ebp+var_C]
		mov	[ebp+var_1C], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		add	ecx, [ebp+var_8]
		mov	[ebp+var_18], ecx
		mov	edx, [ebp+arg_0]
		add	edx, 40h ; '@'
		mov	[ebp+var_28], edx
		lea	eax, [ebp+var_1C]
		push	eax
		mov	ecx, [ebp+var_28]
		push	ecx
		call	_ft_stroke_border_moveto
		add	esp, 8
		mov	[ebp+var_24], eax
		cmp	[ebp+var_24], 0
		jz	short loc_49EE
		jmp	short $Exit$8
; ---------------------------------------------------------------------------

loc_49EE:				; CODE XREF: _ft_stroker_subpath_start+6Aj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		sub	eax, [ebp+var_C]
		mov	[ebp+var_1C], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		sub	edx, [ebp+var_8]
		mov	[ebp+var_18], edx
		mov	eax, [ebp+var_28]
		add	eax, 20h ; ' '
		mov	[ebp+var_28], eax
		lea	ecx, [ebp+var_1C]
		push	ecx
		mov	edx, [ebp+var_28]
		push	edx
		call	_ft_stroke_border_moveto
		add	esp, 8
		mov	[ebp+var_24], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	[eax+18h], ecx
		mov	edx, [ebp+arg_0]
		mov	byte ptr [edx+14h], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_8]
		mov	[eax+24h], ecx

$Exit$8:				; CODE XREF: _ft_stroker_subpath_start+6Cj
		mov	eax, [ebp+var_24]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7_1
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		add	esp, 28h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_stroker_subpath_start endp

; ---------------------------------------------------------------------------
		align 10h
$LN7_1		dd 2			; DATA XREF: _ft_stroker_subpath_start+C2o
		dd offset $LN6_0
$LN6_0		dd 0FFFFFFF4h, 8	; DATA XREF: .text$mn:00004A64o
		dd offset $LN4		; "delta"
		dd 0FFFFFFE4h, 8
		dd offset $LN5		; "point"
$LN5		db 'point',0            ; DATA XREF: .text$mn:00004A7Co
$LN4		db 'delta',0            ; DATA XREF: .text$mn:00004A70o
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_stroker_add_reverse_left proc near	; CODE XREF: _FT_Stroker_EndSubPath+83p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_24], eax
		mov	[ebp+var_20], eax
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		add	eax, 40h ; '@'
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_0]
		add	ecx, 60h ; '`'
		mov	[ebp+var_8], ecx
		mov	[ebp+var_10], 0

loc_4ACF:				; CODE XREF: _ft_stroker_add_reverse_left+61j
		mov	edx, [ebp+var_8]
		cmp	dword ptr [edx+14h], 0
		jge	short loc_4AEF
		push	offset $SG7945	; "..\\..\\..\\src\\base\\ftstroke.c"
		push	71Fh
		push	offset $SG7946	; "assertion failed on line %d of file %s\"...
		call	_FT_Panic
		add	esp, 0Ch

loc_4AEF:				; CODE XREF: _ft_stroker_add_reverse_left+46j
		xor	eax, eax
		jnz	short loc_4ACF
		mov	ecx, [ebp+var_8]
		mov	edx, [ebp+var_8]
		mov	eax, [ecx]
		sub	eax, [edx+14h]
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jle	$Exit$15_0
		mov	ecx, [ebp+var_C]
		push	ecx
		mov	edx, [ebp+var_4]
		push	edx
		call	_ft_stroke_border_grow
		add	esp, 8
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_4B29
		jmp	$Exit$15_0
; ---------------------------------------------------------------------------

loc_4B29:				; CODE XREF: _ft_stroker_add_reverse_left+92j
		mov	eax, [ebp+var_4]
		mov	ecx, [eax]
		mov	edx, [ebp+var_4]
		mov	eax, [edx+8]
		lea	ecx, [eax+ecx*8]
		mov	[ebp+var_14], ecx
		mov	edx, [ebp+var_4]
		mov	eax, [edx+0Ch]
		mov	ecx, [ebp+var_4]
		add	eax, [ecx]
		mov	[ebp+var_18], eax
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+8]
		lea	eax, [edx+eax*8-8]
		mov	[ebp+var_1C], eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+0Ch]
		mov	eax, [ebp+var_8]
		mov	ecx, [eax]
		lea	edx, [edx+ecx-1]
		mov	[ebp+var_20], edx

loc_4B6C:				; CODE XREF: _ft_stroker_add_reverse_left+1A3j
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+14h]
		mov	edx, [ebp+var_8]
		mov	eax, [edx+8]
		lea	ecx, [eax+ecx*8]
		cmp	[ebp+var_1C], ecx
		jb	loc_4C38
		mov	edx, [ebp+var_1C]
		mov	eax, [edx]
		mov	ecx, [edx+4]
		mov	edx, [ebp+var_14]
		mov	[edx], eax
		mov	[edx+4], ecx
		mov	eax, [ebp+var_18]
		mov	ecx, [ebp+var_20]
		mov	dl, [ecx]
		mov	[eax], dl
		movzx	eax, [ebp+arg_4]
		test	eax, eax
		jz	short loc_4BC8
		mov	ecx, 1
		imul	edx, ecx, 0
		mov	eax, [ebp+var_18]
		movzx	ecx, byte ptr [eax+edx]
		and	ecx, 0FFFFFFF3h
		mov	edx, 1
		imul	eax, edx, 0
		mov	edx, [ebp+var_18]
		mov	[edx+eax], cl
		jmp	short loc_4C0F
; ---------------------------------------------------------------------------

loc_4BC8:				; CODE XREF: _ft_stroker_add_reverse_left+114j
		mov	eax, 1
		imul	ecx, eax, 0
		mov	edx, [ebp+var_18]
		movzx	eax, byte ptr [edx+ecx]
		and	eax, 0Ch
		mov	byte ptr [ebp+var_24+3], al
		movzx	ecx, byte ptr [ebp+var_24+3]
		cmp	ecx, 4
		jz	short loc_4BEF
		movzx	edx, byte ptr [ebp+var_24+3]
		cmp	edx, 8
		jnz	short loc_4C0F

loc_4BEF:				; CODE XREF: _ft_stroker_add_reverse_left+154j
		mov	eax, 1
		imul	ecx, eax, 0
		mov	edx, [ebp+var_18]
		movzx	eax, byte ptr [edx+ecx]
		xor	eax, 0Ch
		mov	ecx, 1
		imul	edx, ecx, 0
		mov	ecx, [ebp+var_18]
		mov	[ecx+edx], al

loc_4C0F:				; CODE XREF: _ft_stroker_add_reverse_left+136j
					; _ft_stroker_add_reverse_left+15Dj
		mov	edx, [ebp+var_1C]
		sub	edx, 8
		mov	[ebp+var_1C], edx
		mov	eax, [ebp+var_20]
		sub	eax, 1
		mov	[ebp+var_20], eax
		mov	ecx, [ebp+var_14]
		add	ecx, 8
		mov	[ebp+var_14], ecx
		mov	edx, [ebp+var_18]
		add	edx, 1
		mov	[ebp+var_18], edx
		jmp	loc_4B6C
; ---------------------------------------------------------------------------

loc_4C38:				; CODE XREF: _ft_stroker_add_reverse_left+EEj
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+14h]
		mov	[eax], edx
		mov	eax, [ebp+var_4]
		mov	ecx, [eax]
		add	ecx, [ebp+var_C]
		mov	edx, [ebp+var_4]
		mov	[edx], ecx
		mov	eax, [ebp+var_4]
		mov	byte ptr [eax+10h], 0
		mov	ecx, [ebp+var_8]
		mov	byte ptr [ecx+10h], 0

$Exit$15_0:				; CODE XREF: _ft_stroker_add_reverse_left+75j
					; _ft_stroker_add_reverse_left+94j
		mov	eax, [ebp+var_10]
		add	esp, 24h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_stroker_add_reverse_left endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 4C70h
; COMDAT (pick any)
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 4C74h
; COMDAT (pick any)
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; void *__cdecl	memcpy(void *, const void *, size_t)
		extrn _memcpy:near	; CODE XREF: _ft_stroke_border_export+41p
		extrn _FT_MulDiv:near	; CODE XREF: _FT_Stroker_ConicTo+647p
					; _FT_Stroker_CubicTo+79Ap ...
		extrn _FT_MulFix:near	; CODE XREF: _ft_stroker_inside+86p
					; _ft_stroker_outside+11Fp ...
		extrn _FT_DivFix:near	; CODE XREF: _FT_Stroker_ConicTo+32Cp
					; _FT_Stroker_CubicTo+3FAp ...
		extrn _FT_Outline_New:near ; CODE XREF:	_FT_Glyph_Stroke+EBp
					; _FT_Glyph_StrokeBorder+11Cp
		extrn _FT_Outline_Done:near ; CODE XREF: _FT_Glyph_Stroke+D1p
					; _FT_Glyph_StrokeBorder+102p
		extrn _FT_Outline_Check:near ; CODE XREF: _ft_stroke_border_export+156p
		extrn _FT_Outline_Get_Orientation:near
					; CODE XREF: _FT_Outline_GetInsideBorder+18p
					; _FT_Outline_GetOutsideBorder+18p
		extrn _FT_Glyph_Copy:near ; CODE XREF: _FT_Glyph_Stroke+68p
					; _FT_Glyph_StrokeBorder+68p
		extrn _FT_Done_Glyph:near ; CODE XREF: _FT_Glyph_Stroke+12Dp
					; _FT_Glyph_Stroke+143p ...
		extrn _FT_Sin:near	; CODE XREF: _FT_Stroker_ConicTo+5F7p
					; _FT_Stroker_ConicTo+61Bp ...
		extrn _FT_Cos:near	; CODE XREF: _FT_Stroker_ConicTo+31Cp
					; _FT_Stroker_CubicTo+3EAp ...
		extrn _FT_Tan:near	; CODE XREF: _ft_stroker_inside+76p
		extrn _FT_Atan2:near	; CODE XREF: _FT_Stroker_LineTo+8Ap
					; _FT_Stroker_ConicTo+38Bp ...
		extrn _FT_Angle_Diff:near ; CODE XREF: _FT_Stroker_EndSubPath+13Cp
					; _FT_Stroker_ConicTo+265p ...
		extrn _FT_Vector_Length:near ; CODE XREF: _FT_Stroker_LineTo+77p
					; _FT_Stroker_ConicTo+5DCp ...
		extrn _FT_Vector_From_Polar:near ; CODE	XREF: _FT_Stroker_LineTo+A9p
					; _FT_Stroker_ConicTo+40Ep ...
		extrn _ft_mem_alloc:near ; CODE	XREF: _FT_Stroker_New+77p
		extrn _ft_mem_realloc:near ; CODE XREF:	_ft_stroke_border_grow+88p
					; _ft_stroke_border_grow+B5p
		extrn _ft_mem_free:near	; CODE XREF: _FT_Stroker_Done+64p
					; _ft_stroke_border_done+1Fp ...
		extrn _FT_Panic:near	; CODE XREF: _ft_stroke_border_close+40p
					; _ft_stroke_border_lineto+3Bp	...
		extrn _FT_Throw:near	; CODE XREF: _FT_Stroker_New+33p
					; _FT_Stroker_New+55p ...
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _FT_Stroker_New+E1p
					; _FT_Stroker_ParseOutline+498p ...
		extrn @__security_check_cookie@4:near ;	CODE XREF: _FT_Stroker_ConicTo+7B7p
					; _FT_Stroker_CubicTo+918p
		extrn __RTC_CheckEsp:near ; CODE XREF: _FT_Outline_GetInsideBorder+41p
					; _FT_Outline_GetOutsideBorder+41p ...
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn _ft_outline_glyph_class:near ; DATA XREF:	_FT_Glyph_Stroke+52o
					; _FT_Glyph_StrokeBorder+52o
		extrn ___security_cookie:near ;	DATA XREF: _FT_Stroker_ConicTo+1Dr
					; _FT_Stroker_CubicTo+1Dr


		end
