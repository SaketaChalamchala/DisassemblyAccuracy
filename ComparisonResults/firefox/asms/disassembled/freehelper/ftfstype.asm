;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	6782EECC1FDE18FC1F8CD042C4019B54
; Input	CRC32 :	B3C15D2A

; File Name   :	D:\compspace\objfiles\firefox\freehelper\ftfstype.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRTD"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
$SG7586		db 'postscript-info',0  ; DATA XREF: _FT_Get_FSType_Flags+4Fo
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Get_FSType_Flags
_FT_Get_FSType_Flags proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		cmp	[ebp+arg_0], 0
		jz	loc_C6
		mov	[ebp+var_8], 0

loc_42:					; CODE XREF: _FT_Get_FSType_Flags+77j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+60h]
		mov	[ebp+var_C], ecx
		mov	[ebp+var_10], 0
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		cmp	dword ptr [eax+20h], 0
		jz	short loc_7F
		mov	esi, esp
		push	offset $SG7586	; "postscript-info"
		mov	ecx, [ebp+var_C]
		push	ecx
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		mov	ecx, [eax+20h]
		call	ecx
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_10], eax

loc_7F:					; CODE XREF: _FT_Get_FSType_Flags+4Bj
		mov	edx, [ebp+var_10]
		mov	[ebp+var_8], edx
		xor	eax, eax
		jnz	short loc_42
		cmp	[ebp+var_8], 0
		jz	short loc_C6
		mov	ecx, [ebp+var_8]
		cmp	dword ptr [ecx+4], 0
		jz	short loc_C6
		mov	esi, esp
		lea	edx, [ebp+var_18]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jnz	short loc_C6
		movzx	eax, word ptr [ebp+var_18]
		test	eax, eax
		jz	short loc_C6
		mov	ax, word ptr [ebp+var_18]
		jmp	short loc_F5
; ---------------------------------------------------------------------------

loc_C6:					; CODE XREF: _FT_Get_FSType_Flags+25j
					; _FT_Get_FSType_Flags+7Dj ...
		push	2
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_FT_Get_Sfnt_Table
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_F3
		mov	edx, [ebp+var_4]
		movzx	eax, word ptr [edx]
		cmp	eax, 0FFFFh
		jz	short loc_F3
		mov	ecx, [ebp+var_4]
		mov	ax, [ecx+8]
		jmp	short loc_F5
; ---------------------------------------------------------------------------

loc_F3:					; CODE XREF: _FT_Get_FSType_Flags+CBj
					; _FT_Get_FSType_Flags+D8j
		xor	eax, eax

loc_F5:					; CODE XREF: _FT_Get_FSType_Flags+B4j
					; _FT_Get_FSType_Flags+E1j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN13
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	esi
		add	esp, 1Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Get_FSType_Flags endp

; ---------------------------------------------------------------------------
		align 4
$LN13		dd 1			; DATA XREF: _FT_Get_FSType_Flags+E9o
		dd offset $LN12
$LN12		dd 0FFFFFFE8h, 2	; DATA XREF: .text$mn:0000011Co
		dd offset $LN11		; "extra"
$LN11		db 'extra',0            ; DATA XREF: .text$mn:00000128o
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 134h
; COMDAT (pick any)
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 138h
; COMDAT (pick any)
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _FT_Get_Sfnt_Table:near ;	CODE XREF: _FT_Get_FSType_Flags+BCp
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _FT_Get_FSType_Flags+EFp
		extrn __RTC_CheckEsp:near ; CODE XREF: _FT_Get_FSType_Flags+67p
					; _FT_Get_FSType_Flags+9Fp ...
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo


		end
