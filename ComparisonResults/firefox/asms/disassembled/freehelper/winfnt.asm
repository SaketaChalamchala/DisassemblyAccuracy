;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	C86CE28C7F0B5EA9BD2D9D858F15F0FF
; Input	CRC32 :	614A6917

; File Name   :	D:\compspace\objfiles\firefox\freehelper\winfnt.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRTD"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
$SG8208		db 'invalid FNT offset',0Ah,0 ; DATA XREF: _FNT_Load_Glyph+29Ao
$SG8209		db '..\..\..\src\winfonts\winfnt.c',0 ; DATA XREF: _FNT_Load_Glyph+2ABo
		align 4
$SG8220		db 'invalid bitmap width',0Ah,0 ; DATA XREF: _FNT_Load_Glyph+335o
		align 4
$SG8221		db '..\..\..\src\winfonts\winfnt.c',0 ; DATA XREF: _FNT_Load_Glyph+346o
		align 4
$SG8246		db 'xf86-driver-name',0 ; DATA XREF: .rdata:_winfnt_serviceso
		align 10h
$SG8247		db 'Windows FNT',0      ; DATA XREF: .rdata:00002460o
$SG8248		db 'winfonts',0         ; DATA XREF: .rdata:00002464o
		align 4
$SG8259		db 'winfonts',0         ; DATA XREF: .rdata:00002490o
					; .rdata:000024ACo ...
		align 4
$SG7710		db '  not a Windows FNT file',0Ah,0 ; DATA XREF: _fnt_font_load+90o
		align 10h
$SG7711		db '..\..\..\src\winfonts\winfnt.c',0 ; DATA XREF: _fnt_font_load+A1o
		align 10h
$SG7718		db '  not a Windows FNT file',0Ah,0 ; DATA XREF: _fnt_font_load+119o
		align 4
$SG7719		db '..\..\..\src\winfonts\winfnt.c',0 ; DATA XREF: _fnt_font_load+12Ao
		align 4
$SG7726		db '[can',27h,'t handle vector FNT fonts]',0Ah,0
					; DATA XREF: _fnt_font_load+1B0o
		align 10h
$SG7727		db '..\..\..\src\winfonts\winfnt.c',0 ; DATA XREF: _fnt_font_load+1C1o
		align 10h
$SG7755		db 'MZ signature found',0Ah,0 ; DATA XREF: _fnt_face_get_dll_font+A7o
$SG7768		db 'NE signature found',0Ah,0 ; DATA XREF: _fnt_face_get_dll_font+137o
$SG7790		db 'this file doesn',27h,'t contain any FNT resources',0Ah,0
					; DATA XREF: _fnt_face_get_dll_font+239o
		align 4
$SG7791		db '..\..\..\src\winfonts\winfnt.c',0
					; DATA XREF: _fnt_face_get_dll_font+24Ao
		align 4
$SG7797		db 'invalid number of faces',0Ah,0 ; DATA XREF: _fnt_face_get_dll_font+289o
		align 4
$SG7798		db '..\..\..\src\winfonts\winfnt.c',0
					; DATA XREF: _fnt_face_get_dll_font+29Ao
					; .rdata:_winfnt_driver_classo
		align 4
$SG7800		db '..\..\..\src\winfonts\winfnt.c',0
					; DATA XREF: _fnt_face_get_dll_font+2CBo
		align 4
$SG7835		db 'PE signature found',0Ah,0 ; DATA XREF: _fnt_face_get_dll_font+3F7o
$SG7843		db 'magic %04lx, machine %02x, number_of_sections %u, size_of_optiona'
					; DATA XREF: _fnt_face_get_dll_font+476o
		db 'l_header %02x',0Ah
		db 'magic32 %02x, rsrc_virtual_address %04lx, rsrc_size %04lx',0Ah,0
		align 4
$SG7850		db 'this file has an invalid PE header',0Ah,0
					; DATA XREF: _fnt_face_get_dll_font+4C4o
$SG7851		db '..\..\..\src\winfonts\winfnt.c',0
					; DATA XREF: _fnt_face_get_dll_font+4D5o
		align 4
$SG7860		db 'name %.8s, va %04lx, size %04lx, offset %04lx',0Ah,0
					; DATA XREF: _fnt_face_get_dll_font+56Do
		align 4
$SG7867		db 'this file doesn',27h,'t contain any resources',0Ah,0
					; DATA XREF: _fnt_face_get_dll_font+59Eo
		align 4
$SG7868		db '..\..\..\src\winfonts\winfnt.c',0
					; DATA XREF: _fnt_face_get_dll_font+5AFo
		align 4
$SG7873		db 'found resources section %.8s',0Ah,0
					; DATA XREF: _fnt_face_get_dll_font+5E3o
		align 4
$SG7884		db '..\..\..\src\winfonts\winfnt.c',0
					; DATA XREF: _fnt_face_get_dll_font+6D2o
		align 4
$SG7895		db '..\..\..\src\winfonts\winfnt.c',0
					; DATA XREF: _fnt_face_get_dll_font+7EDo
		align 4
$SG7906		db '..\..\..\src\winfonts\winfnt.c',0
					; DATA XREF: _fnt_face_get_dll_font+908o
		align 4
$SG7915		db 'found font #%lu, offset %04lx, size %04lx, cp %lu',0Ah,0
					; DATA XREF: _fnt_face_get_dll_font+9AFo
		align 4
$SG7924		db 'font #%lu load error %d',0Ah,0 ; DATA XREF: _fnt_face_get_dll_font+A5Eo
		align 4
$SG7930		db 'font #%lu successfully loaded',0Ah,0
					; DATA XREF: _fnt_face_get_dll_font+A8Eo
		align 4
$SG7936		db 'this file doesn',27h,'t contain any RT_FONT resources',0Ah,0
					; DATA XREF: _fnt_face_get_dll_font+AD4o
		align 4
$SG7937		db '..\..\..\src\winfonts\winfnt.c',0
					; DATA XREF: _fnt_face_get_dll_font+AE5o
		align 4
$SG7939		db '..\..\..\src\winfonts\winfnt.c',0
					; DATA XREF: _fnt_face_get_dll_font+B0Bo
		align 4
$SG8028		db 'Windows FNT driver',0Ah,0 ; DATA XREF: _FNT_Face_Init+42o
$SG8037		db '..\..\..\src\winfonts\winfnt.c',0 ; DATA XREF: _FNT_Face_Init+FEo
		align 4
$SG8063		db 'use pixel_height as the nominal height',0Ah,0
					; DATA XREF: _FNT_Face_Init+2ACo
$SG8075		db 'invalid number of glyphs',0Ah,0 ; DATA XREF: _FNT_Face_Init+3B4o
		align 10h
$SG8076		db '..\..\..\src\winfonts\winfnt.c',0 ; DATA XREF: _FNT_Face_Init+3C5o
		align 10h
$SG8082		db 'invalid family name offset',0Ah,0 ; DATA XREF: _FNT_Face_Init+41Co
$SG8083		db '..\..\..\src\winfonts\winfnt.c',0 ; DATA XREF: _FNT_Face_Init+42Do
		align 4
$SG8090		db 'Regular',0          ; DATA XREF: _FNT_Face_Init+515o
$SG8094		db 'Bold Italic',0      ; DATA XREF: _FNT_Face_Init+535o
$SG8097		db 'Bold',0             ; DATA XREF: _FNT_Face_Init+541o
		align 4
$SG8101		db 'Italic',0           ; DATA XREF: _FNT_Face_Init+558o
		align 10h
$SG8133		db '..\..\..\src\winfonts\winfnt.c',0
					; DATA XREF: _FNT_Size_Request:loc_1ED5o
		align 10h
$SG8157		db '..\..\..\src\winfonts\winfnt.c',0 ; DATA XREF: _FNT_Load_Glyph+3Ao
		align 10h
$SG8163		db '..\..\..\src\winfonts\winfnt.c',0 ; DATA XREF: _FNT_Load_Glyph:loc_1F9Ao
		align 10h
$SG8168		db 'FNT_Load_Glyph: glyph index %d',0Ah,0 ; DATA XREF: _FNT_Load_Glyph+AAo
$SG8177		db 'invalid FNT offset',0Ah,0 ; DATA XREF: _FNT_Load_Glyph+172o
$SG8178		db '..\..\..\src\winfonts\winfnt.c',0 ; DATA XREF: _FNT_Load_Glyph+183o
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6A4h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_fnt_font_done	proc near		; CODE XREF: _fnt_face_get_dll_font+B31p
					; _FNT_Face_Done+2Fp

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+64h]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+68h]
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+84h]
		mov	[ebp+var_C], edx
		cmp	[ebp+var_C], 0
		jnz	short loc_6E5
		jmp	short loc_756
; ---------------------------------------------------------------------------

loc_6E5:				; CODE XREF: _fnt_font_done+3Dj
		mov	eax, [ebp+var_C]
		cmp	dword ptr [eax+0A0h], 0
		jz	short loc_707
		mov	ecx, [ebp+var_C]
		add	ecx, 0A0h ; ' '
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		call	_FT_Stream_ReleaseFrame
		add	esp, 8

loc_707:				; CODE XREF: _fnt_font_done+4Bj
					; _fnt_font_done+88j
		mov	eax, [ebp+var_C]
		mov	ecx, [eax+0A8h]
		push	ecx
		mov	edx, [ebp+var_4]
		push	edx
		call	_ft_mem_free
		add	esp, 8
		mov	eax, [ebp+var_C]
		mov	dword ptr [eax+0A8h], 0
		xor	ecx, ecx
		jnz	short loc_707

loc_72E:				; CODE XREF: _fnt_font_done+A3j
		mov	edx, [ebp+var_C]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		call	_ft_mem_free
		add	esp, 8
		mov	[ebp+var_C], 0
		xor	ecx, ecx
		jnz	short loc_72E
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+84h], 0

loc_756:				; CODE XREF: _fnt_font_done+3Fj
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_fnt_font_done	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_fnt_font_load	proc near		; CODE XREF: _fnt_face_get_dll_font+3C6p
					; _fnt_face_get_dll_font+A31p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		add	eax, 4
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		call	_FT_Stream_Seek
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_7C3
		mov	ecx, [ebp+var_8]
		push	ecx
		push	offset _winfnt_header_fields
		mov	edx, [ebp+arg_4]
		push	edx
		call	_FT_Stream_ReadFields
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_7C8

loc_7C3:				; CODE XREF: _fnt_font_load+3Fj
		jmp	$Exit$27
; ---------------------------------------------------------------------------

loc_7C8:				; CODE XREF: _fnt_font_load+5Dj
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 200h
		jz	short loc_824
		mov	edx, [ebp+var_8]
		movzx	eax, word ptr [edx]
		cmp	eax, 300h
		jz	short loc_824

loc_7E3:				; CODE XREF: _fnt_font_load+9Fj
		mov	ecx, 4
		imul	edx, ecx, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[edx], 2
		jl	short loc_801
		push	offset $SG7710	; "  not a Windows FNT file\n"
		call	_FT_Message
		add	esp, 4

loc_801:				; CODE XREF: _fnt_font_load+8Ej
		xor	eax, eax
		jnz	short loc_7E3
		push	offset $SG7711	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	0E4h ; 'ä'
		push	2
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 2
		mov	[ebp+var_4], eax
		jmp	$Exit$27
; ---------------------------------------------------------------------------

loc_824:				; CODE XREF: _fnt_font_load+70j
					; _fnt_font_load+7Dj
		mov	ecx, [ebp+arg_0]
		movzx	edx, word ptr [ecx+4]
		cmp	edx, 300h
		jnz	short loc_839
		mov	byte ptr [ebp+var_14+3], 1
		jmp	short loc_83D
; ---------------------------------------------------------------------------

loc_839:				; CODE XREF: _fnt_font_load+CDj
		mov	byte ptr [ebp+var_14+3], 0

loc_83D:				; CODE XREF: _fnt_font_load+D3j
		mov	al, byte ptr [ebp+var_14+3]
		mov	byte ptr [ebp+var_C+3],	al
		movzx	ecx, byte ptr [ebp+var_C+3]
		test	ecx, ecx
		jz	short loc_854
		mov	[ebp+var_18], 94h ; ''
		jmp	short loc_85B
; ---------------------------------------------------------------------------

loc_854:				; CODE XREF: _fnt_font_load+E5j
		mov	[ebp+var_18], 76h ; 'v'

loc_85B:				; CODE XREF: _fnt_font_load+EEj
		mov	edx, [ebp+var_18]
		mov	[ebp+var_10], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		cmp	ecx, [ebp+var_10]
		jnb	short loc_8AD

loc_86C:				; CODE XREF: _fnt_font_load+128j
		mov	edx, 4
		imul	eax, edx, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[eax], 2
		jl	short loc_88A
		push	offset $SG7718	; "  not a Windows FNT file\n"
		call	_FT_Message
		add	esp, 4

loc_88A:				; CODE XREF: _fnt_font_load+117j
		xor	ecx, ecx
		jnz	short loc_86C
		push	offset $SG7719	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	0EEh ; 'î'
		push	2
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 2
		mov	[ebp+var_4], eax
		jmp	$Exit$27
; ---------------------------------------------------------------------------

loc_8AD:				; CODE XREF: _fnt_font_load+106j
		mov	edx, [ebp+var_8]
		movzx	eax, word ptr [edx]
		cmp	eax, 200h
		jnz	short loc_8F7
		mov	ecx, [ebp+var_8]
		mov	dword ptr [ecx+80h], 0
		xor	edx, edx
		mov	eax, [ebp+var_8]
		mov	[eax+84h], dx
		xor	ecx, ecx
		mov	edx, [ebp+var_8]
		mov	[edx+86h], cx
		xor	eax, eax
		mov	ecx, [ebp+var_8]
		mov	[ecx+88h], ax
		xor	edx, edx
		mov	eax, [ebp+var_8]
		mov	[eax+8Ah], dx

loc_8F7:				; CODE XREF: _fnt_font_load+154j
		mov	ecx, [ebp+var_8]
		movzx	edx, word ptr [ecx+44h]
		and	edx, 1
		jz	short loc_941

loc_903:				; CODE XREF: _fnt_font_load+1BFj
		mov	eax, 4
		imul	ecx, eax, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[ecx], 2
		jl	short loc_921
		push	offset $SG7726	; "[can't handle vector FNT fonts]\n"
		call	_FT_Message
		add	esp, 4

loc_921:				; CODE XREF: _fnt_font_load+1AEj
		xor	edx, edx
		jnz	short loc_903
		push	offset $SG7727	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	100h
		push	2
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 2
		mov	[ebp+var_4], eax
		jmp	short $Exit$27
; ---------------------------------------------------------------------------

loc_941:				; CODE XREF: _fnt_font_load+19Dj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		call	_FT_Stream_Seek
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short $Exit$27
		mov	eax, [ebp+arg_0]
		add	eax, 0A0h ; ' '
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		call	_FT_Stream_ExtractFrame
		add	esp, 0Ch
		mov	[ebp+var_4], eax

$Exit$27:				; CODE XREF: _fnt_font_load:loc_7C3j
					; _fnt_font_load+BBj ...
		mov	eax, [ebp+var_4]
		add	esp, 18h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_fnt_font_load	endp

; ---------------------------------------------------------------------------
		db 8 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_fnt_face_get_dll_font proc near	; CODE XREF: _FNT_Face_Init+5Bp

var_12C		= word ptr -12Ch
var_128		= word ptr -128h
var_124		= word ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_F8		= byte ptr -0F8h
var_F4		= dword	ptr -0F4h
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_C8		= byte ptr -0C8h
var_BC		= word ptr -0BCh
var_BA		= word ptr -0BAh
var_B0		= byte ptr -0B0h
var_A4		= word ptr -0A4h
var_A2		= word ptr -0A2h
var_98		= byte ptr -98h
var_8C		= word ptr -8Ch
var_8A		= word ptr -8Ah
var_80		= byte ptr -80h
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_64		= dword	ptr -64h
var_60		= word ptr -60h
var_5E		= word ptr -5Eh
var_5C		= word ptr -5Ch
var_5A		= word ptr -5Ah
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_4C		= word ptr -4Ch
var_48		= word ptr -48h
var_44		= dword	ptr -44h
var_40		= word ptr -40h
var_3C		= word ptr -3Ch
var_38		= dword	ptr -38h
var_30		= word ptr -30h
var_2E		= word ptr -2Eh
var_2C		= word ptr -2Ch
var_20		= word ptr -20h
var_1E		= word ptr -1Eh
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 12Ch
		push	edi
		lea	edi, [ebp+var_12C]
		mov	ecx, 4Bh ; 'K'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+68h]
		mov	[ebp+var_14], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+64h]
		mov	[ebp+var_18], eax
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+84h], 0
		push	0
		mov	edx, [ebp+var_14]
		push	edx
		call	_FT_Stream_Seek
		add	esp, 8
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_A0E
		lea	eax, [ebp+var_20]
		push	eax
		push	offset _winmz_header_fields
		mov	ecx, [ebp+var_14]
		push	ecx
		call	_FT_Stream_ReadFields
		add	esp, 0Ch
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_A13

loc_A0E:				; CODE XREF: _fnt_face_get_dll_font+5Aj
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_A13:				; CODE XREF: _fnt_face_get_dll_font+78j
		mov	[ebp+var_C], 2
		movzx	edx, [ebp+var_20]
		cmp	edx, 5A4Dh
		jnz	$Fail$140

loc_A2A:				; CODE XREF: _fnt_face_get_dll_font+B6j
		mov	eax, 4
		imul	ecx, eax, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[ecx], 2
		jl	short loc_A48
		push	offset $SG7755	; "MZ signature	found\n"
		call	_FT_Message
		add	esp, 4

loc_A48:				; CODE XREF: _fnt_face_get_dll_font+A5j
		xor	edx, edx
		jnz	short loc_A2A
		movzx	eax, [ebp+var_1E]
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		call	_FT_Stream_Seek
		add	esp, 8
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_A84
		lea	edx, [ebp+var_30]
		push	edx
		push	offset _winne_header_fields
		mov	eax, [ebp+var_14]
		push	eax
		call	_FT_Stream_ReadFields
		add	esp, 0Ch
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_A89

loc_A84:				; CODE XREF: _fnt_face_get_dll_font+D0j
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_A89:				; CODE XREF: _fnt_face_get_dll_font+EEj
		mov	[ebp+var_C], 2
		movzx	ecx, [ebp+var_30]
		cmp	ecx, 454Eh
		jnz	loc_D6A
		movzx	edx, [ebp+var_1E]
		movzx	eax, [ebp+var_2E]
		add	edx, eax
		mov	[ebp+var_38], edx
		xor	ecx, ecx
		mov	[ebp+var_40], cx
		mov	[ebp+var_44], 0

loc_ABA:				; CODE XREF: _fnt_face_get_dll_font+146j
		mov	edx, 4
		imul	eax, edx, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[eax], 2
		jl	short loc_AD8
		push	offset $SG7768	; "NE signature	found\n"
		call	_FT_Message
		add	esp, 4

loc_AD8:				; CODE XREF: _fnt_face_get_dll_font+135j
		xor	ecx, ecx
		jnz	short loc_ABA
		mov	edx, [ebp+var_38]
		push	edx
		mov	eax, [ebp+var_14]
		push	eax
		call	_FT_Stream_Seek
		add	esp, 8
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_B15
		movzx	ecx, [ebp+var_2C]
		movzx	edx, [ebp+var_2E]
		sub	ecx, edx
		push	ecx
		mov	eax, [ebp+var_14]
		push	eax
		call	_FT_Stream_EnterFrame
		add	esp, 8
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_B1A

loc_B15:				; CODE XREF: _fnt_face_get_dll_font+15Fj
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_B1A:				; CODE XREF: _fnt_face_get_dll_font+17Fj
		mov	ecx, [ebp+var_14]
		push	ecx
		call	_FT_Stream_GetUShortLE
		add	esp, 4
		mov	[ebp+var_3C], ax

loc_B2A:				; CODE XREF: _fnt_face_get_dll_font+20Cj
		mov	edx, [ebp+var_14]
		push	edx
		call	_FT_Stream_GetUShortLE
		add	esp, 4
		mov	[ebp+var_48], ax
		movzx	eax, [ebp+var_48]
		test	eax, eax
		jnz	short loc_B44
		jmp	short loc_BA2
; ---------------------------------------------------------------------------

loc_B44:				; CODE XREF: _fnt_face_get_dll_font+1ACj
		mov	ecx, [ebp+var_14]
		push	ecx
		call	_FT_Stream_GetUShortLE
		add	esp, 4
		mov	[ebp+var_4C], ax
		movzx	edx, [ebp+var_48]
		cmp	edx, 8008h
		jnz	short loc_B89
		mov	ax, [ebp+var_4C]
		mov	[ebp+var_40], ax
		mov	ecx, [ebp+var_14]
		push	ecx
		call	_FT_Stream_Pos
		add	esp, 4
		mov	edx, [ebp+var_14]
		mov	ecx, [ebp+var_14]
		mov	edx, [edx+20h]
		sub	edx, [ecx+24h]
		lea	eax, [eax+edx+4]
		mov	[ebp+var_44], eax
		jmp	short loc_BA2
; ---------------------------------------------------------------------------

loc_B89:				; CODE XREF: _fnt_face_get_dll_font+1CAj
		movzx	ecx, [ebp+var_4C]
		imul	edx, ecx, 0Ch
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+20h]
		lea	edx, [edx+ecx+4]
		mov	eax, [ebp+var_14]
		mov	[eax+20h], edx
		jmp	short loc_B2A
; ---------------------------------------------------------------------------

loc_BA2:				; CODE XREF: _fnt_face_get_dll_font+1AEj
					; _fnt_face_get_dll_font+1F3j
		mov	ecx, [ebp+var_14]
		push	ecx
		call	_FT_Stream_ExitFrame
		add	esp, 4
		movzx	edx, [ebp+var_40]
		test	edx, edx
		jz	short loc_BBC
		cmp	[ebp+var_44], 0
		jnz	short loc_BFD

loc_BBC:				; CODE XREF: _fnt_face_get_dll_font+220j
					; _fnt_face_get_dll_font+248j
		mov	eax, 4
		imul	ecx, eax, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[ecx], 2
		jl	short loc_BDA
		push	offset $SG7790	; "this	file doesn't contain any FNT resou"...
		call	_FT_Message
		add	esp, 4

loc_BDA:				; CODE XREF: _fnt_face_get_dll_font+237j
		xor	edx, edx
		jnz	short loc_BBC
		push	offset $SG7791	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	15Bh
		push	3
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 3
		mov	[ebp+var_C], eax
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_BFD:				; CODE XREF: _fnt_face_get_dll_font+226j
		movzx	eax, [ebp+var_40]
		imul	ecx, eax, 76h
		mov	edx, [ebp+var_14]
		cmp	ecx, [edx+4]
		jbe	short loc_C4D

loc_C0C:				; CODE XREF: _fnt_face_get_dll_font+298j
		mov	eax, 4
		imul	ecx, eax, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[ecx], 2
		jl	short loc_C2A
		push	offset $SG7797	; "invalid number of faces\n"
		call	_FT_Message
		add	esp, 4

loc_C2A:				; CODE XREF: _fnt_face_get_dll_font+287j
		xor	edx, edx
		jnz	short loc_C0C
		push	offset $SG7798	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	164h
		push	3
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 3
		mov	[ebp+var_C], eax
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_C4D:				; CODE XREF: _fnt_face_get_dll_font+276j
		movzx	eax, [ebp+var_40]
		mov	ecx, [ebp+arg_0]
		mov	[ecx], eax
		movzx	edx, [ebp+var_40]
		cmp	[ebp+arg_4], edx
		jl	short loc_C80
		push	offset $SG7800	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	16Ch
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		mov	[ebp+var_C], eax
		jmp	$Exit$139
; ---------------------------------------------------------------------------
		jmp	short loc_C8B
; ---------------------------------------------------------------------------

loc_C80:				; CODE XREF: _fnt_face_get_dll_font+2C9j
		cmp	[ebp+arg_4], 0
		jge	short loc_C8B
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_C8B:				; CODE XREF: _fnt_face_get_dll_font+2EAj
					; _fnt_face_get_dll_font+2F0j
		lea	eax, [ebp+var_C]
		push	eax
		push	0ACh ; '¬'
		mov	ecx, [ebp+var_18]
		push	ecx
		call	_ft_mem_alloc
		add	esp, 0Ch
		mov	edx, [ebp+arg_0]
		mov	[edx+84h], eax
		cmp	[ebp+var_C], 0
		jz	short loc_CB4
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_CB4:				; CODE XREF: _fnt_face_get_dll_font+319j
		imul	eax, [ebp+arg_4], 0Ch
		add	eax, [ebp+var_44]
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		call	_FT_Stream_Seek
		add	esp, 8
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_CE8
		push	0Ch
		mov	edx, [ebp+var_14]
		push	edx
		call	_FT_Stream_EnterFrame
		add	esp, 8
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_CED

loc_CE8:				; CODE XREF: _fnt_face_get_dll_font+33Bj
		jmp	$Fail$140
; ---------------------------------------------------------------------------

loc_CED:				; CODE XREF: _fnt_face_get_dll_font+352j
		mov	eax, [ebp+var_14]
		push	eax
		call	_FT_Stream_GetUShortLE
		add	esp, 4
		movzx	edx, ax
		movzx	ecx, [ebp+var_3C]
		shl	edx, cl
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+84h]
		mov	[ecx], edx
		mov	edx, [ebp+var_14]
		push	edx
		call	_FT_Stream_GetUShortLE
		add	esp, 4
		movzx	eax, ax
		movzx	ecx, [ebp+var_3C]
		shl	eax, cl
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+84h]
		mov	[edx+0A4h], eax
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+20h]
		add	ecx, 8
		mov	edx, [ebp+var_14]
		mov	[edx+20h], ecx
		mov	eax, [ebp+var_14]
		push	eax
		call	_FT_Stream_ExitFrame
		add	esp, 4
		mov	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+84h]
		push	eax
		call	_fnt_font_load
		add	esp, 8
		mov	[ebp+var_C], eax
		jmp	loc_144F
; ---------------------------------------------------------------------------

loc_D6A:				; CODE XREF: _fnt_face_get_dll_font+106j
		movzx	ecx, [ebp+var_30]
		cmp	ecx, 4550h
		jnz	loc_144F

loc_D7A:				; CODE XREF: _fnt_face_get_dll_font+406j
		mov	edx, 4
		imul	eax, edx, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[eax], 2
		jl	short loc_D98
		push	offset $SG7835	; "PE signature	found\n"
		call	_FT_Message
		add	esp, 4

loc_D98:				; CODE XREF: _fnt_face_get_dll_font+3F5j
		xor	ecx, ecx
		jnz	short loc_D7A
		movzx	edx, [ebp+var_1E]
		push	edx
		mov	eax, [ebp+var_14]
		push	eax
		call	_FT_Stream_Seek
		add	esp, 8
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_DD4
		lea	ecx, [ebp+var_64]
		push	ecx
		push	offset _winpe32_header_fields
		mov	edx, [ebp+var_14]
		push	edx
		call	_FT_Stream_ReadFields
		add	esp, 0Ch
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_DD9

loc_DD4:				; CODE XREF: _fnt_face_get_dll_font+420j
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_DD9:				; CODE XREF: _fnt_face_get_dll_font+43Ej
					; _fnt_face_get_dll_font+485j
		mov	eax, 4
		imul	ecx, eax, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[ecx], 2
		jl	short loc_E17
		mov	edx, [ebp+var_54]
		push	edx
		mov	eax, [ebp+var_58]
		push	eax
		movzx	ecx, [ebp+var_5A]
		push	ecx
		movzx	edx, [ebp+var_5C]
		push	edx
		movzx	eax, [ebp+var_5E]
		push	eax
		movzx	ecx, [ebp+var_60]
		push	ecx
		mov	edx, [ebp+var_64]
		push	edx
		push	offset $SG7843	; "magic %04lx,	machine	%02x, number_of_se"...
		call	_FT_Message
		add	esp, 20h

loc_E17:				; CODE XREF: _fnt_face_get_dll_font+454j
		xor	eax, eax
		jnz	short loc_DD9
		cmp	[ebp+var_64], 4550h
		jnz	short loc_E47
		movzx	ecx, [ebp+var_60]
		cmp	ecx, 14Ch
		jnz	short loc_E47
		movzx	edx, [ebp+var_5C]
		cmp	edx, 0E0h ; 'à'
		jnz	short loc_E47
		movzx	eax, [ebp+var_5A]
		cmp	eax, 10Bh
		jz	short loc_E88

loc_E47:				; CODE XREF: _fnt_face_get_dll_font+48Ej
					; _fnt_face_get_dll_font+49Aj ...
		mov	ecx, 4
		imul	edx, ecx, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[edx], 2
		jl	short loc_E65
		push	offset $SG7850	; "this	file has an invalid PE header\n"
		call	_FT_Message
		add	esp, 4

loc_E65:				; CODE XREF: _fnt_face_get_dll_font+4C2j
		xor	eax, eax
		jnz	short loc_E47
		push	offset $SG7851	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	1A4h
		push	3
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 3
		mov	[ebp+var_C], eax
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_E88:				; CODE XREF: _fnt_face_get_dll_font+4B1j
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx], 0
		xor	edx, edx
		mov	[ebp+var_124], dx
		jmp	short loc_EAE
; ---------------------------------------------------------------------------

loc_E9C:				; CODE XREF: _fnt_face_get_dll_font:loc_F1Cj
		mov	ax, [ebp+var_124]
		add	ax, 1
		mov	[ebp+var_124], ax

loc_EAE:				; CODE XREF: _fnt_face_get_dll_font+506j
		movzx	ecx, [ebp+var_124]
		movzx	edx, [ebp+var_5E]
		cmp	ecx, edx
		jge	short loc_F21
		lea	eax, [ebp+var_80]
		push	eax
		push	offset _winpe32_section_fields
		mov	ecx, [ebp+var_14]
		push	ecx
		call	_FT_Stream_ReadFields
		add	esp, 0Ch
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_EE0
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_EE0:				; CODE XREF: _fnt_face_get_dll_font+545j
					; _fnt_face_get_dll_font+57Cj
		mov	edx, 4
		imul	eax, edx, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[eax], 2
		jl	short loc_F0E
		mov	ecx, [ebp+var_70]
		push	ecx
		mov	edx, [ebp+var_74]
		push	edx
		mov	eax, [ebp+var_78]
		push	eax
		lea	ecx, [ebp+var_80]
		push	ecx
		push	offset $SG7860	; "name	%.8s, va %04lx,	size %04lx, offset"...
		call	_FT_Message
		add	esp, 14h

loc_F0E:				; CODE XREF: _fnt_face_get_dll_font+55Bj
		xor	edx, edx
		jnz	short loc_EE0
		mov	eax, [ebp+var_58]
		cmp	eax, [ebp+var_78]
		jnz	short loc_F1C
		jmp	short $Found_rsrc_section$141
; ---------------------------------------------------------------------------

loc_F1C:				; CODE XREF: _fnt_face_get_dll_font+584j
		jmp	loc_E9C
; ---------------------------------------------------------------------------

loc_F21:				; CODE XREF: _fnt_face_get_dll_font+527j
					; _fnt_face_get_dll_font+5ADj
		mov	ecx, 4
		imul	edx, ecx, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[edx], 2
		jl	short loc_F3F
		push	offset $SG7867	; "this	file doesn't contain any resources"...
		call	_FT_Message
		add	esp, 4

loc_F3F:				; CODE XREF: _fnt_face_get_dll_font+59Cj
		xor	eax, eax
		jnz	short loc_F21
		push	offset $SG7868	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	1BBh
		push	3
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 3
		mov	[ebp+var_C], eax
		jmp	$Exit$139
; ---------------------------------------------------------------------------

$Found_rsrc_section$141:		; CODE XREF: _fnt_face_get_dll_font+586j
					; _fnt_face_get_dll_font+5F2j
		mov	ecx, 4
		imul	edx, ecx, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[edx], 2
		jl	short loc_F84
		lea	eax, [ebp+var_80]
		push	eax
		push	offset $SG7873	; "found resources section %.8s\n"
		call	_FT_Message
		add	esp, 8

loc_F84:				; CODE XREF: _fnt_face_get_dll_font+5DDj
		xor	ecx, ecx
		jnz	short $Found_rsrc_section$141
		mov	edx, [ebp+var_70]
		push	edx
		mov	eax, [ebp+var_14]
		push	eax
		call	_FT_Stream_Seek
		add	esp, 8
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_FC2
		lea	ecx, [ebp+var_98]
		push	ecx
		push	offset _winpe_rsrc_dir_fields
		mov	edx, [ebp+var_14]
		push	edx
		call	_FT_Stream_ReadFields
		add	esp, 0Ch
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_FC7

loc_FC2:				; CODE XREF: _fnt_face_get_dll_font+60Bj
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_FC7:				; CODE XREF: _fnt_face_get_dll_font+62Cj
		mov	eax, [ebp+var_70]
		mov	[ebp+var_118], eax
		xor	ecx, ecx
		mov	[ebp+var_124], cx
		jmp	short loc_FED
; ---------------------------------------------------------------------------

loc_FDB:				; CODE XREF: _fnt_face_get_dll_font:loc_144Aj
		mov	dx, [ebp+var_124]
		add	dx, 1
		mov	[ebp+var_124], dx

loc_FED:				; CODE XREF: _fnt_face_get_dll_font+645j
		movzx	eax, [ebp+var_124]
		movzx	ecx, [ebp+var_8C]
		movzx	edx, [ebp+var_8A]
		add	ecx, edx
		cmp	eax, ecx
		jge	loc_144F
		movzx	eax, [ebp+var_124]
		mov	ecx, [ebp+var_118]
		lea	edx, [ecx+eax*8+10h]
		push	edx
		mov	eax, [ebp+var_14]
		push	eax
		call	_FT_Stream_Seek
		add	esp, 8
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_1054
		lea	ecx, [ebp+var_D8]
		push	ecx
		push	offset _winpe_rsrc_dir_entry_fields
		mov	edx, [ebp+var_14]
		push	edx
		call	_FT_Stream_ReadFields
		add	esp, 0Ch
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_1059

loc_1054:				; CODE XREF: _fnt_face_get_dll_font+69Dj
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_1059:				; CODE XREF: _fnt_face_get_dll_font+6BEj
		mov	eax, [ebp+var_D4]
		and	eax, 80000000h
		jnz	short loc_1085
		push	offset $SG7884	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	1D1h
		push	3
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 3
		mov	[ebp+var_C], eax
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_1085:				; CODE XREF: _fnt_face_get_dll_font+6D0j
		mov	ecx, [ebp+var_D4]
		and	ecx, 7FFFFFFFh
		mov	[ebp+var_D4], ecx
		mov	edx, [ebp+var_70]
		add	edx, [ebp+var_D4]
		mov	[ebp+var_11C], edx
		mov	eax, [ebp+var_70]
		add	eax, [ebp+var_D4]
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		call	_FT_Stream_Seek
		add	esp, 8
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_10E6
		lea	edx, [ebp+var_B0]
		push	edx
		push	offset _winpe_rsrc_dir_fields
		mov	eax, [ebp+var_14]
		push	eax
		call	_FT_Stream_ReadFields
		add	esp, 0Ch
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_10EB

loc_10E6:				; CODE XREF: _fnt_face_get_dll_font+72Fj
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_10EB:				; CODE XREF: _fnt_face_get_dll_font+750j
		xor	ecx, ecx
		mov	[ebp+var_128], cx
		jmp	short loc_1108
; ---------------------------------------------------------------------------

loc_10F6:				; CODE XREF: _fnt_face_get_dll_font:loc_1445j
		mov	dx, [ebp+var_128]
		add	dx, 1
		mov	[ebp+var_128], dx

loc_1108:				; CODE XREF: _fnt_face_get_dll_font+760j
		movzx	eax, [ebp+var_128]
		movzx	ecx, [ebp+var_A4]
		movzx	edx, [ebp+var_A2]
		add	ecx, edx
		cmp	eax, ecx
		jge	loc_144A
		movzx	eax, [ebp+var_128]
		mov	ecx, [ebp+var_11C]
		lea	edx, [ecx+eax*8+10h]
		push	edx
		mov	eax, [ebp+var_14]
		push	eax
		call	_FT_Stream_Seek
		add	esp, 8
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_116F
		lea	ecx, [ebp+var_E8]
		push	ecx
		push	offset _winpe_rsrc_dir_entry_fields
		mov	edx, [ebp+var_14]
		push	edx
		call	_FT_Stream_ReadFields
		add	esp, 0Ch
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_1174

loc_116F:				; CODE XREF: _fnt_face_get_dll_font+7B8j
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_1174:				; CODE XREF: _fnt_face_get_dll_font+7D9j
		mov	eax, [ebp+var_E4]
		and	eax, 80000000h
		jnz	short loc_11A0
		push	offset $SG7895	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	1E9h
		push	3
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 3
		mov	[ebp+var_C], eax
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_11A0:				; CODE XREF: _fnt_face_get_dll_font+7EBj
		mov	ecx, [ebp+var_E4]
		and	ecx, 7FFFFFFFh
		mov	[ebp+var_E4], ecx
		mov	edx, [ebp+var_70]
		add	edx, [ebp+var_E4]
		mov	[ebp+var_120], edx
		mov	eax, [ebp+var_70]
		add	eax, [ebp+var_E4]
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		call	_FT_Stream_Seek
		add	esp, 8
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_1201
		lea	edx, [ebp+var_C8]
		push	edx
		push	offset _winpe_rsrc_dir_fields
		mov	eax, [ebp+var_14]
		push	eax
		call	_FT_Stream_ReadFields
		add	esp, 0Ch
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_1206

loc_1201:				; CODE XREF: _fnt_face_get_dll_font+84Aj
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_1206:				; CODE XREF: _fnt_face_get_dll_font+86Bj
		xor	ecx, ecx
		mov	[ebp+var_12C], cx
		jmp	short loc_1223
; ---------------------------------------------------------------------------

loc_1211:				; CODE XREF: _fnt_face_get_dll_font:loc_1440j
		mov	dx, [ebp+var_12C]
		add	dx, 1
		mov	[ebp+var_12C], dx

loc_1223:				; CODE XREF: _fnt_face_get_dll_font+87Bj
		movzx	eax, [ebp+var_12C]
		movzx	ecx, [ebp+var_BC]
		movzx	edx, [ebp+var_BA]
		add	ecx, edx
		cmp	eax, ecx
		jge	loc_1445
		movzx	eax, [ebp+var_12C]
		mov	ecx, [ebp+var_120]
		lea	edx, [ecx+eax*8+10h]
		push	edx
		mov	eax, [ebp+var_14]
		push	eax
		call	_FT_Stream_Seek
		add	esp, 8
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_128A
		lea	ecx, [ebp+var_F8]
		push	ecx
		push	offset _winpe_rsrc_dir_entry_fields
		mov	edx, [ebp+var_14]
		push	edx
		call	_FT_Stream_ReadFields
		add	esp, 0Ch
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_128F

loc_128A:				; CODE XREF: _fnt_face_get_dll_font+8D3j
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_128F:				; CODE XREF: _fnt_face_get_dll_font+8F4j
		mov	eax, [ebp+var_E4]
		and	eax, 80000000h
		jz	short loc_12BB
		push	offset $SG7906	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	201h
		push	3
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 3
		mov	[ebp+var_C], eax
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_12BB:				; CODE XREF: _fnt_face_get_dll_font+906j
		cmp	[ebp+var_D8], 8
		jnz	loc_1440
		mov	ecx, [ebp+var_118]
		add	ecx, [ebp+var_F4]
		push	ecx
		mov	edx, [ebp+var_14]
		push	edx
		call	_FT_Stream_Seek
		add	esp, 8
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_130B
		lea	eax, [ebp+var_110]
		push	eax
		push	offset _winpe_rsrc_data_entry_fields
		mov	ecx, [ebp+var_14]
		push	ecx
		call	_FT_Stream_ReadFields
		add	esp, 0Ch
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_1310

loc_130B:				; CODE XREF: _fnt_face_get_dll_font+954j
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_1310:				; CODE XREF: _fnt_face_get_dll_font+975j
					; _fnt_face_get_dll_font+9BEj
		mov	edx, 4
		imul	eax, edx, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[eax], 2
		jl	short loc_1350
		mov	ecx, [ebp+var_108]
		push	ecx
		mov	edx, [ebp+var_10C]
		push	edx
		mov	eax, [ebp+var_70]
		add	eax, [ebp+var_110]
		sub	eax, [ebp+var_78]
		push	eax
		mov	ecx, [ebp+var_E8]
		push	ecx
		push	offset $SG7915	; "found font #%lu, offset %04lx, size %04"...
		call	_FT_Message
		add	esp, 14h

loc_1350:				; CODE XREF: _fnt_face_get_dll_font+98Bj
		xor	edx, edx
		jnz	short loc_1310
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [eax]
		jnz	loc_1433
		lea	edx, [ebp+var_C]
		push	edx
		push	0ACh ; '¬'
		mov	eax, [ebp+var_18]
		push	eax
		call	_ft_mem_alloc
		add	esp, 0Ch
		mov	ecx, [ebp+arg_0]
		mov	[ecx+84h], eax
		cmp	[ebp+var_C], 0
		jz	short loc_138B
		jmp	$Exit$139
; ---------------------------------------------------------------------------

loc_138B:				; CODE XREF: _fnt_face_get_dll_font+9F0j
		mov	edx, [ebp+var_70]
		add	edx, [ebp+var_110]
		sub	edx, [ebp+var_78]
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+84h]
		mov	[ecx], edx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+84h]
		mov	ecx, [ebp+var_10C]
		mov	[eax+0A4h], ecx
		mov	edx, [ebp+var_14]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+84h]
		push	ecx
		call	_fnt_font_load
		add	esp, 8
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_140A

loc_13D6:				; CODE XREF: _fnt_face_get_dll_font+A6Dj
		mov	edx, 4
		imul	eax, edx, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[eax], 2
		jl	short loc_13FF
		mov	ecx, [ebp+var_C]
		push	ecx
		mov	edx, [ebp+var_E8]
		push	edx
		push	offset $SG7924	; "font	#%lu load error	%d\n"
		call	_FT_Message
		add	esp, 0Ch

loc_13FF:				; CODE XREF: _fnt_face_get_dll_font+A51j
		xor	eax, eax
		jnz	short loc_13D6
		jmp	$Fail$140
; ---------------------------------------------------------------------------
		jmp	short loc_1433
; ---------------------------------------------------------------------------

loc_140A:				; CODE XREF: _fnt_face_get_dll_font+A40j
					; _fnt_face_get_dll_font+A9Dj
		mov	ecx, 4
		imul	edx, ecx, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[edx], 2
		jl	short loc_142F
		mov	eax, [ebp+var_E8]
		push	eax
		push	offset $SG7930	; "font	#%lu successfully loaded\n"
		call	_FT_Message
		add	esp, 8

loc_142F:				; CODE XREF: _fnt_face_get_dll_font+A85j
		xor	ecx, ecx
		jnz	short loc_140A

loc_1433:				; CODE XREF: _fnt_face_get_dll_font+9C8j
					; _fnt_face_get_dll_font+A74j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		add	eax, 1
		mov	ecx, [ebp+arg_0]
		mov	[ecx], eax

loc_1440:				; CODE XREF: _fnt_face_get_dll_font+92Ej
		jmp	loc_1211
; ---------------------------------------------------------------------------

loc_1445:				; CODE XREF: _fnt_face_get_dll_font+8A8j
		jmp	loc_10F6
; ---------------------------------------------------------------------------

loc_144A:				; CODE XREF: _fnt_face_get_dll_font+78Dj
		jmp	loc_FDB
; ---------------------------------------------------------------------------

loc_144F:				; CODE XREF: _fnt_face_get_dll_font+3D1j
					; _fnt_face_get_dll_font+3E0j ...
		mov	edx, [ebp+arg_0]
		cmp	dword ptr [edx], 0
		jnz	short loc_1495

loc_1457:				; CODE XREF: _fnt_face_get_dll_font+AE3j
		mov	eax, 4
		imul	ecx, eax, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[ecx], 2
		jl	short loc_1475
		push	offset $SG7936	; "this	file doesn't contain any RT_FONT r"...
		call	_FT_Message
		add	esp, 4

loc_1475:				; CODE XREF: _fnt_face_get_dll_font+AD2j
		xor	edx, edx
		jnz	short loc_1457
		push	offset $SG7937	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	234h
		push	3
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 3
		mov	[ebp+var_C], eax
		jmp	short $Exit$139
; ---------------------------------------------------------------------------

loc_1495:				; CODE XREF: _fnt_face_get_dll_font+AC1j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [eax]
		jl	short $Fail$140
		push	offset $SG7939	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	23Ah
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		mov	[ebp+var_C], eax
		jmp	short $Exit$139
; ---------------------------------------------------------------------------

$Fail$140:				; CODE XREF: _fnt_face_get_dll_font+90j
					; _fnt_face_get_dll_font:loc_CE8j ...
		cmp	[ebp+var_C], 0
		jz	short $Exit$139
		mov	edx, [ebp+arg_0]
		push	edx
		call	_fnt_font_done
		add	esp, 4

$Exit$139:				; CODE XREF: _fnt_face_get_dll_font:loc_A0Ej
					; _fnt_face_get_dll_font:loc_A84j ...
		mov	eax, [ebp+var_C]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN138
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4
		add	esp, 12Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_fnt_face_get_dll_font endp

; ---------------------------------------------------------------------------
		align 10h
$LN138		dd 0Ch			; DATA XREF: _fnt_face_get_dll_font+B40o
		dd offset $LN137
$LN137		dd 0FFFFFFF4h, 4	; DATA XREF: .text$mn:00001504o
		dd offset $LN125	; "error"
		dd 0FFFFFFE0h, 4
		dd offset $LN126	; "mz_header"
		dd 0FFFFFFD0h, 6
		dd offset $LN127	; "ne_header"
		dd 0FFFFFF9Ch, 14h
		dd offset $LN128	; "pe32_header"
		dd 0FFFFFF80h, 14h
		dd offset $LN129	; "pe32_section"
		dd 0FFFFFF68h, 10h
		dd offset $LN130	; "root_dir"
		dd 0FFFFFF50h, 10h
		dd offset $LN131	; "name_dir"
		dd 0FFFFFF38h, 10h
		dd offset $LN132	; "lang_dir"
		dd 0FFFFFF28h, 8
		dd offset $LN133	; "dir_entry1"
		dd 0FFFFFF18h, 8
		dd offset $LN134	; "dir_entry2"
		db 8, 0FFh
		dw 0FFFFh
		dd 8
		dd offset $LN135	; "dir_entry3"
		dd 0FFFFFEF0h, 10h
		dd offset $LN136	; "data_entry"
$LN136		db 'data_entry',0       ; DATA XREF: .text$mn:00001594o
$LN135		db 'dir_entry3',0       ; DATA XREF: .text$mn:00001588o
$LN134		db 'dir_entry2',0       ; DATA XREF: .text$mn:0000157Co
$LN133		db 'dir_entry1',0       ; DATA XREF: .text$mn:00001570o
$LN132		db 'lang_dir',0         ; DATA XREF: .text$mn:00001564o
$LN131		db 'name_dir',0         ; DATA XREF: .text$mn:00001558o
$LN130		db 'root_dir',0         ; DATA XREF: .text$mn:0000154Co
$LN129		db 'pe32_section',0     ; DATA XREF: .text$mn:00001540o
$LN128		db 'pe32_header',0      ; DATA XREF: .text$mn:00001534o
$LN127		db 'ne_header',0        ; DATA XREF: .text$mn:00001528o
$LN126		db 'mz_header',0        ; DATA XREF: .text$mn:0000151Co
$LN125		db 'error',0            ; DATA XREF: .text$mn:00001510o
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_fnt_cmap_init	proc near		; DATA XREF: .rdata:0000263Co

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+var_4]
		mov	eax, [edx+84h]
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_4]
		mov	[ebp+arg_4], ecx
		mov	edx, [ebp+var_8]
		movzx	eax, byte ptr [edx+68h]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+10h], eax
		mov	edx, [ebp+var_8]
		movzx	eax, byte ptr [edx+69h]
		mov	ecx, [ebp+arg_0]
		sub	eax, [ecx+10h]
		add	eax, 1
		mov	edx, [ebp+arg_0]
		mov	[edx+14h], eax
		xor	eax, eax
		mov	esp, ebp
		pop	ebp
		retn
_fnt_cmap_init	endp

; ---------------------------------------------------------------------------
		db 9 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_fnt_cmap_char_index proc near		; DATA XREF: .rdata:00002644o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		sub	ecx, [eax+10h]
		mov	[ebp+arg_4], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		cmp	eax, [edx+14h]
		jnb	short loc_16A6
		mov	ecx, [ebp+arg_4]
		add	ecx, 1
		mov	[ebp+var_4], ecx

loc_16A6:				; CODE XREF: _fnt_cmap_char_index+27j
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
_fnt_cmap_char_index endp

; ---------------------------------------------------------------------------
		db 7 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_fnt_cmap_char_next proc near		; DATA XREF: .rdata:00002648o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], 0
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		add	ecx, 1
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_C]
		cmp	eax, [edx+10h]
		ja	short loc_1705
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+10h]
		mov	[ebp+var_8], edx
		mov	[ebp+var_4], 1
		jmp	short loc_1731
; ---------------------------------------------------------------------------

loc_1705:				; CODE XREF: _fnt_cmap_char_next+3Dj
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_C]
		sub	ecx, [eax+10h]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_C]
		cmp	eax, [edx+14h]
		jnb	short loc_1731
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+10h]
		add	edx, [ebp+var_C]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_C]
		add	eax, 1
		mov	[ebp+var_4], eax

loc_1731:				; CODE XREF: _fnt_cmap_char_next+4Fj
					; _fnt_cmap_char_next+66j
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+var_8]
		mov	[ecx], edx
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
_fnt_cmap_char_next endp

; ---------------------------------------------------------------------------
		db 4 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_FNT_Face_Done	proc near		; CODE XREF: _FNT_Face_Init+565p
					; DATA XREF: .rdata:000024BCo

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_1766
		jmp	short loc_17A6
; ---------------------------------------------------------------------------

loc_1766:				; CODE XREF: _FNT_Face_Done+1Ej
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+64h]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_4]
		push	eax
		call	_fnt_font_done
		add	esp, 4

loc_177B:				; CODE XREF: _FNT_Face_Done+56j
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+20h]
		push	edx
		mov	eax, [ebp+var_8]
		push	eax
		call	_ft_mem_free
		add	esp, 8
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+20h], 0
		xor	edx, edx
		jnz	short loc_177B
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+1Ch], 0

loc_17A6:				; CODE XREF: _FNT_Face_Done+20j
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FNT_Face_Done	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_FNT_Face_Init	proc near		; DATA XREF: .rdata:000024B8o

var_44		= byte ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= word ptr -38h
var_36		= word ptr -36h
var_30		= word ptr -30h
var_2C		= word ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 44h
		push	edi
		lea	edi, [ebp+var_44]
		mov	ecx, 11h
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+64h]
		mov	[ebp+var_14], edx
		mov	eax, [ebp+arg_C]
		mov	[ebp+arg_C], eax
		mov	ecx, [ebp+arg_10]
		mov	[ebp+arg_10], ecx

loc_17E5:				; CODE XREF: _FNT_Face_Init+51j
		mov	edx, 4
		imul	eax, edx, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[eax], 2
		jl	short loc_1803
		push	offset $SG8028	; "Windows FNT driver\n"
		call	_FT_Message
		add	esp, 4

loc_1803:				; CODE XREF: _FNT_Face_Init+40j
		xor	ecx, ecx
		jnz	short loc_17E5
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		call	_fnt_face_get_dll_font
		add	esp, 8
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_182B
		cmp	[ebp+arg_8], 0
		jge	short loc_182B
		jmp	$Exit$50
; ---------------------------------------------------------------------------

loc_182B:				; CODE XREF: _FNT_Face_Init+6Aj
					; _FNT_Face_Init+70j
		mov	ecx, [ebp+var_C]
		and	ecx, 0FFh
		cmp	ecx, 2
		jnz	loc_18D9
		lea	edx, [ebp+var_C]
		push	edx
		push	0ACh ; '¬'
		mov	eax, [ebp+var_14]
		push	eax
		call	_ft_mem_alloc
		add	esp, 0Ch
		mov	ecx, [ebp+var_4]
		mov	[ecx+84h], eax
		cmp	[ebp+var_C], 0
		jz	short loc_1866
		jmp	$Exit$50
; ---------------------------------------------------------------------------

loc_1866:				; CODE XREF: _FNT_Face_Init+ABj
		mov	edx, [ebp+arg_4]
		mov	dword ptr [edx], 1
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+84h]
		mov	[ebp+var_18], ecx
		mov	edx, [ebp+var_18]
		mov	dword ptr [edx], 0
		mov	eax, [ebp+var_18]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	[eax+0A4h], edx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_18]
		push	ecx
		call	_fnt_font_load
		add	esp, 8
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_18D9
		cmp	[ebp+arg_8], 0
		jle	short loc_18CE
		push	offset $SG8037	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	2DAh
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		mov	[ebp+var_C], eax
		jmp	short loc_18D9
; ---------------------------------------------------------------------------

loc_18CE:				; CODE XREF: _FNT_Face_Init+FCj
		cmp	[ebp+arg_8], 0
		jge	short loc_18D9
		jmp	$Exit$50
; ---------------------------------------------------------------------------

loc_18D9:				; CODE XREF: _FNT_Face_Init+83j
					; _FNT_Face_Init+F6j ...
		cmp	[ebp+var_C], 0
		jz	short loc_18E4
		jmp	$Fail$51
; ---------------------------------------------------------------------------

loc_18E4:				; CODE XREF: _FNT_Face_Init+129j
		mov	edx, [ebp+var_4]
		mov	[ebp+var_1C], edx
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+84h]
		mov	[ebp+var_20], ecx
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+arg_8]
		mov	[edx+4], eax
		mov	ecx, [ebp+var_1C]
		mov	edx, [ecx+8]
		or	edx, 12h
		mov	eax, [ebp+var_1C]
		mov	[eax+8], edx
		mov	ecx, [ebp+var_20]
		movzx	edx, word ptr [ecx+64h]
		mov	eax, [ebp+var_20]
		movzx	ecx, word ptr [eax+66h]
		cmp	edx, ecx
		jnz	short loc_192F
		mov	edx, [ebp+var_1C]
		mov	eax, [edx+8]
		or	eax, 4
		mov	ecx, [ebp+var_1C]
		mov	[ecx+8], eax

loc_192F:				; CODE XREF: _FNT_Face_Init+16Aj
		mov	edx, [ebp+var_20]
		movzx	eax, byte ptr [edx+56h]
		test	eax, eax
		jz	short loc_1949
		mov	ecx, [ebp+var_1C]
		mov	edx, [ecx+0Ch]
		or	edx, 1
		mov	eax, [ebp+var_1C]
		mov	[eax+0Ch], edx

loc_1949:				; CODE XREF: _FNT_Face_Init+184j
		mov	ecx, [ebp+var_20]
		movzx	edx, word ptr [ecx+5Ah]
		cmp	edx, 320h
		jl	short loc_1967
		mov	eax, [ebp+var_1C]
		mov	ecx, [eax+0Ch]
		or	ecx, 2
		mov	edx, [ebp+var_1C]
		mov	[edx+0Ch], ecx

loc_1967:				; CODE XREF: _FNT_Face_Init+1A2j
		lea	eax, [ebp+var_C]
		push	eax
		push	0
		push	1
		push	0
		push	10h
		mov	ecx, [ebp+var_14]
		push	ecx
		call	_ft_mem_realloc
		add	esp, 18h
		mov	edx, [ebp+var_1C]
		mov	[edx+20h], eax
		cmp	[ebp+var_C], 0
		jz	short loc_1990
		jmp	$Fail$51
; ---------------------------------------------------------------------------

loc_1990:				; CODE XREF: _FNT_Face_Init+1D5j
		mov	eax, [ebp+var_1C]
		mov	dword ptr [eax+1Ch], 1
		mov	ecx, [ebp+var_1C]
		mov	edx, [ecx+20h]
		mov	[ebp+var_28], edx
		mov	eax, [ebp+var_28]
		mov	ecx, [ebp+var_20]
		mov	dx, [ecx+64h]
		mov	[eax+2], dx
		mov	eax, [ebp+var_20]
		movzx	ecx, word ptr [eax+60h]
		mov	edx, [ebp+var_20]
		movzx	eax, word ptr [edx+54h]
		add	ecx, eax
		mov	edx, [ebp+var_28]
		mov	[edx], cx
		mov	eax, [ebp+var_20]
		movzx	ecx, word ptr [eax+4Ah]
		shl	ecx, 6
		mov	edx, [ebp+var_28]
		mov	[edx+4], ecx
		mov	eax, [ebp+var_20]
		mov	cx, [eax+4Eh]
		mov	[ebp+var_2C], cx
		movzx	edx, [ebp+var_2C]
		test	edx, edx
		jnz	short loc_19F3
		mov	eax, 48h ; 'H'
		mov	[ebp+var_2C], ax

loc_19F3:				; CODE XREF: _FNT_Face_Init+234j
		mov	ecx, [ebp+var_20]
		mov	dx, [ecx+4Ch]
		mov	[ebp+var_30], dx
		movzx	eax, [ebp+var_30]
		test	eax, eax
		jnz	short loc_1A0F
		mov	ecx, 48h ; 'H'
		mov	[ebp+var_30], cx

loc_1A0F:				; CODE XREF: _FNT_Face_Init+250j
		push	48h ; 'H'
		movzx	edx, [ebp+var_30]
		push	edx
		mov	eax, [ebp+var_28]
		mov	ecx, [eax+4]
		push	ecx
		call	_FT_MulDiv
		add	esp, 0Ch
		mov	edx, [ebp+var_28]
		mov	[edx+0Ch], eax
		mov	eax, [ebp+var_28]
		mov	ecx, [eax+0Ch]
		add	ecx, 20h ; ' '
		and	ecx, 0FFFFFFC0h
		mov	edx, [ebp+var_28]
		mov	[edx+0Ch], ecx
		mov	eax, [ebp+var_20]
		movzx	ecx, word ptr [eax+60h]
		shl	ecx, 6
		mov	edx, [ebp+var_28]
		cmp	[edx+0Ch], ecx
		jle	short loc_1A9D

loc_1A4F:				; CODE XREF: _FNT_Face_Init+2BBj
		mov	eax, 4
		imul	ecx, eax, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[ecx], 2
		jl	short loc_1A6D
		push	offset $SG8063	; "use pixel_height as the nominal height\"...
		call	_FT_Message
		add	esp, 4

loc_1A6D:				; CODE XREF: _FNT_Face_Init+2AAj
		xor	edx, edx
		jnz	short loc_1A4F
		mov	eax, [ebp+var_20]
		movzx	ecx, word ptr [eax+60h]
		shl	ecx, 6
		mov	edx, [ebp+var_28]
		mov	[edx+0Ch], ecx
		movzx	eax, [ebp+var_30]
		push	eax
		push	48h ; 'H'
		mov	ecx, [ebp+var_28]
		mov	edx, [ecx+0Ch]
		push	edx
		call	_FT_MulDiv
		add	esp, 0Ch
		mov	ecx, [ebp+var_28]
		mov	[ecx+4], eax

loc_1A9D:				; CODE XREF: _FNT_Face_Init+299j
		push	48h ; 'H'
		movzx	edx, [ebp+var_2C]
		push	edx
		mov	eax, [ebp+var_28]
		mov	ecx, [eax+4]
		push	ecx
		call	_FT_MulDiv
		add	esp, 0Ch
		mov	edx, [ebp+var_28]
		mov	[edx+8], eax
		mov	eax, [ebp+var_28]
		mov	ecx, [eax+8]
		add	ecx, 20h ; ' '
		and	ecx, 0FFFFFFC0h
		mov	edx, [ebp+var_28]
		mov	[edx+8], ecx
		mov	[ebp+var_3C], 0
		xor	eax, eax
		mov	[ebp+var_38], ax
		xor	ecx, ecx
		mov	[ebp+var_36], cx
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_40], edx
		mov	eax, [ebp+var_20]
		movzx	ecx, byte ptr [eax+5Ch]
		cmp	ecx, 4Dh ; 'M'
		jnz	short loc_1B00
		mov	[ebp+var_3C], 61726D6Eh
		mov	edx, 1
		mov	[ebp+var_38], dx

loc_1B00:				; CODE XREF: _FNT_Face_Init+33Aj
		push	0
		lea	eax, [ebp+var_40]
		push	eax
		push	0
		mov	ecx, ds:_fnt_cmap_class
		push	ecx
		call	_FT_CMap_New
		add	esp, 10h
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_1B25
		jmp	$Fail$51
; ---------------------------------------------------------------------------

loc_1B25:				; CODE XREF: _FNT_Face_Init+36Aj
		mov	edx, [ebp+var_1C]
		cmp	dword ptr [edx+24h], 0
		jz	short loc_1B45
		mov	eax, 4
		imul	ecx, eax, 0
		mov	edx, [ebp+var_1C]
		mov	eax, [edx+28h]
		mov	edx, [ebp+var_1C]
		mov	eax, [ecx+eax]
		mov	[edx+5Ch], eax

loc_1B45:				; CODE XREF: _FNT_Face_Init+378j
		mov	ecx, [ebp+var_20]
		movzx	edx, byte ptr [ecx+69h]
		mov	eax, [ebp+var_20]
		movzx	ecx, byte ptr [eax+68h]
		cmp	edx, ecx
		jge	short loc_1B98

loc_1B57:				; CODE XREF: _FNT_Face_Init+3C3j
		mov	edx, 4
		imul	eax, edx, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[eax], 2
		jl	short loc_1B75
		push	offset $SG8075	; "invalid number of glyphs\n"
		call	_FT_Message
		add	esp, 4

loc_1B75:				; CODE XREF: _FNT_Face_Init+3B2j
		xor	ecx, ecx
		jnz	short loc_1B57
		push	offset $SG8076	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	34Ah
		push	3
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 3
		mov	[ebp+var_C], eax
		jmp	$Fail$51
; ---------------------------------------------------------------------------

loc_1B98:				; CODE XREF: _FNT_Face_Init+3A1j
		mov	edx, [ebp+var_20]
		movzx	eax, byte ptr [edx+69h]
		mov	ecx, [ebp+var_20]
		movzx	edx, byte ptr [ecx+68h]
		sub	eax, edx
		add	eax, 2
		mov	ecx, [ebp+var_1C]
		mov	[ecx+10h], eax
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_20]
		mov	ecx, [edx+74h]
		cmp	ecx, [eax+8]
		jb	short loc_1C00

loc_1BBF:				; CODE XREF: _FNT_Face_Init+42Bj
		mov	edx, 4
		imul	eax, edx, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[eax], 2
		jl	short loc_1BDD
		push	offset $SG8082	; "invalid family name offset\n"
		call	_FT_Message
		add	esp, 4

loc_1BDD:				; CODE XREF: _FNT_Face_Init+41Aj
		xor	ecx, ecx
		jnz	short loc_1BBF
		push	offset $SG8083	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	355h
		push	3
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 3
		mov	[ebp+var_C], eax
		jmp	$Fail$51
; ---------------------------------------------------------------------------

loc_1C00:				; CODE XREF: _FNT_Face_Init+409j
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_20]
		mov	ecx, [edx+8]
		sub	ecx, [eax+74h]
		mov	[ebp+var_24], ecx
		lea	edx, [ebp+var_C]
		push	edx
		mov	eax, [ebp+var_24]
		add	eax, 1
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		call	_ft_mem_alloc
		add	esp, 0Ch
		mov	edx, [ebp+var_20]
		mov	[edx+0A8h], eax
		cmp	[ebp+var_C], 0
		jz	short loc_1C3A
		jmp	$Fail$51
; ---------------------------------------------------------------------------

loc_1C3A:				; CODE XREF: _FNT_Face_Init+47Fj
		mov	eax, [ebp+var_24]
		push	eax		; size_t
		mov	ecx, [ebp+var_20]
		mov	edx, [ecx+0A0h]
		mov	eax, [ebp+var_20]
		add	edx, [eax+74h]
		push	edx		; void *
		mov	ecx, [ebp+var_20]
		mov	edx, [ecx+0A8h]
		push	edx		; void *
		call	_memcpy
		add	esp, 0Ch
		mov	eax, [ebp+var_20]
		mov	ecx, [eax+0A8h]
		mov	edx, [ebp+var_24]
		mov	byte ptr [ecx+edx], 0
		lea	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+var_20]
		mov	edx, [ecx+0A8h]
		push	edx
		mov	eax, [ebp+var_20]
		mov	ecx, [eax+0A8h]
		push	ecx		; char *
		call	_strlen
		add	esp, 4
		add	eax, 1
		push	eax
		mov	edx, [ebp+var_24]
		push	edx
		push	1
		mov	eax, [ebp+var_14]
		push	eax
		call	_ft_mem_realloc
		add	esp, 18h
		mov	ecx, [ebp+var_20]
		mov	[ecx+0A8h], eax
		cmp	[ebp+var_C], 0
		jz	short loc_1CB7
		jmp	short $Fail$51
; ---------------------------------------------------------------------------

loc_1CB7:				; CODE XREF: _FNT_Face_Init+4FFj
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_20]
		mov	ecx, [eax+0A8h]
		mov	[edx+14h], ecx
		mov	edx, [ebp+var_1C]
		mov	dword ptr [edx+18h], offset $SG8090 ; "Regular"
		mov	eax, [ebp+var_1C]
		mov	ecx, [eax+0Ch]
		and	ecx, 2
		jz	short loc_1CFE
		mov	edx, [ebp+var_1C]
		mov	eax, [edx+0Ch]
		and	eax, 1
		jz	short loc_1CF2
		mov	ecx, [ebp+var_1C]
		mov	dword ptr [ecx+18h], offset $SG8094 ; "Bold Italic"
		jmp	short loc_1CFC
; ---------------------------------------------------------------------------

loc_1CF2:				; CODE XREF: _FNT_Face_Init+530j
		mov	edx, [ebp+var_1C]
		mov	dword ptr [edx+18h], offset $SG8097 ; "Bold"

loc_1CFC:				; CODE XREF: _FNT_Face_Init+53Cj
		jmp	short loc_1D13
; ---------------------------------------------------------------------------

loc_1CFE:				; CODE XREF: _FNT_Face_Init+525j
		mov	eax, [ebp+var_1C]
		mov	ecx, [eax+0Ch]
		and	ecx, 1
		jz	short loc_1D13
		mov	edx, [ebp+var_1C]
		mov	dword ptr [edx+18h], offset $SG8101 ; "Italic"

loc_1D13:				; CODE XREF: _FNT_Face_Init:loc_1CFCj
					; _FNT_Face_Init+553j
		jmp	short $Exit$50
; ---------------------------------------------------------------------------

$Fail$51:				; CODE XREF: _FNT_Face_Init+12Bj
					; _FNT_Face_Init+1D7j ...
		mov	eax, [ebp+arg_4]
		push	eax
		call	_FNT_Face_Done
		add	esp, 4

$Exit$50:				; CODE XREF: _FNT_Face_Init+72j
					; _FNT_Face_Init+ADj ...
		mov	eax, [ebp+var_C]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN49
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		add	esp, 44h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FNT_Face_Init	endp

; ---------------------------------------------------------------------------
$LN49		dd 2			; DATA XREF: _FNT_Face_Init+574o
		dd offset $LN48
$LN48		dd 0FFFFFFF4h, 4	; DATA XREF: .text$mn:00001D48o
		dd offset $LN46		; "error"
		dd 0FFFFFFC0h, 0Ch
		dd offset $LN47		; "charmap"
$LN47		db 'charmap',0          ; DATA XREF: .text$mn:00001D60o
$LN46		db 'error',0            ; DATA XREF: .text$mn:00001D54o
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_FNT_Size_Select proc near		; CODE XREF: _FNT_Size_Request+FEp
					; DATA XREF: .rdata:000024E4o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+var_4]
		mov	eax, [edx+84h]
		add	eax, 4
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_4]
		mov	[ebp+arg_4], ecx
		push	0
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		push	eax
		call	_FT_Select_Metrics
		add	esp, 8
		mov	ecx, [ebp+var_8]
		movzx	edx, word ptr [ecx+4Ch]
		shl	edx, 6
		mov	eax, [ebp+arg_0]
		mov	[eax+18h], edx
		mov	ecx, [ebp+var_8]
		movzx	edx, word ptr [ecx+5Ch]
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax+4Ch]
		sub	edx, ecx
		neg	edx
		shl	edx, 6
		mov	eax, [ebp+arg_0]
		mov	[eax+1Ch], edx
		mov	ecx, [ebp+var_8]
		movzx	edx, word ptr [ecx+62h]
		shl	edx, 6
		mov	eax, [ebp+arg_0]
		mov	[eax+24h], edx
		xor	eax, eax
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FNT_Size_Select endp

; ---------------------------------------------------------------------------
		db 4 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_FNT_Size_Request proc near		; DATA XREF: .rdata:000024E0o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+var_4]
		mov	eax, [edx+84h]
		add	eax, 4
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	eax, [edx+20h]
		mov	[ebp+var_C], eax
		mov	[ebp+var_10], 17h
		mov	ecx, [ebp+arg_4]
		cmp	dword ptr [ecx+10h], 0
		jz	short loc_1E75
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+arg_4]
		mov	ecx, [edx+8]
		imul	ecx, [eax+10h]
		add	ecx, 24h ; '$'
		mov	eax, ecx
		cdq
		mov	ecx, 48h ; 'H'
		idiv	ecx
		mov	[ebp+var_18], eax
		jmp	short loc_1E7E
; ---------------------------------------------------------------------------

loc_1E75:				; CODE XREF: _FNT_Size_Request+50j
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+8]
		mov	[ebp+var_18], eax

loc_1E7E:				; CODE XREF: _FNT_Size_Request+6Fj
		mov	ecx, [ebp+var_18]
		mov	[ebp+var_14], ecx
		mov	edx, [ebp+var_14]
		add	edx, 20h ; ' '
		sar	edx, 6
		mov	[ebp+var_14], edx
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		mov	[ebp+var_1C], ecx
		cmp	[ebp+var_1C], 0
		jz	short loc_1EA6
		cmp	[ebp+var_1C], 1
		jz	short loc_1EC0
		jmp	short loc_1ED5
; ---------------------------------------------------------------------------

loc_1EA6:				; CODE XREF: _FNT_Size_Request+98j
		mov	edx, [ebp+var_C]
		mov	eax, [edx+0Ch]
		add	eax, 20h ; ' '
		sar	eax, 6
		cmp	[ebp+var_14], eax
		jnz	short loc_1EBE
		mov	[ebp+var_10], 0

loc_1EBE:				; CODE XREF: _FNT_Size_Request+B1j
		jmp	short loc_1EEF
; ---------------------------------------------------------------------------

loc_1EC0:				; CODE XREF: _FNT_Size_Request+9Ej
		mov	ecx, [ebp+var_8]
		movzx	edx, word ptr [ecx+5Ch]
		cmp	[ebp+var_14], edx
		jnz	short loc_1ED3
		mov	[ebp+var_10], 0

loc_1ED3:				; CODE XREF: _FNT_Size_Request+C6j
		jmp	short loc_1EEF
; ---------------------------------------------------------------------------

loc_1ED5:				; CODE XREF: _FNT_Size_Request+A0j
		push	offset $SG8133	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	3B2h
		push	7
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 7
		mov	[ebp+var_10], eax

loc_1EEF:				; CODE XREF: _FNT_Size_Request:loc_1EBEj
					; _FNT_Size_Request:loc_1ED3j
		cmp	[ebp+var_10], 0
		jz	short loc_1EFC
		mov	eax, [ebp+var_10]
		jmp	short loc_1F0A
; ---------------------------------------------------------------------------
		jmp	short loc_1F0A
; ---------------------------------------------------------------------------

loc_1EFC:				; CODE XREF: _FNT_Size_Request+EFj
		push	0
		mov	eax, [ebp+arg_0]
		push	eax
		call	_FNT_Size_Select
		add	esp, 8

loc_1F0A:				; CODE XREF: _FNT_Size_Request+F4j
					; _FNT_Size_Request+F6j
		add	esp, 1Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FNT_Size_Request endp

; ---------------------------------------------------------------------------
		db 0Ch dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_FNT_Load_Glyph	proc near		; DATA XREF: .rdata:000024D0o

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_3D		= byte ptr -3Dh
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_25		= byte ptr -25h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 4Ch
		push	edi
		lea	edi, [ebp+var_4C]
		mov	ecx, 13h
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		mov	[ebp+var_4], ecx
		mov	[ebp+var_10], 0
		mov	edx, [ebp+arg_0]
		add	edx, 4Ch ; 'L'
		mov	[ebp+var_20], edx
		mov	eax, [ebp+arg_C]
		mov	[ebp+arg_C], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_1F7D
		push	offset $SG8157	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	3D1h
		push	23h ; '#'
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 23h
		mov	[ebp+var_10], eax
		jmp	$Exit$47
; ---------------------------------------------------------------------------

loc_1F7D:				; CODE XREF: _FNT_Load_Glyph+38j
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+84h]
		mov	[ebp+var_8], edx
		cmp	[ebp+var_8], 0
		jz	short loc_1F9A
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_8]
		cmp	ecx, [eax+10h]
		jb	short loc_1FB9

loc_1F9A:				; CODE XREF: _FNT_Load_Glyph+69j
		push	offset $SG8163	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	3DAh
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		mov	[ebp+var_10], eax
		jmp	$Exit$47
; ---------------------------------------------------------------------------

loc_1FB9:				; CODE XREF: _FNT_Load_Glyph+74j
					; _FNT_Load_Glyph+B9j
		mov	edx, 4
		imul	eax, edx, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[eax], 1
		jl	short loc_1FDB
		mov	ecx, [ebp+arg_8]
		push	ecx
		push	offset $SG8168	; "FNT_Load_Glyph: glyph index %d\n"
		call	_FT_Message
		add	esp, 8

loc_1FDB:				; CODE XREF: _FNT_Load_Glyph+A4j
		xor	edx, edx
		jnz	short loc_1FB9
		cmp	[ebp+arg_8], 0
		jbe	short loc_1FF0
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax
		jmp	short loc_1FFA
; ---------------------------------------------------------------------------

loc_1FF0:				; CODE XREF: _FNT_Load_Glyph+BFj
		mov	ecx, [ebp+var_8]
		movzx	edx, byte ptr [ecx+6Ah]
		mov	[ebp+arg_8], edx

loc_1FFA:				; CODE XREF: _FNT_Load_Glyph+CAj
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax+4]
		cmp	ecx, 300h
		jnz	short loc_200F
		mov	[ebp+var_3D], 1
		jmp	short loc_2013
; ---------------------------------------------------------------------------

loc_200F:				; CODE XREF: _FNT_Load_Glyph+E3j
		mov	[ebp+var_3D], 0

loc_2013:				; CODE XREF: _FNT_Load_Glyph+E9j
		mov	dl, [ebp+var_3D]
		mov	[ebp+var_25], dl
		movzx	eax, [ebp+var_25]
		test	eax, eax
		jz	short loc_202A
		mov	[ebp+var_44], 6
		jmp	short loc_2031
; ---------------------------------------------------------------------------

loc_202A:				; CODE XREF: _FNT_Load_Glyph+FBj
		mov	[ebp+var_44], 4

loc_2031:				; CODE XREF: _FNT_Load_Glyph+104j
		mov	ecx, [ebp+var_44]
		mov	[ebp+var_1C], ecx
		movzx	edx, [ebp+var_25]
		test	edx, edx
		jz	short loc_2048
		mov	[ebp+var_48], 94h ; ''
		jmp	short loc_204F
; ---------------------------------------------------------------------------

loc_2048:				; CODE XREF: _FNT_Load_Glyph+119j
		mov	[ebp+var_48], 76h ; 'v'

loc_204F:				; CODE XREF: _FNT_Load_Glyph+122j
		mov	eax, [ebp+var_1C]
		imul	eax, [ebp+arg_8]
		add	eax, [ebp+var_48]
		mov	[ebp+var_24], eax
		movzx	ecx, [ebp+var_25]
		test	ecx, ecx
		jz	short loc_206D
		mov	[ebp+var_4C], 4
		jmp	short loc_2074
; ---------------------------------------------------------------------------

loc_206D:				; CODE XREF: _FNT_Load_Glyph+13Ej
		mov	[ebp+var_4C], 2

loc_2074:				; CODE XREF: _FNT_Load_Glyph+147j
		mov	edx, [ebp+var_8]
		mov	eax, [edx+8]
		sub	eax, 2
		sub	eax, [ebp+var_4C]
		cmp	[ebp+var_24], eax
		jb	short loc_20C6

loc_2085:				; CODE XREF: _FNT_Load_Glyph+181j
		mov	ecx, 4
		imul	edx, ecx, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[edx], 2
		jl	short loc_20A3
		push	offset $SG8177	; "invalid FNT offset\n"
		call	_FT_Message
		add	esp, 4

loc_20A3:				; CODE XREF: _FNT_Load_Glyph+170j
		xor	eax, eax
		jnz	short loc_2085
		push	offset $SG8178	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	3EEh
		push	3
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 3
		mov	[ebp+var_10], eax
		jmp	$Exit$47
; ---------------------------------------------------------------------------

loc_20C6:				; CODE XREF: _FNT_Load_Glyph+15Fj
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+0A0h]
		add	edx, [ebp+var_24]
		mov	[ebp+var_18], edx
		mov	eax, [ebp+var_18]
		add	eax, 2
		mov	[ebp+var_18], eax
		mov	ecx, 1
		shl	ecx, 0
		mov	edx, [ebp+var_18]
		movzx	eax, byte ptr [edx+ecx-2]
		shl	eax, 8
		mov	ecx, 1
		imul	edx, ecx, 0
		mov	ecx, [ebp+var_18]
		movzx	edx, byte ptr [ecx+edx-2]
		or	eax, edx
		cwde
		mov	ecx, [ebp+var_20]
		mov	[ecx+4], eax
		movzx	edx, [ebp+var_25]
		test	edx, edx
		jz	short loc_216E
		mov	eax, [ebp+var_18]
		add	eax, 4
		mov	[ebp+var_18], eax
		mov	ecx, 1
		imul	edx, ecx, 3
		mov	eax, [ebp+var_18]
		movzx	ecx, byte ptr [eax+edx-4]
		shl	ecx, 18h
		mov	edx, 1
		shl	edx, 1
		mov	eax, [ebp+var_18]
		movzx	edx, byte ptr [eax+edx-4]
		shl	edx, 10h
		or	ecx, edx
		mov	eax, 1
		shl	eax, 0
		mov	edx, [ebp+var_18]
		movzx	eax, byte ptr [edx+eax-4]
		shl	eax, 8
		or	ecx, eax
		mov	edx, 1
		imul	eax, edx, 0
		mov	edx, [ebp+var_18]
		movzx	eax, byte ptr [edx+eax-4]
		or	ecx, eax
		mov	[ebp+var_24], ecx
		jmp	short loc_21A2
; ---------------------------------------------------------------------------

loc_216E:				; CODE XREF: _FNT_Load_Glyph+1ECj
		mov	ecx, [ebp+var_18]
		add	ecx, 2
		mov	[ebp+var_18], ecx
		mov	edx, 1
		shl	edx, 0
		mov	eax, [ebp+var_18]
		movzx	ecx, byte ptr [eax+edx-2]
		shl	ecx, 8
		mov	edx, 1
		imul	eax, edx, 0
		mov	edx, [ebp+var_18]
		movzx	eax, byte ptr [edx+eax-2]
		or	ecx, eax
		movzx	ecx, cx
		mov	[ebp+var_24], ecx

loc_21A2:				; CODE XREF: _FNT_Load_Glyph+248j
		mov	edx, [ebp+var_8]
		mov	eax, [ebp+var_24]
		cmp	eax, [edx+8]
		jb	short loc_21EE

loc_21AD:				; CODE XREF: _FNT_Load_Glyph+2A9j
		mov	ecx, 4
		imul	edx, ecx, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[edx], 2
		jl	short loc_21CB
		push	offset $SG8208	; "invalid FNT offset\n"
		call	_FT_Message
		add	esp, 4

loc_21CB:				; CODE XREF: _FNT_Load_Glyph+298j
		xor	eax, eax
		jnz	short loc_21AD
		push	offset $SG8209	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	3FFh
		push	3
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 3
		mov	[ebp+var_10], eax
		jmp	$Exit$47
; ---------------------------------------------------------------------------

loc_21EE:				; CODE XREF: _FNT_Load_Glyph+287j
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+0A0h]
		add	edx, [ebp+var_24]
		mov	[ebp+var_18], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ecx+64h]
		mov	[ebp+var_2C], edx
		mov	eax, [ebp+var_20]
		mov	ecx, [eax+4]
		add	ecx, 7
		shr	ecx, 3
		mov	[ebp+var_30], ecx
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_30]
		mov	[edx+8], eax
		mov	ecx, [ebp+var_8]
		movzx	edx, word ptr [ecx+60h]
		mov	eax, [ebp+var_20]
		mov	[eax], edx
		mov	ecx, [ebp+var_20]
		mov	byte ptr [ecx+12h], 1
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_30]
		imul	eax, [edx]
		add	eax, [ebp+var_24]
		mov	ecx, [ebp+var_8]
		cmp	eax, [ecx+8]
		jbe	short loc_2289

loc_2248:				; CODE XREF: _FNT_Load_Glyph+344j
		mov	edx, 4
		imul	eax, edx, 3Dh
		cmp	dword ptr ds:_ft_trace_levels[eax], 2
		jl	short loc_2266
		push	offset $SG8220	; "invalid bitmap width\n"
		call	_FT_Message
		add	esp, 4

loc_2266:				; CODE XREF: _FNT_Load_Glyph+333j
		xor	ecx, ecx
		jnz	short loc_2248
		push	offset $SG8221	; "..\\..\\..\\src\\winfonts\\winfnt.c"
		push	415h
		push	3
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 3
		mov	[ebp+var_10], eax
		jmp	$Exit$47
; ---------------------------------------------------------------------------

loc_2289:				; CODE XREF: _FNT_Load_Glyph+322j
		lea	edx, [ebp+var_10]
		push	edx
		push	0
		mov	eax, [ebp+var_30]
		push	eax
		push	0
		mov	ecx, [ebp+var_20]
		mov	edx, [ecx]
		push	edx
		mov	eax, [ebp+var_2C]
		push	eax
		call	_ft_mem_realloc
		add	esp, 18h
		mov	ecx, [ebp+var_20]
		mov	[ecx+0Ch], eax
		cmp	[ebp+var_10], 0
		jz	short loc_22B8
		jmp	$Exit$47
; ---------------------------------------------------------------------------

loc_22B8:				; CODE XREF: _FNT_Load_Glyph+38Dj
		mov	edx, [ebp+var_20]
		mov	eax, [edx+0Ch]
		mov	[ebp+var_34], eax
		jmp	short loc_22D5
; ---------------------------------------------------------------------------

loc_22C3:				; CODE XREF: _FNT_Load_Glyph:loc_2317j
		mov	ecx, [ebp+var_30]
		sub	ecx, 1
		mov	[ebp+var_30], ecx
		mov	edx, [ebp+var_34]
		add	edx, 1
		mov	[ebp+var_34], edx

loc_22D5:				; CODE XREF: _FNT_Load_Glyph+39Dj
		cmp	[ebp+var_30], 0
		jle	short loc_2319
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_18]
		add	ecx, [eax]
		mov	[ebp+var_3C], ecx
		mov	edx, [ebp+var_34]
		mov	[ebp+var_38], edx
		jmp	short loc_2303
; ---------------------------------------------------------------------------

loc_22EE:				; CODE XREF: _FNT_Load_Glyph+3F1j
		mov	eax, [ebp+var_18]
		add	eax, 1
		mov	[ebp+var_18], eax
		mov	ecx, [ebp+var_20]
		mov	edx, [ebp+var_38]
		add	edx, [ecx+8]
		mov	[ebp+var_38], edx

loc_2303:				; CODE XREF: _FNT_Load_Glyph+3C8j
		mov	eax, [ebp+var_18]
		cmp	eax, [ebp+var_3C]
		jnb	short loc_2317
		mov	ecx, [ebp+var_38]
		mov	edx, [ebp+var_18]
		mov	al, [edx]
		mov	[ecx], al
		jmp	short loc_22EE
; ---------------------------------------------------------------------------

loc_2317:				; CODE XREF: _FNT_Load_Glyph+3E5j
		jmp	short loc_22C3
; ---------------------------------------------------------------------------

loc_2319:				; CODE XREF: _FNT_Load_Glyph+3B5j
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+9Ch]
		mov	dword ptr [edx+4], 1
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+64h], 0
		mov	ecx, [ebp+var_8]
		movzx	edx, word ptr [ecx+50h]
		mov	eax, [ebp+arg_0]
		mov	[eax+68h], edx
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+48h], 62697473h
		mov	edx, [ebp+var_20]
		mov	eax, [edx+4]
		shl	eax, 6
		mov	ecx, [ebp+arg_0]
		mov	[ecx+18h], eax
		mov	edx, [ebp+var_20]
		mov	eax, [edx]
		shl	eax, 6
		mov	ecx, [ebp+arg_0]
		mov	[ecx+1Ch], eax
		mov	edx, [ebp+var_20]
		mov	eax, [edx+4]
		shl	eax, 6
		mov	ecx, [ebp+arg_0]
		mov	[ecx+28h], eax
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+20h], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+68h]
		shl	ecx, 6
		mov	edx, [ebp+arg_0]
		mov	[edx+24h], ecx
		mov	eax, [ebp+var_20]
		mov	ecx, [eax]
		shl	ecx, 6
		push	ecx
		mov	edx, [ebp+arg_0]
		add	edx, 18h
		push	edx
		call	_ft_synthesize_vertical_metrics
		add	esp, 8

$Exit$47:				; CODE XREF: _FNT_Load_Glyph+54j
					; _FNT_Load_Glyph+90j ...
		mov	eax, [ebp+var_10]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN46_0
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		add	esp, 4Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FNT_Load_Glyph	endp

; ---------------------------------------------------------------------------
		align 4
$LN46_0		dd 1			; DATA XREF: _FNT_Load_Glyph+48Ao
		dd offset $LN45
$LN45		dd 0FFFFFFF0h, 4	; DATA XREF: .text$mn:000023D0o
		dd offset $LN44		; "error"
$LN44		db 'error',0            ; DATA XREF: .text$mn:000023DCo
		db 0Eh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_winfnt_get_header proc	near		; DATA XREF: .rdata:_winfnt_service_reco

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		push	edi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+84h]
		mov	[ebp+var_4], ecx
		mov	esi, [ebp+var_4]
		add	esi, 4
		mov	ecx, 27h ; '''
		mov	edi, [ebp+arg_4]
		rep movsd
		xor	eax, eax
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
_winfnt_get_header endp

; ---------------------------------------------------------------------------
		db 0Fh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_winfnt_get_service proc near		; DATA XREF: .rdata:000024A8o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		push	offset _winfnt_services
		call	_ft_service_list_lookup
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_winfnt_get_service endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 2458h
_winfnt_service_rec dd offset _winfnt_get_header ; DATA	XREF: .rdata:00002468o
_winfnt_services dd offset $SG8246	; DATA XREF: _winfnt_get_service+Do
					; "xf86-driver-name"
		dd offset $SG8247	; "Windows FNT"
		dd offset $SG8248	; "winfonts"
		dd offset _winfnt_service_rec
		dd 2 dup(0)
_winmz_header_fields dd	400004h, 20Eh, 3A19h, 20212h, 0
					; DATA XREF: _fnt_face_get_dll_font+60o
		public _winfnt_driver_class
_winfnt_driver_class dd	offset $SG7798+0Dh ; "winfonts\\winfnt.c"
		dd 1Ch
		dd offset $SG8259	; "winfonts"
		dd 10000h, 20000h, 3 dup(0)
		dd offset _winfnt_get_service
		dd offset $SG8259	; "winfonts"
		dd offset $SG8209+18h	; "nfnt.c"
		dd offset $SG8259+8	; ""
		dd offset _FNT_Face_Init
		dd offset _FNT_Face_Done
		dd 4 dup(0)
		dd offset _FNT_Load_Glyph
		align 10h
		dd offset _FNT_Size_Request
		dd offset _FNT_Size_Select
_winne_header_fields dd	280004h, 20Eh, 2219h, 2020Eh, 4020Eh, 0
					; DATA XREF: _fnt_face_get_dll_font+D6o
_winpe32_header_fields dd 0F80004h, 412h, 4020Eh, 6020Eh, 0C19h, 8020Eh, 219h
					; DATA XREF: _fnt_face_get_dll_font+426o
		dd 0A020Eh, 6E19h, 0C0412h, 100412h, 6819h, 0
_winpe32_section_fields	dd 280004h, 818h, 419h,	80412h,	0C0412h, 100412h, 1019h
					; DATA XREF: _fnt_face_get_dll_font+52Do
		dd 0
_winpe_rsrc_dir_fields dd 100004h, 412h, 40412h, 8020Eh, 0A020Eh, 0C020Eh, 0E020Eh
					; DATA XREF: _fnt_face_get_dll_font+614o
					; _fnt_face_get_dll_font+738o ...
		dd 0
_winpe_rsrc_dir_entry_fields dd	80004h,	412h, 40412h, 0
					; DATA XREF: _fnt_face_get_dll_font+6A6o
					; _fnt_face_get_dll_font+7C1o ...
_winpe_rsrc_data_entry_fields dd 100004h, 412h,	40412h,	80412h,	0C0412h, 0
					; DATA XREF: _fnt_face_get_dll_font+95Do
_fnt_cmap_class	dd offset _fnt_cmap_class_rec ;	DATA XREF: _FNT_Face_Init+354r
_winfnt_header_fields dd 940004h, 20Eh,	40412h,	83C18h,	44020Eh, 46020Eh, 48020Eh
					; DATA XREF: _fnt_font_load+45o
		dd 4A020Eh, 4C020Eh, 4E020Eh, 50020Eh, 520108h,	530108h
		dd 540108h, 56020Eh, 580108h, 5A020Eh, 5C020Eh,	5E0108h
		dd 60020Eh, 62020Eh, 640108h, 650108h, 660108h,	670108h
		dd 68020Eh, 6C0412h, 700412h, 740412h, 780412h,	7C0108h
		dd 800412h, 84020Eh, 86020Eh, 88020Eh, 8A0212h,	8C1018h
		dd 0
_fnt_cmap_class_rec dd 18h		; DATA XREF: .rdata:_fnt_cmap_classo
		dd offset _fnt_cmap_init
		dd 0
		dd offset _fnt_cmap_char_index
		dd offset _fnt_cmap_char_next
		align 20h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 2660h
; COMDAT (pick any)
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 2664h
; COMDAT (pick any)
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; void *__cdecl	memcpy(void *, const void *, size_t)
		extrn _memcpy:near	; CODE XREF: _FNT_Face_Init+4A4p
; size_t __cdecl strlen(const char *)
		extrn _strlen:near	; CODE XREF: _FNT_Face_Init+4D4p
		extrn _FT_MulDiv:near	; CODE XREF: _FNT_Face_Init+269p
					; _FNT_Face_Init+2DBp ...
		extrn _FT_Message:near	; CODE XREF: _fnt_font_load+95p
					; _fnt_font_load+11Ep ...
		extrn _FT_Throw:near	; CODE XREF: _fnt_font_load+ADp
					; _fnt_font_load+136p ...
		extrn _ft_mem_alloc:near ; CODE	XREF: _fnt_face_get_dll_font+304p
					; _fnt_face_get_dll_font+9DBp ...
		extrn _ft_mem_realloc:near ; CODE XREF:	_FNT_Face_Init+1C3p
					; _FNT_Face_Init+4EAp ...
		extrn _ft_mem_free:near	; CODE XREF: _fnt_font_done+71p
					; _fnt_font_done+92p ...
		extrn _ft_service_list_lookup:near ; CODE XREF:	_winfnt_get_service+12p
		extrn _FT_CMap_New:near	; CODE XREF: _FNT_Face_Init+35Bp
		extrn _FT_Select_Metrics:near ;	CODE XREF: _FNT_Size_Select+39p
		extrn _ft_synthesize_vertical_metrics:near ; CODE XREF:	_FNT_Load_Glyph+47Bp
		extrn _FT_Stream_Seek:near ; CODE XREF:	_fnt_font_load+30p
					; _fnt_font_load+1E7p ...
		extrn _FT_Stream_Pos:near ; CODE XREF: _fnt_face_get_dll_font+1D8p
		extrn _FT_Stream_EnterFrame:near ; CODE	XREF: _fnt_face_get_dll_font+170p
					; _fnt_face_get_dll_font+343p
		extrn _FT_Stream_ExitFrame:near	; CODE XREF: _fnt_face_get_dll_font+212p
					; _fnt_face_get_dll_font+3B0p
		extrn _FT_Stream_ExtractFrame:near ; CODE XREF:	_fnt_font_load+20Cp
		extrn _FT_Stream_ReleaseFrame:near ; CODE XREF:	_fnt_font_done+5Bp
		extrn _FT_Stream_GetUShortLE:near ; CODE XREF: _fnt_face_get_dll_font+18Ap
					; _fnt_face_get_dll_font+19Ap ...
		extrn _FT_Stream_ReadFields:near ; CODE	XREF: _fnt_font_load+4Ep
					; _fnt_face_get_dll_font+69p ...
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _fnt_face_get_dll_font+B46p
					; _FNT_Face_Init+57Ap ...
		extrn @__security_check_cookie@4:near
					; CODE XREF: _fnt_face_get_dll_font+B53p
		extrn __RTC_CheckEsp:near ; CODE XREF: _fnt_font_done+B7p
					; _fnt_font_load+21Fp ...
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn _ft_trace_levels:near ; DATA XREF: _fnt_font_load+87r
					; _fnt_font_load+110r ...
		extrn ___security_cookie:near ;	DATA XREF: _fnt_face_get_dll_font+1Cr


		end
