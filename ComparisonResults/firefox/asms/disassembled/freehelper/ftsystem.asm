;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	51C71E24E8CA594A8D6DC4B2F6C6EB1E
; Input	CRC32 :	EFAACAC2

; File Name   :	D:\compspace\objfiles\firefox\freehelper\ftsystem.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRTD"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
$SG7177		db '..\..\..\src\base\ftsystem.c',0 ; DATA XREF: _FT_Stream_Open+12o
		align 10h
; char _SG7182[]
$SG7182		db 'rb',0               ; DATA XREF: _FT_Stream_Open+6Ao
		align 4
$SG7184		db 'FT_Stream_Open: could not open `%s',27h,0Ah,0
					; DATA XREF: _FT_Stream_Open+90o
		align 4
$SG7185		db '..\..\..\src\base\ftsystem.c',0 ; DATA XREF: _FT_Stream_Open+9Do
		align 4
$SG7187		db 'FT_Stream_Open:',0  ; DATA XREF: _FT_Stream_Open+F8o
$SG7188		db ' opened `%s',27h,' but zero-sized',0Ah,0
					; DATA XREF: _FT_Stream_Open+109o
		align 4
$SG7189		db '..\..\..\src\base\ftsystem.c',0 ; DATA XREF: _FT_Stream_Open+12Co
		align 4
$SG7194		db 'FT_Stream_Open:',0  ; DATA XREF: _FT_Stream_Open+190o
$SG7199		db ' opened `%s',27h,' (%d bytes) successfully',0Ah,0
					; DATA XREF: _FT_Stream_Open+1BDo
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F4h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_New_Memory
_FT_New_Memory	proc near

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	esi, esp
		push	10h		; size_t
		call	dword ptr ds:__imp__malloc
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_144
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax], 0
		mov	ecx, [ebp+var_4]
		mov	dword ptr [ecx+4], offset _ft_alloc
		mov	edx, [ebp+var_4]
		mov	dword ptr [edx+0Ch], offset _ft_realloc
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+8], offset _ft_free

loc_144:				; CODE XREF: _FT_New_Memory+27j
		mov	eax, [ebp+var_4]
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_New_Memory	endp

; ---------------------------------------------------------------------------
		db 0Eh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl FT_Done_Memory(void *)
		public _FT_Done_Memory
_FT_Done_Memory	proc near

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax		; void *
		call	dword ptr ds:__imp__free
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_FT_Done_Memory	endp

; ---------------------------------------------------------------------------
		db 0Ch dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl FT_Stream_Open(int, char *)
		public _FT_Stream_Open
_FT_Stream_Open	proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		cmp	[ebp+arg_0], 0
		jnz	short loc_1C2
		push	offset $SG7177	; "..\\..\\..\\src\\base\\ftsystem.c"
		push	0E7h ; 'ç'
		push	28h ; '('
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 28h
		jmp	loc_364
; ---------------------------------------------------------------------------

loc_1C2:				; CODE XREF: _FT_Stream_Open+10j
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+0Ch], 0
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	[ecx+10h], edx
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+8], 0
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+14h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+18h], 0
		mov	esi, esp
		push	offset $SG7182	; "rb"
		mov	ecx, [ebp+arg_4]
		push	ecx		; char *
		call	dword ptr ds:__imp__fopen
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_24D
		mov	edx, [ebp+arg_4]
		push	edx
		push	offset $SG7184	; "FT_Stream_Open: could not open `%s'\n"
		call	_FT_Message
		add	esp, 8
		push	offset $SG7185	; "..\\..\\..\\src\\base\\ftsystem.c"
		push	0F6h ; 'ö'
		push	1
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 1
		jmp	loc_364
; ---------------------------------------------------------------------------

loc_24D:				; CODE XREF: _FT_Stream_Open+8Aj
		mov	esi, esp
		push	2		; int
		push	0		; __int32
		mov	eax, [ebp+var_4]
		push	eax		; FILE *
		call	dword ptr ds:__imp__fseek
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		push	ecx		; FILE *
		call	dword ptr ds:__imp__ftell
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+arg_0]
		mov	[edx+4], eax
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+4], 0
		jnz	short loc_2DC
		push	offset $SG7187	; "FT_Stream_Open:"
		call	_FT_Message
		add	esp, 4
		mov	ecx, [ebp+arg_4]
		push	ecx
		push	offset $SG7188	; " opened `%s' but zero-sized\n"
		call	_FT_Message
		add	esp, 8
		mov	esi, esp
		mov	edx, [ebp+var_4]
		push	edx		; FILE *
		call	dword ptr ds:__imp__fclose
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	offset $SG7189	; "..\\..\\..\\src\\base\\ftsystem.c"
		push	100h
		push	51h ; 'Q'
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 51h
		jmp	loc_364
; ---------------------------------------------------------------------------

loc_2DC:				; CODE XREF: _FT_Stream_Open+F6j
		mov	esi, esp
		push	0		; int
		push	0		; __int32
		mov	eax, [ebp+var_4]
		push	eax		; FILE *
		call	dword ptr ds:__imp__fseek
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_4]
		mov	[ecx+0Ch], edx
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+14h], offset _ft_ansi_stream_io
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+18h], offset _ft_ansi_stream_close

loc_313:				; CODE XREF: _FT_Stream_Open+19Fj
		mov	edx, 4
		shl	edx, 2
		cmp	dword ptr ds:_ft_trace_levels[edx], 1
		jl	short loc_331
		push	offset $SG7194	; "FT_Stream_Open:"
		call	_FT_Message
		add	esp, 4

loc_331:				; CODE XREF: _FT_Stream_Open+18Ej
		xor	eax, eax
		jnz	short loc_313

loc_335:				; CODE XREF: _FT_Stream_Open+1CCj
		mov	ecx, 4
		shl	ecx, 2
		cmp	dword ptr ds:_ft_trace_levels[ecx], 1
		jl	short loc_35E
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		push	offset $SG7199	; " opened `%s' (%d bytes) successfully\n"
		call	_FT_Message
		add	esp, 0Ch

loc_35E:				; CODE XREF: _FT_Stream_Open+1B0j
		xor	edx, edx
		jnz	short loc_335
		xor	eax, eax

loc_364:				; CODE XREF: _FT_Stream_Open+29j
					; _FT_Stream_Open+B4j ...
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Stream_Open	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ft_alloc(int, size_t)
_ft_alloc	proc near		; DATA XREF: _FT_New_Memory+35o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_4]
		push	ecx		; size_t
		call	dword ptr ds:__imp__malloc
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_ft_alloc	endp

; ---------------------------------------------------------------------------
		db 6 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ft_realloc(int, int, size_t, void	*)
_ft_realloc	proc near		; DATA XREF: _FT_New_Memory+3Fo

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		mov	ecx, [ebp+arg_4]
		mov	[ebp+arg_4], ecx
		mov	esi, esp
		mov	edx, [ebp+arg_8]
		push	edx		; size_t
		mov	eax, [ebp+arg_C]
		push	eax		; void *
		call	dword ptr ds:__imp__realloc
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_ft_realloc	endp

; ---------------------------------------------------------------------------
		db 0Ch dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ft_free(int, void	*)
_ft_free	proc near		; DATA XREF: _FT_New_Memory+49o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_4]
		push	ecx		; void *
		call	dword ptr ds:__imp__free
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_ft_free	endp

; ---------------------------------------------------------------------------
		db 6 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_ansi_stream_close proc near		; DATA XREF: _FT_Stream_Open+178o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		push	ecx		; FILE *
		call	dword ptr ds:__imp__fclose
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+0Ch], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+4], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx], 0
		pop	esi
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_ft_ansi_stream_close endp

; ---------------------------------------------------------------------------
		db 0Ch dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ft_ansi_stream_io(int, __int32, void *, size_t)
_ft_ansi_stream_io proc	near		; DATA XREF: _FT_Stream_Open+16Eo

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		cmp	[ebp+arg_C], 0
		jnz	short loc_488
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [eax+4]
		jbe	short loc_488
		mov	eax, 1
		jmp	short loc_4D8
; ---------------------------------------------------------------------------

loc_488:				; CODE XREF: _ft_ansi_stream_io+10j
					; _ft_ansi_stream_io+1Bj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+0Ch]
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		cmp	edx, [ebp+arg_4]
		jz	short loc_4B8
		mov	esi, esp
		push	0		; int
		mov	eax, [ebp+arg_4]
		push	eax		; __int32
		mov	ecx, [ebp+var_4]
		push	ecx		; FILE *
		call	dword ptr ds:__imp__fseek
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_4B8:				; CODE XREF: _ft_ansi_stream_io+36j
		mov	esi, esp
		mov	edx, [ebp+var_4]
		push	edx		; FILE *
		mov	eax, [ebp+arg_C]
		push	eax		; size_t
		push	1		; size_t
		mov	ecx, [ebp+arg_8]
		push	ecx		; void *
		call	dword ptr ds:__imp__fread
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_4D8:				; CODE XREF: _ft_ansi_stream_io+22j
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_ansi_stream_io endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 4E8h
; COMDAT (pick any)
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 4ECh
; COMDAT (pick any)
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; int __cdecl _fclose(FILE *)
		extrn __imp__fclose:near ; CODE	XREF: _FT_Stream_Open+11Cp
					; _ft_ansi_stream_close+Dp
					; DATA XREF: ...
; FILE *__cdecl	_fopen(const char *, const char	*)
		extrn __imp__fopen:near	; CODE XREF: _FT_Stream_Open+73p
					; DATA XREF: _FT_Stream_Open+73r
; size_t __cdecl _fread(void *,	size_t,	size_t,	FILE *)
		extrn __imp__fread:near	; CODE XREF: _ft_ansi_stream_io+64p
					; DATA XREF: _ft_ansi_stream_io+64r
; int __cdecl _fseek(FILE *, __int32, int)
		extrn __imp__fseek:near	; CODE XREF: _FT_Stream_Open+C3p
					; _FT_Stream_Open+152p	...
; __int32 __cdecl _ftell(FILE *)
		extrn __imp__ftell:near	; CODE XREF: _FT_Stream_Open+D9p
					; DATA XREF: _FT_Stream_Open+D9r
; void __cdecl _free(void *)
		extrn __imp__free:near	; CODE XREF: _FT_Done_Memory+Ap
					; _ft_free+10p
					; DATA XREF: ...
; void *__cdecl	_malloc(size_t)
		extrn __imp__malloc:near ; CODE	XREF: _FT_New_Memory+10p
					; _ft_alloc+10p
					; DATA XREF: ...
; void *__cdecl	_realloc(void *, size_t)
		extrn __imp__realloc:near ; CODE XREF: _ft_realloc+1Ap
					; DATA XREF: _ft_realloc+1Ar
		extrn _FT_Message:near	; CODE XREF: _FT_Stream_Open+95p
					; _FT_Stream_Open+FDp ...
		extrn _FT_Throw:near	; CODE XREF: _FT_Stream_Open+1Ep
					; _FT_Stream_Open+A9p ...
		extrn __RTC_CheckEsp:near ; CODE XREF: _FT_New_Memory+1Bp
					; _FT_New_Memory+59p ...
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn _ft_trace_levels:near ; DATA XREF: _FT_Stream_Open+187r
					; _FT_Stream_Open+1A9r


		end
