;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	D707F6B806E1250F736C2023BCECE5D7
; Input	CRC32 :	EEDB7B3F

; File Name   :	D:\compspace\objfiles\firefox\freehelper\pshinter.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRTD"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
$SG8199		db 'd:\mozilla\modules\freetype2\src\pshinter\pshrec.c',0
					; DATA XREF: _ps_hints_t1reset:loc_21B5o
		align 8
$SG8221		db 'ps_hints_t2mask: called with invalid bitcount %d (instead of %d)',0Ah
					; DATA XREF: _ps_hints_t2mask+81o
		db 0
		align 10h
$SG8244		db 'ps_hints_t2counter: called with invalid bitcount %d (instead of %'
					; DATA XREF: _ps_hints_t2counter+81o
		db 'd)',0Ah,0
		align 4
$SG9506		db 'pshinter',0         ; DATA XREF: .rdata:00005EB8o
		align 4
$SG8659		db 'psh_hint_table_record: invalid hint index %d',0Ah,0
					; DATA XREF: _psh_hint_table_record+43o
		align 4
$SG8674		db 'psh_hint_table_record: too many sorted hints!  BUG!',0Ah,0
					; DATA XREF: _psh_hint_table_record+121o
		align 4
$SG8730		db 'psh_hint_table_init: missing/incorrect hint masks',0Ah,0
					; DATA XREF: _psh_hint_table_init+1A9o
		align 10h
$SG8761		db 'psh_hint_tableactivate_mask: too many active hints',0Ah,0
					; DATA XREF: _psh_hint_table_activate_mask+F6o
$SG7954		db 'ps_mask_table_merge: ignoring invalid indices (%d,%d)',0Ah,0
					; DATA XREF: _ps_mask_table_merge+207o
		align 4
$SG8105		db 'd:\mozilla\modules\freetype2\src\pshinter\pshrec.c',0
					; DATA XREF: _ps_hints_open:loc_1D68o
		align 10h
$SG8110		db 'ps_hints_open: invalid charstring type',0Ah,0
					; DATA XREF: _ps_hints_open+9Bo
$SG8128		db 'ps_hints_stem: invalid dimension (%d) used',0Ah,0
					; DATA XREF: _ps_hints_stem+48o
$SG8144		db 'ps_hints_stem: could not add stem (%d,%d) to hints table',0Ah,0
					; DATA XREF: _ps_hints_stem+11Ao
		align 10h
$SG8150		db 'ps_hints_stem: called with invalid hint type (%d)',0Ah,0
					; DATA XREF: _ps_hints_stem+151o
		align 4
$SG8171		db 'ps_hints_t1stem3: invalid dimension (%d) used',0Ah,0
					; DATA XREF: _ps_hints_t1stem3+5Do
		align 4
$SG8182		db 'ps_hints_t1stem3: called with invalid hint type',0Ah,0
					; DATA XREF: _ps_hints_t1stem3:loc_2098o
		align 4
$SG8183		db 'd:\mozilla\modules\freetype2\src\pshinter\pshrec.c',0
					; DATA XREF: _ps_hints_t1stem3+171o
		align 4
$SG8184		db 'ps_hints_t1stem3: could not add counter stems to table',0Ah,0
					; DATA XREF: _ps_hints_t1stem3:$Fail$22o
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3A4h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_FT_MulFix_i386	proc near		; CODE XREF: _ps_hints_apply+107p
					; _psh_globals_scale_widths+71p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		imul	edx
		mov	ecx, edx
		sar	ecx, 1Fh
		add	ecx, 8000h
		add	eax, ecx
		adc	edx, 0
		shr	eax, 10h
		shl	edx, 10h
		add	eax, edx
		mov	[ebp+var_4], eax
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_MulFix_i386	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_globals_funcs_init	proc near	; CODE XREF: _ps_hinter_init+40p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], offset	_psh_globals_new
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+4], offset _psh_globals_set_scale
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+8], offset _psh_globals_destroy
		pop	ebp
		retn
_psh_globals_funcs_init	endp

; ---------------------------------------------------------------------------
		db 0Eh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_globals_set_scale proc near	; CODE XREF: _ps_hints_apply+1ABp
					; _ps_hints_apply+378p
					; DATA XREF: ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, 0CCh ; 'Ì'
		imul	ecx, eax, 0
		mov	edx, [ebp+arg_0]
		lea	eax, [edx+ecx+4]
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+var_4]
		mov	edx, [ebp+arg_4]
		cmp	edx, [ecx+0C4h]
		jnz	short loc_44D
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_C]
		cmp	ecx, [eax+0C8h]
		jz	short loc_473

loc_44D:				; CODE XREF: _psh_globals_set_scale+29j
		mov	edx, [ebp+var_4]
		mov	eax, [ebp+arg_4]
		mov	[edx+0C4h], eax
		mov	ecx, [ebp+var_4]
		mov	edx, [ebp+arg_C]
		mov	[ecx+0C8h], edx
		push	0
		mov	eax, [ebp+arg_0]
		push	eax
		call	_psh_globals_scale_widths
		add	esp, 8

loc_473:				; CODE XREF: _psh_globals_set_scale+37j
		mov	ecx, 0CCh ; 'Ì'
		shl	ecx, 0
		mov	edx, [ebp+arg_0]
		lea	eax, [edx+ecx+4]
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+var_4]
		mov	edx, [ebp+arg_8]
		cmp	edx, [ecx+0C4h]
		jnz	short loc_4A1
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_10]
		cmp	ecx, [eax+0C8h]
		jz	short loc_4E0

loc_4A1:				; CODE XREF: _psh_globals_set_scale+7Dj
		mov	edx, [ebp+var_4]
		mov	eax, [ebp+arg_8]
		mov	[edx+0C4h], eax
		mov	ecx, [ebp+var_4]
		mov	edx, [ebp+arg_10]
		mov	[ecx+0C8h], edx
		push	1
		mov	eax, [ebp+arg_0]
		push	eax
		call	_psh_globals_scale_widths
		add	esp, 8
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_0]
		add	eax, 19Ch
		push	eax
		call	_psh_blues_scale_zones
		add	esp, 0Ch

loc_4E0:				; CODE XREF: _psh_globals_set_scale+8Bj
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_psh_globals_set_scale endp

; ---------------------------------------------------------------------------
		db 6 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_blues_snap_stem proc near		; CODE XREF: _psh_hint_align+14Fp

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0
		mov	ecx, [ebp+arg_0]
		movzx	edx, byte ptr [ecx+820h]
		mov	[ebp+var_14], edx
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_4]
		add	eax, 4
		mov	[ebp+var_10], eax
		jmp	short loc_54F
; ---------------------------------------------------------------------------

loc_53D:				; CODE XREF: _psh_blues_snap_stem:loc_5B6j
		mov	ecx, [ebp+var_8]
		sub	ecx, 1
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+var_10]
		add	edx, 20h ; ' '
		mov	[ebp+var_10], edx

loc_54F:				; CODE XREF: _psh_blues_snap_stem+47j
		cmp	[ebp+var_8], 0
		jbe	short loc_5B8
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+arg_4]
		sub	ecx, [eax+0Ch]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+81Ch]
		neg	eax
		cmp	[ebp+var_C], eax
		jge	short loc_573
		jmp	short loc_5B8
; ---------------------------------------------------------------------------

loc_573:				; CODE XREF: _psh_blues_snap_stem+7Bj
		mov	ecx, [ebp+var_10]
		mov	edx, [ecx+8]
		mov	eax, [ebp+arg_0]
		add	edx, [eax+81Ch]
		cmp	[ebp+arg_4], edx
		jg	short loc_5B6
		cmp	[ebp+var_14], 0
		jnz	short loc_59B
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_C]
		cmp	edx, [ecx+818h]
		jg	short loc_5B4

loc_59B:				; CODE XREF: _psh_blues_snap_stem+97j
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		or	ecx, 1
		mov	edx, [ebp+arg_C]
		mov	[edx], ecx
		mov	eax, [ebp+arg_C]
		mov	ecx, [ebp+var_10]
		mov	edx, [ecx+10h]
		mov	[eax+4], edx

loc_5B4:				; CODE XREF: _psh_blues_snap_stem+A5j
		jmp	short loc_5B8
; ---------------------------------------------------------------------------

loc_5B6:				; CODE XREF: _psh_blues_snap_stem+91j
		jmp	short loc_53D
; ---------------------------------------------------------------------------

loc_5B8:				; CODE XREF: _psh_blues_snap_stem+5Fj
					; _psh_blues_snap_stem+7Dj ...
		mov	eax, [ebp+arg_0]
		add	eax, 204h
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_8]
		shl	eax, 5
		mov	ecx, [ebp+var_4]
		lea	edx, [ecx+eax-1Ch]
		mov	[ebp+var_10], edx
		jmp	short loc_5EF
; ---------------------------------------------------------------------------

loc_5DD:				; CODE XREF: _psh_blues_snap_stem:loc_656j
		mov	eax, [ebp+var_8]
		sub	eax, 1
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+var_10]
		sub	ecx, 20h ; ' '
		mov	[ebp+var_10], ecx

loc_5EF:				; CODE XREF: _psh_blues_snap_stem+E7j
		cmp	[ebp+var_8], 0
		jbe	short loc_658
		mov	edx, [ebp+var_10]
		mov	eax, [edx+8]
		sub	eax, [ebp+arg_8]
		mov	[ebp+var_C], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+81Ch]
		neg	edx
		cmp	[ebp+var_C], edx
		jge	short loc_613
		jmp	short loc_658
; ---------------------------------------------------------------------------

loc_613:				; CODE XREF: _psh_blues_snap_stem+11Bj
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+0Ch]
		sub	edx, [ecx+81Ch]
		cmp	[ebp+arg_8], edx
		jl	short loc_656
		cmp	[ebp+var_14], 0
		jnz	short loc_63B
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_C]
		cmp	ecx, [eax+818h]
		jge	short loc_654

loc_63B:				; CODE XREF: _psh_blues_snap_stem+137j
		mov	edx, [ebp+arg_C]
		mov	eax, [edx]
		or	eax, 2
		mov	ecx, [ebp+arg_C]
		mov	[ecx], eax
		mov	edx, [ebp+arg_C]
		mov	eax, [ebp+var_10]
		mov	ecx, [eax+10h]
		mov	[edx+8], ecx

loc_654:				; CODE XREF: _psh_blues_snap_stem+145j
		jmp	short loc_658
; ---------------------------------------------------------------------------

loc_656:				; CODE XREF: _psh_blues_snap_stem+131j
		jmp	short loc_5DD
; ---------------------------------------------------------------------------

loc_658:				; CODE XREF: _psh_blues_snap_stem+FFj
					; _psh_blues_snap_stem+11Dj ...
		mov	esp, ebp
		pop	ebp
		retn
_psh_blues_snap_stem endp

; ---------------------------------------------------------------------------
		db 8 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ps_hints_init(void *, int)
_ps_hints_init	proc near		; CODE XREF: _ps_hinter_init+31p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	58h ; 'X'       ; size_t
		push	0		; int
		mov	eax, [ebp+arg_0]
		push	eax		; void *
		call	_memset
		add	esp, 0Ch
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	[ecx], edx
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_ps_hints_init	endp

; ---------------------------------------------------------------------------
		db 0Ch dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_hints_done	proc near		; CODE XREF: _ps_hinter_done+21p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+var_4]
		push	edx
		mov	eax, 24h ; '$'
		imul	ecx, eax, 0
		mov	edx, [ebp+arg_0]
		lea	eax, [edx+ecx+10h]
		push	eax
		call	_ps_dimension_done
		add	esp, 8
		mov	ecx, [ebp+var_4]
		push	ecx
		mov	edx, 24h ; '$'
		shl	edx, 0
		mov	eax, [ebp+arg_0]
		lea	ecx, [eax+edx+10h]
		push	ecx
		call	_ps_dimension_done
		add	esp, 8
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+4], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_hints_done	endp

; ---------------------------------------------------------------------------
		db 4 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl t1_hints_funcs_init(void *)
_t1_hints_funcs_init proc near		; CODE XREF: _ps_hinter_init+4Fp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	1Ch		; size_t
		push	0		; int
		mov	eax, [ebp+arg_0]
		push	eax		; void *
		call	_memset
		add	esp, 0Ch
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+4], offset _t1_hints_open
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+8], offset _ps_hints_close
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+0Ch], offset _t1_hints_stem
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+10h], offset _ps_hints_t1stem3
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+14h], offset _ps_hints_t1reset
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+18h], offset _ps_hints_apply
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_t1_hints_funcs_init endp

; ---------------------------------------------------------------------------
		db 8 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl t2_hints_funcs_init(void *)
_t2_hints_funcs_init proc near		; CODE XREF: _ps_hinter_init+69p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	1Ch		; size_t
		push	0		; int
		mov	eax, [ebp+arg_0]
		push	eax		; void *
		call	_memset
		add	esp, 0Ch
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+4], offset _t2_hints_open
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+8], offset _ps_hints_close
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+0Ch], offset _t2_hints_stems
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+10h], offset _ps_hints_t2mask
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+14h], offset _ps_hints_t2counter
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+18h], offset _ps_hints_apply
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_t2_hints_funcs_init endp

; ---------------------------------------------------------------------------
		db 8 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ps_hints_apply
_ps_hints_apply	proc near		; DATA XREF: _t1_hints_funcs_init+48o
					; _t2_hints_funcs_init+48o

var_BC		= byte ptr -0BCh
var_BB		= byte ptr -0BBh
var_BA		= byte ptr -0BAh
var_B9		= byte ptr -0B9h
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_88		= byte ptr -88h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0BCh
		push	edi
		lea	edi, [ebp+var_BC]
		mov	ecx, 2Fh ; '/'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_88]
		mov	[ebp+var_90], eax
		mov	ecx, [ebp+arg_4]
		movsx	edx, word ptr [ecx+2]
		test	edx, edx
		jz	short loc_80B
		mov	eax, [ebp+arg_4]
		movsx	ecx, word ptr [eax]
		test	ecx, ecx
		jnz	short loc_812

loc_80B:				; CODE XREF: _ps_hints_apply+3Bj
		xor	eax, eax
		jmp	loc_B5E
; ---------------------------------------------------------------------------

loc_812:				; CODE XREF: _ps_hints_apply+45j
		mov	edx, [ebp+arg_8]
		push	edx		; int
		mov	eax, [ebp+arg_0]
		push	eax		; int
		mov	ecx, [ebp+arg_4]
		push	ecx		; int
		mov	edx, [ebp+var_90]
		push	edx		; void *
		call	_psh_glyph_init
		add	esp, 10h
		mov	[ebp+var_94], eax
		cmp	[ebp+var_94], 0
		jz	short loc_841
		jmp	$Exit$22
; ---------------------------------------------------------------------------

loc_841:				; CODE XREF: _ps_hints_apply+76j
		mov	eax, [ebp+var_90]
		mov	ecx, [eax+18h]
		mov	edx, 0CCh ; 'Ì'
		imul	eax, edx, 0
		lea	ecx, [ecx+eax+4]
		mov	[ebp+var_9C], ecx
		mov	edx, [ebp+var_90]
		mov	eax, [edx+18h]
		mov	ecx, 0CCh ; 'Ì'
		shl	ecx, 0
		lea	edx, [eax+ecx+4]
		mov	[ebp+var_A0], edx
		mov	eax, [ebp+var_9C]
		mov	ecx, [eax+0C4h]
		mov	[ebp+var_A4], ecx
		mov	edx, [ebp+var_A0]
		mov	eax, [edx+0C4h]
		mov	[ebp+var_A8], eax
		mov	ecx, [ebp+var_A4]
		mov	[ebp+var_AC], ecx
		mov	edx, [ebp+var_A8]
		mov	[ebp+var_B0], edx
		mov	[ebp+var_B9], 0
		mov	eax, [ebp+var_A8]
		push	eax
		mov	ecx, [ebp+arg_8]
		mov	edx, [ecx+1A0h]
		push	edx
		call	_FT_MulFix_i386
		add	esp, 8
		mov	[ebp+var_B4], eax
		mov	eax, [ebp+var_B4]
		add	eax, 20h ; ' '
		and	eax, 0FFFFFFC0h
		mov	[ebp+var_B8], eax
		jz	loc_977
		mov	ecx, [ebp+var_B4]
		cmp	ecx, [ebp+var_B8]
		jz	short loc_977
		mov	[ebp+var_B9], 1
		mov	edx, [ebp+var_B4]
		push	edx
		mov	eax, [ebp+var_B8]
		push	eax
		mov	ecx, [ebp+var_A8]
		push	ecx
		call	_FT_MulDiv
		add	esp, 0Ch
		mov	[ebp+var_A8], eax
		mov	edx, [ebp+var_B8]
		cmp	edx, [ebp+var_B4]
		jge	short loc_953
		mov	eax, [ebp+var_A4]
		cdq
		mov	ecx, 32h ; '2'
		idiv	ecx
		mov	edx, [ebp+var_A4]
		sub	edx, eax
		mov	[ebp+var_A4], edx

loc_953:				; CODE XREF: _ps_hints_apply+171j
		push	0
		push	0
		mov	eax, [ebp+var_A8]
		push	eax
		mov	ecx, [ebp+var_A4]
		push	ecx
		mov	edx, [ebp+var_90]
		mov	eax, [edx+18h]
		push	eax
		call	_psh_globals_set_scale
		add	esp, 14h

loc_977:				; CODE XREF: _ps_hints_apply+127j
					; _ps_hints_apply+139j
		mov	ecx, [ebp+var_90]
		mov	byte ptr [ecx+78h], 1
		mov	edx, [ebp+var_90]
		mov	byte ptr [edx+79h], 1
		cmp	[ebp+arg_C], 2
		jz	short loc_9A0
		cmp	[ebp+arg_C], 3
		jz	short loc_9A0
		mov	[ebp+var_BA], 0
		jmp	short loc_9A7
; ---------------------------------------------------------------------------

loc_9A0:				; CODE XREF: _ps_hints_apply+1CBj
					; _ps_hints_apply+1D1j
		mov	[ebp+var_BA], 1

loc_9A7:				; CODE XREF: _ps_hints_apply+1DAj
		mov	eax, [ebp+var_90]
		mov	cl, [ebp+var_BA]
		mov	[eax+7Ah], cl
		cmp	[ebp+arg_C], 2
		jz	short loc_9CB
		cmp	[ebp+arg_C], 4
		jz	short loc_9CB
		mov	[ebp+var_BB], 0
		jmp	short loc_9D2
; ---------------------------------------------------------------------------

loc_9CB:				; CODE XREF: _ps_hints_apply+1F6j
					; _ps_hints_apply+1FCj
		mov	[ebp+var_BB], 1

loc_9D2:				; CODE XREF: _ps_hints_apply+205j
		mov	edx, [ebp+var_90]
		mov	al, [ebp+var_BB]
		mov	[edx+7Bh], al
		cmp	[ebp+arg_C], 1
		jz	short loc_9F0
		mov	[ebp+var_BC], 1
		jmp	short loc_9F7
; ---------------------------------------------------------------------------

loc_9F0:				; CODE XREF: _ps_hints_apply+221j
		mov	[ebp+var_BC], 0

loc_9F7:				; CODE XREF: _ps_hints_apply+22Aj
		mov	ecx, [ebp+var_90]
		mov	dl, [ebp+var_BC]
		mov	[ecx+7Ch], dl
		mov	[ebp+var_98], 0
		jmp	short loc_A21
; ---------------------------------------------------------------------------

loc_A12:				; CODE XREF: _ps_hints_apply:loc_B44j
		mov	eax, [ebp+var_98]
		add	eax, 1
		mov	[ebp+var_98], eax

loc_A21:				; CODE XREF: _ps_hints_apply+24Cj
		cmp	[ebp+var_98], 2
		jge	$Exit$22
		mov	ecx, [ebp+var_98]
		push	ecx
		mov	edx, [ebp+var_90]
		push	edx
		call	_psh_glyph_load_points
		add	esp, 8
		mov	eax, [ebp+var_90]
		push	eax
		call	_psh_glyph_compute_extrema
		add	esp, 4
		mov	ecx, [ebp+var_90]
		push	ecx
		mov	edx, [ebp+var_98]
		push	edx
		mov	eax, [ebp+var_90]
		mov	ecx, [eax+18h]
		push	ecx
		imul	edx, [ebp+var_98], 28h
		mov	eax, [ebp+var_90]
		lea	ecx, [eax+edx+1Ch]
		push	ecx
		call	_psh_hint_table_align_hints
		add	esp, 10h
		mov	edx, [ebp+var_98]
		push	edx
		mov	eax, [ebp+var_90]
		push	eax
		call	_psh_glyph_find_strong_points
		add	esp, 8
		cmp	[ebp+var_98], 1
		jnz	short loc_ABD
		mov	ecx, [ebp+var_90]
		push	ecx
		mov	edx, [ebp+arg_8]
		add	edx, 19Ch
		push	edx
		call	_psh_glyph_find_blue_points
		add	esp, 8

loc_ABD:				; CODE XREF: _ps_hints_apply+2DEj
		mov	eax, [ebp+var_98]
		push	eax
		mov	ecx, [ebp+var_90]
		push	ecx
		call	_psh_glyph_interpolate_strong_points
		add	esp, 8
		mov	edx, [ebp+var_98]
		push	edx
		mov	eax, [ebp+var_90]
		push	eax
		call	_psh_glyph_interpolate_normal_points
		add	esp, 8
		mov	ecx, [ebp+var_98]
		push	ecx
		mov	edx, [ebp+var_90]
		push	edx
		call	_psh_glyph_interpolate_other_points
		add	esp, 8
		mov	eax, [ebp+var_98]
		push	eax
		mov	ecx, [ebp+var_90]
		push	ecx
		call	_psh_glyph_save_points
		add	esp, 8
		movzx	edx, [ebp+var_B9]
		test	edx, edx
		jz	short loc_B44
		push	0
		push	0
		mov	eax, [ebp+var_B0]
		push	eax
		mov	ecx, [ebp+var_AC]
		push	ecx
		mov	edx, [ebp+var_90]
		mov	eax, [edx+18h]
		push	eax
		call	_psh_globals_set_scale
		add	esp, 14h

loc_B44:				; CODE XREF: _ps_hints_apply+35Aj
		jmp	loc_A12
; ---------------------------------------------------------------------------

$Exit$22:				; CODE XREF: _ps_hints_apply+78j
					; _ps_hints_apply+264j
		mov	ecx, [ebp+var_90]
		push	ecx
		call	_psh_glyph_done
		add	esp, 4
		mov	eax, [ebp+var_94]

loc_B5E:				; CODE XREF: _ps_hints_apply+49j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN21
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4
		add	esp, 0BCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_hints_apply	endp

; ---------------------------------------------------------------------------
		align 4
$LN21		dd 1			; DATA XREF: _ps_hints_apply+39Eo
		dd offset $LN20
$LN20		dd 0FFFFFF78h, 80h	; DATA XREF: .text$mn:00000B90o
		dd offset $LN19		; "glyphrec"
$LN19		db 'glyphrec',0         ; DATA XREF: .text$mn:00000B9Co
		db 0Bh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_hint_table_done proc near		; CODE XREF: _ps_dimension_done+31p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp

loc_BB7:				; CODE XREF: _ps_hint_table_done+22j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		call	_ft_mem_free
		add	esp, 8
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+8], 0
		xor	ecx, ecx
		jnz	short loc_BB7
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+4], 0
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_ps_hint_table_done endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_hint_table_ensure proc near		; CODE XREF: _ps_hint_table_alloc+51p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_4]
		mov	[ebp+var_8], edx
		mov	[ebp+var_10], 0
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+var_4]
		jbe	short loc_C6E
		mov	ecx, [ebp+var_8]
		add	ecx, 7
		and	ecx, 0FFFFFFF8h
		mov	[ebp+var_8], ecx
		lea	edx, [ebp+var_10]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		push	0Ch
		mov	ecx, [ebp+arg_8]
		push	ecx
		call	_ft_mem_realloc
		add	esp, 18h
		mov	edx, [ebp+arg_0]
		mov	[edx+8], eax
		cmp	[ebp+var_10], 0
		jnz	short loc_C6E
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		mov	[eax+4], ecx

loc_C6E:				; CODE XREF: _ps_hint_table_ensure+36j
					; _ps_hint_table_ensure+6Fj
		mov	eax, [ebp+var_10]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_hint_table_ensure endp

; ---------------------------------------------------------------------------
$LN7		dd 1			; DATA XREF: _ps_hint_table_ensure+81o
		dd offset $LN6
$LN6		dd 0FFFFFFF0h, 4	; DATA XREF: .text$mn:00000C94o
		dd offset $LN5		; "error"
$LN5		db 'error',0            ; DATA XREF: .text$mn:00000CA0o
		db 0Ah dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_hint_table_alloc proc near		; CODE XREF: _ps_dimension_add_t1stem+C2p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], 0
		mov	[ebp+var_C], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+var_8]
		add	edx, 1
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		cmp	ecx, [eax+4]
		jb	short loc_D18
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ps_hint_table_ensure
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_D18
		jmp	short $Exit$5
; ---------------------------------------------------------------------------

loc_D18:				; CODE XREF: _ps_hint_table_alloc+43j
					; _ps_hint_table_alloc+60j
		imul	edx, [ebp+var_8], 0Ch
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		lea	edx, [ecx+edx-0Ch]
		mov	[ebp+var_C], edx
		mov	eax, [ebp+var_C]
		mov	dword ptr [eax], 0
		mov	ecx, [ebp+var_C]
		mov	dword ptr [ecx+4], 0
		mov	edx, [ebp+var_C]
		mov	dword ptr [edx+8], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		mov	[eax], ecx

$Exit$5:				; CODE XREF: _ps_hint_table_alloc+62j
		mov	edx, [ebp+arg_8]
		mov	eax, [ebp+var_C]
		mov	[edx], eax
		mov	eax, [ebp+var_4]
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_hint_table_alloc endp

; ---------------------------------------------------------------------------
		db 0Dh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_mask_done	proc near		; CODE XREF: _ps_mask_table_done+48p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp

loc_D77:				; CODE XREF: _ps_mask_done+22j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		call	_ft_mem_free
		add	esp, 8
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+8], 0
		xor	ecx, ecx
		jnz	short loc_D77
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+4], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+0Ch], 0
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_ps_mask_done	endp

; ---------------------------------------------------------------------------
		db 6 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_mask_ensure	proc near		; CODE XREF: _ps_mask_set_bit+3Cp
					; _ps_mask_table_set_bits+54p ...

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		add	ecx, 7
		shr	ecx, 3
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_4]
		add	edx, 7
		shr	edx, 3
		mov	[ebp+var_8], edx
		mov	[ebp+var_10], 0
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+var_4]
		jbe	short loc_E4D
		mov	ecx, [ebp+var_8]
		add	ecx, 7
		and	ecx, 0FFFFFFF8h
		mov	[ebp+var_8], ecx
		lea	edx, [ebp+var_10]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		push	1
		mov	ecx, [ebp+arg_8]
		push	ecx
		call	_ft_mem_realloc
		add	esp, 18h
		mov	edx, [ebp+arg_0]
		mov	[edx+8], eax
		cmp	[ebp+var_10], 0
		jnz	short loc_E4D
		mov	eax, [ebp+var_8]
		shl	eax, 3
		mov	ecx, [ebp+arg_0]
		mov	[ecx+4], eax

loc_E4D:				; CODE XREF: _ps_mask_ensure+42j
					; _ps_mask_ensure+7Bj
		mov	eax, [ebp+var_10]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7_0
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_mask_ensure	endp

; ---------------------------------------------------------------------------
		align 10h
$LN7_0		dd 1			; DATA XREF: _ps_mask_ensure+90o
		dd offset $LN6_0
$LN6_0		dd 0FFFFFFF0h, 4	; DATA XREF: .text$mn:00000E74o
		dd offset $LN5_0	; "error"
$LN5_0		db 'error',0            ; DATA XREF: .text$mn:00000E80o
		db 0Ah dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_mask_test_bit proc near		; CODE XREF: _ps_dimension_add_counter+55p
					; _ps_dimension_add_counter+69p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [eax]
		jb	short loc_EA5
		xor	eax, eax
		jmp	short loc_EC4
; ---------------------------------------------------------------------------

loc_EA5:				; CODE XREF: _ps_mask_test_bit+Bj
		mov	edx, [ebp+arg_4]
		sar	edx, 3
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		movzx	eax, byte ptr [ecx+edx]
		mov	ecx, [ebp+arg_4]
		and	ecx, 7
		mov	edx, 80h ; ''
		sar	edx, cl
		and	eax, edx

loc_EC4:				; CODE XREF: _ps_mask_test_bit+Fj
		pop	ebp
		retn
_ps_mask_test_bit endp

; ---------------------------------------------------------------------------
		db 0Eh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_mask_clear_bit proc	near		; CODE XREF: _ps_mask_table_merge+DFp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [eax]
		jb	short loc_EEB
		jmp	short loc_F28
; ---------------------------------------------------------------------------

loc_EEB:				; CODE XREF: _ps_mask_clear_bit+13j
		mov	edx, [ebp+arg_4]
		sar	edx, 3
		mov	eax, [ebp+arg_0]
		add	edx, [eax+8]
		mov	[ebp+var_4], edx
		mov	ecx, 1
		imul	edx, ecx, 0
		mov	eax, [ebp+var_4]
		movzx	edx, byte ptr [eax+edx]
		mov	ecx, [ebp+arg_4]
		and	ecx, 7
		mov	eax, 80h ; ''
		sar	eax, cl
		not	eax
		and	edx, eax
		mov	ecx, 1
		imul	eax, ecx, 0
		mov	ecx, [ebp+var_4]
		mov	[ecx+eax], dl

loc_F28:				; CODE XREF: _ps_mask_clear_bit+15j
		mov	esp, ebp
		pop	ebp
		retn
_ps_mask_clear_bit endp

; ---------------------------------------------------------------------------
		db 8 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_mask_set_bit proc near		; CODE XREF: _ps_dimension_add_t1stem+11Dp
					; _ps_dimension_add_counter+C1p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], 0
		cmp	[ebp+arg_4], 0
		jge	short loc_F57
		jmp	short $Exit$6
; ---------------------------------------------------------------------------

loc_F57:				; CODE XREF: _ps_mask_set_bit+1Fj
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [eax]
		jb	short loc_F8E
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		add	eax, 1
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ps_mask_ensure
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_F83
		jmp	short $Exit$6
; ---------------------------------------------------------------------------

loc_F83:				; CODE XREF: _ps_mask_set_bit+4Bj
		mov	edx, [ebp+arg_4]
		add	edx, 1
		mov	eax, [ebp+arg_0]
		mov	[eax], edx

loc_F8E:				; CODE XREF: _ps_mask_set_bit+2Bj
		mov	ecx, [ebp+arg_4]
		sar	ecx, 3
		mov	edx, [ebp+arg_0]
		add	ecx, [edx+8]
		mov	[ebp+var_8], ecx
		mov	eax, 1
		imul	ecx, eax, 0
		mov	edx, [ebp+var_8]
		movzx	eax, byte ptr [edx+ecx]
		mov	ecx, [ebp+arg_4]
		and	ecx, 7
		mov	edx, 80h ; ''
		sar	edx, cl
		or	eax, edx
		mov	ecx, 1
		imul	edx, ecx, 0
		mov	ecx, [ebp+var_8]
		mov	[ecx+edx], al

$Exit$6:				; CODE XREF: _ps_mask_set_bit+21j
					; _ps_mask_set_bit+4Dj
		mov	eax, [ebp+var_4]
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_mask_set_bit endp

; ---------------------------------------------------------------------------
		db 0Ah dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_mask_table_done proc near		; CODE XREF: _ps_dimension_done+Ep
					; _ps_dimension_done+21p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[ebp+var_8], eax
		jmp	short loc_101E
; ---------------------------------------------------------------------------

loc_100C:				; CODE XREF: _ps_mask_table_done+50j
		mov	ecx, [ebp+var_4]
		sub	ecx, 1
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+var_8]
		add	edx, 10h
		mov	[ebp+var_8], edx

loc_101E:				; CODE XREF: _ps_mask_table_done+26j
		cmp	[ebp+var_4], 0
		jbe	short loc_1036
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_8]
		push	ecx
		call	_ps_mask_done
		add	esp, 8
		jmp	short loc_100C
; ---------------------------------------------------------------------------

loc_1036:				; CODE XREF: _ps_mask_table_done+3Ej
					; _ps_mask_table_done+71j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		call	_ft_mem_free
		add	esp, 8
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+8], 0
		xor	eax, eax
		jnz	short loc_1036
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx], 0
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+4], 0
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_mask_table_done endp

; ---------------------------------------------------------------------------
		db 0Ch dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_mask_table_ensure proc near		; CODE XREF: _ps_mask_table_alloc+51p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_4]
		mov	[ebp+var_8], edx
		mov	[ebp+var_10], 0
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+var_4]
		jbe	short loc_10FE
		mov	ecx, [ebp+var_8]
		add	ecx, 7
		and	ecx, 0FFFFFFF8h
		mov	[ebp+var_8], ecx
		lea	edx, [ebp+var_10]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		push	10h
		mov	ecx, [ebp+arg_8]
		push	ecx
		call	_ft_mem_realloc
		add	esp, 18h
		mov	edx, [ebp+arg_0]
		mov	[edx+8], eax
		cmp	[ebp+var_10], 0
		jnz	short loc_10FE
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		mov	[eax+4], ecx

loc_10FE:				; CODE XREF: _ps_mask_table_ensure+36j
					; _ps_mask_table_ensure+6Fj
		mov	eax, [ebp+var_10]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7_1
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_mask_table_ensure endp

; ---------------------------------------------------------------------------
$LN7_1		dd 1			; DATA XREF: _ps_mask_table_ensure+81o
		dd offset $LN6_1
$LN6_1		dd 0FFFFFFF0h, 4	; DATA XREF: .text$mn:00001124o
		dd offset $LN5_1	; "error"
$LN5_1		db 'error',0            ; DATA XREF: .text$mn:00001130o
		db 0Ah dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_mask_table_alloc proc near		; CODE XREF: _ps_mask_table_last+3Bp
					; _ps_dimension_reset_mask+3Ap	...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_8], 0
		mov	[ebp+var_C], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+var_4]
		add	edx, 1
		mov	[ebp+var_4], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_4]
		cmp	ecx, [eax+4]
		jbe	short loc_11A8
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ps_mask_table_ensure
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_11A8
		jmp	short $Exit$5_0
; ---------------------------------------------------------------------------

loc_11A8:				; CODE XREF: _ps_mask_table_alloc+43j
					; _ps_mask_table_alloc+60j
		mov	edx, [ebp+var_4]
		shl	edx, 4
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		lea	edx, [ecx+edx-10h]
		mov	[ebp+var_C], edx
		mov	eax, [ebp+var_C]
		mov	dword ptr [eax], 0
		mov	ecx, [ebp+var_C]
		mov	dword ptr [ecx+0Ch], 0
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_4]
		mov	[edx], eax

$Exit$5_0:				; CODE XREF: _ps_mask_table_alloc+62j
		mov	ecx, [ebp+arg_8]
		mov	edx, [ebp+var_C]
		mov	[ecx], edx
		mov	eax, [ebp+var_8]
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_mask_table_alloc endp

; ---------------------------------------------------------------------------
		db 5 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_mask_table_last proc near		; CODE XREF: _ps_mask_table_set_bits+32p
					; _ps_dimension_add_t1stem+FEp

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		cmp	[ebp+var_8], 0
		jnz	short loc_1244
		lea	edx, [ebp+var_10]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ps_mask_table_alloc
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_1242
		jmp	short $Exit$9
; ---------------------------------------------------------------------------

loc_1242:				; CODE XREF: _ps_mask_table_last+4Aj
		jmp	short $Exit$9
; ---------------------------------------------------------------------------

loc_1244:				; CODE XREF: _ps_mask_table_last+2Dj
		mov	edx, [ebp+var_8]
		shl	edx, 4
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		lea	edx, [ecx+edx-10h]
		mov	[ebp+var_10], edx

$Exit$9:				; CODE XREF: _ps_mask_table_last+4Cj
					; _ps_mask_table_last:loc_1242j
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+var_10]
		mov	[eax], ecx
		mov	eax, [ebp+var_4]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN8
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_mask_table_last endp

; ---------------------------------------------------------------------------
		align 4
$LN8		dd 1			; DATA XREF: _ps_mask_table_last+72o
		dd offset $LN7_2
$LN7_2		dd 0FFFFFFF0h, 4	; DATA XREF: .text$mn:00001288o
		dd offset $LN6_2	; "mask"
$LN6_2		db 'mask',0             ; DATA XREF: .text$mn:00001294o
		db 7 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_mask_table_set_bits	proc near	; CODE XREF: _ps_dimension_set_mask_bits+41p

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_24], eax
		mov	[ebp+var_20], eax
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ps_mask_table_last
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_12EC
		jmp	$Exit$14
; ---------------------------------------------------------------------------

loc_12EC:				; CODE XREF: _ps_mask_table_set_bits+41j
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+var_C]
		push	edx
		call	_ps_mask_ensure
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_130E
		jmp	$Exit$14
; ---------------------------------------------------------------------------

loc_130E:				; CODE XREF: _ps_mask_table_set_bits+63j
		mov	eax, [ebp+var_C]
		mov	ecx, [ebp+arg_C]
		mov	[eax], ecx
		mov	edx, [ebp+arg_8]
		shr	edx, 3
		add	edx, [ebp+arg_4]
		mov	[ebp+var_14], edx
		mov	ecx, [ebp+arg_8]
		and	ecx, 7
		mov	eax, 80h ; ''
		sar	eax, cl
		mov	[ebp+var_18], eax
		mov	ecx, [ebp+var_C]
		mov	edx, [ecx+8]
		mov	[ebp+var_1C], edx
		mov	[ebp+var_20], 80h ; ''
		jmp	short loc_134D
; ---------------------------------------------------------------------------

loc_1344:				; CODE XREF: _ps_mask_table_set_bits:loc_13D2j
		mov	eax, [ebp+arg_C]
		sub	eax, 1
		mov	[ebp+arg_C], eax

loc_134D:				; CODE XREF: _ps_mask_table_set_bits+9Ej
		cmp	[ebp+arg_C], 0
		jbe	$Exit$14
		mov	ecx, 1
		imul	edx, ecx, 0
		mov	eax, [ebp+var_1C]
		movzx	ecx, byte ptr [eax+edx]
		mov	edx, [ebp+var_20]
		not	edx
		and	ecx, edx
		mov	[ebp+var_24], ecx
		mov	eax, 1
		imul	ecx, eax, 0
		mov	edx, [ebp+var_14]
		movzx	eax, byte ptr [edx+ecx]
		and	eax, [ebp+var_18]
		jz	short loc_138D
		mov	ecx, [ebp+var_24]
		or	ecx, [ebp+var_20]
		mov	[ebp+var_24], ecx

loc_138D:				; CODE XREF: _ps_mask_table_set_bits+DEj
		mov	edx, 1
		imul	eax, edx, 0
		mov	ecx, [ebp+var_1C]
		mov	dl, byte ptr [ebp+var_24]
		mov	[ecx+eax], dl
		mov	eax, [ebp+var_18]
		sar	eax, 1
		mov	[ebp+var_18], eax
		jnz	short loc_13B8
		mov	ecx, [ebp+var_14]
		add	ecx, 1
		mov	[ebp+var_14], ecx
		mov	[ebp+var_18], 80h ; ''

loc_13B8:				; CODE XREF: _ps_mask_table_set_bits+102j
		mov	edx, [ebp+var_20]
		sar	edx, 1
		mov	[ebp+var_20], edx
		jnz	short loc_13D2
		mov	eax, [ebp+var_1C]
		add	eax, 1
		mov	[ebp+var_1C], eax
		mov	[ebp+var_20], 80h ; ''

loc_13D2:				; CODE XREF: _ps_mask_table_set_bits+11Cj
		jmp	loc_1344
; ---------------------------------------------------------------------------

$Exit$14:				; CODE XREF: _ps_mask_table_set_bits+43j
					; _ps_mask_table_set_bits+65j ...
		mov	eax, [ebp+var_4]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN13
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		add	esp, 24h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_mask_table_set_bits	endp

; ---------------------------------------------------------------------------
		align 4
$LN13		dd 1			; DATA XREF: _ps_mask_table_set_bits+13Ao
		dd offset $LN12
$LN12		dd 0FFFFFFF4h, 4	; DATA XREF: .text$mn:00001400o
		dd offset $LN11		; "mask"
$LN11		db 'mask',0             ; DATA XREF: .text$mn:0000140Co
		db 0Fh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_mask_table_test_intersect proc near	; CODE XREF: _ps_mask_table_merge_all+64p

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_20], eax
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_4]
		shl	eax, 4
		mov	ecx, [ebp+arg_0]
		add	eax, [ecx+8]
		mov	[ebp+var_4], eax
		mov	edx, [ebp+arg_8]
		shl	edx, 4
		mov	eax, [ebp+arg_0]
		add	edx, [eax+8]
		mov	[ebp+var_8], edx
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+8]
		mov	[ebp+var_C], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+8]
		mov	[ebp+var_10], ecx
		mov	edx, [ebp+var_4]
		mov	eax, [edx]
		mov	[ebp+var_14], eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	[ebp+var_18], edx
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_18]
		jnb	short loc_1497
		mov	ecx, [ebp+var_14]
		mov	[ebp+var_20], ecx
		jmp	short loc_149D
; ---------------------------------------------------------------------------

loc_1497:				; CODE XREF: _ps_mask_table_test_intersect+69j
		mov	edx, [ebp+var_18]
		mov	[ebp+var_20], edx

loc_149D:				; CODE XREF: _ps_mask_table_test_intersect+71j
		mov	eax, [ebp+var_20]
		mov	[ebp+var_1C], eax
		jmp	short loc_14AE
; ---------------------------------------------------------------------------

loc_14A5:				; CODE XREF: _ps_mask_table_test_intersect+CBj
		mov	ecx, [ebp+var_1C]
		sub	ecx, 8
		mov	[ebp+var_1C], ecx

loc_14AE:				; CODE XREF: _ps_mask_table_test_intersect+7Fj
		cmp	[ebp+var_1C], 8
		jb	short loc_14F1
		mov	edx, 1
		imul	eax, edx, 0
		mov	ecx, [ebp+var_C]
		movzx	edx, byte ptr [ecx+eax]
		mov	eax, 1
		imul	ecx, eax, 0
		mov	eax, [ebp+var_10]
		movzx	ecx, byte ptr [eax+ecx]
		and	edx, ecx
		jz	short loc_14DD
		mov	eax, 1
		jmp	short loc_1529
; ---------------------------------------------------------------------------

loc_14DD:				; CODE XREF: _ps_mask_table_test_intersect+B0j
		mov	edx, [ebp+var_C]
		add	edx, 1
		mov	[ebp+var_C], edx
		mov	eax, [ebp+var_10]
		add	eax, 1
		mov	[ebp+var_10], eax
		jmp	short loc_14A5
; ---------------------------------------------------------------------------

loc_14F1:				; CODE XREF: _ps_mask_table_test_intersect+8Ej
		cmp	[ebp+var_1C], 0
		jnz	short loc_14FB
		xor	eax, eax
		jmp	short loc_1529
; ---------------------------------------------------------------------------

loc_14FB:				; CODE XREF: _ps_mask_table_test_intersect+D1j
		mov	ecx, 1
		imul	edx, ecx, 0
		mov	eax, [ebp+var_C]
		movzx	eax, byte ptr [eax+edx]
		mov	ecx, 1
		imul	edx, ecx, 0
		mov	ecx, [ebp+var_10]
		movzx	edx, byte ptr [ecx+edx]
		and	eax, edx
		mov	edx, 0FFh
		mov	ecx, [ebp+var_1C]
		sar	edx, cl
		not	edx
		and	eax, edx

loc_1529:				; CODE XREF: _ps_mask_table_test_intersect+B7j
					; _ps_mask_table_test_intersect+D5j
		mov	esp, ebp
		pop	ebp
		retn
_ps_mask_table_test_intersect endp

; ---------------------------------------------------------------------------
		db 7 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_mask_table_merge proc near		; CODE XREF: _ps_mask_table_merge_all+80p

var_40		= byte ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 40h
		push	esi
		push	edi
		lea	edi, [ebp+var_40]
		mov	ecx, 10h
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_4]
		cmp	eax, [ebp+arg_8]
		jle	short loc_156C
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_8]
		mov	[ebp+arg_4], edx
		mov	eax, [ebp+var_4]
		mov	[ebp+arg_8], eax

loc_156C:				; CODE XREF: _ps_mask_table_merge+24j
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [ebp+arg_8]
		jge	loc_1722
		cmp	[ebp+arg_4], 0
		jl	loc_1722
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_8]
		cmp	eax, [edx]
		jge	loc_1722
		mov	ecx, [ebp+arg_4]
		shl	ecx, 4
		mov	edx, [ebp+arg_0]
		add	ecx, [edx+8]
		mov	[ebp+var_C], ecx
		mov	eax, [ebp+arg_8]
		shl	eax, 4
		mov	ecx, [ebp+arg_0]
		add	eax, [ecx+8]
		mov	[ebp+var_10], eax
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		mov	[ebp+var_14], eax
		mov	ecx, [ebp+var_10]
		mov	edx, [ecx]
		mov	[ebp+var_18], edx
		cmp	[ebp+var_18], 0
		jbe	loc_168E
		mov	eax, [ebp+var_18]
		cmp	eax, [ebp+var_14]
		jbe	short loc_161D
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+var_18]
		push	edx
		mov	eax, [ebp+var_C]
		push	eax
		call	_ps_mask_ensure
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_15F2
		jmp	$Exit$23
; ---------------------------------------------------------------------------

loc_15F2:				; CODE XREF: _ps_mask_table_merge+B7j
		mov	ecx, [ebp+var_14]
		mov	[ebp+var_20], ecx
		jmp	short loc_1603
; ---------------------------------------------------------------------------

loc_15FA:				; CODE XREF: _ps_mask_table_merge+E7j
		mov	edx, [ebp+var_20]
		add	edx, 1
		mov	[ebp+var_20], edx

loc_1603:				; CODE XREF: _ps_mask_table_merge+C4j
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+var_18]
		jnb	short loc_161D
		mov	ecx, [ebp+var_20]
		push	ecx
		mov	edx, [ebp+var_C]
		push	edx
		call	_ps_mask_clear_bit
		add	esp, 8
		jmp	short loc_15FA
; ---------------------------------------------------------------------------

loc_161D:				; CODE XREF: _ps_mask_table_merge+9Aj
					; _ps_mask_table_merge+D5j
		mov	eax, [ebp+var_10]
		mov	ecx, [eax+8]
		mov	[ebp+var_24], ecx
		mov	edx, [ebp+var_C]
		mov	eax, [edx+8]
		mov	[ebp+var_28], eax
		mov	ecx, [ebp+var_18]
		add	ecx, 7
		shr	ecx, 3
		mov	[ebp+var_20], ecx
		jmp	short loc_1646
; ---------------------------------------------------------------------------

loc_163D:				; CODE XREF: _ps_mask_table_merge+158j
		mov	edx, [ebp+var_20]
		sub	edx, 1
		mov	[ebp+var_20], edx

loc_1646:				; CODE XREF: _ps_mask_table_merge+107j
		cmp	[ebp+var_20], 0
		jbe	short loc_168E
		mov	eax, 1
		imul	ecx, eax, 0
		mov	edx, [ebp+var_28]
		movzx	eax, byte ptr [edx+ecx]
		mov	ecx, 1
		imul	edx, ecx, 0
		mov	ecx, [ebp+var_24]
		movzx	edx, byte ptr [ecx+edx]
		or	eax, edx
		mov	ecx, 1
		imul	edx, ecx, 0
		mov	ecx, [ebp+var_28]
		mov	[ecx+edx], al
		mov	edx, [ebp+var_28]
		add	edx, 1
		mov	[ebp+var_28], edx
		mov	eax, [ebp+var_24]
		add	eax, 1
		mov	[ebp+var_24], eax
		jmp	short loc_163D
; ---------------------------------------------------------------------------

loc_168E:				; CODE XREF: _ps_mask_table_merge+8Ej
					; _ps_mask_table_merge+116j
		mov	ecx, [ebp+var_10]
		mov	dword ptr [ecx], 0
		mov	edx, [ebp+var_10]
		mov	dword ptr [edx+0Ch], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		sub	ecx, 1
		sub	ecx, [ebp+arg_8]
		mov	[ebp+var_1C], ecx
		cmp	[ebp+var_1C], 0
		jle	short loc_1713
		mov	edx, [ebp+var_10]
		mov	eax, [edx]
		mov	[ebp+var_3C], eax
		mov	ecx, [edx+4]
		mov	[ebp+var_38], ecx
		mov	eax, [edx+8]
		mov	[ebp+var_34], eax
		mov	ecx, [edx+0Ch]
		mov	[ebp+var_30], ecx
		mov	edx, [ebp+var_1C]
		shl	edx, 4
		mov	esi, esp
		push	edx		; size_t
		mov	eax, [ebp+var_10]
		add	eax, 10h
		push	eax		; void *
		mov	ecx, [ebp+var_10]
		push	ecx		; void *
		call	dword ptr ds:__imp__memmove
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+var_1C]
		shl	edx, 4
		add	edx, [ebp+var_10]
		mov	eax, [ebp+var_3C]
		mov	[edx], eax
		mov	ecx, [ebp+var_38]
		mov	[edx+4], ecx
		mov	eax, [ebp+var_34]
		mov	[edx+8], eax
		mov	ecx, [ebp+var_30]
		mov	[edx+0Ch], ecx

loc_1713:				; CODE XREF: _ps_mask_table_merge+17Fj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		sub	eax, 1
		mov	ecx, [ebp+arg_0]
		mov	[ecx], eax
		jmp	short $Exit$23
; ---------------------------------------------------------------------------

loc_1722:				; CODE XREF: _ps_mask_table_merge+3Ej
					; _ps_mask_table_merge+48j ...
		mov	edx, 4
		imul	eax, edx, 2Bh
		cmp	dword ptr ds:_ft_trace_levels[eax], 0
		jl	short loc_1748
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		push	offset $SG7954	; "ps_mask_table_merge:	ignoring invalid i"...
		call	_FT_Message
		add	esp, 0Ch

loc_1748:				; CODE XREF: _ps_mask_table_merge+1FDj
		xor	eax, eax
		jnz	short loc_1722

$Exit$23:				; CODE XREF: _ps_mask_table_merge+B9j
					; _ps_mask_table_merge+1ECj
		mov	eax, [ebp+var_8]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN22
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		add	esp, 40h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_mask_table_merge endp

; ---------------------------------------------------------------------------
$LN22		dd 1			; DATA XREF: _ps_mask_table_merge+21Fo
		dd offset $LN21_0
$LN21_0		dd 0FFFFFFC4h, 10h	; DATA XREF: .text$mn:00001774o
		dd offset $LN20_0	; "dummy"
$LN20_0		db 'dummy',0            ; DATA XREF: .text$mn:00001780o
		db 0Ah dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_mask_table_merge_all proc near	; CODE XREF: _ps_dimension_end+1Ep

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_C], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		sub	ecx, 1
		mov	[ebp+var_4], ecx
		jmp	short loc_17CC
; ---------------------------------------------------------------------------

loc_17C3:				; CODE XREF: _ps_mask_table_merge_all:loc_182Bj
		mov	edx, [ebp+var_4]
		sub	edx, 1
		mov	[ebp+var_4], edx

loc_17CC:				; CODE XREF: _ps_mask_table_merge_all+2Dj
		cmp	[ebp+var_4], 0
		jle	short $Exit$11
		mov	eax, [ebp+var_4]
		sub	eax, 1
		mov	[ebp+var_8], eax
		jmp	short loc_17E6
; ---------------------------------------------------------------------------

loc_17DD:				; CODE XREF: _ps_mask_table_merge_all:loc_1829j
		mov	ecx, [ebp+var_8]
		sub	ecx, 1
		mov	[ebp+var_8], ecx

loc_17E6:				; CODE XREF: _ps_mask_table_merge_all+47j
		cmp	[ebp+var_8], 0
		jl	short loc_182B
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ps_mask_table_test_intersect
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_1829
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		mov	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ps_mask_table_merge
		add	esp, 10h
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_1827
		jmp	short $Exit$11
; ---------------------------------------------------------------------------

loc_1827:				; CODE XREF: _ps_mask_table_merge_all+8Fj
		jmp	short loc_182B
; ---------------------------------------------------------------------------

loc_1829:				; CODE XREF: _ps_mask_table_merge_all+6Ej
		jmp	short loc_17DD
; ---------------------------------------------------------------------------

loc_182B:				; CODE XREF: _ps_mask_table_merge_all+56j
					; _ps_mask_table_merge_all:loc_1827j
		jmp	short loc_17C3
; ---------------------------------------------------------------------------

$Exit$11:				; CODE XREF: _ps_mask_table_merge_all+3Cj
					; _ps_mask_table_merge_all+91j
		mov	eax, [ebp+var_C]
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_mask_table_merge_all endp

; ---------------------------------------------------------------------------
		db 6 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_dimension_done proc	near		; CODE XREF: _ps_hints_done+27p
					; _ps_hints_done+43p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		add	ecx, 18h
		push	ecx
		call	_ps_mask_table_done
		add	esp, 8
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+arg_0]
		add	eax, 0Ch
		push	eax
		call	_ps_mask_table_done
		add	esp, 8
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ps_hint_table_done
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_ps_dimension_done endp

; ---------------------------------------------------------------------------
		db 0Eh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_dimension_init proc	near		; CODE XREF: _ps_hints_open+42p
					; _ps_hints_open+5Ap

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+0Ch], 0
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+18h], 0
		pop	ebp
		retn
_ps_dimension_init endp

; ---------------------------------------------------------------------------
		db 0Eh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_dimension_end_mask proc near	; CODE XREF: _ps_dimension_reset_mask+23p
					; _ps_dimension_end+Bp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	[ebp+var_4], ecx
		cmp	[ebp+var_4], 0
		jbe	short loc_1903
		mov	edx, [ebp+var_4]
		shl	edx, 4
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		lea	edx, [ecx+edx-10h]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_4]
		mov	[eax+0Ch], ecx

loc_1903:				; CODE XREF: _ps_dimension_end_mask+21j
		mov	esp, ebp
		pop	ebp
		retn
_ps_dimension_end_mask endp

; ---------------------------------------------------------------------------
		db 0Dh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_dimension_reset_mask proc near	; CODE XREF: _ps_dimension_set_mask_bits+17p
					; _ps_hints_t1reset+51p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ps_dimension_end_mask
		add	esp, 8
		lea	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		add	ecx, 0Ch
		push	ecx
		call	_ps_mask_table_alloc
		add	esp, 0Ch
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_2
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_dimension_reset_mask endp

; ---------------------------------------------------------------------------
		align 4
$LN5_2		dd 1			; DATA XREF: _ps_dimension_reset_mask+46o
		dd offset $LN4
$LN4		dd 0FFFFFFF8h, 4	; DATA XREF: .text$mn:0000197Co
		dd offset $LN3		; "mask"
$LN3		db 'mask',0             ; DATA XREF: .text$mn:00001988o
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_dimension_set_mask_bits proc near	; CODE XREF: _ps_hints_t2mask+B4p
					; _ps_hints_t2mask+E5p	...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ps_dimension_reset_mask
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_19BE
		jmp	short $Exit$4
; ---------------------------------------------------------------------------

loc_19BE:				; CODE XREF: _ps_dimension_set_mask_bits+26j
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		add	ecx, 0Ch
		push	ecx
		call	_ps_mask_table_set_bits
		add	esp, 14h
		mov	[ebp+var_4], eax

$Exit$4:				; CODE XREF: _ps_dimension_set_mask_bits+28j
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_dimension_set_mask_bits endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_dimension_add_t1stem proc near	; CODE XREF: _ps_hints_stem+EBp
					; _ps_hints_t1stem3+10Cp

var_28		= byte ptr -28h
var_24		= dword	ptr -24h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		push	edi
		lea	edi, [ebp+var_28]
		mov	ecx, 0Ah
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_4], 0
		mov	[ebp+var_8], 0
		cmp	[ebp+arg_8], 0
		jge	short loc_1A46
		mov	eax, [ebp+var_8]
		or	eax, 1
		mov	[ebp+var_8], eax
		cmp	[ebp+arg_8], 0FFFFFFEBh
		jnz	short loc_1A3F
		mov	ecx, [ebp+var_8]
		or	ecx, 2
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+arg_4]
		add	edx, [ebp+arg_8]
		mov	[ebp+arg_4], edx

loc_1A3F:				; CODE XREF: _ps_dimension_add_t1stem+37j
		mov	[ebp+arg_8], 0

loc_1A46:				; CODE XREF: _ps_dimension_add_t1stem+28j
		cmp	[ebp+arg_10], 0
		jz	short loc_1A55
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0FFFFFFFFh

loc_1A55:				; CODE XREF: _ps_dimension_add_t1stem+56j
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	[ebp+var_1C], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	[ebp+var_24], ecx
		mov	[ebp+var_18], 0
		jmp	short loc_1A81
; ---------------------------------------------------------------------------

loc_1A6F:				; CODE XREF: _ps_dimension_add_t1stem:loc_1AA0j
		mov	edx, [ebp+var_18]
		add	edx, 1
		mov	[ebp+var_18], edx
		mov	eax, [ebp+var_24]
		add	eax, 0Ch
		mov	[ebp+var_24], eax

loc_1A81:				; CODE XREF: _ps_dimension_add_t1stem+79j
		mov	ecx, [ebp+var_18]
		cmp	ecx, [ebp+var_1C]
		jnb	short loc_1AA2
		mov	edx, [ebp+var_24]
		mov	eax, [edx]
		cmp	eax, [ebp+arg_4]
		jnz	short loc_1AA0
		mov	ecx, [ebp+var_24]
		mov	edx, [ecx+4]
		cmp	edx, [ebp+arg_8]
		jnz	short loc_1AA0
		jmp	short loc_1AA2
; ---------------------------------------------------------------------------

loc_1AA0:				; CODE XREF: _ps_dimension_add_t1stem+9Dj
					; _ps_dimension_add_t1stem+A8j
		jmp	short loc_1A6F
; ---------------------------------------------------------------------------

loc_1AA2:				; CODE XREF: _ps_dimension_add_t1stem+93j
					; _ps_dimension_add_t1stem+AAj
		mov	eax, [ebp+var_18]
		cmp	eax, [ebp+var_1C]
		jb	short loc_1AE3
		lea	ecx, [ebp+var_24]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ps_hint_table_alloc
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_1AC9
		jmp	short $Exit$19
; ---------------------------------------------------------------------------

loc_1AC9:				; CODE XREF: _ps_dimension_add_t1stem+D1j
		mov	ecx, [ebp+var_24]
		mov	edx, [ebp+arg_4]
		mov	[ecx], edx
		mov	eax, [ebp+var_24]
		mov	ecx, [ebp+arg_8]
		mov	[eax+4], ecx
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_8]
		mov	[edx+8], eax

loc_1AE3:				; CODE XREF: _ps_dimension_add_t1stem+B4j
		lea	ecx, [ebp+var_10]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_0]
		add	eax, 0Ch
		push	eax
		call	_ps_mask_table_last
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_1B05
		jmp	short $Exit$19
; ---------------------------------------------------------------------------

loc_1B05:				; CODE XREF: _ps_dimension_add_t1stem+10Dj
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+var_18]
		push	edx
		mov	eax, [ebp+var_10]
		push	eax
		call	_ps_mask_set_bit
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_1B24
		jmp	short $Exit$19
; ---------------------------------------------------------------------------

loc_1B24:				; CODE XREF: _ps_dimension_add_t1stem+12Cj
		cmp	[ebp+arg_10], 0
		jz	short $Exit$19
		mov	ecx, [ebp+arg_10]
		mov	edx, [ebp+var_18]
		mov	[ecx], edx

$Exit$19:				; CODE XREF: _ps_dimension_add_t1stem+D3j
					; _ps_dimension_add_t1stem+10Fj ...
		mov	eax, [ebp+var_4]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN18
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		add	esp, 28h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_dimension_add_t1stem endp

; ---------------------------------------------------------------------------
		align 4
$LN18		dd 2			; DATA XREF: _ps_dimension_add_t1stem+145o
		dd offset $LN17
$LN17		dd 0FFFFFFF0h, 4	; DATA XREF: .text$mn:00001B5Co
		dd offset $LN15		; "mask"
		dd 0FFFFFFDCh, 4
		dd offset $LN16		; "hint"
$LN16		db 'hint',0             ; DATA XREF: .text$mn:00001B74o
$LN15		db 'mask',0             ; DATA XREF: .text$mn:00001B68o
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_dimension_add_counter proc near	; CODE XREF: _ps_hints_t1stem3+14Fp

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+18h]
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+20h]
		mov	[ebp+var_10], eax
		jmp	short loc_1BCB
; ---------------------------------------------------------------------------

loc_1BB9:				; CODE XREF: _ps_dimension_add_counter:loc_1C0Fj
		mov	ecx, [ebp+var_8]
		sub	ecx, 1
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+var_10]
		add	edx, 10h
		mov	[ebp+var_10], edx

loc_1BCB:				; CODE XREF: _ps_dimension_add_counter+33j
		cmp	[ebp+var_8], 0
		jbe	short loc_1C11
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_10]
		push	ecx
		call	_ps_mask_test_bit
		add	esp, 8
		test	eax, eax
		jnz	short loc_1C0D
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+var_10]
		push	eax
		call	_ps_mask_test_bit
		add	esp, 8
		test	eax, eax
		jnz	short loc_1C0D
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+var_10]
		push	edx
		call	_ps_mask_test_bit
		add	esp, 8
		test	eax, eax
		jz	short loc_1C0F

loc_1C0D:				; CODE XREF: _ps_dimension_add_counter+5Fj
					; _ps_dimension_add_counter+73j
		jmp	short loc_1C11
; ---------------------------------------------------------------------------

loc_1C0F:				; CODE XREF: _ps_dimension_add_counter+87j
		jmp	short loc_1BB9
; ---------------------------------------------------------------------------

loc_1C11:				; CODE XREF: _ps_dimension_add_counter+4Bj
					; _ps_dimension_add_counter:loc_1C0Dj
		cmp	[ebp+var_8], 0
		jnz	short loc_1C39
		lea	eax, [ebp+var_10]
		push	eax
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_0]
		add	edx, 18h
		push	edx
		call	_ps_mask_table_alloc
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_1C39
		jmp	short $Exit$16
; ---------------------------------------------------------------------------

loc_1C39:				; CODE XREF: _ps_dimension_add_counter+91j
					; _ps_dimension_add_counter+B1j
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+var_10]
		push	edx
		call	_ps_mask_set_bit
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_1C58
		jmp	short $Exit$16
; ---------------------------------------------------------------------------

loc_1C58:				; CODE XREF: _ps_dimension_add_counter+D0j
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+var_10]
		push	edx
		call	_ps_mask_set_bit
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_1C77
		jmp	short $Exit$16
; ---------------------------------------------------------------------------

loc_1C77:				; CODE XREF: _ps_dimension_add_counter+EFj
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+var_10]
		push	edx
		call	_ps_mask_set_bit
		add	esp, 0Ch
		mov	[ebp+var_4], eax

$Exit$16:				; CODE XREF: _ps_dimension_add_counter+B3j
					; _ps_dimension_add_counter+D2j ...
		mov	eax, [ebp+var_4]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN15_0
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_dimension_add_counter endp

; ---------------------------------------------------------------------------
$LN15_0		dd 1			; DATA XREF: _ps_dimension_add_counter+111o
		dd offset $LN14
$LN14		dd 0FFFFFFF0h, 4	; DATA XREF: .text$mn:00001CB4o
		dd offset $LN13_0	; "counter"
$LN13_0		db 'counter',0          ; DATA XREF: .text$mn:00001CC0o
		db 8 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_dimension_end proc near		; CODE XREF: _ps_hints_close+4Fp
					; _ps_hints_close+74p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ps_dimension_end_mask
		add	esp, 8
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_0]
		add	eax, 18h
		push	eax
		call	_ps_mask_table_merge_all
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_ps_dimension_end endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_hints_open	proc near		; CODE XREF: _t1_hints_open+9p
					; _t2_hints_open+9p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jle	short loc_1D68
		cmp	[ebp+var_4], 2
		jle	short loc_1D23
		jmp	short loc_1D68
; ---------------------------------------------------------------------------

loc_1D23:				; CODE XREF: _ps_hints_open+1Bj
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+4], 0
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	[edx+0Ch], eax
		mov	ecx, 24h ; '$'
		imul	edx, ecx, 0
		mov	eax, [ebp+arg_0]
		lea	ecx, [eax+edx+10h]
		push	ecx
		call	_ps_dimension_init
		add	esp, 4
		mov	edx, 24h ; '$'
		shl	edx, 0
		mov	eax, [ebp+arg_0]
		lea	ecx, [eax+edx+10h]
		push	ecx
		call	_ps_dimension_init
		add	esp, 4
		jmp	short loc_1DB0
; ---------------------------------------------------------------------------

loc_1D68:				; CODE XREF: _ps_hints_open+15j
					; _ps_hints_open+1Dj
		push	offset $SG8105	; "d:\\mozilla\\modules\\freetype2\\src\\p"...
		push	33Ah
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		mov	edx, [ebp+arg_0]
		mov	[edx+4], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	[eax+0Ch], ecx

loc_1D8E:				; CODE XREF: _ps_hints_open+AAj
		mov	edx, 4
		imul	eax, edx, 2Bh
		cmp	dword ptr ds:_ft_trace_levels[eax], 0
		jl	short loc_1DAC
		push	offset $SG8110	; "ps_hints_open: invalid charstring type\"...
		call	_FT_Message
		add	esp, 4

loc_1DAC:				; CODE XREF: _ps_hints_open+99j
		xor	ecx, ecx
		jnz	short loc_1D8E

loc_1DB0:				; CODE XREF: _ps_hints_open+62j
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_hints_open	endp

; ---------------------------------------------------------------------------
		db 6 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_hints_stem	proc near		; CODE XREF: _t1_hints_stem+71p
					; _t2_hints_stems+121p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+4], 0
		jnz	loc_1F26
		cmp	[ebp+arg_4], 0
		jl	short loc_1DF7
		cmp	[ebp+arg_4], 1
		jle	short loc_1E39

loc_1DF7:				; CODE XREF: _ps_hints_stem+2Bj
					; _ps_hints_stem+57j
		mov	ecx, 4
		imul	edx, ecx, 2Bh
		cmp	dword ptr ds:_ft_trace_levels[edx], 0
		jl	short loc_1E19
		mov	eax, [ebp+arg_4]
		push	eax
		push	offset $SG8128	; "ps_hints_stem: invalid dimension (%d) u"...
		call	_FT_Message
		add	esp, 8

loc_1E19:				; CODE XREF: _ps_hints_stem+42j
		xor	ecx, ecx
		jnz	short loc_1DF7
		cmp	[ebp+arg_4], 0
		jz	short loc_1E2C
		mov	[ebp+var_10], 1
		jmp	short loc_1E33
; ---------------------------------------------------------------------------

loc_1E2C:				; CODE XREF: _ps_hints_stem+5Dj
		mov	[ebp+var_10], 0

loc_1E33:				; CODE XREF: _ps_hints_stem+66j
		mov	edx, [ebp+var_10]
		mov	[ebp+arg_4], edx

loc_1E39:				; CODE XREF: _ps_hints_stem+31j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	[ebp+var_14], ecx
		cmp	[ebp+var_14], 0
		jle	loc_1EFD
		cmp	[ebp+var_14], 2
		jle	short loc_1E57
		jmp	loc_1EFD
; ---------------------------------------------------------------------------

loc_1E57:				; CODE XREF: _ps_hints_stem+8Cj
		imul	edx, [ebp+arg_4], 24h
		mov	eax, [ebp+arg_0]
		lea	ecx, [eax+edx+10h]
		mov	[ebp+var_4], ecx
		jmp	short loc_1E79
; ---------------------------------------------------------------------------

loc_1E67:				; CODE XREF: _ps_hints_stem:loc_1EF6j
		mov	edx, [ebp+arg_8]
		sub	edx, 1
		mov	[ebp+arg_8], edx
		mov	eax, [ebp+arg_C]
		add	eax, 8
		mov	[ebp+arg_C], eax

loc_1E79:				; CODE XREF: _ps_hints_stem+A1j
		cmp	[ebp+arg_8], 0
		jbe	short loc_1EFB
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	[ebp+var_C], edx
		push	0
		mov	eax, [ebp+var_C]
		push	eax
		mov	ecx, 4
		shl	ecx, 0
		mov	edx, [ebp+arg_C]
		mov	eax, [edx+ecx]
		push	eax
		mov	ecx, 4
		imul	edx, ecx, 0
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax+edx]
		push	ecx
		mov	edx, [ebp+var_4]
		push	edx
		call	_ps_dimension_add_t1stem
		add	esp, 14h
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_1EF6
		mov	eax, 4
		shl	eax, 0
		mov	ecx, [ebp+arg_C]
		mov	edx, [ecx+eax]
		push	edx
		mov	eax, 4
		imul	ecx, eax, 0
		mov	edx, [ebp+arg_C]
		mov	eax, [edx+ecx]
		push	eax
		push	offset $SG8144	; "ps_hints_stem: could	not add	stem (%d,%"...
		call	_FT_Message
		add	esp, 0Ch
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_8]
		mov	[ecx+4], edx
		jmp	short loc_1F26
; ---------------------------------------------------------------------------

loc_1EF6:				; CODE XREF: _ps_hints_stem+FAj
		jmp	loc_1E67
; ---------------------------------------------------------------------------

loc_1EFB:				; CODE XREF: _ps_hints_stem+B9j
		jmp	short loc_1F26
; ---------------------------------------------------------------------------

loc_1EFD:				; CODE XREF: _ps_hints_stem+82j
					; _ps_hints_stem+8Ej ...
		mov	eax, 4
		imul	ecx, eax, 2Bh
		cmp	dword ptr ds:_ft_trace_levels[ecx], 0
		jl	short loc_1F22
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+0Ch]
		push	eax
		push	offset $SG8150	; "ps_hints_stem: called with invalid hint"...
		call	_FT_Message
		add	esp, 8

loc_1F22:				; CODE XREF: _ps_hints_stem+148j
		xor	ecx, ecx
		jnz	short loc_1EFD

loc_1F26:				; CODE XREF: _ps_hints_stem+21j
					; _ps_hints_stem+130j ...
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_hints_stem	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_hints_t1stem3 proc near		; DATA XREF: _t1_hints_funcs_init+34o

var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 2Ch
		push	edi
		lea	edi, [ebp+var_2C]
		mov	ecx, 0Bh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+4], 0
		jnz	loc_20C1
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	[ebp+var_10], edx
		cmp	[ebp+arg_4], 0
		jl	short loc_1F7C
		cmp	[ebp+arg_4], 1
		jle	short loc_1FBE

loc_1F7C:				; CODE XREF: _ps_hints_t1stem3+40j
					; _ps_hints_t1stem3+6Cj
		mov	eax, 4
		imul	ecx, eax, 2Bh
		cmp	dword ptr ds:_ft_trace_levels[ecx], 0
		jl	short loc_1F9E
		mov	edx, [ebp+arg_4]
		push	edx
		push	offset $SG8171	; "ps_hints_t1stem3: invalid dimension (%d"...
		call	_FT_Message
		add	esp, 8

loc_1F9E:				; CODE XREF: _ps_hints_t1stem3+57j
		xor	eax, eax
		jnz	short loc_1F7C
		cmp	[ebp+arg_4], 0
		jz	short loc_1FB1
		mov	[ebp+var_2C], 1
		jmp	short loc_1FB8
; ---------------------------------------------------------------------------

loc_1FB1:				; CODE XREF: _ps_hints_t1stem3+72j
		mov	[ebp+var_2C], 0

loc_1FB8:				; CODE XREF: _ps_hints_t1stem3+7Bj
		mov	ecx, [ebp+var_2C]
		mov	[ebp+arg_4], ecx

loc_1FBE:				; CODE XREF: _ps_hints_t1stem3+46j
		imul	edx, [ebp+arg_4], 24h
		mov	eax, [ebp+arg_0]
		lea	ecx, [eax+edx+10h]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+arg_0]
		cmp	dword ptr [edx+0Ch], 1
		jnz	loc_2098
		mov	[ebp+var_14], 0
		jmp	short loc_1FF4
; ---------------------------------------------------------------------------

loc_1FE2:				; CODE XREF: _ps_hints_t1stem3:loc_2053j
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		mov	ecx, [ebp+arg_8]
		add	ecx, 8
		mov	[ebp+arg_8], ecx

loc_1FF4:				; CODE XREF: _ps_hints_t1stem3+ACj
		cmp	[ebp+var_14], 3
		jge	short loc_2055
		mov	edx, [ebp+var_14]
		lea	eax, [ebp+edx*4+var_24]
		push	eax
		mov	ecx, [ebp+var_10]
		push	ecx
		mov	edx, 4
		shl	edx, 0
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax+edx]
		push	ecx
		call	_FT_RoundFix
		add	esp, 4
		sar	eax, 10h
		push	eax
		mov	edx, 4
		imul	eax, edx, 0
		mov	ecx, [ebp+arg_8]
		mov	edx, [ecx+eax]
		push	edx
		call	_FT_RoundFix
		add	esp, 4
		sar	eax, 10h
		push	eax
		mov	eax, [ebp+var_C]
		push	eax
		call	_ps_dimension_add_t1stem
		add	esp, 14h
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_2053
		jmp	short $Fail$22
; ---------------------------------------------------------------------------

loc_2053:				; CODE XREF: _ps_hints_t1stem3+11Bj
		jmp	short loc_1FE2
; ---------------------------------------------------------------------------

loc_2055:				; CODE XREF: _ps_hints_t1stem3+C4j
		mov	ecx, [ebp+var_10]
		push	ecx
		mov	edx, 4
		shl	edx, 1
		mov	eax, [ebp+edx+var_24]
		push	eax
		mov	ecx, 4
		shl	ecx, 0
		mov	edx, [ebp+ecx+var_24]
		push	edx
		mov	eax, 4
		imul	ecx, eax, 0
		mov	edx, [ebp+ecx+var_24]
		push	edx
		mov	eax, [ebp+var_C]
		push	eax
		call	_ps_dimension_add_counter
		add	esp, 14h
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_2096
		jmp	short $Fail$22
; ---------------------------------------------------------------------------

loc_2096:				; CODE XREF: _ps_hints_t1stem3+15Ej
		jmp	short loc_20C1
; ---------------------------------------------------------------------------

loc_2098:				; CODE XREF: _ps_hints_t1stem3+9Fj
		push	offset $SG8182	; "ps_hints_t1stem3: called with invalid h"...
		call	_FT_Message
		add	esp, 4
		push	offset $SG8183	; "d:\\mozilla\\modules\\freetype2\\src\\p"...
		push	3ADh
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		mov	[ebp+var_8], eax
		jmp	short $Fail$22
; ---------------------------------------------------------------------------

loc_20C1:				; CODE XREF: _ps_hints_t1stem3+2Ej
					; _ps_hints_t1stem3:loc_2096j
		jmp	short loc_20D9
; ---------------------------------------------------------------------------

$Fail$22:				; CODE XREF: _ps_hints_t1stem3+11Dj
					; _ps_hints_t1stem3+160j ...
		push	offset $SG8184	; "ps_hints_t1stem3: could not add counter"...
		call	_FT_Message
		add	esp, 4
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_8]
		mov	[ecx+4], edx

loc_20D9:				; CODE XREF: _ps_hints_t1stem3:loc_20C1j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN21_1
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4
		add	esp, 2Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_hints_t1stem3 endp

; ---------------------------------------------------------------------------
		align 4
$LN21_1		dd 1			; DATA XREF: _ps_hints_t1stem3+1A9o
		dd offset $LN20_1
$LN20_1		dd 0FFFFFFDCh, 0Ch	; DATA XREF: .text$mn:00002108o
		dd offset $LN19_0
$LN19_0		dd 786469h, 2 dup(0CCCCCCCCh) ;	DATA XREF: .text$mn:00002114o

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_hints_t1reset proc near		; DATA XREF: _t1_hints_funcs_init+3Eo

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], 0
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+4], 0
		jnz	loc_21D1
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+0Ch], 1
		jnz	short loc_21B5
		mov	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, 24h ; '$'
		imul	ecx, eax, 0
		mov	edx, [ebp+arg_0]
		lea	eax, [edx+ecx+10h]
		push	eax
		call	_ps_dimension_reset_mask
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_2188
		jmp	short $Fail$8
; ---------------------------------------------------------------------------

loc_2188:				; CODE XREF: _ps_hints_t1reset+60j
		mov	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, 24h ; '$'
		shl	eax, 0
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax+10h]
		push	edx
		call	_ps_dimension_reset_mask
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_21B3
		jmp	short $Fail$8
; ---------------------------------------------------------------------------

loc_21B3:				; CODE XREF: _ps_hints_t1reset+8Bj
		jmp	short loc_21D1
; ---------------------------------------------------------------------------

loc_21B5:				; CODE XREF: _ps_hints_t1reset+37j
		push	offset $SG8199	; "d:\\mozilla\\modules\\freetype2\\src\\p"...
		push	3D6h
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		mov	[ebp+var_4], eax
		jmp	short $Fail$8
; ---------------------------------------------------------------------------

loc_21D1:				; CODE XREF: _ps_hints_t1reset+22j
					; _ps_hints_t1reset:loc_21B3j
		jmp	short loc_21DC
; ---------------------------------------------------------------------------

$Fail$8:				; CODE XREF: _ps_hints_t1reset+62j
					; _ps_hints_t1reset+8Dj ...
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_4]
		mov	[eax+4], ecx

loc_21DC:				; CODE XREF: _ps_hints_t1reset:loc_21D1j
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_hints_t1reset endp

; ---------------------------------------------------------------------------
		db 0Ah dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_hints_t2mask proc near		; DATA XREF: _t2_hints_funcs_init+34o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+4], 0
		jnz	loc_22EC
		mov	ecx, [ebp+arg_0]
		add	ecx, 10h
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	[ebp+var_C], eax
		mov	ecx, 24h ; '$'
		imul	edx, ecx, 0
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+edx]
		mov	[ebp+var_10], ecx
		mov	edx, 24h ; '$'
		shl	edx, 0
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+edx]
		mov	[ebp+var_14], ecx
		mov	edx, [ebp+var_10]
		add	edx, [ebp+var_14]
		cmp	[ebp+arg_8], edx
		jz	short loc_2288

loc_2259:				; CODE XREF: _ps_hints_t2mask+90j
		mov	eax, 4
		imul	ecx, eax, 2Bh
		cmp	dword ptr ds:_ft_trace_levels[ecx], 0
		jl	short loc_2282
		mov	edx, [ebp+var_10]
		add	edx, [ebp+var_14]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		push	offset $SG8221	; "ps_hints_t2mask: called with	invalid	bi"...
		call	_FT_Message
		add	esp, 0Ch

loc_2282:				; CODE XREF: _ps_hints_t2mask+74j
		xor	ecx, ecx
		jnz	short loc_2259
		jmp	short loc_22F7
; ---------------------------------------------------------------------------

loc_2288:				; CODE XREF: _ps_hints_t2mask+63j
		mov	edx, [ebp+var_C]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_10]
		push	ecx
		mov	edx, [ebp+var_14]
		push	edx
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, 24h ; '$'
		imul	edx, ecx, 0
		add	edx, [ebp+var_8]
		push	edx
		call	_ps_dimension_set_mask_bits
		add	esp, 18h
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_22BB
		jmp	short $Fail$11
; ---------------------------------------------------------------------------

loc_22BB:				; CODE XREF: _ps_hints_t2mask+C3j
		mov	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+var_14]
		push	edx
		push	0
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, 24h ; '$'
		shl	ecx, 0
		add	ecx, [ebp+var_8]
		push	ecx
		call	_ps_dimension_set_mask_bits
		add	esp, 18h
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_22EC
		jmp	short $Fail$11
; ---------------------------------------------------------------------------

loc_22EC:				; CODE XREF: _ps_hints_t2mask+21j
					; _ps_hints_t2mask+F4j
		jmp	short loc_22F7
; ---------------------------------------------------------------------------

$Fail$11:				; CODE XREF: _ps_hints_t2mask+C5j
					; _ps_hints_t2mask+F6j
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_4]
		mov	[edx+4], eax

loc_22F7:				; CODE XREF: _ps_hints_t2mask+92j
					; _ps_hints_t2mask:loc_22ECj
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_hints_t2mask endp

; ---------------------------------------------------------------------------
		db 0Fh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_hints_t2counter proc near		; DATA XREF: _t2_hints_funcs_init+3Eo

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+4], 0
		jnz	loc_2408
		mov	ecx, [ebp+arg_0]
		add	ecx, 10h
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	[ebp+var_C], eax
		mov	ecx, 24h ; '$'
		imul	edx, ecx, 0
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+edx]
		mov	[ebp+var_10], ecx
		mov	edx, 24h ; '$'
		shl	edx, 0
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+edx]
		mov	[ebp+var_14], ecx
		mov	edx, [ebp+var_10]
		add	edx, [ebp+var_14]
		cmp	[ebp+arg_4], edx
		jz	short loc_23A8

loc_2379:				; CODE XREF: _ps_hints_t2counter+90j
		mov	eax, 4
		imul	ecx, eax, 2Bh
		cmp	dword ptr ds:_ft_trace_levels[ecx], 0
		jl	short loc_23A2
		mov	edx, [ebp+var_10]
		add	edx, [ebp+var_14]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		push	offset $SG8244	; "ps_hints_t2counter: called with invalid"...
		call	_FT_Message
		add	esp, 0Ch

loc_23A2:				; CODE XREF: _ps_hints_t2counter+74j
		xor	ecx, ecx
		jnz	short loc_2379
		jmp	short loc_2413
; ---------------------------------------------------------------------------

loc_23A8:				; CODE XREF: _ps_hints_t2counter+63j
		mov	edx, [ebp+var_C]
		push	edx
		push	0
		mov	eax, [ebp+var_10]
		push	eax
		push	0
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, 24h ; '$'
		imul	eax, edx, 0
		add	eax, [ebp+var_8]
		push	eax
		call	_ps_dimension_set_mask_bits
		add	esp, 18h
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_23D7
		jmp	short $Fail$11_0
; ---------------------------------------------------------------------------

loc_23D7:				; CODE XREF: _ps_hints_t2counter+BFj
		mov	ecx, [ebp+var_C]
		push	ecx
		push	0
		mov	edx, [ebp+var_14]
		push	edx
		mov	eax, [ebp+var_10]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, 24h ; '$'
		shl	edx, 0
		add	edx, [ebp+var_8]
		push	edx
		call	_ps_dimension_set_mask_bits
		add	esp, 18h
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_2408
		jmp	short $Fail$11_0
; ---------------------------------------------------------------------------

loc_2408:				; CODE XREF: _ps_hints_t2counter+21j
					; _ps_hints_t2counter+F0j
		jmp	short loc_2413
; ---------------------------------------------------------------------------

$Fail$11_0:				; CODE XREF: _ps_hints_t2counter+C1j
					; _ps_hints_t2counter+F2j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_4]
		mov	[eax+4], ecx

loc_2413:				; CODE XREF: _ps_hints_t2counter+92j
					; _ps_hints_t2counter:loc_2408j
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_hints_t2counter endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_hints_close	proc near		; DATA XREF: _t1_hints_funcs_init+20o
					; _t2_hints_funcs_init+20o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	[ebp+var_4], ecx
		cmp	[ebp+var_4], 0
		jnz	short loc_24A3
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_0]
		add	ecx, 10h
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, 24h ; '$'
		imul	edx, ecx, 0
		add	edx, [ebp+var_C]
		push	edx
		call	_ps_dimension_end
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_24A3
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, 24h ; '$'
		shl	edx, 0
		add	edx, [ebp+var_C]
		push	edx
		call	_ps_dimension_end
		add	esp, 0Ch
		mov	[ebp+var_4], eax

loc_24A3:				; CODE XREF: _ps_hints_close+28j
					; _ps_hints_close+5Ej
		mov	eax, [ebp+var_4]
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_hints_close	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_t1_hints_open	proc near		; DATA XREF: _t1_hints_funcs_init+16o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	1
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ps_hints_open
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_t1_hints_open	endp

; ---------------------------------------------------------------------------
		db 6 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_t1_hints_stem	proc near		; DATA XREF: _t1_hints_funcs_init+2Ao

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, 4
		imul	ecx, eax, 0
		mov	edx, [ebp+arg_8]
		mov	eax, [edx+ecx]
		push	eax
		call	_FT_RoundFix
		add	esp, 4
		sar	eax, 10h
		mov	ecx, 4
		imul	edx, ecx, 0
		mov	[ebp+edx+var_C], eax
		mov	eax, 4
		shl	eax, 0
		mov	ecx, [ebp+arg_8]
		mov	edx, [ecx+eax]
		push	edx
		call	_FT_RoundFix
		add	esp, 4
		sar	eax, 10h
		mov	ecx, 4
		shl	ecx, 0
		mov	[ebp+ecx+var_C], eax
		lea	edx, [ebp+var_C]
		push	edx
		push	1
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ps_hints_stem
		add	esp, 10h
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_3
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_t1_hints_stem	endp

; ---------------------------------------------------------------------------
$LN5_3		dd 1			; DATA XREF: _t1_hints_stem+7Do
		dd offset $LN4_0
$LN4_0		dd 0FFFFFFF4h, 8	; DATA XREF: .text$mn:00002570o
		dd offset $LN3_0	; "stems"
$LN3_0		db 'stems',0            ; DATA XREF: .text$mn:0000257Co
		db 0Eh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_t2_hints_open	proc near		; DATA XREF: _t2_hints_funcs_init+16o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	2
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ps_hints_open
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_t2_hints_open	endp

; ---------------------------------------------------------------------------
		db 6 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_t2_hints_stems	proc near		; DATA XREF: _t2_hints_funcs_init+2Ao

var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 98h
		push	edi
		lea	edi, [ebp+var_98]
		mov	ecx, 26h ; '&'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_98], eax
		mov	[ebp+var_90], 0

loc_25ED:				; CODE XREF: _t2_hints_stems+138j
		cmp	[ebp+var_98], 0
		jle	loc_26F1
		mov	ecx, [ebp+var_98]
		mov	[ebp+arg_8], ecx
		cmp	[ebp+arg_8], 10h
		jle	short loc_2610
		mov	[ebp+arg_8], 10h

loc_2610:				; CODE XREF: _t2_hints_stems+53j
		mov	[ebp+var_94], 0
		jmp	short loc_262B
; ---------------------------------------------------------------------------

loc_261C:				; CODE XREF: _t2_hints_stems+BBj
		mov	edx, [ebp+var_94]
		add	edx, 1
		mov	[ebp+var_94], edx

loc_262B:				; CODE XREF: _t2_hints_stems+66j
		mov	eax, [ebp+arg_8]
		shl	eax, 1
		cmp	[ebp+var_94], eax
		jge	short loc_2671
		mov	ecx, [ebp+var_94]
		mov	edx, [ebp+arg_C]
		mov	eax, [ebp+var_90]
		add	eax, [edx+ecx*4]
		mov	[ebp+var_90], eax
		mov	ecx, [ebp+var_90]
		push	ecx
		call	_FT_RoundFix
		add	esp, 4
		sar	eax, 10h
		mov	edx, [ebp+var_94]
		mov	[ebp+edx*4+var_88], eax
		jmp	short loc_261C
; ---------------------------------------------------------------------------

loc_2671:				; CODE XREF: _t2_hints_stems+82j
		mov	[ebp+var_94], 0
		jmp	short loc_268C
; ---------------------------------------------------------------------------

loc_267D:				; CODE XREF: _t2_hints_stems+10Cj
		mov	eax, [ebp+var_94]
		add	eax, 2
		mov	[ebp+var_94], eax

loc_268C:				; CODE XREF: _t2_hints_stems+C7j
		mov	ecx, [ebp+arg_8]
		shl	ecx, 1
		cmp	[ebp+var_94], ecx
		jge	short loc_26C2
		mov	edx, [ebp+var_94]
		mov	eax, [ebp+var_94]
		mov	ecx, [ebp+edx*4+var_84]
		sub	ecx, [ebp+eax*4+var_88]
		mov	edx, [ebp+var_94]
		mov	[ebp+edx*4+var_84], ecx
		jmp	short loc_267D
; ---------------------------------------------------------------------------

loc_26C2:				; CODE XREF: _t2_hints_stems+E3j
		lea	eax, [ebp+var_88]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ps_hints_stem
		add	esp, 10h
		mov	ecx, [ebp+var_98]
		sub	ecx, [ebp+arg_8]
		mov	[ebp+var_98], ecx
		jmp	loc_25ED
; ---------------------------------------------------------------------------

loc_26F1:				; CODE XREF: _t2_hints_stems+40j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN14_0
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4
		add	esp, 98h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_t2_hints_stems	endp

; ---------------------------------------------------------------------------
		align 10h
$LN14_0		dd 1			; DATA XREF: _t2_hints_stems+141o
		dd offset $LN13_1
$LN13_1		dd 0FFFFFF78h, 80h	; DATA XREF: .text$mn:00002724o
		dd offset $LN12_0	; "stems"
$LN12_0		db 'stems',0            ; DATA XREF: .text$mn:00002730o
		db 0Ah dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_globals_scale_widths proc near	; CODE XREF: _psh_globals_set_scale+57p
					; _psh_globals_set_scale+ABp

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_20], eax
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		imul	eax, [ebp+arg_4], 0CCh
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax+4]
		mov	[ebp+var_4], edx
		mov	eax, [ebp+var_4]
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	[ebp+var_C], edx
		mov	eax, [ebp+var_8]
		add	eax, 4
		mov	[ebp+var_10], eax
		mov	ecx, [ebp+var_10]
		mov	[ebp+var_14], ecx
		mov	edx, [ebp+var_4]
		mov	eax, [edx+0C4h]
		mov	[ebp+var_18], eax
		cmp	[ebp+var_C], 0
		jbe	loc_2858
		mov	ecx, [ebp+var_18]
		push	ecx
		mov	edx, [ebp+var_10]
		mov	eax, [edx]
		push	eax
		call	_FT_MulFix_i386
		add	esp, 8
		mov	ecx, [ebp+var_10]
		mov	[ecx+4], eax
		mov	edx, [ebp+var_10]
		mov	eax, [edx+4]
		add	eax, 20h ; ' '
		and	eax, 0FFFFFFC0h
		mov	ecx, [ebp+var_10]
		mov	[ecx+8], eax
		mov	edx, [ebp+var_10]
		add	edx, 0Ch
		mov	[ebp+var_10], edx
		mov	eax, [ebp+var_C]
		sub	eax, 1
		mov	[ebp+var_C], eax
		jmp	short loc_27FB
; ---------------------------------------------------------------------------

loc_27E9:				; CODE XREF: _psh_globals_scale_widths+112j
		mov	ecx, [ebp+var_C]
		sub	ecx, 1
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+var_10]
		add	edx, 0Ch
		mov	[ebp+var_10], edx

loc_27FB:				; CODE XREF: _psh_globals_scale_widths+A3j
		cmp	[ebp+var_C], 0
		jbe	short loc_2858
		mov	eax, [ebp+var_18]
		push	eax
		mov	ecx, [ebp+var_10]
		mov	edx, [ecx]
		push	edx
		call	_FT_MulFix_i386
		add	esp, 8
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_1C]
		sub	ecx, [eax+4]
		mov	[ebp+var_20], ecx
		jns	short loc_282C
		mov	edx, [ebp+var_20]
		neg	edx
		mov	[ebp+var_20], edx

loc_282C:				; CODE XREF: _psh_globals_scale_widths+DEj
		cmp	[ebp+var_20], 80h ; ''
		jge	short loc_283E
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	[ebp+var_1C], ecx

loc_283E:				; CODE XREF: _psh_globals_scale_widths+EFj
		mov	edx, [ebp+var_10]
		mov	eax, [ebp+var_1C]
		mov	[edx+4], eax
		mov	ecx, [ebp+var_1C]
		add	ecx, 20h ; ' '
		and	ecx, 0FFFFFFC0h
		mov	edx, [ebp+var_10]
		mov	[edx+8], ecx
		jmp	short loc_27E9
; ---------------------------------------------------------------------------

loc_2858:				; CODE XREF: _psh_globals_scale_widths+61j
					; _psh_globals_scale_widths+BBj
		add	esp, 20h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_psh_globals_scale_widths endp

; ---------------------------------------------------------------------------
		db 0Eh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_blues_set_zones_0 proc near	; CODE XREF: _psh_blues_set_zones+6Fp
					; _psh_blues_set_zones+8Dp

var_28		= dword	ptr -28h
var_21		= byte ptr -21h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_9		= byte ptr -9
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		push	esi
		push	edi
		lea	edi, [ebp+var_28]
		mov	ecx, 0Ah
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_10]
		mov	ecx, [eax]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_14]
		mov	eax, [edx]
		mov	[ebp+var_8], eax
		mov	[ebp+var_9], 1
		mov	ecx, [ebp+arg_0]
		mov	[ebp+arg_0], ecx
		jmp	short loc_28B0
; ---------------------------------------------------------------------------

loc_28A7:				; CODE XREF: _psh_blues_set_zones_0+1A2j
		mov	edx, [ebp+arg_8]
		sub	edx, 2
		mov	[ebp+arg_8], edx

loc_28B0:				; CODE XREF: _psh_blues_set_zones_0+31j
		cmp	[ebp+arg_8], 1
		jbe	loc_2A1B
		mov	[ebp+var_21], 0
		movzx	eax, [ebp+var_9]
		test	eax, eax
		jnz	short loc_28CE
		movzx	ecx, [ebp+arg_4]
		test	ecx, ecx
		jz	short loc_290A

loc_28CE:				; CODE XREF: _psh_blues_set_zones_0+50j
		mov	edx, 2
		shl	edx, 0
		mov	eax, [ebp+arg_C]
		movsx	ecx, word ptr [eax+edx]
		mov	[ebp+var_10], ecx
		mov	edx, 2
		imul	eax, edx, 0
		mov	ecx, [ebp+arg_C]
		movsx	edx, word ptr [ecx+eax]
		sub	edx, [ebp+var_10]
		mov	[ebp+var_14], edx
		mov	eax, [ebp+arg_14]
		add	eax, 4
		mov	[ebp+var_1C], eax
		mov	ecx, [ebp+var_8]
		mov	[ebp+var_18], ecx
		mov	[ebp+var_9], 0
		jmp	short loc_2944
; ---------------------------------------------------------------------------

loc_290A:				; CODE XREF: _psh_blues_set_zones_0+58j
		mov	edx, 2
		imul	eax, edx, 0
		mov	ecx, [ebp+arg_C]
		movsx	edx, word ptr [ecx+eax]
		mov	[ebp+var_10], edx
		mov	eax, 2
		shl	eax, 0
		mov	ecx, [ebp+arg_C]
		movsx	edx, word ptr [ecx+eax]
		sub	edx, [ebp+var_10]
		mov	[ebp+var_14], edx
		mov	eax, [ebp+arg_10]
		add	eax, 4
		mov	[ebp+var_1C], eax
		mov	ecx, [ebp+var_4]
		mov	[ebp+var_18], ecx
		mov	[ebp+var_21], 1

loc_2944:				; CODE XREF: _psh_blues_set_zones_0+94j
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_20], edx
		jmp	short loc_295E
; ---------------------------------------------------------------------------

loc_294C:				; CODE XREF: _psh_blues_set_zones_0:loc_29AFj
		mov	eax, [ebp+var_18]
		sub	eax, 1
		mov	[ebp+var_18], eax
		mov	ecx, [ebp+var_20]
		add	ecx, 20h ; ' '
		mov	[ebp+var_20], ecx

loc_295E:				; CODE XREF: _psh_blues_set_zones_0+D6j
		cmp	[ebp+var_18], 0
		jbe	short loc_29B1
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_10]
		cmp	eax, [edx]
		jge	short loc_2970
		jmp	short loc_29B1
; ---------------------------------------------------------------------------

loc_2970:				; CODE XREF: _psh_blues_set_zones_0+F8j
		mov	ecx, [ebp+var_20]
		mov	edx, [ebp+var_10]
		cmp	edx, [ecx]
		jnz	short loc_29AF
		mov	eax, [ebp+var_20]
		mov	ecx, [eax+4]
		mov	[ebp+var_28], ecx
		cmp	[ebp+var_14], 0
		jge	short loc_299C
		mov	edx, [ebp+var_14]
		cmp	edx, [ebp+var_28]
		jge	short loc_299A
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_14]
		mov	[eax+4], ecx

loc_299A:				; CODE XREF: _psh_blues_set_zones_0+11Bj
		jmp	short loc_29AD
; ---------------------------------------------------------------------------

loc_299C:				; CODE XREF: _psh_blues_set_zones_0+113j
		mov	edx, [ebp+var_14]
		cmp	edx, [ebp+var_28]
		jle	short loc_29AD
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_14]
		mov	[eax+4], ecx

loc_29AD:				; CODE XREF: _psh_blues_set_zones_0:loc_299Aj
					; _psh_blues_set_zones_0+12Ej
		jmp	short $Skip$23
; ---------------------------------------------------------------------------

loc_29AF:				; CODE XREF: _psh_blues_set_zones_0+104j
		jmp	short loc_294C
; ---------------------------------------------------------------------------

loc_29B1:				; CODE XREF: _psh_blues_set_zones_0+EEj
					; _psh_blues_set_zones_0+FAj
		jmp	short loc_29BC
; ---------------------------------------------------------------------------

loc_29B3:				; CODE XREF: _psh_blues_set_zones_0+16Aj
		mov	edx, [ebp+var_18]
		sub	edx, 1
		mov	[ebp+var_18], edx

loc_29BC:				; CODE XREF: _psh_blues_set_zones_0:loc_29B1j
		cmp	[ebp+var_18], 0
		jbe	short loc_29E0
		mov	esi, [ebp+var_18]
		sub	esi, 1
		shl	esi, 5
		add	esi, [ebp+var_20]
		mov	edi, [ebp+var_18]
		shl	edi, 5
		add	edi, [ebp+var_20]
		mov	ecx, 8
		rep movsd
		jmp	short loc_29B3
; ---------------------------------------------------------------------------

loc_29E0:				; CODE XREF: _psh_blues_set_zones_0+14Cj
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_10]
		mov	[eax], ecx
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+var_14]
		mov	[edx+4], eax
		movzx	ecx, [ebp+var_21]
		test	ecx, ecx
		jz	short loc_2A04
		mov	edx, [ebp+var_4]
		add	edx, 1
		mov	[ebp+var_4], edx
		jmp	short $Skip$23
; ---------------------------------------------------------------------------

loc_2A04:				; CODE XREF: _psh_blues_set_zones_0+183j
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax

$Skip$23:				; CODE XREF: _psh_blues_set_zones_0:loc_29ADj
					; _psh_blues_set_zones_0+18Ej
		mov	ecx, [ebp+arg_C]
		add	ecx, 4
		mov	[ebp+arg_C], ecx
		jmp	loc_28A7
; ---------------------------------------------------------------------------

loc_2A1B:				; CODE XREF: _psh_blues_set_zones_0+40j
		mov	edx, [ebp+arg_10]
		mov	eax, [ebp+var_4]
		mov	[edx], eax
		mov	ecx, [ebp+arg_14]
		mov	edx, [ebp+var_8]
		mov	[ecx], edx
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
_psh_blues_set_zones_0 endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_blues_set_zones proc near		; CODE XREF: _psh_globals_new+193p
					; _psh_globals_new+1CBp

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		push	esi
		push	edi
		lea	edi, [ebp+var_38]
		mov	ecx, 0Eh
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_18], 0
		jz	short loc_2A6A
		mov	eax, [ebp+arg_0]
		add	eax, 408h
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_0]
		add	ecx, 60Ch
		mov	[ebp+var_8], ecx
		jmp	short loc_2A7B
; ---------------------------------------------------------------------------

loc_2A6A:				; CODE XREF: _psh_blues_set_zones+1Bj
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_4], edx
		mov	eax, [ebp+arg_0]
		add	eax, 204h
		mov	[ebp+var_8], eax

loc_2A7B:				; CODE XREF: _psh_blues_set_zones+34j
		mov	ecx, [ebp+var_4]
		mov	dword ptr [ecx], 0
		mov	edx, [ebp+var_8]
		mov	dword ptr [edx], 0
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+var_4]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		push	0
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_psh_blues_set_zones_0
		add	esp, 18h
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		push	1
		mov	eax, [ebp+arg_0]
		push	eax
		call	_psh_blues_set_zones_0
		add	esp, 18h
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx]
		mov	[ebp+var_C], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax]
		mov	[ebp+var_10], ecx
		cmp	[ebp+var_C], 0
		jle	loc_2B63
		mov	edx, [ebp+var_4]
		add	edx, 4
		mov	[ebp+var_14], edx
		mov	eax, [ebp+var_C]
		mov	[ebp+arg_4], eax
		jmp	short loc_2B06
; ---------------------------------------------------------------------------

loc_2AF4:				; CODE XREF: _psh_blues_set_zones+12Dj
		mov	ecx, [ebp+arg_4]
		sub	ecx, 1
		mov	[ebp+arg_4], ecx
		mov	edx, [ebp+var_14]
		add	edx, 20h ; ' '
		mov	[ebp+var_14], edx

loc_2B06:				; CODE XREF: _psh_blues_set_zones+BEj
		cmp	[ebp+arg_4], 0
		jbe	short loc_2B63
		cmp	[ebp+arg_4], 1
		jbe	short loc_2B45
		mov	eax, 20h ; ' '
		shl	eax, 0
		mov	ecx, 20h ; ' '
		imul	edx, ecx, 0
		mov	ecx, [ebp+var_14]
		mov	esi, [ebp+var_14]
		mov	eax, [ecx+eax]
		sub	eax, [esi+edx]
		mov	[ebp+var_18], eax
		mov	ecx, [ebp+var_14]
		mov	edx, [ecx+4]
		cmp	edx, [ebp+var_18]
		jle	short loc_2B45
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_18]
		mov	[eax+4], ecx

loc_2B45:				; CODE XREF: _psh_blues_set_zones+DCj
					; _psh_blues_set_zones+106j
		mov	edx, [ebp+var_14]
		mov	eax, [ebp+var_14]
		mov	ecx, [eax]
		mov	[edx+0Ch], ecx
		mov	edx, [ebp+var_14]
		mov	eax, [edx+4]
		mov	ecx, [ebp+var_14]
		add	eax, [ecx]
		mov	edx, [ebp+var_14]
		mov	[edx+8], eax
		jmp	short loc_2AF4
; ---------------------------------------------------------------------------

loc_2B63:				; CODE XREF: _psh_blues_set_zones+A9j
					; _psh_blues_set_zones+D6j
		cmp	[ebp+var_10], 0
		jle	loc_2BED
		mov	eax, [ebp+var_8]
		add	eax, 4
		mov	[ebp+var_1C], eax
		mov	ecx, [ebp+var_10]
		mov	[ebp+arg_4], ecx
		jmp	short loc_2B90
; ---------------------------------------------------------------------------

loc_2B7E:				; CODE XREF: _psh_blues_set_zones+1B7j
		mov	edx, [ebp+arg_4]
		sub	edx, 1
		mov	[ebp+arg_4], edx
		mov	eax, [ebp+var_1C]
		add	eax, 20h ; ' '
		mov	[ebp+var_1C], eax

loc_2B90:				; CODE XREF: _psh_blues_set_zones+148j
		cmp	[ebp+arg_4], 0
		jbe	short loc_2BED
		cmp	[ebp+arg_4], 1
		jbe	short loc_2BCF
		mov	ecx, 20h ; ' '
		imul	edx, ecx, 0
		mov	eax, 20h ; ' '
		shl	eax, 0
		mov	ecx, [ebp+var_1C]
		mov	esi, [ebp+var_1C]
		mov	edx, [ecx+edx]
		sub	edx, [esi+eax]
		mov	[ebp+var_20], edx
		mov	eax, [ebp+var_1C]
		mov	ecx, [eax+4]
		cmp	ecx, [ebp+var_20]
		jge	short loc_2BCF
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_20]
		mov	[edx+4], eax

loc_2BCF:				; CODE XREF: _psh_blues_set_zones+166j
					; _psh_blues_set_zones+190j
		mov	ecx, [ebp+var_1C]
		mov	edx, [ebp+var_1C]
		mov	eax, [edx]
		mov	[ecx+8], eax
		mov	ecx, [ebp+var_1C]
		mov	edx, [ecx+4]
		mov	eax, [ebp+var_1C]
		add	edx, [eax]
		mov	ecx, [ebp+var_1C]
		mov	[ecx+0Ch], edx
		jmp	short loc_2B7E
; ---------------------------------------------------------------------------

loc_2BED:				; CODE XREF: _psh_blues_set_zones+133j
					; _psh_blues_set_zones+160j
		mov	edx, [ebp+var_4]
		add	edx, 4
		mov	[ebp+var_34], edx
		mov	eax, [ebp+var_C]
		mov	[ebp+arg_4], eax
		mov	[ebp+var_24], 1
		jmp	short loc_2C0E
; ---------------------------------------------------------------------------

loc_2C05:				; CODE XREF: _psh_blues_set_zones+2DBj
		mov	ecx, [ebp+var_24]
		sub	ecx, 1
		mov	[ebp+var_24], ecx

loc_2C0E:				; CODE XREF: _psh_blues_set_zones+1CFj
		cmp	[ebp+var_24], 0
		jl	loc_2D14
		cmp	[ebp+arg_4], 0
		jbe	loc_2D00
		mov	edx, [ebp+var_34]
		mov	eax, [edx+0Ch]
		sub	eax, [ebp+arg_14]
		mov	ecx, [ebp+var_34]
		mov	[ecx+0Ch], eax
		mov	edx, [ebp+var_34]
		mov	eax, [edx+8]
		mov	[ebp+var_28], eax
		mov	ecx, [ebp+arg_4]
		sub	ecx, 1
		mov	[ebp+arg_4], ecx
		jmp	short loc_2C4E
; ---------------------------------------------------------------------------

loc_2C45:				; CODE XREF: _psh_blues_set_zones+2BBj
		mov	edx, [ebp+arg_4]
		sub	edx, 1
		mov	[ebp+arg_4], edx

loc_2C4E:				; CODE XREF: _psh_blues_set_zones+20Fj
		cmp	[ebp+arg_4], 0
		jbe	loc_2CF4
		mov	eax, 20h ; ' '
		shl	eax, 0
		mov	ecx, [ebp+var_34]
		mov	edx, [ecx+eax+0Ch]
		mov	[ebp+var_2C], edx
		mov	eax, [ebp+var_2C]
		sub	eax, [ebp+var_28]
		mov	[ebp+var_30], eax
		mov	ecx, [ebp+arg_14]
		shl	ecx, 1
		cmp	[ebp+var_30], ecx
		jge	short loc_2CB3
		mov	eax, [ebp+var_30]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	edx, [ebp+var_28]
		add	edx, eax
		mov	[ebp+var_38], edx
		mov	eax, 20h ; ' '
		shl	eax, 0
		mov	ecx, [ebp+var_34]
		mov	edx, [ebp+var_38]
		mov	[ecx+eax+0Ch], edx
		mov	eax, 20h ; ' '
		imul	ecx, eax, 0
		mov	edx, [ebp+var_34]
		mov	eax, [ebp+var_38]
		mov	[edx+ecx+8], eax
		jmp	short loc_2CDD
; ---------------------------------------------------------------------------

loc_2CB3:				; CODE XREF: _psh_blues_set_zones+247j
		mov	ecx, [ebp+var_28]
		add	ecx, [ebp+arg_14]
		mov	edx, 20h ; ' '
		imul	eax, edx, 0
		mov	edx, [ebp+var_34]
		mov	[edx+eax+8], ecx
		mov	eax, [ebp+var_2C]
		sub	eax, [ebp+arg_14]
		mov	ecx, 20h ; ' '
		shl	ecx, 0
		mov	edx, [ebp+var_34]
		mov	[edx+ecx+0Ch], eax

loc_2CDD:				; CODE XREF: _psh_blues_set_zones+27Dj
		mov	eax, [ebp+var_34]
		add	eax, 20h ; ' '
		mov	[ebp+var_34], eax
		mov	ecx, [ebp+var_34]
		mov	edx, [ecx+8]
		mov	[ebp+var_28], edx
		jmp	loc_2C45
; ---------------------------------------------------------------------------

loc_2CF4:				; CODE XREF: _psh_blues_set_zones+21Ej
		mov	eax, [ebp+var_28]
		add	eax, [ebp+arg_14]
		mov	ecx, [ebp+var_34]
		mov	[ecx+8], eax

loc_2D00:				; CODE XREF: _psh_blues_set_zones+1E8j
		mov	edx, [ebp+var_8]
		add	edx, 4
		mov	[ebp+var_34], edx
		mov	eax, [ebp+var_10]
		mov	[ebp+arg_4], eax
		jmp	loc_2C05
; ---------------------------------------------------------------------------

loc_2D14:				; CODE XREF: _psh_blues_set_zones+1DEj
		pop	edi
		pop	esi
		add	esp, 38h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_psh_blues_set_zones endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_blues_scale_zones proc near	; CODE XREF: _psh_globals_set_scale+C4p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_32		= byte ptr -32h
var_31		= byte ptr -31h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 3Ch
		push	edi
		lea	edi, [ebp+var_3C]
		mov	ecx, 0Fh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_C], 0
		cmp	[ebp+arg_4], 20C49BAh
		jl	short loc_2D7B
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+810h]
		shl	eax, 3
		cdq
		mov	ecx, 7Dh ; '}'
		idiv	ecx
		cmp	[ebp+arg_4], eax
		jge	short loc_2D69
		mov	[ebp+var_31], 1
		jmp	short loc_2D6D
; ---------------------------------------------------------------------------

loc_2D69:				; CODE XREF: _psh_blues_scale_zones+3Dj
		mov	[ebp+var_31], 0

loc_2D6D:				; CODE XREF: _psh_blues_scale_zones+43j
		mov	edx, [ebp+arg_0]
		mov	al, [ebp+var_31]
		mov	[edx+820h], al
		jmp	short loc_2DA5
; ---------------------------------------------------------------------------

loc_2D7B:				; CODE XREF: _psh_blues_scale_zones+24j
		imul	ecx, [ebp+arg_4], 7Dh
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+810h]
		shl	eax, 3
		cmp	ecx, eax
		jge	short loc_2D95
		mov	[ebp+var_32], 1
		jmp	short loc_2D99
; ---------------------------------------------------------------------------

loc_2D95:				; CODE XREF: _psh_blues_scale_zones+69j
		mov	[ebp+var_32], 0

loc_2D99:				; CODE XREF: _psh_blues_scale_zones+6Fj
		mov	ecx, [ebp+arg_0]
		mov	dl, [ebp+var_32]
		mov	[ecx+820h], dl

loc_2DA5:				; CODE XREF: _psh_blues_scale_zones+55j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+814h]
		mov	[ebp+var_10], ecx

loc_2DB1:				; CODE XREF: _psh_blues_scale_zones+B1j
		cmp	[ebp+var_10], 0
		jle	short loc_2DD7
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+var_10]
		push	eax
		call	_FT_MulFix_i386
		add	esp, 8
		cmp	eax, 20h ; ' '
		jle	short loc_2DD7
		mov	ecx, [ebp+var_10]
		sub	ecx, 1
		mov	[ebp+var_10], ecx
		jmp	short loc_2DB1
; ---------------------------------------------------------------------------

loc_2DD7:				; CODE XREF: _psh_blues_scale_zones+91j
					; _psh_blues_scale_zones+A6j
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_10]
		mov	[edx+818h], eax
		mov	[ebp+var_8], 0
		jmp	short loc_2DF5
; ---------------------------------------------------------------------------

loc_2DEC:				; CODE XREF: _psh_blues_scale_zones:loc_2EFAj
		mov	ecx, [ebp+var_8]
		add	ecx, 1
		mov	[ebp+var_8], ecx

loc_2DF5:				; CODE XREF: _psh_blues_scale_zones+C6j
		cmp	[ebp+var_8], 4
		jnb	loc_2EFF
		mov	edx, [ebp+var_8]
		mov	[ebp+var_38], edx
		cmp	[ebp+var_38], 0
		jz	short loc_2E19
		cmp	[ebp+var_38], 1
		jz	short loc_2E21
		cmp	[ebp+var_38], 2
		jz	short loc_2E2F
		jmp	short loc_2E3D
; ---------------------------------------------------------------------------

loc_2E19:				; CODE XREF: _psh_blues_scale_zones+E5j
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_C], eax
		jmp	short loc_2E48
; ---------------------------------------------------------------------------

loc_2E21:				; CODE XREF: _psh_blues_scale_zones+EBj
		mov	ecx, [ebp+arg_0]
		add	ecx, 204h
		mov	[ebp+var_C], ecx
		jmp	short loc_2E48
; ---------------------------------------------------------------------------

loc_2E2F:				; CODE XREF: _psh_blues_scale_zones+F1j
		mov	edx, [ebp+arg_0]
		add	edx, 408h
		mov	[ebp+var_C], edx
		jmp	short loc_2E48
; ---------------------------------------------------------------------------

loc_2E3D:				; CODE XREF: _psh_blues_scale_zones+F3j
		mov	eax, [ebp+arg_0]
		add	eax, 60Ch
		mov	[ebp+var_C], eax

loc_2E48:				; CODE XREF: _psh_blues_scale_zones+FBj
					; _psh_blues_scale_zones+109j ...
		mov	ecx, [ebp+var_C]
		add	ecx, 4
		mov	[ebp+var_14], ecx
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		mov	[ebp+var_4], eax
		jmp	short loc_2E6D
; ---------------------------------------------------------------------------

loc_2E5B:				; CODE XREF: _psh_blues_scale_zones+1D1j
		mov	ecx, [ebp+var_4]
		sub	ecx, 1
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+var_14]
		add	edx, 20h ; ' '
		mov	[ebp+var_14], edx

loc_2E6D:				; CODE XREF: _psh_blues_scale_zones+135j
		cmp	[ebp+var_4], 0
		jbe	loc_2EFA
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_14]
		mov	edx, [ecx+8]
		push	edx
		call	_FT_MulFix_i386
		add	esp, 8
		add	eax, [ebp+arg_8]
		mov	ecx, [ebp+var_14]
		mov	[ecx+1Ch], eax
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+0Ch]
		push	ecx
		call	_FT_MulFix_i386
		add	esp, 8
		add	eax, [ebp+arg_8]
		mov	edx, [ebp+var_14]
		mov	[edx+18h], eax
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_14]
		mov	edx, [ecx]
		push	edx
		call	_FT_MulFix_i386
		add	esp, 8
		add	eax, [ebp+arg_8]
		mov	ecx, [ebp+var_14]
		mov	[ecx+10h], eax
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		push	ecx
		call	_FT_MulFix_i386
		add	esp, 8
		mov	edx, [ebp+var_14]
		mov	[edx+14h], eax
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+10h]
		add	ecx, 20h ; ' '
		and	ecx, 0FFFFFFC0h
		mov	edx, [ebp+var_14]
		mov	[edx+10h], ecx
		jmp	loc_2E5B
; ---------------------------------------------------------------------------

loc_2EFA:				; CODE XREF: _psh_blues_scale_zones+14Dj
		jmp	loc_2DEC
; ---------------------------------------------------------------------------

loc_2EFF:				; CODE XREF: _psh_blues_scale_zones+D5j
		mov	[ebp+var_8], 0
		jmp	short loc_2F11
; ---------------------------------------------------------------------------

loc_2F08:				; CODE XREF: _psh_blues_scale_zones:loc_3013j
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax

loc_2F11:				; CODE XREF: _psh_blues_scale_zones+1E2j
		cmp	[ebp+var_8], 2
		jnb	loc_3018
		mov	ecx, [ebp+var_8]
		mov	[ebp+var_3C], ecx
		cmp	[ebp+var_3C], 0
		jz	short loc_2F29
		jmp	short loc_2F3C
; ---------------------------------------------------------------------------

loc_2F29:				; CODE XREF: _psh_blues_scale_zones+201j
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_28], edx
		mov	eax, [ebp+arg_0]
		add	eax, 408h
		mov	[ebp+var_2C], eax
		jmp	short loc_2F54
; ---------------------------------------------------------------------------

loc_2F3C:				; CODE XREF: _psh_blues_scale_zones+203j
		mov	ecx, [ebp+arg_0]
		add	ecx, 204h
		mov	[ebp+var_28], ecx
		mov	edx, [ebp+arg_0]
		add	edx, 60Ch
		mov	[ebp+var_2C], edx

loc_2F54:				; CODE XREF: _psh_blues_scale_zones+216j
		mov	eax, [ebp+var_28]
		add	eax, 4
		mov	[ebp+var_18], eax
		mov	ecx, [ebp+var_28]
		mov	edx, [ecx]
		mov	[ebp+var_20], edx
		jmp	short loc_2F79
; ---------------------------------------------------------------------------

loc_2F67:				; CODE XREF: _psh_blues_scale_zones:loc_300Ej
		mov	eax, [ebp+var_20]
		sub	eax, 1
		mov	[ebp+var_20], eax
		mov	ecx, [ebp+var_18]
		add	ecx, 20h ; ' '
		mov	[ebp+var_18], ecx

loc_2F79:				; CODE XREF: _psh_blues_scale_zones+241j
		cmp	[ebp+var_20], 0
		jbe	loc_3013
		mov	edx, [ebp+var_2C]
		add	edx, 4
		mov	[ebp+var_1C], edx
		mov	eax, [ebp+var_2C]
		mov	ecx, [eax]
		mov	[ebp+var_24], ecx
		jmp	short loc_2FA8
; ---------------------------------------------------------------------------

loc_2F96:				; CODE XREF: _psh_blues_scale_zones:loc_300Cj
		mov	edx, [ebp+var_24]
		sub	edx, 1
		mov	[ebp+var_24], edx
		mov	eax, [ebp+var_1C]
		add	eax, 20h ; ' '
		mov	[ebp+var_1C], eax

loc_2FA8:				; CODE XREF: _psh_blues_scale_zones+270j
		cmp	[ebp+var_24], 0
		jbe	short loc_300E
		mov	ecx, [ebp+var_18]
		mov	edx, [ebp+var_1C]
		mov	eax, [ecx]
		sub	eax, [edx]
		mov	[ebp+var_30], eax
		jns	short loc_2FC5
		mov	ecx, [ebp+var_30]
		neg	ecx
		mov	[ebp+var_30], ecx

loc_2FC5:				; CODE XREF: _psh_blues_scale_zones+297j
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+var_30]
		push	eax
		call	_FT_MulFix_i386
		add	esp, 8
		cmp	eax, 40h ; '@'
		jge	short loc_300C
		mov	ecx, [ebp+var_18]
		mov	edx, [ebp+var_1C]
		mov	eax, [edx+1Ch]
		mov	[ecx+1Ch], eax
		mov	ecx, [ebp+var_18]
		mov	edx, [ebp+var_1C]
		mov	eax, [edx+18h]
		mov	[ecx+18h], eax
		mov	ecx, [ebp+var_18]
		mov	edx, [ebp+var_1C]
		mov	eax, [edx+10h]
		mov	[ecx+10h], eax
		mov	ecx, [ebp+var_18]
		mov	edx, [ebp+var_1C]
		mov	eax, [edx+14h]
		mov	[ecx+14h], eax
		jmp	short loc_300E
; ---------------------------------------------------------------------------

loc_300C:				; CODE XREF: _psh_blues_scale_zones+2B4j
		jmp	short loc_2F96
; ---------------------------------------------------------------------------

loc_300E:				; CODE XREF: _psh_blues_scale_zones+288j
					; _psh_blues_scale_zones+2E6j
		jmp	loc_2F67
; ---------------------------------------------------------------------------

loc_3013:				; CODE XREF: _psh_blues_scale_zones+259j
		jmp	loc_2F08
; ---------------------------------------------------------------------------

loc_3018:				; CODE XREF: _psh_blues_scale_zones+1F1j
		pop	edi
		add	esp, 3Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_psh_blues_scale_zones endp

; ---------------------------------------------------------------------------
		db 0Dh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_calc_max_height proc near		; CODE XREF: _psh_globals_new+1F0p
					; _psh_globals_new+210p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= word ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], 0
		jmp	short loc_305A
; ---------------------------------------------------------------------------

loc_3051:				; CODE XREF: _psh_calc_max_height:loc_3091j
		mov	eax, [ebp+var_4]
		add	eax, 2
		mov	[ebp+var_4], eax

loc_305A:				; CODE XREF: _psh_calc_max_height+1Bj
		mov	ecx, [ebp+var_4]
		cmp	ecx, [ebp+arg_0]
		jnb	short loc_3093
		mov	edx, [ebp+var_4]
		mov	eax, [ebp+arg_4]
		movsx	ecx, word ptr [eax+edx*2+2]
		mov	edx, [ebp+var_4]
		mov	eax, [ebp+arg_4]
		movsx	edx, word ptr [eax+edx*2]
		sub	ecx, edx
		mov	word ptr [ebp+var_8], cx
		movsx	eax, word ptr [ebp+var_8]
		movsx	ecx, [ebp+arg_8]
		cmp	eax, ecx
		jle	short loc_3091
		mov	dx, word ptr [ebp+var_8]
		mov	[ebp+arg_8], dx

loc_3091:				; CODE XREF: _psh_calc_max_height+53j
		jmp	short loc_3051
; ---------------------------------------------------------------------------

loc_3093:				; CODE XREF: _psh_calc_max_height+2Cj
		mov	ax, [ebp+arg_8]
		mov	esp, ebp
		pop	ebp
		retn
_psh_calc_max_height endp

; ---------------------------------------------------------------------------
		db 9 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_globals_destroy proc near		; DATA XREF: _psh_globals_funcs_init+19o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		cmp	[ebp+arg_0], 0
		jz	short loc_3132
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_4], ecx
		mov	edx, 0CCh ; 'Ì'
		imul	eax, edx, 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+eax+4], 0
		mov	edx, 0CCh ; 'Ì'
		shl	edx, 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+edx+4], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+19Ch], 0
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+3A0h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+5A4h], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+7A8h], 0

loc_3117:				; CODE XREF: _psh_globals_destroy+8Cj
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		call	_ft_mem_free
		add	esp, 8
		mov	[ebp+arg_0], 0
		xor	ecx, ecx
		jnz	short loc_3117

loc_3132:				; CODE XREF: _psh_globals_destroy+Fj
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_psh_globals_destroy endp

; ---------------------------------------------------------------------------
		db 4 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_globals_new proc near		; DATA XREF: _psh_globals_funcs_init+6o

var_34		= dword	ptr -34h
var_30		= word ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 34h
		push	edi
		lea	edi, [ebp+var_34]
		mov	ecx, 0Dh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_4], 0
		lea	eax, [ebp+var_C]
		push	eax
		push	9C0h
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ft_mem_alloc
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_C], 0
		jnz	loc_3453
		mov	edx, [ebp+var_4]
		mov	eax, [ebp+arg_0]
		mov	[edx], eax
		mov	ecx, 0CCh ; 'Ì'
		shl	ecx, 0
		mov	edx, [ebp+var_4]
		lea	eax, [edx+ecx+4]
		mov	[ebp+var_1C], eax
		mov	ecx, [ebp+var_1C]
		add	ecx, 4
		mov	[ebp+var_20], ecx
		mov	edx, 2
		imul	eax, edx, 0
		mov	ecx, [ebp+arg_4]
		movzx	edx, word ptr [ecx+eax+78h]
		mov	eax, [ebp+var_20]
		mov	[eax], edx
		mov	ecx, [ebp+var_20]
		add	ecx, 0Ch
		mov	[ebp+var_20], ecx
		mov	edx, [ebp+arg_4]
		add	edx, 80h ; ''
		mov	[ebp+var_18], edx
		mov	eax, [ebp+arg_4]
		movzx	ecx, byte ptr [eax+7Ch]
		mov	[ebp+var_14], ecx
		jmp	short loc_31E5
; ---------------------------------------------------------------------------

loc_31DC:				; CODE XREF: _psh_globals_new+C4j
		mov	edx, [ebp+var_14]
		sub	edx, 1
		mov	[ebp+var_14], edx

loc_31E5:				; CODE XREF: _psh_globals_new+96j
		cmp	[ebp+var_14], 0
		jbe	short loc_320A
		mov	eax, [ebp+var_18]
		movsx	ecx, word ptr [eax]
		mov	edx, [ebp+var_20]
		mov	[edx], ecx
		mov	eax, [ebp+var_20]
		add	eax, 0Ch
		mov	[ebp+var_20], eax
		mov	ecx, [ebp+var_18]
		add	ecx, 2
		mov	[ebp+var_18], ecx
		jmp	short loc_31DC
; ---------------------------------------------------------------------------

loc_320A:				; CODE XREF: _psh_globals_new+A5j
		mov	edx, [ebp+arg_4]
		movzx	eax, byte ptr [edx+7Ch]
		add	eax, 1
		mov	ecx, [ebp+var_1C]
		mov	[ecx], eax
		mov	edx, 0CCh ; 'Ì'
		imul	eax, edx, 0
		mov	ecx, [ebp+var_4]
		lea	edx, [ecx+eax+4]
		mov	[ebp+var_24], edx
		mov	eax, [ebp+var_24]
		add	eax, 4
		mov	[ebp+var_28], eax
		mov	ecx, 2
		imul	edx, ecx, 0
		mov	eax, [ebp+arg_4]
		movzx	ecx, word ptr [eax+edx+7Ah]
		mov	edx, [ebp+var_28]
		mov	[edx], ecx
		mov	eax, [ebp+var_28]
		add	eax, 0Ch
		mov	[ebp+var_28], eax
		mov	ecx, [ebp+arg_4]
		add	ecx, 9Ah ; ''
		mov	[ebp+var_18], ecx
		mov	edx, [ebp+arg_4]
		movzx	eax, byte ptr [edx+7Dh]
		mov	[ebp+var_14], eax
		jmp	short loc_3273
; ---------------------------------------------------------------------------

loc_326A:				; CODE XREF: _psh_globals_new+152j
		mov	ecx, [ebp+var_14]
		sub	ecx, 1
		mov	[ebp+var_14], ecx

loc_3273:				; CODE XREF: _psh_globals_new+124j
		cmp	[ebp+var_14], 0
		jbe	short loc_3298
		mov	edx, [ebp+var_18]
		movsx	eax, word ptr [edx]
		mov	ecx, [ebp+var_28]
		mov	[ecx], eax
		mov	edx, [ebp+var_28]
		add	edx, 0Ch
		mov	[ebp+var_28], edx
		mov	eax, [ebp+var_18]
		add	eax, 2
		mov	[ebp+var_18], eax
		jmp	short loc_326A
; ---------------------------------------------------------------------------

loc_3298:				; CODE XREF: _psh_globals_new+133j
		mov	ecx, [ebp+arg_4]
		movzx	edx, byte ptr [ecx+7Dh]
		add	edx, 1
		mov	eax, [ebp+var_24]
		mov	[eax], edx
		push	0
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+74h]
		push	edx
		mov	eax, [ebp+arg_4]
		add	eax, 28h ; '('
		push	eax
		mov	ecx, [ebp+arg_4]
		movzx	edx, byte ptr [ecx+9]
		push	edx
		mov	eax, [ebp+arg_4]
		add	eax, 0Ch
		push	eax
		mov	ecx, [ebp+arg_4]
		movzx	edx, byte ptr [ecx+8]
		push	edx
		mov	eax, [ebp+var_4]
		add	eax, 19Ch
		push	eax
		call	_psh_blues_set_zones
		add	esp, 1Ch
		push	1
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+74h]
		push	edx
		mov	eax, [ebp+arg_4]
		add	eax, 58h ; 'X'
		push	eax
		mov	ecx, [ebp+arg_4]
		movzx	edx, byte ptr [ecx+0Bh]
		push	edx
		mov	eax, [ebp+arg_4]
		add	eax, 3Ch ; '<'
		push	eax
		mov	ecx, [ebp+arg_4]
		movzx	edx, byte ptr [ecx+0Ah]
		push	edx
		mov	eax, [ebp+var_4]
		add	eax, 19Ch
		push	eax
		call	_psh_blues_set_zones
		add	esp, 1Ch
		mov	ecx, 1
		mov	[ebp+var_30], cx
		movzx	edx, [ebp+var_30]
		push	edx
		mov	eax, [ebp+arg_4]
		add	eax, 0Ch
		push	eax
		mov	ecx, [ebp+arg_4]
		movzx	edx, byte ptr [ecx+8]
		push	edx
		call	_psh_calc_max_height
		add	esp, 0Ch
		mov	[ebp+var_30], ax
		movzx	eax, [ebp+var_30]
		push	eax
		mov	ecx, [ebp+arg_4]
		add	ecx, 28h ; '('
		push	ecx
		mov	edx, [ebp+arg_4]
		movzx	eax, byte ptr [edx+9]
		push	eax
		call	_psh_calc_max_height
		add	esp, 0Ch
		mov	[ebp+var_30], ax
		movzx	ecx, [ebp+var_30]
		push	ecx
		mov	edx, [ebp+arg_4]
		add	edx, 3Ch ; '<'
		push	edx
		mov	eax, [ebp+arg_4]
		movzx	ecx, byte ptr [eax+0Ah]
		push	ecx
		call	_psh_calc_max_height
		add	esp, 0Ch
		mov	[ebp+var_30], ax
		movzx	edx, [ebp+var_30]
		push	edx
		mov	eax, [ebp+arg_4]
		add	eax, 58h ; 'X'
		push	eax
		mov	ecx, [ebp+arg_4]
		movzx	edx, byte ptr [ecx+0Bh]
		push	edx
		call	_psh_calc_max_height
		add	esp, 0Ch
		mov	[ebp+var_30], ax
		movsx	eax, [ebp+var_30]
		push	eax
		push	3E8h
		call	_FT_DivFix
		add	esp, 8
		mov	[ebp+var_2C], eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+6Ch]
		cmp	edx, [ebp+var_2C]
		jge	short loc_33CB
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+6Ch]
		mov	[ebp+var_34], ecx
		jmp	short loc_33D1
; ---------------------------------------------------------------------------

loc_33CB:				; CODE XREF: _psh_globals_new+27Aj
		mov	edx, [ebp+var_2C]
		mov	[ebp+var_34], edx

loc_33D1:				; CODE XREF: _psh_globals_new+285j
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+var_34]
		mov	[eax+9ACh], ecx
		mov	edx, [ebp+var_4]
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+70h]
		mov	[edx+9B0h], ecx
		mov	edx, [ebp+var_4]
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+74h]
		mov	[edx+9B8h], ecx
		mov	edx, 0CCh ; 'Ì'
		imul	eax, edx, 0
		mov	ecx, [ebp+var_4]
		mov	dword ptr [ecx+eax+0C8h], 0
		mov	edx, 0CCh ; 'Ì'
		imul	eax, edx, 0
		mov	ecx, [ebp+var_4]
		mov	dword ptr [ecx+eax+0CCh], 0
		mov	edx, 0CCh ; 'Ì'
		shl	edx, 0
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+edx+0C8h], 0
		mov	ecx, 0CCh ; 'Ì'
		shl	ecx, 0
		mov	edx, [ebp+var_4]
		mov	dword ptr [edx+ecx+0CCh], 0

loc_3453:				; CODE XREF: _psh_globals_new+39j
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+var_4]
		mov	[eax], ecx
		mov	eax, [ebp+var_C]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN14_1
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		add	esp, 34h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_psh_globals_new endp

; ---------------------------------------------------------------------------
		align 10h
$LN14_1		dd 1			; DATA XREF: _psh_globals_new+31Eo
		dd offset $LN13_2
$LN13_2		dd 0FFFFFFF4h, 4	; DATA XREF: .text$mn:00003484o
		dd offset $LN12_1	; "error"
$LN12_1		db 'error',0            ; DATA XREF: .text$mn:00003490o
		db 0Ah dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_hint_overlap proc near		; CODE XREF: _psh_hint_table_record+C7p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	ecx, [edx+4]
		mov	eax, [ebp+arg_4]
		cmp	ecx, [eax]
		jl	short loc_34DC
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		mov	eax, [ebp+arg_4]
		add	edx, [eax+4]
		mov	ecx, [ebp+arg_0]
		cmp	edx, [ecx]
		jl	short loc_34DC
		mov	[ebp+var_4], 1
		jmp	short loc_34E3
; ---------------------------------------------------------------------------

loc_34DC:				; CODE XREF: _psh_hint_overlap+1Bj
					; _psh_hint_overlap+2Dj
		mov	[ebp+var_4], 0

loc_34E3:				; CODE XREF: _psh_hint_overlap+36j
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
_psh_hint_overlap endp

; ---------------------------------------------------------------------------
		db 0Ah dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_hint_table_done proc near		; CODE XREF: _psh_glyph_done+28p
					; _psh_glyph_done+44p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp

loc_34F7:				; CODE XREF: _psh_hint_table_done+22j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+18h]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		call	_ft_mem_free
		add	esp, 8
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+18h], 0
		xor	ecx, ecx
		jnz	short loc_34F7
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+14h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+1Ch], 0

loc_352C:				; CODE XREF: _psh_hint_table_done+57j
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		call	_ft_mem_free
		add	esp, 8
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+0Ch], 0
		xor	edx, edx
		jnz	short loc_352C

loc_354D:				; CODE XREF: _psh_hint_table_done+78j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		call	_ft_mem_free
		add	esp, 8
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+8], 0
		xor	ecx, ecx
		jnz	short loc_354D
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+4], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+10h], 0
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_psh_hint_table_done endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_hint_table_deactivate proc	near	; CODE XREF: _psh_hint_table_activate_mask+40p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[ebp+var_8], eax
		jmp	short loc_35CD
; ---------------------------------------------------------------------------

loc_35BB:				; CODE XREF: _psh_hint_table_deactivate+58j
		mov	ecx, [ebp+var_4]
		sub	ecx, 1
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+var_8]
		add	edx, 1Ch
		mov	[ebp+var_8], edx

loc_35CD:				; CODE XREF: _psh_hint_table_deactivate+25j
		cmp	[ebp+var_4], 0
		jbe	short loc_35EE
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+10h]
		and	ecx, 0FFFFFFFBh
		mov	edx, [ebp+var_8]
		mov	[edx+10h], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+18h], 0FFFFFFFFh
		jmp	short loc_35BB
; ---------------------------------------------------------------------------

loc_35EE:				; CODE XREF: _psh_hint_table_deactivate+3Dj
		mov	esp, ebp
		pop	ebp
		retn
_psh_hint_table_deactivate endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_hint_table_record proc near	; CODE XREF: _psh_hint_table_record_mask+82p
					; _psh_hint_table_init+1E4p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		imul	eax, [ebp+arg_4], 1Ch
		mov	ecx, [ebp+arg_0]
		add	eax, [ecx+8]
		mov	[ebp+var_4], eax
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		cmp	eax, [edx]
		jb	short loc_364D

loc_3622:				; CODE XREF: _psh_hint_table_record+52j
		mov	ecx, 4
		imul	edx, ecx, 2Dh
		cmp	dword ptr ds:_ft_trace_levels[edx], 0
		jl	short loc_3644
		mov	eax, [ebp+arg_4]
		push	eax
		push	offset $SG8659	; "psh_hint_table_record: invalid hint ind"...
		call	_FT_Message
		add	esp, 8

loc_3644:				; CODE XREF: _psh_hint_table_record+3Dj
		xor	ecx, ecx
		jnz	short loc_3622
		jmp	loc_3726
; ---------------------------------------------------------------------------

loc_364D:				; CODE XREF: _psh_hint_table_record+2Cj
		mov	edx, [ebp+var_4]
		mov	eax, [edx+10h]
		and	eax, 4
		jz	short loc_365D
		jmp	loc_3726
; ---------------------------------------------------------------------------

loc_365D:				; CODE XREF: _psh_hint_table_record+62j
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+10h]
		or	edx, 4
		mov	eax, [ebp+var_4]
		mov	[eax+10h], edx
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+10h]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+var_4]
		mov	dword ptr [edx+14h], 0
		jmp	short loc_369C
; ---------------------------------------------------------------------------

loc_368A:				; CODE XREF: _psh_hint_table_record:loc_36D2j
		mov	eax, [ebp+var_C]
		sub	eax, 1
		mov	[ebp+var_C], eax
		mov	ecx, [ebp+var_8]
		add	ecx, 4
		mov	[ebp+var_8], ecx

loc_369C:				; CODE XREF: _psh_hint_table_record+94j
		cmp	[ebp+var_C], 0
		jbe	short loc_36D4
		mov	edx, 4
		imul	eax, edx, 0
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+eax]
		mov	[ebp+var_10], edx
		mov	eax, [ebp+var_10]
		push	eax
		mov	ecx, [ebp+var_4]
		push	ecx
		call	_psh_hint_overlap
		add	esp, 8
		test	eax, eax
		jz	short loc_36D2
		mov	edx, [ebp+var_4]
		mov	eax, [ebp+var_10]
		mov	[edx+14h], eax
		jmp	short loc_36D4
; ---------------------------------------------------------------------------

loc_36D2:				; CODE XREF: _psh_hint_table_record+D1j
		jmp	short loc_368A
; ---------------------------------------------------------------------------

loc_36D4:				; CODE XREF: _psh_hint_table_record+ACj
					; _psh_hint_table_record+DCj
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_0]
		mov	eax, [ecx+4]
		cmp	eax, [edx]
		jnb	short loc_3704
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+10h]
		mov	eax, [ebp+var_4]
		mov	[ecx+edx*4], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		add	edx, 1
		mov	eax, [ebp+arg_0]
		mov	[eax+4], edx
		jmp	short loc_3726
; ---------------------------------------------------------------------------

loc_3704:				; CODE XREF: _psh_hint_table_record+EBj
					; _psh_hint_table_record+130j
		mov	ecx, 4
		imul	edx, ecx, 2Dh
		cmp	dword ptr ds:_ft_trace_levels[edx], 0
		jl	short loc_3722
		push	offset $SG8674	; "psh_hint_table_record: too many sorted "...
		call	_FT_Message
		add	esp, 4

loc_3722:				; CODE XREF: _psh_hint_table_record+11Fj
		xor	eax, eax
		jnz	short loc_3704

loc_3726:				; CODE XREF: _psh_hint_table_record+54j
					; _psh_hint_table_record+64j ...
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_psh_hint_table_record endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_hint_table_record_mask proc near	; CODE XREF: _psh_hint_table_init+181p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], 0
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+8]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], 0
		jmp	short loc_377F
; ---------------------------------------------------------------------------

loc_3776:				; CODE XREF: _psh_hint_table_record_mask+92j
		mov	ecx, [ebp+var_10]
		add	ecx, 1
		mov	[ebp+var_10], ecx

loc_377F:				; CODE XREF: _psh_hint_table_record_mask+40j
		mov	edx, [ebp+var_10]
		cmp	edx, [ebp+var_14]
		jnb	short loc_37C8
		cmp	[ebp+var_4], 0
		jnz	short loc_37A6
		mov	eax, [ebp+var_C]
		movzx	ecx, byte ptr [eax]
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+var_C]
		add	edx, 1
		mov	[ebp+var_C], edx
		mov	[ebp+var_4], 80h ; ''

loc_37A6:				; CODE XREF: _psh_hint_table_record_mask+57j
		mov	eax, [ebp+var_8]
		and	eax, [ebp+var_4]
		jz	short loc_37BE
		mov	ecx, [ebp+var_10]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_psh_hint_table_record
		add	esp, 8

loc_37BE:				; CODE XREF: _psh_hint_table_record_mask+78j
		mov	eax, [ebp+var_4]
		sar	eax, 1
		mov	[ebp+var_4], eax
		jmp	short loc_3776
; ---------------------------------------------------------------------------

loc_37C8:				; CODE XREF: _psh_hint_table_record_mask+51j
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_psh_hint_table_record_mask endp

; ---------------------------------------------------------------------------
		db 0Eh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_hint_table_init proc near		; CODE XREF: _psh_glyph_init+390p
					; _psh_glyph_init+3E7p

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_20], eax
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_C]
		mov	[ebp+arg_C], eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		mov	[ebp+var_4], edx
		lea	eax, [ebp+var_C]
		push	eax
		push	0
		mov	ecx, [ebp+var_4]
		shl	ecx, 1
		push	ecx
		push	0
		push	4
		mov	edx, [ebp+arg_10]
		push	edx
		call	_ft_mem_realloc
		add	esp, 18h
		mov	ecx, [ebp+arg_0]
		mov	[ecx+0Ch], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_388D
		lea	edx, [ebp+var_C]
		push	edx
		push	0
		mov	eax, [ebp+var_4]
		push	eax
		push	0
		push	1Ch
		mov	ecx, [ebp+arg_10]
		push	ecx
		call	_ft_mem_realloc
		add	esp, 18h
		mov	edx, [ebp+arg_0]
		mov	[edx+8], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_388D
		lea	eax, [ebp+var_C]
		push	eax
		push	0
		mov	ecx, [ebp+var_4]
		lea	edx, [ecx+ecx+1]
		push	edx
		push	0
		push	10h
		mov	eax, [ebp+arg_10]
		push	eax
		call	_ft_mem_realloc
		add	esp, 18h
		mov	ecx, [ebp+arg_0]
		mov	[ecx+18h], eax
		cmp	[ebp+var_C], 0
		jz	short loc_3892

loc_388D:				; CODE XREF: _psh_hint_table_init+57j
					; _psh_hint_table_init+7Dj
		jmp	$Exit$23_0
; ---------------------------------------------------------------------------

loc_3892:				; CODE XREF: _psh_hint_table_init+A7j
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_4]
		mov	[edx], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		mov	eax, [ebp+var_4]
		lea	ecx, [edx+eax*4]
		mov	edx, [ebp+arg_0]
		mov	[edx+10h], ecx
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+4], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+14h], 0
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+1Ch], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	[ebp+var_14], ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+8]
		mov	[ebp+var_18], eax
		jmp	short loc_38F9
; ---------------------------------------------------------------------------

loc_38DE:				; CODE XREF: _psh_hint_table_init+13Dj
		mov	ecx, [ebp+var_4]
		sub	ecx, 1
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+var_14]
		add	edx, 1Ch
		mov	[ebp+var_14], edx
		mov	eax, [ebp+var_18]
		add	eax, 0Ch
		mov	[ebp+var_18], eax

loc_38F9:				; CODE XREF: _psh_hint_table_init+F8j
		cmp	[ebp+var_4], 0
		jbe	short loc_3923
		mov	ecx, [ebp+var_14]
		mov	edx, [ebp+var_18]
		mov	eax, [edx]
		mov	[ecx], eax
		mov	ecx, [ebp+var_14]
		mov	edx, [ebp+var_18]
		mov	eax, [edx+4]
		mov	[ecx+4], eax
		mov	ecx, [ebp+var_14]
		mov	edx, [ebp+var_18]
		mov	eax, [edx+8]
		mov	[ecx+10h], eax
		jmp	short loc_38DE
; ---------------------------------------------------------------------------

loc_3923:				; CODE XREF: _psh_hint_table_init+119j
		cmp	[ebp+arg_8], 0
		jz	short loc_396F
		mov	ecx, [ebp+arg_8]
		mov	edx, [ecx+8]
		mov	[ebp+var_1C], edx
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_8]
		mov	[edx+20h], eax
		jmp	short loc_3957
; ---------------------------------------------------------------------------

loc_3945:				; CODE XREF: _psh_hint_table_init+189j
		mov	ecx, [ebp+var_4]
		sub	ecx, 1
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+var_1C]
		add	edx, 10h
		mov	[ebp+var_1C], edx

loc_3957:				; CODE XREF: _psh_hint_table_init+15Fj
		cmp	[ebp+var_4], 0
		jbe	short loc_396F
		mov	eax, [ebp+var_1C]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_psh_hint_table_record_mask
		add	esp, 8
		jmp	short loc_3945
; ---------------------------------------------------------------------------

loc_396F:				; CODE XREF: _psh_hint_table_init+143j
					; _psh_hint_table_init+177j
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_0]
		mov	ecx, [edx+4]
		cmp	ecx, [eax]
		jz	short $Exit$23_0

loc_397C:				; CODE XREF: _psh_hint_table_init+1B8j
		mov	edx, 4
		imul	eax, edx, 2Dh
		cmp	dword ptr ds:_ft_trace_levels[eax], 0
		jl	short loc_399A
		push	offset $SG8730	; "psh_hint_table_init:	missing/incorrect "...
		call	_FT_Message
		add	esp, 4

loc_399A:				; CODE XREF: _psh_hint_table_init+1A7j
		xor	ecx, ecx
		jnz	short loc_397C
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	[ebp+var_4], eax
		mov	[ebp+var_20], 0
		jmp	short loc_39B8
; ---------------------------------------------------------------------------

loc_39AF:				; CODE XREF: _psh_hint_table_init+1ECj
		mov	ecx, [ebp+var_20]
		add	ecx, 1
		mov	[ebp+var_20], ecx

loc_39B8:				; CODE XREF: _psh_hint_table_init+1C9j
		mov	edx, [ebp+var_20]
		cmp	edx, [ebp+var_4]
		jnb	short $Exit$23_0
		mov	eax, [ebp+var_20]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_psh_hint_table_record
		add	esp, 8
		jmp	short loc_39AF
; ---------------------------------------------------------------------------

$Exit$23_0:				; CODE XREF: _psh_hint_table_init:loc_388Dj
					; _psh_hint_table_init+196j ...
		mov	eax, [ebp+var_C]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN22_0
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		add	esp, 20h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_psh_hint_table_init endp

; ---------------------------------------------------------------------------
$LN22_0		dd 1			; DATA XREF: _psh_hint_table_init+1F5o
		dd offset $LN21_2
$LN21_2		dd 0FFFFFFF4h, 4	; DATA XREF: .text$mn:000039F8o
		dd offset $LN20_2	; "error"
$LN20_2		db 'error',0            ; DATA XREF: .text$mn:00003A04o
		db 6 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_hint_table_activate_mask proc near	; CODE XREF: _psh_glyph_find_strong_points+145p
					; _psh_glyph_find_strong_points+199p

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 34h
		push	edi
		lea	edi, [ebp+var_34]
		mov	ecx, 0Dh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_4], 0
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+8]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		mov	[ebp+var_14], eax
		mov	[ebp+var_18], 0
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_psh_hint_table_deactivate
		add	esp, 4
		mov	[ebp+var_10], 0
		jmp	short loc_3A6E
; ---------------------------------------------------------------------------

loc_3A65:				; CODE XREF: _psh_hint_table_activate_mask+10Fj
		mov	edx, [ebp+var_10]
		add	edx, 1
		mov	[ebp+var_10], edx

loc_3A6E:				; CODE XREF: _psh_hint_table_activate_mask+4Fj
		mov	eax, [ebp+var_10]
		cmp	eax, [ebp+var_14]
		jnb	loc_3B28
		cmp	[ebp+var_4], 0
		jnz	short loc_3A99
		mov	ecx, [ebp+var_C]
		movzx	edx, byte ptr [ecx]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_C]
		add	eax, 1
		mov	[ebp+var_C], eax
		mov	[ebp+var_4], 80h ; ''

loc_3A99:				; CODE XREF: _psh_hint_table_activate_mask+6Aj
		mov	ecx, [ebp+var_8]
		and	ecx, [ebp+var_4]
		jz	short loc_3B1B
		imul	edx, [ebp+var_10], 1Ch
		mov	eax, [ebp+arg_0]
		add	edx, [eax+8]
		mov	[ebp+var_1C], edx
		mov	ecx, [ebp+var_1C]
		mov	edx, [ecx+10h]
		and	edx, 4
		jnz	short loc_3B1B
		mov	[ebp+var_20], 0
		cmp	[ebp+var_20], 0
		jnz	short loc_3B1B
		mov	eax, [ebp+var_1C]
		mov	ecx, [eax+10h]
		or	ecx, 4
		mov	edx, [ebp+var_1C]
		mov	[edx+10h], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_18]
		cmp	ecx, [eax]
		jnb	short loc_3AF9
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+0Ch]
		mov	ecx, [ebp+var_18]
		mov	edx, [ebp+var_1C]
		mov	[eax+ecx*4], edx
		mov	eax, [ebp+var_18]
		add	eax, 1
		mov	[ebp+var_18], eax
		jmp	short loc_3B1B
; ---------------------------------------------------------------------------

loc_3AF9:				; CODE XREF: _psh_hint_table_activate_mask+C9j
					; _psh_hint_table_activate_mask+105j
		mov	ecx, 4
		imul	edx, ecx, 2Dh
		cmp	dword ptr ds:_ft_trace_levels[edx], 0
		jl	short loc_3B17
		push	offset $SG8761	; "psh_hint_tableactivate_mask:	too many a"...
		call	_FT_Message
		add	esp, 4

loc_3B17:				; CODE XREF: _psh_hint_table_activate_mask+F4j
		xor	eax, eax
		jnz	short loc_3AF9

loc_3B1B:				; CODE XREF: _psh_hint_table_activate_mask+8Bj
					; _psh_hint_table_activate_mask+A3j ...
		mov	ecx, [ebp+var_4]
		sar	ecx, 1
		mov	[ebp+var_4], ecx
		jmp	loc_3A65
; ---------------------------------------------------------------------------

loc_3B28:				; CODE XREF: _psh_hint_table_activate_mask+60j
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_18]
		mov	[edx+4], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		mov	[ebp+var_34], edx
		mov	[ebp+var_24], 1
		jmp	short loc_3B4C
; ---------------------------------------------------------------------------

loc_3B43:				; CODE XREF: _psh_hint_table_activate_mask:loc_3BAFj
		mov	eax, [ebp+var_24]
		add	eax, 1
		mov	[ebp+var_24], eax

loc_3B4C:				; CODE XREF: _psh_hint_table_activate_mask+12Dj
		mov	ecx, [ebp+var_24]
		cmp	ecx, [ebp+var_18]
		jge	short loc_3BB1
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_34]
		mov	ecx, [eax+edx*4]
		mov	[ebp+var_2C], ecx
		mov	edx, [ebp+var_24]
		sub	edx, 1
		mov	[ebp+var_28], edx
		jmp	short loc_3B74
; ---------------------------------------------------------------------------

loc_3B6B:				; CODE XREF: _psh_hint_table_activate_mask+199j
		mov	eax, [ebp+var_28]
		sub	eax, 1
		mov	[ebp+var_28], eax

loc_3B74:				; CODE XREF: _psh_hint_table_activate_mask+155j
		cmp	[ebp+var_28], 0
		jl	short loc_3BAF
		mov	ecx, [ebp+var_28]
		mov	edx, [ebp+var_34]
		mov	eax, [edx+ecx*4]
		mov	[ebp+var_30], eax
		mov	ecx, [ebp+var_30]
		mov	edx, [ebp+var_2C]
		mov	eax, [ecx]
		cmp	eax, [edx]
		jge	short loc_3B94
		jmp	short loc_3BAF
; ---------------------------------------------------------------------------

loc_3B94:				; CODE XREF: _psh_hint_table_activate_mask+17Cj
		mov	ecx, [ebp+var_28]
		mov	edx, [ebp+var_34]
		mov	eax, [ebp+var_30]
		mov	[edx+ecx*4+4], eax
		mov	ecx, [ebp+var_28]
		mov	edx, [ebp+var_34]
		mov	eax, [ebp+var_2C]
		mov	[edx+ecx*4], eax
		jmp	short loc_3B6B
; ---------------------------------------------------------------------------

loc_3BAF:				; CODE XREF: _psh_hint_table_activate_mask+164j
					; _psh_hint_table_activate_mask+17Ej
		jmp	short loc_3B43
; ---------------------------------------------------------------------------

loc_3BB1:				; CODE XREF: _psh_hint_table_activate_mask+13Ej
		pop	edi
		add	esp, 34h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_psh_hint_table_activate_mask endp

; ---------------------------------------------------------------------------
		db 4 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_dimension_quantize_len proc near	; CODE XREF: _psh_hint_align+300p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		cmp	[ebp+arg_4], 40h ; '@'
		jg	short loc_3BE1
		mov	[ebp+arg_4], 40h ; '@'
		jmp	loc_3C8A
; ---------------------------------------------------------------------------

loc_3BE1:				; CODE XREF: _psh_dimension_quantize_len+Fj
		mov	eax, 0Ch
		imul	ecx, eax, 0
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		sub	eax, [edx+ecx+8]
		mov	[ebp+var_4], eax
		jns	short loc_3C00
		mov	ecx, [ebp+var_4]
		neg	ecx
		mov	[ebp+var_4], ecx

loc_3C00:				; CODE XREF: _psh_dimension_quantize_len+32j
		cmp	[ebp+var_4], 28h ; '('
		jge	short loc_3C25
		mov	edx, 0Ch
		imul	eax, edx, 0
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+eax+8]
		mov	[ebp+arg_4], edx
		cmp	[ebp+arg_4], 30h ; '0'
		jge	short loc_3C25
		mov	[ebp+arg_4], 30h ; '0'

loc_3C25:				; CODE XREF: _psh_dimension_quantize_len+40j
					; _psh_dimension_quantize_len+58j
		cmp	[ebp+arg_4], 0C0h ; 'À'
		jge	short loc_3C7E
		mov	eax, [ebp+arg_4]
		and	eax, 3Fh
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_4]
		and	ecx, 0FFFFFFC0h
		mov	[ebp+arg_4], ecx
		cmp	[ebp+var_4], 0Ah
		jge	short loc_3C51
		mov	edx, [ebp+arg_4]
		add	edx, [ebp+var_4]
		mov	[ebp+arg_4], edx
		jmp	short loc_3C7C
; ---------------------------------------------------------------------------

loc_3C51:				; CODE XREF: _psh_dimension_quantize_len+80j
		cmp	[ebp+var_4], 20h ; ' '
		jge	short loc_3C62
		mov	eax, [ebp+arg_4]
		add	eax, 0Ah
		mov	[ebp+arg_4], eax
		jmp	short loc_3C7C
; ---------------------------------------------------------------------------

loc_3C62:				; CODE XREF: _psh_dimension_quantize_len+91j
		cmp	[ebp+var_4], 36h ; '6'
		jge	short loc_3C73
		mov	ecx, [ebp+arg_4]
		add	ecx, 36h ; '6'
		mov	[ebp+arg_4], ecx
		jmp	short loc_3C7C
; ---------------------------------------------------------------------------

loc_3C73:				; CODE XREF: _psh_dimension_quantize_len+A2j
		mov	edx, [ebp+arg_4]
		add	edx, [ebp+var_4]
		mov	[ebp+arg_4], edx

loc_3C7C:				; CODE XREF: _psh_dimension_quantize_len+8Bj
					; _psh_dimension_quantize_len+9Cj ...
		jmp	short loc_3C8A
; ---------------------------------------------------------------------------

loc_3C7E:				; CODE XREF: _psh_dimension_quantize_len+68j
		mov	eax, [ebp+arg_4]
		add	eax, 20h ; ' '
		and	eax, 0FFFFFFC0h
		mov	[ebp+arg_4], eax

loc_3C8A:				; CODE XREF: _psh_dimension_quantize_len+18j
					; _psh_dimension_quantize_len:loc_3C7Cj
		movzx	ecx, [ebp+arg_8]
		test	ecx, ecx
		jz	short loc_3C9E
		mov	edx, [ebp+arg_4]
		add	edx, 20h ; ' '
		and	edx, 0FFFFFFC0h
		mov	[ebp+arg_4], edx

loc_3C9E:				; CODE XREF: _psh_dimension_quantize_len+CCj
		mov	eax, [ebp+arg_4]
		mov	esp, ebp
		pop	ebp
		retn
_psh_dimension_quantize_len endp

; ---------------------------------------------------------------------------
		db 0Fh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_hint_snap_stem_side_delta proc near ; CODE	XREF: _psh_hint_align+313p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		add	eax, 20h ; ' '
		and	eax, 0FFFFFFC0h
		sub	eax, [ebp+arg_0]
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_0]
		lea	eax, [edx+ecx+20h]
		and	eax, 0FFFFFFC0h
		sub	eax, [ebp+arg_0]
		sub	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		cmp	[ebp+var_4], 0
		jge	short loc_3D00
		mov	ecx, [ebp+var_4]
		neg	ecx
		mov	[ebp+var_C], ecx
		jmp	short loc_3D06
; ---------------------------------------------------------------------------

loc_3D00:				; CODE XREF: _psh_hint_snap_stem_side_delta+40j
		mov	edx, [ebp+var_4]
		mov	[ebp+var_C], edx

loc_3D06:				; CODE XREF: _psh_hint_snap_stem_side_delta+4Aj
		cmp	[ebp+var_8], 0
		jge	short loc_3D16
		mov	eax, [ebp+var_8]
		neg	eax
		mov	[ebp+var_10], eax
		jmp	short loc_3D1C
; ---------------------------------------------------------------------------

loc_3D16:				; CODE XREF: _psh_hint_snap_stem_side_delta+56j
		mov	ecx, [ebp+var_8]
		mov	[ebp+var_10], ecx

loc_3D1C:				; CODE XREF: _psh_hint_snap_stem_side_delta+60j
		mov	edx, [ebp+var_C]
		cmp	edx, [ebp+var_10]
		jg	short loc_3D2B
		mov	eax, [ebp+var_4]
		jmp	short loc_3D2E
; ---------------------------------------------------------------------------
		jmp	short loc_3D2E
; ---------------------------------------------------------------------------

loc_3D2B:				; CODE XREF: _psh_hint_snap_stem_side_delta+6Ej
		mov	eax, [ebp+var_8]

loc_3D2E:				; CODE XREF: _psh_hint_snap_stem_side_delta+73j
					; _psh_hint_snap_stem_side_delta+75j
		mov	esp, ebp
		pop	ebp
		retn
_psh_hint_snap_stem_side_delta endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_hint_align	proc near		; CODE XREF: _psh_hint_align+1D4p
					; _psh_hint_table_align_hints+4Fp

var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 64h
		push	edi
		lea	edi, [ebp+var_64]
		mov	ecx, 19h
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		imul	eax, [ebp+arg_8], 0CCh
		mov	ecx, [ebp+arg_4]
		lea	edx, [ecx+eax+4]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+0C4h]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx+0C8h]
		mov	[ebp+var_10], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+10h]
		and	edx, 8
		jnz	loc_4134
		mov	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		push	edx
		call	_FT_MulFix_i386
		add	esp, 8
		add	eax, [ebp+var_10]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		push	edx
		call	_FT_MulFix_i386
		add	esp, 8
		mov	[ebp+var_18], eax
		cmp	[ebp+arg_8], 0
		jnz	short loc_3DCB
		mov	eax, [ebp+arg_C]
		movzx	ecx, byte ptr [eax+78h]
		test	ecx, ecx
		jz	short loc_3DDC

loc_3DCB:				; CODE XREF: _psh_hint_align+8Aj
		cmp	[ebp+arg_8], 1
		jnz	short loc_3E02
		mov	edx, [ebp+arg_C]
		movzx	eax, byte ptr [edx+79h]
		test	eax, eax
		jnz	short loc_3E02

loc_3DDC:				; CODE XREF: _psh_hint_align+95j
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_14]
		mov	[ecx+8], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_18]
		mov	[eax+0Ch], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+10h]
		or	eax, 8
		mov	ecx, [ebp+arg_0]
		mov	[ecx+10h], eax
		jmp	loc_4134
; ---------------------------------------------------------------------------

loc_3E02:				; CODE XREF: _psh_hint_align+9Bj
					; _psh_hint_align+A6j
		cmp	[ebp+arg_8], 0
		jnz	short loc_3E13
		mov	edx, [ebp+arg_C]
		movzx	eax, byte ptr [edx+7Ah]
		test	eax, eax
		jnz	short loc_3E2D

loc_3E13:				; CODE XREF: _psh_hint_align+D2j
		cmp	[ebp+arg_8], 1
		jnz	short loc_3E24
		mov	ecx, [ebp+arg_C]
		movzx	edx, byte ptr [ecx+7Bh]
		test	edx, edx
		jnz	short loc_3E2D

loc_3E24:				; CODE XREF: _psh_hint_align+E3j
		mov	[ebp+var_5C], 0
		jmp	short loc_3E34
; ---------------------------------------------------------------------------

loc_3E2D:				; CODE XREF: _psh_hint_align+DDj
					; _psh_hint_align+EEj
		mov	[ebp+var_5C], 1

loc_3E34:				; CODE XREF: _psh_hint_align+F7j
		mov	eax, [ebp+var_5C]
		mov	[ebp+var_1C], eax
		mov	ecx, [ebp+var_18]
		mov	[ebp+var_20], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_20]
		mov	[edx+0Ch], eax
		mov	[ebp+var_30], 0
		mov	[ebp+var_2C], 0
		mov	ecx, [ebp+var_2C]
		mov	[ebp+var_28], ecx
		cmp	[ebp+arg_8], 1
		jnz	short loc_3E8B
		lea	edx, [ebp+var_30]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	ecx, [ebp+arg_0]
		add	eax, [ecx+4]
		push	eax
		mov	edx, [ebp+arg_4]
		add	edx, 19Ch
		push	edx
		call	_psh_blues_snap_stem
		add	esp, 10h

loc_3E8B:				; CODE XREF: _psh_hint_align+12Dj
		mov	eax, [ebp+var_30]
		mov	[ebp+var_60], eax
		cmp	[ebp+var_60], 1
		jz	short loc_3EA5
		cmp	[ebp+var_60], 2
		jz	short loc_3EB6
		cmp	[ebp+var_60], 3
		jz	short loc_3EC4
		jmp	short loc_3EDE
; ---------------------------------------------------------------------------

loc_3EA5:				; CODE XREF: _psh_hint_align+161j
		mov	ecx, [ebp+var_2C]
		sub	ecx, [ebp+var_20]
		mov	edx, [ebp+arg_0]
		mov	[edx+8], ecx
		jmp	loc_4061
; ---------------------------------------------------------------------------

loc_3EB6:				; CODE XREF: _psh_hint_align+167j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_28]
		mov	[eax+8], ecx
		jmp	loc_4061
; ---------------------------------------------------------------------------

loc_3EC4:				; CODE XREF: _psh_hint_align+16Dj
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_28]
		mov	[edx+8], eax
		mov	ecx, [ebp+var_2C]
		sub	ecx, [ebp+var_28]
		mov	edx, [ebp+arg_0]
		mov	[edx+0Ch], ecx
		jmp	loc_4061
; ---------------------------------------------------------------------------

loc_3EDE:				; CODE XREF: _psh_hint_align+16Fj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		mov	[ebp+var_38], ecx
		cmp	[ebp+var_38], 0
		jz	short loc_3F67
		mov	edx, [ebp+var_38]
		mov	eax, [edx+10h]
		and	eax, 8
		jnz	short loc_3F10
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_38]
		push	ecx
		call	_psh_hint_align
		add	esp, 10h

loc_3F10:				; CODE XREF: _psh_hint_align+1C2j
		mov	edx, [ebp+var_38]
		mov	eax, [edx+4]
		sar	eax, 1
		mov	ecx, [ebp+var_38]
		add	eax, [ecx]
		mov	[ebp+var_3C], eax
		mov	edx, [ebp+var_38]
		mov	eax, [edx+0Ch]
		sar	eax, 1
		mov	ecx, [ebp+var_38]
		add	eax, [ecx+8]
		mov	[ebp+var_40], eax
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		sar	eax, 1
		mov	ecx, [ebp+arg_0]
		add	eax, [ecx]
		mov	[ebp+var_44], eax
		mov	edx, [ebp+var_C]
		push	edx
		mov	eax, [ebp+var_44]
		sub	eax, [ebp+var_3C]
		push	eax
		call	_FT_MulFix_i386
		add	esp, 8
		mov	[ebp+var_48], eax
		mov	ecx, [ebp+var_40]
		add	ecx, [ebp+var_48]
		mov	edx, [ebp+var_18]
		sar	edx, 1
		sub	ecx, edx
		mov	[ebp+var_14], ecx

loc_3F67:				; CODE XREF: _psh_hint_align+1B7j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_14]
		mov	[eax+8], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_20]
		mov	[edx+0Ch], eax
		mov	ecx, [ebp+arg_C]
		movzx	edx, byte ptr [ecx+7Ch]
		test	edx, edx
		jz	loc_403F
		cmp	[ebp+var_18], 40h ; '@'
		jg	loc_402A
		cmp	[ebp+var_18], 20h ; ' '
		jl	short loc_3FAF
		mov	eax, [ebp+var_18]
		sar	eax, 1
		add	eax, [ebp+var_14]
		and	eax, 0FFFFFFC0h
		mov	[ebp+var_14], eax
		mov	[ebp+var_18], 40h ; '@'
		jmp	short loc_4028
; ---------------------------------------------------------------------------

loc_3FAF:				; CODE XREF: _psh_hint_align+262j
		cmp	[ebp+var_18], 0
		jle	short loc_401C
		mov	ecx, [ebp+var_14]
		add	ecx, 20h ; ' '
		and	ecx, 0FFFFFFC0h
		mov	[ebp+var_4C], ecx
		mov	edx, [ebp+var_18]
		mov	eax, [ebp+var_14]
		lea	ecx, [eax+edx+20h]
		and	ecx, 0FFFFFFC0h
		mov	[ebp+var_50], ecx
		mov	edx, [ebp+var_4C]
		sub	edx, [ebp+var_14]
		mov	[ebp+var_54], edx
		mov	eax, [ebp+var_14]
		add	eax, [ebp+var_18]
		mov	ecx, [ebp+var_50]
		sub	ecx, eax
		mov	[ebp+var_58], ecx
		cmp	[ebp+var_54], 0
		jge	short loc_3FF6
		mov	edx, [ebp+var_54]
		neg	edx
		mov	[ebp+var_54], edx

loc_3FF6:				; CODE XREF: _psh_hint_align+2B8j
		cmp	[ebp+var_58], 0
		jge	short loc_4004
		mov	eax, [ebp+var_58]
		neg	eax
		mov	[ebp+var_58], eax

loc_4004:				; CODE XREF: _psh_hint_align+2C6j
		mov	ecx, [ebp+var_54]
		cmp	ecx, [ebp+var_58]
		jg	short loc_4014
		mov	edx, [ebp+var_4C]
		mov	[ebp+var_14], edx
		jmp	short loc_401A
; ---------------------------------------------------------------------------

loc_4014:				; CODE XREF: _psh_hint_align+2D6j
		mov	eax, [ebp+var_50]
		mov	[ebp+var_14], eax

loc_401A:				; CODE XREF: _psh_hint_align+2DEj
		jmp	short loc_4028
; ---------------------------------------------------------------------------

loc_401C:				; CODE XREF: _psh_hint_align+27Fj
		mov	ecx, [ebp+var_14]
		add	ecx, 20h ; ' '
		and	ecx, 0FFFFFFC0h
		mov	[ebp+var_14], ecx

loc_4028:				; CODE XREF: _psh_hint_align+279j
					; _psh_hint_align:loc_401Aj
		jmp	short loc_403F
; ---------------------------------------------------------------------------

loc_402A:				; CODE XREF: _psh_hint_align+258j
		push	0
		mov	edx, [ebp+var_18]
		push	edx
		mov	eax, [ebp+var_8]
		push	eax
		call	_psh_dimension_quantize_len
		add	esp, 0Ch
		mov	[ebp+var_18], eax

loc_403F:				; CODE XREF: _psh_hint_align+24Ej
					; _psh_hint_align:loc_4028j
		mov	ecx, [ebp+var_18]
		push	ecx
		mov	edx, [ebp+var_14]
		push	edx
		call	_psh_hint_snap_stem_side_delta
		add	esp, 8
		add	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+8], eax
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_18]
		mov	[edx+0Ch], eax

loc_4061:				; CODE XREF: _psh_hint_align+17Dj
					; _psh_hint_align+18Bj	...
		cmp	[ebp+var_1C], 0
		jz	loc_4125
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		mov	[ebp+var_14], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	[ebp+var_18], ecx
		cmp	[ebp+var_18], 40h ; '@'
		jge	short loc_408C
		mov	[ebp+var_18], 40h ; '@'
		jmp	short loc_4098
; ---------------------------------------------------------------------------

loc_408C:				; CODE XREF: _psh_hint_align+34Dj
		mov	edx, [ebp+var_18]
		add	edx, 20h ; ' '
		and	edx, 0FFFFFFC0h
		mov	[ebp+var_18], edx

loc_4098:				; CODE XREF: _psh_hint_align+356j
		mov	eax, [ebp+var_30]
		mov	[ebp+var_64], eax
		cmp	[ebp+var_64], 1
		jz	short loc_40B2
		cmp	[ebp+var_64], 2
		jz	short loc_40C9
		cmp	[ebp+var_64], 3
		jz	short loc_40D4
		jmp	short loc_40D6
; ---------------------------------------------------------------------------

loc_40B2:				; CODE XREF: _psh_hint_align+36Ej
		mov	ecx, [ebp+var_2C]
		sub	ecx, [ebp+var_18]
		mov	edx, [ebp+arg_0]
		mov	[edx+8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_18]
		mov	[eax+0Ch], ecx
		jmp	short loc_4125
; ---------------------------------------------------------------------------

loc_40C9:				; CODE XREF: _psh_hint_align+374j
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_18]
		mov	[edx+0Ch], eax
		jmp	short loc_4125
; ---------------------------------------------------------------------------

loc_40D4:				; CODE XREF: _psh_hint_align+37Aj
		jmp	short loc_4125
; ---------------------------------------------------------------------------

loc_40D6:				; CODE XREF: _psh_hint_align+37Cj
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_18]
		mov	[ecx+0Ch], edx
		mov	eax, [ebp+var_18]
		and	eax, 40h
		jz	short loc_40FA
		mov	ecx, [ebp+var_18]
		sar	ecx, 1
		add	ecx, [ebp+var_14]
		and	ecx, 0FFFFFFC0h
		add	ecx, 20h ; ' '
		mov	[ebp+var_14], ecx
		jmp	short loc_410C
; ---------------------------------------------------------------------------

loc_40FA:				; CODE XREF: _psh_hint_align+3B1j
		mov	edx, [ebp+var_18]
		sar	edx, 1
		mov	eax, [ebp+var_14]
		lea	ecx, [eax+edx+20h]
		and	ecx, 0FFFFFFC0h
		mov	[ebp+var_14], ecx

loc_410C:				; CODE XREF: _psh_hint_align+3C4j
		mov	edx, [ebp+var_18]
		sar	edx, 1
		mov	eax, [ebp+var_14]
		sub	eax, edx
		mov	ecx, [ebp+arg_0]
		mov	[ecx+8], eax
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_18]
		mov	[edx+0Ch], eax

loc_4125:				; CODE XREF: _psh_hint_align+331j
					; _psh_hint_align+393j	...
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+10h]
		or	edx, 8
		mov	eax, [ebp+arg_0]
		mov	[eax+10h], edx

loc_4134:				; CODE XREF: _psh_hint_align+52j
					; _psh_hint_align+C9j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN44
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4
		add	esp, 64h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_psh_hint_align	endp

; ---------------------------------------------------------------------------
		align 10h
$LN44		dd 1			; DATA XREF: _psh_hint_align+404o
		dd offset $LN43
$LN43		dd 0FFFFFFD0h, 0Ch	; DATA XREF: .text$mn:00004164o
		dd offset $LN42		; "align"
$LN42		db 'align',0            ; DATA XREF: .text$mn:00004170o
		db 0Ah dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_hint_table_align_hints proc near	; CODE XREF: _ps_hints_apply+2B9p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	[ebp+var_8], eax
		jmp	short loc_41BD
; ---------------------------------------------------------------------------

loc_41AB:				; CODE XREF: _psh_hint_table_align_hints+57j
		mov	ecx, [ebp+var_8]
		sub	ecx, 1
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+var_4]
		add	edx, 1Ch
		mov	[ebp+var_4], edx

loc_41BD:				; CODE XREF: _psh_hint_table_align_hints+25j
		cmp	[ebp+var_8], 0
		jbe	short loc_41DD
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		call	_psh_hint_align
		add	esp, 10h
		jmp	short loc_41AB
; ---------------------------------------------------------------------------

loc_41DD:				; CODE XREF: _psh_hint_table_align_hints+3Dj
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_psh_hint_table_align_hints endp

; ---------------------------------------------------------------------------
		db 9 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_glyph_compute_inflections proc near ; CODE	XREF: _psh_glyph_init+344p

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 34h
		push	edi
		lea	edi, [ebp+var_34]
		mov	ecx, 0Dh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_4], 0
		jmp	short loc_421C
; ---------------------------------------------------------------------------

loc_4213:				; CODE XREF: _psh_glyph_compute_inflections+4Ej
					; _psh_glyph_compute_inflections:$Skip$35j
		mov	eax, [ebp+var_4]
		add	eax, 1
		mov	[ebp+var_4], eax

loc_421C:				; CODE XREF: _psh_glyph_compute_inflections+1Dj
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_4]
		cmp	edx, [ecx+4]
		jnb	loc_43F0
		mov	[ebp+var_34], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	edx, [ebp+var_4]
		cmp	dword ptr [ecx+edx*8+4], 4
		jnb	short loc_4244
		jmp	short loc_4213
; ---------------------------------------------------------------------------

loc_4244:				; CODE XREF: _psh_glyph_compute_inflections+4Cj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	edx, [ebp+var_4]
		mov	eax, [ecx+edx*8]
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+var_8]
		mov	[ebp+var_10], ecx
		mov	edx, [ebp+var_10]
		mov	[ebp+var_C], edx

loc_425F:				; CODE XREF: _psh_glyph_compute_inflections+A9j
		mov	eax, [ebp+var_10]
		mov	ecx, [eax+4]
		mov	[ebp+var_10], ecx
		mov	edx, [ebp+var_10]
		cmp	edx, [ebp+var_8]
		jnz	short loc_4275
		jmp	$Skip$35
; ---------------------------------------------------------------------------

loc_4275:				; CODE XREF: _psh_glyph_compute_inflections+7Aj
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		mov	edx, [eax+1Ch]
		sub	edx, [ecx+1Ch]
		mov	[ebp+var_1C], edx
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		mov	edx, [eax+20h]
		sub	edx, [ecx+20h]
		mov	[ebp+var_20], edx
		cmp	[ebp+var_1C], 0
		jnz	short loc_429F
		cmp	[ebp+var_20], 0
		jz	short loc_425F

loc_429F:				; CODE XREF: _psh_glyph_compute_inflections+A3j
		mov	eax, [ebp+var_C]
		mov	[ebp+var_14], eax

loc_42A5:				; CODE XREF: _psh_glyph_compute_inflections+F4j
					; _psh_glyph_compute_inflections+115j
		mov	ecx, [ebp+var_14]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+var_14]
		mov	eax, [edx]
		mov	[ebp+var_14], eax
		mov	ecx, [ebp+var_14]
		cmp	ecx, [ebp+var_8]
		jnz	short loc_42C0
		jmp	$Skip$35
; ---------------------------------------------------------------------------

loc_42C0:				; CODE XREF: _psh_glyph_compute_inflections+C5j
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+var_14]
		mov	ecx, [edx+1Ch]
		sub	ecx, [eax+1Ch]
		mov	[ebp+var_24], ecx
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+var_14]
		mov	ecx, [edx+20h]
		sub	ecx, [eax+20h]
		mov	[ebp+var_28], ecx
		cmp	[ebp+var_24], 0
		jnz	short loc_42EA
		cmp	[ebp+var_28], 0
		jz	short loc_42A5

loc_42EA:				; CODE XREF: _psh_glyph_compute_inflections+EEj
		mov	edx, [ebp+var_28]
		push	edx
		mov	eax, [ebp+var_24]
		push	eax
		mov	ecx, [ebp+var_20]
		push	ecx
		mov	edx, [ebp+var_1C]
		push	edx
		call	_ft_corner_orientation
		add	esp, 10h
		mov	[ebp+var_2C], eax
		cmp	[ebp+var_2C], 0
		jz	short loc_42A5
		mov	eax, [ebp+var_C]
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+var_24]
		mov	[ebp+var_1C], ecx
		mov	edx, [ebp+var_28]
		mov	[ebp+var_20], edx

loc_431D:				; CODE XREF: _psh_glyph_compute_inflections+1F1j
		mov	eax, [ebp+var_10]
		mov	[ebp+var_18], eax

loc_4323:				; CODE XREF: _psh_glyph_compute_inflections+175j
					; _psh_glyph_compute_inflections+196j
		mov	ecx, [ebp+var_18]
		mov	[ebp+var_10], ecx
		mov	edx, [ebp+var_18]
		mov	eax, [edx+4]
		mov	[ebp+var_18], eax
		mov	ecx, [ebp+var_18]
		cmp	ecx, [ebp+var_8]
		jnz	short loc_4341
		mov	[ebp+var_34], 1

loc_4341:				; CODE XREF: _psh_glyph_compute_inflections+144j
		mov	edx, [ebp+var_18]
		mov	eax, [ebp+var_10]
		mov	ecx, [edx+1Ch]
		sub	ecx, [eax+1Ch]
		mov	[ebp+var_24], ecx
		mov	edx, [ebp+var_18]
		mov	eax, [ebp+var_10]
		mov	ecx, [edx+20h]
		sub	ecx, [eax+20h]
		mov	[ebp+var_28], ecx
		cmp	[ebp+var_24], 0
		jnz	short loc_436B
		cmp	[ebp+var_28], 0
		jz	short loc_4323

loc_436B:				; CODE XREF: _psh_glyph_compute_inflections+16Fj
		mov	edx, [ebp+var_28]
		push	edx
		mov	eax, [ebp+var_24]
		push	eax
		mov	ecx, [ebp+var_20]
		push	ecx
		mov	edx, [ebp+var_1C]
		push	edx
		call	_ft_corner_orientation
		add	esp, 10h
		mov	[ebp+var_30], eax
		cmp	[ebp+var_30], 0
		jz	short loc_4323
		mov	eax, [ebp+var_30]
		xor	eax, [ebp+var_2C]
		jge	short loc_43C3

loc_4394:				; CODE XREF: _psh_glyph_compute_inflections+1BEj
		mov	ecx, [ebp+var_C]
		mov	edx, [ecx+0Ch]
		or	edx, 4
		mov	eax, [ebp+var_C]
		mov	[eax+0Ch], edx
		mov	ecx, [ebp+var_C]
		mov	edx, [ecx+4]
		mov	[ebp+var_C], edx
		mov	eax, [ebp+var_C]
		cmp	eax, [ebp+var_10]
		jnz	short loc_4394
		mov	ecx, [ebp+var_C]
		mov	edx, [ecx+0Ch]
		or	edx, 4
		mov	eax, [ebp+var_C]
		mov	[eax+0Ch], edx

loc_43C3:				; CODE XREF: _psh_glyph_compute_inflections+19Ej
		mov	ecx, [ebp+var_10]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+var_18]
		mov	[ebp+var_10], edx
		mov	eax, [ebp+var_30]
		mov	[ebp+var_2C], eax
		mov	ecx, [ebp+var_24]
		mov	[ebp+var_1C], ecx
		mov	edx, [ebp+var_28]
		mov	[ebp+var_20], edx
		cmp	[ebp+var_34], 0
		jz	loc_431D

$Skip$35:				; CODE XREF: _psh_glyph_compute_inflections+7Cj
					; _psh_glyph_compute_inflections+C7j
		jmp	loc_4213
; ---------------------------------------------------------------------------

loc_43F0:				; CODE XREF: _psh_glyph_compute_inflections+31j
		pop	edi
		add	esp, 34h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_psh_glyph_compute_inflections endp

; ---------------------------------------------------------------------------
		db 5 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_glyph_done	proc near		; CODE XREF: _ps_hints_apply+38Cp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+10h]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+var_4]
		push	edx
		mov	eax, 28h ; '('
		shl	eax, 0
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax+1Ch]
		push	edx
		call	_psh_hint_table_done
		add	esp, 8
		mov	eax, [ebp+var_4]
		push	eax
		mov	ecx, 28h ; '('
		imul	edx, ecx, 0
		mov	eax, [ebp+arg_0]
		lea	ecx, [eax+edx+1Ch]
		push	ecx
		call	_psh_hint_table_done
		add	esp, 8

loc_4450:				; CODE XREF: _psh_glyph_done+6Bj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		push	eax
		mov	ecx, [ebp+var_4]
		push	ecx
		call	_ft_mem_free
		add	esp, 8
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+8], 0
		xor	eax, eax
		jnz	short loc_4450

loc_4471:				; CODE XREF: _psh_glyph_done+8Cj
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		call	_ft_mem_free
		add	esp, 8
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+0Ch], 0
		xor	edx, edx
		jnz	short loc_4471
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+4], 0
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+10h], 0
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_psh_glyph_done	endp

; ---------------------------------------------------------------------------
		db 7 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_compute_dir proc near		; CODE XREF: _psh_glyph_init+266p
					; _psh_glyph_init+2A8p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_C], 4
		cmp	[ebp+arg_0], 0
		jge	short loc_44FB
		mov	eax, [ebp+arg_0]
		neg	eax
		mov	[ebp+var_10], eax
		jmp	short loc_4501
; ---------------------------------------------------------------------------

loc_44FB:				; CODE XREF: _psh_compute_dir+2Bj
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_10], ecx

loc_4501:				; CODE XREF: _psh_compute_dir+35j
		mov	edx, [ebp+var_10]
		mov	[ebp+var_4], edx
		cmp	[ebp+arg_4], 0
		jge	short loc_4517
		mov	eax, [ebp+arg_4]
		neg	eax
		mov	[ebp+var_14], eax
		jmp	short loc_451D
; ---------------------------------------------------------------------------

loc_4517:				; CODE XREF: _psh_compute_dir+47j
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_14], ecx

loc_451D:				; CODE XREF: _psh_compute_dir+51j
		mov	edx, [ebp+var_14]
		mov	[ebp+var_8], edx
		imul	eax, [ebp+var_8], 0Ch
		cmp	eax, [ebp+var_4]
		jge	short loc_454A
		cmp	[ebp+arg_0], 0
		jl	short loc_453B
		mov	[ebp+var_18], 2
		jmp	short loc_4542
; ---------------------------------------------------------------------------

loc_453B:				; CODE XREF: _psh_compute_dir+6Cj
		mov	[ebp+var_18], 0FFFFFFFEh

loc_4542:				; CODE XREF: _psh_compute_dir+75j
		mov	ecx, [ebp+var_18]
		mov	[ebp+var_C], ecx
		jmp	short loc_456F
; ---------------------------------------------------------------------------

loc_454A:				; CODE XREF: _psh_compute_dir+66j
		imul	edx, [ebp+var_4], 0Ch
		cmp	edx, [ebp+var_8]
		jge	short loc_456F
		cmp	[ebp+arg_4], 0
		jl	short loc_4562
		mov	[ebp+var_1C], 0FFFFFFFFh
		jmp	short loc_4569
; ---------------------------------------------------------------------------

loc_4562:				; CODE XREF: _psh_compute_dir+93j
		mov	[ebp+var_1C], 1

loc_4569:				; CODE XREF: _psh_compute_dir+9Cj
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_C], eax

loc_456F:				; CODE XREF: _psh_compute_dir+84j
					; _psh_compute_dir+8Dj
		mov	eax, [ebp+var_C]
		mov	esp, ebp
		pop	ebp
		retn
_psh_compute_dir endp

; ---------------------------------------------------------------------------
		db 0Eh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_glyph_load_points proc near	; CODE XREF: _ps_hints_apply+278p
					; _psh_glyph_init+338p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		mov	edx, [ecx+4]
		mov	[ebp+var_4], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	[ebp+var_C], eax
		jmp	short loc_45D9
; ---------------------------------------------------------------------------

loc_45BE:				; CODE XREF: _psh_glyph_load_points:loc_4629j
		mov	ecx, [ebp+var_C]
		sub	ecx, 1
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+var_8]
		add	edx, 28h ; '('
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_4]
		add	eax, 8
		mov	[ebp+var_4], eax

loc_45D9:				; CODE XREF: _psh_glyph_load_points+38j
		cmp	[ebp+var_C], 0
		jbe	short loc_462B
		mov	ecx, [ebp+var_8]
		mov	dword ptr [ecx+10h], 0
		mov	edx, [ebp+var_8]
		mov	dword ptr [edx+18h], 0
		cmp	[ebp+arg_4], 0
		jnz	short loc_4612
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx]
		mov	[eax+1Ch], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+4]
		mov	[eax+20h], edx
		jmp	short loc_4629
; ---------------------------------------------------------------------------

loc_4612:				; CODE XREF: _psh_glyph_load_points+73j
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+4]
		mov	[eax+1Ch], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx]
		mov	[eax+20h], edx

loc_4629:				; CODE XREF: _psh_glyph_load_points+8Cj
		jmp	short loc_45BE
; ---------------------------------------------------------------------------

loc_462B:				; CODE XREF: _psh_glyph_load_points+59j
		mov	esp, ebp
		pop	ebp
		retn
_psh_glyph_load_points endp

; ---------------------------------------------------------------------------
		db 5 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_glyph_save_points proc near	; CODE XREF: _ps_hints_apply+349p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+14h]
		mov	ecx, [eax+4]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+14h]
		mov	ecx, [eax+8]
		mov	[ebp+var_10], ecx
		mov	[ebp+var_4], 0
		jmp	short loc_4681
; ---------------------------------------------------------------------------

loc_4678:				; CODE XREF: _psh_glyph_save_points+BFj
		mov	edx, [ebp+var_4]
		add	edx, 1
		mov	[ebp+var_4], edx

loc_4681:				; CODE XREF: _psh_glyph_save_points+42j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_4]
		cmp	ecx, [eax]
		jnb	short loc_46F5
		cmp	[ebp+arg_4], 0
		jnz	short loc_46A2
		mov	edx, [ebp+var_4]
		mov	eax, [ebp+var_C]
		mov	ecx, [ebp+var_8]
		mov	ecx, [ecx+24h]
		mov	[eax+edx*8], ecx
		jmp	short loc_46B2
; ---------------------------------------------------------------------------

loc_46A2:				; CODE XREF: _psh_glyph_save_points+5Bj
		mov	edx, [ebp+var_4]
		mov	eax, [ebp+var_C]
		mov	ecx, [ebp+var_8]
		mov	ecx, [ecx+24h]
		mov	[eax+edx*8+4], ecx

loc_46B2:				; CODE XREF: _psh_glyph_save_points+6Cj
		mov	edx, [ebp+var_8]
		mov	eax, [edx+10h]
		and	eax, 10h
		jz	short loc_46EA
		cmp	[ebp+arg_4], 0
		jnz	short loc_46CC
		mov	[ebp+var_14], 20h ; ' '
		jmp	short loc_46D3
; ---------------------------------------------------------------------------

loc_46CC:				; CODE XREF: _psh_glyph_save_points+8Dj
		mov	[ebp+var_14], 40h ; '@'

loc_46D3:				; CODE XREF: _psh_glyph_save_points+96j
		movsx	ecx, byte ptr [ebp+var_14]
		mov	edx, [ebp+var_10]
		add	edx, [ebp+var_4]
		movsx	eax, byte ptr [edx]
		or	eax, ecx
		mov	ecx, [ebp+var_10]
		add	ecx, [ebp+var_4]
		mov	[ecx], al

loc_46EA:				; CODE XREF: _psh_glyph_save_points+87j
		mov	edx, [ebp+var_8]
		add	edx, 28h ; '('
		mov	[ebp+var_8], edx
		jmp	short loc_4678
; ---------------------------------------------------------------------------

loc_46F5:				; CODE XREF: _psh_glyph_save_points+55j
		mov	esp, ebp
		pop	ebp
		retn
_psh_glyph_save_points endp

; ---------------------------------------------------------------------------
		db 0Bh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl psh_glyph_init(void *, int, int, int)
_psh_glyph_init	proc near		; CODE XREF: _ps_hints_apply+61p

var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 54h
		push	esi
		push	edi
		lea	edi, [ebp+var_54]
		mov	ecx, 15h
		mov	eax, 0CCCCCCCCh
		rep stosd
		push	80h ; ''       ; size_t
		push	0		; int
		mov	eax, [ebp+arg_0]
		push	eax		; void *
		call	_memset
		add	esp, 0Ch
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_C]
		mov	eax, [edx]
		mov	[ecx+10h], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+10h]
		mov	[ebp+var_10], edx
		lea	eax, [ebp+var_8]
		push	eax
		push	0
		mov	ecx, [ebp+arg_4]
		movsx	edx, word ptr [ecx+2]
		push	edx
		push	0
		push	28h ; '('
		mov	eax, [ebp+var_10]
		push	eax
		call	_ft_mem_realloc
		add	esp, 18h
		mov	ecx, [ebp+arg_0]
		mov	[ecx+8], eax
		cmp	[ebp+var_8], 0
		jnz	short loc_4795
		lea	edx, [ebp+var_8]
		push	edx
		push	0
		mov	eax, [ebp+arg_4]
		movsx	ecx, word ptr [eax]
		push	ecx
		push	0
		push	8
		mov	edx, [ebp+var_10]
		push	edx
		call	_ft_mem_realloc
		add	esp, 18h
		mov	ecx, [ebp+arg_0]
		mov	[ecx+0Ch], eax
		cmp	[ebp+var_8], 0
		jz	short loc_479A

loc_4795:				; CODE XREF: _psh_glyph_init+66j
		jmp	$Exit$26
; ---------------------------------------------------------------------------

loc_479A:				; CODE XREF: _psh_glyph_init+8Fj
		mov	edx, [ebp+arg_4]
		movsx	eax, word ptr [edx+2]
		mov	ecx, [ebp+arg_0]
		mov	[ecx], eax
		mov	edx, [ebp+arg_4]
		movsx	eax, word ptr [edx]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+4], eax
		mov	[ebp+var_14], 0
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[ebp+var_20], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		mov	[ebp+var_24], edx
		mov	[ebp+var_1C], 0
		jmp	short loc_47DD
; ---------------------------------------------------------------------------

loc_47D4:				; CODE XREF: _psh_glyph_init+1A9j
		mov	eax, [ebp+var_1C]
		add	eax, 1
		mov	[ebp+var_1C], eax

loc_47DD:				; CODE XREF: _psh_glyph_init+CEj
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_1C]
		cmp	edx, [ecx+4]
		jnb	loc_48B2
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+0Ch]
		mov	edx, [ebp+var_1C]
		movsx	eax, word ptr [ecx+edx*2]
		add	eax, 1
		mov	[ebp+var_18], eax
		mov	ecx, [ebp+var_18]
		sub	ecx, [ebp+var_14]
		mov	[ebp+var_28], ecx
		imul	edx, [ebp+var_14], 28h
		add	edx, [ebp+var_20]
		mov	eax, [ebp+var_24]
		mov	[eax], edx
		mov	ecx, [ebp+var_24]
		mov	edx, [ebp+var_28]
		mov	[ecx+4], edx
		cmp	[ebp+var_28], 0
		jle	short loc_489E
		imul	eax, [ebp+var_14], 28h
		add	eax, [ebp+var_20]
		mov	[ebp+var_2C], eax
		imul	ecx, [ebp+var_18], 28h
		mov	edx, [ebp+var_20]
		lea	eax, [edx+ecx-28h]
		mov	ecx, [ebp+var_2C]
		mov	[ecx], eax
		mov	edx, [ebp+var_2C]
		mov	eax, [ebp+var_24]
		mov	[edx+8], eax
		jmp	short loc_4851
; ---------------------------------------------------------------------------

loc_4848:				; CODE XREF: _psh_glyph_init+18Bj
		mov	ecx, [ebp+var_28]
		sub	ecx, 1
		mov	[ebp+var_28], ecx

loc_4851:				; CODE XREF: _psh_glyph_init+142j
		cmp	[ebp+var_28], 1
		jle	short loc_4891
		mov	edx, [ebp+var_2C]
		add	edx, 28h ; '('
		mov	eax, 28h ; '('
		imul	ecx, eax, 0
		mov	eax, [ebp+var_2C]
		mov	[eax+ecx+4], edx
		mov	ecx, 28h ; '('
		shl	ecx, 0
		mov	edx, [ebp+var_2C]
		mov	eax, [ebp+var_2C]
		mov	[edx+ecx], eax
		mov	ecx, [ebp+var_2C]
		add	ecx, 28h ; '('
		mov	[ebp+var_2C], ecx
		mov	edx, [ebp+var_2C]
		mov	eax, [ebp+var_24]
		mov	[edx+8], eax
		jmp	short loc_4848
; ---------------------------------------------------------------------------

loc_4891:				; CODE XREF: _psh_glyph_init+151j
		imul	ecx, [ebp+var_14], 28h
		add	ecx, [ebp+var_20]
		mov	edx, [ebp+var_2C]
		mov	[edx+4], ecx

loc_489E:				; CODE XREF: _psh_glyph_init+11Dj
		mov	eax, [ebp+var_24]
		add	eax, 8
		mov	[ebp+var_24], eax
		mov	ecx, [ebp+var_18]
		mov	[ebp+var_14], ecx
		jmp	loc_47D4
; ---------------------------------------------------------------------------

loc_48B2:				; CODE XREF: _psh_glyph_init+E2j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[ebp+var_30], eax
		mov	ecx, [ebp+var_30]
		mov	[ebp+var_34], ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+4]
		mov	[ebp+var_38], eax
		mov	[ebp+var_3C], 0
		jmp	short loc_48E5
; ---------------------------------------------------------------------------

loc_48D3:				; CODE XREF: _psh_glyph_init:loc_4A1Fj
		mov	ecx, [ebp+var_3C]
		add	ecx, 1
		mov	[ebp+var_3C], ecx
		mov	edx, [ebp+var_34]
		add	edx, 28h ; '('
		mov	[ebp+var_34], edx

loc_48E5:				; CODE XREF: _psh_glyph_init+1CDj
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_3C]
		cmp	ecx, [eax]
		jnb	loc_4A24
		mov	edx, [ebp+var_34]
		mov	eax, [edx]
		sub	eax, [ebp+var_30]
		cdq
		mov	ecx, 28h ; '('
		idiv	ecx
		mov	[ebp+var_40], eax
		mov	edx, [ebp+var_34]
		mov	eax, [edx+4]
		sub	eax, [ebp+var_30]
		cdq
		mov	ecx, 28h ; '('
		idiv	ecx
		mov	[ebp+var_44], eax
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+8]
		mov	ecx, [ebp+var_3C]
		movsx	edx, byte ptr [eax+ecx]
		and	edx, 1
		jnz	short loc_4936
		mov	eax, [ebp+var_34]
		mov	dword ptr [eax+0Ch], 1

loc_4936:				; CODE XREF: _psh_glyph_init+226j
		mov	ecx, [ebp+var_3C]
		mov	edx, [ebp+var_38]
		mov	eax, [ebp+var_40]
		mov	esi, [ebp+var_38]
		mov	ecx, [edx+ecx*8]
		sub	ecx, [esi+eax*8]
		mov	[ebp+var_48], ecx
		mov	edx, [ebp+var_3C]
		mov	eax, [ebp+var_38]
		mov	ecx, [ebp+var_40]
		mov	esi, [ebp+var_38]
		mov	edx, [eax+edx*8+4]
		sub	edx, [esi+ecx*8+4]
		mov	[ebp+var_4C], edx
		mov	eax, [ebp+var_4C]
		push	eax
		mov	ecx, [ebp+var_48]
		push	ecx
		call	_psh_compute_dir
		add	esp, 8
		mov	edx, [ebp+var_34]
		mov	[edx+14h], al
		mov	eax, [ebp+var_44]
		mov	ecx, [ebp+var_38]
		mov	edx, [ebp+var_3C]
		mov	esi, [ebp+var_38]
		mov	eax, [ecx+eax*8]
		sub	eax, [esi+edx*8]
		mov	[ebp+var_50], eax
		mov	ecx, [ebp+var_44]
		mov	edx, [ebp+var_38]
		mov	eax, [ebp+var_3C]
		mov	esi, [ebp+var_38]
		mov	ecx, [edx+ecx*8+4]
		sub	ecx, [esi+eax*8+4]
		mov	[ebp+var_54], ecx
		mov	edx, [ebp+var_54]
		push	edx
		mov	eax, [ebp+var_50]
		push	eax
		call	_psh_compute_dir
		add	esp, 8
		mov	ecx, [ebp+var_34]
		mov	[ecx+15h], al
		mov	edx, [ebp+var_34]
		mov	eax, [edx+0Ch]
		and	eax, 1
		jz	short loc_49D6
		mov	ecx, [ebp+var_34]
		mov	edx, [ecx+0Ch]
		or	edx, 2
		mov	eax, [ebp+var_34]
		mov	[eax+0Ch], edx
		jmp	short loc_4A1F
; ---------------------------------------------------------------------------

loc_49D6:				; CODE XREF: _psh_glyph_init+2BFj
		mov	ecx, [ebp+var_34]
		movsx	edx, byte ptr [ecx+14h]
		mov	eax, [ebp+var_34]
		movsx	ecx, byte ptr [eax+15h]
		cmp	edx, ecx
		jnz	short loc_4A1F
		mov	edx, [ebp+var_34]
		movsx	eax, byte ptr [edx+15h]
		cmp	eax, 4
		jnz	short loc_4A10
		mov	ecx, [ebp+var_54]
		push	ecx
		mov	edx, [ebp+var_50]
		push	edx
		mov	eax, [ebp+var_4C]
		push	eax
		mov	ecx, [ebp+var_48]
		push	ecx
		call	_ft_corner_is_flat
		add	esp, 10h
		test	eax, eax
		jz	short loc_4A1F

loc_4A10:				; CODE XREF: _psh_glyph_init+2EEj
		mov	edx, [ebp+var_34]
		mov	eax, [edx+0Ch]
		or	eax, 2
		mov	ecx, [ebp+var_34]
		mov	[ecx+0Ch], eax

loc_4A1F:				; CODE XREF: _psh_glyph_init+2D0j
					; _psh_glyph_init+2E2j	...
		jmp	loc_48D3
; ---------------------------------------------------------------------------

loc_4A24:				; CODE XREF: _psh_glyph_init+1E9j
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	[edx+14h], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_C]
		mov	[ecx+18h], edx
		push	0
		mov	eax, [ebp+arg_0]
		push	eax
		call	_psh_glyph_load_points
		add	esp, 8
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_psh_glyph_compute_inflections
		add	esp, 4
		mov	edx, [ebp+var_10]
		push	edx
		mov	eax, 24h ; '$'
		imul	ecx, eax, 0
		mov	edx, [ebp+arg_8]
		lea	eax, [edx+ecx+28h]
		push	eax
		mov	ecx, 24h ; '$'
		imul	edx, ecx, 0
		mov	eax, [ebp+arg_8]
		lea	ecx, [eax+edx+1Ch]
		push	ecx
		mov	edx, 24h ; '$'
		imul	eax, edx, 0
		mov	ecx, [ebp+arg_8]
		lea	edx, [ecx+eax+10h]
		push	edx
		mov	eax, 28h ; '('
		imul	ecx, eax, 0
		mov	edx, [ebp+arg_0]
		lea	eax, [edx+ecx+1Ch]
		push	eax
		call	_psh_hint_table_init
		add	esp, 14h
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_4AA7
		jmp	short $Exit$26
; ---------------------------------------------------------------------------

loc_4AA7:				; CODE XREF: _psh_glyph_init+39Fj
		mov	ecx, [ebp+var_10]
		push	ecx
		mov	edx, 24h ; '$'
		shl	edx, 0
		mov	eax, [ebp+arg_8]
		lea	ecx, [eax+edx+28h]
		push	ecx
		mov	edx, 24h ; '$'
		shl	edx, 0
		mov	eax, [ebp+arg_8]
		lea	ecx, [eax+edx+1Ch]
		push	ecx
		mov	edx, 24h ; '$'
		shl	edx, 0
		mov	eax, [ebp+arg_8]
		lea	ecx, [eax+edx+10h]
		push	ecx
		mov	edx, 28h ; '('
		shl	edx, 0
		mov	eax, [ebp+arg_0]
		lea	ecx, [eax+edx+1Ch]
		push	ecx
		call	_psh_hint_table_init
		add	esp, 14h
		mov	[ebp+var_8], eax

$Exit$26:				; CODE XREF: _psh_glyph_init:loc_4795j
					; _psh_glyph_init+3A1j
		mov	eax, [ebp+var_8]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN25
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		add	esp, 54h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_psh_glyph_init	endp

; ---------------------------------------------------------------------------
		align 4
$LN25		dd 1			; DATA XREF: _psh_glyph_init+3F9o
		dd offset $LN24
$LN24		dd 0FFFFFFF8h, 4	; DATA XREF: .text$mn:00004B20o
		dd offset $LN23		; "error"
$LN23		db 'error',0            ; DATA XREF: .text$mn:00004B2Co
		db 0Eh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_glyph_compute_extrema proc	near	; CODE XREF: _ps_hints_apply+287p

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_20], eax
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], 0
		jmp	short loc_4B79
; ---------------------------------------------------------------------------

loc_4B70:				; CODE XREF: _psh_glyph_compute_extrema+63j
					; _psh_glyph_compute_extrema:$Next$40j
		mov	eax, [ebp+var_4]
		add	eax, 1
		mov	[ebp+var_4], eax

loc_4B79:				; CODE XREF: _psh_glyph_compute_extrema+2Aj
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_4]
		cmp	edx, [ecx+4]
		jnb	loc_4C74
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	edx, [ebp+var_4]
		mov	eax, [ecx+edx*8]
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		mov	eax, [ebp+var_4]
		cmp	dword ptr [edx+eax*8+4], 0
		jnz	short loc_4BA9
		jmp	short loc_4B70
; ---------------------------------------------------------------------------

loc_4BA9:				; CODE XREF: _psh_glyph_compute_extrema+61j
		mov	ecx, [ebp+var_8]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+var_C]
		mov	[ebp+var_10], edx

loc_4BB5:				; CODE XREF: _psh_glyph_compute_extrema+92j
		mov	eax, [ebp+var_10]
		mov	ecx, [eax]
		mov	[ebp+var_10], ecx
		mov	edx, [ebp+var_10]
		cmp	edx, [ebp+var_8]
		jnz	short loc_4BCA
		jmp	$Skip$39
; ---------------------------------------------------------------------------

loc_4BCA:				; CODE XREF: _psh_glyph_compute_extrema+7Fj
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		mov	edx, [eax+1Ch]
		cmp	edx, [ecx+1Ch]
		jz	short loc_4BB5
		mov	eax, [ebp+var_10]
		mov	ecx, [eax+4]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+var_C]
		mov	[ebp+var_8], edx

loc_4BE7:				; CODE XREF: _psh_glyph_compute_extrema+126j
		mov	eax, [ebp+var_C]
		mov	[ebp+var_14], eax

loc_4BED:				; CODE XREF: _psh_glyph_compute_extrema+C8j
		mov	ecx, [ebp+var_14]
		mov	edx, [ecx+4]
		mov	[ebp+var_14], edx
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_8]
		jnz	short loc_4C00
		jmp	short $Next$40
; ---------------------------------------------------------------------------

loc_4C00:				; CODE XREF: _psh_glyph_compute_extrema+B8j
		mov	ecx, [ebp+var_14]
		mov	edx, [ebp+var_C]
		mov	eax, [ecx+1Ch]
		cmp	eax, [edx+1Ch]
		jz	short loc_4BED
		mov	ecx, [ebp+var_10]
		mov	edx, [ebp+var_C]
		mov	eax, [ecx+1Ch]
		cmp	eax, [edx+1Ch]
		jge	short loc_4C2E
		mov	ecx, [ebp+var_14]
		mov	edx, [ebp+var_C]
		mov	eax, [ecx+1Ch]
		cmp	eax, [edx+1Ch]
		jge	short loc_4C2C
		jmp	short $Extremum$41
; ---------------------------------------------------------------------------

loc_4C2C:				; CODE XREF: _psh_glyph_compute_extrema+E4j
		jmp	short loc_4C5C
; ---------------------------------------------------------------------------

loc_4C2E:				; CODE XREF: _psh_glyph_compute_extrema+D6j
		mov	ecx, [ebp+var_14]
		mov	edx, [ebp+var_C]
		mov	eax, [ecx+1Ch]
		cmp	eax, [edx+1Ch]
		jle	short loc_4C5C

$Extremum$41:				; CODE XREF: _psh_glyph_compute_extrema+E6j
					; _psh_glyph_compute_extrema+116j
		mov	ecx, [ebp+var_C]
		mov	edx, [ecx+10h]
		or	edx, 40h
		mov	eax, [ebp+var_C]
		mov	[eax+10h], edx
		mov	ecx, [ebp+var_C]
		mov	edx, [ecx+4]
		mov	[ebp+var_C], edx
		mov	eax, [ebp+var_C]
		cmp	eax, [ebp+var_14]
		jnz	short $Extremum$41

loc_4C5C:				; CODE XREF: _psh_glyph_compute_extrema:loc_4C2Cj
					; _psh_glyph_compute_extrema+F6j
		mov	ecx, [ebp+var_14]
		mov	edx, [ecx]
		mov	[ebp+var_10], edx
		mov	eax, [ebp+var_14]
		mov	[ebp+var_C], eax
		jmp	loc_4BE7
; ---------------------------------------------------------------------------

$Next$40:				; CODE XREF: _psh_glyph_compute_extrema+BAj
		jmp	loc_4B70
; ---------------------------------------------------------------------------

loc_4C74:				; CODE XREF: _psh_glyph_compute_extrema+3Ej
		mov	[ebp+var_4], 0
		jmp	short loc_4C86
; ---------------------------------------------------------------------------

loc_4C7D:				; CODE XREF: _psh_glyph_compute_extrema:$Skip$39j
		mov	ecx, [ebp+var_4]
		add	ecx, 1
		mov	[ebp+var_4], ecx

loc_4C86:				; CODE XREF: _psh_glyph_compute_extrema+137j
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_4]
		cmp	eax, [edx]
		jnb	loc_4D5F
		imul	ecx, [ebp+var_4], 28h
		mov	edx, [ebp+arg_0]
		add	ecx, [edx+8]
		mov	[ebp+var_18], ecx
		mov	eax, [ebp+var_18]
		mov	[ebp+var_1C], eax
		mov	ecx, [ebp+var_18]
		mov	[ebp+var_20], ecx
		mov	edx, [ebp+var_18]
		mov	eax, [edx+10h]
		and	eax, 40h
		jz	short loc_4CFC

loc_4CB8:				; CODE XREF: _psh_glyph_compute_extrema+195j
		mov	ecx, [ebp+var_1C]
		mov	edx, [ecx]
		mov	[ebp+var_1C], edx
		mov	eax, [ebp+var_1C]
		cmp	eax, [ebp+var_18]
		jnz	short loc_4CCD
		jmp	$Skip$39
; ---------------------------------------------------------------------------

loc_4CCD:				; CODE XREF: _psh_glyph_compute_extrema+182j
		mov	ecx, [ebp+var_1C]
		mov	edx, [ebp+var_18]
		mov	eax, [ecx+20h]
		cmp	eax, [edx+20h]
		jz	short loc_4CB8

loc_4CDB:				; CODE XREF: _psh_glyph_compute_extrema+1B6j
		mov	ecx, [ebp+var_20]
		mov	edx, [ecx+4]
		mov	[ebp+var_20], edx
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+var_18]
		jnz	short loc_4CEE
		jmp	short $Skip$39
; ---------------------------------------------------------------------------

loc_4CEE:				; CODE XREF: _psh_glyph_compute_extrema+1A6j
		mov	ecx, [ebp+var_20]
		mov	edx, [ebp+var_18]
		mov	eax, [ecx+20h]
		cmp	eax, [edx+20h]
		jz	short loc_4CDB

loc_4CFC:				; CODE XREF: _psh_glyph_compute_extrema+172j
		mov	ecx, [ebp+var_1C]
		mov	edx, [ebp+var_18]
		mov	eax, [ecx+20h]
		cmp	eax, [edx+20h]
		jge	short loc_4D2C
		mov	ecx, [ebp+var_20]
		mov	edx, [ebp+var_18]
		mov	eax, [ecx+20h]
		cmp	eax, [edx+20h]
		jle	short loc_4D2C
		mov	ecx, [ebp+var_18]
		mov	edx, [ecx+10h]
		or	edx, 80h
		mov	eax, [ebp+var_18]
		mov	[eax+10h], edx
		jmp	short $Skip$39
; ---------------------------------------------------------------------------

loc_4D2C:				; CODE XREF: _psh_glyph_compute_extrema+1C4j
					; _psh_glyph_compute_extrema+1D2j
		mov	ecx, [ebp+var_1C]
		mov	edx, [ebp+var_18]
		mov	eax, [ecx+20h]
		cmp	eax, [edx+20h]
		jle	short $Skip$39
		mov	ecx, [ebp+var_20]
		mov	edx, [ebp+var_18]
		mov	eax, [ecx+20h]
		cmp	eax, [edx+20h]
		jge	short $Skip$39
		mov	ecx, [ebp+var_18]
		mov	edx, [ecx+10h]
		or	edx, 100h
		mov	eax, [ebp+var_18]
		mov	[eax+10h], edx

$Skip$39:				; CODE XREF: _psh_glyph_compute_extrema+81j
					; _psh_glyph_compute_extrema+184j ...
		jmp	loc_4C7D
; ---------------------------------------------------------------------------

loc_4D5F:				; CODE XREF: _psh_glyph_compute_extrema+14Aj
		mov	esp, ebp
		pop	ebp
		retn
_psh_glyph_compute_extrema endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_hint_table_find_strong_points proc	near ; CODE XREF: _psh_glyph_find_strong_points+161p
					; _psh_glyph_find_strong_points+1B5p

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		push	edi
		lea	edi, [ebp+var_48]
		mov	ecx, 12h
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		mov	[ebp+var_8], eax
		jmp	short loc_4DA0
; ---------------------------------------------------------------------------

loc_4D8E:				; CODE XREF: _psh_hint_table_find_strong_points+61j
					; _psh_hint_table_find_strong_points:loc_50ADj
		mov	ecx, [ebp+arg_8]
		sub	ecx, 1
		mov	[ebp+arg_8], ecx
		mov	edx, [ebp+arg_4]
		add	edx, 28h ; '('
		mov	[ebp+arg_4], edx

loc_4DA0:				; CODE XREF: _psh_hint_table_find_strong_points+28j
		cmp	[ebp+arg_8], 0
		jbe	loc_50B2
		mov	[ebp+var_C], 0
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+1Ch]
		mov	[ebp+var_10], ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+10h]
		and	eax, 10h
		jz	short loc_4DC7
		jmp	short loc_4D8E
; ---------------------------------------------------------------------------

loc_4DC7:				; CODE XREF: _psh_hint_table_find_strong_points+5Fj
		mov	ecx, [ebp+arg_4]
		movsx	edx, byte ptr [ecx+14h]
		cmp	edx, [ebp+arg_10]
		jz	short loc_4DE3
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+14h]
		mov	edx, [ebp+arg_10]
		neg	edx
		cmp	ecx, edx
		jnz	short loc_4DEF

loc_4DE3:				; CODE XREF: _psh_hint_table_find_strong_points+6Dj
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+14h]
		mov	[ebp+var_C], ecx
		jmp	short loc_4E15
; ---------------------------------------------------------------------------

loc_4DEF:				; CODE XREF: _psh_hint_table_find_strong_points+7Dj
		mov	edx, [ebp+arg_4]
		movsx	eax, byte ptr [edx+15h]
		cmp	eax, [ebp+arg_10]
		jz	short loc_4E0B
		mov	ecx, [ebp+arg_4]
		movsx	edx, byte ptr [ecx+15h]
		mov	eax, [ebp+arg_10]
		neg	eax
		cmp	edx, eax
		jnz	short loc_4E15

loc_4E0B:				; CODE XREF: _psh_hint_table_find_strong_points+95j
		mov	ecx, [ebp+arg_4]
		movsx	edx, byte ptr [ecx+15h]
		mov	[ebp+var_C], edx

loc_4E15:				; CODE XREF: _psh_hint_table_find_strong_points+89j
					; _psh_hint_table_find_strong_points+A5j
		cmp	[ebp+var_C], 0
		jz	loc_4F22
		mov	eax, [ebp+var_C]
		cmp	eax, [ebp+arg_10]
		jnz	short loc_4E9D
		mov	[ebp+var_14], 0
		jmp	short loc_4E39
; ---------------------------------------------------------------------------

loc_4E30:				; CODE XREF: _psh_hint_table_find_strong_points:loc_4E96j
		mov	ecx, [ebp+var_14]
		add	ecx, 1
		mov	[ebp+var_14], ecx

loc_4E39:				; CODE XREF: _psh_hint_table_find_strong_points+CAj
		mov	edx, [ebp+var_14]
		cmp	edx, [ebp+var_8]
		jnb	short loc_4E98
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+eax*4]
		mov	[ebp+var_18], edx
		mov	eax, [ebp+var_18]
		mov	ecx, [ebp+var_10]
		sub	ecx, [eax]
		mov	[ebp+var_1C], ecx
		mov	edx, [ebp+var_1C]
		cmp	edx, [ebp+arg_C]
		jge	short loc_4E96
		mov	eax, [ebp+var_1C]
		neg	eax
		cmp	eax, [ebp+arg_C]
		jge	short loc_4E96
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+10h]
		or	edx, 10h
		mov	eax, [ebp+arg_4]
		mov	[eax+10h], edx
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+10h]
		or	edx, 200h
		mov	eax, [ebp+arg_4]
		mov	[eax+10h], edx
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+var_18]
		mov	[ecx+18h], edx
		jmp	short loc_4E98
; ---------------------------------------------------------------------------

loc_4E96:				; CODE XREF: _psh_hint_table_find_strong_points+FAj
					; _psh_hint_table_find_strong_points+104j
		jmp	short loc_4E30
; ---------------------------------------------------------------------------

loc_4E98:				; CODE XREF: _psh_hint_table_find_strong_points+DBj
					; _psh_hint_table_find_strong_points+130j
		jmp	loc_4F1D
; ---------------------------------------------------------------------------

loc_4E9D:				; CODE XREF: _psh_hint_table_find_strong_points+C1j
		mov	eax, [ebp+arg_10]
		neg	eax
		cmp	[ebp+var_C], eax
		jnz	short loc_4F1D
		mov	[ebp+var_20], 0
		jmp	short loc_4EB9
; ---------------------------------------------------------------------------

loc_4EB0:				; CODE XREF: _psh_hint_table_find_strong_points:loc_4F1Bj
		mov	ecx, [ebp+var_20]
		add	ecx, 1
		mov	[ebp+var_20], ecx

loc_4EB9:				; CODE XREF: _psh_hint_table_find_strong_points+14Aj
		mov	edx, [ebp+var_20]
		cmp	edx, [ebp+var_8]
		jnb	short loc_4F1D
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+eax*4]
		mov	[ebp+var_24], edx
		mov	eax, [ebp+var_24]
		mov	ecx, [ebp+var_10]
		sub	ecx, [eax]
		mov	edx, [ebp+var_24]
		sub	ecx, [edx+4]
		mov	[ebp+var_28], ecx
		mov	eax, [ebp+var_28]
		cmp	eax, [ebp+arg_C]
		jge	short loc_4F1B
		mov	ecx, [ebp+var_28]
		neg	ecx
		cmp	ecx, [ebp+arg_C]
		jge	short loc_4F1B
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+10h]
		or	eax, 10h
		mov	ecx, [ebp+arg_4]
		mov	[ecx+10h], eax
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+10h]
		or	eax, 400h
		mov	ecx, [ebp+arg_4]
		mov	[ecx+10h], eax
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+var_24]
		mov	[edx+18h], eax
		jmp	short loc_4F1D
; ---------------------------------------------------------------------------

loc_4F1B:				; CODE XREF: _psh_hint_table_find_strong_points+180j
					; _psh_hint_table_find_strong_points+18Aj
		jmp	short loc_4EB0
; ---------------------------------------------------------------------------

loc_4F1D:				; CODE XREF: _psh_hint_table_find_strong_points:loc_4E98j
					; _psh_hint_table_find_strong_points+141j ...
		jmp	loc_50AD
; ---------------------------------------------------------------------------

loc_4F22:				; CODE XREF: _psh_hint_table_find_strong_points+B5j
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+10h]
		and	edx, 40h
		jz	loc_50AD
		cmp	[ebp+arg_10], 2
		jnz	short loc_4F47
		mov	[ebp+var_30], 80h ; ''
		mov	[ebp+var_34], 100h
		jmp	short loc_4F55
; ---------------------------------------------------------------------------

loc_4F47:				; CODE XREF: _psh_hint_table_find_strong_points+1D1j
		mov	[ebp+var_30], 100h
		mov	[ebp+var_34], 80h ; ''

loc_4F55:				; CODE XREF: _psh_hint_table_find_strong_points+1E1j
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+10h]
		and	ecx, [ebp+var_30]
		jz	short loc_4FD5
		mov	[ebp+var_2C], 0
		jmp	short loc_4F72
; ---------------------------------------------------------------------------

loc_4F69:				; CODE XREF: _psh_hint_table_find_strong_points:loc_4FCEj
		mov	edx, [ebp+var_2C]
		add	edx, 1
		mov	[ebp+var_2C], edx

loc_4F72:				; CODE XREF: _psh_hint_table_find_strong_points+203j
		mov	eax, [ebp+var_2C]
		cmp	eax, [ebp+var_8]
		jnb	short loc_4FD0
		mov	ecx, [ebp+var_2C]
		mov	edx, [ebp+var_4]
		mov	eax, [edx+ecx*4]
		mov	[ebp+var_38], eax
		mov	ecx, [ebp+var_38]
		mov	edx, [ebp+var_10]
		sub	edx, [ecx]
		mov	[ebp+var_3C], edx
		mov	eax, [ebp+var_3C]
		cmp	eax, [ebp+arg_C]
		jge	short loc_4FCE
		mov	ecx, [ebp+var_3C]
		neg	ecx
		cmp	ecx, [ebp+arg_C]
		jge	short loc_4FCE
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+10h]
		or	eax, 200h
		mov	ecx, [ebp+arg_4]
		mov	[ecx+10h], eax
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+var_38]
		mov	[edx+18h], eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+10h]
		or	edx, 10h
		mov	eax, [ebp+arg_4]
		mov	[eax+10h], edx
		jmp	short loc_4FD0
; ---------------------------------------------------------------------------

loc_4FCE:				; CODE XREF: _psh_hint_table_find_strong_points+233j
					; _psh_hint_table_find_strong_points+23Dj
		jmp	short loc_4F69
; ---------------------------------------------------------------------------

loc_4FD0:				; CODE XREF: _psh_hint_table_find_strong_points+214j
					; _psh_hint_table_find_strong_points+268j
		jmp	loc_5057
; ---------------------------------------------------------------------------

loc_4FD5:				; CODE XREF: _psh_hint_table_find_strong_points+1FAj
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+10h]
		and	edx, [ebp+var_34]
		jz	short loc_5057
		mov	[ebp+var_2C], 0
		jmp	short loc_4FF2
; ---------------------------------------------------------------------------

loc_4FE9:				; CODE XREF: _psh_hint_table_find_strong_points:loc_5055j
		mov	eax, [ebp+var_2C]
		add	eax, 1
		mov	[ebp+var_2C], eax

loc_4FF2:				; CODE XREF: _psh_hint_table_find_strong_points+283j
		mov	ecx, [ebp+var_2C]
		cmp	ecx, [ebp+var_8]
		jnb	short loc_5057
		mov	edx, [ebp+var_2C]
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+edx*4]
		mov	[ebp+var_40], ecx
		mov	edx, [ebp+var_40]
		mov	eax, [ebp+var_10]
		sub	eax, [edx]
		mov	ecx, [ebp+var_40]
		sub	eax, [ecx+4]
		mov	[ebp+var_44], eax
		mov	edx, [ebp+var_44]
		cmp	edx, [ebp+arg_C]
		jge	short loc_5055
		mov	eax, [ebp+var_44]
		neg	eax
		cmp	eax, [ebp+arg_C]
		jge	short loc_5055
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+10h]
		or	edx, 400h
		mov	eax, [ebp+arg_4]
		mov	[eax+10h], edx
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+var_40]
		mov	[ecx+18h], edx
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+10h]
		or	ecx, 10h
		mov	edx, [ebp+arg_4]
		mov	[edx+10h], ecx
		jmp	short loc_5057
; ---------------------------------------------------------------------------

loc_5055:				; CODE XREF: _psh_hint_table_find_strong_points+2B9j
					; _psh_hint_table_find_strong_points+2C3j
		jmp	short loc_4FE9
; ---------------------------------------------------------------------------

loc_5057:				; CODE XREF: _psh_hint_table_find_strong_points:loc_4FD0j
					; _psh_hint_table_find_strong_points+27Aj ...
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax+18h], 0
		jnz	short loc_50AD
		mov	[ebp+var_2C], 0
		jmp	short loc_5072
; ---------------------------------------------------------------------------

loc_5069:				; CODE XREF: _psh_hint_table_find_strong_points:loc_50ABj
		mov	ecx, [ebp+var_2C]
		add	ecx, 1
		mov	[ebp+var_2C], ecx

loc_5072:				; CODE XREF: _psh_hint_table_find_strong_points+303j
		mov	edx, [ebp+var_2C]
		cmp	edx, [ebp+var_8]
		jnb	short loc_50AD
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+eax*4]
		mov	[ebp+var_48], edx
		mov	eax, [ebp+var_48]
		mov	ecx, [ebp+var_10]
		cmp	ecx, [eax]
		jl	short loc_50AB
		mov	edx, [ebp+var_48]
		mov	eax, [edx]
		mov	ecx, [ebp+var_48]
		add	eax, [ecx+4]
		cmp	[ebp+var_10], eax
		jg	short loc_50AB
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+var_48]
		mov	[edx+18h], eax
		jmp	short loc_50AD
; ---------------------------------------------------------------------------

loc_50AB:				; CODE XREF: _psh_hint_table_find_strong_points+32Aj
					; _psh_hint_table_find_strong_points+33Aj
		jmp	short loc_5069
; ---------------------------------------------------------------------------

loc_50AD:				; CODE XREF: _psh_hint_table_find_strong_points:loc_4F1Dj
					; _psh_hint_table_find_strong_points+1C7j ...
		jmp	loc_4D8E
; ---------------------------------------------------------------------------

loc_50B2:				; CODE XREF: _psh_hint_table_find_strong_points+40j
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn
_psh_hint_table_find_strong_points endp

; ---------------------------------------------------------------------------
		db 0Dh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_glyph_find_strong_points proc near	; CODE XREF: _ps_hints_apply+2CFp

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		push	edi
		lea	edi, [ebp+var_48]
		mov	ecx, 12h
		mov	eax, 0CCCCCCCCh
		rep stosd
		imul	eax, [ebp+arg_4], 28h
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax+1Ch]
		mov	[ebp+var_4], edx
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+20h]
		mov	edx, [ecx+8]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+20h]
		mov	edx, [ecx]
		mov	[ebp+var_C], edx
		mov	[ebp+var_10], 0
		cmp	[ebp+arg_4], 0
		jnz	short loc_5115
		mov	[ebp+var_40], 1
		jmp	short loc_511C
; ---------------------------------------------------------------------------

loc_5115:				; CODE XREF: _psh_glyph_find_strong_points+46j
		mov	[ebp+var_40], 2

loc_511C:				; CODE XREF: _psh_glyph_find_strong_points+4Fj
		mov	eax, [ebp+var_40]
		mov	[ebp+var_14], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+18h]
		imul	eax, [ebp+arg_4], 0CCh
		lea	ecx, [edx+eax+4]
		mov	[ebp+var_18], ecx
		mov	edx, [ebp+var_18]
		mov	eax, [edx+0C4h]
		mov	[ebp+var_1C], eax
		mov	ecx, [ebp+var_1C]
		push	ecx
		push	20h ; ' '
		call	_FT_DivFix
		add	esp, 8
		mov	[ebp+var_20], eax
		cmp	[ebp+var_20], 1Eh
		jle	short loc_5160
		mov	[ebp+var_20], 1Eh

loc_5160:				; CODE XREF: _psh_glyph_find_strong_points+93j
		cmp	[ebp+var_C], 1
		jbe	loc_5238
		mov	edx, [ebp+arg_0]
		cmp	dword ptr [edx], 0
		jbe	loc_5238
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+0Ch]
		cmp	edx, [ecx]
		jbe	short loc_518D
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_44], ecx
		jmp	short loc_5196
; ---------------------------------------------------------------------------

loc_518D:				; CODE XREF: _psh_glyph_find_strong_points+BDj
		mov	edx, [ebp+var_8]
		mov	eax, [edx+0Ch]
		mov	[ebp+var_44], eax

loc_5196:				; CODE XREF: _psh_glyph_find_strong_points+C7j
		mov	ecx, [ebp+var_44]
		mov	[ebp+var_10], ecx
		mov	edx, [ebp+var_8]
		add	edx, 10h
		mov	[ebp+var_8], edx
		jmp	short loc_51B9
; ---------------------------------------------------------------------------

loc_51A7:				; CODE XREF: _psh_glyph_find_strong_points+16Fj
		mov	eax, [ebp+var_C]
		sub	eax, 1
		mov	[ebp+var_C], eax
		mov	ecx, [ebp+var_8]
		add	ecx, 10h
		mov	[ebp+var_8], ecx

loc_51B9:				; CODE XREF: _psh_glyph_find_strong_points+E1j
		cmp	[ebp+var_C], 1
		jbe	short loc_5238
		mov	edx, [ebp+var_8]
		mov	eax, [ebp+arg_0]
		mov	ecx, [edx+0Ch]
		cmp	ecx, [eax]
		jbe	short loc_51D6
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	[ebp+var_48], eax
		jmp	short loc_51DF
; ---------------------------------------------------------------------------

loc_51D6:				; CODE XREF: _psh_glyph_find_strong_points+106j
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+0Ch]
		mov	[ebp+var_48], edx

loc_51DF:				; CODE XREF: _psh_glyph_find_strong_points+110j
		mov	eax, [ebp+var_48]
		mov	[ebp+var_24], eax
		mov	ecx, [ebp+var_24]
		sub	ecx, [ebp+var_10]
		mov	[ebp+var_28], ecx
		cmp	[ebp+var_28], 0
		jle	short loc_522D
		imul	edx, [ebp+var_10], 28h
		mov	eax, [ebp+arg_0]
		add	edx, [eax+8]
		mov	[ebp+var_2C], edx
		mov	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+var_4]
		push	edx
		call	_psh_hint_table_activate_mask
		add	esp, 8
		mov	eax, [ebp+var_14]
		push	eax
		mov	ecx, [ebp+var_20]
		push	ecx
		mov	edx, [ebp+var_28]
		push	edx
		mov	eax, [ebp+var_2C]
		push	eax
		mov	ecx, [ebp+var_4]
		push	ecx
		call	_psh_hint_table_find_strong_points
		add	esp, 14h

loc_522D:				; CODE XREF: _psh_glyph_find_strong_points+12Ej
		mov	edx, [ebp+var_24]
		mov	[ebp+var_10], edx
		jmp	loc_51A7
; ---------------------------------------------------------------------------

loc_5238:				; CODE XREF: _psh_glyph_find_strong_points+A0j
					; _psh_glyph_find_strong_points+ACj ...
		cmp	[ebp+var_C], 1
		jnz	short loc_5281
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_30], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[ebp+var_34], eax
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+20h]
		mov	eax, [edx+8]
		push	eax
		mov	ecx, [ebp+var_4]
		push	ecx
		call	_psh_hint_table_activate_mask
		add	esp, 8
		mov	edx, [ebp+var_14]
		push	edx
		mov	eax, [ebp+var_20]
		push	eax
		mov	ecx, [ebp+var_30]
		push	ecx
		mov	edx, [ebp+var_34]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		call	_psh_hint_table_find_strong_points
		add	esp, 14h

loc_5281:				; CODE XREF: _psh_glyph_find_strong_points+178j
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	[ebp+var_38], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	[ebp+var_3C], ecx
		jmp	short loc_52A6
; ---------------------------------------------------------------------------

loc_5294:				; CODE XREF: _psh_glyph_find_strong_points:loc_52CFj
		mov	edx, [ebp+var_38]
		sub	edx, 1
		mov	[ebp+var_38], edx
		mov	eax, [ebp+var_3C]
		add	eax, 28h ; '('
		mov	[ebp+var_3C], eax

loc_52A6:				; CODE XREF: _psh_glyph_find_strong_points+1CEj
		cmp	[ebp+var_38], 0
		jbe	short loc_52D1
		mov	ecx, [ebp+var_3C]
		cmp	dword ptr [ecx+18h], 0
		jz	short loc_52CF
		mov	edx, [ebp+var_3C]
		mov	eax, [edx+10h]
		and	eax, 10h
		jnz	short loc_52CF
		mov	ecx, [ebp+var_3C]
		mov	edx, [ecx+10h]
		or	edx, 10h
		mov	eax, [ebp+var_3C]
		mov	[eax+10h], edx

loc_52CF:				; CODE XREF: _psh_glyph_find_strong_points+1EFj
					; _psh_glyph_find_strong_points+1FAj
		jmp	short loc_5294
; ---------------------------------------------------------------------------

loc_52D1:				; CODE XREF: _psh_glyph_find_strong_points+1E6j
		pop	edi
		add	esp, 48h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_psh_glyph_find_strong_points endp

; ---------------------------------------------------------------------------
		db 4 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_glyph_find_blue_points proc near	; CODE XREF: _ps_hints_apply+2F1p

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_20], eax
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+8]
		mov	[ebp+var_14], eax
		jmp	short loc_532C
; ---------------------------------------------------------------------------

loc_531A:				; CODE XREF: _psh_glyph_find_blue_points+82j
					; _psh_glyph_find_blue_points+8Fj ...
		mov	ecx, [ebp+var_C]
		sub	ecx, 1
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+var_14]
		add	edx, 28h ; '('
		mov	[ebp+var_14], edx

loc_532C:				; CODE XREF: _psh_glyph_find_blue_points+34j
		cmp	[ebp+var_C], 0
		jbe	loc_54EC
		mov	eax, [ebp+var_14]
		movsx	ecx, byte ptr [eax+14h]
		cmp	ecx, 2
		jz	short loc_5368
		mov	edx, [ebp+var_14]
		movsx	eax, byte ptr [edx+14h]
		cmp	eax, 0FFFFFFFEh
		jz	short loc_5368
		mov	ecx, [ebp+var_14]
		movsx	edx, byte ptr [ecx+15h]
		cmp	edx, 2
		jz	short loc_5368
		mov	eax, [ebp+var_14]
		movsx	ecx, byte ptr [eax+15h]
		cmp	ecx, 0FFFFFFFEh
		jz	short loc_5368
		jmp	short loc_531A
; ---------------------------------------------------------------------------

loc_5368:				; CODE XREF: _psh_glyph_find_blue_points+5Cj
					; _psh_glyph_find_blue_points+68j ...
		mov	edx, [ebp+var_14]
		mov	eax, [edx+10h]
		and	eax, 10h
		jz	short loc_5375
		jmp	short loc_531A
; ---------------------------------------------------------------------------

loc_5375:				; CODE XREF: _psh_glyph_find_blue_points+8Dj
		mov	ecx, [ebp+var_14]
		mov	edx, [ecx+1Ch]
		mov	[ebp+var_18], edx
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx]
		mov	[ebp+var_10], edx
		mov	eax, [ebp+var_4]
		add	eax, 4
		mov	[ebp+var_8], eax
		jmp	short loc_53A9
; ---------------------------------------------------------------------------

loc_5397:				; CODE XREF: _psh_glyph_find_blue_points:loc_5427j
		mov	ecx, [ebp+var_10]
		sub	ecx, 1
		mov	[ebp+var_10], ecx
		mov	edx, [ebp+var_8]
		add	edx, 20h ; ' '
		mov	[ebp+var_8], edx

loc_53A9:				; CODE XREF: _psh_glyph_find_blue_points+B1j
		cmp	[ebp+var_10], 0
		jbe	short loc_542C
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_18]
		sub	ecx, [eax+0Ch]
		mov	[ebp+var_1C], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+81Ch]
		neg	eax
		cmp	[ebp+var_1C], eax
		jge	short loc_53CD
		jmp	short loc_542C
; ---------------------------------------------------------------------------

loc_53CD:				; CODE XREF: _psh_glyph_find_blue_points+E5j
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+8]
		mov	eax, [ebp+arg_0]
		add	edx, [eax+81Ch]
		cmp	[ebp+var_18], edx
		jg	short loc_5427
		mov	ecx, [ebp+arg_0]
		movzx	edx, byte ptr [ecx+820h]
		test	edx, edx
		jnz	short loc_53FD
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_1C]
		cmp	ecx, [eax+818h]
		jg	short loc_5427

loc_53FD:				; CODE XREF: _psh_glyph_find_blue_points+109j
		mov	edx, [ebp+var_14]
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+18h]
		mov	[edx+24h], ecx
		mov	edx, [ebp+var_14]
		mov	eax, [edx+10h]
		or	eax, 10h
		mov	ecx, [ebp+var_14]
		mov	[ecx+10h], eax
		mov	edx, [ebp+var_14]
		mov	eax, [edx+10h]
		or	eax, 20h
		mov	ecx, [ebp+var_14]
		mov	[ecx+10h], eax

loc_5427:				; CODE XREF: _psh_glyph_find_blue_points+FBj
					; _psh_glyph_find_blue_points+117j
		jmp	loc_5397
; ---------------------------------------------------------------------------

loc_542C:				; CODE XREF: _psh_glyph_find_blue_points+C9j
					; _psh_glyph_find_blue_points+E7j
		mov	edx, [ebp+arg_0]
		add	edx, 204h
		mov	[ebp+var_4], edx
		mov	eax, [ebp+var_4]
		mov	ecx, [eax]
		mov	[ebp+var_10], ecx
		mov	edx, [ebp+var_10]
		shl	edx, 5
		mov	eax, [ebp+var_4]
		lea	ecx, [eax+edx-1Ch]
		mov	[ebp+var_8], ecx
		jmp	short loc_5464
; ---------------------------------------------------------------------------

loc_5452:				; CODE XREF: _psh_glyph_find_blue_points:loc_54E2j
		mov	edx, [ebp+var_10]
		sub	edx, 1
		mov	[ebp+var_10], edx
		mov	eax, [ebp+var_8]
		sub	eax, 20h ; ' '
		mov	[ebp+var_8], eax

loc_5464:				; CODE XREF: _psh_glyph_find_blue_points+16Cj
		cmp	[ebp+var_10], 0
		jbe	short loc_54E7
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+8]
		sub	edx, [ebp+var_18]
		mov	[ebp+var_20], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+81Ch]
		neg	ecx
		cmp	[ebp+var_20], ecx
		jge	short loc_5488
		jmp	short loc_54E7
; ---------------------------------------------------------------------------

loc_5488:				; CODE XREF: _psh_glyph_find_blue_points+1A0j
		mov	edx, [ebp+var_8]
		mov	eax, [ebp+arg_0]
		mov	ecx, [edx+0Ch]
		sub	ecx, [eax+81Ch]
		cmp	[ebp+var_18], ecx
		jl	short loc_54E2
		mov	edx, [ebp+arg_0]
		movzx	eax, byte ptr [edx+820h]
		test	eax, eax
		jnz	short loc_54B8
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_20]
		cmp	edx, [ecx+818h]
		jge	short loc_54E2

loc_54B8:				; CODE XREF: _psh_glyph_find_blue_points+1C4j
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+1Ch]
		mov	[eax+24h], edx
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+10h]
		or	ecx, 10h
		mov	edx, [ebp+var_14]
		mov	[edx+10h], ecx
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+10h]
		or	ecx, 20h
		mov	edx, [ebp+var_14]
		mov	[edx+10h], ecx

loc_54E2:				; CODE XREF: _psh_glyph_find_blue_points+1B6j
					; _psh_glyph_find_blue_points+1D2j
		jmp	loc_5452
; ---------------------------------------------------------------------------

loc_54E7:				; CODE XREF: _psh_glyph_find_blue_points+184j
					; _psh_glyph_find_blue_points+1A2j
		jmp	loc_531A
; ---------------------------------------------------------------------------

loc_54EC:				; CODE XREF: _psh_glyph_find_blue_points+4Cj
		mov	esp, ebp
		pop	ebp
		retn
_psh_glyph_find_blue_points endp

; ---------------------------------------------------------------------------
		db 4 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_glyph_interpolate_strong_points proc near ; CODE XREF: _ps_hints_apply+307p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+18h]
		imul	edx, [ebp+arg_4], 0CCh
		lea	eax, [ecx+edx+4]
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+0C4h]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[ebp+var_10], eax
		jmp	short loc_5557
; ---------------------------------------------------------------------------

loc_5545:				; CODE XREF: _psh_glyph_interpolate_strong_points:loc_5655j
		mov	ecx, [ebp+var_C]
		sub	ecx, 1
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+var_10]
		add	edx, 28h ; '('
		mov	[ebp+var_10], edx

loc_5557:				; CODE XREF: _psh_glyph_interpolate_strong_points+4Fj
		cmp	[ebp+var_C], 0
		jbe	loc_565A
		mov	eax, [ebp+var_10]
		mov	ecx, [eax+18h]
		mov	[ebp+var_14], ecx
		cmp	[ebp+var_14], 0
		jz	loc_5655
		mov	edx, [ebp+var_10]
		mov	eax, [edx+10h]
		and	eax, 200h
		jz	short loc_5592
		mov	ecx, [ebp+var_10]
		mov	edx, [ebp+var_14]
		mov	eax, [edx+8]
		mov	[ecx+24h], eax
		jmp	loc_5646
; ---------------------------------------------------------------------------

loc_5592:				; CODE XREF: _psh_glyph_interpolate_strong_points+8Bj
		mov	ecx, [ebp+var_10]
		mov	edx, [ecx+10h]
		and	edx, 400h
		jz	short loc_55B7
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+8]
		mov	edx, [ebp+var_14]
		add	ecx, [edx+0Ch]
		mov	eax, [ebp+var_10]
		mov	[eax+24h], ecx
		jmp	loc_5646
; ---------------------------------------------------------------------------

loc_55B7:				; CODE XREF: _psh_glyph_interpolate_strong_points+AAj
		mov	ecx, [ebp+var_10]
		mov	edx, [ebp+var_14]
		mov	eax, [ecx+1Ch]
		sub	eax, [edx]
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jg	short loc_55E9
		mov	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+var_18]
		push	edx
		call	_FT_MulFix_i386
		add	esp, 8
		mov	ecx, [ebp+var_14]
		add	eax, [ecx+8]
		mov	edx, [ebp+var_10]
		mov	[edx+24h], eax
		jmp	short loc_5646
; ---------------------------------------------------------------------------

loc_55E9:				; CODE XREF: _psh_glyph_interpolate_strong_points+D5j
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_18]
		cmp	ecx, [eax+4]
		jl	short loc_5620
		mov	edx, [ebp+var_14]
		mov	esi, [edx+8]
		mov	eax, [ebp+var_14]
		add	esi, [eax+0Ch]
		mov	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+var_14]
		mov	eax, [ebp+var_18]
		sub	eax, [edx+4]
		push	eax
		call	_FT_MulFix_i386
		add	esp, 8
		add	esi, eax
		mov	ecx, [ebp+var_10]
		mov	[ecx+24h], esi
		jmp	short loc_5646
; ---------------------------------------------------------------------------

loc_5620:				; CODE XREF: _psh_glyph_interpolate_strong_points+FEj
		mov	edx, [ebp+var_14]
		mov	eax, [edx+4]
		push	eax
		mov	ecx, [ebp+var_14]
		mov	edx, [ecx+0Ch]
		push	edx
		mov	eax, [ebp+var_18]
		push	eax
		call	_FT_MulDiv
		add	esp, 0Ch
		mov	ecx, [ebp+var_14]
		add	eax, [ecx+8]
		mov	edx, [ebp+var_10]
		mov	[edx+24h], eax

loc_5646:				; CODE XREF: _psh_glyph_interpolate_strong_points+99j
					; _psh_glyph_interpolate_strong_points+BEj ...
		mov	eax, [ebp+var_10]
		mov	ecx, [eax+10h]
		or	ecx, 20h
		mov	edx, [ebp+var_10]
		mov	[edx+10h], ecx

loc_5655:				; CODE XREF: _psh_glyph_interpolate_strong_points+7Aj
		jmp	loc_5545
; ---------------------------------------------------------------------------

loc_565A:				; CODE XREF: _psh_glyph_interpolate_strong_points+67j
		pop	esi
		add	esp, 18h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_psh_glyph_interpolate_strong_points endp

; ---------------------------------------------------------------------------
		db 0Bh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_glyph_interpolate_normal_points proc near ; CODE XREF: _ps_hints_apply+31Dp

var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_74		= dword	ptr -74h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_58		= byte ptr -58h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8Ch
		push	esi
		push	edi
		lea	edi, [ebp+var_8C]
		mov	ecx, 23h ; '#'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+18h]
		imul	edx, [ebp+arg_4], 0CCh
		lea	eax, [ecx+edx+4]
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+0C4h]
		mov	[ebp+var_C], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+10h]
		mov	[ebp+var_10], ecx
		mov	[ebp+var_14], 0
		mov	[ebp+var_60], 0
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	[ebp+var_64], eax
		mov	ecx, [ebp+arg_0]
		imul	edx, [ecx], 28h
		add	edx, [ebp+var_64]
		mov	[ebp+var_68], edx
		mov	eax, [ebp+var_64]
		mov	[ebp+var_6C], eax
		jmp	short loc_56F8
; ---------------------------------------------------------------------------

loc_56EF:				; CODE XREF: _psh_glyph_interpolate_normal_points:loc_5714j
		mov	ecx, [ebp+var_6C]
		add	ecx, 28h ; '('
		mov	[ebp+var_6C], ecx

loc_56F8:				; CODE XREF: _psh_glyph_interpolate_normal_points+79j
		mov	edx, [ebp+var_6C]
		cmp	edx, [ebp+var_68]
		jnb	short loc_5716
		mov	eax, [ebp+var_6C]
		mov	ecx, [eax+10h]
		and	ecx, 10h
		jz	short loc_5714
		mov	edx, [ebp+var_60]
		add	edx, 1
		mov	[ebp+var_60], edx

loc_5714:				; CODE XREF: _psh_glyph_interpolate_normal_points+95j
		jmp	short loc_56EF
; ---------------------------------------------------------------------------

loc_5716:				; CODE XREF: _psh_glyph_interpolate_normal_points+8Aj
		cmp	[ebp+var_60], 0
		jnz	short loc_5721
		jmp	loc_5A71
; ---------------------------------------------------------------------------

loc_5721:				; CODE XREF: _psh_glyph_interpolate_normal_points+A6j
		cmp	[ebp+var_60], 10h
		ja	short loc_572F
		lea	eax, [ebp+var_58]
		mov	[ebp+var_14], eax
		jmp	short loc_5757
; ---------------------------------------------------------------------------

loc_572F:				; CODE XREF: _psh_glyph_interpolate_normal_points+B1j
		lea	ecx, [ebp+var_74]
		push	ecx
		push	0
		mov	edx, [ebp+var_60]
		push	edx
		push	0
		push	4
		mov	eax, [ebp+var_10]
		push	eax
		call	_ft_mem_realloc
		add	esp, 18h
		mov	[ebp+var_14], eax
		cmp	[ebp+var_74], 0
		jz	short loc_5757
		jmp	loc_5A71
; ---------------------------------------------------------------------------

loc_5757:				; CODE XREF: _psh_glyph_interpolate_normal_points+B9j
					; _psh_glyph_interpolate_normal_points+DCj
		mov	[ebp+var_60], 0
		mov	ecx, [ebp+var_64]
		mov	[ebp+var_6C], ecx
		jmp	short loc_576F
; ---------------------------------------------------------------------------

loc_5766:				; CODE XREF: _psh_glyph_interpolate_normal_points+112j
					; _psh_glyph_interpolate_normal_points+186j
		mov	edx, [ebp+var_6C]
		add	edx, 28h ; '('
		mov	[ebp+var_6C], edx

loc_576F:				; CODE XREF: _psh_glyph_interpolate_normal_points+F0j
		mov	eax, [ebp+var_6C]
		cmp	eax, [ebp+var_68]
		jnb	loc_57FF
		mov	ecx, [ebp+var_6C]
		mov	edx, [ecx+10h]
		and	edx, 10h
		jnz	short loc_5788
		jmp	short loc_5766
; ---------------------------------------------------------------------------

loc_5788:				; CODE XREF: _psh_glyph_interpolate_normal_points+110j
		mov	eax, [ebp+var_60]
		mov	ecx, [ebp+var_14]
		lea	edx, [ecx+eax*4]
		mov	[ebp+var_7C], edx
		jmp	short loc_579F
; ---------------------------------------------------------------------------

loc_5796:				; CODE XREF: _psh_glyph_interpolate_normal_points+16Aj
		mov	eax, [ebp+var_7C]
		sub	eax, 4
		mov	[ebp+var_7C], eax

loc_579F:				; CODE XREF: _psh_glyph_interpolate_normal_points+120j
		mov	ecx, [ebp+var_7C]
		cmp	ecx, [ebp+var_14]
		jbe	short loc_57E0
		mov	edx, 4
		imul	eax, edx, -1
		mov	ecx, [ebp+var_7C]
		mov	edx, [ecx+eax]
		mov	eax, [ebp+var_6C]
		mov	ecx, [edx+1Ch]
		cmp	ecx, [eax+1Ch]
		jg	short loc_57C2
		jmp	short loc_57E0
; ---------------------------------------------------------------------------

loc_57C2:				; CODE XREF: _psh_glyph_interpolate_normal_points+14Aj
		mov	edx, 4
		imul	eax, edx, -1
		mov	ecx, 4
		imul	edx, ecx, 0
		mov	ecx, [ebp+var_7C]
		mov	esi, [ebp+var_7C]
		mov	eax, [esi+eax]
		mov	[ecx+edx], eax
		jmp	short loc_5796
; ---------------------------------------------------------------------------

loc_57E0:				; CODE XREF: _psh_glyph_interpolate_normal_points+131j
					; _psh_glyph_interpolate_normal_points+14Cj
		mov	ecx, 4
		imul	edx, ecx, 0
		mov	eax, [ebp+var_7C]
		mov	ecx, [ebp+var_6C]
		mov	[eax+edx], ecx
		mov	edx, [ebp+var_60]
		add	edx, 1
		mov	[ebp+var_60], edx
		jmp	loc_5766
; ---------------------------------------------------------------------------

loc_57FF:				; CODE XREF: _psh_glyph_interpolate_normal_points+101j
		mov	eax, [ebp+var_64]
		mov	[ebp+var_6C], eax
		jmp	short loc_5810
; ---------------------------------------------------------------------------

loc_5807:				; CODE XREF: _psh_glyph_interpolate_normal_points+1B3j
					; _psh_glyph_interpolate_normal_points:loc_5852j ...
		mov	ecx, [ebp+var_6C]
		add	ecx, 28h ; '('
		mov	[ebp+var_6C], ecx

loc_5810:				; CODE XREF: _psh_glyph_interpolate_normal_points+191j
		mov	edx, [ebp+var_6C]
		cmp	edx, [ebp+var_68]
		jnb	loc_5A4E
		mov	eax, [ebp+var_6C]
		mov	ecx, [eax+10h]
		and	ecx, 10h
		jz	short loc_5829
		jmp	short loc_5807
; ---------------------------------------------------------------------------

loc_5829:				; CODE XREF: _psh_glyph_interpolate_normal_points+1B1j
		mov	edx, [ebp+var_6C]
		mov	eax, [edx+0Ch]
		and	eax, 2
		jz	short loc_587B
		mov	ecx, [ebp+var_6C]
		movsx	edx, byte ptr [ecx+14h]
		cmp	edx, 4
		jz	short loc_5852
		mov	eax, [ebp+var_6C]
		movsx	ecx, byte ptr [eax+14h]
		mov	edx, [ebp+var_6C]
		movsx	eax, byte ptr [edx+15h]
		cmp	ecx, eax
		jz	short loc_5854

loc_5852:				; CODE XREF: _psh_glyph_interpolate_normal_points+1CAj
		jmp	short loc_5807
; ---------------------------------------------------------------------------

loc_5854:				; CODE XREF: _psh_glyph_interpolate_normal_points+1DCj
		mov	ecx, [ebp+var_6C]
		mov	edx, [ecx+10h]
		and	edx, 40h
		jnz	short loc_586C
		mov	eax, [ebp+var_6C]
		mov	ecx, [eax+0Ch]
		and	ecx, 4
		jnz	short loc_586C
		jmp	short loc_5807
; ---------------------------------------------------------------------------

loc_586C:				; CODE XREF: _psh_glyph_interpolate_normal_points+1E9j
					; _psh_glyph_interpolate_normal_points+1F4j
		mov	edx, [ebp+var_6C]
		mov	eax, [edx+0Ch]
		and	eax, 0FFFFFFFDh
		mov	ecx, [ebp+var_6C]
		mov	[ecx+0Ch], eax

loc_587B:				; CODE XREF: _psh_glyph_interpolate_normal_points+1BEj
		mov	[ebp+var_88], 0
		jmp	short loc_5896
; ---------------------------------------------------------------------------

loc_5887:				; CODE XREF: _psh_glyph_interpolate_normal_points:loc_58BAj
		mov	edx, [ebp+var_88]
		add	edx, 1
		mov	[ebp+var_88], edx

loc_5896:				; CODE XREF: _psh_glyph_interpolate_normal_points+211j
		mov	eax, [ebp+var_88]
		cmp	eax, [ebp+var_60]
		jnb	short loc_58BC
		mov	ecx, [ebp+var_88]
		mov	edx, [ebp+var_14]
		mov	eax, [edx+ecx*4]
		mov	ecx, [ebp+var_6C]
		mov	edx, [eax+1Ch]
		cmp	edx, [ecx+1Ch]
		jle	short loc_58BA
		jmp	short loc_58BC
; ---------------------------------------------------------------------------

loc_58BA:				; CODE XREF: _psh_glyph_interpolate_normal_points+242j
		jmp	short loc_5887
; ---------------------------------------------------------------------------

loc_58BC:				; CODE XREF: _psh_glyph_interpolate_normal_points+22Bj
					; _psh_glyph_interpolate_normal_points+244j
		cmp	[ebp+var_88], 0
		jnz	short loc_5909
		mov	eax, 4
		imul	ecx, eax, 0
		mov	edx, [ebp+var_14]
		mov	eax, [edx+ecx]
		mov	[ebp+var_84], eax
		mov	ecx, [ebp+var_C]
		push	ecx
		mov	edx, [ebp+var_6C]
		mov	eax, [ebp+var_84]
		mov	ecx, [edx+1Ch]
		sub	ecx, [eax+1Ch]
		push	ecx
		call	_FT_MulFix_i386
		add	esp, 8
		mov	edx, [ebp+var_84]
		add	eax, [edx+24h]
		mov	ecx, [ebp+var_6C]
		mov	[ecx+24h], eax
		jmp	loc_5A3A
; ---------------------------------------------------------------------------

loc_5909:				; CODE XREF: _psh_glyph_interpolate_normal_points+24Fj
		mov	edx, [ebp+var_88]
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+edx*4-4]
		mov	[ebp+var_80], ecx
		mov	edx, [ebp+var_60]
		mov	[ebp+var_88], edx
		jmp	short loc_5933
; ---------------------------------------------------------------------------

loc_5924:				; CODE XREF: _psh_glyph_interpolate_normal_points:loc_5956j
		mov	eax, [ebp+var_88]
		sub	eax, 1
		mov	[ebp+var_88], eax

loc_5933:				; CODE XREF: _psh_glyph_interpolate_normal_points+2AEj
		cmp	[ebp+var_88], 0
		jbe	short loc_5958
		mov	ecx, [ebp+var_88]
		mov	edx, [ebp+var_14]
		mov	eax, [edx+ecx*4-4]
		mov	ecx, [ebp+var_6C]
		mov	edx, [eax+1Ch]
		cmp	edx, [ecx+1Ch]
		jge	short loc_5956
		jmp	short loc_5958
; ---------------------------------------------------------------------------

loc_5956:				; CODE XREF: _psh_glyph_interpolate_normal_points+2DEj
		jmp	short loc_5924
; ---------------------------------------------------------------------------

loc_5958:				; CODE XREF: _psh_glyph_interpolate_normal_points+2C6j
					; _psh_glyph_interpolate_normal_points+2E0j
		mov	eax, [ebp+var_88]
		cmp	eax, [ebp+var_60]
		jnz	short loc_599D
		mov	ecx, [ebp+var_88]
		mov	edx, [ebp+var_14]
		mov	eax, [edx+ecx*4-4]
		mov	[ebp+var_80], eax
		mov	ecx, [ebp+var_C]
		push	ecx
		mov	edx, [ebp+var_6C]
		mov	eax, [ebp+var_80]
		mov	ecx, [edx+1Ch]
		sub	ecx, [eax+1Ch]
		push	ecx
		call	_FT_MulFix_i386
		add	esp, 8
		mov	edx, [ebp+var_80]
		add	eax, [edx+24h]
		mov	ecx, [ebp+var_6C]
		mov	[ecx+24h], eax
		jmp	loc_5A3A
; ---------------------------------------------------------------------------

loc_599D:				; CODE XREF: _psh_glyph_interpolate_normal_points+2EDj
		mov	edx, [ebp+var_88]
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+edx*4]
		mov	[ebp+var_84], ecx
		mov	edx, [ebp+var_6C]
		mov	eax, [edx+1Ch]
		mov	[ebp+var_8C], eax
		mov	ecx, [ebp+var_80]
		mov	edx, [ebp+var_8C]
		cmp	edx, [ecx+1Ch]
		jnz	short loc_59D7
		mov	eax, [ebp+var_6C]
		mov	ecx, [ebp+var_80]
		mov	edx, [ecx+24h]
		mov	[eax+24h], edx
		jmp	short loc_5A3A
; ---------------------------------------------------------------------------

loc_59D7:				; CODE XREF: _psh_glyph_interpolate_normal_points+353j
		mov	eax, [ebp+var_84]
		mov	ecx, [ebp+var_8C]
		cmp	ecx, [eax+1Ch]
		jnz	short loc_59F9
		mov	edx, [ebp+var_6C]
		mov	eax, [ebp+var_84]
		mov	ecx, [eax+24h]
		mov	[edx+24h], ecx
		jmp	short loc_5A3A
; ---------------------------------------------------------------------------

loc_59F9:				; CODE XREF: _psh_glyph_interpolate_normal_points+372j
		mov	edx, [ebp+var_84]
		mov	eax, [ebp+var_80]
		mov	ecx, [edx+1Ch]
		sub	ecx, [eax+1Ch]
		push	ecx
		mov	edx, [ebp+var_84]
		mov	eax, [ebp+var_80]
		mov	ecx, [edx+24h]
		sub	ecx, [eax+24h]
		push	ecx
		mov	edx, [ebp+var_80]
		mov	eax, [ebp+var_8C]
		sub	eax, [edx+1Ch]
		push	eax
		call	_FT_MulDiv
		add	esp, 0Ch
		mov	ecx, [ebp+var_80]
		add	eax, [ecx+24h]
		mov	edx, [ebp+var_6C]
		mov	[edx+24h], eax

loc_5A3A:				; CODE XREF: _psh_glyph_interpolate_normal_points+290j
					; _psh_glyph_interpolate_normal_points+324j ...
		mov	eax, [ebp+var_6C]
		mov	ecx, [eax+10h]
		or	ecx, 20h
		mov	edx, [ebp+var_6C]
		mov	[edx+10h], ecx
		jmp	loc_5807
; ---------------------------------------------------------------------------

loc_5A4E:				; CODE XREF: _psh_glyph_interpolate_normal_points+1A2j
		lea	eax, [ebp+var_58]
		cmp	[ebp+var_14], eax
		jz	short loc_5A71

loc_5A56:				; CODE XREF: _psh_glyph_interpolate_normal_points+3FBj
		mov	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+var_10]
		push	edx
		call	_ft_mem_free
		add	esp, 8
		mov	[ebp+var_14], 0
		xor	eax, eax
		jnz	short loc_5A56

loc_5A71:				; CODE XREF: _psh_glyph_interpolate_normal_points+A8j
					; _psh_glyph_interpolate_normal_points+DEj ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN50
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4
		add	esp, 8Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_psh_glyph_interpolate_normal_points endp

; ---------------------------------------------------------------------------
		align 10h
$LN50		dd 2			; DATA XREF: _psh_glyph_interpolate_normal_points+401o
		dd offset $LN49
$LN49		dd 0FFFFFFA8h, 40h	; DATA XREF: .text$mn:00005AA4o
		dd offset $LN47		; "strongs_0"
		dd 0FFFFFF8Ch, 4
		dd offset $LN48		; "error"
$LN48		db 'error',0            ; DATA XREF: .text$mn:00005ABCo
$LN47		db 'strongs_0',0        ; DATA XREF: .text$mn:00005AB0o
		db 4 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_psh_glyph_interpolate_other_points proc near ;	CODE XREF: _ps_hints_apply+333p

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		push	esi
		push	edi
		lea	edi, [ebp+var_48]
		mov	ecx, 12h
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+18h]
		imul	edx, [ebp+arg_4], 0CCh
		lea	eax, [ecx+edx+4]
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+0C4h]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+0C8h]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+0Ch]
		mov	[ebp+var_10], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	[ebp+var_14], edx
		jmp	short loc_5B3D
; ---------------------------------------------------------------------------

loc_5B2B:				; CODE XREF: _psh_glyph_interpolate_other_points:$Next_Contour$37j
		mov	eax, [ebp+var_14]
		sub	eax, 1
		mov	[ebp+var_14], eax
		mov	ecx, [ebp+var_10]
		add	ecx, 8
		mov	[ebp+var_10], ecx

loc_5B3D:				; CODE XREF: _psh_glyph_interpolate_other_points+55j
		cmp	[ebp+var_14], 0
		jbe	loc_5D8C
		mov	edx, [ebp+var_10]
		mov	eax, [edx]
		mov	[ebp+var_18], eax
		mov	ecx, [ebp+var_10]
		imul	edx, [ecx+4], 28h
		add	edx, [ebp+var_18]
		mov	[ebp+var_20], edx
		mov	[ebp+var_28], 0
		mov	[ebp+var_1C], 0
		mov	eax, [ebp+var_18]
		mov	[ebp+var_24], eax
		jmp	short loc_5B7B
; ---------------------------------------------------------------------------

loc_5B72:				; CODE XREF: _psh_glyph_interpolate_other_points:loc_5BA3j
		mov	ecx, [ebp+var_24]
		add	ecx, 28h ; '('
		mov	[ebp+var_24], ecx

loc_5B7B:				; CODE XREF: _psh_glyph_interpolate_other_points+9Cj
		mov	edx, [ebp+var_24]
		cmp	edx, [ebp+var_20]
		jnb	short loc_5BA5
		mov	eax, [ebp+var_24]
		mov	ecx, [eax+10h]
		and	ecx, 20h
		jz	short loc_5BA3
		cmp	[ebp+var_1C], 0
		jnz	short loc_5B9A
		mov	edx, [ebp+var_24]
		mov	[ebp+var_1C], edx

loc_5B9A:				; CODE XREF: _psh_glyph_interpolate_other_points+BEj
		mov	eax, [ebp+var_28]
		add	eax, 1
		mov	[ebp+var_28], eax

loc_5BA3:				; CODE XREF: _psh_glyph_interpolate_other_points+B8j
		jmp	short loc_5B72
; ---------------------------------------------------------------------------

loc_5BA5:				; CODE XREF: _psh_glyph_interpolate_other_points+ADj
		cmp	[ebp+var_28], 2
		jnb	short loc_5C13
		cmp	[ebp+var_28], 1
		jnz	short loc_5BCF
		mov	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+var_1C]
		mov	eax, [edx+1Ch]
		push	eax
		call	_FT_MulFix_i386
		add	esp, 8
		mov	ecx, [ebp+var_1C]
		mov	edx, [ecx+24h]
		sub	edx, eax
		mov	[ebp+var_C], edx

loc_5BCF:				; CODE XREF: _psh_glyph_interpolate_other_points+DBj
		mov	eax, [ebp+var_18]
		mov	[ebp+var_24], eax
		jmp	short loc_5BE0
; ---------------------------------------------------------------------------

loc_5BD7:				; CODE XREF: _psh_glyph_interpolate_other_points:loc_5C0Cj
		mov	ecx, [ebp+var_24]
		add	ecx, 28h ; '('
		mov	[ebp+var_24], ecx

loc_5BE0:				; CODE XREF: _psh_glyph_interpolate_other_points+101j
		mov	edx, [ebp+var_24]
		cmp	edx, [ebp+var_20]
		jnb	short loc_5C0E
		mov	eax, [ebp+var_24]
		cmp	eax, [ebp+var_1C]
		jz	short loc_5C0C
		mov	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+var_24]
		mov	eax, [edx+1Ch]
		push	eax
		call	_FT_MulFix_i386
		add	esp, 8
		add	eax, [ebp+var_C]
		mov	ecx, [ebp+var_24]
		mov	[ecx+24h], eax

loc_5C0C:				; CODE XREF: _psh_glyph_interpolate_other_points+11Aj
		jmp	short loc_5BD7
; ---------------------------------------------------------------------------

loc_5C0E:				; CODE XREF: _psh_glyph_interpolate_other_points+112j
		jmp	$Next_Contour$37
; ---------------------------------------------------------------------------

loc_5C13:				; CODE XREF: _psh_glyph_interpolate_other_points+D5j
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_18], edx

loc_5C19:				; CODE XREF: _psh_glyph_interpolate_other_points+16Ej
					; _psh_glyph_interpolate_other_points+2ADj
		mov	eax, [ebp+var_1C]
		mov	ecx, [eax+4]
		mov	[ebp+var_20], ecx
		mov	edx, [ebp+var_20]
		cmp	edx, [ebp+var_18]
		jnz	short loc_5C2F
		jmp	$Next_Contour$37
; ---------------------------------------------------------------------------

loc_5C2F:				; CODE XREF: _psh_glyph_interpolate_other_points+154j
		mov	eax, [ebp+var_20]
		mov	ecx, [eax+10h]
		and	ecx, 20h
		jnz	short loc_5C3C
		jmp	short loc_5C44
; ---------------------------------------------------------------------------

loc_5C3C:				; CODE XREF: _psh_glyph_interpolate_other_points+164j
		mov	edx, [ebp+var_20]
		mov	[ebp+var_1C], edx
		jmp	short loc_5C19
; ---------------------------------------------------------------------------

loc_5C44:				; CODE XREF: _psh_glyph_interpolate_other_points+166j
					; _psh_glyph_interpolate_other_points:loc_5C5Aj
		mov	eax, [ebp+var_20]
		mov	ecx, [eax+4]
		mov	[ebp+var_20], ecx
		mov	edx, [ebp+var_20]
		mov	eax, [edx+10h]
		and	eax, 20h
		jz	short loc_5C5A
		jmp	short loc_5C5C
; ---------------------------------------------------------------------------

loc_5C5A:				; CODE XREF: _psh_glyph_interpolate_other_points+182j
		jmp	short loc_5C44
; ---------------------------------------------------------------------------

loc_5C5C:				; CODE XREF: _psh_glyph_interpolate_other_points+184j
		mov	ecx, [ebp+var_1C]
		mov	edx, [ebp+var_20]
		mov	eax, [ecx+1Ch]
		cmp	eax, [edx+1Ch]
		jg	short loc_5C96
		mov	ecx, [ebp+var_1C]
		mov	edx, [ecx+1Ch]
		mov	[ebp+var_2C], edx
		mov	eax, [ebp+var_1C]
		mov	ecx, [eax+24h]
		mov	[ebp+var_34], ecx
		mov	edx, [ebp+var_20]
		mov	eax, [edx+1Ch]
		sub	eax, [ebp+var_2C]
		mov	[ebp+var_30], eax
		mov	ecx, [ebp+var_20]
		mov	edx, [ecx+24h]
		sub	edx, [ebp+var_34]
		mov	[ebp+var_38], edx
		jmp	short loc_5CC0
; ---------------------------------------------------------------------------

loc_5C96:				; CODE XREF: _psh_glyph_interpolate_other_points+194j
		mov	eax, [ebp+var_20]
		mov	ecx, [eax+1Ch]
		mov	[ebp+var_2C], ecx
		mov	edx, [ebp+var_20]
		mov	eax, [edx+24h]
		mov	[ebp+var_34], eax
		mov	ecx, [ebp+var_1C]
		mov	edx, [ecx+1Ch]
		sub	edx, [ebp+var_2C]
		mov	[ebp+var_30], edx
		mov	eax, [ebp+var_1C]
		mov	ecx, [eax+24h]
		sub	ecx, [ebp+var_34]
		mov	[ebp+var_38], ecx

loc_5CC0:				; CODE XREF: _psh_glyph_interpolate_other_points+1C0j
		mov	[ebp+var_48], 10000h
		cmp	[ebp+var_30], 0
		jle	short loc_5CE0
		mov	edx, [ebp+var_30]
		push	edx
		mov	eax, [ebp+var_38]
		push	eax
		call	_FT_DivFix
		add	esp, 8
		mov	[ebp+var_48], eax

loc_5CE0:				; CODE XREF: _psh_glyph_interpolate_other_points+1F7j
		mov	ecx, [ebp+var_1C]
		mov	edx, [ecx+4]
		mov	[ebp+var_24], edx

loc_5CE9:				; CODE XREF: _psh_glyph_interpolate_other_points+29Bj
		mov	eax, [ebp+var_24]
		mov	ecx, [eax+1Ch]
		mov	[ebp+var_3C], ecx
		mov	edx, [ebp+var_3C]
		sub	edx, [ebp+var_2C]
		mov	[ebp+var_40], edx
		cmp	[ebp+var_40], 0
		jg	short loc_5D19
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+var_40]
		push	ecx
		call	_FT_MulFix_i386
		add	esp, 8
		add	eax, [ebp+var_34]
		mov	[ebp+var_44], eax
		jmp	short loc_5D57
; ---------------------------------------------------------------------------

loc_5D19:				; CODE XREF: _psh_glyph_interpolate_other_points+22Bj
		mov	edx, [ebp+var_40]
		cmp	edx, [ebp+var_30]
		jl	short loc_5D41
		mov	esi, [ebp+var_34]
		add	esi, [ebp+var_38]
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+var_40]
		sub	ecx, [ebp+var_30]
		push	ecx
		call	_FT_MulFix_i386
		add	esp, 8
		add	esi, eax
		mov	[ebp+var_44], esi
		jmp	short loc_5D57
; ---------------------------------------------------------------------------

loc_5D41:				; CODE XREF: _psh_glyph_interpolate_other_points+24Bj
		mov	edx, [ebp+var_48]
		push	edx
		mov	eax, [ebp+var_40]
		push	eax
		call	_FT_MulFix_i386
		add	esp, 8
		add	eax, [ebp+var_34]
		mov	[ebp+var_44], eax

loc_5D57:				; CODE XREF: _psh_glyph_interpolate_other_points+243j
					; _psh_glyph_interpolate_other_points+26Bj
		mov	ecx, [ebp+var_24]
		mov	edx, [ebp+var_44]
		mov	[ecx+24h], edx
		mov	eax, [ebp+var_24]
		mov	ecx, [eax+4]
		mov	[ebp+var_24], ecx
		mov	edx, [ebp+var_24]
		cmp	edx, [ebp+var_20]
		jnz	loc_5CE9
		mov	eax, [ebp+var_20]
		mov	[ebp+var_1C], eax
		mov	ecx, [ebp+var_1C]
		cmp	ecx, [ebp+var_18]
		jnz	loc_5C19

$Next_Contour$37:			; CODE XREF: _psh_glyph_interpolate_other_points:loc_5C0Ej
					; _psh_glyph_interpolate_other_points+156j
		jmp	loc_5B2B
; ---------------------------------------------------------------------------

loc_5D8C:				; CODE XREF: _psh_glyph_interpolate_other_points+6Dj
		pop	edi
		pop	esi
		add	esp, 48h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_psh_glyph_interpolate_other_points endp

; ---------------------------------------------------------------------------
		db 8 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_hinter_done	proc near		; DATA XREF: .rdata:00005ECCo

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+70h], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+8Ch], 0
		mov	edx, [ebp+arg_0]
		add	edx, 0Ch
		push	edx
		call	_ps_hints_done
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_ps_hinter_done	endp

; ---------------------------------------------------------------------------
		db 0Eh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ps_hinter_init	proc near		; DATA XREF: .rdata:00005EC8o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_0]
		add	edx, 0Ch
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_4]
		push	eax		; int
		mov	ecx, [ebp+arg_0]
		add	ecx, 0Ch
		push	ecx		; void *
		call	_ps_hints_init
		add	esp, 8
		mov	edx, [ebp+arg_0]
		add	edx, 64h ; 'd'
		push	edx
		call	_psh_globals_funcs_init
		add	esp, 4
		mov	eax, [ebp+arg_0]
		add	eax, 70h ; 'p'
		push	eax		; void *
		call	_t1_hints_funcs_init
		add	esp, 4
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_8]
		mov	[ecx+70h], edx
		mov	eax, [ebp+arg_0]
		add	eax, 8Ch ; ''
		push	eax		; void *
		call	_t2_hints_funcs_init
		add	esp, 4
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_8]
		mov	[ecx+8Ch], edx
		xor	eax, eax
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ps_hinter_init	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_pshinter_get_globals_funcs proc near	; DATA XREF: .rdata:_pshinter_interfaceo

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		add	eax, 64h ; 'd'
		pop	ebp
		retn
_pshinter_get_globals_funcs endp

; ---------------------------------------------------------------------------
		db 5 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_pshinter_get_t1_funcs proc near	; DATA XREF: .rdata:00005EA8o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		add	eax, 70h ; 'p'
		pop	ebp
		retn
_pshinter_get_t1_funcs endp

; ---------------------------------------------------------------------------
		db 5 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_pshinter_get_t2_funcs proc near	; DATA XREF: .rdata:00005EACo

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		add	eax, 8Ch ; ''
		pop	ebp
		retn
_pshinter_get_t2_funcs endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5EA4h
_pshinter_interface dd offset _pshinter_get_globals_funcs ; DATA XREF: .rdata:00005EC4o
		dd offset _pshinter_get_t1_funcs
		dd offset _pshinter_get_t2_funcs
		public _pshinter_module_class
_pshinter_module_class dd 0
		dd offset $SG8244+28h	; "bitcount %d (instead	of %d)\n"
		dd offset $SG9506	; "pshinter"
		dd 10000h, 20000h
		dd offset _pshinter_interface
		dd offset _ps_hinter_init
		dd offset _ps_hinter_done
		dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 5ED4h
; COMDAT (pick any)
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 5ED8h
; COMDAT (pick any)
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; void *__cdecl	memset(void *, int, size_t)
		extrn _memset:near	; CODE XREF: _ps_hints_init+Bp
					; _t1_hints_funcs_init+Bp ...
; void *__cdecl	_memmove(void *, const void *, size_t)
		extrn __imp__memmove:near ; CODE XREF: _ps_mask_table_merge+1AFp
					; DATA XREF: _ps_mask_table_merge+1AFr
		extrn _FT_MulDiv:near	; CODE XREF: _ps_hints_apply+157p
					; _psh_glyph_interpolate_strong_points+13Ep ...
		extrn _FT_DivFix:near	; CODE XREF: _psh_globals_new+266p
					; _psh_glyph_find_strong_points+84p ...
		extrn _FT_RoundFix:near	; CODE XREF: _ps_hints_t1stem3+E1p
					; _ps_hints_t1stem3+FCp ...
		extrn _ft_mem_alloc:near ; CODE	XREF: _psh_globals_new+2Ap
		extrn _ft_mem_realloc:near ; CODE XREF:	_ps_hint_table_ensure+5Dp
					; _ps_mask_ensure+69p ...
		extrn _ft_mem_free:near	; CODE XREF: _ps_hint_table_done+Ep
					; _ps_mask_done+Ep ...
		extrn _FT_Message:near	; CODE XREF: _ps_mask_table_merge+20Cp
					; _ps_hints_open+A0p ...
		extrn _FT_Throw:near	; CODE XREF: _ps_hints_open+70p
					; _ps_hints_t1stem3+17Dp ...
		extrn _ft_corner_orientation:near
					; CODE XREF: _psh_glyph_compute_inflections+106p
					; _psh_glyph_compute_inflections+187p
		extrn _ft_corner_is_flat:near ;	CODE XREF: _psh_glyph_init+300p
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _ps_hints_apply+3A4p
					; _ps_hint_table_ensure+87p ...
		extrn @__security_check_cookie@4:near ;	CODE XREF: _ps_hints_apply+3B1p
					; _ps_hints_t1stem3+1BCp ...
		extrn __RTC_CheckEsp:near ; CODE XREF: _FT_MulFix_i386+36p
					; _psh_globals_set_scale+D1p ...
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn _ft_trace_levels:near ; DATA XREF: _ps_mask_table_merge+1F6r
					; _ps_hints_open+92r ...
		extrn ___security_cookie:near ;	DATA XREF: _ps_hints_apply+1Cr
					; _ps_hints_t1stem3+16r ...


		end
