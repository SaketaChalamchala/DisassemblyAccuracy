;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	44793A8987969E32021D465ACCD24300
; Input	CRC32 :	7688BBFA

; File Name   :	D:\compspace\objfiles\firefox\freehelper\ftlzw.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRTD"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
$SG7304		db '..\..\..\src\lzw\ftlzw.c',0 ; DATA XREF: _ft_lzw_check_header:loc_8EAo
		align 4
$SG7340		db '..\..\..\src\lzw\ftlzw.c',0 ; DATA XREF: _ft_lzw_file_fill_output+75o
		align 4
$SG7359		db '..\..\..\src\lzw\ftlzw.c',0 ; DATA XREF: _ft_lzw_file_skip_output+AFo
		align 4
$SG7426		db '..\..\..\src\lzw\ftlzw.c',0 ; DATA XREF: _FT_Stream_OpenLZW:loc_F5o
		align 10h
$SG7594		db 'd:\mozilla\modules\freetype2\src\lzw\ftzopen.c',0
					; DATA XREF: _ft_lzwstate_io+400o
		align 10h
$SG7595		db 'assertion failed on line %d of file %s',0Ah,0
					; DATA XREF: _ft_lzwstate_io+40Ao
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C8h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl FT_Stream_OpenLZW(void *,	int)
		public _FT_Stream_OpenLZW
_FT_Stream_OpenLZW proc	near

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_14], 0
		cmp	[ebp+arg_0], 0
		jz	short loc_F5
		cmp	[ebp+arg_4], 0
		jnz	short loc_114

loc_F5:					; CODE XREF: _FT_Stream_OpenLZW+25j
		push	offset $SG7426	; "..\\..\\..\\src\\lzw\\ftlzw.c"
		push	166h
		push	28h ; '('
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 28h
		mov	[ebp+var_8], eax
		jmp	$Exit$14
; ---------------------------------------------------------------------------

loc_114:				; CODE XREF: _FT_Stream_OpenLZW+2Bj
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+1Ch]
		mov	[ebp+var_10], ecx
		mov	edx, [ebp+arg_4]
		push	edx
		call	_ft_lzw_check_header
		add	esp, 4
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_137
		jmp	$Exit$14
; ---------------------------------------------------------------------------

loc_137:				; CODE XREF: _FT_Stream_OpenLZW+68j
		push	28h ; '('       ; size_t
		push	0		; int
		mov	eax, [ebp+arg_0]
		push	eax		; void *
		call	_memset
		add	esp, 0Ch
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_10]
		mov	[ecx+1Ch], edx
		lea	eax, [ebp+var_8]
		push	eax
		push	10C4h
		mov	ecx, [ebp+var_10]
		push	ecx
		call	_ft_mem_alloc
		add	esp, 0Ch
		mov	[ebp+var_14], eax
		cmp	[ebp+var_8], 0
		jnz	short loc_1B1
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		call	_ft_lzw_file_init
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_1A8

loc_18B:				; CODE XREF: _FT_Stream_OpenLZW+DCj
		mov	edx, [ebp+var_14]
		push	edx
		mov	eax, [ebp+var_10]
		push	eax
		call	_ft_mem_free
		add	esp, 8
		mov	[ebp+var_14], 0
		xor	ecx, ecx
		jnz	short loc_18B
		jmp	short $Exit$14
; ---------------------------------------------------------------------------

loc_1A8:				; CODE XREF: _FT_Stream_OpenLZW+C1j
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_14]
		mov	[edx+0Ch], eax

loc_1B1:				; CODE XREF: _FT_Stream_OpenLZW+A4j
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+4], 7FFFFFFFh
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+8], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+14h], offset _ft_lzw_stream_io
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+18h], offset _ft_lzw_stream_close

$Exit$14:				; CODE XREF: _FT_Stream_OpenLZW+47j
					; _FT_Stream_OpenLZW+6Aj ...
		mov	eax, [ebp+var_8]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN13
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Stream_OpenLZW endp

; ---------------------------------------------------------------------------
$LN13		dd 1			; DATA XREF: _FT_Stream_OpenLZW+121o
		dd offset $LN12
$LN12		dd 0FFFFFFF8h, 4	; DATA XREF: .text$mn:00000208o
		dd offset $LN11		; "error"
$LN11		db 'error',0            ; DATA XREF: .text$mn:00000214o
		db 0Ah dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ft_lzwstate_init(void *, int)
		public _ft_lzwstate_init
_ft_lzwstate_init proc near		; CODE XREF: _ft_lzw_file_init+8Ap

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0ACh ; '¬'      ; size_t
		push	0		; int
		mov	eax, [ebp+arg_0]
		push	eax		; void *
		call	_memset
		add	esp, 0Ch
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	[ecx+0A4h], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+1Ch]
		mov	[eax+0A8h], edx
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+4Ch], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+50h], 0
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+54h], 0
		mov	eax, [ebp+arg_0]
		add	eax, 64h ; 'd'
		mov	ecx, [ebp+arg_0]
		mov	[ecx+58h], eax
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+60h], 40h ; '@'
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ft_lzwstate_reset
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_ft_lzwstate_init endp

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ft_lzwstate_done(void *)
		public _ft_lzwstate_done
_ft_lzwstate_done proc near		; CODE XREF: _ft_lzw_file_done+Ap

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0A8h]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ft_lzwstate_reset
		add	esp, 4
		mov	eax, [ebp+arg_0]
		add	eax, 64h ; 'd'
		mov	ecx, [ebp+arg_0]
		cmp	[ecx+58h], eax
		jz	short loc_2FA

loc_2D9:				; CODE XREF: _ft_lzwstate_done+50j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+58h]
		push	eax
		mov	ecx, [ebp+var_4]
		push	ecx
		call	_ft_mem_free
		add	esp, 8
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+58h], 0
		xor	eax, eax
		jnz	short loc_2D9

loc_2FA:				; CODE XREF: _ft_lzwstate_done+2Fj
					; _ft_lzwstate_done+71j
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4Ch]
		push	edx
		mov	eax, [ebp+var_4]
		push	eax
		call	_ft_mem_free
		add	esp, 8
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+4Ch], 0
		xor	edx, edx
		jnz	short loc_2FA
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+50h], 0
		push	0ACh ; '¬'      ; size_t
		push	0		; int
		mov	ecx, [ebp+arg_0]
		push	ecx		; void *
		call	_memset
		add	esp, 0Ch
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_lzwstate_done endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ft_lzwstate_reset
_ft_lzwstate_reset proc	near		; CODE XREF: _ft_lzwstate_init+69p
					; _ft_lzwstate_done+1Bp ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+4], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+18h], 0
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+1Ch], 0
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+20h], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+24h], 0
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+5Ch], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+34h], 9
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx], 0
		pop	ebp
		retn
_ft_lzwstate_reset endp

; ---------------------------------------------------------------------------
		db 0Fh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ft_lzwstate_io
_ft_lzwstate_io	proc near		; CODE XREF: _ft_lzw_file_fill_output+4Fp
					; _ft_lzw_file_skip_output+9Cp

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_15		= byte ptr -15h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 34h
		push	esi
		push	edi
		lea	edi, [ebp+var_34]
		mov	ecx, 0Dh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_4], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+44h]
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+40h]
		mov	[ebp+var_C], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+48h]
		mov	[ebp+var_10], edx
		cmp	[ebp+arg_8], 0
		jnz	short loc_3EC
		jmp	$Exit$54
; ---------------------------------------------------------------------------

loc_3EC:				; CODE XREF: _ft_lzwstate_io+3Dj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_2C], ecx
		cmp	[ebp+var_2C], 0
		jz	short loc_413
		cmp	[ebp+var_2C], 1
		jz	$NextCode$55
		cmp	[ebp+var_2C], 2
		jz	loc_718
		jmp	$Exit$54
; ---------------------------------------------------------------------------

loc_413:				; CODE XREF: _ft_lzwstate_io+50j
		push	2
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+0A4h]
		push	eax
		call	_FT_Stream_Seek
		add	esp, 8
		test	eax, eax
		jnz	short loc_448
		push	1
		lea	ecx, [ebp+var_15]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+0A4h]
		push	eax
		call	_FT_Stream_TryRead
		add	esp, 0Ch
		cmp	eax, 1
		jz	short loc_44D

loc_448:				; CODE XREF: _ft_lzwstate_io+81j
		jmp	$Eof$56
; ---------------------------------------------------------------------------

loc_44D:				; CODE XREF: _ft_lzwstate_io+9Ej
		movzx	ecx, [ebp+var_15]
		and	ecx, 1Fh
		mov	edx, [ebp+arg_0]
		mov	[edx+28h], ecx
		movzx	eax, [ebp+var_15]
		and	eax, 80h
		mov	ecx, [ebp+arg_0]
		mov	[ecx+2Ch], eax
		mov	edx, [ebp+arg_0]
		mov	eax, 1
		mov	ecx, [edx+28h]
		shl	eax, cl
		sub	eax, 100h
		mov	ecx, [ebp+arg_0]
		mov	[ecx+30h], eax
		mov	edx, [ebp+arg_0]
		cmp	dword ptr [edx+28h], 10h
		jbe	short loc_48F
		jmp	$Eof$56
; ---------------------------------------------------------------------------

loc_48F:				; CODE XREF: _ft_lzwstate_io+E0j
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+34h], 9
		mov	ecx, [ebp+arg_0]
		cmp	dword ptr [ecx+2Ch], 0
		jz	short loc_4AB
		mov	[ebp+var_30], 101h
		jmp	short loc_4B2
; ---------------------------------------------------------------------------

loc_4AB:				; CODE XREF: _ft_lzwstate_io+F8j
		mov	[ebp+var_30], 100h

loc_4B2:				; CODE XREF: _ft_lzwstate_io+101j
		mov	edx, [ebp+var_30]
		sub	edx, 100h
		mov	eax, [ebp+arg_0]
		mov	[eax+38h], edx
		mov	[ebp+var_10], 0
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_0]
		mov	eax, [ecx+34h]
		cmp	eax, [edx+28h]
		jnb	short loc_4EE
		mov	ecx, [ebp+arg_0]
		mov	edx, 1
		mov	ecx, [ecx+34h]
		shl	edx, cl
		sub	edx, 100h
		mov	[ebp+var_34], edx
		jmp	short loc_4FA
; ---------------------------------------------------------------------------

loc_4EE:				; CODE XREF: _ft_lzwstate_io+12Cj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+30h]
		add	ecx, 1
		mov	[ebp+var_34], ecx

loc_4FA:				; CODE XREF: _ft_lzwstate_io+144j
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_34]
		mov	[edx+3Ch], eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ft_lzwstate_get_code
		add	esp, 4
		mov	[ebp+var_20], eax
		cmp	[ebp+var_20], 0
		jl	short loc_521
		cmp	[ebp+var_20], 0FFh
		jle	short loc_526

loc_521:				; CODE XREF: _ft_lzwstate_io+16Ej
		jmp	$Eof$56
; ---------------------------------------------------------------------------

loc_526:				; CODE XREF: _ft_lzwstate_io+177j
		mov	edx, [ebp+var_20]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_8]
		mov	[ebp+var_C], eax
		cmp	[ebp+arg_4], 0
		jz	short loc_543
		mov	ecx, [ebp+arg_4]
		add	ecx, [ebp+var_4]
		mov	dl, byte ptr [ebp+var_8]
		mov	[ecx], dl

loc_543:				; CODE XREF: _ft_lzwstate_io+18Ej
		mov	eax, [ebp+var_4]
		add	eax, 1
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+var_4]
		cmp	ecx, [ebp+arg_8]
		jb	short loc_559
		jmp	$Exit$54
; ---------------------------------------------------------------------------

loc_559:				; CODE XREF: _ft_lzwstate_io+1AAj
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx], 1

$NextCode$55:				; CODE XREF: _ft_lzwstate_io+56j
					; _ft_lzwstate_io+20Bj	...
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ft_lzwstate_get_code
		add	esp, 4
		mov	[ebp+var_24], eax
		cmp	[ebp+var_24], 0
		jge	short loc_57C
		jmp	$Eof$56
; ---------------------------------------------------------------------------

loc_57C:				; CODE XREF: _ft_lzwstate_io+1CDj
		mov	ecx, [ebp+var_24]
		mov	[ebp+var_28], ecx
		cmp	[ebp+var_28], 100h
		jnz	short loc_5B5
		mov	edx, [ebp+arg_0]
		cmp	dword ptr [edx+2Ch], 0
		jz	short loc_5B5
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+38h], 0
		mov	ecx, [ebp+arg_0]
		mov	byte ptr [ecx+20h], 1
		mov	[ebp+var_C], 0
		mov	[ebp+var_8], 0
		jmp	short $NextCode$55
; ---------------------------------------------------------------------------

loc_5B5:				; CODE XREF: _ft_lzwstate_io+1E1j
					; _ft_lzwstate_io+1EAj
		mov	edx, [ebp+var_28]
		mov	[ebp+var_10], edx
		cmp	[ebp+var_28], 100h
		jb	loc_6C1
		mov	eax, [ebp+var_28]
		sub	eax, 100h
		mov	ecx, [ebp+arg_0]
		cmp	eax, [ecx+38h]
		jb	short loc_63C
		mov	edx, [ebp+var_28]
		sub	edx, 100h
		mov	eax, [ebp+arg_0]
		cmp	edx, [eax+38h]
		jbe	short loc_5EE
		jmp	$Eof$56
; ---------------------------------------------------------------------------

loc_5EE:				; CODE XREF: _ft_lzwstate_io+23Fj
					; _ft_lzwstate_io+28Cj
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_0]
		mov	eax, [ecx+5Ch]
		cmp	eax, [edx+60h]
		jb	short loc_611
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ft_lzwstate_stack_grow
		add	esp, 4
		test	eax, eax
		jge	short loc_611
		jmp	$Eof$56
; ---------------------------------------------------------------------------

loc_611:				; CODE XREF: _ft_lzwstate_io+252j
					; _ft_lzwstate_io+262j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+5Ch]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+58h]
		mov	cl, byte ptr [ebp+var_8]
		mov	[edx+eax], cl
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+5Ch]
		add	eax, 1
		mov	ecx, [ebp+arg_0]
		mov	[ecx+5Ch], eax
		xor	edx, edx
		jnz	short loc_5EE
		mov	eax, [ebp+var_C]
		mov	[ebp+var_28], eax

loc_63C:				; CODE XREF: _ft_lzwstate_io+22Ej
					; _ft_lzwstate_io+314j
		cmp	[ebp+var_28], 100h
		jb	short loc_6C1
		mov	ecx, [ebp+arg_0]
		cmp	dword ptr [ecx+4Ch], 0
		jnz	short loc_653
		jmp	$Eof$56
; ---------------------------------------------------------------------------

loc_653:				; CODE XREF: _ft_lzwstate_io+2A4j
					; _ft_lzwstate_io+2FEj
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_0]
		mov	ecx, [edx+5Ch]
		cmp	ecx, [eax+60h]
		jb	short loc_676
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ft_lzwstate_stack_grow
		add	esp, 4
		test	eax, eax
		jge	short loc_676
		jmp	$Eof$56
; ---------------------------------------------------------------------------

loc_676:				; CODE XREF: _ft_lzwstate_io+2B7j
					; _ft_lzwstate_io+2C7j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+50h]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+5Ch]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+58h]
		mov	esi, [ebp+var_28]
		mov	cl, [ecx+esi-100h]
		mov	[edx+eax], cl
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+5Ch]
		add	eax, 1
		mov	ecx, [ebp+arg_0]
		mov	[ecx+5Ch], eax
		xor	edx, edx
		jnz	short loc_653
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4Ch]
		mov	edx, [ebp+var_28]
		movzx	eax, word ptr [ecx+edx*2-200h]
		mov	[ebp+var_28], eax
		jmp	loc_63C
; ---------------------------------------------------------------------------

loc_6C1:				; CODE XREF: _ft_lzwstate_io+21Aj
					; _ft_lzwstate_io+29Bj
		mov	ecx, [ebp+var_28]
		mov	[ebp+var_8], ecx

loc_6C7:				; CODE XREF: _ft_lzwstate_io+365j
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_0]
		mov	ecx, [edx+5Ch]
		cmp	ecx, [eax+60h]
		jb	short loc_6EA
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ft_lzwstate_stack_grow
		add	esp, 4
		test	eax, eax
		jge	short loc_6EA
		jmp	$Eof$56
; ---------------------------------------------------------------------------

loc_6EA:				; CODE XREF: _ft_lzwstate_io+32Bj
					; _ft_lzwstate_io+33Bj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+5Ch]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+58h]
		mov	dl, byte ptr [ebp+var_8]
		mov	[eax+ecx], dl
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+5Ch]
		add	ecx, 1
		mov	edx, [ebp+arg_0]
		mov	[edx+5Ch], ecx
		xor	eax, eax
		jnz	short loc_6C7
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx], 2

loc_718:				; CODE XREF: _ft_lzwstate_io+60j
					; _ft_lzwstate_io:loc_763j
		mov	edx, [ebp+arg_0]
		cmp	dword ptr [edx+5Ch], 0
		jbe	short loc_765
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+5Ch]
		sub	ecx, 1
		mov	edx, [ebp+arg_0]
		mov	[edx+5Ch], ecx
		cmp	[ebp+arg_4], 0
		jz	short loc_74D
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+5Ch]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+58h]
		mov	edx, [ebp+arg_4]
		add	edx, [ebp+var_4]
		mov	al, [eax+ecx]
		mov	[edx], al

loc_74D:				; CODE XREF: _ft_lzwstate_io+38Cj
		mov	ecx, [ebp+var_4]
		add	ecx, 1
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+var_4]
		cmp	edx, [ebp+arg_8]
		jnz	short loc_763
		jmp	$Exit$54
; ---------------------------------------------------------------------------

loc_763:				; CODE XREF: _ft_lzwstate_io+3B4j
		jmp	short loc_718
; ---------------------------------------------------------------------------

loc_765:				; CODE XREF: _ft_lzwstate_io+377j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+38h]
		cmp	edx, [ecx+30h]
		jnb	loc_7F8
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+38h]
		cmp	edx, [ecx+54h]
		jb	short loc_79A
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ft_lzwstate_prefix_grow
		add	esp, 4
		test	eax, eax
		jge	short loc_79A
		jmp	$Eof$56
; ---------------------------------------------------------------------------

loc_79A:				; CODE XREF: _ft_lzwstate_io+3DBj
					; _ft_lzwstate_io+3EBj	...
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_0]
		mov	eax, [ecx+38h]
		cmp	eax, [edx+54h]
		jb	short loc_7BF
		push	offset $SG7594	; "d:\\mozilla\\modules\\freetype2\\src\\l"...
		push	180h
		push	offset $SG7595	; "assertion failed on line %d of file %s\"...
		call	_FT_Panic
		add	esp, 0Ch

loc_7BF:				; CODE XREF: _ft_lzwstate_io+3FEj
		xor	ecx, ecx
		jnz	short loc_79A
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+38h]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4Ch]
		mov	cx, word ptr [ebp+var_C]
		mov	[edx+eax*2], cx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+38h]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+50h]
		mov	cl, byte ptr [ebp+var_8]
		mov	[edx+eax], cl
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+38h]
		add	eax, 1
		mov	ecx, [ebp+arg_0]
		mov	[ecx+38h], eax

loc_7F8:				; CODE XREF: _ft_lzwstate_io+3C9j
		mov	edx, [ebp+var_10]
		mov	[ebp+var_C], edx
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 1
		jmp	$NextCode$55
; ---------------------------------------------------------------------------

$Exit$54:				; CODE XREF: _ft_lzwstate_io+3Fj
					; _ft_lzwstate_io+66j ...
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_C]
		mov	[ecx+40h], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		mov	[eax+44h], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_10]
		mov	[edx+48h], eax
		mov	eax, [ebp+var_4]
		jmp	short loc_837
; ---------------------------------------------------------------------------

$Eof$56:				; CODE XREF: _ft_lzwstate_io:loc_448j
					; _ft_lzwstate_io+E2j ...
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx], 3
		jmp	short $Exit$54
; ---------------------------------------------------------------------------

loc_837:				; CODE XREF: _ft_lzwstate_io+482j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN53
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		add	esp, 34h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_lzwstate_io	endp

; ---------------------------------------------------------------------------
$LN53		dd 1			; DATA XREF: _ft_lzwstate_io+493o
		dd offset $LN52
$LN52		dd 0FFFFFFEBh, 1	; DATA XREF: .text$mn:0000085Co
		dd offset $LN51		; "max_bits"
$LN51		db 'max_bits',0         ; DATA XREF: .text$mn:00000868o
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_lzw_check_header proc near		; CODE XREF: _FT_Stream_OpenLZW+59p
					; _ft_lzw_file_init+6Fp

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		push	0
		mov	eax, [ebp+arg_0]
		push	eax
		call	_FT_Stream_Seek
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_8C1
		push	2
		lea	ecx, [ebp+var_C]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_FT_Stream_Read
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_8C3

loc_8C1:				; CODE XREF: _ft_lzw_check_header+2Cj
		jmp	short $Exit$10
; ---------------------------------------------------------------------------

loc_8C3:				; CODE XREF: _ft_lzw_check_header+47j
		mov	eax, 1
		imul	ecx, eax, 0
		movzx	edx, byte ptr [ebp+ecx+var_C]
		cmp	edx, 1Fh
		jnz	short loc_8EA
		mov	eax, 1
		shl	eax, 0
		movzx	ecx, byte ptr [ebp+eax+var_C]
		cmp	ecx, 9Dh ; ''
		jz	short $Exit$10

loc_8EA:				; CODE XREF: _ft_lzw_check_header+5Bj
		push	offset $SG7304	; "..\\..\\..\\src\\lzw\\ftlzw.c"
		push	65h ; 'e'
		push	3
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 3
		mov	[ebp+var_4], eax

$Exit$10:				; CODE XREF: _ft_lzw_check_header:loc_8C1j
					; _ft_lzw_check_header+70j
		mov	eax, [ebp+var_4]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN9
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_lzw_check_header endp

; ---------------------------------------------------------------------------
		align 4
$LN9		dd 1			; DATA XREF: _ft_lzw_check_header+90o
		dd offset $LN8
$LN8		dd 0FFFFFFF4h, 2	; DATA XREF: .text$mn:00000928o
		dd offset $LN7		; "head"
$LN7		db 'head',0             ; DATA XREF: .text$mn:00000934o
		db 0Bh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_lzw_file_init proc near		; CODE XREF: _FT_Stream_OpenLZW+B2p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		add	eax, 0Ch
		mov	[ebp+var_4], eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	[ecx+4], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_8]
		mov	[eax], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+1Ch]
		mov	[edx+8], ecx
		mov	edx, [ebp+arg_0]
		add	edx, 10B8h
		mov	eax, [ebp+arg_0]
		mov	[eax+10C0h], edx
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+10C0h]
		mov	[ecx+10BCh], eax
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+10B8h], 0
		mov	edx, [ebp+arg_8]
		push	edx
		call	_ft_lzw_check_header
		add	esp, 4
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_9CA
		jmp	short $Exit$4
; ---------------------------------------------------------------------------

loc_9CA:				; CODE XREF: _ft_lzw_file_init+7Ej
		mov	eax, [ebp+arg_8]
		push	eax		; int
		mov	ecx, [ebp+var_4]
		push	ecx		; void *
		call	_ft_lzwstate_init
		add	esp, 8

$Exit$4:				; CODE XREF: _ft_lzw_file_init+80j
		mov	eax, [ebp+var_8]
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_lzw_file_init endp

; ---------------------------------------------------------------------------
		db 0Dh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_lzw_file_done proc near		; CODE XREF: _ft_lzw_stream_close+30p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		add	eax, 0Ch
		push	eax		; void *
		call	_ft_lzwstate_done
		add	esp, 4
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+8], 0
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+4], 0
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_ft_lzw_file_done endp

; ---------------------------------------------------------------------------
		db 8 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_lzw_file_reset proc	near		; CODE XREF: _ft_lzw_file_io+86p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_4], ecx
		push	0
		mov	edx, [ebp+var_4]
		push	edx
		call	_FT_Stream_Seek
		add	esp, 8
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jnz	short loc_AAB
		mov	eax, [ebp+arg_0]
		add	eax, 0Ch
		push	eax
		call	_ft_lzwstate_reset
		add	esp, 4
		mov	ecx, [ebp+arg_0]
		add	ecx, 10B8h
		mov	edx, [ebp+arg_0]
		mov	[edx+10C0h], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+10C0h]
		mov	[eax+10BCh], edx
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+10B8h], 0

loc_AAB:				; CODE XREF: _ft_lzw_file_reset+31j
		mov	eax, [ebp+var_8]
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_lzw_file_reset endp

; ---------------------------------------------------------------------------
		db 0Ch dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_lzw_file_fill_output proc near	; CODE XREF: _ft_lzw_file_io+160p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		add	eax, 0Ch
		mov	[ebp+var_4], eax
		mov	[ebp+var_C], 0
		mov	ecx, [ebp+arg_0]
		add	ecx, 0B8h ; '¸'
		mov	edx, [ebp+arg_0]
		mov	[edx+10BCh], ecx
		push	1000h
		mov	eax, [ebp+arg_0]
		add	eax, 0B8h ; '¸'
		push	eax
		mov	ecx, [ebp+var_4]
		push	ecx
		call	_ft_lzwstate_io
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+10BCh]
		add	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+10C0h], eax
		cmp	[ebp+var_8], 0
		jnz	short loc_B57
		push	offset $SG7340	; "..\\..\\..\\src\\lzw\\ftlzw.c"
		push	0B9h ; '¹'
		push	55h ; 'U'
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 55h
		mov	[ebp+var_C], eax

loc_B57:				; CODE XREF: _ft_lzw_file_fill_output+73j
		mov	eax, [ebp+var_C]
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_lzw_file_fill_output endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_lzw_file_skip_output proc near	; CODE XREF: _ft_lzw_file_io+BBp

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+10C0h]
		sub	edx, [ecx+10BCh]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_4]
		jb	short loc_BA9
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_8], ecx

loc_BA9:				; CODE XREF: _ft_lzw_file_skip_output+39j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+10BCh]
		add	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+10BCh], eax
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+10B8h]
		add	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+10B8h], eax
		mov	edx, [ebp+arg_4]
		sub	edx, [ebp+var_8]
		mov	[ebp+arg_4], edx

loc_BDC:				; CODE XREF: _ft_lzw_file_skip_output+E9j
		cmp	[ebp+arg_4], 0
		jbe	short loc_C53
		mov	[ebp+var_C], 1000h
		mov	eax, [ebp+var_C]
		cmp	eax, [ebp+arg_4]
		jbe	short loc_BF7
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_C], ecx

loc_BF7:				; CODE XREF: _ft_lzw_file_skip_output+87j
		mov	edx, [ebp+var_C]
		push	edx
		push	0
		mov	eax, [ebp+arg_0]
		add	eax, 0Ch
		push	eax
		call	_ft_lzwstate_io
		add	esp, 0Ch
		mov	[ebp+var_10], eax
		mov	ecx, [ebp+var_10]
		cmp	ecx, [ebp+var_C]
		jnb	short loc_C33
		push	offset $SG7359	; "..\\..\\..\\src\\lzw\\ftlzw.c"
		push	0E3h ; 'ã'
		push	55h ; 'U'
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 55h
		mov	[ebp+var_4], eax
		jmp	short loc_C53
; ---------------------------------------------------------------------------

loc_C33:				; CODE XREF: _ft_lzw_file_skip_output+ADj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+10B8h]
		add	eax, [ebp+var_C]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+10B8h], eax
		mov	edx, [ebp+arg_4]
		sub	edx, [ebp+var_C]
		mov	[ebp+arg_4], edx
		jmp	short loc_BDC
; ---------------------------------------------------------------------------

loc_C53:				; CODE XREF: _ft_lzw_file_skip_output+78j
					; _ft_lzw_file_skip_output+C9j
		mov	eax, [ebp+var_4]
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_lzw_file_skip_output endp

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_lzw_file_io	proc near		; CODE XREF: _ft_lzw_stream_io+24p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [eax+10B8h]
		jnb	short loc_D04
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+10B8h]
		sub	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		add	ecx, 0B8h ; '¸'
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+10BCh]
		sub	edx, ecx
		cmp	eax, edx
		ja	short loc_CEA
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+10B8h]
		sub	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+10BCh]
		sub	eax, ecx
		mov	ecx, [ebp+arg_0]
		mov	[ecx+10BCh], eax
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	[edx+10B8h], eax
		jmp	short loc_D04
; ---------------------------------------------------------------------------

loc_CEA:				; CODE XREF: _ft_lzw_file_io+52j
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ft_lzw_file_reset
		add	esp, 4
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_D04
		jmp	$Exit$15
; ---------------------------------------------------------------------------

loc_D04:				; CODE XREF: _ft_lzw_file_io+2Ej
					; _ft_lzw_file_io+80j ...
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		cmp	eax, [edx+10B8h]
		jbe	short loc_D39
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		sub	edx, [ecx+10B8h]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ft_lzw_file_skip_output
		add	esp, 8
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_D39
		jmp	$Exit$15
; ---------------------------------------------------------------------------

loc_D39:				; CODE XREF: _ft_lzw_file_io+A8j
					; _ft_lzw_file_io+CAj
		cmp	[ebp+arg_C], 0
		jnz	short loc_D44
		jmp	$Exit$15
; ---------------------------------------------------------------------------

loc_D44:				; CODE XREF: _ft_lzw_file_io+D5j
					; _ft_lzw_file_io:loc_DDBj
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_0]
		mov	eax, [ecx+10C0h]
		sub	eax, [edx+10BCh]
		mov	[ebp+var_C], eax
		mov	ecx, [ebp+var_C]
		cmp	ecx, [ebp+arg_C]
		jb	short loc_D67
		mov	edx, [ebp+arg_C]
		mov	[ebp+var_C], edx

loc_D67:				; CODE XREF: _ft_lzw_file_io+F7j
		mov	eax, [ebp+var_C]
		push	eax		; size_t
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+10BCh]
		push	edx		; void *
		mov	eax, [ebp+arg_8]
		add	eax, [ebp+var_4]
		push	eax		; void *
		call	_memcpy
		add	esp, 0Ch
		mov	ecx, [ebp+var_4]
		add	ecx, [ebp+var_C]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+10BCh]
		add	eax, [ebp+var_C]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+10BCh], eax
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+10B8h]
		add	eax, [ebp+var_C]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+10B8h], eax
		mov	edx, [ebp+arg_C]
		sub	edx, [ebp+var_C]
		mov	[ebp+arg_C], edx
		jnz	short loc_DC4
		jmp	short $Exit$15
; ---------------------------------------------------------------------------

loc_DC4:				; CODE XREF: _ft_lzw_file_io+158j
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ft_lzw_file_fill_output
		add	esp, 4
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_DDB
		jmp	short $Exit$15
; ---------------------------------------------------------------------------

loc_DDB:				; CODE XREF: _ft_lzw_file_io+16Fj
		jmp	loc_D44
; ---------------------------------------------------------------------------

$Exit$15:				; CODE XREF: _ft_lzw_file_io+97j
					; _ft_lzw_file_io+CCj ...
		mov	eax, [ebp+var_4]
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_lzw_file_io	endp

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_lzw_stream_close proc near		; DATA XREF: _FT_Stream_OpenLZW+113o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+1Ch]
		mov	[ebp+var_8], eax
		cmp	[ebp+var_4], 0
		jz	short loc_E55
		mov	ecx, [ebp+var_4]
		push	ecx
		call	_ft_lzw_file_done
		add	esp, 4

loc_E30:				; CODE XREF: _ft_lzw_stream_close+51j
		mov	edx, [ebp+var_4]
		push	edx
		mov	eax, [ebp+var_8]
		push	eax
		call	_ft_mem_free
		add	esp, 8
		mov	[ebp+var_4], 0
		xor	ecx, ecx
		jnz	short loc_E30
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+0Ch], 0

loc_E55:				; CODE XREF: _ft_lzw_stream_close+2Aj
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_lzw_stream_close endp

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_lzw_stream_io proc near		; DATA XREF: _FT_Stream_OpenLZW+109o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+var_4]
		push	edx
		call	_ft_lzw_file_io
		add	esp, 10h
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_lzw_stream_io endp

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_lzwstate_refill proc near		; CODE XREF: _ft_lzwstate_get_code+E8p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+4], 0
		jz	short loc_ECD
		or	eax, 0FFFFFFFFh
		jmp	loc_F58
; ---------------------------------------------------------------------------

loc_ECD:				; CODE XREF: _ft_lzwstate_refill+1Bj
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+34h]
		push	edx
		mov	eax, [ebp+arg_0]
		add	eax, 8
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0A4h]
		push	edx
		call	_FT_Stream_TryRead
		add	esp, 0Ch
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_4]
		mov	[eax+1Ch], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+24h]
		add	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+24h], eax
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_4]
		cmp	eax, [edx+34h]
		jnb	short loc_F19
		mov	byte ptr [ebp+var_8+3],	1
		jmp	short loc_F1D
; ---------------------------------------------------------------------------

loc_F19:				; CODE XREF: _ft_lzwstate_refill+69j
		mov	byte ptr [ebp+var_8+3],	0

loc_F1D:				; CODE XREF: _ft_lzwstate_refill+6Fj
		movzx	ecx, byte ptr [ebp+var_8+3]
		mov	edx, [ebp+arg_0]
		mov	[edx+4], ecx
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+18h], 0
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+1Ch]
		shl	edx, 3
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+34h]
		sub	ecx, 1
		sub	edx, ecx
		mov	eax, [ebp+arg_0]
		mov	[eax+1Ch], edx
		cmp	[ebp+var_4], 0
		jnz	short loc_F56
		or	eax, 0FFFFFFFFh
		jmp	short loc_F58
; ---------------------------------------------------------------------------

loc_F56:				; CODE XREF: _ft_lzwstate_refill+A7j
		xor	eax, eax

loc_F58:				; CODE XREF: _ft_lzwstate_refill+20j
					; _ft_lzwstate_refill+ACj
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_lzwstate_refill endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_lzwstate_get_code proc near		; CODE XREF: _ft_lzwstate_io+15Fp
					; _ft_lzwstate_io+1BEp

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+34h]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+18h]
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_0]
		movzx	edx, byte ptr [ecx+20h]
		test	edx, edx
		jnz	short loc_FBC
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		cmp	ecx, [eax+1Ch]
		jge	short loc_FBC
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_0]
		mov	ecx, [edx+38h]
		cmp	ecx, [eax+3Ch]
		jb	loc_106B

loc_FBC:				; CODE XREF: _ft_lzwstate_get_code+35j
					; _ft_lzwstate_get_code+40j
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_0]
		mov	ecx, [edx+38h]
		cmp	ecx, [eax+3Ch]
		jb	short loc_1014
		mov	edx, [ebp+var_4]
		add	edx, 1
		mov	[ebp+var_4], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_4]
		mov	[eax+34h], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+arg_0]
		mov	ecx, [edx+34h]
		cmp	ecx, [eax+28h]
		jnb	short loc_FFF
		mov	edx, 1
		mov	ecx, [ebp+var_4]
		shl	edx, cl
		sub	edx, 100h
		mov	[ebp+var_14], edx
		jmp	short loc_100B
; ---------------------------------------------------------------------------

loc_FFF:				; CODE XREF: _ft_lzwstate_get_code+80j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+30h]
		add	ecx, 1
		mov	[ebp+var_14], ecx

loc_100B:				; CODE XREF: _ft_lzwstate_get_code+95j
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_14]
		mov	[edx+3Ch], eax

loc_1014:				; CODE XREF: _ft_lzwstate_get_code+60j
		mov	ecx, [ebp+arg_0]
		movzx	edx, byte ptr [ecx+20h]
		test	edx, edx
		jz	short loc_104C
		mov	[ebp+var_4], 9
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_4]
		mov	[eax+34h], ecx
		mov	edx, 1
		mov	ecx, [ebp+var_4]
		shl	edx, cl
		sub	edx, 100h
		mov	eax, [ebp+arg_0]
		mov	[eax+3Ch], edx
		mov	ecx, [ebp+arg_0]
		mov	byte ptr [ecx+20h], 0

loc_104C:				; CODE XREF: _ft_lzwstate_get_code+B5j
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ft_lzwstate_refill
		add	esp, 4
		test	eax, eax
		jge	short loc_1064
		or	eax, 0FFFFFFFFh
		jmp	loc_1116
; ---------------------------------------------------------------------------

loc_1064:				; CODE XREF: _ft_lzwstate_get_code+F2j
		mov	[ebp+var_8], 0

loc_106B:				; CODE XREF: _ft_lzwstate_get_code+4Ej
		mov	eax, [ebp+var_8]
		add	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+18h], eax
		mov	edx, [ebp+var_8]
		sar	edx, 3
		mov	eax, [ebp+arg_0]
		lea	ecx, [eax+edx+8]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+var_8]
		and	edx, 7
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_C]
		movzx	edx, byte ptr [eax]
		mov	ecx, [ebp+var_8]
		sar	edx, cl
		mov	[ebp+var_10], edx
		mov	eax, [ebp+var_C]
		add	eax, 1
		mov	[ebp+var_C], eax
		mov	ecx, 8
		sub	ecx, [ebp+var_8]
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+var_4]
		sub	edx, [ebp+var_8]
		mov	[ebp+var_4], edx
		cmp	[ebp+var_4], 8
		jb	short loc_10ED
		mov	eax, [ebp+var_C]
		movzx	edx, byte ptr [eax]
		mov	ecx, [ebp+var_8]
		shl	edx, cl
		or	edx, [ebp+var_10]
		mov	[ebp+var_10], edx
		mov	eax, [ebp+var_C]
		add	eax, 1
		mov	[ebp+var_C], eax
		mov	ecx, [ebp+var_8]
		add	ecx, 8
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+var_4]
		sub	edx, 8
		mov	[ebp+var_4], edx

loc_10ED:				; CODE XREF: _ft_lzwstate_get_code+157j
		cmp	[ebp+var_4], 0
		jbe	short loc_1113
		mov	eax, [ebp+var_C]
		movzx	edx, byte ptr [eax]
		mov	eax, 1
		mov	ecx, [ebp+var_4]
		shl	eax, cl
		sub	eax, 1
		and	edx, eax
		mov	ecx, [ebp+var_8]
		shl	edx, cl
		or	edx, [ebp+var_10]
		mov	[ebp+var_10], edx

loc_1113:				; CODE XREF: _ft_lzwstate_get_code+189j
		mov	eax, [ebp+var_10]

loc_1116:				; CODE XREF: _ft_lzwstate_get_code+F7j
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_lzwstate_get_code endp

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_lzwstate_stack_grow	proc near	; CODE XREF: _ft_lzwstate_io+258p
					; _ft_lzwstate_io+2BDp	...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+5Ch]
		cmp	edx, [ecx+60h]
		jb	loc_11F8
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0A8h]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+60h]
		mov	[ebp+var_14], eax
		mov	ecx, [ebp+var_14]
		mov	[ebp+var_18], ecx
		mov	edx, [ebp+var_18]
		shr	edx, 1
		mov	eax, [ebp+var_18]
		lea	ecx, [eax+edx+4]
		mov	[ebp+var_18], ecx
		mov	edx, [ebp+arg_0]
		add	edx, 64h ; 'd'
		mov	eax, [ebp+arg_0]
		cmp	[eax+58h], edx
		jnz	short loc_11A0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+58h], 0
		mov	[ebp+var_14], 0

loc_11A0:				; CODE XREF: _ft_lzwstate_stack_grow+65j
		cmp	[ebp+var_18], 10000h
		jbe	short loc_11BD
		mov	[ebp+var_18], 10000h
		mov	edx, [ebp+var_18]
		cmp	edx, [ebp+var_14]
		jnz	short loc_11BD
		or	eax, 0FFFFFFFFh
		jmp	short loc_11FA
; ---------------------------------------------------------------------------

loc_11BD:				; CODE XREF: _ft_lzwstate_stack_grow+7Fj
					; _ft_lzwstate_stack_grow+8Ej
		lea	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+58h]
		push	edx
		mov	eax, [ebp+var_18]
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		push	1
		mov	edx, [ebp+var_4]
		push	edx
		call	_ft_mem_realloc
		add	esp, 18h
		mov	ecx, [ebp+arg_0]
		mov	[ecx+58h], eax
		cmp	[ebp+var_C], 0
		jz	short loc_11EF
		or	eax, 0FFFFFFFFh
		jmp	short loc_11FA
; ---------------------------------------------------------------------------

loc_11EF:				; CODE XREF: _ft_lzwstate_stack_grow+C0j
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_18]
		mov	[edx+60h], eax

loc_11F8:				; CODE XREF: _ft_lzwstate_stack_grow+29j
		xor	eax, eax

loc_11FA:				; CODE XREF: _ft_lzwstate_stack_grow+93j
					; _ft_lzwstate_stack_grow+C5j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN10
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		add	esp, 18h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_lzwstate_stack_grow	endp

; ---------------------------------------------------------------------------
		align 4
$LN10		dd 1			; DATA XREF: _ft_lzwstate_stack_grow+D6o
		dd offset $LN9_0
$LN9_0		dd 0FFFFFFF4h, 4	; DATA XREF: .text$mn:00001220o
		dd offset $LN8_0	; "error"
$LN8_0		db 'error',0            ; DATA XREF: .text$mn:0000122Co
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ft_lzwstate_prefix_grow proc near	; CODE XREF: _ft_lzwstate_io+3E1p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+54h]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+var_4]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0A8h]
		mov	[ebp+var_C], ecx
		cmp	[ebp+var_8], 0
		jnz	short loc_1280
		mov	[ebp+var_8], 200h
		jmp	short loc_128C
; ---------------------------------------------------------------------------

loc_1280:				; CODE XREF: _ft_lzwstate_prefix_grow+3Dj
		mov	edx, [ebp+var_8]
		shr	edx, 2
		add	edx, [ebp+var_8]
		mov	[ebp+var_8], edx

loc_128C:				; CODE XREF: _ft_lzwstate_prefix_grow+46j
		lea	eax, [ebp+var_14]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4Ch]
		push	edx
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+var_4]
		push	ecx
		push	3
		mov	edx, [ebp+var_C]
		push	edx
		call	_ft_mem_realloc
		add	esp, 18h
		mov	ecx, [ebp+arg_0]
		mov	[ecx+4Ch], eax
		cmp	[ebp+var_14], 0
		jz	short loc_12BE
		or	eax, 0FFFFFFFFh
		jmp	short loc_1305
; ---------------------------------------------------------------------------

loc_12BE:				; CODE XREF: _ft_lzwstate_prefix_grow+7Fj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4Ch]
		mov	ecx, [ebp+var_8]
		lea	edx, [eax+ecx*2]
		mov	eax, [ebp+arg_0]
		mov	[eax+50h], edx
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		push	ecx		; size_t
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4Ch]
		mov	ecx, [ebp+var_4]
		lea	edx, [eax+ecx*2]
		push	edx		; void *
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+50h]
		push	ecx		; void *
		call	dword ptr ds:__imp__memmove
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_8]
		mov	[edx+54h], eax
		xor	eax, eax

loc_1305:				; CODE XREF: _ft_lzwstate_prefix_grow+84j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN8_1
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	esi
		add	esp, 18h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ft_lzwstate_prefix_grow endp

; ---------------------------------------------------------------------------
		align 4
$LN8_1		dd 1			; DATA XREF: _ft_lzwstate_prefix_grow+D1o
		dd offset $LN7_0
$LN7_0		dd 0FFFFFFECh, 4	; DATA XREF: .text$mn:0000132Co
		dd offset $LN6		; "error"
$LN6		db 'error',0            ; DATA XREF: .text$mn:00001338o
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 1344h
; COMDAT (pick any)
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 1348h
; COMDAT (pick any)
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; void *__cdecl	memcpy(void *, const void *, size_t)
		extrn _memcpy:near	; CODE XREF: _ft_lzw_file_io+114p
; void *__cdecl	memset(void *, int, size_t)
		extrn _memset:near	; CODE XREF: _FT_Stream_OpenLZW+77p
					; _ft_lzwstate_init+Ep	...
; void *__cdecl	_memmove(void *, const void *, size_t)
		extrn __imp__memmove:near ; CODE XREF: _ft_lzwstate_prefix_grow+B2p
					; DATA XREF: _ft_lzwstate_prefix_grow+B2r
		extrn _ft_mem_alloc:near ; CODE	XREF: _FT_Stream_OpenLZW+95p
		extrn _ft_mem_realloc:near ; CODE XREF:	_ft_lzwstate_stack_grow+AEp
					; _ft_lzwstate_prefix_grow+6Dp
		extrn _ft_mem_free:near	; CODE XREF: _FT_Stream_OpenLZW+CBp
					; _ft_lzwstate_done+3Cp ...
		extrn _FT_Stream_Seek:near ; CODE XREF:	_ft_lzwstate_io+77p
					; _ft_lzw_check_header+1Dp ...
		extrn _FT_Stream_Read:near ; CODE XREF:	_ft_lzw_check_header+38p
		extrn _FT_Stream_TryRead:near ;	CODE XREF: _ft_lzwstate_io+93p
					; _ft_lzwstate_refill+3Dp
		extrn _FT_Panic:near	; CODE XREF: _ft_lzwstate_io+40Fp
		extrn _FT_Throw:near	; CODE XREF: _FT_Stream_OpenLZW+39p
					; _ft_lzw_check_header+7Bp ...
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _FT_Stream_OpenLZW+127p
					; _ft_lzwstate_io+499p	...
		extrn __RTC_CheckEsp:near ; CODE XREF: _FT_Stream_OpenLZW+133p
					; _ft_lzwstate_init+73p ...
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo


		end
