;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	095D3AC382A6B049102AA09A6796B27F
; Input	CRC32 :	C28418F5

; File Name   :	D:\compspace\objfiles\firefox\freehelper\ftbbox.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRTD"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Outline_Get_BBox
_FT_Outline_Get_BBox proc near

var_60		= byte ptr -60h
var_5C		= byte ptr -5Ch
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_40		= dword	ptr -40h
var_3C		= word ptr -3Ch
var_38		= dword	ptr -38h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 60h
		push	edi
		lea	edi, [ebp+var_60]
		mov	ecx, 18h
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	[ebp+var_18], 7FFFFFFFh
		mov	[ebp+var_14], 7FFFFFFFh
		mov	[ebp+var_10], 80000001h
		mov	[ebp+var_C], 80000001h
		mov	[ebp+var_30], 7FFFFFFFh
		mov	[ebp+var_2C], 7FFFFFFFh
		mov	[ebp+var_28], 80000001h
		mov	[ebp+var_24], 80000001h
		cmp	[ebp+arg_4], 0
		jnz	short loc_7A
		push	offset $SG7254	; "..\\..\\..\\src\\base\\ftbbox.c"
		push	1BFh
		push	6
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 6
		jmp	loc_266
; ---------------------------------------------------------------------------

loc_7A:					; CODE XREF: _FT_Outline_Get_BBox+5Cj
		cmp	[ebp+arg_0], 0
		jnz	short loc_9C
		push	offset $SG7256	; "..\\..\\..\\src\\base\\ftbbox.c"
		push	1C2h
		push	14h
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 14h
		jmp	loc_266
; ---------------------------------------------------------------------------

loc_9C:					; CODE XREF: _FT_Outline_Get_BBox+7Ej
		mov	eax, [ebp+arg_0]
		movsx	ecx, word ptr [eax+2]
		test	ecx, ecx
		jz	short loc_B1
		mov	edx, [ebp+arg_0]
		movsx	eax, word ptr [edx]
		test	eax, eax
		jg	short loc_DF

loc_B1:					; CODE XREF: _FT_Outline_Get_BBox+A5j
		mov	ecx, [ebp+arg_4]
		mov	dword ptr [ecx+8], 0
		mov	edx, [ebp+arg_4]
		mov	dword ptr [edx], 0
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax+0Ch], 0
		mov	ecx, [ebp+arg_4]
		mov	dword ptr [ecx+4], 0
		xor	eax, eax
		jmp	loc_266
; ---------------------------------------------------------------------------

loc_DF:					; CODE XREF: _FT_Outline_Get_BBox+AFj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		mov	[ebp+var_38], eax
		xor	ecx, ecx
		mov	[ebp+var_3C], cx
		jmp	short loc_FC
; ---------------------------------------------------------------------------

loc_F0:					; CODE XREF: _FT_Outline_Get_BBox+1CEj
		mov	dx, [ebp+var_3C]
		add	dx, 1
		mov	[ebp+var_3C], dx

loc_FC:					; CODE XREF: _FT_Outline_Get_BBox+EEj
		movzx	eax, [ebp+var_3C]
		mov	ecx, [ebp+arg_0]
		movsx	edx, word ptr [ecx+2]
		cmp	eax, edx
		jge	loc_1D3

loc_10F:				; CODE XREF: _FT_Outline_Get_BBox+15Dj
		mov	eax, [ebp+var_38]
		mov	ecx, [eax]
		cmp	ecx, [ebp+var_18]
		jge	short loc_121
		mov	edx, [ebp+var_38]
		mov	eax, [edx]
		mov	[ebp+var_18], eax

loc_121:				; CODE XREF: _FT_Outline_Get_BBox+117j
		mov	ecx, [ebp+var_38]
		mov	edx, [ecx]
		cmp	edx, [ebp+var_10]
		jle	short loc_133
		mov	eax, [ebp+var_38]
		mov	ecx, [eax]
		mov	[ebp+var_10], ecx

loc_133:				; CODE XREF: _FT_Outline_Get_BBox+129j
		mov	edx, [ebp+var_38]
		mov	eax, [edx+4]
		cmp	eax, [ebp+var_14]
		jge	short loc_147
		mov	ecx, [ebp+var_38]
		mov	edx, [ecx+4]
		mov	[ebp+var_14], edx

loc_147:				; CODE XREF: _FT_Outline_Get_BBox+13Cj
		mov	eax, [ebp+var_38]
		mov	ecx, [eax+4]
		cmp	ecx, [ebp+var_C]
		jle	short loc_15B
		mov	edx, [ebp+var_38]
		mov	eax, [edx+4]
		mov	[ebp+var_C], eax

loc_15B:				; CODE XREF: _FT_Outline_Get_BBox+150j
		xor	ecx, ecx
		jnz	short loc_10F
		movzx	edx, [ebp+var_3C]
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		movsx	edx, byte ptr [ecx+edx]
		and	edx, 3
		cmp	edx, 1
		jnz	short loc_1C5

loc_175:				; CODE XREF: _FT_Outline_Get_BBox+1C3j
		mov	eax, [ebp+var_38]
		mov	ecx, [eax]
		cmp	ecx, [ebp+var_30]
		jge	short loc_187
		mov	edx, [ebp+var_38]
		mov	eax, [edx]
		mov	[ebp+var_30], eax

loc_187:				; CODE XREF: _FT_Outline_Get_BBox+17Dj
		mov	ecx, [ebp+var_38]
		mov	edx, [ecx]
		cmp	edx, [ebp+var_28]
		jle	short loc_199
		mov	eax, [ebp+var_38]
		mov	ecx, [eax]
		mov	[ebp+var_28], ecx

loc_199:				; CODE XREF: _FT_Outline_Get_BBox+18Fj
		mov	edx, [ebp+var_38]
		mov	eax, [edx+4]
		cmp	eax, [ebp+var_2C]
		jge	short loc_1AD
		mov	ecx, [ebp+var_38]
		mov	edx, [ecx+4]
		mov	[ebp+var_2C], edx

loc_1AD:				; CODE XREF: _FT_Outline_Get_BBox+1A2j
		mov	eax, [ebp+var_38]
		mov	ecx, [eax+4]
		cmp	ecx, [ebp+var_24]
		jle	short loc_1C1
		mov	edx, [ebp+var_38]
		mov	eax, [edx+4]
		mov	[ebp+var_24], eax

loc_1C1:				; CODE XREF: _FT_Outline_Get_BBox+1B6j
		xor	ecx, ecx
		jnz	short loc_175

loc_1C5:				; CODE XREF: _FT_Outline_Get_BBox+173j
		mov	edx, [ebp+var_38]
		add	edx, 8
		mov	[ebp+var_38], edx
		jmp	loc_F0
; ---------------------------------------------------------------------------

loc_1D3:				; CODE XREF: _FT_Outline_Get_BBox+109j
		mov	eax, [ebp+var_18]
		cmp	eax, [ebp+var_30]
		jl	short loc_1F3
		mov	ecx, [ebp+var_10]
		cmp	ecx, [ebp+var_28]
		jg	short loc_1F3
		mov	edx, [ebp+var_14]
		cmp	edx, [ebp+var_2C]
		jl	short loc_1F3
		mov	eax, [ebp+var_C]
		cmp	eax, [ebp+var_24]
		jle	short loc_24A

loc_1F3:				; CODE XREF: _FT_Outline_Get_BBox+1D9j
					; _FT_Outline_Get_BBox+1E1j ...
		mov	ecx, [ebp+var_30]
		mov	[ebp+var_54], ecx
		mov	edx, [ebp+var_2C]
		mov	[ebp+var_50], edx
		mov	eax, [ebp+var_28]
		mov	[ebp+var_4C], eax
		mov	ecx, [ebp+var_24]
		mov	[ebp+var_48], ecx
		lea	edx, [ebp+var_5C]
		push	edx
		push	offset _bbox_interface
		mov	eax, [ebp+arg_0]
		push	eax
		call	_FT_Outline_Decompose
		add	esp, 0Ch
		mov	[ebp+var_40], eax
		cmp	[ebp+var_40], 0
		jz	short loc_22E
		mov	eax, [ebp+var_40]
		jmp	short loc_266
; ---------------------------------------------------------------------------

loc_22E:				; CODE XREF: _FT_Outline_Get_BBox+227j
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+var_54]
		mov	[ecx], edx
		mov	eax, [ebp+var_50]
		mov	[ecx+4], eax
		mov	edx, [ebp+var_4C]
		mov	[ecx+8], edx
		mov	eax, [ebp+var_48]
		mov	[ecx+0Ch], eax
		jmp	short loc_264
; ---------------------------------------------------------------------------

loc_24A:				; CODE XREF: _FT_Outline_Get_BBox+1F1j
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+var_30]
		mov	[ecx], edx
		mov	eax, [ebp+var_2C]
		mov	[ecx+4], eax
		mov	edx, [ebp+var_28]
		mov	[ecx+8], edx
		mov	eax, [ebp+var_24]
		mov	[ecx+0Ch], eax

loc_264:				; CODE XREF: _FT_Outline_Get_BBox+248j
		xor	eax, eax

loc_266:				; CODE XREF: _FT_Outline_Get_BBox+75j
					; _FT_Outline_Get_BBox+97j ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN33
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4
		add	esp, 60h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Outline_Get_BBox endp

; ---------------------------------------------------------------------------
$LN33		dd 3			; DATA XREF: _FT_Outline_Get_BBox+26Ao
		dd offset $LN32
$LN32		dd 0FFFFFFE8h, 10h	; DATA XREF: .text$mn:00000294o
		dd offset $LN29		; "cbox"
		dd 0FFFFFFD0h, 10h
		dd offset $LN30		; "bbox"
		dd 0FFFFFFA4h, 18h
		dd offset $LN31		; "user"
$LN31		db 'user',0             ; DATA XREF: .text$mn:000002B8o
$LN30		db 'bbox',0             ; DATA XREF: .text$mn:000002ACo
$LN29		db 'cbox',0             ; DATA XREF: .text$mn:000002A0o
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_BBox_Move_To	proc near		; DATA XREF: .rdata:_bbox_interfaceo

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp

loc_2D3:				; CODE XREF: _BBox_Move_To+69j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	edx, [eax]
		cmp	edx, [ecx+8]
		jge	short loc_2EB
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	[eax+8], edx

loc_2EB:				; CODE XREF: _BBox_Move_To+Ej
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	edx, [eax]
		cmp	edx, [ecx+10h]
		jle	short loc_303
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	[eax+10h], edx

loc_303:				; CODE XREF: _BBox_Move_To+26j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	edx, [eax+4]
		cmp	edx, [ecx+0Ch]
		jge	short loc_31D
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	[eax+0Ch], edx

loc_31D:				; CODE XREF: _BBox_Move_To+3Fj
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	edx, [eax+4]
		cmp	edx, [ecx+14h]
		jle	short loc_337
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	[eax+14h], edx

loc_337:				; CODE XREF: _BBox_Move_To+59j
		xor	eax, eax
		jnz	short loc_2D3
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	eax, [ecx+4]
		mov	ecx, [ebp+arg_4]
		mov	[ecx], edx
		mov	[ecx+4], eax
		xor	eax, eax
		pop	ebp
		retn
_BBox_Move_To	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_BBox_Line_To	proc near		; DATA XREF: .rdata:000008D0o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [eax+4]
		mov	eax, [ebp+arg_4]
		mov	[eax], ecx
		mov	[eax+4], edx
		xor	eax, eax
		pop	ebp
		retn
_BBox_Line_To	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_BBox_Conic_Check proc near		; CODE XREF: _BBox_Conic_To+A5p
					; _BBox_Conic_To+ECp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		sub	eax, [ebp+arg_4]
		mov	[ebp+arg_0], eax
		mov	ecx, [ebp+arg_8]
		sub	ecx, [ebp+arg_4]
		mov	[ebp+arg_8], ecx
		mov	edx, [ebp+arg_0]
		add	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_FT_MulDiv
		add	esp, 0Ch
		add	eax, [ebp+arg_4]
		mov	[ebp+arg_4], eax
		mov	edx, [ebp+arg_C]
		mov	eax, [ebp+arg_4]
		cmp	eax, [edx]
		jge	short loc_3B4
		mov	ecx, [ebp+arg_C]
		mov	edx, [ebp+arg_4]
		mov	[ecx], edx

loc_3B4:				; CODE XREF: _BBox_Conic_Check+3Aj
		mov	eax, [ebp+arg_10]
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [eax]
		jle	short loc_3C6
		mov	edx, [ebp+arg_10]
		mov	eax, [ebp+arg_4]
		mov	[edx], eax

loc_3C6:				; CODE XREF: _BBox_Conic_Check+4Cj
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_BBox_Conic_Check endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_BBox_Conic_To	proc near		; DATA XREF: .rdata:000008D4o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp

loc_3D3:				; CODE XREF: _BBox_Conic_To+69j
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_8]
		mov	edx, [eax]
		cmp	edx, [ecx+8]
		jge	short loc_3EB
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		mov	[eax+8], edx

loc_3EB:				; CODE XREF: _BBox_Conic_To+Ej
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_8]
		mov	edx, [eax]
		cmp	edx, [ecx+10h]
		jle	short loc_403
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		mov	[eax+10h], edx

loc_403:				; CODE XREF: _BBox_Conic_To+26j
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_8]
		mov	edx, [eax+4]
		cmp	edx, [ecx+0Ch]
		jge	short loc_41D
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+4]
		mov	[eax+0Ch], edx

loc_41D:				; CODE XREF: _BBox_Conic_To+3Fj
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_8]
		mov	edx, [eax+4]
		cmp	edx, [ecx+14h]
		jle	short loc_437
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+4]
		mov	[eax+14h], edx

loc_437:				; CODE XREF: _BBox_Conic_To+59j
		xor	eax, eax
		jnz	short loc_3D3
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_8]
		mov	eax, [ecx]
		cmp	eax, [edx+8]
		jl	short loc_455
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_8]
		mov	eax, [ecx]
		cmp	eax, [edx+10h]
		jle	short loc_47D

loc_455:				; CODE XREF: _BBox_Conic_To+76j
		mov	ecx, [ebp+arg_8]
		add	ecx, 10h
		push	ecx
		mov	edx, [ebp+arg_8]
		add	edx, 8
		push	edx
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		push	eax
		mov	ecx, [ebp+arg_8]
		mov	edx, [ecx]
		push	edx
		call	_BBox_Conic_Check
		add	esp, 14h

loc_47D:				; CODE XREF: _BBox_Conic_To+83j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_8]
		mov	edx, [eax+4]
		cmp	edx, [ecx+0Ch]
		jl	short loc_499
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_8]
		mov	edx, [eax+4]
		cmp	edx, [ecx+14h]
		jle	short loc_4C4

loc_499:				; CODE XREF: _BBox_Conic_To+B9j
		mov	eax, [ebp+arg_8]
		add	eax, 14h
		push	eax
		mov	ecx, [ebp+arg_8]
		add	ecx, 0Ch
		push	ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		push	edx
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax+4]
		push	ecx
		call	_BBox_Conic_Check
		add	esp, 14h

loc_4C4:				; CODE XREF: _BBox_Conic_To+C7j
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		mov	ecx, [edx+4]
		mov	edx, [ebp+arg_8]
		mov	[edx], eax
		mov	[edx+4], ecx
		xor	eax, eax
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_BBox_Conic_To	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_cubic_peak	proc near		; CODE XREF: _BBox_Cubic_Check+3Bp
					; _BBox_Cubic_Check+85p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], 0
		cmp	[ebp+arg_0], 0
		jge	short loc_514
		mov	eax, [ebp+arg_0]
		neg	eax
		mov	[ebp+var_C], eax
		jmp	short loc_51A
; ---------------------------------------------------------------------------

loc_514:				; CODE XREF: _cubic_peak+28j
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_C], ecx

loc_51A:				; CODE XREF: _cubic_peak+32j
		cmp	[ebp+arg_4], 0
		jge	short loc_52A
		mov	edx, [ebp+arg_4]
		neg	edx
		mov	[ebp+var_10], edx
		jmp	short loc_530
; ---------------------------------------------------------------------------

loc_52A:				; CODE XREF: _cubic_peak+3Ej
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_10], eax

loc_530:				; CODE XREF: _cubic_peak+48j
		cmp	[ebp+arg_8], 0
		jge	short loc_540
		mov	ecx, [ebp+arg_8]
		neg	ecx
		mov	[ebp+var_14], ecx
		jmp	short loc_546
; ---------------------------------------------------------------------------

loc_540:				; CODE XREF: _cubic_peak+54j
		mov	edx, [ebp+arg_8]
		mov	[ebp+var_14], edx

loc_546:				; CODE XREF: _cubic_peak+5Ej
		cmp	[ebp+arg_C], 0
		jge	short loc_556
		mov	eax, [ebp+arg_C]
		neg	eax
		mov	[ebp+var_18], eax
		jmp	short loc_55C
; ---------------------------------------------------------------------------

loc_556:				; CODE XREF: _cubic_peak+6Aj
		mov	ecx, [ebp+arg_C]
		mov	[ebp+var_18], ecx

loc_55C:				; CODE XREF: _cubic_peak+74j
		mov	edx, [ebp+var_C]
		or	edx, [ebp+var_10]
		or	edx, [ebp+var_14]
		or	edx, [ebp+var_18]
		push	edx
		call	_FT_MSB
		add	esp, 4
		mov	ecx, 1Bh
		sub	ecx, eax
		mov	[ebp+var_8], ecx
		cmp	[ebp+var_8], 0
		jle	short loc_5BC
		cmp	[ebp+var_8], 2
		jle	short loc_58E
		mov	[ebp+var_8], 2

loc_58E:				; CODE XREF: _cubic_peak+A5j
		mov	edx, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		shl	edx, cl
		mov	[ebp+arg_0], edx
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		shl	eax, cl
		mov	[ebp+arg_4], eax
		mov	edx, [ebp+arg_8]
		mov	ecx, [ebp+var_8]
		shl	edx, cl
		mov	[ebp+arg_8], edx
		mov	eax, [ebp+arg_C]
		mov	ecx, [ebp+var_8]
		shl	eax, cl
		mov	[ebp+arg_C], eax
		jmp	short loc_5F0
; ---------------------------------------------------------------------------

loc_5BC:				; CODE XREF: _cubic_peak+9Fj
		mov	ecx, [ebp+var_8]
		neg	ecx
		mov	edx, [ebp+arg_0]
		sar	edx, cl
		mov	[ebp+arg_0], edx
		mov	ecx, [ebp+var_8]
		neg	ecx
		mov	eax, [ebp+arg_4]
		sar	eax, cl
		mov	[ebp+arg_4], eax
		mov	ecx, [ebp+var_8]
		neg	ecx
		mov	edx, [ebp+arg_8]
		sar	edx, cl
		mov	[ebp+arg_8], edx
		mov	ecx, [ebp+var_8]
		neg	ecx
		mov	eax, [ebp+arg_C]
		sar	eax, cl
		mov	[ebp+arg_C], eax

loc_5F0:				; CODE XREF: _cubic_peak+DAj
					; _cubic_peak:loc_6F4j
		cmp	[ebp+arg_4], 0
		jg	short loc_600
		cmp	[ebp+arg_8], 0
		jle	loc_6F9

loc_600:				; CODE XREF: _cubic_peak+114j
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_8]
		add	edx, [ebp+arg_C]
		cmp	ecx, edx
		jle	short loc_66B
		mov	eax, [ebp+arg_C]
		add	eax, [ebp+arg_8]
		mov	[ebp+arg_C], eax
		mov	ecx, [ebp+arg_8]
		add	ecx, [ebp+arg_4]
		mov	[ebp+arg_8], ecx
		mov	edx, [ebp+arg_4]
		add	edx, [ebp+arg_0]
		mov	[ebp+arg_4], edx
		mov	eax, [ebp+arg_C]
		add	eax, [ebp+arg_8]
		mov	[ebp+arg_C], eax
		mov	ecx, [ebp+arg_8]
		add	ecx, [ebp+arg_4]
		mov	[ebp+arg_8], ecx
		mov	eax, [ebp+arg_C]
		add	eax, [ebp+arg_8]
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		mov	[ebp+arg_C], eax
		mov	eax, [ebp+arg_8]
		cdq
		and	edx, 3
		add	eax, edx
		sar	eax, 2
		mov	[ebp+arg_8], eax
		mov	eax, [ebp+arg_4]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+arg_4], eax
		jmp	short loc_6C4
; ---------------------------------------------------------------------------

loc_66B:				; CODE XREF: _cubic_peak+12Ej
		mov	edx, [ebp+arg_0]
		add	edx, [ebp+arg_4]
		mov	[ebp+arg_0], edx
		mov	eax, [ebp+arg_4]
		add	eax, [ebp+arg_8]
		mov	[ebp+arg_4], eax
		mov	ecx, [ebp+arg_8]
		add	ecx, [ebp+arg_C]
		mov	[ebp+arg_8], ecx
		mov	edx, [ebp+arg_0]
		add	edx, [ebp+arg_4]
		mov	[ebp+arg_0], edx
		mov	eax, [ebp+arg_4]
		add	eax, [ebp+arg_8]
		mov	[ebp+arg_4], eax
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+arg_4]
		cdq
		and	edx, 7
		add	eax, edx
		sar	eax, 3
		mov	[ebp+arg_0], eax
		mov	eax, [ebp+arg_4]
		cdq
		and	edx, 3
		add	eax, edx
		sar	eax, 2
		mov	[ebp+arg_4], eax
		mov	eax, [ebp+arg_8]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+arg_8], eax

loc_6C4:				; CODE XREF: _cubic_peak+189j
		mov	ecx, [ebp+arg_0]
		cmp	ecx, [ebp+arg_4]
		jnz	short loc_6DC
		mov	edx, [ebp+arg_0]
		cmp	edx, [ebp+arg_8]
		jl	short loc_6DC
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_4], eax
		jmp	short loc_6F9
; ---------------------------------------------------------------------------

loc_6DC:				; CODE XREF: _cubic_peak+1EAj
					; _cubic_peak+1F2j
		mov	ecx, [ebp+arg_8]
		cmp	ecx, [ebp+arg_C]
		jnz	short loc_6F4
		mov	edx, [ebp+arg_4]
		cmp	edx, [ebp+arg_C]
		jg	short loc_6F4
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_4], eax
		jmp	short loc_6F9
; ---------------------------------------------------------------------------

loc_6F4:				; CODE XREF: _cubic_peak+202j
					; _cubic_peak+20Aj
		jmp	loc_5F0
; ---------------------------------------------------------------------------

loc_6F9:				; CODE XREF: _cubic_peak+11Aj
					; _cubic_peak+1FAj ...
		cmp	[ebp+var_8], 0
		jle	short loc_70C
		mov	edx, [ebp+var_4]
		mov	ecx, [ebp+var_8]
		sar	edx, cl
		mov	[ebp+var_4], edx
		jmp	short loc_719
; ---------------------------------------------------------------------------

loc_70C:				; CODE XREF: _cubic_peak+21Dj
		mov	ecx, [ebp+var_8]
		neg	ecx
		mov	eax, [ebp+var_4]
		shl	eax, cl
		mov	[ebp+var_4], eax

loc_719:				; CODE XREF: _cubic_peak+22Aj
		mov	eax, [ebp+var_4]
		add	esp, 18h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_cubic_peak	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_BBox_Cubic_Check proc near		; CODE XREF: _BBox_Cubic_To+5Dp
					; _BBox_Cubic_To+C7p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_14]
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [eax]
		jg	short loc_747
		mov	edx, [ebp+arg_14]
		mov	eax, [ebp+arg_8]
		cmp	eax, [edx]
		jle	short loc_77D

loc_747:				; CODE XREF: _BBox_Cubic_Check+Bj
		mov	ecx, [ebp+arg_14]
		mov	edx, [ebp+arg_C]
		sub	edx, [ecx]
		push	edx
		mov	eax, [ebp+arg_14]
		mov	ecx, [ebp+arg_8]
		sub	ecx, [eax]
		push	ecx
		mov	edx, [ebp+arg_14]
		mov	eax, [ebp+arg_4]
		sub	eax, [edx]
		push	eax
		mov	ecx, [ebp+arg_14]
		mov	edx, [ebp+arg_0]
		sub	edx, [ecx]
		push	edx
		call	_cubic_peak
		add	esp, 10h
		mov	ecx, [ebp+arg_14]
		add	eax, [ecx]
		mov	edx, [ebp+arg_14]
		mov	[edx], eax

loc_77D:				; CODE XREF: _BBox_Cubic_Check+15j
		mov	eax, [ebp+arg_10]
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [eax]
		jl	short loc_791
		mov	edx, [ebp+arg_10]
		mov	eax, [ebp+arg_8]
		cmp	eax, [edx]
		jge	short loc_7C9

loc_791:				; CODE XREF: _BBox_Cubic_Check+55j
		mov	ecx, [ebp+arg_10]
		mov	edx, [ecx]
		sub	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_10]
		mov	ecx, [eax]
		sub	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_10]
		mov	eax, [edx]
		sub	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_10]
		mov	edx, [ecx]
		sub	edx, [ebp+arg_0]
		push	edx
		call	_cubic_peak
		add	esp, 10h
		mov	ecx, [ebp+arg_10]
		mov	edx, [ecx]
		sub	edx, eax
		mov	eax, [ebp+arg_10]
		mov	[eax], edx

loc_7C9:				; CODE XREF: _BBox_Cubic_Check+5Fj
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_BBox_Cubic_Check endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_BBox_Cubic_To	proc near		; DATA XREF: .rdata:000008D8o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_C]
		mov	edx, [eax]
		cmp	edx, [ecx+8]
		jl	short loc_817
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_C]
		mov	edx, [eax]
		cmp	edx, [ecx+10h]
		jg	short loc_817
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_C]
		mov	edx, [eax]
		cmp	edx, [ecx+8]
		jl	short loc_817
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_C]
		mov	edx, [eax]
		cmp	edx, [ecx+10h]
		jle	short loc_845

loc_817:				; CODE XREF: _BBox_Cubic_To+Ej
					; _BBox_Cubic_To+1Bj ...
		mov	eax, [ebp+arg_C]
		add	eax, 10h
		push	eax
		mov	ecx, [ebp+arg_C]
		add	ecx, 8
		push	ecx
		mov	edx, [ebp+arg_8]
		mov	eax, [edx]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		mov	edx, [ebp+arg_C]
		mov	eax, [edx]
		push	eax
		call	_BBox_Cubic_Check
		add	esp, 18h

loc_845:				; CODE XREF: _BBox_Cubic_To+35j
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_C]
		mov	eax, [ecx+4]
		cmp	eax, [edx+0Ch]
		jl	short loc_87D
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+arg_C]
		mov	eax, [ecx+4]
		cmp	eax, [edx+14h]
		jg	short loc_87D
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_C]
		mov	eax, [ecx+4]
		cmp	eax, [edx+0Ch]
		jl	short loc_87D
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_C]
		mov	eax, [ecx+4]
		cmp	eax, [edx+14h]
		jle	short loc_8AF

loc_87D:				; CODE XREF: _BBox_Cubic_To+71j
					; _BBox_Cubic_To+7Fj ...
		mov	ecx, [ebp+arg_C]
		add	ecx, 14h
		push	ecx
		mov	edx, [ebp+arg_C]
		add	edx, 0Ch
		push	edx
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax+4]
		push	ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		push	edx
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax+4]
		push	ecx
		call	_BBox_Cubic_Check
		add	esp, 18h

loc_8AF:				; CODE XREF: _BBox_Cubic_To+9Bj
		mov	edx, [ebp+arg_8]
		mov	eax, [edx]
		mov	ecx, [edx+4]
		mov	edx, [ebp+arg_C]
		mov	[edx], eax
		mov	[edx+4], ecx
		xor	eax, eax
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_BBox_Cubic_To	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8CCh
_bbox_interface	dd offset _BBox_Move_To	; DATA XREF: _FT_Outline_Get_BBox+20Fo
		dd offset _BBox_Line_To
		dd offset _BBox_Conic_To
		dd offset _BBox_Cubic_To
		dd 2 dup(0)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 8E4h
$SG7254		db '..\..\..\src\base\ftbbox.c',0 ; DATA XREF: _FT_Outline_Get_BBox+5Eo
		align 10h
$SG7256		db '..\..\..\src\base\ftbbox.c',0 ; DATA XREF: _FT_Outline_Get_BBox+80o
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 91Ch
; COMDAT (pick any)
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 920h
; COMDAT (pick any)
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _FT_MulDiv:near	; CODE XREF: _BBox_Conic_Check+24p
		extrn _FT_Throw:near	; CODE XREF: _FT_Outline_Get_BBox+6Ap
					; _FT_Outline_Get_BBox+8Cp
		extrn _FT_Outline_Decompose:near ; CODE	XREF: _FT_Outline_Get_BBox+218p
		extrn _FT_MSB:near	; CODE XREF: _cubic_peak+89p
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _FT_Outline_Get_BBox+270p
		extrn @__security_check_cookie@4:near ;	CODE XREF: _FT_Outline_Get_BBox+27Dp
		extrn __RTC_CheckEsp:near ; CODE XREF: _FT_Outline_Get_BBox+287p
					; _BBox_Conic_Check+58p ...
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn ___security_cookie:near ;	DATA XREF: _FT_Outline_Get_BBox+16r


		end
