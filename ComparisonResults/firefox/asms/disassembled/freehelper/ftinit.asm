;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	219652D100218DC0D33E90DD20B86E50
; Input	CRC32 :	9566211D

; File Name   :	D:\compspace\objfiles\firefox\freehelper\ftinit.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRTD"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
_ft_default_modules dd offset _autofit_module_class ; DATA XREF: _FT_Add_Default_Modules+14o
		dd offset _tt_driver_class
		dd offset _t1_driver_class
		dd offset _cff_driver_class
		dd offset _t1cid_driver_class
		dd offset _pfr_driver_class
		dd offset _t42_driver_class
		dd offset _winfnt_driver_class
		dd offset _pcf_driver_class
		dd offset _psaux_module_class
		dd offset _psnames_module_class
		dd offset _pshinter_module_class
		dd offset _ft_raster1_renderer_class
		dd offset _sfnt_module_class
		dd offset _ft_smooth_renderer_class
		dd offset _ft_smooth_lcd_renderer_class
		dd offset _ft_smooth_lcdv_renderer_class
		dd offset _bdf_driver_class
		dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 4Ch
$SG7016		db 'FT_Add_Default_Module: Cannot install `%s',27h,', error = 0x%x',0Ah,0
					; DATA XREF: _FT_Add_Default_Modules+5Co
		align 4
$SG7023		db 'FT_Init_FreeType: cannot find memory manager',0Ah,0
					; DATA XREF: _FT_Init_FreeType+22o
		align 4
$SG7024		db '..\..\..\src\base\ftinit.c',0 ; DATA XREF: _FT_Init_FreeType+2Fo
		align 4
$SG7032		db '..\..\..\src\base\ftinit.c',0 ; DATA XREF: _FT_Done_FreeType+11o
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Init_FreeType
_FT_Init_FreeType proc near

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		call	_FT_New_Memory
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jnz	short loc_138
		push	offset $SG7023	; "FT_Init_FreeType: cannot find memory	ma"...
		call	_FT_Message
		add	esp, 4
		push	offset $SG7024	; "..\\..\\..\\src\\base\\ftinit.c"
		push	0F7h ; '÷'
		push	7
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 7
		jmp	short loc_170
; ---------------------------------------------------------------------------

loc_138:				; CODE XREF: _FT_Init_FreeType+20j
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		push	ecx
		call	_FT_New_Library
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_15F
		mov	edx, [ebp+var_8]
		push	edx
		call	_FT_Done_Memory
		add	esp, 4
		jmp	short loc_16D
; ---------------------------------------------------------------------------

loc_15F:				; CODE XREF: _FT_Init_FreeType+5Fj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		call	_FT_Add_Default_Modules
		add	esp, 4

loc_16D:				; CODE XREF: _FT_Init_FreeType+6Dj
		mov	eax, [ebp+var_4]

loc_170:				; CODE XREF: _FT_Init_FreeType+46j
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Init_FreeType endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Done_FreeType
_FT_Done_FreeType proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		cmp	[ebp+arg_0], 0
		jnz	short loc_1AA
		push	offset $SG7032	; "..\\..\\..\\src\\base\\ftinit.c"
		push	110h
		push	21h ; '!'
		call	_FT_Throw
		add	esp, 0Ch
		or	eax, 21h
		jmp	short loc_1CC
; ---------------------------------------------------------------------------

loc_1AA:				; CODE XREF: _FT_Done_FreeType+Fj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_FT_Done_Library
		add	esp, 4
		mov	eax, [ebp+var_4]
		push	eax
		call	_FT_Done_Memory
		add	esp, 4
		xor	eax, eax

loc_1CC:				; CODE XREF: _FT_Done_FreeType+28j
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Done_FreeType endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Add_Default_Modules
_FT_Add_Default_Modules	proc near	; CODE XREF: _FT_Init_FreeType+75p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_8], offset _ft_default_modules

loc_1FB:				; CODE XREF: _FT_Add_Default_Modules+76j
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax], 0
		jz	short loc_258
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_FT_Add_Module
		add	esp, 8
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_24D

loc_21E:				; CODE XREF: _FT_Add_Default_Modules+6Bj
		mov	ecx, 4
		imul	edx, ecx, 6
		cmp	dword ptr ds:_ft_trace_levels[edx], 0
		jl	short loc_249
		mov	eax, [ebp+var_4]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	eax, [edx+8]
		push	eax
		push	offset $SG7016	; "FT_Add_Default_Module: Cannot install `"...
		call	_FT_Message
		add	esp, 0Ch

loc_249:				; CODE XREF: _FT_Add_Default_Modules+4Dj
		xor	ecx, ecx
		jnz	short loc_21E

loc_24D:				; CODE XREF: _FT_Add_Default_Modules+3Cj
		mov	edx, [ebp+var_8]
		add	edx, 4
		mov	[ebp+var_8], edx
		jmp	short loc_1FB
; ---------------------------------------------------------------------------

loc_258:				; CODE XREF: _FT_Add_Default_Modules+21j
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_Add_Default_Modules	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 268h
; COMDAT (pick any)
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 26Ch
; COMDAT (pick any)
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _autofit_module_class:near ; DATA	XREF: .rdata:_ft_default_moduleso
		extrn _tt_driver_class:near ; DATA XREF: .rdata:00000004o
		extrn _t1_driver_class:near ; DATA XREF: .rdata:00000008o
		extrn _cff_driver_class:near ; DATA XREF: .rdata:0000000Co
		extrn _t1cid_driver_class:near ; DATA XREF: .rdata:00000010o
		extrn _pfr_driver_class:near ; DATA XREF: .rdata:00000014o
		extrn _t42_driver_class:near ; DATA XREF: .rdata:00000018o
		extrn _winfnt_driver_class:near	; DATA XREF: .rdata:0000001Co
		extrn _pcf_driver_class:near ; DATA XREF: .rdata:00000020o
		extrn _psaux_module_class:near ; DATA XREF: .rdata:00000024o
		extrn _psnames_module_class:near ; DATA	XREF: .rdata:00000028o
		extrn _pshinter_module_class:near ; DATA XREF: .rdata:0000002Co
		extrn _ft_raster1_renderer_class:near ;	DATA XREF: .rdata:00000030o
		extrn _sfnt_module_class:near ;	DATA XREF: .rdata:00000034o
		extrn _ft_smooth_renderer_class:near ; DATA XREF: .rdata:00000038o
		extrn _ft_smooth_lcd_renderer_class:near ; DATA	XREF: .rdata:0000003Co
		extrn _ft_smooth_lcdv_renderer_class:near ; DATA XREF: .rdata:00000040o
		extrn _bdf_driver_class:near ; DATA XREF: .rdata:00000044o
		extrn _FT_Add_Module:near ; CODE XREF: _FT_Add_Default_Modules+2Dp
		extrn _FT_New_Library:near ; CODE XREF:	_FT_Init_FreeType+50p
		extrn _FT_Done_Library:near ; CODE XREF: _FT_Done_FreeType+36p
		extrn _FT_New_Memory:near ; CODE XREF: _FT_Init_FreeType+14p
		extrn _FT_Done_Memory:near ; CODE XREF:	_FT_Init_FreeType+65p
					; _FT_Done_FreeType+42p
		extrn _FT_Message:near	; CODE XREF: _FT_Init_FreeType+27p
					; _FT_Add_Default_Modules+61p
		extrn _FT_Throw:near	; CODE XREF: _FT_Init_FreeType+3Bp
					; _FT_Done_FreeType+1Dp
		extrn __RTC_CheckEsp:near ; CODE XREF: _FT_Init_FreeType+85p
					; _FT_Done_FreeType+51p ...
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn _ft_trace_levels:near ; DATA XREF: _FT_Add_Default_Modules+46r


		end
