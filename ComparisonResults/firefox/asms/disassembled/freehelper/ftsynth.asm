;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	26A434A45972C263A593F072DF1169CF
; Input	CRC32 :	3BE7FC78

; File Name   :	D:\compspace\objfiles\firefox\freehelper\ftsynth.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRTD"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
$SG7133		db 'FT_GlyphSlot_Embolden:',0 ; DATA XREF: _FT_GlyphSlot_Embolden+EDo
		align 4
$SG7138		db 'too strong embolding parameter ystr=%d',0Ah,0
					; DATA XREF: _FT_GlyphSlot_Embolden+113o
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 40h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_GlyphSlot_Embolden
_FT_GlyphSlot_Embolden proc near

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		cmp	[ebp+arg_0], 0
		jnz	short loc_65
		jmp	loc_245
; ---------------------------------------------------------------------------

loc_65:					; CODE XREF: _FT_GlyphSlot_Embolden+1Ej
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_0]
		cmp	dword ptr [ecx+48h], 6F75746Ch
		jz	short loc_93
		mov	edx, [ebp+arg_0]
		cmp	dword ptr [edx+48h], 62697473h
		jz	short loc_93
		jmp	loc_245
; ---------------------------------------------------------------------------

loc_93:					; CODE XREF: _FT_GlyphSlot_Embolden+40j
					; _FT_GlyphSlot_Embolden+4Cj
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+58h]
		mov	edx, [ecx+14h]
		push	edx
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax+44h]
		push	ecx
		call	_FT_MulFix
		add	esp, 8
		cdq
		mov	ecx, 18h
		idiv	ecx
		mov	[ebp+var_10], eax
		mov	edx, [ebp+var_10]
		mov	[ebp+var_14], edx
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+48h], 6F75746Ch
		jnz	short loc_E6
		mov	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+var_10]
		push	edx
		mov	eax, [ebp+arg_0]
		add	eax, 6Ch ; 'l'
		push	eax
		call	_FT_Outline_EmboldenXY
		add	esp, 0Ch
		jmp	loc_1AC
; ---------------------------------------------------------------------------

loc_E6:					; CODE XREF: _FT_GlyphSlot_Embolden+88j
		mov	ecx, [ebp+var_10]
		and	ecx, 0FFFFFFC0h
		mov	[ebp+var_10], ecx
		jnz	short loc_F8
		mov	[ebp+var_10], 40h ; '@'

loc_F8:					; CODE XREF: _FT_GlyphSlot_Embolden+AFj
		mov	edx, [ebp+var_14]
		and	edx, 0FFFFFFC0h
		mov	[ebp+var_14], edx
		mov	eax, [ebp+var_14]
		sar	eax, 6
		cmp	eax, 7FFFFFFFh
		jg	short loc_11C
		mov	ecx, [ebp+var_14]
		sar	ecx, 6
		cmp	ecx, 80000000h
		jge	short loc_169

loc_11C:				; CODE XREF: _FT_GlyphSlot_Embolden+CCj
					; _FT_GlyphSlot_Embolden+FCj
		mov	edx, 4
		imul	eax, edx, 0Fh
		cmp	dword ptr ds:_ft_trace_levels[eax], 1
		jl	short loc_13A
		push	offset $SG7133	; "FT_GlyphSlot_Embolden:"
		call	_FT_Message
		add	esp, 4

loc_13A:				; CODE XREF: _FT_GlyphSlot_Embolden+EBj
		xor	ecx, ecx
		jnz	short loc_11C

loc_13E:				; CODE XREF: _FT_GlyphSlot_Embolden+122j
		mov	edx, 4
		imul	eax, edx, 0Fh
		cmp	dword ptr ds:_ft_trace_levels[eax], 1
		jl	short loc_160
		mov	ecx, [ebp+var_14]
		push	ecx
		push	offset $SG7138	; "too strong embolding	parameter ystr=%d\"...
		call	_FT_Message
		add	esp, 8

loc_160:				; CODE XREF: _FT_GlyphSlot_Embolden+10Dj
		xor	edx, edx
		jnz	short loc_13E
		jmp	loc_245
; ---------------------------------------------------------------------------

loc_169:				; CODE XREF: _FT_GlyphSlot_Embolden+DAj
		mov	eax, [ebp+arg_0]
		push	eax
		call	_FT_GlyphSlot_Own_Bitmap
		add	esp, 4
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_183
		jmp	loc_245
; ---------------------------------------------------------------------------

loc_183:				; CODE XREF: _FT_GlyphSlot_Embolden+13Cj
		mov	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+var_10]
		push	edx
		mov	eax, [ebp+arg_0]
		add	eax, 4Ch ; 'L'
		push	eax
		mov	ecx, [ebp+var_4]
		push	ecx
		call	_FT_Bitmap_Embolden
		add	esp, 10h
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_1AC
		jmp	loc_245
; ---------------------------------------------------------------------------

loc_1AC:				; CODE XREF: _FT_GlyphSlot_Embolden+A1j
					; _FT_GlyphSlot_Embolden+165j
		mov	edx, [ebp+arg_0]
		cmp	dword ptr [edx+40h], 0
		jz	short loc_1C4
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+40h]
		add	ecx, [ebp+var_10]
		mov	edx, [ebp+arg_0]
		mov	[edx+40h], ecx

loc_1C4:				; CODE XREF: _FT_GlyphSlot_Embolden+173j
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+44h], 0
		jz	short loc_1DC
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+44h]
		add	edx, [ebp+var_14]
		mov	eax, [ebp+arg_0]
		mov	[eax+44h], edx

loc_1DC:				; CODE XREF: _FT_GlyphSlot_Embolden+18Bj
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+18h]
		add	edx, [ebp+var_10]
		mov	eax, [ebp+arg_0]
		mov	[eax+18h], edx
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+1Ch]
		add	edx, [ebp+var_14]
		mov	eax, [ebp+arg_0]
		mov	[eax+1Ch], edx
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+28h]
		add	edx, [ebp+var_10]
		mov	eax, [ebp+arg_0]
		mov	[eax+28h], edx
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+34h]
		add	edx, [ebp+var_14]
		mov	eax, [ebp+arg_0]
		mov	[eax+34h], edx
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+24h]
		add	edx, [ebp+var_14]
		mov	eax, [ebp+arg_0]
		mov	[eax+24h], edx
		mov	ecx, [ebp+arg_0]
		cmp	dword ptr [ecx+48h], 62697473h
		jnz	short loc_245
		mov	edx, [ebp+var_14]
		sar	edx, 6
		mov	eax, [ebp+arg_0]
		add	edx, [eax+68h]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+68h], edx

loc_245:				; CODE XREF: _FT_GlyphSlot_Embolden+20j
					; _FT_GlyphSlot_Embolden+4Ej ...
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_GlyphSlot_Embolden endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_GlyphSlot_Oblique
_FT_GlyphSlot_Oblique proc near

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_20], eax
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		cmp	[ebp+arg_0], 0
		jnz	short loc_295
		jmp	short loc_2D8
; ---------------------------------------------------------------------------

loc_295:				; CODE XREF: _FT_GlyphSlot_Oblique+31j
		mov	eax, [ebp+arg_0]
		add	eax, 6Ch ; 'l'
		mov	[ebp+var_20], eax
		mov	ecx, [ebp+arg_0]
		cmp	dword ptr [ecx+48h], 6F75746Ch
		jz	short loc_2AC
		jmp	short loc_2D8
; ---------------------------------------------------------------------------

loc_2AC:				; CODE XREF: _FT_GlyphSlot_Oblique+48j
		mov	[ebp+var_18], 10000h
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 366Ah
		mov	[ebp+var_C], 10000h
		lea	edx, [ebp+var_18]
		push	edx
		mov	eax, [ebp+var_20]
		push	eax
		call	_FT_Outline_Transform
		add	esp, 8

loc_2D8:				; CODE XREF: _FT_GlyphSlot_Oblique+33j
					; _FT_GlyphSlot_Oblique+4Aj
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4
		add	esp, 20h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_FT_GlyphSlot_Oblique endp

; ---------------------------------------------------------------------------
		align 4
$LN7		dd 1			; DATA XREF: _FT_GlyphSlot_Oblique+7Co
		dd offset $LN6
$LN6		dd 0FFFFFFE8h, 10h	; DATA XREF: .text$mn:00000308o
		dd offset $LN5		; "transform"
$LN5		db 'transform',0        ; DATA XREF: .text$mn:00000314o
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 324h
; COMDAT (pick any)
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 328h
; COMDAT (pick any)
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _FT_MulFix:near	; CODE XREF: _FT_GlyphSlot_Embolden+65p
		extrn _FT_Message:near	; CODE XREF: _FT_GlyphSlot_Embolden+F2p
					; _FT_GlyphSlot_Embolden+118p
		extrn _FT_Outline_Transform:near ; CODE	XREF: _FT_GlyphSlot_Oblique+70p
		extrn _FT_Outline_EmboldenXY:near ; CODE XREF: _FT_GlyphSlot_Embolden+99p
		extrn _FT_Bitmap_Embolden:near ; CODE XREF: _FT_GlyphSlot_Embolden+156p
		extrn _FT_GlyphSlot_Own_Bitmap:near ; CODE XREF: _FT_GlyphSlot_Embolden+12Dp
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _FT_GlyphSlot_Oblique+82p
		extrn @__security_check_cookie@4:near ;	CODE XREF: _FT_GlyphSlot_Oblique+8Ep
		extrn __RTC_CheckEsp:near ; CODE XREF: _FT_GlyphSlot_Embolden+20Ap
					; _FT_GlyphSlot_Oblique+98p
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn _ft_trace_levels:near ; DATA XREF: _FT_GlyphSlot_Embolden+E4r
					; _FT_GlyphSlot_Embolden+106r
		extrn ___security_cookie:near ;	DATA XREF: _FT_GlyphSlot_Oblique+23r


		end
