;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	7DDC707437510EF6705A30C35099BA56
; Input	CRC32 :	28696377

; File Name   :	D:\compspace\objfiles\firefox\freehelper\ftgasp.obj
; Format      :	COFF (X386MAGIC)
; includelib "MSVCRTD"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		assume es:nothing, ss:nothing, ds:_rtc$IMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _FT_Get_Gasp
_FT_Get_Gasp	proc near

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], 0FFFFFFFFh
		cmp	[ebp+arg_0], 0
		jz	short $Exit$9
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		and	ecx, 8
		jz	short $Exit$9
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax+21Eh]
		test	ecx, ecx
		jle	short $Exit$9
		mov	edx, [ebp+var_8]
		mov	eax, [edx+220h]
		mov	[ebp+var_C], eax
		mov	ecx, [ebp+var_8]
		movzx	edx, word ptr [ecx+21Eh]
		mov	eax, [ebp+var_C]
		lea	ecx, [eax+edx*4]
		mov	[ebp+var_10], ecx

loc_62:					; CODE XREF: _FT_Get_Gasp:loc_80j
		mov	edx, [ebp+var_C]
		movzx	eax, word ptr [edx]
		cmp	[ebp+arg_4], eax
		jbe	short loc_82
		mov	ecx, [ebp+var_C]
		add	ecx, 4
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+var_C]
		cmp	edx, [ebp+var_10]
		jb	short loc_80
		jmp	short $Exit$9
; ---------------------------------------------------------------------------

loc_80:					; CODE XREF: _FT_Get_Gasp+7Cj
		jmp	short loc_62
; ---------------------------------------------------------------------------

loc_82:					; CODE XREF: _FT_Get_Gasp+6Bj
		mov	eax, [ebp+var_C]
		movzx	ecx, word ptr [eax+2]
		mov	[ebp+var_4], ecx
		mov	edx, [ebp+var_8]
		movzx	eax, word ptr [edx+21Ch]
		test	eax, eax
		jnz	short $Exit$9
		mov	ecx, [ebp+var_4]
		and	ecx, 3
		mov	[ebp+var_4], ecx

$Exit$9:				; CODE XREF: _FT_Get_Gasp+22j
					; _FT_Get_Gasp+2Dj ...
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
_FT_Get_Gasp	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 0ACh
; COMDAT (pick any)
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 0B0h
; COMDAT (pick any)
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo


		end
