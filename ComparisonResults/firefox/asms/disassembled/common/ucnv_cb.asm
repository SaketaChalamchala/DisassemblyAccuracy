;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	389B9C794D4A142FBB6768492C56D793
; Input	CRC32 :	AA9C2E7F

; File Name   :	D:\compspace\objfiles\firefox\common\ucnv_cb.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
; `ucnv_cbToUWriteSub_56'::`2'::kSubstituteChar1
?kSubstituteChar1@?1??ucnv_cbToUWriteSub_56@@9@9 dd 1Ah
					; DATA XREF: _ucnv_cbToUWriteSub_56+45o
; `ucnv_cbToUWriteSub_56'::`2'::kSubstituteChar
?kSubstituteChar@?1??ucnv_cbToUWriteSub_56@@9@9	db 0FDh, 0FFh
					; DATA XREF: _ucnv_cbToUWriteSub_56+62o
		align 4
_rdata		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 8
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ucnv_cbFromUWriteBytes_56
_ucnv_cbFromUWriteBytes_56 proc	near	; CODE XREF: _ucnv_cbFromUWriteSub_56+E6p
					; _ucnv_cbFromUWriteSub_56+107p

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_10]
		cmp	dword ptr [eax], 0
		jle	short loc_30
		jmp	short loc_64
; ---------------------------------------------------------------------------

loc_30:					; CODE XREF: _ucnv_cbFromUWriteBytes_56+24j
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_0]
		add	edx, 18h
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		push	ecx
		mov	edx, [ebp+arg_0]
		add	edx, 10h
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		push	eax
		call	_ucnv_fromUWriteBytes_56
		add	esp, 20h

loc_64:					; CODE XREF: _ucnv_cbFromUWriteBytes_56+26j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ucnv_cbFromUWriteBytes_56 endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 78h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 7Ch
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 80h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ucnv_cbFromUWriteUChars_56
_ucnv_cbFromUWriteUChars_56 proc near	; CODE XREF: _ucnv_cbFromUWriteSub_56+73p

var_FC		= byte ptr -0FCh
var_35		= byte ptr -35h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0FCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_FC]
		mov	ecx, 3Fh ; '?'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_10]
		cmp	dword ptr [eax], 0
		jle	short loc_AB
		jmp	loc_1C8
; ---------------------------------------------------------------------------

loc_AB:					; CODE XREF: _ucnv_cbFromUWriteUChars_56+24j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+10h]
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_10]
		push	eax
		push	0
		push	0
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		push	ecx
		mov	edx, [ebp+arg_0]
		add	edx, 10h
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		push	ecx
		call	_ucnv_fromUnicode_56
		add	esp, 20h
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+18h], 0
		jz	short loc_11A

loc_EA:					; CODE XREF: _ucnv_cbFromUWriteUChars_56+98j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+10h]
		cmp	ecx, [ebp+var_8]
		jz	short loc_11A
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+18h]
		mov	edx, [ebp+arg_C]
		mov	[ecx], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+18h]
		add	ecx, 4
		mov	edx, [ebp+arg_0]
		mov	[edx+18h], ecx
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		jmp	short loc_EA
; ---------------------------------------------------------------------------

loc_11A:				; CODE XREF: _ucnv_cbFromUWriteUChars_56+68j
					; _ucnv_cbFromUWriteUChars_56+73j
		mov	eax, [ebp+arg_10]
		cmp	dword ptr [eax], 0Fh
		jnz	loc_1C8
		mov	[ebp+var_2C], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	dl, [ecx+3Fh]
		mov	[ebp+var_35], dl
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		movsx	edx, [ebp+var_35]
		lea	eax, [ecx+edx+4Ch]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		add	ecx, 6Ch ; 'l'
		mov	[ebp+var_20], ecx
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_20]
		jb	short loc_169
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 5
		jmp	short loc_1C8
; ---------------------------------------------------------------------------

loc_169:				; CODE XREF: _ucnv_cbFromUWriteUChars_56+DCj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+3Fh], 0
		lea	eax, [ebp+var_2C]
		push	eax
		push	0
		push	0
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+var_20]
		push	eax
		lea	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		push	eax
		call	_ucnv_fromUnicode_56
		add	esp, 20h
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		add	ecx, 4Ch ; 'L'
		mov	edx, [ebp+var_14]
		sub	edx, ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	[ecx+3Fh], dl
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_20]
		jnb	short loc_1BF
		cmp	[ebp+var_2C], 0Fh
		jnz	short loc_1C8

loc_1BF:				; CODE XREF: _ucnv_cbFromUWriteUChars_56+137j
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 5

loc_1C8:				; CODE XREF: _ucnv_cbFromUWriteUChars_56+26j
					; _ucnv_cbFromUWriteUChars_56+A0j ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN14
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0FCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ucnv_cbFromUWriteUChars_56 endp

; ---------------------------------------------------------------------------
		align 10h
$LN14		dd 2			; DATA XREF: _ucnv_cbFromUWriteUChars_56+14Co
		dd offset $LN13
$LN13		dd 0FFFFFFECh, 4	; DATA XREF: .text:000001F4o
		dd offset $LN11		; "newTarget"
		dd 0FFFFFFD4h, 4
		dd offset $LN12		; "err2"
$LN12		db 'err2',0             ; DATA XREF: .text:0000020Co
$LN11		db 'newTarget',0        ; DATA XREF: .text:00000200o
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 220h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ucnv_cbFromUWriteSub_56
_ucnv_cbFromUWriteSub_56 proc near

var_E4		= byte ptr -0E4h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0
		jle	short loc_24B
		jmp	loc_32F
; ---------------------------------------------------------------------------

loc_24B:				; CODE XREF: _ucnv_cbFromUWriteSub_56+24j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		movsx	ecx, byte ptr [eax+3Dh]
		mov	[ebp+var_14], ecx
		cmp	[ebp+var_14], 0
		jnz	short loc_269
		jmp	loc_32F
; ---------------------------------------------------------------------------

loc_269:				; CODE XREF: _ucnv_cbFromUWriteSub_56+42j
		cmp	[ebp+var_14], 0
		jge	short loc_2A0
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+14h]
		mov	[ebp+var_20], ecx
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+var_14]
		shl	edx, 1
		mov	eax, [ebp+var_20]
		sub	eax, edx
		push	eax
		lea	ecx, [ebp+var_20]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ucnv_cbFromUWriteUChars_56
		add	esp, 14h
		jmp	loc_32F
; ---------------------------------------------------------------------------

loc_2A0:				; CODE XREF: _ucnv_cbFromUWriteSub_56+4Dj
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+18h]
		mov	edx, [ecx+14h]
		cmp	dword ptr [edx+34h], 0
		jz	short loc_2D7
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+18h]
		mov	edx, [ecx+14h]
		mov	eax, [edx+34h]
		call	eax
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_32F
; ---------------------------------------------------------------------------

loc_2D7:				; CODE XREF: _ucnv_cbFromUWriteSub_56+8Dj
		mov	eax, [ebp+var_8]
		movzx	ecx, byte ptr [eax+42h]
		test	ecx, ecx
		jz	short loc_310
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax+70h]
		cmp	ecx, 0FFh
		jg	short loc_310
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		push	1
		mov	edx, [ebp+var_8]
		add	edx, 42h ; 'B'
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ucnv_cbFromUWriteBytes_56
		add	esp, 14h
		jmp	short loc_32F
; ---------------------------------------------------------------------------

loc_310:				; CODE XREF: _ucnv_cbFromUWriteSub_56+C0j
					; _ucnv_cbFromUWriteSub_56+CFj
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+var_14]
		push	edx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+14h]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ucnv_cbFromUWriteBytes_56
		add	esp, 14h

loc_32F:				; CODE XREF: _ucnv_cbFromUWriteSub_56+26j
					; _ucnv_cbFromUWriteSub_56+44j	...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN12_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ucnv_cbFromUWriteSub_56 endp

; ---------------------------------------------------------------------------
$LN12_0		dd 1			; DATA XREF: _ucnv_cbFromUWriteSub_56+113o
		dd offset $LN11_0
$LN11_0		dd 0FFFFFFE0h, 4	; DATA XREF: .text:00000358o
		dd offset $LN10		; "source"
$LN10		db 'source',0           ; DATA XREF: .text:00000364o
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 370h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ucnv_cbToUWriteUChars_56
_ucnv_cbToUWriteUChars_56 proc near	; CODE XREF: _ucnv_cbToUWriteSub_56+4Ep
					; _ucnv_cbToUWriteSub_56+6Bp

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_10]
		cmp	dword ptr [eax], 0
		jle	short loc_398
		jmp	short loc_3CC
; ---------------------------------------------------------------------------

loc_398:				; CODE XREF: _ucnv_cbToUWriteUChars_56+24j
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_0]
		add	edx, 18h
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		push	ecx
		mov	edx, [ebp+arg_0]
		add	edx, 10h
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		push	eax
		call	_ucnv_toUWriteUChars_56
		add	esp, 20h

loc_3CC:				; CODE XREF: _ucnv_cbToUWriteUChars_56+26j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ucnv_cbToUWriteUChars_56 endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3E0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ucnv_cbToUWriteSub_56
_ucnv_cbToUWriteSub_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		movsx	edx, byte ptr [ecx+3Eh]
		cmp	edx, 1
		jnz	short loc_438
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		movzx	edx, byte ptr [ecx+42h]
		test	edx, edx
		jz	short loc_438
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		push	1
		push	offset ?kSubstituteChar1@?1??ucnv_cbToUWriteSub_56@@9@9	; `ucnv_cbToUWriteSub_56'::`2'::kSubstituteChar1
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ucnv_cbToUWriteUChars_56
		add	esp, 14h
		jmp	short loc_453
; ---------------------------------------------------------------------------

loc_438:				; CODE XREF: _ucnv_cbToUWriteSub_56+2Bj
					; _ucnv_cbToUWriteSub_56+39j
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		push	1
		push	offset ?kSubstituteChar@?1??ucnv_cbToUWriteSub_56@@9@9 ; `ucnv_cbToUWriteSub_56'::`2'::kSubstituteChar
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ucnv_cbToUWriteUChars_56
		add	esp, 14h

loc_453:				; CODE XREF: _ucnv_cbToUWriteSub_56+56j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ucnv_cbToUWriteSub_56 endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ucnv_fromUWriteBytes_56:near
					; CODE XREF: _ucnv_cbFromUWriteBytes_56+54p
		extrn __RTC_CheckEsp:near ; CODE XREF: _ucnv_cbFromUWriteBytes_56+67p
					; _ucnv_cbFromUWriteUChars_56+164p ...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn _ucnv_fromUnicode_56:near	; CODE XREF: _ucnv_cbFromUWriteUChars_56+59p
					; _ucnv_cbFromUWriteUChars_56+112p
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near
					; CODE XREF: _ucnv_cbFromUWriteUChars_56+152p
					; _ucnv_cbFromUWriteSub_56+119p
		extrn _ucnv_toUWriteUChars_56:near
					; CODE XREF: _ucnv_cbToUWriteUChars_56+54p


		end
