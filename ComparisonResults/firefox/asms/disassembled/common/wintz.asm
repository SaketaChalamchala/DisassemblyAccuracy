;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	29BBE5EA725AB7EA935ADFB89EC98270
; Input	CRC32 :	EBC8F036

; File Name   :	D:\compspace\objfiles\firefox\common\wintz.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		public ??_C@_0DJ@JKGGCIEE@SOFTWARE?2Microsoft?2Windows?5NT?2Cu@
; `string'
??_C@_0DJ@JKGGCIEE@SOFTWARE?2Microsoft?2Windows?5NT?2Cu@ db 'SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones\',0
					; DATA XREF: .rdata:00000144o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3Ch
		public ??_C@_0DG@MFEMHAMF@SOFTWARE?2Microsoft?2Windows?2Curre@
; `string'
??_C@_0DG@MFEMHAMF@SOFTWARE?2Microsoft?2Windows?2Curre@	db 'SOFTWARE\Microsoft\Windows\CurrentVersion\Time Zones\',0
					; DATA XREF: .rdata:_TZ_REGKEYo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 74h
		public ??_C@_0DM@COEJKJAG@SOFTWARE?2Microsoft?2Windows?5NT?2Cu@
; `string'
??_C@_0DM@COEJKJAG@SOFTWARE?2Microsoft?2Windows?5NT?2Cu@ db 'SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones\GMT',0
					; DATA XREF: .rdata:0000013Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B0h
		public ??_C@_0DF@JEJGGGGH@SOFTWARE?2Microsoft?2Windows?2Curre@
; `string'
??_C@_0DF@JEJGGGGH@SOFTWARE?2Microsoft?2Windows?2Curre@	db 'SOFTWARE\Microsoft\Windows\CurrentVersion\Time Zones',0
					; DATA XREF: .rdata:_WIN_TYPE_PROBE_REGKEYo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E8h
; CHAR CURRENT_ZONE_REGKEY[]
_CURRENT_ZONE_REGKEY db	'SYSTEM\CurrentControlSet\Control\TimeZoneInformation\',0
					; DATA XREF: _getTZKeyName+35o
		align 10h
; char STANDARD_TIME_REGKEY[]
_STANDARD_TIME_REGKEY db ' Standard Time',0 ; DATA XREF: _openTZRegKey+8Co
		align 10h
; CHAR TZI_REGKEY[]
_TZI_REGKEY	db 'TZI',0              ; DATA XREF: _getTZI+4Co
; CHAR STD_REGKEY[]
_STD_REGKEY	db 'Std',0              ; DATA XREF: _getSTDName+4Bo
; LPCSTR WIN_TYPE_PROBE_REGKEY
_WIN_TYPE_PROBE_REGKEY dd offset ??_C@_0DF@JEJGGGGH@SOFTWARE?2Microsoft?2Windows?2Curre@
					; DATA XREF: _detectWindowsType+43r
					; "SOFTWARE\\Microsoft\\Windows\\CurrentVe"...
		dd offset ??_C@_0DM@COEJKJAG@SOFTWARE?2Microsoft?2Windows?5NT?2Cu@ ; "SOFTWARE\\Microsoft\\Windows NT\\Curren"...
; char *TZ_REGKEY
_TZ_REGKEY	dd offset ??_C@_0DG@MFEMHAMF@SOFTWARE?2Microsoft?2Windows?2Curre@
					; DATA XREF: _openTZRegKey+47r
					; "SOFTWARE\\Microsoft\\Windows\\CurrentVe"...
		dd offset ??_C@_0DJ@JKGGCIEE@SOFTWARE?2Microsoft?2Windows?5NT?2Cu@ ; "SOFTWARE\\Microsoft\\Windows NT\\Curren"...
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 148h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
_gWinType	dd ?			; DATA XREF: _openTZRegKey+28r
					; _openTZRegKey+36w ...
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 14Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_detectWindowsTimeZone
_uprv_detectWindowsTimeZone proc near

var_3F4		= byte ptr -3F4h
var_330		= dword	ptr -330h
var_324		= dword	ptr -324h
var_318		= dword	ptr -318h
var_30C		= dword	ptr -30Ch
var_2FD		= byte ptr -2FDh
var_2F4		= dword	ptr -2F4h
var_2E8		= dword	ptr -2E8h
var_2DC		= dword	ptr -2DCh
VersionInformation= _OSVERSIONINFOA ptr	-2D0h
var_234		= dword	ptr -234h
var_228		= dword	ptr -228h
Dst		= dword	ptr -21Ch
Source		= word ptr -218h
Src		= byte ptr -1D8h
var_184		= byte ptr -184h
Buf2		= byte ptr -168h
var_164		= dword	ptr -164h
var_160		= dword	ptr -160h
Buf1		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= byte ptr -128h
var_118		= byte ptr -118h
var_100		= dword	ptr -100h
var_F4		= byte ptr -0F4h
GeoData		= word ptr -0E8h
var_D8		= dword	ptr -0D8h
Location	= dword	ptr -0CCh
var_C0		= dword	ptr -0C0h
Str		= byte ptr -0B4h
Str2		= byte ptr -84h
Dest		= byte ptr -54h
var_24		= dword	ptr -24h
var_18		= dword	ptr -18h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 3F4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_3F4]
		mov	ecx, 0FDh ; 'ý'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	[ebp+var_C], 0
		mov	[ebp+var_18], 0
		mov	[ebp+var_24], 0
		push	0ACh ; '¬'      ; Size
		push	0		; Val
		lea	eax, [ebp+Dst]
		push	eax		; Dst
		call	_memset
		add	esp, 0Ch
		push	2Ch ; ','       ; Size
		push	0		; Val
		lea	eax, [ebp+Buf1]
		push	eax		; Dst
		call	_memset
		add	esp, 0Ch
		push	2Ch ; ','       ; Size
		push	0		; Val
		lea	eax, [ebp+Buf2]
		push	eax		; Dst
		call	_memset
		add	esp, 0Ch
		mov	esi, esp
		lea	eax, [ebp+Dst]
		push	eax		; lpTimeZoneInformation
		call	dword ptr ds:__imp__GetTimeZoneInformation@4 ; GetTimeZoneInformation(x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+Dst]
		mov	[ebp+Buf1], eax
		push	1
		lea	eax, [ebp+Src]
		push	eax
		call	_uprv_checkValidMemory
		add	esp, 8
		push	10h		; Size
		lea	ecx, [ebp+Src]
		push	ecx		; Src
		lea	edx, [ebp+var_128]
		push	edx		; Dst
		call	_memcpy
		add	esp, 0Ch
		push	1
		lea	eax, [ebp+var_184]
		push	eax
		call	_uprv_checkValidMemory
		add	esp, 8
		push	10h		; Size
		lea	ecx, [ebp+var_184]
		push	ecx		; Src
		lea	edx, [ebp+var_118]
		push	edx		; Dst
		call	_memcpy
		add	esp, 0Ch
		push	28h ; '('       ; Size
		push	0		; Val
		lea	eax, [ebp+Dest]
		push	eax		; Dst
		call	_memset
		add	esp, 0Ch
		mov	esi, esp
		push	28h ; '('       ; MaxCount
		lea	eax, [ebp+Source]
		push	eax		; Source
		lea	ecx, [ebp+Dest]
		push	ecx		; Dest
		call	dword ptr ds:__imp__wcstombs
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+Str], 0
		mov	esi, esp
		push	10h		; GeoClass
		call	dword ptr ds:__imp__GetUserGeoID@4 ; GetUserGeoID(x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+Location],	eax
		mov	esi, esp
		push	0		; LangId
		push	3		; cchData
		lea	eax, [ebp+GeoData]
		push	eax		; lpGeoData
		push	4		; GeoType
		mov	ecx, [ebp+Location]
		push	ecx		; Location
		call	dword ptr ds:__imp__GetGeoInfoW@20 ; GetGeoInfoW(x,x,x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_D8], eax
		lea	eax, [ebp+var_C]
		push	eax
		push	3
		lea	ecx, [ebp+GeoData]
		push	ecx
		push	0
		push	3
		lea	edx, [ebp+var_F4]
		push	edx
		call	_u_strToUTF8_56
		add	esp, 18h
		lea	eax, [ebp+var_C]
		push	eax
		push	offset ??_C@_0N@IHBGPIIF@windowsZones?$AA@ ; "windowsZones"
		push	0
		call	_ures_openDirect_56
		add	esp, 0Ch
		mov	[ebp+var_18], eax
		lea	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+var_18]
		push	ecx
		push	offset ??_C@_0N@GPCNLNJ@mapTimezones?$AA@ ; "mapTimezones"
		mov	edx, [ebp+var_18]
		push	edx
		call	_ures_getByKey_56
		add	esp, 10h
		push	94h ; '”'       ; Size
		push	0		; Val
		lea	eax, [ebp+VersionInformation]
		push	eax		; Dst
		call	_memset
		add	esp, 0Ch
		mov	[ebp+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
		mov	esi, esp
		lea	eax, [ebp+VersionInformation]
		push	eax		; lpVersionInformation
		call	dword ptr ds:__imp__GetVersionExA@4 ; GetVersionExA(x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	[ebp+VersionInformation.dwMajorVersion], 6
		sbb	eax, eax
		add	eax, 1
		mov	[ebp+var_228], eax
		mov	[ebp+var_234], 1
		cmp	[ebp+var_228], 0
		jz	loc_49A
		push	28h ; '('       ; int
		lea	eax, [ebp+Str2]
		push	eax		; lpData
		call	_getTZKeyName
		add	esp, 8
		mov	[ebp+var_100], eax
		cmp	[ebp+var_100], 0
		jnz	loc_49A
		lea	eax, [ebp+var_C]
		push	eax
		push	0
		lea	ecx, [ebp+Str2]
		push	ecx
		mov	edx, [ebp+var_18]
		push	edx
		call	_ures_getByKey_56
		add	esp, 10h
		mov	[ebp+var_2DC], eax
		cmp	[ebp+var_C], 0
		jg	loc_49A
		mov	[ebp+var_2E8], 0
		cmp	[ebp+var_D8], 0
		jz	short loc_3E4
		lea	eax, [ebp+var_C]
		push	eax
		lea	ecx, [ebp+var_C0]
		push	ecx
		lea	edx, [ebp+var_F4]
		push	edx
		mov	eax, [ebp+var_2DC]
		push	eax
		call	_ures_getStringByKey_56
		add	esp, 10h
		mov	[ebp+var_2E8], eax

loc_3E4:				; CODE XREF: _uprv_detectWindowsTimeZone+26Fj
		cmp	[ebp+var_D8], 0
		jz	short loc_3F6
		cmp	[ebp+var_2E8], 0
		jnz	short loc_422

loc_3F6:				; CODE XREF: _uprv_detectWindowsTimeZone+29Fj
		mov	[ebp+var_C], 0
		lea	eax, [ebp+var_C]
		push	eax
		lea	ecx, [ebp+var_C0]
		push	ecx
		push	offset ??_C@_03MMKGDKGA@001?$AA@ ; "001"
		mov	edx, [ebp+var_2DC]
		push	edx
		call	_ures_getStringByKey_56
		add	esp, 10h
		mov	[ebp+var_2E8], eax

loc_422:				; CODE XREF: _uprv_detectWindowsTimeZone+2A8j
		cmp	[ebp+var_C], 0
		jg	short loc_49A
		mov	[ebp+var_2F4], 0

loc_432:				; CODE XREF: _uprv_detectWindowsTimeZone+334j
		mov	eax, [ebp+var_2E8]
		movzx	ecx, word ptr [eax]
		test	ecx, ecx
		jz	short loc_482
		mov	eax, [ebp+var_2E8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 20h ; ' '
		jz	short loc_482
		mov	eax, [ebp+var_2F4]
		mov	ecx, [ebp+var_2E8]
		mov	dl, [ecx]
		mov	[ebp+eax+Str], dl
		mov	eax, [ebp+var_2F4]
		add	eax, 1
		mov	[ebp+var_2F4], eax
		mov	ecx, [ebp+var_2E8]
		add	ecx, 2
		mov	[ebp+var_2E8], ecx
		jmp	short loc_432
; ---------------------------------------------------------------------------

loc_482:				; CODE XREF: _uprv_detectWindowsTimeZone+2F1j
					; _uprv_detectWindowsTimeZone+2FFj
		mov	eax, [ebp+var_2F4]
		mov	[ebp+eax+Str], 0
		mov	[ebp+var_234], 0

loc_49A:				; CODE XREF: _uprv_detectWindowsTimeZone+20Bj
					; _uprv_detectWindowsTimeZone+22Fj ...
		cmp	[ebp+var_234], 0
		jz	loc_6E1

loc_4A7:				; CODE XREF: _uprv_detectWindowsTimeZone:loc_6DCj
		cmp	[ebp+var_C], 0
		jg	loc_6E1
		mov	eax, [ebp+var_18]
		push	eax
		call	_ures_hasNext_56
		add	esp, 4
		movsx	ecx, al
		test	ecx, ecx
		jz	loc_6E1
		mov	[ebp+var_2FD], 0
		lea	eax, [ebp+var_C]
		push	eax
		push	0
		mov	ecx, [ebp+var_18]
		push	ecx
		call	_ures_getNextResource_56
		add	esp, 0Ch
		mov	[ebp+var_318], eax
		cmp	[ebp+var_C], 0
		jle	short loc_4F2
		jmp	loc_6E1
; ---------------------------------------------------------------------------

loc_4F2:				; CODE XREF: _uprv_detectWindowsTimeZone+39Fj
		mov	eax, [ebp+var_318]
		push	eax
		call	_ures_getKey_56
		add	esp, 4
		mov	[ebp+var_30C], eax
		lea	eax, [ebp+Buf2]
		push	eax		; lpData
		mov	ecx, [ebp+var_30C]
		push	ecx		; Source
		call	_getTZI
		add	esp, 8
		mov	[ebp+var_100], eax
		cmp	[ebp+var_100], 0
		jnz	loc_6C0
		mov	eax, [ebp+var_164]
		mov	[ebp+var_130], eax
		mov	eax, [ebp+var_160]
		mov	[ebp+var_12C], eax
		push	2Ch ; ','       ; Size
		lea	eax, [ebp+Buf2]
		push	eax		; Buf2
		lea	ecx, [ebp+Buf1]
		push	ecx		; Buf1
		call	_memcmp
		add	esp, 0Ch
		test	eax, eax
		jnz	loc_6C0
		mov	[ebp+var_324], 0
		cmp	[ebp+var_D8], 0
		jz	short loc_5A2
		lea	eax, [ebp+var_C]
		push	eax
		lea	ecx, [ebp+var_C0]
		push	ecx
		lea	edx, [ebp+var_F4]
		push	edx
		mov	eax, [ebp+var_318]
		push	eax
		call	_ures_getStringByKey_56
		add	esp, 10h
		mov	[ebp+var_324], eax

loc_5A2:				; CODE XREF: _uprv_detectWindowsTimeZone+42Dj
		cmp	[ebp+var_D8], 0
		jz	short loc_5B4
		cmp	[ebp+var_324], 0
		jnz	short loc_5E0

loc_5B4:				; CODE XREF: _uprv_detectWindowsTimeZone+45Dj
		mov	[ebp+var_C], 0
		lea	eax, [ebp+var_C]
		push	eax
		lea	ecx, [ebp+var_C0]
		push	ecx
		push	offset ??_C@_03MMKGDKGA@001?$AA@ ; "001"
		mov	edx, [ebp+var_318]
		push	edx
		call	_ures_getStringByKey_56
		add	esp, 10h
		mov	[ebp+var_324], eax

loc_5E0:				; CODE XREF: _uprv_detectWindowsTimeZone+466j
		cmp	[ebp+var_C], 0
		jg	loc_6C0
		push	28h ; '('       ; Size
		push	0		; Val
		lea	eax, [ebp+Str2]
		push	eax		; Dst
		call	_memset
		add	esp, 0Ch
		push	28h ; '('       ; int
		lea	eax, [ebp+Str2]
		push	eax		; lpData
		mov	ecx, [ebp+var_30C]
		push	ecx		; Source
		call	_getSTDName
		add	esp, 0Ch
		mov	[ebp+var_100], eax
		cmp	[ebp+var_100], 0
		jnz	short loc_642
		lea	eax, [ebp+Str2]
		push	eax		; Str2
		lea	ecx, [ebp+Dest]
		push	ecx		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_642
		mov	[ebp+var_2FD], 1

loc_642:				; CODE XREF: _uprv_detectWindowsTimeZone+4D6j
					; _uprv_detectWindowsTimeZone+4EDj
		movsx	eax, [ebp+var_2FD]
		test	eax, eax
		jnz	short loc_658
		movsx	eax, [ebp+Str]
		test	eax, eax
		jnz	short loc_6C0

loc_658:				; CODE XREF: _uprv_detectWindowsTimeZone+4FFj
		mov	[ebp+var_330], 0

loc_662:				; CODE XREF: _uprv_detectWindowsTimeZone+564j
		mov	eax, [ebp+var_324]
		movzx	ecx, word ptr [eax]
		test	ecx, ecx
		jz	short loc_6B2
		mov	eax, [ebp+var_324]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 20h ; ' '
		jz	short loc_6B2
		mov	eax, [ebp+var_330]
		mov	ecx, [ebp+var_324]
		mov	dl, [ecx]
		mov	[ebp+eax+Str], dl
		mov	eax, [ebp+var_330]
		add	eax, 1
		mov	[ebp+var_330], eax
		mov	ecx, [ebp+var_324]
		add	ecx, 2
		mov	[ebp+var_324], ecx
		jmp	short loc_662
; ---------------------------------------------------------------------------

loc_6B2:				; CODE XREF: _uprv_detectWindowsTimeZone+521j
					; _uprv_detectWindowsTimeZone+52Fj
		mov	eax, [ebp+var_330]
		mov	[ebp+eax+Str], 0

loc_6C0:				; CODE XREF: _uprv_detectWindowsTimeZone+3DEj
					; _uprv_detectWindowsTimeZone+416j ...
		mov	eax, [ebp+var_318]
		push	eax
		call	_ures_close_56
		add	esp, 4
		movsx	eax, [ebp+var_2FD]
		test	eax, eax
		jz	short loc_6DC
		jmp	short loc_6E1
; ---------------------------------------------------------------------------

loc_6DC:				; CODE XREF: _uprv_detectWindowsTimeZone+58Cj
		jmp	loc_4A7
; ---------------------------------------------------------------------------

loc_6E1:				; CODE XREF: _uprv_detectWindowsTimeZone+355j
					; _uprv_detectWindowsTimeZone+35Fj ...
		movsx	eax, [ebp+Str]
		test	eax, eax
		jz	short loc_731
		lea	eax, [ebp+Str]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		mov	[ebp+var_C0], eax
		push	1
		mov	eax, [ebp+var_C0]
		add	eax, 1
		push	eax
		call	_uprv_calloc_56
		add	esp, 8
		mov	[ebp+var_24], eax
		cmp	[ebp+var_24], 0
		jz	short loc_731
		lea	eax, [ebp+Str]
		push	eax		; Source
		mov	ecx, [ebp+var_24]
		push	ecx		; Dest
		call	_strcpy
		add	esp, 8

loc_731:				; CODE XREF: _uprv_detectWindowsTimeZone+59Ej
					; _uprv_detectWindowsTimeZone+5D0j
		mov	eax, [ebp+var_18]
		push	eax
		call	_ures_close_56
		add	esp, 4
		mov	eax, [ebp+var_24]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN43
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 3F4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uprv_detectWindowsTimeZone endp

; ---------------------------------------------------------------------------
		align 10h
$LN43		dd 0Bh			; DATA XREF: _uprv_detectWindowsTimeZone+5F8o
		dd offset $LN42
$LN42		dd 0FFFFFFF4h, 4	; DATA XREF: .text:00000774o
		dd offset $LN31		; "status"
		dd 0FFFFFFACh, 28h
		dd offset $LN32		; "apiStdName"
		dd 0FFFFFF7Ch, 28h
		dd offset $LN33		; "regStdName"
		dd 0FFFFFF4Ch, 28h
		dd offset $LN34		; "tmpid"
		dd 0FFFFFF40h, 4
		dd offset $LN35		; "len"
		dd 0FFFFFF18h, 6
		dd offset $LN36		; "ISOcodeW"
		dd 0FFFFFF0Ch, 3
		dd offset $LN37		; "ISOcodeA"
		db 0CCh
		db 0FEh, 2 dup(0FFh)
		dd offset ??_C@_0DJ@JKGGCIEE@SOFTWARE?2Microsoft?2Windows?5NT?2Cu@+2Ch ; "\\Time Zones\\"
		dd offset $LN38		; "tziKey"
		dd 0FFFFFE98h, 2Ch
		dd offset $LN39		; "tziReg"
		dd 0FFFFFDE4h, 0ACh
		dd offset $LN40		; "apiTZI"
		dd 0FFFFFD30h, 94h
		dd offset $LN41		; "osVerInfo"
$LN41		db 'osVerInfo',0        ; DATA XREF: .text:000007F8o
$LN40		db 'apiTZI',0           ; DATA XREF: .text:000007ECo
$LN39		db 'tziReg',0           ; DATA XREF: .text:000007E0o
$LN38		db 'tziKey',0           ; DATA XREF: .text:000007D4o
$LN37		db 'ISOcodeA',0         ; DATA XREF: .text:000007C8o
$LN36		db 'ISOcodeW',0         ; DATA XREF: .text:000007BCo
$LN35		db 'len',0              ; DATA XREF: .text:000007B0o
$LN34		db 'tmpid',0            ; DATA XREF: .text:000007A4o
$LN33		db 'regStdName',0       ; DATA XREF: .text:00000798o
$LN32		db 'apiStdName',0       ; DATA XREF: .text:0000078Co
$LN31		db 'status',0           ; DATA XREF: .text:00000780o
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 854h
		public ??_C@_03MMKGDKGA@001?$AA@
; `string'
??_C@_03MMKGDKGA@001?$AA@ db '001',0    ; DATA XREF: _uprv_detectWindowsTimeZone+2BCo
					; _uprv_detectWindowsTimeZone+47Ao
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 858h
		public ??_C@_0N@GPCNLNJ@mapTimezones?$AA@
; `string'
??_C@_0N@GPCNLNJ@mapTimezones?$AA@ db 'mapTimezones',0
					; DATA XREF: _uprv_detectWindowsTimeZone+1A1o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 868h
		public ??_C@_0N@IHBGPIIF@windowsZones?$AA@
; `string'
??_C@_0N@IHBGPIIF@windowsZones?$AA@ db 'windowsZones',0
					; DATA XREF: _uprv_detectWindowsTimeZone+187o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 878h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 87Ch
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 880h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl getTZI(char *Source, LPBYTE lpData)
_getTZI		proc near		; CODE XREF: _uprv_detectWindowsTimeZone+3C9p

var_E4		= byte ptr -0E4h
hKey		= dword	ptr -20h
var_14		= dword	ptr -14h
cbData		= dword	ptr -8
Source		= dword	ptr  8
lpData		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+cbData], 2Ch ; ','
		mov	eax, [ebp+Source]
		push	eax		; Source
		lea	ecx, [ebp+hKey]
		push	ecx		; phkResult
		call	_openTZRegKey
		add	esp, 8
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	short loc_8E5
		mov	esi, esp
		lea	eax, [ebp+cbData]
		push	eax		; lpcbData
		mov	ecx, [ebp+lpData]
		push	ecx		; lpData
		push	0		; lpType
		push	0		; lpReserved
		push	offset _TZI_REGKEY ; "TZI"
		mov	edx, [ebp+hKey]
		push	edx		; hKey
		call	dword ptr ds:__imp__RegQueryValueExA@24	; RegQueryValueExA(x,x,x,x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], eax

loc_8E5:				; CODE XREF: _getTZI+3Cj
		mov	esi, esp
		mov	eax, [ebp+hKey]
		push	eax		; hKey
		call	dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_14]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_getTZI		endp

; ---------------------------------------------------------------------------
$LN7		dd 2			; DATA XREF: _getTZI+7Fo
		dd offset $LN6
$LN6		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00000924o
		dd offset $LN4		; "cbData"
		dd 0FFFFFFE0h, 4
		dd offset $LN5		; "hkey"
$LN5		db 'hkey',0             ; DATA XREF: .text:0000093Co
$LN4		db 'cbData',0           ; DATA XREF: .text:00000930o
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 94Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl openTZRegKey(PHKEY phkResult, char *Source)
_openTZRegKey	proc near		; CODE XREF: _getTZI+2Dp
					; _getSTDName+2Cp

var_160		= byte ptr -160h
var_9C		= dword	ptr -9Ch
var_90		= dword	ptr -90h
var_84		= dword	ptr -84h
Dest		= byte ptr -78h
var_4		= dword	ptr -4
phkResult	= dword	ptr  8
Source		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 160h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_160]
		mov	ecx, 58h ; 'X'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		cmp	ds:_gWinType, 0
		jg	short loc_987
		call	_detectWindowsType
		mov	ds:_gWinType, eax

loc_987:				; CODE XREF: _openTZRegKey+2Fj
		xor	eax, eax
		cmp	ds:_gWinType, 1
		setnz	al
		mov	ecx, ds:_TZ_REGKEY[eax*4]
		push	ecx		; Source
		lea	edx, [ebp+Dest]
		push	edx		; Dest
		call	_strcpy
		add	esp, 8
		lea	eax, [ebp+Dest]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		lea	ecx, [ebp+eax+Dest]
		mov	[ebp+var_84], ecx
		mov	eax, [ebp+Source]
		push	eax		; Source
		lea	ecx, [ebp+Dest]
		push	ecx		; Dest
		call	_strcat
		add	esp, 8
		cmp	ds:_gWinType, 1
		jnz	short loc_A09
		mov	esi, esp
		push	offset _STANDARD_TIME_REGKEY ; " Standard Time"
		lea	eax, [ebp+Dest]
		push	eax		; Str
		call	dword ptr ds:__imp__strstr
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_9C], eax
		cmp	[ebp+var_9C], 0
		jz	short loc_A09
		mov	eax, [ebp+var_9C]
		mov	byte ptr [eax],	0

loc_A09:				; CODE XREF: _openTZRegKey+88j
					; _openTZRegKey+B2j
		mov	esi, esp
		mov	eax, [ebp+phkResult]
		push	eax		; phkResult
		push	1		; samDesired
		push	0		; ulOptions
		lea	ecx, [ebp+Dest]
		push	ecx		; lpSubKey
		push	80000002h	; hKey
		call	dword ptr ds:__imp__RegOpenKeyExA@20 ; RegOpenKeyExA(x,x,x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_90], eax
		mov	eax, [ebp+var_90]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN8
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 160h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_openTZRegKey	endp

; ---------------------------------------------------------------------------
$LN8		dd 1			; DATA XREF: _openTZRegKey+EDo
		dd offset $LN7_0
$LN7_0		db 88h,	0FFh		; DATA XREF: .text:00000A68o
		dw 0FFFFh
		dd offset ??_C@_0DG@MFEMHAMF@SOFTWARE?2Microsoft?2Windows?2Curre@+32h ;	"es\\"
		dd offset $LN6_0	; "subKeyName"
$LN6_0		db 'subKeyName',0       ; DATA XREF: .text:00000A74o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A84h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_detectWindowsType proc	near		; CODE XREF: _openTZRegKey+31p

var_E4		= byte ptr -0E4h
phkResult	= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		jmp	short loc_AB4
; ---------------------------------------------------------------------------

loc_AAB:				; CODE XREF: _detectWindowsType:loc_AFFj
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax

loc_AB4:				; CODE XREF: _detectWindowsType+25j
		cmp	[ebp+var_8], 2
		jge	short loc_B01
		mov	esi, esp
		lea	eax, [ebp+phkResult]
		push	eax		; phkResult
		push	1		; samDesired
		push	0		; ulOptions
		mov	ecx, [ebp+var_8]
		mov	edx, ds:_WIN_TYPE_PROBE_REGKEY[ecx*4]
		push	edx		; lpSubKey
		push	80000002h	; hKey
		call	dword ptr ds:__imp__RegOpenKeyExA@20 ; RegOpenKeyExA(x,x,x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], eax
		mov	esi, esp
		mov	eax, [ebp+phkResult]
		push	eax		; hKey
		call	dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	[ebp+var_14], 0
		jnz	short loc_AFF
		jmp	short loc_B01
; ---------------------------------------------------------------------------

loc_AFF:				; CODE XREF: _detectWindowsType+77j
		jmp	short loc_AAB
; ---------------------------------------------------------------------------

loc_B01:				; CODE XREF: _detectWindowsType+34j
					; _detectWindowsType+79j
		mov	eax, [ebp+var_8]
		add	eax, 1
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN9
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_detectWindowsType endp

; ---------------------------------------------------------------------------
$LN9		dd 1			; DATA XREF: _detectWindowsType+87o
		dd offset $LN8_0
$LN8_0		dd 0FFFFFFE0h, 4	; DATA XREF: .text:00000B30o
		dd offset $LN7_1	; "hkey"
$LN7_1		db 'hkey',0             ; DATA XREF: .text:00000B3Co
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0B48h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl getSTDName(char *Source, LPBYTE lpData, int)
_getSTDName	proc near		; CODE XREF: _uprv_detectWindowsTimeZone+4C1p

var_E4		= byte ptr -0E4h
hKey		= dword	ptr -20h
var_14		= dword	ptr -14h
cbData		= dword	ptr -8
Source		= dword	ptr  8
lpData		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		mov	[ebp+cbData], eax
		mov	eax, [ebp+Source]
		push	eax		; Source
		lea	ecx, [ebp+hKey]
		push	ecx		; phkResult
		call	_openTZRegKey
		add	esp, 8
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	short loc_BAC
		mov	esi, esp
		lea	eax, [ebp+cbData]
		push	eax		; lpcbData
		mov	ecx, [ebp+lpData]
		push	ecx		; lpData
		push	0		; lpType
		push	0		; lpReserved
		push	offset _STD_REGKEY ; "Std"
		mov	edx, [ebp+hKey]
		push	edx		; hKey
		call	dword ptr ds:__imp__RegQueryValueExA@24	; RegQueryValueExA(x,x,x,x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], eax

loc_BAC:				; CODE XREF: _getSTDName+3Bj
		mov	esi, esp
		mov	eax, [ebp+hKey]
		push	eax		; hKey
		call	dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_14]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7_2
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_getSTDName	endp

; ---------------------------------------------------------------------------
		align 4
$LN7_2		dd 2			; DATA XREF: _getSTDName+7Eo
		dd offset $LN6_1
$LN6_1		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00000BECo
		dd offset $LN4_0	; "cbData"
		dd 0FFFFFFE0h, 4
		dd offset $LN5_0	; "hkey"
$LN5_0		db 'hkey',0             ; DATA XREF: .text:00000C04o
$LN4_0		db 'cbData',0           ; DATA XREF: .text:00000BF8o
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C14h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl getTZKeyName(LPBYTE lpData, int)
_getTZKeyName	proc near		; CODE XREF: _uprv_detectWindowsTimeZone+21Ap

var_E4		= byte ptr -0E4h
cbData		= dword	ptr -20h
var_14		= dword	ptr -14h
phkResult	= dword	ptr -8
lpData		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_14], 0
		mov	eax, [ebp+arg_4]
		mov	[ebp+cbData], eax
		mov	esi, esp
		lea	eax, [ebp+phkResult]
		push	eax		; phkResult
		push	1		; samDesired
		push	0		; ulOptions
		push	offset _CURRENT_ZONE_REGKEY ; "SYSTEM\\CurrentControlSet\\Control\\Tim"...
		push	80000002h	; hKey
		call	dword ptr ds:__imp__RegOpenKeyExA@20 ; RegOpenKeyExA(x,x,x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jnz	short loc_C8B
		mov	esi, esp
		lea	eax, [ebp+cbData]
		push	eax		; lpcbData
		mov	ecx, [ebp+lpData]
		push	ecx		; lpData
		push	0		; lpType
		push	0		; lpReserved
		push	offset ??_C@_0BA@GCKJIEGO@TimeZoneKeyName?$AA@ ; "TimeZoneKeyName"
		mov	edx, [ebp+phkResult]
		push	edx		; hKey
		call	dword ptr ds:__imp__RegQueryValueExA@24	; RegQueryValueExA(x,x,x,x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], eax

loc_C8B:				; CODE XREF: _getTZKeyName+4Ej
		mov	eax, [ebp+var_14]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7_3
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_getTZKeyName	endp

; ---------------------------------------------------------------------------
		align 4
$LN7_3		dd 2			; DATA XREF: _getTZKeyName+7Eo
		dd offset $LN6_2
$LN6_2		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00000CB8o
		dd offset $LN4_1	; "hkey"
		dd 0FFFFFFE0h, 4
		dd offset $LN5_1	; "cbData"
$LN5_1		db 'cbData',0           ; DATA XREF: .text:00000CD0o
$LN4_1		db 'hkey',0             ; DATA XREF: .text:00000CC4o
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CE0h
		public ??_C@_0BA@GCKJIEGO@TimeZoneKeyName?$AA@
; CHAR `string'[]
??_C@_0BA@GCKJIEGO@TimeZoneKeyName?$AA@	db 'TimeZoneKeyName',0
					; DATA XREF: _getTZKeyName+5Eo
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; char *__cdecl	strcpy(char *Dest, const char *Source)
		extrn _strcpy:near	; CODE XREF: _uprv_detectWindowsTimeZone+5DDp
					; _openTZRegKey+53p
		extrn _uprv_calloc_56:near ; CODE XREF:	_uprv_detectWindowsTimeZone+5C1p
; size_t __cdecl strlen(const char *Str)
		extrn _strlen:near	; CODE XREF: _uprv_detectWindowsTimeZone+5A7p
					; _openTZRegKey+5Fp
		extrn _ures_close_56:near ; CODE XREF: _uprv_detectWindowsTimeZone+57Bp
					; _uprv_detectWindowsTimeZone+5E9p
; int __cdecl strcmp(const char	*Str1, const char *Str2)
		extrn _strcmp:near	; CODE XREF: _uprv_detectWindowsTimeZone+4E3p
; int __cdecl memcmp(const void	*Buf1, const void *Buf2, size_t	Size)
		extrn _memcmp:near	; CODE XREF: _uprv_detectWindowsTimeZone+40Cp
		extrn _ures_getKey_56:near ; CODE XREF:	_uprv_detectWindowsTimeZone+3ADp
		extrn _ures_getNextResource_56:near
					; CODE XREF: _uprv_detectWindowsTimeZone+38Dp
		extrn _ures_hasNext_56:near ; CODE XREF: _uprv_detectWindowsTimeZone+369p
		extrn _ures_getStringByKey_56:near
					; CODE XREF: _uprv_detectWindowsTimeZone+28Ap
					; _uprv_detectWindowsTimeZone+2C8p ...
; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA	lpVersionInformation)
		extrn __imp__GetVersionExA@4:near
					; CODE XREF: _uprv_detectWindowsTimeZone+1DBp
					; DATA XREF: _uprv_detectWindowsTimeZone+1DBr
		extrn _ures_getByKey_56:near ; CODE XREF: _uprv_detectWindowsTimeZone+1AAp
					; _uprv_detectWindowsTimeZone+246p
		extrn _ures_openDirect_56:near ; CODE XREF: _uprv_detectWindowsTimeZone+18Ep
		extrn _u_strToUTF8_56:near ; CODE XREF:	_uprv_detectWindowsTimeZone+17Bp
; int __stdcall	GetGeoInfoW(GEOID Location, GEOTYPE GeoType, LPWSTR lpGeoData, int cchData, LANGID LangId)
		extrn __imp__GetGeoInfoW@20:near
					; CODE XREF: _uprv_detectWindowsTimeZone+150p
					; DATA XREF: _uprv_detectWindowsTimeZone+150r
; GEOID	__stdcall GetUserGeoID(GEOCLASS	GeoClass)
		extrn __imp__GetUserGeoID@4:near
					; CODE XREF: _uprv_detectWindowsTimeZone+127p
					; DATA XREF: _uprv_detectWindowsTimeZone+127r
; size_t __cdecl _wcstombs(char	*Dest, const wchar_t *Source, size_t MaxCount)
		extrn __imp__wcstombs:near ; CODE XREF:	_uprv_detectWindowsTimeZone+10Cp
					; DATA XREF: _uprv_detectWindowsTimeZone+10Cr
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _uprv_detectWindowsTimeZone+BCp
					; _uprv_detectWindowsTimeZone+E5p
		extrn _uprv_checkValidMemory:near
					; CODE XREF: _uprv_detectWindowsTimeZone+A4p
					; _uprv_detectWindowsTimeZone+CDp
; DWORD	__stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
		extrn __imp__GetTimeZoneInformation@4:near
					; CODE XREF: _uprv_detectWindowsTimeZone+82p
					; DATA XREF: _uprv_detectWindowsTimeZone+82r
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _uprv_detectWindowsTimeZone+4Bp
					; _uprv_detectWindowsTimeZone+5Ep ...
		extrn ___security_cookie:near ;	DATA XREF: _uprv_detectWindowsTimeZone+1Er
					; _openTZRegKey+1Er
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _uprv_detectWindowsTimeZone+60Dp
					; _openTZRegKey+102p
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near
					; CODE XREF: _uprv_detectWindowsTimeZone+5FEp
					; _getTZI+85p ...
		extrn __RTC_CheckEsp:near ; CODE XREF: _uprv_detectWindowsTimeZone+8Ap
					; _uprv_detectWindowsTimeZone+117p ...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; LSTATUS __stdcall RegCloseKey(HKEY hKey)
		extrn __imp__RegCloseKey@4:near	; CODE XREF: _getTZI+6Bp
					; _detectWindowsType+66p ...
; LSTATUS __stdcall RegQueryValueExA(HKEY hKey,	LPCSTR lpValueName, LPDWORD lpReserved,	LPDWORD	lpType,	LPBYTE lpData, LPDWORD lpcbData)
		extrn __imp__RegQueryValueExA@24:near ;	CODE XREF: _getTZI+55p
					; _getSTDName+54p ...
; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY	phkResult)
		extrn __imp__RegOpenKeyExA@20:near ; CODE XREF:	_openTZRegKey+D0p
					; _detectWindowsType+50p ...
; char *__cdecl	_strstr(const char *Str, const char *SubStr)
		extrn __imp__strstr:near ; CODE	XREF: _openTZRegKey+95p
					; DATA XREF: _openTZRegKey+95r
; char *__cdecl	strcat(char *Dest, const char *Source)
		extrn _strcat:near	; CODE XREF: _openTZRegKey+79p


		end
