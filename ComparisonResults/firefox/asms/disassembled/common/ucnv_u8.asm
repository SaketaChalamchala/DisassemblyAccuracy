;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	6D292555151BDE08E40DA0C228840161
; Input	CRC32 :	0E178037

; File Name   :	D:\compspace\objfiles\firefox\common\ucnv_u8.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
_offsetsFromUTF8 dd 0			; DATA XREF: _ucnv_toUnicode_UTF8+18Er
					; _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+1E6r ...
		align 8
		dd 3080h, 0E2080h, 3C82080h, 0FA082080h, 82082080h
_utf8_minChar32	dd 0			; DATA XREF: _ucnv_toUnicode_UTF8+1B7r
					; _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+218r ...
		dd 0
		dd offset dword_80
		dd offset loc_800
		dd 10000h, 2 dup(0FFFFFFFFh)
_bytesFromUTF8	db 1			; DATA XREF: _ucnv_toUnicode_UTF8+100r
					; _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+133r ...
		db 3 dup(1)
dword_3C	dd 11h dup(1010101h)
dword_80	dd 0Eh dup(1010101h), 0Bh dup(0) ; DATA	XREF: .rdata:00000024o
					; .rdata:00000140o
dword_E4	dd 5 dup(0)		; DATA XREF: .rdata:__UTF8Data_56o
					; .rdata:__CESU8Data_56o
		dd 8 dup(2020202h), 4 dup(3030303h), 2 dup(4040404h), 5050505h
		dd 606h
_utf8_minLegal	dd 0			; DATA XREF: _ucnv_UTF8FromUTF8+5EEr
		align 10h
		dd offset dword_80
		dd offset loc_800
		dd 10000h
_utf8_offsets	dd 0			; DATA XREF: _ucnv_UTF8FromUTF8+5DDr
		dd 0
		dd 3080h, 0E2080h
dword_15C	dd 3C82080h		; DATA XREF: _ucnv_UTF8FromUTF8+626r
		dd 2 dup(0)
__UTF8Impl	dd 4, 5	dup(0)		; DATA XREF: .rdata:0000022Co
		dd offset _ucnv_toUnicode_UTF8
		dd offset _ucnv_toUnicode_UTF8_OFFSETS_LOGIC
		dd offset _ucnv_fromUnicode_UTF8_56
		dd offset _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56
		dd offset _ucnv_getNextUChar_UTF8
		dd 4 dup(0)
		dd offset _ucnv_getNonSurrogateUnicodeSet_56
		dd offset _ucnv_UTF8FromUTF8
		dd offset _ucnv_UTF8FromUTF8
__UTF8StaticData dd offset dword_3C+28h	; DATA XREF: .rdata:00000224o
aUtf8		db 'UTF-8',0
		align 4
		dd 0Dh dup(0)
		dd offset loc_4B8
		dd 3010400h, 0BDBFEFh, 3, 6 dup(0)
		public __UTF8Data_56
__UTF8Data_56	dd offset dword_E4
		dd 0FFFFFFFFh, 0
		dd offset __UTF8StaticData
		dd 0
		dd offset __UTF8Impl
		align 100h
__CESU8Impl	dd 1Fh,	5 dup(0)	; DATA XREF: .rdata:000003C4o
		dd offset _ucnv_toUnicode_UTF8
		dd offset _ucnv_toUnicode_UTF8_OFFSETS_LOGIC
		dd offset _ucnv_fromUnicode_UTF8_56
		dd offset _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56
		dd 5 dup(0)
		dd offset _ucnv_getCompleteUnicodeSet_56
		dd 2 dup(0)
__CESU8StaticData dd offset dword_3C+28h ; DATA	XREF: .rdata:000003BCo
aCesu8		db 'CESU-8',0
		align 4
		dd 0Dh dup(0)
		dd 24B8h, 3011FFFh, 0BDBFEFh, 3, 6 dup(0)
		public __CESU8Data_56
__CESU8Data_56	dd offset dword_E4	; DATA XREF: _hasCESU8Data+21o
		dd 0FFFFFFFFh, 0
		dd offset __CESU8StaticData
		dd 0
		dd offset __CESU8Impl
		dd 33h dup(0)
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 494h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ucnv_toUnicode_UTF8 proc near		; DATA XREF: .rdata:00000180o
					; .rdata:00000318o

var_148		= dword	ptr -148h
var_80		= dword	ptr -80h
var_74		= dword	ptr -74h
var_68		= dword	ptr -68h
var_5C		= dword	ptr -5Ch
var_4D		= byte ptr -4Dh
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 148h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_148]
		mov	ecx, 52h ; 'R'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]

loc_4B8:				; DATA XREF: .rdata:000001F0o
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+10h]
		mov	[ebp+var_20], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	[ebp+var_2C], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		mov	[ebp+var_38], ecx
		mov	eax, [ebp+var_8]
		add	eax, 25h ; '%'
		mov	[ebp+var_44], eax
		mov	eax, [ebp+var_8]
		push	eax
		call	_hasCESU8Data
		add	esp, 4
		mov	[ebp+var_4D], al
		mov	[ebp+var_68], 0
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+2Ch], 0
		jz	short loc_53E
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+var_38]
		jnb	short loc_53E
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+30h]
		mov	[ebp+var_80], ecx
		mov	eax, [ebp+var_8]
		movsx	ecx, byte ptr [eax+24h]
		mov	[ebp+var_74], ecx
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax+24h], 0
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+2Ch]
		mov	[ebp+var_5C], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+2Ch], 0
		jmp	short $morebytes$8663
; ---------------------------------------------------------------------------

loc_53E:				; CODE XREF: _ucnv_toUnicode_UTF8+71j
					; _ucnv_toUnicode_UTF8+79j ...
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_2C]
		jnb	$donefornow$8679
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+var_38]
		jnb	$donefornow$8679
		mov	eax, [ebp+var_14]
		movzx	ecx, byte ptr [eax]
		mov	[ebp+var_5C], ecx
		mov	edx, [ebp+var_14]
		add	edx, 1
		mov	[ebp+var_14], edx
		cmp	[ebp+var_5C], 80h ; '€'
		jnb	short loc_589
		mov	eax, [ebp+var_20]
		mov	cx, word ptr [ebp+var_5C]
		mov	[eax], cx
		mov	edx, [ebp+var_20]
		add	edx, 2
		mov	[ebp+var_20], edx
		jmp	loc_73B
; ---------------------------------------------------------------------------

loc_589:				; CODE XREF: _ucnv_toUnicode_UTF8+DBj
		mov	eax, [ebp+var_44]
		mov	cl, byte ptr [ebp+var_5C]
		mov	[eax], cl
		mov	eax, [ebp+var_5C]
		movsx	ecx, _bytesFromUTF8[eax]
		mov	[ebp+var_80], ecx
		mov	[ebp+var_74], 1

$morebytes$8663:			; CODE XREF: _ucnv_toUnicode_UTF8+A8j
					; _ucnv_toUnicode_UTF8:loc_61Aj
		mov	eax, [ebp+var_74]
		cmp	eax, [ebp+var_80]
		jge	short loc_61C
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_2C]
		jnb	short loc_5FA
		mov	eax, [ebp+var_14]
		movzx	ecx, byte ptr [eax]
		mov	[ebp+var_68], ecx
		mov	edx, [ebp+var_44]
		add	edx, [ebp+var_74]
		mov	al, byte ptr [ebp+var_68]
		mov	[edx], al
		mov	eax, [ebp+var_68]
		and	eax, 0C0h
		cmp	eax, 80h ; '€'
		jz	short loc_5DA
		jmp	short loc_61C
; ---------------------------------------------------------------------------

loc_5DA:				; CODE XREF: _ucnv_toUnicode_UTF8+142j
		mov	eax, [ebp+var_5C]
		shl	eax, 6
		add	eax, [ebp+var_68]
		mov	[ebp+var_5C], eax
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_74]
		add	eax, 1
		mov	[ebp+var_74], eax
		jmp	short loc_61A
; ---------------------------------------------------------------------------

loc_5FA:				; CODE XREF: _ucnv_toUnicode_UTF8+11Fj
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_5C]
		mov	[eax+2Ch], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_80]
		mov	[eax+30h], ecx
		mov	eax, [ebp+var_8]
		mov	cl, byte ptr [ebp+var_74]
		mov	[eax+24h], cl
		jmp	$donefornow$8679
; ---------------------------------------------------------------------------

loc_61A:				; CODE XREF: _ucnv_toUnicode_UTF8+164j
		jmp	short $morebytes$8663
; ---------------------------------------------------------------------------

loc_61C:				; CODE XREF: _ucnv_toUnicode_UTF8+117j
					; _ucnv_toUnicode_UTF8+144j
		mov	eax, [ebp+var_80]
		mov	ecx, [ebp+var_5C]
		sub	ecx, _offsetsFromUTF8[eax*4]
		mov	[ebp+var_5C], ecx
		mov	eax, [ebp+var_74]
		cmp	eax, [ebp+var_80]
		jnz	loc_727
		cmp	[ebp+var_5C], 10FFFFh
		ja	loc_727
		mov	eax, [ebp+var_74]
		mov	ecx, [ebp+var_5C]
		cmp	ecx, _utf8_minChar32[eax*4]
		jb	loc_727
		movsx	eax, [ebp+var_4D]
		test	eax, eax
		jz	short loc_671
		xor	ecx, ecx
		cmp	[ebp+var_74], 3
		setle	cl
		mov	[ebp+var_148], ecx
		jmp	short loc_68B
; ---------------------------------------------------------------------------

loc_671:				; CODE XREF: _ucnv_toUnicode_UTF8+1CAj
		mov	edx, [ebp+var_5C]
		and	edx, 0FFFFF800h
		xor	eax, eax
		cmp	edx, 0D800h
		setnz	al
		mov	[ebp+var_148], eax

loc_68B:				; CODE XREF: _ucnv_toUnicode_UTF8+1DBj
		cmp	[ebp+var_148], 0
		jz	loc_727
		cmp	[ebp+var_5C], 0FFFFh
		ja	short loc_6B6
		mov	eax, [ebp+var_20]
		mov	cx, word ptr [ebp+var_5C]
		mov	[eax], cx
		mov	edx, [ebp+var_20]
		add	edx, 2
		mov	[ebp+var_20], edx
		jmp	short loc_725
; ---------------------------------------------------------------------------

loc_6B6:				; CODE XREF: _ucnv_toUnicode_UTF8+20Bj
		mov	eax, [ebp+var_5C]
		sub	eax, 10000h
		mov	[ebp+var_5C], eax
		mov	eax, [ebp+var_5C]
		shr	eax, 0Ah
		add	eax, 0D800h
		mov	ecx, [ebp+var_20]
		mov	[ecx], ax
		mov	edx, [ebp+var_20]
		add	edx, 2
		mov	[ebp+var_20], edx
		mov	eax, [ebp+var_5C]
		and	eax, 3FFh
		add	eax, 0DC00h
		mov	[ebp+var_5C], eax
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+var_38]
		jnb	short loc_708
		mov	eax, [ebp+var_20]
		mov	cx, word ptr [ebp+var_5C]
		mov	[eax], cx
		mov	edx, [ebp+var_20]
		add	edx, 2
		mov	[ebp+var_20], edx
		jmp	short loc_725
; ---------------------------------------------------------------------------

loc_708:				; CODE XREF: _ucnv_toUnicode_UTF8+25Dj
		mov	eax, [ebp+var_8]
		mov	cx, word ptr [ebp+var_5C]
		mov	[eax+74h], cx
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax+41h], 1
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0Fh
		jmp	short $donefornow$8679
; ---------------------------------------------------------------------------

loc_725:				; CODE XREF: _ucnv_toUnicode_UTF8+220j
					; _ucnv_toUnicode_UTF8+272j
		jmp	short loc_73B
; ---------------------------------------------------------------------------

loc_727:				; CODE XREF: _ucnv_toUnicode_UTF8+19Ej
					; _ucnv_toUnicode_UTF8+1ABj ...
		mov	eax, [ebp+var_8]
		mov	cl, byte ptr [ebp+var_74]
		mov	[eax+24h], cl
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0Ch
		jmp	short $donefornow$8679
; ---------------------------------------------------------------------------

loc_73B:				; CODE XREF: _ucnv_toUnicode_UTF8+F0j
					; _ucnv_toUnicode_UTF8:loc_725j
		jmp	loc_53E
; ---------------------------------------------------------------------------

$donefornow$8679:			; CODE XREF: _ucnv_toUnicode_UTF8+B0j
					; _ucnv_toUnicode_UTF8+BCj ...
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_2C]
		jnb	short loc_761
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+var_38]
		jb	short loc_761
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jg	short loc_761
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0Fh

loc_761:				; CODE XREF: _ucnv_toUnicode_UTF8+2B2j
					; _ucnv_toUnicode_UTF8+2BAj ...
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_20]
		mov	[eax+10h], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_14]
		mov	[eax+8], ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 148h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ucnv_toUnicode_UTF8 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 788h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 78Ch
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 790h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_hasCESU8Data	proc near		; CODE XREF: _ucnv_toUnicode_UTF8+58p
					; _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+68p ...

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+18h], offset __CESU8Data_56
		setz	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_hasCESU8Data	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 7C4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ucnv_toUnicode_UTF8_OFFSETS_LOGIC proc	near ; DATA XREF: .rdata:00000184o
					; .rdata:0000031Co

var_160		= dword	ptr -160h
var_98		= dword	ptr -98h
var_8C		= dword	ptr -8Ch
var_80		= dword	ptr -80h
var_74		= dword	ptr -74h
var_65		= byte ptr -65h
var_5C		= dword	ptr -5Ch
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 160h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_160]
		mov	ecx, 58h ; 'X'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+10h]
		mov	[ebp+var_20], ecx
		mov	eax, [ebp+arg_0]

loc_800:				; DATA XREF: .rdata:00000028o
					; .rdata:00000144o
		mov	ecx, [eax+18h]
		mov	[ebp+var_2C], ecx
		mov	[ebp+var_38], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	[ebp+var_44], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		mov	[ebp+var_50], ecx
		mov	eax, [ebp+var_8]
		add	eax, 25h ; '%'
		mov	[ebp+var_5C], eax
		mov	eax, [ebp+var_8]
		push	eax
		call	_hasCESU8Data
		add	esp, 4
		mov	[ebp+var_65], al
		mov	[ebp+var_80], 0
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+2Ch], 0
		jz	short loc_887
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+var_50]
		jnb	short loc_887
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+30h]
		mov	[ebp+var_98], ecx
		mov	eax, [ebp+var_8]
		movsx	ecx, byte ptr [eax+24h]
		mov	[ebp+var_8C], ecx
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax+24h], 0
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+2Ch]
		mov	[ebp+var_74], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+2Ch], 0
		jmp	$morebytes$8715
; ---------------------------------------------------------------------------

loc_887:				; CODE XREF: _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+81j
					; _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+89j ...
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_44]
		jnb	$donefornow$8731
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+var_50]
		jnb	$donefornow$8731
		mov	eax, [ebp+var_14]
		movzx	ecx, byte ptr [eax]
		mov	[ebp+var_74], ecx
		mov	edx, [ebp+var_14]
		add	edx, 1
		mov	[ebp+var_14], edx
		cmp	[ebp+var_74], 80h ; '€'
		jnb	short loc_8EC
		mov	eax, [ebp+var_20]
		mov	cx, word ptr [ebp+var_74]
		mov	[eax], cx
		mov	edx, [ebp+var_20]
		add	edx, 2
		mov	[ebp+var_20], edx
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+var_38]
		mov	[eax], ecx
		mov	edx, [ebp+var_2C]
		add	edx, 4
		mov	[ebp+var_2C], edx
		mov	eax, [ebp+var_38]
		add	eax, 1
		mov	[ebp+var_38], eax
		jmp	loc_B12
; ---------------------------------------------------------------------------

loc_8EC:				; CODE XREF: _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+F4j
		mov	eax, [ebp+var_5C]
		mov	cl, byte ptr [ebp+var_74]
		mov	[eax], cl
		mov	eax, [ebp+var_74]
		movsx	ecx, _bytesFromUTF8[eax]
		mov	[ebp+var_98], ecx
		mov	[ebp+var_8C], 1

$morebytes$8715:			; CODE XREF: _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+BEj
					; _ucnv_toUnicode_UTF8_OFFSETS_LOGIC:loc_99Cj
		mov	eax, [ebp+var_8C]
		cmp	eax, [ebp+var_98]
		jge	loc_9A1
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_44]
		jnb	short loc_976
		mov	eax, [ebp+var_14]
		movzx	ecx, byte ptr [eax]
		mov	[ebp+var_80], ecx
		mov	edx, [ebp+var_5C]
		add	edx, [ebp+var_8C]
		mov	al, byte ptr [ebp+var_80]
		mov	[edx], al
		mov	eax, [ebp+var_80]
		and	eax, 0C0h
		cmp	eax, 80h ; '€'
		jz	short loc_950
		jmp	short loc_9A1
; ---------------------------------------------------------------------------

loc_950:				; CODE XREF: _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+188j
		mov	eax, [ebp+var_74]
		shl	eax, 6
		add	eax, [ebp+var_80]
		mov	[ebp+var_74], eax
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_8C]
		add	eax, 1
		mov	[ebp+var_8C], eax
		jmp	short loc_99C
; ---------------------------------------------------------------------------

loc_976:				; CODE XREF: _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+162j
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_74]
		mov	[eax+2Ch], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_98]
		mov	[eax+30h], ecx
		mov	eax, [ebp+var_8]
		mov	cl, byte ptr [ebp+var_8C]
		mov	[eax+24h], cl
		jmp	$donefornow$8731
; ---------------------------------------------------------------------------

loc_99C:				; CODE XREF: _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+1B0j
		jmp	$morebytes$8715
; ---------------------------------------------------------------------------

loc_9A1:				; CODE XREF: _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+156j
					; _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+18Aj
		mov	eax, [ebp+var_98]
		mov	ecx, [ebp+var_74]
		sub	ecx, _offsetsFromUTF8[eax*4]
		mov	[ebp+var_74], ecx
		mov	eax, [ebp+var_8C]
		cmp	eax, [ebp+var_98]
		jnz	loc_AFB
		cmp	[ebp+var_74], 10FFFFh
		ja	loc_AFB
		mov	eax, [ebp+var_8C]
		mov	ecx, [ebp+var_74]
		cmp	ecx, _utf8_minChar32[eax*4]
		jb	loc_AFB
		movsx	eax, [ebp+var_65]
		test	eax, eax
		jz	short loc_A05
		xor	ecx, ecx
		cmp	[ebp+var_8C], 3
		setle	cl
		mov	[ebp+var_160], ecx
		jmp	short loc_A1F
; ---------------------------------------------------------------------------

loc_A05:				; CODE XREF: _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+22Bj
		mov	edx, [ebp+var_74]
		and	edx, 0FFFFF800h
		xor	eax, eax
		cmp	edx, 0D800h
		setnz	al
		mov	[ebp+var_160], eax

loc_A1F:				; CODE XREF: _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+23Fj
		cmp	[ebp+var_160], 0
		jz	loc_AFB
		cmp	[ebp+var_74], 0FFFFh
		ja	short loc_A5E
		mov	eax, [ebp+var_20]
		mov	cx, word ptr [ebp+var_74]
		mov	[eax], cx
		mov	edx, [ebp+var_20]
		add	edx, 2
		mov	[ebp+var_20], edx
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+var_38]
		mov	[eax], ecx
		mov	edx, [ebp+var_2C]
		add	edx, 4
		mov	[ebp+var_2C], edx
		jmp	loc_AED
; ---------------------------------------------------------------------------

loc_A5E:				; CODE XREF: _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+26Fj
		mov	eax, [ebp+var_74]
		sub	eax, 10000h
		mov	[ebp+var_74], eax
		mov	eax, [ebp+var_74]
		shr	eax, 0Ah
		add	eax, 0D800h
		mov	ecx, [ebp+var_20]
		mov	[ecx], ax
		mov	edx, [ebp+var_20]
		add	edx, 2
		mov	[ebp+var_20], edx
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+var_38]
		mov	[eax], ecx
		mov	edx, [ebp+var_2C]
		add	edx, 4
		mov	[ebp+var_2C], edx
		mov	eax, [ebp+var_74]
		and	eax, 3FFh
		add	eax, 0DC00h
		mov	[ebp+var_74], eax
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+var_50]
		jnb	short loc_AD2
		mov	eax, [ebp+var_20]
		mov	cx, word ptr [ebp+var_74]
		mov	[eax], cx
		mov	edx, [ebp+var_20]
		add	edx, 2
		mov	[ebp+var_20], edx
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+var_38]
		mov	[eax], ecx
		mov	edx, [ebp+var_2C]
		add	edx, 4
		mov	[ebp+var_2C], edx
		jmp	short loc_AED
; ---------------------------------------------------------------------------

loc_AD2:				; CODE XREF: _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+2E6j
		mov	eax, [ebp+var_8]
		mov	cx, word ptr [ebp+var_74]
		mov	[eax+74h], cx
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax+41h], 1
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0Fh

loc_AED:				; CODE XREF: _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+295j
					; _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+30Cj
		mov	eax, [ebp+var_38]
		add	eax, [ebp+var_8C]
		mov	[ebp+var_38], eax
		jmp	short loc_B12
; ---------------------------------------------------------------------------

loc_AFB:				; CODE XREF: _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+1FCj
					; _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+209j ...
		mov	eax, [ebp+var_8]
		mov	cl, byte ptr [ebp+var_8C]
		mov	[eax+24h], cl
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0Ch
		jmp	short $donefornow$8731
; ---------------------------------------------------------------------------

loc_B12:				; CODE XREF: _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+123j
					; _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+335j
		jmp	loc_887
; ---------------------------------------------------------------------------

$donefornow$8731:			; CODE XREF: _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+C9j
					; _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+D5j ...
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_44]
		jnb	short loc_B38
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+var_50]
		jb	short loc_B38
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jg	short loc_B38
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0Fh

loc_B38:				; CODE XREF: _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+359j
					; _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+361j ...
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_20]
		mov	[eax+10h], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_14]
		mov	[eax+8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_2C]
		mov	[eax+18h], ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 160h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ucnv_toUnicode_UTF8_OFFSETS_LOGIC endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0B68h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ucnv_fromUnicode_UTF8_56
_ucnv_fromUnicode_UTF8_56 proc near	; DATA XREF: .rdata:00000188o
					; .rdata:00000320o

var_13C		= dword	ptr -13Ch
var_71		= byte ptr -71h
var_68		= dword	ptr -68h
var_5C		= byte ptr -5Ch
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 13Ch
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_13C]
		mov	ecx, 4Fh ; 'O'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	[ebp+var_20], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+10h]
		mov	[ebp+var_2C], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		mov	[ebp+var_38], ecx
		mov	eax, [ebp+var_8]
		push	eax
		call	_hasCESU8Data
		add	esp, 4
		movsx	ecx, al
		neg	ecx
		sbb	ecx, ecx
		add	ecx, 1
		mov	[ebp+var_71], cl
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+38h], 0
		jz	short loc_BF5
		mov	eax, [ebp+var_2C]
		cmp	eax, [ebp+var_38]
		jnb	short loc_BF5
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+38h]
		mov	[ebp+var_50], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+38h], 0
		jmp	$lowsurrogate$8763
; ---------------------------------------------------------------------------

loc_BF5:				; CODE XREF: _ucnv_fromUnicode_UTF8_56+6Bj
					; _ucnv_fromUnicode_UTF8_56+73j ...
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_20]
		jnb	loc_E4A
		mov	eax, [ebp+var_2C]
		cmp	eax, [ebp+var_38]
		jnb	loc_E4A
		mov	eax, [ebp+var_14]
		movzx	ecx, word ptr [eax]
		mov	[ebp+var_50], ecx
		mov	edx, [ebp+var_14]
		add	edx, 2
		mov	[ebp+var_14], edx
		cmp	[ebp+var_50], 80h ; '€'
		jge	short loc_C3E
		mov	eax, [ebp+var_2C]
		mov	cl, byte ptr [ebp+var_50]
		mov	[eax], cl
		mov	edx, [ebp+var_2C]
		add	edx, 1
		mov	[ebp+var_2C], edx
		jmp	loc_E45
; ---------------------------------------------------------------------------

loc_C3E:				; CODE XREF: _ucnv_fromUnicode_UTF8_56+BEj
		cmp	[ebp+var_50], 800h
		jge	short loc_CA9
		mov	eax, [ebp+var_50]
		sar	eax, 6
		or	eax, 0C0h
		mov	ecx, [ebp+var_2C]
		mov	[ecx], al
		mov	edx, [ebp+var_2C]
		add	edx, 1
		mov	[ebp+var_2C], edx
		mov	eax, [ebp+var_2C]
		cmp	eax, [ebp+var_38]
		jnb	short loc_C83
		mov	eax, [ebp+var_50]
		and	eax, 3Fh
		or	eax, 80h
		mov	ecx, [ebp+var_2C]
		mov	[ecx], al
		mov	edx, [ebp+var_2C]
		add	edx, 1
		mov	[ebp+var_2C], edx
		jmp	short loc_CA4
; ---------------------------------------------------------------------------

loc_C83:				; CODE XREF: _ucnv_fromUnicode_UTF8_56+FEj
		mov	eax, [ebp+var_50]
		and	eax, 3Fh
		or	eax, 80h
		mov	ecx, [ebp+var_8]
		mov	[ecx+4Ch], al
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax+3Fh], 1
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0Fh

loc_CA4:				; CODE XREF: _ucnv_fromUnicode_UTF8_56+119j
		jmp	loc_E45
; ---------------------------------------------------------------------------

loc_CA9:				; CODE XREF: _ucnv_fromUnicode_UTF8_56+DDj
		mov	eax, [ebp+var_50]
		and	eax, 0FFFFF800h
		cmp	eax, 0D800h
		jnz	short loc_D2E
		movsx	eax, [ebp+var_71]
		test	eax, eax
		jz	short loc_D2E

$lowsurrogate$8763:			; CODE XREF: _ucnv_fromUnicode_UTF8_56+88j
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_20]
		jnb	short loc_D20
		mov	eax, [ebp+var_50]
		and	eax, 400h
		jnz	short loc_D07
		mov	eax, [ebp+var_14]
		movzx	ecx, word ptr [eax]
		and	ecx, 0FFFFFC00h
		cmp	ecx, 0DC00h
		jnz	short loc_D07
		mov	eax, [ebp+var_50]
		shl	eax, 0Ah
		mov	ecx, [ebp+var_14]
		movzx	edx, word ptr [ecx]
		lea	eax, [eax+edx-35FDC00h]
		mov	[ebp+var_50], eax
		mov	eax, [ebp+var_14]
		add	eax, 2
		mov	[ebp+var_14], eax
		jmp	short loc_D1E
; ---------------------------------------------------------------------------

loc_D07:				; CODE XREF: _ucnv_fromUnicode_UTF8_56+168j
					; _ucnv_fromUnicode_UTF8_56+17Cj
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_50]
		mov	[eax+38h], ecx
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0Ch
		jmp	loc_E4A
; ---------------------------------------------------------------------------

loc_D1E:				; CODE XREF: _ucnv_fromUnicode_UTF8_56+19Dj
		jmp	short loc_D2E
; ---------------------------------------------------------------------------

loc_D20:				; CODE XREF: _ucnv_fromUnicode_UTF8_56+15Ej
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_50]
		mov	[eax+38h], ecx
		jmp	loc_E4A
; ---------------------------------------------------------------------------

loc_D2E:				; CODE XREF: _ucnv_fromUnicode_UTF8_56+14Ej
					; _ucnv_fromUnicode_UTF8_56+156j ...
		mov	eax, [ebp+var_38]
		sub	eax, [ebp+var_2C]
		cmp	eax, 4
		jl	short loc_D44
		mov	ecx, [ebp+var_2C]
		mov	[ebp+var_13C], ecx
		jmp	short loc_D4D
; ---------------------------------------------------------------------------

loc_D44:				; CODE XREF: _ucnv_fromUnicode_UTF8_56+1CFj
		lea	edx, [ebp+var_5C]
		mov	[ebp+var_13C], edx

loc_D4D:				; CODE XREF: _ucnv_fromUnicode_UTF8_56+1DAj
		mov	eax, [ebp+var_13C]
		mov	[ebp+var_44], eax
		cmp	[ebp+var_50], 0FFFFh
		jg	short loc_D78
		mov	[ebp+var_68], 2
		mov	eax, [ebp+var_50]
		sar	eax, 0Ch
		or	eax, 0E0h
		mov	ecx, [ebp+var_44]
		mov	[ecx], al
		jmp	short loc_DA3
; ---------------------------------------------------------------------------

loc_D78:				; CODE XREF: _ucnv_fromUnicode_UTF8_56+1F5j
		mov	[ebp+var_68], 3
		mov	eax, [ebp+var_50]
		sar	eax, 12h
		or	eax, 0F0h
		mov	ecx, [ebp+var_44]
		mov	[ecx], al
		mov	eax, [ebp+var_50]
		sar	eax, 0Ch
		and	eax, 3Fh
		or	eax, 80h
		mov	ecx, [ebp+var_44]
		mov	[ecx+1], al

loc_DA3:				; CODE XREF: _ucnv_fromUnicode_UTF8_56+20Ej
		mov	eax, [ebp+var_50]
		sar	eax, 6
		and	eax, 3Fh
		or	eax, 80h
		mov	ecx, [ebp+var_44]
		add	ecx, [ebp+var_68]
		mov	[ecx-1], al
		mov	eax, [ebp+var_50]
		and	eax, 3Fh
		or	eax, 80h
		mov	ecx, [ebp+var_44]
		add	ecx, [ebp+var_68]
		mov	[ecx], al
		mov	eax, [ebp+var_44]
		cmp	eax, [ebp+var_2C]
		jnz	short loc_DE4
		mov	eax, [ebp+var_68]
		mov	ecx, [ebp+var_2C]
		lea	edx, [ecx+eax+1]
		mov	[ebp+var_2C], edx
		jmp	short loc_E45
; ---------------------------------------------------------------------------

loc_DE4:				; CODE XREF: _ucnv_fromUnicode_UTF8_56+26Bj
		jmp	short loc_DEF
; ---------------------------------------------------------------------------

loc_DE6:				; CODE XREF: _ucnv_fromUnicode_UTF8_56:loc_E43j
		mov	eax, [ebp+var_44]
		add	eax, 1
		mov	[ebp+var_44], eax

loc_DEF:				; CODE XREF: _ucnv_fromUnicode_UTF8_56:loc_DE4j
		mov	eax, [ebp+var_68]
		lea	ecx, [ebp+eax+var_5C]
		cmp	[ebp+var_44], ecx
		ja	short loc_E45
		mov	eax, [ebp+var_2C]
		cmp	eax, [ebp+var_38]
		jnb	short loc_E18
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+var_44]
		mov	dl, [ecx]
		mov	[eax], dl
		mov	eax, [ebp+var_2C]
		add	eax, 1
		mov	[ebp+var_2C], eax
		jmp	short loc_E43
; ---------------------------------------------------------------------------

loc_E18:				; CODE XREF: _ucnv_fromUnicode_UTF8_56+299j
		mov	eax, [ebp+var_8]
		movsx	ecx, byte ptr [eax+3Fh]
		mov	edx, [ebp+var_8]
		mov	eax, [ebp+var_44]
		mov	al, [eax]
		mov	[edx+ecx+4Ch], al
		mov	ecx, [ebp+var_8]
		mov	dl, [ecx+3Fh]
		add	dl, 1
		mov	eax, [ebp+var_8]
		mov	[eax+3Fh], dl
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0Fh

loc_E43:				; CODE XREF: _ucnv_fromUnicode_UTF8_56+2AEj
		jmp	short loc_DE6
; ---------------------------------------------------------------------------

loc_E45:				; CODE XREF: _ucnv_fromUnicode_UTF8_56+D1j
					; _ucnv_fromUnicode_UTF8_56:loc_CA4j ...
		jmp	loc_BF5
; ---------------------------------------------------------------------------

loc_E4A:				; CODE XREF: _ucnv_fromUnicode_UTF8_56+93j
					; _ucnv_fromUnicode_UTF8_56+9Fj ...
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_20]
		jnb	short loc_E6B
		mov	eax, [ebp+var_2C]
		cmp	eax, [ebp+var_38]
		jb	short loc_E6B
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jg	short loc_E6B
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0Fh

loc_E6B:				; CODE XREF: _ucnv_fromUnicode_UTF8_56+2E8j
					; _ucnv_fromUnicode_UTF8_56+2F0j ...
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_2C]
		mov	[eax+10h], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_14]
		mov	[eax+8], ecx
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN31
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 13Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ucnv_fromUnicode_UTF8_56 endp

; ---------------------------------------------------------------------------
		align 4
$LN31		dd 1			; DATA XREF: _ucnv_fromUnicode_UTF8_56+319o
		dd offset $LN30
$LN30		dd 0FFFFFFA4h, 4	; DATA XREF: .text:00000EA8o
		dd offset $LN29		; "tempBuf"
$LN29		db 'tempBuf',0          ; DATA XREF: .text:00000EB4o
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0EC0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56
_ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56	proc near ; DATA XREF: .rdata:0000018Co
					; .rdata:00000324o

var_160		= dword	ptr -160h
var_95		= byte ptr -95h
var_8C		= byte ptr -8Ch
var_80		= dword	ptr -80h
var_74		= dword	ptr -74h
var_68		= dword	ptr -68h
var_5C		= dword	ptr -5Ch
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 160h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_160]
		mov	ecx, 58h ; 'X'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+18h]
		mov	[ebp+var_20], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	[ebp+var_2C], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+10h]
		mov	[ebp+var_38], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		mov	[ebp+var_44], ecx
		mov	eax, [ebp+var_8]
		push	eax
		call	_hasCESU8Data
		add	esp, 4
		movsx	ecx, al
		neg	ecx
		sbb	ecx, ecx
		add	ecx, 1
		mov	[ebp+var_95], cl
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+38h], 0
		jz	short loc_F69
		mov	eax, [ebp+var_38]
		cmp	eax, [ebp+var_44]
		jnb	short loc_F69
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+38h]
		mov	[ebp+var_5C], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+38h], 0
		mov	[ebp+var_68], 0FFFFFFFFh
		mov	[ebp+var_74], 0
		jmp	$lowsurrogate$8821
; ---------------------------------------------------------------------------
		jmp	short loc_F70
; ---------------------------------------------------------------------------

loc_F69:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+77j
					; _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+7Fj
		mov	[ebp+var_68], 0

loc_F70:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+A7j
					; _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56:loc_1275j
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_2C]
		jnb	loc_127A
		mov	eax, [ebp+var_38]
		cmp	eax, [ebp+var_44]
		jnb	loc_127A
		mov	eax, [ebp+var_14]
		movzx	ecx, word ptr [eax]
		mov	[ebp+var_5C], ecx
		mov	edx, [ebp+var_14]
		add	edx, 2
		mov	[ebp+var_14], edx
		cmp	[ebp+var_5C], 80h ; '€'
		jge	short loc_FD3
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_68]
		mov	[eax], ecx
		mov	edx, [ebp+var_20]
		add	edx, 4
		mov	[ebp+var_20], edx
		mov	eax, [ebp+var_68]
		add	eax, 1
		mov	[ebp+var_68], eax
		mov	eax, [ebp+var_38]
		mov	cl, byte ptr [ebp+var_5C]
		mov	[eax], cl
		mov	edx, [ebp+var_38]
		add	edx, 1
		mov	[ebp+var_38], edx
		jmp	loc_1275
; ---------------------------------------------------------------------------

loc_FD3:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+E1j
		cmp	[ebp+var_5C], 800h
		jge	loc_106D
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_68]
		mov	[eax], ecx
		mov	edx, [ebp+var_20]
		add	edx, 4
		mov	[ebp+var_20], edx
		mov	eax, [ebp+var_5C]
		sar	eax, 6
		or	eax, 0C0h
		mov	ecx, [ebp+var_38]
		mov	[ecx], al
		mov	edx, [ebp+var_38]
		add	edx, 1
		mov	[ebp+var_38], edx
		mov	eax, [ebp+var_38]
		cmp	eax, [ebp+var_44]
		jnb	short loc_1047
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_68]
		mov	[eax], ecx
		mov	edx, [ebp+var_20]
		add	edx, 4
		mov	[ebp+var_20], edx
		mov	eax, [ebp+var_68]
		add	eax, 1
		mov	[ebp+var_68], eax
		mov	eax, [ebp+var_5C]
		and	eax, 3Fh
		or	eax, 80h
		mov	ecx, [ebp+var_38]
		mov	[ecx], al
		mov	edx, [ebp+var_38]
		add	edx, 1
		mov	[ebp+var_38], edx
		jmp	short loc_1068
; ---------------------------------------------------------------------------

loc_1047:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+150j
		mov	eax, [ebp+var_5C]
		and	eax, 3Fh
		or	eax, 80h
		mov	ecx, [ebp+var_8]
		mov	[ecx+4Ch], al
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax+3Fh], 1
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0Fh

loc_1068:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+185j
		jmp	loc_1275
; ---------------------------------------------------------------------------

loc_106D:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+11Aj
		mov	eax, [ebp+var_68]
		add	eax, 1
		mov	[ebp+var_74], eax
		mov	eax, [ebp+var_5C]
		and	eax, 0FFFFF800h
		cmp	eax, 0D800h
		jnz	loc_110B
		movsx	eax, [ebp+var_95]
		test	eax, eax
		jz	short loc_110B

$lowsurrogate$8821:			; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+A2j
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_2C]
		jnb	short loc_10FD
		mov	eax, [ebp+var_5C]
		and	eax, 400h
		jnz	short loc_10E4
		mov	eax, [ebp+var_14]
		movzx	ecx, word ptr [eax]
		and	ecx, 0FFFFFC00h
		cmp	ecx, 0DC00h
		jnz	short loc_10E4
		mov	eax, [ebp+var_5C]
		shl	eax, 0Ah
		mov	ecx, [ebp+var_14]
		movzx	edx, word ptr [ecx]
		lea	eax, [eax+edx-35FDC00h]
		mov	[ebp+var_5C], eax
		mov	eax, [ebp+var_14]
		add	eax, 2
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_74]
		add	eax, 1
		mov	[ebp+var_74], eax
		jmp	short loc_10FB
; ---------------------------------------------------------------------------

loc_10E4:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+1E4j
					; _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+1F8j
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_5C]
		mov	[eax+38h], ecx
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0Ch
		jmp	loc_127A
; ---------------------------------------------------------------------------

loc_10FB:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+222j
		jmp	short loc_110B
; ---------------------------------------------------------------------------

loc_10FD:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+1DAj
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_5C]
		mov	[eax+38h], ecx
		jmp	loc_127A
; ---------------------------------------------------------------------------

loc_110B:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+1C3j
					; _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+1D2j	...
		mov	eax, [ebp+var_44]
		sub	eax, [ebp+var_38]
		cmp	eax, 4
		jl	short loc_1121
		mov	ecx, [ebp+var_38]
		mov	[ebp+var_160], ecx
		jmp	short loc_112D
; ---------------------------------------------------------------------------

loc_1121:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+254j
		lea	edx, [ebp+var_8C]
		mov	[ebp+var_160], edx

loc_112D:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+25Fj
		mov	eax, [ebp+var_160]
		mov	[ebp+var_50], eax
		cmp	[ebp+var_5C], 0FFFFh
		jg	short loc_1158
		mov	[ebp+var_80], 2
		mov	eax, [ebp+var_5C]
		sar	eax, 0Ch
		or	eax, 0E0h
		mov	ecx, [ebp+var_50]
		mov	[ecx], al
		jmp	short loc_1183
; ---------------------------------------------------------------------------

loc_1158:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+27Dj
		mov	[ebp+var_80], 3
		mov	eax, [ebp+var_5C]
		sar	eax, 12h
		or	eax, 0F0h
		mov	ecx, [ebp+var_50]
		mov	[ecx], al
		mov	eax, [ebp+var_5C]
		sar	eax, 0Ch
		and	eax, 3Fh
		or	eax, 80h
		mov	ecx, [ebp+var_50]
		mov	[ecx+1], al

loc_1183:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+296j
		mov	eax, [ebp+var_5C]
		sar	eax, 6
		and	eax, 3Fh
		or	eax, 80h
		mov	ecx, [ebp+var_50]
		add	ecx, [ebp+var_80]
		mov	[ecx-1], al
		mov	eax, [ebp+var_5C]
		and	eax, 3Fh
		or	eax, 80h
		mov	ecx, [ebp+var_50]
		add	ecx, [ebp+var_80]
		mov	[ecx], al
		mov	eax, [ebp+var_50]
		cmp	eax, [ebp+var_38]
		jnz	short loc_11FA
		mov	eax, [ebp+var_80]
		mov	ecx, [ebp+var_38]
		lea	edx, [ecx+eax+1]
		mov	[ebp+var_38], edx
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_68]
		mov	[eax], ecx
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_68]
		mov	[eax+4], ecx
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_68]
		mov	[eax+8], ecx
		cmp	[ebp+var_80], 3
		jl	short loc_11EB
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_68]
		mov	[eax+0Ch], ecx

loc_11EB:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+320j
		mov	eax, [ebp+var_80]
		mov	ecx, [ebp+var_20]
		lea	edx, [ecx+eax*4+4]
		mov	[ebp+var_20], edx
		jmp	short loc_126F
; ---------------------------------------------------------------------------

loc_11FA:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+2F3j
		jmp	short loc_1205
; ---------------------------------------------------------------------------

loc_11FC:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56:loc_126Dj
		mov	eax, [ebp+var_50]
		add	eax, 1
		mov	[ebp+var_50], eax

loc_1205:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56:loc_11FAj
		mov	eax, [ebp+var_80]
		lea	ecx, [ebp+eax+var_8C]
		cmp	[ebp+var_50], ecx
		ja	short loc_126F
		mov	eax, [ebp+var_38]
		cmp	eax, [ebp+var_44]
		jnb	short loc_1242
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_68]
		mov	[eax], ecx
		mov	edx, [ebp+var_20]
		add	edx, 4
		mov	[ebp+var_20], edx
		mov	eax, [ebp+var_38]
		mov	ecx, [ebp+var_50]
		mov	dl, [ecx]
		mov	[eax], dl
		mov	eax, [ebp+var_38]
		add	eax, 1
		mov	[ebp+var_38], eax
		jmp	short loc_126D
; ---------------------------------------------------------------------------

loc_1242:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+35Aj
		mov	eax, [ebp+var_8]
		movsx	ecx, byte ptr [eax+3Fh]
		mov	edx, [ebp+var_8]
		mov	eax, [ebp+var_50]
		mov	al, [eax]
		mov	[edx+ecx+4Ch], al
		mov	ecx, [ebp+var_8]
		mov	dl, [ecx+3Fh]
		add	dl, 1
		mov	eax, [ebp+var_8]
		mov	[eax+3Fh], dl
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0Fh

loc_126D:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+380j
		jmp	short loc_11FC
; ---------------------------------------------------------------------------

loc_126F:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+338j
					; _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+352j
		mov	eax, [ebp+var_74]
		mov	[ebp+var_68], eax

loc_1275:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+10Ej
					; _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56:loc_1068j
		jmp	loc_F70
; ---------------------------------------------------------------------------

loc_127A:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+B6j
					; _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+C2j ...
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_2C]
		jnb	short loc_129B
		mov	eax, [ebp+var_38]
		cmp	eax, [ebp+var_44]
		jb	short loc_129B
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jg	short loc_129B
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0Fh

loc_129B:				; CODE XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+3C0j
					; _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+3C8j	...
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_38]
		mov	[eax+10h], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_14]
		mov	[eax+8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_20]
		mov	[eax+18h], ecx
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN33
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 160h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56	endp

; ---------------------------------------------------------------------------
		align 4
$LN33		dd 1			; DATA XREF: _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+3FAo
		dd offset $LN32
$LN32		dd 0FFFFFF74h, 4	; DATA XREF: .text:000012E0o
		dd offset $LN31_0	; "tempBuf"
$LN31_0		db 'tempBuf',0          ; DATA XREF: .text:000012ECo
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 12F8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ucnv_getNextUChar_UTF8	proc near	; DATA XREF: .rdata:00000190o

var_124		= dword	ptr -124h
var_59		= byte ptr -59h
var_4D		= byte ptr -4Dh
var_44		= dword	ptr -44h
var_35		= byte ptr -35h
var_2C		= word ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 124h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_124]
		mov	ecx, 49h ; 'I'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	[ebp+var_20], ecx
		mov	edx, [ebp+var_20]
		mov	[ebp+var_14], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_20]
		cmp	ecx, [eax+0Ch]
		jb	short loc_134C
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 8
		mov	eax, 0FFFFh
		jmp	loc_1651
; ---------------------------------------------------------------------------

loc_134C:				; CODE XREF: _ucnv_getNextUChar_UTF8+3Fj
		mov	eax, [ebp+var_20]
		mov	cl, [eax]
		mov	[ebp+var_35], cl
		mov	edx, [ebp+var_20]
		add	edx, 1
		mov	[ebp+var_20], edx
		movzx	eax, [ebp+var_35]
		cmp	eax, 80h ; '€'
		jge	short loc_137A
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_20]
		mov	[eax+8], ecx
		movzx	eax, [ebp+var_35]
		jmp	loc_1651
; ---------------------------------------------------------------------------

loc_137A:				; CODE XREF: _ucnv_getNextUChar_UTF8+6Ej
		movzx	eax, [ebp+var_35]
		movsx	cx, _bytesFromUTF8[eax]
		mov	[ebp+var_2C], cx
		movzx	eax, [ebp+var_2C]
		test	eax, eax
		jnz	short loc_13BE
		mov	eax, [ebp+var_8]
		mov	cl, [ebp+var_35]
		mov	[eax+25h], cl
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax+24h], 1
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0Ch
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_20]
		mov	[eax+8], ecx
		mov	eax, 0FFFFh
		jmp	loc_1651
; ---------------------------------------------------------------------------

loc_13BE:				; CODE XREF: _ucnv_getNextUChar_UTF8+98j
		movzx	eax, [ebp+var_2C]
		mov	ecx, [ebp+var_20]
		lea	edx, [ecx+eax-1]
		mov	eax, [ebp+arg_0]
		cmp	edx, [eax+0Ch]
		jbe	loc_145A
		mov	eax, [ebp+var_8]
		mov	cl, [ebp+var_35]
		mov	[eax+25h], cl
		mov	[ebp+var_4D], 1
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0Bh

loc_13EB:				; CODE XREF: _ucnv_getNextUChar_UTF8:loc_143Cj
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_20]
		cmp	ecx, [eax+0Ch]
		jnb	short loc_143E
		mov	eax, [ebp+var_20]
		mov	cl, [eax]
		mov	[ebp+var_35], cl
		movzx	edx, [ebp+var_35]
		and	edx, 0C0h
		cmp	edx, 80h ; '€'
		jnz	short loc_1431
		movsx	eax, [ebp+var_4D]
		mov	ecx, [ebp+var_8]
		mov	dl, [ebp+var_35]
		mov	[ecx+eax+25h], dl
		mov	al, [ebp+var_4D]
		add	al, 1
		mov	[ebp+var_4D], al
		mov	eax, [ebp+var_20]
		add	eax, 1
		mov	[ebp+var_20], eax
		jmp	short loc_143C
; ---------------------------------------------------------------------------

loc_1431:				; CODE XREF: _ucnv_getNextUChar_UTF8+116j
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0Ch
		jmp	short loc_143E
; ---------------------------------------------------------------------------

loc_143C:				; CODE XREF: _ucnv_getNextUChar_UTF8+137j
		jmp	short loc_13EB
; ---------------------------------------------------------------------------

loc_143E:				; CODE XREF: _ucnv_getNextUChar_UTF8+FCj
					; _ucnv_getNextUChar_UTF8+142j
		mov	eax, [ebp+var_8]
		mov	cl, [ebp+var_4D]
		mov	[eax+24h], cl
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_20]
		mov	[eax+8], ecx
		mov	eax, 0FFFFh
		jmp	loc_1651
; ---------------------------------------------------------------------------

loc_145A:				; CODE XREF: _ucnv_getNextUChar_UTF8+D7j
		mov	[ebp+var_59], 1
		movzx	eax, [ebp+var_35]
		shl	eax, 6
		mov	[ebp+var_44], eax
		movzx	eax, [ebp+var_2C]
		mov	[ebp+var_124], eax
		mov	ecx, [ebp+var_124]
		sub	ecx, 2
		mov	[ebp+var_124], ecx
		cmp	[ebp+var_124], 4 ; switch 5 cases
		ja	loc_15BA	; jumptable 00001494 default case
		mov	edx, [ebp+var_124]
		jmp	ds:$LN27[edx*4]	; switch jump
; ---------------------------------------------------------------------------

$LN14:					; CODE XREF: _ucnv_getNextUChar_UTF8+19Cj
					; DATA XREF: .text:$LN27o
		mov	eax, [ebp+var_20] ; jumptable 00001494 case 4
		mov	cl, [eax]
		mov	[ebp+var_35], cl
		movzx	edx, [ebp+var_35]
		add	edx, [ebp+var_44]
		mov	[ebp+var_44], edx
		mov	eax, [ebp+var_44]
		shl	eax, 6
		mov	[ebp+var_44], eax
		movzx	eax, [ebp+var_35]
		and	eax, 0C0h
		cmp	eax, 80h ; '€'
		jz	short loc_14CF
		mov	[ebp+var_59], 0
		jmp	loc_15BA	; jumptable 00001494 default case
; ---------------------------------------------------------------------------

loc_14CF:				; CODE XREF: _ucnv_getNextUChar_UTF8+1CCj
		mov	eax, [ebp+var_20]
		add	eax, 1
		mov	[ebp+var_20], eax

$LN12:					; CODE XREF: _ucnv_getNextUChar_UTF8+19Cj
					; DATA XREF: .text:$LN27o
		mov	eax, [ebp+var_20] ; jumptable 00001494 case 3
		mov	cl, [eax]
		mov	[ebp+var_35], cl
		movzx	edx, [ebp+var_35]
		add	edx, [ebp+var_44]
		mov	[ebp+var_44], edx
		mov	eax, [ebp+var_44]
		shl	eax, 6
		mov	[ebp+var_44], eax
		movzx	eax, [ebp+var_35]
		and	eax, 0C0h
		cmp	eax, 80h ; '€'
		jz	short loc_150C
		mov	[ebp+var_59], 0
		jmp	loc_15BA	; jumptable 00001494 default case
; ---------------------------------------------------------------------------

loc_150C:				; CODE XREF: _ucnv_getNextUChar_UTF8+209j
		mov	eax, [ebp+var_20]
		add	eax, 1
		mov	[ebp+var_20], eax

$LN10:					; CODE XREF: _ucnv_getNextUChar_UTF8+19Cj
					; DATA XREF: .text:$LN27o
		mov	eax, [ebp+var_20] ; jumptable 00001494 case 2
		mov	cl, [eax]
		mov	[ebp+var_35], cl
		movzx	edx, [ebp+var_35]
		add	edx, [ebp+var_44]
		mov	[ebp+var_44], edx
		mov	eax, [ebp+var_44]
		shl	eax, 6
		mov	[ebp+var_44], eax
		movzx	eax, [ebp+var_35]
		and	eax, 0C0h
		cmp	eax, 80h ; '€'
		jz	short loc_1546
		mov	[ebp+var_59], 0
		jmp	short loc_15BA	; jumptable 00001494 default case
; ---------------------------------------------------------------------------

loc_1546:				; CODE XREF: _ucnv_getNextUChar_UTF8+246j
		mov	eax, [ebp+var_20]
		add	eax, 1
		mov	[ebp+var_20], eax

$LN8:					; CODE XREF: _ucnv_getNextUChar_UTF8+19Cj
					; DATA XREF: .text:$LN27o
		mov	eax, [ebp+var_20] ; jumptable 00001494 case 1
		mov	cl, [eax]
		mov	[ebp+var_35], cl
		movzx	edx, [ebp+var_35]
		add	edx, [ebp+var_44]
		mov	[ebp+var_44], edx
		mov	eax, [ebp+var_44]
		shl	eax, 6
		mov	[ebp+var_44], eax
		movzx	eax, [ebp+var_35]
		and	eax, 0C0h
		cmp	eax, 80h ; '€'
		jz	short loc_1580
		mov	[ebp+var_59], 0
		jmp	short loc_15BA	; jumptable 00001494 default case
; ---------------------------------------------------------------------------

loc_1580:				; CODE XREF: _ucnv_getNextUChar_UTF8+280j
		mov	eax, [ebp+var_20]
		add	eax, 1
		mov	[ebp+var_20], eax

$LN6:					; CODE XREF: _ucnv_getNextUChar_UTF8+19Cj
					; DATA XREF: .text:$LN27o
		mov	eax, [ebp+var_20] ; jumptable 00001494 case 0
		mov	cl, [eax]
		mov	[ebp+var_35], cl
		movzx	edx, [ebp+var_35]
		add	edx, [ebp+var_44]
		mov	[ebp+var_44], edx
		movzx	eax, [ebp+var_35]
		and	eax, 0C0h
		cmp	eax, 80h ; '€'
		jz	short loc_15B1
		mov	[ebp+var_59], 0
		jmp	short loc_15BA	; jumptable 00001494 default case
; ---------------------------------------------------------------------------

loc_15B1:				; CODE XREF: _ucnv_getNextUChar_UTF8+2B1j
		mov	eax, [ebp+var_20]
		add	eax, 1
		mov	[ebp+var_20], eax

loc_15BA:				; CODE XREF: _ucnv_getNextUChar_UTF8+190j
					; _ucnv_getNextUChar_UTF8+1D2j	...
		movzx	eax, [ebp+var_2C] ; jumptable 00001494 default case
		mov	ecx, [ebp+var_44]
		sub	ecx, _offsetsFromUTF8[eax*4]
		mov	[ebp+var_44], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_20]
		mov	[eax+8], ecx
		movsx	eax, [ebp+var_59]
		test	eax, eax
		jz	short loc_1609
		cmp	[ebp+var_44], 10FFFFh
		ja	short loc_1609
		movzx	eax, [ebp+var_2C]
		mov	ecx, [ebp+var_44]
		cmp	ecx, _utf8_minChar32[eax*4]
		jb	short loc_1609
		mov	eax, [ebp+var_44]
		and	eax, 0FFFFF800h
		cmp	eax, 0D800h
		jz	short loc_1609
		mov	eax, [ebp+var_44]
		jmp	short loc_1651
; ---------------------------------------------------------------------------

loc_1609:				; CODE XREF: _ucnv_getNextUChar_UTF8+2E2j
					; _ucnv_getNextUChar_UTF8+2EBj	...
		mov	[ebp+var_4D], 0
		jmp	short loc_1617
; ---------------------------------------------------------------------------

loc_160F:				; CODE XREF: _ucnv_getNextUChar_UTF8+340j
		mov	al, [ebp+var_4D]
		add	al, 1
		mov	[ebp+var_4D], al

loc_1617:				; CODE XREF: _ucnv_getNextUChar_UTF8+315j
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_20]
		jnb	short loc_163A
		movsx	eax, [ebp+var_4D]
		mov	ecx, [ebp+var_8]
		mov	edx, [ebp+var_14]
		mov	dl, [edx]
		mov	[ecx+eax+25h], dl
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		jmp	short loc_160F
; ---------------------------------------------------------------------------

loc_163A:				; CODE XREF: _ucnv_getNextUChar_UTF8+325j
		mov	eax, [ebp+var_8]
		mov	cl, [ebp+var_4D]
		mov	[eax+24h], cl
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0Ch
		mov	eax, 0FFFFh

loc_1651:				; CODE XREF: _ucnv_getNextUChar_UTF8+4Fj
					; _ucnv_getNextUChar_UTF8+7Dj ...
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_ucnv_getNextUChar_UTF8	endp

; ---------------------------------------------------------------------------
$LN27		dd offset $LN6		; DATA XREF: _ucnv_getNextUChar_UTF8+19Cr
		dd offset $LN8		; jump table for switch	statement
		dd offset $LN10
		dd offset $LN12
		dd offset $LN14
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 166Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ucnv_UTF8FromUTF8 proc	near		; DATA XREF: .rdata:000001A8o
					; .rdata:000001ACo

var_17C		= dword	ptr -17Ch
var_178		= dword	ptr -178h
var_AD		= byte ptr -0ADh
var_A4		= dword	ptr -0A4h
var_95		= byte ptr -95h
var_89		= byte ptr -89h
var_7D		= byte ptr -7Dh
var_74		= dword	ptr -74h
var_65		= byte ptr -65h
var_59		= byte ptr -59h
var_4D		= byte ptr -4Dh
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 17Ch
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_17C]
		mov	ecx, 5Fh ; '_'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+4]
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+8]
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+0Ch]
		mov	[ebp+var_20], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+10h]
		mov	[ebp+var_2C], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+14h]
		sub	edx, [ecx+10h]
		mov	[ebp+var_38], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+2Ch]
		mov	[ebp+var_74], ecx
		cmp	[ebp+var_74], 0
		jz	short loc_16E6
		mov	eax, [ebp+var_8]
		mov	cl, [eax+24h]
		mov	[ebp+var_4D], cl
		mov	dl, [ebp+var_4D]
		mov	[ebp+var_59], dl
		mov	eax, [ebp+var_8]
		mov	cl, [eax+30h]
		mov	[ebp+var_65], cl
		jmp	short loc_16F6
; ---------------------------------------------------------------------------

loc_16E6:				; CODE XREF: _ucnv_UTF8FromUTF8+5Ej
		mov	[ebp+var_65], 0
		mov	al, [ebp+var_65]
		mov	[ebp+var_4D], al
		mov	cl, [ebp+var_4D]
		mov	[ebp+var_59], cl

loc_16F6:				; CODE XREF: _ucnv_UTF8FromUTF8+78j
		mov	eax, [ebp+var_20]
		sub	eax, [ebp+var_14]
		movsx	ecx, [ebp+var_4D]
		add	eax, ecx
		mov	[ebp+var_44], eax
		movsx	eax, [ebp+var_65]
		cmp	[ebp+var_44], eax
		jge	short loc_1713
		jmp	loc_1849
; ---------------------------------------------------------------------------

loc_1713:				; CODE XREF: _ucnv_UTF8FromUTF8+A0j
		movsx	eax, [ebp+var_65]
		cmp	[ebp+var_38], eax
		jge	short loc_172F
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 0FFFFFF81h
		jmp	loc_1F42
; ---------------------------------------------------------------------------
		jmp	loc_1849
; ---------------------------------------------------------------------------

loc_172F:				; CODE XREF: _ucnv_UTF8FromUTF8+AEj
		mov	eax, [ebp+var_44]
		cmp	eax, [ebp+var_38]
		jle	short loc_173D
		mov	eax, [ebp+var_38]
		mov	[ebp+var_44], eax

loc_173D:				; CODE XREF: _ucnv_UTF8FromUTF8+C9j
		mov	[ebp+var_A4], 0

loc_1747:				; CODE XREF: _ucnv_UTF8FromUTF8:loc_1844j
		cmp	[ebp+var_A4], 3
		jge	loc_1849
		movsx	eax, [ebp+var_65]
		mov	ecx, [ebp+var_44]
		sub	ecx, eax
		cmp	[ebp+var_A4], ecx
		jge	loc_1849
		movsx	eax, [ebp+var_4D]
		mov	ecx, [ebp+var_44]
		sub	ecx, eax
		sub	ecx, [ebp+var_A4]
		mov	edx, [ebp+var_14]
		mov	al, [edx+ecx-1]
		mov	[ebp+var_7D], al
		movzx	eax, [ebp+var_7D]
		and	eax, 0C0h
		cmp	eax, 80h ; '€'
		jnz	short loc_17A6
		mov	eax, [ebp+var_A4]
		add	eax, 1
		mov	[ebp+var_A4], eax
		jmp	loc_1844
; ---------------------------------------------------------------------------

loc_17A6:				; CODE XREF: _ucnv_UTF8FromUTF8+124j
		movzx	eax, [ebp+var_7D]
		cmp	eax, 0F0h ; 'ð'
		jge	short loc_17D8
		movzx	ecx, [ebp+var_7D]
		xor	edx, edx
		cmp	ecx, 0C0h ; 'À'
		setnl	dl
		movzx	eax, [ebp+var_7D]
		xor	ecx, ecx
		cmp	eax, 0E0h ; 'à'
		setnl	cl
		add	edx, ecx
		mov	[ebp+var_178], edx
		jmp	short loc_1823
; ---------------------------------------------------------------------------

loc_17D8:				; CODE XREF: _ucnv_UTF8FromUTF8+143j
		movzx	edx, [ebp+var_7D]
		cmp	edx, 0FEh ; 'þ'
		jge	short loc_180D
		movzx	eax, [ebp+var_7D]
		xor	ecx, ecx
		cmp	eax, 0F8h ; 'ø'
		setnl	cl
		movzx	edx, [ebp+var_7D]
		xor	eax, eax
		cmp	edx, 0FCh ; 'ü'
		setnl	al
		lea	ecx, [ecx+eax+3]
		mov	[ebp+var_17C], ecx
		jmp	short loc_1817
; ---------------------------------------------------------------------------

loc_180D:				; CODE XREF: _ucnv_UTF8FromUTF8+176j
		mov	[ebp+var_17C], 0

loc_1817:				; CODE XREF: _ucnv_UTF8FromUTF8+19Fj
		mov	edx, [ebp+var_17C]
		mov	[ebp+var_178], edx

loc_1823:				; CODE XREF: _ucnv_UTF8FromUTF8+16Aj
		mov	eax, [ebp+var_A4]
		cmp	eax, [ebp+var_178]
		jge	short loc_1842
		mov	eax, [ebp+var_A4]
		add	eax, 1
		mov	ecx, [ebp+var_44]
		sub	ecx, eax
		mov	[ebp+var_44], ecx

loc_1842:				; CODE XREF: _ucnv_UTF8FromUTF8+1C3j
		jmp	short loc_1849
; ---------------------------------------------------------------------------

loc_1844:				; CODE XREF: _ucnv_UTF8FromUTF8+135j
		jmp	loc_1747
; ---------------------------------------------------------------------------

loc_1849:				; CODE XREF: _ucnv_UTF8FromUTF8+A2j
					; _ucnv_UTF8FromUTF8+BEj ...
		cmp	[ebp+var_74], 0
		jz	short loc_1865
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+2Ch], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax+24h], 0
		jmp	$moreBytes$8965
; ---------------------------------------------------------------------------

loc_1865:				; CODE XREF: _ucnv_UTF8FromUTF8+1E1j
					; _ucnv_UTF8FromUTF8+236j ...
		cmp	[ebp+var_44], 0
		jle	loc_1DBD
		mov	eax, [ebp+var_14]
		mov	cl, [eax]
		mov	[ebp+var_7D], cl
		mov	edx, [ebp+var_14]
		add	edx, 1
		mov	[ebp+var_14], edx
		movsx	eax, [ebp+var_7D]
		test	eax, eax
		jl	short loc_18A9
		mov	eax, [ebp+var_2C]
		mov	cl, [ebp+var_7D]
		mov	[eax], cl
		mov	edx, [ebp+var_2C]
		add	edx, 1
		mov	[ebp+var_2C], edx
		mov	eax, [ebp+var_44]
		sub	eax, 1
		mov	[ebp+var_44], eax
		jmp	short loc_1865
; ---------------------------------------------------------------------------
		jmp	loc_1DB8
; ---------------------------------------------------------------------------

loc_18A9:				; CODE XREF: _ucnv_UTF8FromUTF8+21Aj
		movzx	eax, [ebp+var_7D]
		cmp	eax, 0E0h ; 'à'
		jle	loc_198A
		mov	eax, [ebp+var_14]
		mov	cl, [eax]
		mov	[ebp+var_89], cl
		movzx	edx, [ebp+var_89]
		cmp	edx, 80h ; '€'
		jl	loc_1985
		movzx	eax, [ebp+var_7D]
		cmp	eax, 0EDh ; 'í'
		jge	short loc_18EF
		movzx	eax, [ebp+var_89]
		cmp	eax, 0BFh ; '¿'
		jle	short loc_190C

loc_18EF:				; CODE XREF: _ucnv_UTF8FromUTF8+273j
		movzx	eax, [ebp+var_7D]
		cmp	eax, 0EDh ; 'í'
		jnz	loc_1985
		movzx	eax, [ebp+var_89]
		cmp	eax, 9Fh ; 'Ÿ'
		jg	short loc_1985

loc_190C:				; CODE XREF: _ucnv_UTF8FromUTF8+281j
		mov	eax, [ebp+var_14]
		mov	cl, [eax+1]
		mov	[ebp+var_95], cl
		movzx	edx, [ebp+var_95]
		cmp	edx, 80h ; '€'
		jl	short loc_1985
		movzx	eax, [ebp+var_95]
		cmp	eax, 0BFh ; '¿'
		jg	short loc_1985
		mov	eax, [ebp+var_14]
		add	eax, 2
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_2C]
		mov	cl, [ebp+var_7D]
		mov	[eax], cl
		mov	edx, [ebp+var_2C]
		add	edx, 1
		mov	[ebp+var_2C], edx
		mov	eax, [ebp+var_2C]
		mov	cl, [ebp+var_89]
		mov	[eax], cl
		mov	edx, [ebp+var_2C]
		add	edx, 1
		mov	[ebp+var_2C], edx
		mov	eax, [ebp+var_2C]
		mov	cl, [ebp+var_95]
		mov	[eax], cl
		mov	edx, [ebp+var_2C]
		add	edx, 1
		mov	[ebp+var_2C], edx
		mov	eax, [ebp+var_44]
		sub	eax, 3
		mov	[ebp+var_44], eax
		jmp	loc_1865
; ---------------------------------------------------------------------------

loc_1985:				; CODE XREF: _ucnv_UTF8FromUTF8+264j
					; _ucnv_UTF8FromUTF8+28Cj ...
		jmp	loc_1ABD
; ---------------------------------------------------------------------------

loc_198A:				; CODE XREF: _ucnv_UTF8FromUTF8+246j
		movzx	eax, [ebp+var_7D]
		cmp	eax, 0E0h ; 'à'
		jge	short loc_1A09
		movzx	eax, [ebp+var_7D]
		cmp	eax, 0C2h ; 'Â'
		jl	short loc_1A04
		mov	eax, [ebp+var_14]
		mov	cl, [eax]
		mov	[ebp+var_89], cl
		movzx	edx, [ebp+var_89]
		cmp	edx, 80h ; '€'
		jl	short loc_1A04
		movzx	eax, [ebp+var_89]
		cmp	eax, 0BFh ; '¿'
		jg	short loc_1A04
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_2C]
		mov	cl, [ebp+var_7D]
		mov	[eax], cl
		mov	edx, [ebp+var_2C]
		add	edx, 1
		mov	[ebp+var_2C], edx
		mov	eax, [ebp+var_2C]
		mov	cl, [ebp+var_89]
		mov	[eax], cl
		mov	edx, [ebp+var_2C]
		add	edx, 1
		mov	[ebp+var_2C], edx
		mov	eax, [ebp+var_44]
		sub	eax, 2
		mov	[ebp+var_44], eax
		jmp	loc_1865
; ---------------------------------------------------------------------------

loc_1A04:				; CODE XREF: _ucnv_UTF8FromUTF8+332j
					; _ucnv_UTF8FromUTF8+34Cj ...
		jmp	loc_1ABD
; ---------------------------------------------------------------------------

loc_1A09:				; CODE XREF: _ucnv_UTF8FromUTF8+327j
		movzx	eax, [ebp+var_7D]
		cmp	eax, 0E0h ; 'à'
		jnz	loc_1ABD
		mov	eax, [ebp+var_14]
		mov	cl, [eax]
		mov	[ebp+var_89], cl
		movzx	edx, [ebp+var_89]
		cmp	edx, 0A0h ; ' '
		jl	loc_1ABD
		movzx	eax, [ebp+var_89]
		cmp	eax, 0BFh ; '¿'
		jg	short loc_1ABD
		mov	eax, [ebp+var_14]
		mov	cl, [eax+1]
		mov	[ebp+var_95], cl
		movzx	edx, [ebp+var_95]
		cmp	edx, 80h ; '€'
		jl	short loc_1ABD
		movzx	eax, [ebp+var_95]
		cmp	eax, 0BFh ; '¿'
		jg	short loc_1ABD
		mov	eax, [ebp+var_14]
		add	eax, 2
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_2C]
		mov	cl, [ebp+var_7D]
		mov	[eax], cl
		mov	edx, [ebp+var_2C]
		add	edx, 1
		mov	[ebp+var_2C], edx
		mov	eax, [ebp+var_2C]
		mov	cl, [ebp+var_89]
		mov	[eax], cl
		mov	edx, [ebp+var_2C]
		add	edx, 1
		mov	[ebp+var_2C], edx
		mov	eax, [ebp+var_2C]
		mov	cl, [ebp+var_95]
		mov	[eax], cl
		mov	edx, [ebp+var_2C]
		add	edx, 1
		mov	[ebp+var_2C], edx
		mov	eax, [ebp+var_44]
		sub	eax, 3
		mov	[ebp+var_44], eax
		jmp	loc_1865
; ---------------------------------------------------------------------------

loc_1ABD:				; CODE XREF: _ucnv_UTF8FromUTF8:loc_1985j
					; _ucnv_UTF8FromUTF8:loc_1A04j	...
		mov	[ebp+var_4D], 0
		mov	[ebp+var_59], 1
		movzx	eax, [ebp+var_7D]
		cmp	eax, 0F0h ; 'ð'
		jge	short loc_1AF7
		movzx	ecx, [ebp+var_7D]
		xor	edx, edx
		cmp	ecx, 0C0h ; 'À'
		setnl	dl
		movzx	eax, [ebp+var_7D]
		xor	ecx, ecx
		cmp	eax, 0E0h ; 'à'
		setnl	cl
		add	edx, ecx
		mov	[ebp+var_178], edx
		jmp	short loc_1B42
; ---------------------------------------------------------------------------

loc_1AF7:				; CODE XREF: _ucnv_UTF8FromUTF8+462j
		movzx	edx, [ebp+var_7D]
		cmp	edx, 0FEh ; 'þ'
		jge	short loc_1B2C
		movzx	eax, [ebp+var_7D]
		xor	ecx, ecx
		cmp	eax, 0F8h ; 'ø'
		setnl	cl
		movzx	edx, [ebp+var_7D]
		xor	eax, eax
		cmp	edx, 0FCh ; 'ü'
		setnl	al
		lea	ecx, [ecx+eax+3]
		mov	[ebp+var_17C], ecx
		jmp	short loc_1B36
; ---------------------------------------------------------------------------

loc_1B2C:				; CODE XREF: _ucnv_UTF8FromUTF8+495j
		mov	[ebp+var_17C], 0

loc_1B36:				; CODE XREF: _ucnv_UTF8FromUTF8+4BEj
		mov	edx, [ebp+var_17C]
		mov	[ebp+var_178], edx

loc_1B42:				; CODE XREF: _ucnv_UTF8FromUTF8+489j
		mov	eax, [ebp+var_178]
		add	eax, 1
		mov	[ebp+var_65], al
		movzx	eax, [ebp+var_7D]
		mov	[ebp+var_74], eax

$moreBytes$8965:			; CODE XREF: _ucnv_UTF8FromUTF8+1F4j
					; _ucnv_UTF8FromUTF8:loc_1C1Fj
		movsx	eax, [ebp+var_59]
		movsx	ecx, [ebp+var_65]
		cmp	eax, ecx
		jge	loc_1C24
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_20]
		jnb	short loc_1BAB
		mov	eax, [ebp+var_14]
		mov	cl, [eax]
		mov	[ebp+var_7D], cl
		movzx	eax, [ebp+var_7D]
		and	eax, 0C0h
		cmp	eax, 80h ; '€'
		jnz	short loc_1BA7
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		mov	al, [ebp+var_59]
		add	al, 1
		mov	[ebp+var_59], al
		mov	eax, [ebp+var_74]
		shl	eax, 6
		movzx	ecx, [ebp+var_7D]
		add	eax, ecx
		mov	[ebp+var_74], eax
		jmp	short loc_1BA9
; ---------------------------------------------------------------------------

loc_1BA7:				; CODE XREF: _ucnv_UTF8FromUTF8+517j
		jmp	short loc_1C24
; ---------------------------------------------------------------------------

loc_1BA9:				; CODE XREF: _ucnv_UTF8FromUTF8+539j
		jmp	short loc_1C1F
; ---------------------------------------------------------------------------

loc_1BAB:				; CODE XREF: _ucnv_UTF8FromUTF8+4FFj
		movsx	eax, [ebp+var_59]
		movsx	ecx, [ebp+var_4D]
		sub	eax, ecx
		mov	edx, [ebp+var_14]
		sub	edx, eax
		mov	[ebp+var_14], edx

loc_1BBD:				; CODE XREF: _ucnv_UTF8FromUTF8+57Ej
		movsx	eax, [ebp+var_4D]
		movsx	ecx, [ebp+var_59]
		cmp	eax, ecx
		jge	short loc_1BEC
		movsx	eax, [ebp+var_4D]
		mov	ecx, [ebp+var_8]
		mov	edx, [ebp+var_14]
		mov	dl, [edx]
		mov	[ecx+eax+25h], dl
		mov	al, [ebp+var_4D]
		add	al, 1
		mov	[ebp+var_4D], al
		mov	ecx, [ebp+var_14]
		add	ecx, 1
		mov	[ebp+var_14], ecx
		jmp	short loc_1BBD
; ---------------------------------------------------------------------------

loc_1BEC:				; CODE XREF: _ucnv_UTF8FromUTF8+55Bj
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_74]
		mov	[eax+2Ch], ecx
		mov	eax, [ebp+var_8]
		mov	cl, [ebp+var_59]
		mov	[eax+24h], cl
		movsx	eax, [ebp+var_65]
		mov	ecx, [ebp+var_8]
		mov	[ecx+30h], eax
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_14]
		mov	[eax+8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_2C]
		mov	[eax+10h], ecx
		jmp	loc_1F42
; ---------------------------------------------------------------------------

loc_1C1F:				; CODE XREF: _ucnv_UTF8FromUTF8:loc_1BA9j
		jmp	$moreBytes$8965
; ---------------------------------------------------------------------------

loc_1C24:				; CODE XREF: _ucnv_UTF8FromUTF8+4F3j
					; _ucnv_UTF8FromUTF8:loc_1BA7j
		movsx	eax, [ebp+var_59]
		movsx	ecx, [ebp+var_65]
		cmp	eax, ecx
		jnz	short loc_1C7A
		movsx	eax, [ebp+var_59]
		cmp	eax, 3
		jz	short loc_1C42
		movsx	eax, [ebp+var_59]
		cmp	eax, 2
		jnz	short loc_1C7A

loc_1C42:				; CODE XREF: _ucnv_UTF8FromUTF8+5CBj
		movsx	eax, [ebp+var_59]
		mov	ecx, [ebp+var_74]
		sub	ecx, _utf8_offsets[eax*4]
		mov	[ebp+var_74], ecx
		movsx	edx, [ebp+var_59]
		mov	eax, [ebp+var_74]
		cmp	eax, _utf8_minLegal[edx*4]
		jl	short loc_1C7A
		cmp	[ebp+var_74], 0D7FFh
		jle	short loc_1C75
		cmp	[ebp+var_74], 0E000h
		jl	short loc_1C7A

loc_1C75:				; CODE XREF: _ucnv_UTF8FromUTF8+5FEj
		jmp	loc_1D19
; ---------------------------------------------------------------------------

loc_1C7A:				; CODE XREF: _ucnv_UTF8FromUTF8+5C2j
					; _ucnv_UTF8FromUTF8+5D4j ...
		movsx	eax, [ebp+var_59]
		movsx	ecx, [ebp+var_65]
		cmp	eax, ecx
		jnz	short loc_1CAF
		movsx	eax, [ebp+var_59]
		cmp	eax, 4
		jnz	short loc_1CAF
		mov	eax, [ebp+var_74]
		sub	eax, dword_15C
		mov	[ebp+var_74], eax
		cmp	[ebp+var_74], 10000h
		jl	short loc_1CAF
		cmp	[ebp+var_74], 10FFFFh
		jg	short loc_1CAF
		jmp	short loc_1D19
; ---------------------------------------------------------------------------

loc_1CAF:				; CODE XREF: _ucnv_UTF8FromUTF8+618j
					; _ucnv_UTF8FromUTF8+621j ...
		movsx	eax, [ebp+var_59]
		movsx	ecx, [ebp+var_4D]
		sub	eax, ecx
		mov	edx, [ebp+var_14]
		sub	edx, eax
		mov	[ebp+var_14], edx

loc_1CC1:				; CODE XREF: _ucnv_UTF8FromUTF8+682j
		movsx	eax, [ebp+var_4D]
		movsx	ecx, [ebp+var_59]
		cmp	eax, ecx
		jge	short loc_1CF0
		movsx	eax, [ebp+var_4D]
		mov	ecx, [ebp+var_8]
		mov	edx, [ebp+var_14]
		mov	dl, [edx]
		mov	[ecx+eax+25h], dl
		mov	al, [ebp+var_4D]
		add	al, 1
		mov	[ebp+var_4D], al
		mov	ecx, [ebp+var_14]
		add	ecx, 1
		mov	[ebp+var_14], ecx
		jmp	short loc_1CC1
; ---------------------------------------------------------------------------

loc_1CF0:				; CODE XREF: _ucnv_UTF8FromUTF8+65Fj
		mov	eax, [ebp+var_8]
		mov	cl, [ebp+var_59]
		mov	[eax+24h], cl
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_14]
		mov	[eax+8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_2C]
		mov	[eax+10h], ecx
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 0Ch
		jmp	loc_1F42
; ---------------------------------------------------------------------------

loc_1D19:				; CODE XREF: _ucnv_UTF8FromUTF8:loc_1C75j
					; _ucnv_UTF8FromUTF8+641j
		mov	[ebp+var_AD], 0
		jmp	short loc_1D30
; ---------------------------------------------------------------------------

loc_1D22:				; CODE XREF: _ucnv_UTF8FromUTF8+6EFj
		mov	al, [ebp+var_AD]
		add	al, 1
		mov	[ebp+var_AD], al

loc_1D30:				; CODE XREF: _ucnv_UTF8FromUTF8+6B4j
		movsx	eax, [ebp+var_AD]
		movsx	ecx, [ebp+var_4D]
		cmp	eax, ecx
		jge	short loc_1D5D
		movsx	eax, [ebp+var_AD]
		mov	ecx, [ebp+var_2C]
		mov	edx, [ebp+var_8]
		mov	al, [edx+eax+25h]
		mov	[ecx], al
		mov	ecx, [ebp+var_2C]
		add	ecx, 1
		mov	[ebp+var_2C], ecx
		jmp	short loc_1D22
; ---------------------------------------------------------------------------

loc_1D5D:				; CODE XREF: _ucnv_UTF8FromUTF8+6D1j
		movsx	eax, [ebp+var_59]
		movsx	ecx, [ebp+var_4D]
		sub	eax, ecx
		mov	edx, [ebp+var_14]
		sub	edx, eax
		mov	[ebp+var_14], edx
		jmp	short loc_1D7F
; ---------------------------------------------------------------------------

loc_1D71:				; CODE XREF: _ucnv_UTF8FromUTF8+73Ej
		mov	al, [ebp+var_AD]
		add	al, 1
		mov	[ebp+var_AD], al

loc_1D7F:				; CODE XREF: _ucnv_UTF8FromUTF8+703j
		movsx	eax, [ebp+var_AD]
		movsx	ecx, [ebp+var_59]
		cmp	eax, ecx
		jge	short loc_1DAC
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+var_14]
		mov	dl, [ecx]
		mov	[eax], dl
		mov	eax, [ebp+var_2C]
		add	eax, 1
		mov	[ebp+var_2C], eax
		mov	ecx, [ebp+var_14]
		add	ecx, 1
		mov	[ebp+var_14], ecx
		jmp	short loc_1D71
; ---------------------------------------------------------------------------

loc_1DAC:				; CODE XREF: _ucnv_UTF8FromUTF8+720j
		movsx	eax, [ebp+var_59]
		mov	ecx, [ebp+var_44]
		sub	ecx, eax
		mov	[ebp+var_44], ecx

loc_1DB8:				; CODE XREF: _ucnv_UTF8FromUTF8+238j
		jmp	loc_1865
; ---------------------------------------------------------------------------

loc_1DBD:				; CODE XREF: _ucnv_UTF8FromUTF8+1FDj
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0
		jg	loc_1F30
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_20]
		jnb	loc_1F30
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_2C]
		cmp	ecx, [eax+14h]
		jnz	short loc_1DEE
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 0Fh
		jmp	loc_1F30
; ---------------------------------------------------------------------------

loc_1DEE:				; CODE XREF: _ucnv_UTF8FromUTF8+772j
		mov	eax, [ebp+var_14]
		mov	cl, [eax]
		mov	[ebp+var_7D], cl
		movzx	eax, [ebp+var_7D]
		cmp	eax, 0F0h ; 'ð'
		jge	short loc_1E28
		movzx	ecx, [ebp+var_7D]
		xor	edx, edx
		cmp	ecx, 0C0h ; 'À'
		setnl	dl
		movzx	eax, [ebp+var_7D]
		xor	ecx, ecx
		cmp	eax, 0E0h ; 'à'
		setnl	cl
		add	edx, ecx
		mov	[ebp+var_178], edx
		jmp	short loc_1E73
; ---------------------------------------------------------------------------

loc_1E28:				; CODE XREF: _ucnv_UTF8FromUTF8+793j
		movzx	edx, [ebp+var_7D]
		cmp	edx, 0FEh ; 'þ'
		jge	short loc_1E5D
		movzx	eax, [ebp+var_7D]
		xor	ecx, ecx
		cmp	eax, 0F8h ; 'ø'
		setnl	cl
		movzx	edx, [ebp+var_7D]
		xor	eax, eax
		cmp	edx, 0FCh ; 'ü'
		setnl	al
		lea	ecx, [ecx+eax+3]
		mov	[ebp+var_17C], ecx
		jmp	short loc_1E67
; ---------------------------------------------------------------------------

loc_1E5D:				; CODE XREF: _ucnv_UTF8FromUTF8+7C6j
		mov	[ebp+var_17C], 0

loc_1E67:				; CODE XREF: _ucnv_UTF8FromUTF8+7EFj
		mov	edx, [ebp+var_17C]
		mov	[ebp+var_178], edx

loc_1E73:				; CODE XREF: _ucnv_UTF8FromUTF8+7BAj
		mov	eax, [ebp+var_178]
		add	eax, 1
		mov	[ebp+var_65], al
		movsx	eax, [ebp+var_65]
		mov	ecx, [ebp+var_20]
		sub	ecx, [ebp+var_14]
		cmp	eax, ecx
		jle	loc_1F27
		mov	[ebp+var_59], 0
		movzx	eax, [ebp+var_7D]
		mov	[ebp+var_74], eax

loc_1E9C:				; CODE XREF: _ucnv_UTF8FromUTF8+8B4j
		movsx	eax, [ebp+var_59]
		mov	ecx, [ebp+var_8]
		mov	dl, [ebp+var_7D]
		mov	[ecx+eax+25h], dl
		mov	al, [ebp+var_59]
		add	al, 1
		mov	[ebp+var_59], al
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		mov	ecx, [ebp+var_14]
		cmp	ecx, [ebp+var_20]
		jnz	short loc_1EE3
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_74]
		mov	[eax+2Ch], ecx
		mov	eax, [ebp+var_8]
		mov	cl, [ebp+var_59]
		mov	[eax+24h], cl
		movsx	eax, [ebp+var_65]
		mov	ecx, [ebp+var_8]
		mov	[ecx+30h], eax
		jmp	short loc_1F25
; ---------------------------------------------------------------------------
		jmp	short loc_1F11
; ---------------------------------------------------------------------------

loc_1EE3:				; CODE XREF: _ucnv_UTF8FromUTF8+855j
		mov	eax, [ebp+var_14]
		mov	cl, [eax]
		mov	[ebp+var_7D], cl
		movzx	edx, [ebp+var_7D]
		and	edx, 0C0h
		cmp	edx, 80h ; '€'
		jz	short loc_1F11
		mov	eax, [ebp+var_8]
		mov	cl, [ebp+var_59]
		mov	[eax+24h], cl
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 0Ch
		jmp	short loc_1F25
; ---------------------------------------------------------------------------

loc_1F11:				; CODE XREF: _ucnv_UTF8FromUTF8+875j
					; _ucnv_UTF8FromUTF8+88Fj
		mov	eax, [ebp+var_74]
		shl	eax, 6
		movzx	ecx, [ebp+var_7D]
		add	eax, ecx
		mov	[ebp+var_74], eax
		jmp	loc_1E9C
; ---------------------------------------------------------------------------

loc_1F25:				; CODE XREF: _ucnv_UTF8FromUTF8+873j
					; _ucnv_UTF8FromUTF8+8A3j
		jmp	short loc_1F30
; ---------------------------------------------------------------------------

loc_1F27:				; CODE XREF: _ucnv_UTF8FromUTF8+81Fj
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 0FFFFFF81h

loc_1F30:				; CODE XREF: _ucnv_UTF8FromUTF8+757j
					; _ucnv_UTF8FromUTF8+763j ...
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_14]
		mov	[eax+8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_2C]
		mov	[eax+10h], ecx

loc_1F42:				; CODE XREF: _ucnv_UTF8FromUTF8+B9j
					; _ucnv_UTF8FromUTF8+5AEj ...
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_ucnv_UTF8FromUTF8 endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ucnv_getCompleteUnicodeSet_56:near ; DATA XREF: .rdata:0000033Co
		extrn _ucnv_getNonSurrogateUnicodeSet_56:near ;	DATA XREF: .rdata:000001A4o
		extrn __RTC_CheckEsp:near ; CODE XREF: _ucnv_toUnicode_UTF8+2EAp
					; _ucnv_toUnicode_UTF8_OFFSETS_LOGIC+39Ap ...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn @_RTC_CheckStackVars@8:near
					; CODE XREF: _ucnv_fromUnicode_UTF8_56+31Fp
					; _ucnv_fromUnicode_UTF8_OFFSETS_LOGIC_56+400p


		end
