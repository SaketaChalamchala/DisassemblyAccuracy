;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	4232A468739AC954D845B2AAC55BF35E
; Input	CRC32 :	614D432C

; File Name   :	D:\compspace\objfiles\firefox\common\utrace.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		public ??_C@_0BB@EPGFDLCH@ucol_strcollUTF8?$AA@
; `string'
??_C@_0BB@EPGFDLCH@ucol_strcollUTF8?$AA@ db 'ucol_strcollUTF8',0
					; DATA XREF: .rdata:00000210o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14h
		public ??_C@_0BJ@LMBKEEBD@ucol_openFromShortString?$AA@
; `string'
??_C@_0BJ@LMBKEEBD@ucol_openFromShortString?$AA@ db 'ucol_openFromShortString',0
					; DATA XREF: .rdata:0000020Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 30h
		public ??_C@_0BB@HKNKLBKM@ucol_strcollIter?$AA@
; `string'
??_C@_0BB@HKNKLBKM@ucol_strcollIter?$AA@ db 'ucol_strcollIter',0
					; DATA XREF: .rdata:00000208o
					; .rdata:`string'o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 44h
		public ??_C@_0BF@POMMKAHN@ucol_nextSortKeyPart?$AA@
; `string'
??_C@_0BF@POMMKAHN@ucol_nextSortKeyPart?$AA@ db	'ucol_nextSortKeyPart',0
					; DATA XREF: .rdata:00000204o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5Ch
		public ??_C@_0P@HBEFODJK@ucol_getLocale?$AA@
; `string'
??_C@_0P@HBEFODJK@ucol_getLocale?$AA@ db 'ucol_getLocale',0 ; DATA XREF: .rdata:00000200o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6Ch
		public ??_C@_0BA@BGKCIAMK@ucol_getSortKey?$AA@
; `string'
??_C@_0BA@BGKCIAMK@ucol_getSortKey?$AA@	db 'ucol_getSortKey',0 ; DATA XREF: .rdata:000001FCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7Ch
		public ??_C@_0N@OEMAPCBD@ucol_strcoll?$AA@
; `string'
??_C@_0N@OEMAPCBD@ucol_strcoll?$AA@ db 'ucol_strcoll',0 ; DATA XREF: .rdata:000001F8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8Ch
		public ??_C@_0L@PAECEAI@ucol_close?$AA@
; `string'
??_C@_0L@PAECEAI@ucol_close?$AA@ db 'ucol_close',0 ; DATA XREF: .rdata:000001F4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 98h
		public ??_C@_09BEMBEFHC@ucol_open?$AA@
; `string'
??_C@_09BEMBEFHC@ucol_open?$AA@	db 'ucol_open',0 ; DATA XREF: .rdata:_trCollNameso
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A4h
		public ??_C@_0M@MKMJLDLA@ucnv_unload?$AA@
; `string'
??_C@_0M@MKMJLDLA@ucnv_unload?$AA@ db 'ucnv_unload',0 ; DATA XREF: .rdata:000001E8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B0h
		public ??_C@_09KJPJPLCD@ucnv_load?$AA@
; `string'
??_C@_09KJPJPLCD@ucnv_load?$AA@	db 'ucnv_load',0 ; DATA XREF: .rdata:000001E4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BCh
		public ??_C@_0BA@PPMLJIPE@ucnv_flushCache?$AA@
; `string'
??_C@_0BA@PPMLJIPE@ucnv_flushCache?$AA@	db 'ucnv_flushCache',0 ; DATA XREF: .rdata:000001E0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CCh
		public ??_C@_0L@PFAEBNKI@ucnv_close?$AA@
; `string'
??_C@_0L@PFAEBNKI@ucnv_close?$AA@ db 'ucnv_close',0 ; DATA XREF: .rdata:000001DCo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D8h
		public ??_C@_0L@OBPKCNIL@ucnv_clone?$AA@
; `string'
??_C@_0L@OBPKCNIL@ucnv_clone?$AA@ db 'ucnv_clone',0 ; DATA XREF: .rdata:000001D8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E4h
		public ??_C@_0BF@CKINLDEK@ucnv_openAlgorithmic?$AA@
; `string'
??_C@_0BF@CKINLDEK@ucnv_openAlgorithmic?$AA@ db	'ucnv_openAlgorithmic',0
					; DATA XREF: .rdata:000001D4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FCh
		public ??_C@_0BB@OMPPDLHP@ucnv_openPackage?$AA@
; `string'
??_C@_0BB@OMPPDLHP@ucnv_openPackage?$AA@ db 'ucnv_openPackage',0
					; DATA XREF: .rdata:000001D0o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 110h
		public ??_C@_09BLMFIGGM@ucnv_open?$AA@
; `string'
??_C@_09BLMFIGGM@ucnv_open?$AA@	db 'ucnv_open',0 ; DATA XREF: .rdata:_trConvNameso
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11Ch
		public ??_C@_09OJBLEFFC@u_cleanup?$AA@
; `string'
??_C@_09OJBLEFFC@u_cleanup?$AA@	db 'u_cleanup',0 ; DATA XREF: .rdata:000001C4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 128h
		public ??_C@_06GCJFLMHO@u_init?$AA@
; `string'
??_C@_06GCJFLMHO@u_init?$AA@ db	'u_init',0 ; DATA XREF: .rdata:_trFnNameo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 130h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
_pTraceEntryFunc dd ?			; DATA XREF: _utrace_entry_56+1Er
					; _utrace_entry_56+34r	...
_pTraceExitFunc	dd ?			; DATA XREF: _utrace_exit_56+1Er
					; _utrace_exit_56+C9r ...
_pTraceDataFunc	dd ?			; DATA XREF: _utrace_data_56+1Er
					; _utrace_data_56+46r ...
_gTraceContext	dd ?			; DATA XREF: _utrace_entry_56+2Dr
					; _utrace_exit_56+C3r ...
;
; Exported entry
;
		public _utrace_level_56
_utrace_level_56 dd ?			; DATA XREF: _utrace_setLevel_56+3Bw
					; _utrace_getLevel_56+1Er ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 144h
_gExitFmt	db 'Returns.',0         ; DATA XREF: _utrace_exit_56:$LN6o
					; _utrace_exit_56:loc_320o
		align 10h
_gExitFmtValue	db 'Returns %d.',0      ; DATA XREF: _utrace_exit_56:$LN5o
_gExitFmtStatus	db 'Returns.  Status = %d.',0 ; DATA XREF: _utrace_exit_56:$LN4o
		align 4
_gExitFmtValueStatus db	'Returns %d.  Status = %d.',0 ; DATA XREF: _utrace_exit_56:$LN3o
		align 10h
_gExitFmtPtrStatus db 'Returns %d.  Status = %p.',0 ; DATA XREF: _utrace_exit_56:$LN2o
		align 4
; `outputHexBytes'::`2'::gHexChars
?gHexChars@?1??outputHexBytes@@9@9 db 30h ; DATA XREF: _outputHexBytes+50r
a123456789abcde	db '123456789abcdef',0
		align 10h
_trFnName	dd offset ??_C@_06GCJFLMHO@u_init?$AA@
					; DATA XREF: _utrace_functionName_56+2Dr
					; "u_init"
		dd offset ??_C@_09OJBLEFFC@u_cleanup?$AA@ ; "u_cleanup"
		dd 0
_trConvNames	dd offset ??_C@_09BLMFIGGM@ucnv_open?$AA@ ; "ucnv_open"
		dd offset ??_C@_0BB@OMPPDLHP@ucnv_openPackage?$AA@ ; "ucnv_openPackage"
		dd offset ??_C@_0BF@CKINLDEK@ucnv_openAlgorithmic?$AA@ ; "ucnv_openAlgorithmic"
		dd offset ??_C@_0L@OBPKCNIL@ucnv_clone?$AA@ ; "ucnv_clone"
		dd offset ??_C@_0L@PFAEBNKI@ucnv_close?$AA@ ; "ucnv_close"
		dd offset ??_C@_0BA@PPMLJIPE@ucnv_flushCache?$AA@ ; "ucnv_flushCache"
		dd offset ??_C@_09KJPJPLCD@ucnv_load?$AA@ ; "ucnv_load"
		dd offset ??_C@_0M@MKMJLDLA@ucnv_unload?$AA@ ; "ucnv_unload"
		align 10h
_trCollNames	dd offset ??_C@_09BEMBEFHC@ucol_open?$AA@ ; "ucol_open"
		dd offset ??_C@_0L@PAECEAI@ucol_close?$AA@ ; "ucol_close"
		dd offset ??_C@_0N@OEMAPCBD@ucol_strcoll?$AA@ ;	"ucol_strcoll"
		dd offset ??_C@_0BA@BGKCIAMK@ucol_getSortKey?$AA@ ; "ucol_getSortKey"
		dd offset ??_C@_0P@HBEFODJK@ucol_getLocale?$AA@	; "ucol_getLocale"
		dd offset ??_C@_0BF@POMMKAHN@ucol_nextSortKeyPart?$AA@ ; "ucol_nextSortKeyPart"
		dd offset ??_C@_0BB@HKNKLBKM@ucol_strcollIter?$AA@ ; "ucol_strcollIter"
		dd offset ??_C@_0BJ@LMBKEEBD@ucol_openFromShortString?$AA@ ; "ucol_openFromShortString"
		dd offset ??_C@_0BB@EPGFDLCH@ucol_strcollUTF8?$AA@ ; "ucol_strcollUTF8"
		db 3 dup(0)
byte_217	db 0			; DATA XREF: _utrace_functionName_56+4Dr
					; _utrace_functionName_56+6Dr
_rdata		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 218h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utrace_entry_56
_utrace_entry_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	ds:_pTraceEntryFunc, 0
		jz	short loc_25C
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, ds:_gTraceContext
		push	ecx
		call	ds:_pTraceEntryFunc
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_25C:				; CODE XREF: _utrace_entry_56+25j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrace_entry_56 endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 270h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 274h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 278h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utrace_exit_56
_utrace_exit_56	proc near

var_DC		= dword	ptr -0DCh
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0DCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_DC]
		mov	ecx, 37h ; '7'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	ds:_pTraceExitFunc, 0
		jz	loc_358
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_DC], eax
		cmp	[ebp+var_DC], 12h ; switch 19 cases
		ja	short $LN1	; jumptable 000002C2 default case
		mov	ecx, [ebp+var_DC]
		movzx	edx, ds:$LN13[ecx]
		jmp	ds:$LN14[edx*4]	; switch jump
; ---------------------------------------------------------------------------

$LN6:					; CODE XREF: _utrace_exit_56+4Aj
					; DATA XREF: .text:$LN14o
		mov	[ebp+var_14], offset _gExitFmt ; jumptable 000002C2 case 0
		jmp	short loc_327
; ---------------------------------------------------------------------------

$LN5:					; CODE XREF: _utrace_exit_56+4Aj
					; DATA XREF: .text:$LN14o
		mov	[ebp+var_14], offset _gExitFmtValue ; jumptable	000002C2 case 1
		jmp	short loc_327
; ---------------------------------------------------------------------------

$LN4:					; CODE XREF: _utrace_exit_56+4Aj
					; DATA XREF: .text:$LN14o
		mov	[ebp+var_14], offset _gExitFmtStatus ; jumptable 000002C2 case 16
		jmp	short loc_327
; ---------------------------------------------------------------------------

$LN3:					; CODE XREF: _utrace_exit_56+4Aj
					; DATA XREF: .text:$LN14o
		mov	[ebp+var_14], offset _gExitFmtValueStatus ; jumptable 000002C2 case 17
		jmp	short loc_327
; ---------------------------------------------------------------------------

$LN2:					; CODE XREF: _utrace_exit_56+4Aj
					; DATA XREF: .text:$LN14o
		mov	[ebp+var_14], offset _gExitFmtPtrStatus	; jumptable 000002C2 case 18
		jmp	short loc_327
; ---------------------------------------------------------------------------

$LN1:					; CODE XREF: _utrace_exit_56+3Bj
					; _utrace_exit_56+4Aj
					; DATA XREF: ...
		xor	eax, eax	; jumptable 000002C2 default case
		jnz	short loc_320
		mov	ecx, ds:?__LINE__Var@?1??utrace_exit_56@@9@9 ; `utrace_exit_56'::`2'::__LINE__Var
		add	ecx, 16h
		mov	esi, esp
		push	ecx		; Line
		push	offset ??_C@_1FG@ONAEBEAN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_13COJANIEC@?$AA0?$AA?$AA@ ; Message
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_320:				; CODE XREF: _utrace_exit_56+80j
		mov	[ebp+var_14], offset _gExitFmt ; "Returns."

loc_327:				; CODE XREF: _utrace_exit_56+58j
					; _utrace_exit_56+61j ...
		lea	eax, [ebp+arg_8]
		mov	[ebp+var_8], eax
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, ds:_gTraceContext
		push	eax
		call	ds:_pTraceExitFunc
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_8], 0

loc_358:				; CODE XREF: _utrace_exit_56+25j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0DCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrace_exit_56	endp

; ---------------------------------------------------------------------------
$LN14		dd offset $LN6		; DATA XREF: _utrace_exit_56+4Ar
		dd offset $LN5		; jump table for switch	statement
		dd offset $LN4
		dd offset $LN3
		dd offset $LN2
		dd offset $LN1
$LN13		db	0,     1,     5,     5 ; DATA XREF: _utrace_exit_56+43r
		db	5,     5,     5,     5 ; indirect table	for switch statement
		db	5,     5,     5,     5
		db	5,     5,     5,     5
		db	2,     3,     4
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 398h
		public ??_C@_13COJANIEC@?$AA0?$AA?$AA@
; wchar_t `string'
??_C@_13COJANIEC@?$AA0?$AA?$AA@	dd offset ??_C@_0BB@HKNKLBKM@ucol_strcollIter?$AA@
					; DATA XREF: _utrace_exit_56+93o
_rdata		ends			; "ucol_strcollIter"

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 39Ch
		public ??_C@_1FG@ONAEBEAN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
; wchar_t `string'
??_C@_1FG@ONAEBEAN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@:
					; DATA XREF: _utrace_exit_56+8Eo
		unicode	0, <d:\mozilla\intl\icu\source\common\utrace.c>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 3F4h
		public ?__LINE__Var@?1??utrace_exit_56@@9@9
; `utrace_exit_56'::`2'::__LINE__Var
?__LINE__Var@?1??utrace_exit_56@@9@9 dd	offset ??_C@_0BJ@LMBKEEBD@ucol_openFromShortString?$AA@+17h
					; DATA XREF: _utrace_exit_56+82r
_data		ends			; "g"

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3F8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utrace_data_56
_utrace_data_56	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	ds:_pTraceDataFunc, 0
		jz	short loc_455
		lea	eax, [ebp+arg_C]
		mov	[ebp+var_8], eax
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, ds:_gTraceContext
		push	ecx
		call	ds:_pTraceDataFunc
		add	esp, 14h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_8], 0

loc_455:				; CODE XREF: _utrace_data_56+25j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrace_data_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 46Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utrace_vformat_56
_utrace_vformat_56 proc	near		; CODE XREF: _utrace_format_56+38p

var_188		= dword	ptr -188h
var_C0		= dword	ptr -0C0h
var_B4		= dword	ptr -0B4h
var_A8		= dword	ptr -0A8h
var_9C		= dword	ptr -9Ch
var_90		= dword	ptr -90h
var_84		= dword	ptr -84h
var_78		= dword	ptr -78h
var_6C		= dword	ptr -6Ch
var_5D		= byte ptr -5Dh
var_54		= dword	ptr -54h
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_29		= byte ptr -29h
var_1D		= byte ptr -1Dh
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 188h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_188]
		mov	ecx, 62h ; 'b'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	[ebp+var_14], 0
		mov	[ebp+var_48], 0
		mov	[ebp+var_44], 0

loc_4A6:				; CODE XREF: _utrace_vformat_56:loc_4EDj
					; _utrace_vformat_56:loc_AF5j
		mov	eax, [ebp+arg_C]
		add	eax, [ebp+var_14]
		mov	cl, [eax]
		mov	[ebp+var_1D], cl
		mov	edx, [ebp+var_14]
		add	edx, 1
		mov	[ebp+var_14], edx
		movsx	eax, [ebp+var_1D]
		cmp	eax, 25h ; '%'
		jz	short loc_4EF
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		lea	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		movzx	ecx, [ebp+var_1D]
		push	ecx
		call	_outputChar
		add	esp, 14h
		movsx	eax, [ebp+var_1D]
		test	eax, eax
		jnz	short loc_4ED
		jmp	loc_AFA
; ---------------------------------------------------------------------------

loc_4ED:				; CODE XREF: _utrace_vformat_56+7Aj
		jmp	short loc_4A6
; ---------------------------------------------------------------------------

loc_4EF:				; CODE XREF: _utrace_vformat_56+55j
		mov	eax, [ebp+arg_C]
		add	eax, [ebp+var_14]
		mov	cl, [eax]
		mov	[ebp+var_1D], cl
		mov	edx, [ebp+var_14]
		add	edx, 1
		mov	[ebp+var_14], edx
		movsx	eax, [ebp+var_1D]
		mov	[ebp+var_188], eax
		cmp	[ebp+var_188], 76h ; 'v' ; switch 119 cases
		ja	$LN1_0		; jumptable 00000527 default case
		mov	ecx, [ebp+var_188]
		movzx	edx, ds:$LN40[ecx]
		jmp	ds:$LN45[edx*4]	; switch jump
; ---------------------------------------------------------------------------

$LN30:					; CODE XREF: _utrace_vformat_56+BBj
					; DATA XREF: .text:$LN45o
		mov	eax, [ebp+arg_10] ; jumptable 00000527 case 99
		add	eax, 4
		mov	[ebp+arg_10], eax
		mov	ecx, [ebp+arg_10]
		mov	dl, [ecx-4]
		mov	[ebp+var_29], dl
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		lea	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		movzx	ecx, [ebp+var_29]
		push	ecx
		call	_outputChar
		add	esp, 14h
		jmp	loc_AF5
; ---------------------------------------------------------------------------

$LN29:					; CODE XREF: _utrace_vformat_56+BBj
					; DATA XREF: .text:$LN45o
		mov	eax, [ebp+arg_10] ; jumptable 00000527 case 115
		add	eax, 4
		mov	[ebp+arg_10], eax
		mov	ecx, [ebp+arg_10]
		mov	edx, [ecx-4]
		mov	[ebp+var_54], edx
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		lea	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_54]
		push	ecx
		call	_outputString
		add	esp, 14h
		jmp	loc_AF5
; ---------------------------------------------------------------------------

$LN28:					; CODE XREF: _utrace_vformat_56+BBj
					; DATA XREF: .text:$LN45o
		mov	eax, [ebp+arg_10] ; jumptable 00000527 case 83
		add	eax, 4
		mov	[ebp+arg_10], eax
		mov	ecx, [ebp+arg_10]
		mov	edx, [ecx-4]
		mov	[ebp+var_54], edx
		mov	eax, [ebp+arg_10]
		add	eax, 4
		mov	[ebp+arg_10], eax
		mov	ecx, [ebp+arg_10]
		mov	edx, [ecx-4]
		mov	[ebp+var_38], edx
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		lea	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_38]
		push	ecx
		mov	edx, [ebp+var_54]
		push	edx
		call	_outputUString
		add	esp, 18h
		jmp	loc_AF5
; ---------------------------------------------------------------------------

$LN27:					; CODE XREF: _utrace_vformat_56+BBj
					; DATA XREF: .text:$LN45o
		mov	eax, [ebp+arg_10] ; jumptable 00000527 case 98
		add	eax, 4
		mov	[ebp+arg_10], eax
		mov	ecx, [ebp+arg_10]
		mov	edx, [ecx-4]
		mov	[ebp+var_38], edx
		mov	eax, [ebp+arg_4]
		push	eax
		lea	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		push	2
		mov	eax, [ebp+var_38]
		cdq
		push	edx
		push	eax
		call	_outputHexBytes
		add	esp, 18h
		jmp	loc_AF5
; ---------------------------------------------------------------------------

$LN26:					; CODE XREF: _utrace_vformat_56+BBj
					; DATA XREF: .text:$LN45o
		mov	eax, [ebp+arg_10] ; jumptable 00000527 case 104
		add	eax, 4
		mov	[ebp+arg_10], eax
		mov	ecx, [ebp+arg_10]
		mov	edx, [ecx-4]
		mov	[ebp+var_38], edx
		mov	eax, [ebp+arg_4]
		push	eax
		lea	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		push	4
		mov	eax, [ebp+var_38]
		cdq
		push	edx
		push	eax
		call	_outputHexBytes
		add	esp, 18h
		jmp	loc_AF5
; ---------------------------------------------------------------------------

$LN25:					; CODE XREF: _utrace_vformat_56+BBj
					; DATA XREF: .text:$LN45o
		mov	eax, [ebp+arg_10] ; jumptable 00000527 case 100
		add	eax, 4
		mov	[ebp+arg_10], eax
		mov	ecx, [ebp+arg_10]
		mov	edx, [ecx-4]
		mov	[ebp+var_38], edx
		mov	eax, [ebp+arg_4]
		push	eax
		lea	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		push	8
		mov	eax, [ebp+var_38]
		cdq
		push	edx
		push	eax
		call	_outputHexBytes
		add	esp, 18h
		jmp	loc_AF5
; ---------------------------------------------------------------------------

$LN24:					; CODE XREF: _utrace_vformat_56+BBj
					; DATA XREF: .text:$LN45o
		mov	eax, [ebp+arg_10] ; jumptable 00000527 case 108
		add	eax, 8
		mov	[ebp+arg_10], eax
		mov	ecx, [ebp+arg_10]
		mov	edx, [ecx-8]
		mov	[ebp+var_48], edx
		mov	eax, [ecx-4]
		mov	[ebp+var_44], eax
		mov	eax, [ebp+arg_4]
		push	eax
		lea	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		push	10h
		mov	eax, [ebp+var_44]
		push	eax
		mov	ecx, [ebp+var_48]
		push	ecx
		call	_outputHexBytes
		add	esp, 18h
		jmp	loc_AF5
; ---------------------------------------------------------------------------

$LN23:					; CODE XREF: _utrace_vformat_56+BBj
					; DATA XREF: .text:$LN45o
		mov	eax, [ebp+arg_10] ; jumptable 00000527 case 112
		add	eax, 4
		mov	[ebp+arg_10], eax
		mov	ecx, [ebp+arg_10]
		mov	edx, [ecx-4]
		mov	[ebp+var_54], edx
		mov	eax, [ebp+arg_4]
		push	eax
		lea	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_54]
		push	eax
		call	_outputPtrBytes
		add	esp, 10h
		jmp	loc_AF5
; ---------------------------------------------------------------------------

$LN22:					; CODE XREF: _utrace_vformat_56+BBj
					; DATA XREF: .text:$LN45o
		mov	eax, [ebp+arg_8] ; jumptable 00000527 case 0
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		lea	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		push	25h ; '%'
		call	_outputChar
		add	esp, 14h
		mov	eax, [ebp+var_14]
		sub	eax, 1
		mov	[ebp+var_14], eax
		jmp	loc_AF5
; ---------------------------------------------------------------------------

$LN21:					; CODE XREF: _utrace_vformat_56+BBj
					; DATA XREF: .text:$LN45o
		mov	[ebp+var_B4], 0	; jumptable 00000527 case 118
		mov	eax, [ebp+arg_C]
		add	eax, [ebp+var_14]
		mov	cl, [eax]
		mov	[ebp+var_5D], cl
		movsx	eax, [ebp+var_5D]
		test	eax, eax
		jz	short loc_72F
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax

loc_72F:				; CODE XREF: _utrace_vformat_56+2B8j
		mov	eax, [ebp+arg_10]
		add	eax, 4
		mov	[ebp+arg_10], eax
		mov	ecx, [ebp+arg_10]
		mov	edx, [ecx-4]
		mov	[ebp+var_78], edx
		mov	eax, [ebp+var_78]
		mov	[ebp+var_84], eax
		mov	eax, [ebp+var_78]
		mov	[ebp+var_90], eax
		mov	eax, [ebp+var_78]
		mov	[ebp+var_9C], eax
		mov	eax, [ebp+var_78]
		mov	[ebp+var_A8], eax
		mov	eax, [ebp+arg_10]
		add	eax, 4
		mov	[ebp+arg_10], eax
		mov	ecx, [ebp+arg_10]
		mov	edx, [ecx-4]
		mov	[ebp+var_6C], edx
		cmp	[ebp+var_A8], 0
		jnz	short loc_7A2
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		lea	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		push	offset ??_C@_07FGIDHMDB@?$CKNULL?$CK?5?$AA@ ; "*NULL* "
		call	_outputString
		add	esp, 14h
		jmp	loc_A86
; ---------------------------------------------------------------------------

loc_7A2:				; CODE XREF: _utrace_vformat_56+312j
		mov	[ebp+var_C0], 0
		jmp	short loc_7BD
; ---------------------------------------------------------------------------

loc_7AE:				; CODE XREF: _utrace_vformat_56:loc_A81j
		mov	eax, [ebp+var_C0]
		add	eax, 1
		mov	[ebp+var_C0], eax

loc_7BD:				; CODE XREF: _utrace_vformat_56+340j
		mov	eax, [ebp+var_C0]
		cmp	eax, [ebp+var_6C]
		jl	short loc_7D2
		cmp	[ebp+var_6C], 0FFFFFFFFh
		jnz	loc_A86

loc_7D2:				; CODE XREF: _utrace_vformat_56+35Aj
		movsx	eax, [ebp+var_5D]
		mov	[ebp+var_188], eax
		mov	ecx, [ebp+var_188]
		sub	ecx, 53h ; 'S'
		mov	[ebp+var_188], ecx
		cmp	[ebp+var_188], 20h ; ' ' ; switch 33 cases
		ja	$LN12		; jumptable 00000805 default case
		mov	edx, [ebp+var_188]
		movzx	eax, ds:$LN41[edx]
		jmp	ds:$LN46[eax*4]	; switch jump
; ---------------------------------------------------------------------------

$LN11:					; CODE XREF: _utrace_vformat_56+399j
					; DATA XREF: .text:$LN46o
		mov	[ebp+var_B4], 2	; jumptable 00000805 case 15
		mov	eax, [ebp+var_78]
		movsx	eax, byte ptr [eax]
		cdq
		mov	[ebp+var_48], eax
		mov	[ebp+var_44], edx
		mov	ecx, [ebp+var_78]
		add	ecx, 1
		mov	[ebp+var_78], ecx
		jmp	$LN12		; jumptable 00000805 default case
; ---------------------------------------------------------------------------

$LN10:					; CODE XREF: _utrace_vformat_56+399j
					; DATA XREF: .text:$LN46o
		mov	[ebp+var_B4], 4	; jumptable 00000805 case 21
		mov	eax, [ebp+var_84]
		movsx	eax, word ptr [eax]
		cdq
		mov	[ebp+var_48], eax
		mov	[ebp+var_44], edx
		mov	ecx, [ebp+var_84]
		add	ecx, 2
		mov	[ebp+var_84], ecx
		jmp	$LN12		; jumptable 00000805 default case
; ---------------------------------------------------------------------------

$LN9:					; CODE XREF: _utrace_vformat_56+399j
					; DATA XREF: .text:$LN46o
		mov	[ebp+var_B4], 8	; jumptable 00000805 case 17
		mov	eax, [ebp+var_90]
		mov	eax, [eax]
		cdq
		mov	[ebp+var_48], eax
		mov	[ebp+var_44], edx
		mov	ecx, [ebp+var_90]
		add	ecx, 4
		mov	[ebp+var_90], ecx
		jmp	$LN12		; jumptable 00000805 default case
; ---------------------------------------------------------------------------

$LN8:					; CODE XREF: _utrace_vformat_56+399j
					; DATA XREF: .text:$LN46o
		mov	[ebp+var_B4], 10h ; jumptable 00000805 case 25
		mov	eax, [ebp+var_9C]
		mov	ecx, [eax]
		mov	[ebp+var_48], ecx
		mov	edx, [eax+4]
		mov	[ebp+var_44], edx
		mov	eax, [ebp+var_9C]
		add	eax, 8
		mov	[ebp+var_9C], eax
		jmp	$LN12		; jumptable 00000805 default case
; ---------------------------------------------------------------------------

$LN7:					; CODE XREF: _utrace_vformat_56+399j
					; DATA XREF: .text:$LN46o
		mov	[ebp+var_B4], 0	; jumptable 00000805 case 29
		mov	eax, [ebp+arg_4]
		push	eax
		lea	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_A8]
		mov	ecx, [eax]
		push	ecx
		call	_outputPtrBytes
		add	esp, 10h
		mov	eax, [ebp+var_A8]
		xor	ecx, ecx
		cmp	dword ptr [eax], 0
		setnz	cl
		mov	eax, ecx
		cdq
		mov	[ebp+var_48], eax
		mov	[ebp+var_44], edx
		mov	eax, [ebp+var_A8]
		add	eax, 4
		mov	[ebp+var_A8], eax
		jmp	$LN12		; jumptable 00000805 default case
; ---------------------------------------------------------------------------

$LN6_0:					; CODE XREF: _utrace_vformat_56+399j
					; DATA XREF: .text:$LN46o
		mov	[ebp+var_B4], 0	; jumptable 00000805 case 16
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		lea	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_78]
		movzx	edx, byte ptr [ecx]
		push	edx
		call	_outputChar
		add	esp, 14h
		mov	eax, [ebp+var_78]
		movsx	eax, byte ptr [eax]
		cdq
		mov	[ebp+var_48], eax
		mov	[ebp+var_44], edx
		mov	eax, [ebp+var_78]
		add	eax, 1
		mov	[ebp+var_78], eax
		jmp	$LN12		; jumptable 00000805 default case
; ---------------------------------------------------------------------------

$LN5_0:					; CODE XREF: _utrace_vformat_56+399j
					; DATA XREF: .text:$LN46o
		mov	[ebp+var_B4], 0	; jumptable 00000805 case 32
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		lea	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_A8]
		mov	edx, [ecx]
		push	edx
		call	_outputString
		add	esp, 14h
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		lea	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		push	0Ah
		call	_outputChar
		add	esp, 14h
		mov	eax, [ebp+var_A8]
		xor	ecx, ecx
		cmp	dword ptr [eax], 0
		setnz	cl
		mov	eax, ecx
		cdq
		mov	[ebp+var_48], eax
		mov	[ebp+var_44], edx
		mov	eax, [ebp+var_A8]
		add	eax, 4
		mov	[ebp+var_A8], eax
		jmp	short $LN12	; jumptable 00000805 default case
; ---------------------------------------------------------------------------

$LN4_0:					; CODE XREF: _utrace_vformat_56+399j
					; DATA XREF: .text:$LN46o
		mov	[ebp+var_B4], 0	; jumptable 00000805 case 0
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		lea	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		push	0FFFFFFFFh
		mov	ecx, [ebp+var_A8]
		mov	edx, [ecx]
		push	edx
		call	_outputUString
		add	esp, 18h
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		lea	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		push	0Ah
		call	_outputChar
		add	esp, 14h
		mov	eax, [ebp+var_A8]
		xor	ecx, ecx
		cmp	dword ptr [eax], 0
		setnz	cl
		mov	eax, ecx
		cdq
		mov	[ebp+var_48], eax
		mov	[ebp+var_44], edx
		mov	eax, [ebp+var_A8]
		add	eax, 4
		mov	[ebp+var_A8], eax

$LN12:					; CODE XREF: _utrace_vformat_56+386j
					; _utrace_vformat_56+399j ...
		cmp	[ebp+var_B4], 0	; jumptable 00000805 default case
		jle	short loc_A71
		mov	eax, [ebp+arg_4]
		push	eax
		lea	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_B4]
		push	eax
		mov	ecx, [ebp+var_44]
		push	ecx
		mov	edx, [ebp+var_48]
		push	edx
		call	_outputHexBytes
		add	esp, 18h
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		lea	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		push	20h ; ' '
		call	_outputChar
		add	esp, 14h

loc_A71:				; CODE XREF: _utrace_vformat_56+5C6j
		cmp	[ebp+var_6C], 0FFFFFFFFh
		jnz	short loc_A81
		mov	eax, [ebp+var_48]
		or	eax, [ebp+var_44]
		jnz	short loc_A81
		jmp	short loc_A86
; ---------------------------------------------------------------------------

loc_A81:				; CODE XREF: _utrace_vformat_56+609j
					; _utrace_vformat_56+611j
		jmp	loc_7AE
; ---------------------------------------------------------------------------

loc_A86:				; CODE XREF: _utrace_vformat_56+331j
					; _utrace_vformat_56+360j ...
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		lea	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		push	5Bh ; '['
		call	_outputChar
		add	esp, 14h
		mov	eax, [ebp+arg_4]
		push	eax
		lea	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		push	8
		mov	eax, [ebp+var_6C]
		cdq
		push	edx
		push	eax
		call	_outputHexBytes
		add	esp, 18h
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		lea	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		push	5Dh ; ']'
		call	_outputChar
		add	esp, 14h
		jmp	short loc_AF5
; ---------------------------------------------------------------------------

$LN1_0:					; CODE XREF: _utrace_vformat_56+A8j
					; _utrace_vformat_56+BBj
					; DATA XREF: ...
		mov	eax, [ebp+arg_8] ; jumptable 00000527 default case
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		lea	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		movzx	ecx, [ebp+var_1D]
		push	ecx
		call	_outputChar
		add	esp, 14h

loc_AF5:				; CODE XREF: _utrace_vformat_56+F1j
					; _utrace_vformat_56+124j ...
		jmp	loc_4A6
; ---------------------------------------------------------------------------

loc_AFA:				; CODE XREF: _utrace_vformat_56+7Cj
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		lea	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		push	0
		call	_outputChar
		add	esp, 14h
		mov	eax, [ebp+var_8]
		add	eax, 1
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN44
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 188h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrace_vformat_56 endp

; ---------------------------------------------------------------------------
		align 10h
$LN44		dd 1			; DATA XREF: _utrace_vformat_56+6B2o
		dd offset $LN43
$LN43		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00000B44o
		dd offset $LN42		; "outIx"
$LN42		db 'outIx',0            ; DATA XREF: .text:00000B50o
		align 4
$LN45		dd offset $LN22, offset	$LN28, offset $LN27, offset $LN30
					; DATA XREF: _utrace_vformat_56+BBr
		dd offset $LN25, offset	$LN26, offset $LN24, offset $LN23 ; jump table for switch statement
		dd offset $LN29, offset	$LN21, offset $LN1_0
$LN40		db	0,   0Ah,   0Ah,   0Ah ; DATA XREF: _utrace_vformat_56+B4r
		db    0Ah,   0Ah,   0Ah,   0Ah ; indirect table	for switch statement
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,   0Ah,     1
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,   0Ah,   0Ah
		db    0Ah,   0Ah,     2,     3
		db	4,   0Ah,   0Ah,   0Ah
		db	5,   0Ah,   0Ah,   0Ah
		db	6,   0Ah,   0Ah,   0Ah
		db	7,   0Ah,   0Ah,     8
		db    0Ah,   0Ah,     9
		align 10h
$LN46		dd offset $LN4_0	; DATA XREF: _utrace_vformat_56+399r
		dd offset $LN11		; jump table for switch	statement
		dd offset $LN6_0
		dd offset $LN9
		dd offset $LN10
		dd offset $LN8
		dd offset $LN7
		dd offset $LN5_0
		dd offset $LN12
$LN41		db	0,     8,     8,     8 ; DATA XREF: _utrace_vformat_56+392r
		db	8,     8,     8,     8 ; indirect table	for switch statement
		db	8,     8,     8,     8
		db	8,     8,     8,     1
		db	2,     3,     8,     8
		db	8,     4,     8,     8
		db	8,     5,     8,     8
		db	8,     6,     8,     8
		db	7
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C48h
		public ??_C@_07FGIDHMDB@?$CKNULL?$CK?5?$AA@
; `string'
??_C@_07FGIDHMDB@?$CKNULL?$CK?5?$AA@ db	'*NULL* ',0 ; DATA XREF: _utrace_vformat_56+324o
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C50h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_outputChar	proc near		; CODE XREF: _utrace_vformat_56+6Cp
					; _utrace_vformat_56+E9p ...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= byte ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0
		jz	short loc_CB6
		movsx	eax, [ebp+arg_0]
		cmp	eax, 0Ah
		jz	short loc_CA3
		movsx	eax, [ebp+arg_0]
		test	eax, eax
		jz	short loc_CA3
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		cmp	ecx, [ebp+arg_C]
		jge	short loc_CA3
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_4]
		movsx	eax, byte ptr [edx+ecx-1]
		cmp	eax, 0Ah
		jz	short loc_CB6

loc_CA3:				; CODE XREF: _outputChar+2Dj
					; _outputChar+35j ...
		movsx	eax, [ebp+arg_0]
		cmp	eax, 0Ah
		jnz	short loc_CF5
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		cmp	ecx, [ebp+arg_C]
		jl	short loc_CF5

loc_CB6:				; CODE XREF: _outputChar+24j
					; _outputChar+51j
		mov	[ebp+var_8], 0
		jmp	short loc_CC8
; ---------------------------------------------------------------------------

loc_CBF:				; CODE XREF: _outputChar+A3j
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax

loc_CC8:				; CODE XREF: _outputChar+6Dj
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_10]
		jge	short loc_CF5
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		cmp	ecx, [ebp+arg_C]
		jge	short loc_CE6
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_4]
		mov	byte ptr [edx+ecx], 20h	; ' '

loc_CE6:				; CODE XREF: _outputChar+88j
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		add	ecx, 1
		mov	edx, [ebp+arg_8]
		mov	[edx], ecx
		jmp	short loc_CBF
; ---------------------------------------------------------------------------

loc_CF5:				; CODE XREF: _outputChar+5Aj
					; _outputChar+64j ...
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		cmp	ecx, [ebp+arg_C]
		jge	short loc_D0D
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_4]
		mov	al, [ebp+arg_0]
		mov	[edx+ecx], al

loc_D0D:				; CODE XREF: _outputChar+ADj
		movsx	eax, [ebp+arg_0]
		test	eax, eax
		jz	short loc_D22
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		add	ecx, 1
		mov	edx, [ebp+arg_8]
		mov	[edx], ecx

loc_D22:				; CODE XREF: _outputChar+C3j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_outputChar	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0D2Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_outputHexBytes	proc near		; CODE XREF: _utrace_vformat_56+198p
					; _utrace_vformat_56+1CBp ...

var_D8		= byte ptr -0D8h
var_11		= byte ptr -11h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		lea	ecx, ds:0FFFFFFFCh[eax*4]
		mov	[ebp+var_8], ecx
		jmp	short loc_D62
; ---------------------------------------------------------------------------

loc_D59:				; CODE XREF: _outputHexBytes+74j
		mov	eax, [ebp+var_8]
		sub	eax, 4
		mov	[ebp+var_8], eax

loc_D62:				; CODE XREF: _outputHexBytes+2Bj
		cmp	[ebp+var_8], 0
		jl	short loc_DA2
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		call	__allshr
		and	eax, 0Fh
		and	edx, 0
		mov	al, ds:?gHexChars@?1??outputHexBytes@@9@9[eax] ; `outputHexBytes'::`2'::gHexChars
		mov	[ebp+var_11], al
		push	0
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		movzx	eax, [ebp+var_11]
		push	eax
		call	_outputChar
		add	esp, 14h
		jmp	short loc_D59
; ---------------------------------------------------------------------------

loc_DA2:				; CODE XREF: _outputHexBytes+3Aj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_outputHexBytes	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0DB8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_outputPtrBytes	proc near		; CODE XREF: _utrace_vformat_56+268p
					; _utrace_vformat_56+46Ep

var_E4		= byte ptr -0E4h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= byte ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_14], 1
		lea	eax, [ebp+arg_0]
		mov	[ebp+var_20], eax
		mov	[ebp+var_14], 0FFFFFFFFh
		mov	eax, [ebp+var_20]
		add	eax, 3
		mov	[ebp+var_20], eax
		mov	[ebp+var_8], 0
		jmp	short loc_E05
; ---------------------------------------------------------------------------

loc_DFC:				; CODE XREF: _outputPtrBytes+7Bj
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax

loc_E05:				; CODE XREF: _outputPtrBytes+42j
		cmp	[ebp+var_8], 4
		jnb	short loc_E35
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		push	2
		mov	eax, [ebp+var_20]
		movsx	eax, byte ptr [eax]
		cdq
		push	edx
		push	eax
		call	_outputHexBytes
		add	esp, 18h
		mov	eax, [ebp+var_20]
		add	eax, [ebp+var_14]
		mov	[ebp+var_20], eax
		jmp	short loc_DFC
; ---------------------------------------------------------------------------

loc_E35:				; CODE XREF: _outputPtrBytes+51j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_outputPtrBytes	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0E4Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_outputString	proc near		; CODE XREF: _utrace_vformat_56+11Cp
					; _utrace_vformat_56+329p ...

var_D8		= byte ptr -0D8h
var_11		= byte ptr -11h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_E7E
		mov	[ebp+arg_0], offset ??_C@_06LNGDCPN@?$CKNULL?$CK?$AA@ ;	"*NULL*"

loc_E7E:				; CODE XREF: _outputString+29j
					; _outputString+69j
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+var_8]
		mov	cl, [eax]
		mov	[ebp+var_11], cl
		mov	edx, [ebp+var_8]
		add	edx, 1
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		movzx	ecx, [ebp+var_11]
		push	ecx
		call	_outputChar
		add	esp, 14h
		movsx	eax, [ebp+var_11]
		test	eax, eax
		jnz	short loc_E7E
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_outputString	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ECCh
		public ??_C@_06LNGDCPN@?$CKNULL?$CK?$AA@
; `string'
??_C@_06LNGDCPN@?$CKNULL?$CK?$AA@ db '*NULL*',0 ; DATA XREF: _outputString+2Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0ED4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_outputUString	proc near		; CODE XREF: _utrace_vformat_56+165p
					; _utrace_vformat_56+577p

var_D8		= byte ptr -0D8h
var_14		= word ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_F1B
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		push	0
		call	_outputString
		add	esp, 14h
		jmp	short loc_F92
; ---------------------------------------------------------------------------

loc_F1B:				; CODE XREF: _outputUString+29j
		mov	[ebp+var_8], 0
		jmp	short loc_F2D
; ---------------------------------------------------------------------------

loc_F24:				; CODE XREF: _outputUString:loc_F90j
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax

loc_F2D:				; CODE XREF: _outputUString+4Ej
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_4]
		jl	short loc_F3B
		cmp	[ebp+arg_4], 0FFFFFFFFh
		jnz	short loc_F92

loc_F3B:				; CODE XREF: _outputUString+5Fj
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	dx, [ecx+eax*2]
		mov	[ebp+var_14], dx
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		push	4
		movzx	eax, [ebp+var_14]
		cdq
		push	edx
		push	eax
		call	_outputHexBytes
		add	esp, 18h
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		push	20h ; ' '
		call	_outputChar
		add	esp, 14h
		cmp	[ebp+arg_4], 0FFFFFFFFh
		jnz	short loc_F90
		movzx	eax, [ebp+var_14]
		test	eax, eax
		jnz	short loc_F90
		jmp	short loc_F92
; ---------------------------------------------------------------------------

loc_F90:				; CODE XREF: _outputUString+B0j
					; _outputUString+B8j
		jmp	short loc_F24
; ---------------------------------------------------------------------------

loc_F92:				; CODE XREF: _outputUString+45j
					; _outputUString+65j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_outputUString	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0FA8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utrace_format_56
_utrace_format_56 proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		lea	eax, [ebp+arg_10]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_14]
		push	eax
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_utrace_vformat_56
		add	esp, 14h
		mov	[ebp+var_8], eax
		mov	[ebp+var_14], 0
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrace_format_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 100Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utrace_setFunctions_56
_utrace_setFunctions_56	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	ds:_pTraceEntryFunc, eax
		mov	eax, [ebp+arg_8]
		mov	ds:_pTraceExitFunc, eax
		mov	eax, [ebp+arg_C]
		mov	ds:_pTraceDataFunc, eax
		mov	eax, [ebp+arg_0]
		mov	ds:_gTraceContext, eax
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_utrace_setFunctions_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1054h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utrace_getFunctions_56
_utrace_getFunctions_56	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	ecx, ds:_pTraceEntryFunc
		mov	[eax], ecx
		mov	eax, [ebp+arg_8]
		mov	ecx, ds:_pTraceExitFunc
		mov	[eax], ecx
		mov	eax, [ebp+arg_C]
		mov	ecx, ds:_pTraceDataFunc
		mov	[eax], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, ds:_gTraceContext
		mov	[eax], ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_utrace_getFunctions_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10A8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utrace_setLevel_56
_utrace_setLevel_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0FFFFFFFFh
		jge	short loc_10D3
		mov	[ebp+arg_0], 0FFFFFFFFh

loc_10D3:				; CODE XREF: _utrace_setLevel_56+22j
		cmp	[ebp+arg_0], 9
		jle	short loc_10E0
		mov	[ebp+arg_0], 9

loc_10E0:				; CODE XREF: _utrace_setLevel_56+2Fj
		mov	eax, [ebp+arg_0]
		mov	ds:_utrace_level_56, eax
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_utrace_setLevel_56 endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10F0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utrace_getLevel_56
_utrace_getLevel_56 proc near

var_C0		= byte ptr -0C0h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, ds:_utrace_level_56
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_utrace_getLevel_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 111Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utrace_cleanup_56
_utrace_cleanup_56 proc	near

var_C0		= byte ptr -0C0h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	ds:_pTraceEntryFunc, 0
		mov	ds:_pTraceExitFunc, 0
		mov	ds:_pTraceDataFunc, 0
		mov	ds:_utrace_level_56, 0FFFFFFFFh
		mov	ds:_gTraceContext, 0
		mov	al, 1
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_utrace_cleanup_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1178h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utrace_functionName_56
_utrace_functionName_56	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jl	short loc_11B0
		cmp	[ebp+arg_0], 2
		jge	short loc_11B0
		mov	eax, [ebp+arg_0]
		mov	eax, ds:_trFnName[eax*4]
		jmp	short loc_11F5
; ---------------------------------------------------------------------------
		jmp	short loc_11F5
; ---------------------------------------------------------------------------

loc_11B0:				; CODE XREF: _utrace_functionName_56+22j
					; _utrace_functionName_56+28j
		cmp	[ebp+arg_0], 1000h
		jl	short loc_11D0
		cmp	[ebp+arg_0], 1008h
		jge	short loc_11D0
		mov	eax, [ebp+arg_0]
		mov	eax, dword ptr (byte_217-404Bh)[eax*4]
		jmp	short loc_11F5
; ---------------------------------------------------------------------------
		jmp	short loc_11F5
; ---------------------------------------------------------------------------

loc_11D0:				; CODE XREF: _utrace_functionName_56+3Fj
					; _utrace_functionName_56+48j
		cmp	[ebp+arg_0], 2000h
		jl	short loc_11F0
		cmp	[ebp+arg_0], 2009h
		jge	short loc_11F0
		mov	eax, [ebp+arg_0]
		mov	eax, dword ptr (byte_217-8027h)[eax*4]
		jmp	short loc_11F5
; ---------------------------------------------------------------------------
		jmp	short loc_11F5
; ---------------------------------------------------------------------------

loc_11F0:				; CODE XREF: _utrace_functionName_56+5Fj
					; _utrace_functionName_56+68j
		mov	eax, offset ??_C@_0BO@LBCCFANB@?$FLBOGUS?5Trace?5Function?5Number?$FN?$AA@ ; "[BOGUS Trace Function Number]"

loc_11F5:				; CODE XREF: _utrace_functionName_56+34j
					; _utrace_functionName_56+36j ...
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_utrace_functionName_56	endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 11FCh
		public ??_C@_0BO@LBCCFANB@?$FLBOGUS?5Trace?5Function?5Number?$FN?$AA@
; `string'
??_C@_0BO@LBCCFANB@?$FLBOGUS?5Trace?5Function?5Number?$FN?$AA@ db '[BOGUS Trace Function Number]',0
					; DATA XREF: _utrace_functionName_56:loc_11F0o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_CheckEsp:near ; CODE XREF: _utrace_entry_56+3Fp
					; _utrace_entry_56+4Fp	...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; void __cdecl __wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
		extrn __imp___wassert:near ; CODE XREF:	_utrace_exit_56+98p
					; DATA XREF: _utrace_exit_56+98r
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _utrace_vformat_56+6B8p
		extrn __allshr:near	; CODE XREF: _outputHexBytes+45p


		end
