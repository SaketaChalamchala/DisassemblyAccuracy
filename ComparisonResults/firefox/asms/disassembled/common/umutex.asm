;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	6283455EE851C517066A8B93F277FDE9
; Input	CRC32 :	1552FE14

; File Name   :	D:\compspace\objfiles\firefox\common\umutex.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing
_globalMutex	dd 8 dup(?)		; DATA XREF: _umtx_lock_56+24o
					; _umtx_unlock_56+24o
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 20h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int)
		public ??2@YAPAXI@Z
??2@YAPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi

loc_2C:					; DATA XREF: .rdata:`string'o
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??2@YAPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 58h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 5Ch
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 60h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX@Z
??3@YAXPAX@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??3@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 94h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__cdecl	icu_56::umtx_initImplPreInit(icu_56 *__hidden this, struct icu_56::UInitOnce *)
		public ?umtx_initImplPreInit@icu_56@@YACAAUUInitOnce@1@@Z
?umtx_initImplPreInit@icu_56@@YACAAUUInitOnce@1@@Z proc	near
					; CODE XREF: icu_56::umtx_initOnce<_RTL_CRITICAL_SECTION *>(icu_56::UInitOnce &,void (*)(_RTL_CRITICAL_SECTION *),_RTL_CRITICAL_SECTION	*)+35p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
Destination	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi		; volatile __int32 *
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd

loc_B2:					; CODE XREF: icu_56::umtx_initImplPreInit(icu_56::UInitOnce &):loc_10Aj
		mov	esi, esp
		push	0		; Comperand
		push	1		; Exchange
		mov	eax, [ebp+Destination]
		push	eax		; Destination
		call	dword ptr ds:__imp__InterlockedCompareExchange@12 ; InterlockedCompareExchange(x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jnz	short loc_D8
		mov	al, 1
		jmp	short loc_10C
; ---------------------------------------------------------------------------
		jmp	short loc_10A
; ---------------------------------------------------------------------------

loc_D8:					; CODE XREF: icu_56::umtx_initImplPreInit(icu_56::UInitOnce &)+3Cj
		cmp	[ebp+var_8], 2
		jnz	short loc_E4
		xor	al, al
		jmp	short loc_10C
; ---------------------------------------------------------------------------
		jmp	short loc_10A
; ---------------------------------------------------------------------------

loc_E4:					; CODE XREF: icu_56::umtx_initImplPreInit(icu_56::UInitOnce &)+48j
					; icu_56::umtx_initImplPreInit(icu_56::UInitOnce &)+74j
		mov	esi, esp
		push	1		; dwMilliseconds
		call	dword ptr ds:__imp__Sleep@4 ; Sleep(x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+Destination]
		push	eax		; Destination
		call	?umtx_loadAcquire@icu_56@@YAHACJ@Z ; icu_56::umtx_loadAcquire(long volatile &)
		add	esp, 4
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 1
		jz	short loc_E4

loc_10A:				; CODE XREF: icu_56::umtx_initImplPreInit(icu_56::UInitOnce &)+42j
					; icu_56::umtx_initImplPreInit(icu_56::UInitOnce &)+4Ej
		jmp	short loc_B2
; ---------------------------------------------------------------------------

loc_10C:				; CODE XREF: icu_56::umtx_initImplPreInit(icu_56::UInitOnce &)+40j
					; icu_56::umtx_initImplPreInit(icu_56::UInitOnce &)+4Cj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?umtx_initImplPreInit@icu_56@@YACAAUUInitOnce@1@@Z endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 120h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl icu_56::umtx_loadAcquire(volatile	LONG *Destination, volatile __int32 *)
		public ?umtx_loadAcquire@icu_56@@YAHACJ@Z
?umtx_loadAcquire@icu_56@@YAHACJ@Z proc	near
					; CODE XREF: icu_56::umtx_initImplPreInit(icu_56::UInitOnce &)+65p
					; icu_56::umtx_initOnce<_RTL_CRITICAL_SECTION *>(icu_56::UInitOnce &,void (*)(_RTL_CRITICAL_SECTION *),_RTL_CRITICAL_SECTION *)+22p

var_C0		= byte ptr -0C0h
Destination	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	esi, esp
		push	0		; Comperand
		push	0		; Exchange
		mov	eax, [ebp+Destination]
		push	eax		; Destination
		call	dword ptr ds:__imp__InterlockedCompareExchange@12 ; InterlockedCompareExchange(x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?umtx_loadAcquire@icu_56@@YAHACJ@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 16Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl icu_56::umtx_initImplPostInit(icu_56 *__hidden this, struct icu_56::UInitOnce *)
		public ?umtx_initImplPostInit@icu_56@@YAXAAUUInitOnce@1@@Z
?umtx_initImplPostInit@icu_56@@YAXAAUUInitOnce@1@@Z proc near
					; CODE XREF: icu_56::umtx_initOnce<_RTL_CRITICAL_SECTION *>(icu_56::UInitOnce &,void (*)(_RTL_CRITICAL_SECTION *),_RTL_CRITICAL_SECTION	*)+5Bp

var_C0		= byte ptr -0C0h
Target		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi		; int
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		push	2		; Value
		mov	eax, [ebp+Target]
		push	eax		; Target
		call	?umtx_storeRelease@icu_56@@YAXACJH@Z ; icu_56::umtx_storeRelease(long volatile &,int)
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?umtx_initImplPostInit@icu_56@@YAXAAUUInitOnce@1@@Z endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1ACh
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl icu_56::umtx_storeRelease(volatile LONG *Target,	LONG Value, int)
		public ?umtx_storeRelease@icu_56@@YAXACJH@Z
?umtx_storeRelease@icu_56@@YAXACJH@Z proc near
					; CODE XREF: icu_56::umtx_initImplPostInit(icu_56::UInitOnce &)+24p

var_C0		= byte ptr -0C0h
Target		= dword	ptr  8
Value		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	esi, esp
		mov	eax, [ebp+Value]
		push	eax		; Value
		mov	ecx, [ebp+Target]
		push	ecx		; Target
		call	dword ptr ds:__imp__InterlockedExchange@8 ; InterlockedExchange(x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?umtx_storeRelease@icu_56@@YAXACJH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1F8h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _umtx_lock_56
_umtx_lock_56	proc near		; CODE XREF: _umtx_condWait_56+125p
					; _umtx_condWait_56+19Ap

var_CC		= byte ptr -0CCh
lpCriticalSection= dword ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jnz	short loc_223
		mov	[ebp+arg_0], offset _globalMutex

loc_223:				; CODE XREF: _umtx_lock_56+22j
		mov	eax, [ebp+arg_0]
		add	eax, 8
		mov	[ebp+lpCriticalSection], eax
		mov	eax, [ebp+lpCriticalSection]
		push	eax
		push	offset ?winMutexInit@@YAXPAU_RTL_CRITICAL_SECTION@@@Z ;	winMutexInit(_RTL_CRITICAL_SECTION *)
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	??$umtx_initOnce@PAU_RTL_CRITICAL_SECTION@@@icu_56@@YAXAAUUInitOnce@0@P6AXPAU_RTL_CRITICAL_SECTION@@@Z1@Z ; icu_56::umtx_initOnce<_RTL_CRITICAL_SECTION	*>(icu_56::UInitOnce &,void (*)(_RTL_CRITICAL_SECTION *),_RTL_CRITICAL_SECTION *)
		add	esp, 0Ch
		mov	esi, esp
		mov	eax, [ebp+lpCriticalSection]
		push	eax		; lpCriticalSection
		call	dword ptr ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_umtx_lock_56	endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 268h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl winMutexInit(LPCRITICAL_SECTION lpCriticalSection)
?winMutexInit@@YAXPAU_RTL_CRITICAL_SECTION@@@Z proc near ; DATA	XREF: _umtx_lock_56+38o

var_C0		= byte ptr -0C0h
lpCriticalSection= dword ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	esi, esp
		mov	eax, [ebp+lpCriticalSection]
		push	eax		; lpCriticalSection
		call	dword ptr ds:__imp__InitializeCriticalSection@4	; InitializeCriticalSection(x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?winMutexInit@@YAXPAU_RTL_CRITICAL_SECTION@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2B0h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _umtx_unlock_56
_umtx_unlock_56	proc near		; CODE XREF: _umtx_condWait_56+102p
					; _umtx_condWait_56+176p

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jnz	short loc_2DB
		mov	[ebp+arg_0], offset _globalMutex

loc_2DB:				; CODE XREF: _umtx_unlock_56+22j
		mov	eax, [ebp+arg_0]
		add	eax, 8
		mov	esi, esp
		push	eax		; lpCriticalSection
		call	dword ptr ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_umtx_unlock_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 308h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _umtx_condBroadcast_56
_umtx_condBroadcast_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+8], 0
		jnz	short loc_331
		jmp	short loc_35C
; ---------------------------------------------------------------------------

loc_331:				; CODE XREF: _umtx_condBroadcast_56+25j
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		push	ecx		; hEvent
		call	dword ptr ds:__imp__ResetEvent@4 ; ResetEvent(x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx		; hEvent
		call	dword ptr ds:__imp__SetEvent@4 ; SetEvent(x)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_35C:				; CODE XREF: _umtx_condBroadcast_56+27j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_umtx_condBroadcast_56 endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 370h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _umtx_condSignal_56
_umtx_condSignal_56 proc near

var_C0		= byte ptr -0C0h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		xor	eax, eax
		jnz	short loc_3B8
		mov	ecx, ds:?__LINE__Var@?1??umtx_condSignal_56@@9@4JA ; long `umtx_condSignal_56'::`2'::__LINE__Var
		add	ecx, 5
		mov	esi, esp
		push	ecx		; Line
		push	offset ??_C@_1FK@DMNACNHE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_13COJANIEC@?$AA0?$AA?$AA@ ; Message
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_3B8:				; CODE XREF: _umtx_condSignal_56+20j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_umtx_condSignal_56 endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3CCh
		public ??_C@_13COJANIEC@?$AA0?$AA?$AA@
; wchar_t `string'
??_C@_13COJANIEC@?$AA0?$AA?$AA@	dd offset loc_2C+4 ; DATA XREF:	_umtx_condSignal_56+33o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 3D0h
		public ??_C@_1FK@DMNACNHE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
; wchar_t `string'
??_C@_1FK@DMNACNHE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@:
					; DATA XREF: _umtx_condSignal_56+2Eo
					; _umtx_condWait_56+3Fo ...
		unicode	0, <d:\mozilla\intl\icu\source\common\umutex.cpp>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 42Ch
		public ?__LINE__Var@?1??umtx_condSignal_56@@9@4JA
; long `umtx_condSignal_56'::`2'::__LINE__Var
?__LINE__Var@?1??umtx_condSignal_56@@9@4JA dd 90h ; DATA XREF: _umtx_condSignal_56+22r
_data		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 430h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _umtx_condWait_56
_umtx_condWait_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax], 0
		jnz	loc_51F
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+4], 0
		jz	short loc_489
		mov	ecx, ds:?__LINE__Var@?1??umtx_condWait_56@@9@4JA ; long	`umtx_condWait_56'::`2'::__LINE__Var
		add	ecx, 6
		mov	esi, esp
		push	ecx		; Line
		push	offset ??_C@_1FK@DMNACNHE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1DE@FDMDOOKG@?$AAc?$AAo?$AAn?$AAd?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAi?$AAt?$AAG?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; "condition->fExitGate ==	0"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_489:				; CODE XREF: _umtx_condWait_56+31j
		mov	esi, esp
		push	0		; lpName
		push	0		; bInitialState
		push	1		; bManualReset
		push	0		; lpEventAttributes
		call	dword ptr ds:__imp__CreateEventA@16 ; CreateEventA(x,x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+arg_0]
		mov	[ecx], eax
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax], 0
		jnz	short loc_4D3
		mov	ecx, ds:?__LINE__Var@?1??umtx_condWait_56@@9@4JA ; long	`umtx_condWait_56'::`2'::__LINE__Var
		add	ecx, 0Bh
		mov	esi, esp
		push	ecx		; Line
		push	offset ??_C@_1FK@DMNACNHE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1DG@KLKMHNJE@?$AAc?$AAo?$AAn?$AAd?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?9?$AA?$DO?$AAf?$AAE?$AAn?$AAt?$AAr?$AAy?$AAG?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; "condition->fEntryGate != 0"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_4D3:				; CODE XREF: _umtx_condWait_56+7Bj
		mov	esi, esp
		push	0		; lpName
		push	1		; bInitialState
		push	1		; bManualReset
		push	0		; lpEventAttributes
		call	dword ptr ds:__imp__CreateEventA@16 ; CreateEventA(x,x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+arg_0]
		mov	[ecx+4], eax
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+4], 0
		jnz	short loc_51F
		mov	ecx, ds:?__LINE__Var@?1??umtx_condWait_56@@9@4JA ; long	`umtx_condWait_56'::`2'::__LINE__Var
		add	ecx, 0Dh
		mov	esi, esp
		push	ecx		; Line
		push	offset ??_C@_1FK@DMNACNHE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1DE@GOFBIPMA@?$AAc?$AAo?$AAn?$AAd?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAi?$AAt?$AAG?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; "condition->fExitGate !=	0"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_51F:				; CODE XREF: _umtx_condWait_56+24j
					; _umtx_condWait_56+C7j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		add	ecx, 1
		mov	edx, [ebp+arg_0]
		mov	[edx+8], ecx
		mov	eax, [ebp+arg_4]
		push	eax
		call	_umtx_unlock_56
		add	esp, 4
		mov	esi, esp
		push	0FFFFFFFFh	; dwMilliseconds
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx		; hHandle
		call	dword ptr ds:__imp__WaitForSingleObject@8 ; WaitForSingleObject(x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_4]
		push	eax
		call	_umtx_lock_56
		add	esp, 4
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		sub	ecx, 1
		mov	edx, [ebp+arg_0]
		mov	[edx+8], ecx
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+8], 0
		jnz	short loc_5A2
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx		; hEvent
		call	dword ptr ds:__imp__ResetEvent@4 ; ResetEvent(x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		push	ecx		; hEvent
		call	dword ptr ds:__imp__SetEvent@4 ; SetEvent(x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_5D2
; ---------------------------------------------------------------------------

loc_5A2:				; CODE XREF: _umtx_condWait_56+143j
		mov	eax, [ebp+arg_4]
		push	eax
		call	_umtx_unlock_56
		add	esp, 4
		mov	esi, esp
		push	0FFFFFFFFh	; dwMilliseconds
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		push	ecx		; hHandle
		call	dword ptr ds:__imp__WaitForSingleObject@8 ; WaitForSingleObject(x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_4]
		push	eax
		call	_umtx_lock_56
		add	esp, 4

loc_5D2:				; CODE XREF: _umtx_condWait_56+170j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_umtx_condWait_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5E8h
		public ??_C@_1DE@GOFBIPMA@?$AAc?$AAo?$AAn?$AAd?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAi?$AAt?$AAG?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
; wchar_t `string'
??_C@_1DE@GOFBIPMA@?$AAc?$AAo?$AAn?$AAd?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAi?$AAt?$AAG?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@:
					; DATA XREF: _umtx_condWait_56+DAo
		unicode	0, <condition->
		dw 3Eh
		unicode	0, <fExitGate != 0>,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 61Ch
		public ??_C@_1DG@KLKMHNJE@?$AAc?$AAo?$AAn?$AAd?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?9?$AA?$DO?$AAf?$AAE?$AAn?$AAt?$AAr?$AAy?$AAG?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
; wchar_t `string'
??_C@_1DG@KLKMHNJE@?$AAc?$AAo?$AAn?$AAd?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?9?$AA?$DO?$AAf?$AAE?$AAn?$AAt?$AAr?$AAy?$AAG?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@:
					; DATA XREF: _umtx_condWait_56+8Eo
		unicode	0, <condition->
		dw 3Eh
		unicode	0, <fEntryGate != 0>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 654h
		public ??_C@_1DE@FDMDOOKG@?$AAc?$AAo?$AAn?$AAd?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAi?$AAt?$AAG?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
; wchar_t `string'
??_C@_1DE@FDMDOOKG@?$AAc?$AAo?$AAn?$AAd?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?9?$AA?$DO?$AAf?$AAE?$AAx?$AAi?$AAt?$AAG?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@:
					; DATA XREF: _umtx_condWait_56+44o
		unicode	0, <condition->
		dw 3Eh
		unicode	0, <fExitGate == 0>,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 688h
		public ?__LINE__Var@?1??umtx_condWait_56@@9@4JA
; long `umtx_condWait_56'::`2'::__LINE__Var
?__LINE__Var@?1??umtx_condWait_56@@9@4JA dd 99h	; DATA XREF: _umtx_condWait_56+33r
					; _umtx_condWait_56+7Dr ...
_data		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 68Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_setMutexFunctions_56
_u_setMutexFunctions_56	proc near

var_C0		= byte ptr -0C0h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_14]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_6C8
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 10h

loc_6C8:				; CODE XREF: _u_setMutexFunctions_56+31j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_setMutexFunctions_56	endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 6DCh
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl U_SUCCESS(enum  UErrorCode)
?U_SUCCESS@@YACW4UErrorCode@@@Z	proc near ; CODE XREF: _u_setMutexFunctions_56+24p
					; _u_setAtomicIncDecFunctions_56+24p

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		setle	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?U_SUCCESS@@YACW4UErrorCode@@@Z	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 708h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_setAtomicIncDecFunctions_56
_u_setAtomicIncDecFunctions_56 proc near

var_C0		= byte ptr -0C0h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_744
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 10h

loc_744:				; CODE XREF: _u_setAtomicIncDecFunctions_56+31j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_setAtomicIncDecFunctions_56 endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 758h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl icu_56::umtx_initOnce<struct _RTL_CRITICAL_SECTION *>(struct icu_56::UInitOnce &, void (__cdecl *)(struct _RTL_CRITICAL_SECTION *), struct _RTL_CRITICAL_SECTION	*)
		public ??$umtx_initOnce@PAU_RTL_CRITICAL_SECTION@@@icu_56@@YAXAAUUInitOnce@0@P6AXPAU_RTL_CRITICAL_SECTION@@@Z1@Z
??$umtx_initOnce@PAU_RTL_CRITICAL_SECTION@@@icu_56@@YAXAAUUInitOnce@0@P6AXPAU_RTL_CRITICAL_SECTION@@@Z1@Z proc near
					; CODE XREF: _umtx_lock_56+41p

var_C0		= byte ptr -0C0h
Destination	= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi		; struct icu_56::UInitOnce *
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+Destination]
		push	eax		; Destination
		call	?umtx_loadAcquire@icu_56@@YAHACJ@Z ; icu_56::umtx_loadAcquire(long volatile &)
		add	esp, 4
		cmp	eax, 2
		jnz	short loc_789
		jmp	short loc_7BB
; ---------------------------------------------------------------------------

loc_789:				; CODE XREF: icu_56::umtx_initOnce<_RTL_CRITICAL_SECTION *>(icu_56::UInitOnce &,void (*)(_RTL_CRITICAL_SECTION *),_RTL_CRITICAL_SECTION	*)+2Dj
		mov	eax, [ebp+Destination]
		push	eax		; this
		call	?umtx_initImplPreInit@icu_56@@YACAAUUInitOnce@1@@Z ; icu_56::umtx_initImplPreInit(icu_56::UInitOnce &)
		add	esp, 4
		movsx	ecx, al
		test	ecx, ecx
		jz	short loc_7BB
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax
		call	[ebp+arg_4]
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+Destination]
		push	eax		; this
		call	?umtx_initImplPostInit@icu_56@@YAXAAUUInitOnce@1@@Z ; icu_56::umtx_initImplPostInit(icu_56::UInitOnce &)
		add	esp, 4

loc_7BB:				; CODE XREF: icu_56::umtx_initOnce<_RTL_CRITICAL_SECTION *>(icu_56::UInitOnce &,void (*)(_RTL_CRITICAL_SECTION *),_RTL_CRITICAL_SECTION	*)+2Fj
					; icu_56::umtx_initOnce<_RTL_CRITICAL_SECTION *>(icu_56::UInitOnce &,void (*)(_RTL_CRITICAL_SECTION *),_RTL_CRITICAL_SECTION *)+42j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??$umtx_initOnce@PAU_RTL_CRITICAL_SECTION@@@icu_56@@YAXAAUUInitOnce@0@P6AXPAU_RTL_CRITICAL_SECTION@@@Z1@Z endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn __imp__Sleep@4:near
					; CODE XREF: icu_56::umtx_initImplPreInit(icu_56::UInitOnce &)+54p
					; DATA XREF: icu_56::umtx_initImplPreInit(icu_56::UInitOnce &)+54r
; LONG __stdcall InterlockedCompareExchange(volatile LONG *Destination,	LONG Exchange, LONG Comperand)
		extrn __imp__InterlockedCompareExchange@12:near
					; CODE XREF: icu_56::umtx_initImplPreInit(icu_56::UInitOnce &)+28p
					; icu_56::umtx_loadAcquire(long	volatile &)+28p
					; DATA XREF: ...
		extrn __RTC_CheckEsp:near
					; CODE XREF: icu_56::umtx_initImplPreInit(icu_56::UInitOnce &)+30p
					; icu_56::umtx_initImplPreInit(icu_56::UInitOnce &)+5Cp ...
; LONG __stdcall InterlockedExchange(volatile LONG *Target, LONG Value)
		extrn __imp__InterlockedExchange@8:near
					; CODE XREF: icu_56::umtx_storeRelease(long volatile &,int)+28p
					; DATA XREF: icu_56::umtx_storeRelease(long volatile &,int)+28r
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp__EnterCriticalSection@4:near ; CODE	XREF: _umtx_lock_56+4Fp
					; DATA XREF: _umtx_lock_56+4Fr
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp__InitializeCriticalSection@4:near
					; CODE XREF: winMutexInit(_RTL_CRITICAL_SECTION	*)+24p
					; DATA XREF: winMutexInit(_RTL_CRITICAL_SECTION	*)+24r
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp__LeaveCriticalSection@4:near ; CODE	XREF: _umtx_unlock_56+34p
					; DATA XREF: _umtx_unlock_56+34r
; BOOL __stdcall SetEvent(HANDLE hEvent)
		extrn __imp__SetEvent@4:near ; CODE XREF: _umtx_condBroadcast_56+47p
					; _umtx_condWait_56+163p
					; DATA XREF: ...
; BOOL __stdcall ResetEvent(HANDLE hEvent)
		extrn __imp__ResetEvent@4:near ; CODE XREF: _umtx_condBroadcast_56+32p
					; _umtx_condWait_56+14Dp
					; DATA XREF: ...
; void __cdecl __wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
		extrn __imp___wassert:near ; CODE XREF:	_umtx_condSignal_56+38p
					; _umtx_condWait_56+49p ...
; DWORD	__stdcall WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds)
		extrn __imp__WaitForSingleObject@8:near	; CODE XREF: _umtx_condWait_56+114p
					; _umtx_condWait_56+189p
					; DATA XREF: ...
; HANDLE __stdcall CreateEventA(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState,	LPCSTR lpName)
		extrn __imp__CreateEventA@16:near ; CODE XREF: _umtx_condWait_56+63p
					; _umtx_condWait_56+ADp
					; DATA XREF: ...


		end
