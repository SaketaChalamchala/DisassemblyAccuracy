;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	580CE905F6DB2C7A45C58043CEE3BBDE
; Input	CRC32 :	BDC72035

; File Name   :	D:\compspace\objfiles\firefox\common\punycode.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
_basicToDigit	db 0FFh			; DATA XREF: _u_strFromPunycode_56+217r
		db 3 dup(0FFh)
		dd 0Bh dup(0FFFFFFFFh),	1D1C1B1Ah, 21201F1Eh, 0FFFF2322h
		dd 0FFFFFFFFh, 20100FFh, 6050403h, 0A090807h, 0E0D0C0Bh
		dd 1211100Fh, 16151413h, 0FF191817h, 0FFFFFFFFh, 20100FFh
		dd 6050403h, 0A090807h,	0E0D0C0Bh, 1211100Fh, 16151413h
		dd 0FF191817h, 21h dup(0FFFFFFFFh)
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 100h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int)
		public ??2@YAPAXI@Z
??2@YAPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??2@YAPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 138h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 13Ch
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 140h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX@Z
??3@YAXPAX@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??3@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 174h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_strToPunycode_56
_u_strToPunycode_56 proc near

var_498		= dword	ptr -498h
var_3D0		= word ptr -3D0h
var_3C4		= word ptr -3C4h
var_3B8		= dword	ptr -3B8h
var_3AC		= dword	ptr -3ACh
var_3A0		= dword	ptr -3A0h
var_394		= dword	ptr -394h
var_388		= dword	ptr -388h
var_37C		= dword	ptr -37Ch
var_370		= dword	ptr -370h
var_364		= dword	ptr -364h
var_358		= dword	ptr -358h
var_34C		= dword	ptr -34Ch
var_340		= dword	ptr -340h
var_334		= dword	ptr -334h
var_328		= dword	ptr -328h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 498h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_498]
		mov	ecx, 126h
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		cmp	[ebp+arg_14], 0
		jz	short loc_1B7
		mov	eax, [ebp+arg_14]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_1BE

loc_1B7:				; CODE XREF: _u_strToPunycode_56+2Cj
		xor	eax, eax
		jmp	loc_9C7
; ---------------------------------------------------------------------------

loc_1BE:				; CODE XREF: _u_strToPunycode_56+41j
		cmp	[ebp+arg_0], 0
		jz	short loc_1D6
		cmp	[ebp+arg_4], 0FFFFFFFFh
		jl	short loc_1D6
		cmp	[ebp+arg_8], 0
		jnz	short loc_1E6
		cmp	[ebp+arg_C], 0
		jz	short loc_1E6

loc_1D6:				; CODE XREF: _u_strToPunycode_56+4Ej
					; _u_strToPunycode_56+54j
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 1
		xor	eax, eax
		jmp	loc_9C7
; ---------------------------------------------------------------------------

loc_1E6:				; CODE XREF: _u_strToPunycode_56+5Aj
					; _u_strToPunycode_56+60j
		mov	[ebp+var_364], 0
		mov	eax, [ebp+var_364]
		mov	[ebp+var_3B8], eax
		cmp	[ebp+arg_4], 0FFFFFFFFh
		jnz	loc_410
		mov	[ebp+var_37C], 0
		jmp	short loc_221
; ---------------------------------------------------------------------------

loc_212:				; CODE XREF: _u_strToPunycode_56:loc_406j
		mov	eax, [ebp+var_37C]
		add	eax, 1
		mov	[ebp+var_37C], eax

loc_221:				; CODE XREF: _u_strToPunycode_56+9Cj
		mov	eax, [ebp+var_37C]
		mov	ecx, [ebp+arg_0]
		mov	dx, [ecx+eax*2]
		mov	[ebp+var_3C4], dx
		movzx	eax, [ebp+var_3C4]
		test	eax, eax
		jnz	short loc_245
		jmp	loc_40B
; ---------------------------------------------------------------------------

loc_245:				; CODE XREF: _u_strToPunycode_56+CAj
		cmp	[ebp+var_3B8], 0C8h ; 'È'
		jnz	short loc_261
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 8
		xor	eax, eax
		jmp	loc_9C7
; ---------------------------------------------------------------------------

loc_261:				; CODE XREF: _u_strToPunycode_56+DBj
		movzx	eax, [ebp+var_3C4]
		cmp	eax, 80h ; '€'
		jge	loc_2FE
		mov	eax, [ebp+var_3B8]
		mov	[ebp+eax*4+var_328], 0
		mov	ecx, [ebp+var_3B8]
		add	ecx, 1
		mov	[ebp+var_3B8], ecx
		mov	eax, [ebp+var_364]
		cmp	eax, [ebp+arg_C]
		jge	short loc_2EA
		cmp	[ebp+arg_10], 0
		jz	short loc_2C9
		mov	eax, [ebp+arg_10]
		add	eax, [ebp+var_37C]
		movzx	ecx, byte ptr [eax]
		push	ecx
		movzx	edx, byte ptr [ebp+var_3C4]
		push	edx
		call	?asciiCaseMap@@YADDC@Z ; asciiCaseMap(char,signed char)
		add	esp, 8
		mov	byte ptr [ebp+var_498+3], al
		jmp	short loc_2D5
; ---------------------------------------------------------------------------

loc_2C9:				; CODE XREF: _u_strToPunycode_56+12Ej
		mov	al, byte ptr [ebp+var_3C4]
		mov	byte ptr [ebp+var_498+3], al

loc_2D5:				; CODE XREF: _u_strToPunycode_56+153j
		movsx	cx, byte ptr [ebp+var_498+3]
		mov	edx, [ebp+var_364]
		mov	eax, [ebp+arg_8]
		mov	[eax+edx*2], cx

loc_2EA:				; CODE XREF: _u_strToPunycode_56+128j
		mov	eax, [ebp+var_364]
		add	eax, 1
		mov	[ebp+var_364], eax
		jmp	loc_406
; ---------------------------------------------------------------------------

loc_2FE:				; CODE XREF: _u_strToPunycode_56+F9j
		cmp	[ebp+arg_10], 0
		jz	short loc_320
		mov	eax, [ebp+arg_10]
		add	eax, [ebp+var_37C]
		movsx	ecx, byte ptr [eax]
		test	ecx, ecx
		jz	short loc_320
		mov	[ebp+var_498], 1
		jmp	short loc_32A
; ---------------------------------------------------------------------------

loc_320:				; CODE XREF: _u_strToPunycode_56+18Ej
					; _u_strToPunycode_56+19Ej
		mov	[ebp+var_498], 0

loc_32A:				; CODE XREF: _u_strToPunycode_56+1AAj
		mov	edx, [ebp+var_498]
		shl	edx, 1Fh
		mov	[ebp+var_334], edx
		movzx	eax, [ebp+var_3C4]
		and	eax, 0FFFFF800h
		cmp	eax, 0D800h
		jz	short loc_364
		movzx	eax, [ebp+var_3C4]
		or	eax, [ebp+var_334]
		mov	[ebp+var_334], eax
		jmp	loc_3E4
; ---------------------------------------------------------------------------

loc_364:				; CODE XREF: _u_strToPunycode_56+1D6j
		movzx	eax, [ebp+var_3C4]
		and	eax, 0FFFFFC00h
		cmp	eax, 0D800h
		jnz	short loc_3D4
		mov	eax, [ebp+var_37C]
		mov	ecx, [ebp+arg_0]
		mov	dx, [ecx+eax*2+2]
		mov	[ebp+var_3D0], dx
		movzx	eax, [ebp+var_3D0]
		and	eax, 0FFFFFC00h
		cmp	eax, 0DC00h
		jnz	short loc_3D4
		mov	eax, [ebp+var_37C]
		add	eax, 1
		mov	[ebp+var_37C], eax
		movzx	eax, [ebp+var_3C4]
		shl	eax, 0Ah
		movzx	ecx, [ebp+var_3D0]
		lea	edx, [eax+ecx-35FDC00h]
		or	edx, [ebp+var_334]
		mov	[ebp+var_334], edx
		jmp	short loc_3E4
; ---------------------------------------------------------------------------

loc_3D4:				; CODE XREF: _u_strToPunycode_56+201j
					; _u_strToPunycode_56+229j
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0Ah
		xor	eax, eax
		jmp	loc_9C7
; ---------------------------------------------------------------------------

loc_3E4:				; CODE XREF: _u_strToPunycode_56+1EBj
					; _u_strToPunycode_56+25Ej
		mov	eax, [ebp+var_3B8]
		mov	ecx, [ebp+var_334]
		mov	[ebp+eax*4+var_328], ecx
		mov	edx, [ebp+var_3B8]
		add	edx, 1
		mov	[ebp+var_3B8], edx

loc_406:				; CODE XREF: _u_strToPunycode_56+185j
		jmp	loc_212
; ---------------------------------------------------------------------------

loc_40B:				; CODE XREF: _u_strToPunycode_56+CCj
		jmp	loc_622
; ---------------------------------------------------------------------------

loc_410:				; CODE XREF: _u_strToPunycode_56+8Cj
		mov	[ebp+var_37C], 0
		jmp	short loc_42B
; ---------------------------------------------------------------------------

loc_41C:				; CODE XREF: _u_strToPunycode_56:loc_61Dj
		mov	eax, [ebp+var_37C]
		add	eax, 1
		mov	[ebp+var_37C], eax

loc_42B:				; CODE XREF: _u_strToPunycode_56+2A6j
		mov	eax, [ebp+var_37C]
		cmp	eax, [ebp+arg_4]
		jge	loc_622
		cmp	[ebp+var_3B8], 0C8h ; 'È'
		jnz	short loc_456
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 8
		xor	eax, eax
		jmp	loc_9C7
; ---------------------------------------------------------------------------

loc_456:				; CODE XREF: _u_strToPunycode_56+2D0j
		mov	eax, [ebp+var_37C]
		mov	ecx, [ebp+arg_0]
		mov	dx, [ecx+eax*2]
		mov	[ebp+var_3C4], dx
		movzx	eax, [ebp+var_3C4]
		cmp	eax, 80h ; '€'
		jge	loc_507
		mov	eax, [ebp+var_3B8]
		mov	[ebp+eax*4+var_328], 0
		mov	ecx, [ebp+var_3B8]
		add	ecx, 1
		mov	[ebp+var_3B8], ecx
		mov	eax, [ebp+var_364]
		cmp	eax, [ebp+arg_C]
		jge	short loc_4F3
		cmp	[ebp+arg_10], 0
		jz	short loc_4D2
		mov	eax, [ebp+arg_10]
		add	eax, [ebp+var_37C]
		movzx	ecx, byte ptr [eax]
		push	ecx
		movzx	edx, byte ptr [ebp+var_3C4]
		push	edx
		call	?asciiCaseMap@@YADDC@Z ; asciiCaseMap(char,signed char)
		add	esp, 8
		mov	byte ptr [ebp+var_498+3], al
		jmp	short loc_4DE
; ---------------------------------------------------------------------------

loc_4D2:				; CODE XREF: _u_strToPunycode_56+337j
		mov	al, byte ptr [ebp+var_3C4]
		mov	byte ptr [ebp+var_498+3], al

loc_4DE:				; CODE XREF: _u_strToPunycode_56+35Cj
		movsx	cx, byte ptr [ebp+var_498+3]
		mov	edx, [ebp+var_364]
		mov	eax, [ebp+arg_8]
		mov	[eax+edx*2], cx

loc_4F3:				; CODE XREF: _u_strToPunycode_56+331j
		mov	eax, [ebp+var_364]
		add	eax, 1
		mov	[ebp+var_364], eax
		jmp	loc_61D
; ---------------------------------------------------------------------------

loc_507:				; CODE XREF: _u_strToPunycode_56+302j
		cmp	[ebp+arg_10], 0
		jz	short loc_529
		mov	eax, [ebp+arg_10]
		add	eax, [ebp+var_37C]
		movsx	ecx, byte ptr [eax]
		test	ecx, ecx
		jz	short loc_529
		mov	[ebp+var_498], 1
		jmp	short loc_533
; ---------------------------------------------------------------------------

loc_529:				; CODE XREF: _u_strToPunycode_56+397j
					; _u_strToPunycode_56+3A7j
		mov	[ebp+var_498], 0

loc_533:				; CODE XREF: _u_strToPunycode_56+3B3j
		mov	edx, [ebp+var_498]
		shl	edx, 1Fh
		mov	[ebp+var_334], edx
		movzx	eax, [ebp+var_3C4]
		and	eax, 0FFFFF800h
		cmp	eax, 0D800h
		jz	short loc_56D
		movzx	eax, [ebp+var_3C4]
		or	eax, [ebp+var_334]
		mov	[ebp+var_334], eax
		jmp	loc_5FB
; ---------------------------------------------------------------------------

loc_56D:				; CODE XREF: _u_strToPunycode_56+3DFj
		movzx	eax, [ebp+var_3C4]
		and	eax, 0FFFFFC00h
		cmp	eax, 0D800h
		jnz	short loc_5EB
		mov	eax, [ebp+var_37C]
		add	eax, 1
		cmp	eax, [ebp+arg_4]
		jge	short loc_5EB
		mov	eax, [ebp+var_37C]
		mov	ecx, [ebp+arg_0]
		mov	dx, [ecx+eax*2+2]
		mov	[ebp+var_3D0], dx
		movzx	eax, [ebp+var_3D0]
		and	eax, 0FFFFFC00h
		cmp	eax, 0DC00h
		jnz	short loc_5EB
		mov	eax, [ebp+var_37C]
		add	eax, 1
		mov	[ebp+var_37C], eax
		movzx	eax, [ebp+var_3C4]
		shl	eax, 0Ah
		movzx	ecx, [ebp+var_3D0]
		lea	edx, [eax+ecx-35FDC00h]
		or	edx, [ebp+var_334]
		mov	[ebp+var_334], edx
		jmp	short loc_5FB
; ---------------------------------------------------------------------------

loc_5EB:				; CODE XREF: _u_strToPunycode_56+40Aj
					; _u_strToPunycode_56+418j ...
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0Ah
		xor	eax, eax
		jmp	loc_9C7
; ---------------------------------------------------------------------------

loc_5FB:				; CODE XREF: _u_strToPunycode_56+3F4j
					; _u_strToPunycode_56+475j
		mov	eax, [ebp+var_3B8]
		mov	ecx, [ebp+var_334]
		mov	[ebp+eax*4+var_328], ecx
		mov	edx, [ebp+var_3B8]
		add	edx, 1
		mov	[ebp+var_3B8], edx

loc_61D:				; CODE XREF: _u_strToPunycode_56+38Ej
		jmp	loc_41C
; ---------------------------------------------------------------------------

loc_622:				; CODE XREF: _u_strToPunycode_56:loc_40Bj
					; _u_strToPunycode_56+2C0j
		mov	eax, [ebp+var_364]
		mov	[ebp+var_358], eax
		cmp	[ebp+var_358], 0
		jle	short loc_663
		mov	eax, [ebp+var_364]
		cmp	eax, [ebp+arg_C]
		jge	short loc_654
		mov	eax, 2Dh ; '-'
		mov	ecx, [ebp+var_364]
		mov	edx, [ebp+arg_8]
		mov	[edx+ecx*2], ax

loc_654:				; CODE XREF: _u_strToPunycode_56+4CCj
		mov	eax, [ebp+var_364]
		add	eax, 1
		mov	[ebp+var_364], eax

loc_663:				; CODE XREF: _u_strToPunycode_56+4C1j
		mov	[ebp+var_334], 80h ; '€'
		mov	[ebp+var_340], 0
		mov	[ebp+var_370], 48h ; 'H'
		mov	eax, [ebp+var_358]
		mov	[ebp+var_34C], eax

loc_68D:				; CODE XREF: _u_strToPunycode_56+833j
		mov	eax, [ebp+var_34C]
		cmp	eax, [ebp+var_3B8]
		jge	loc_9AC
		mov	[ebp+var_388], 7FFFFFFFh
		mov	[ebp+var_37C], 0
		jmp	short loc_6C4
; ---------------------------------------------------------------------------

loc_6B5:				; CODE XREF: _u_strToPunycode_56:loc_713j
		mov	eax, [ebp+var_37C]
		add	eax, 1
		mov	[ebp+var_37C], eax

loc_6C4:				; CODE XREF: _u_strToPunycode_56+53Fj
		mov	eax, [ebp+var_37C]
		cmp	eax, [ebp+var_3B8]
		jge	short loc_715
		mov	eax, [ebp+var_37C]
		mov	ecx, [ebp+eax*4+var_328]
		and	ecx, 7FFFFFFFh
		mov	[ebp+var_394], ecx
		mov	eax, [ebp+var_334]
		cmp	eax, [ebp+var_394]
		jg	short loc_713
		mov	eax, [ebp+var_394]
		cmp	eax, [ebp+var_388]
		jge	short loc_713
		mov	eax, [ebp+var_394]
		mov	[ebp+var_388], eax

loc_713:				; CODE XREF: _u_strToPunycode_56+583j
					; _u_strToPunycode_56+591j
		jmp	short loc_6B5
; ---------------------------------------------------------------------------

loc_715:				; CODE XREF: _u_strToPunycode_56+55Cj
		mov	ecx, [ebp+var_388]
		sub	ecx, [ebp+var_334]
		mov	eax, 7FFFFF37h
		sub	eax, [ebp+var_340]
		mov	esi, [ebp+var_34C]
		add	esi, 1
		cdq
		idiv	esi
		cmp	ecx, eax
		jle	short loc_74C
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 5
		xor	eax, eax
		jmp	loc_9C7
; ---------------------------------------------------------------------------

loc_74C:				; CODE XREF: _u_strToPunycode_56+5C6j
		mov	eax, [ebp+var_388]
		sub	eax, [ebp+var_334]
		mov	ecx, [ebp+var_34C]
		add	ecx, 1
		imul	eax, ecx
		add	eax, [ebp+var_340]
		mov	[ebp+var_340], eax
		mov	eax, [ebp+var_388]
		mov	[ebp+var_334], eax
		mov	[ebp+var_37C], 0
		jmp	short loc_797
; ---------------------------------------------------------------------------

loc_788:				; CODE XREF: _u_strToPunycode_56:loc_984j
		mov	eax, [ebp+var_37C]
		add	eax, 1
		mov	[ebp+var_37C], eax

loc_797:				; CODE XREF: _u_strToPunycode_56+612j
		mov	eax, [ebp+var_37C]
		cmp	eax, [ebp+var_3B8]
		jge	loc_989
		mov	eax, [ebp+var_37C]
		mov	ecx, [ebp+eax*4+var_328]
		and	ecx, 7FFFFFFFh
		mov	[ebp+var_394], ecx
		mov	eax, [ebp+var_394]
		cmp	eax, [ebp+var_334]
		jge	short loc_7E4
		mov	eax, [ebp+var_340]
		add	eax, 1
		mov	[ebp+var_340], eax
		jmp	loc_984
; ---------------------------------------------------------------------------

loc_7E4:				; CODE XREF: _u_strToPunycode_56+65Aj
		mov	eax, [ebp+var_394]
		cmp	eax, [ebp+var_334]
		jnz	loc_984
		mov	eax, [ebp+var_340]
		mov	[ebp+var_394], eax
		mov	[ebp+var_3A0], 24h ; '$'
		jmp	short loc_81D
; ---------------------------------------------------------------------------

loc_80E:				; CODE XREF: _u_strToPunycode_56+771j
		mov	eax, [ebp+var_3A0]
		add	eax, 24h ; '$'
		mov	[ebp+var_3A0], eax

loc_81D:				; CODE XREF: _u_strToPunycode_56+698j
		mov	eax, [ebp+var_3A0]
		sub	eax, [ebp+var_370]
		mov	[ebp+var_3AC], eax
		cmp	[ebp+var_3AC], 1
		jge	short loc_844
		mov	[ebp+var_3AC], 1
		jmp	short loc_85F
; ---------------------------------------------------------------------------

loc_844:				; CODE XREF: _u_strToPunycode_56+6C2j
		mov	eax, [ebp+var_370]
		add	eax, 1Ah
		cmp	[ebp+var_3A0], eax
		jl	short loc_85F
		mov	[ebp+var_3AC], 1Ah

loc_85F:				; CODE XREF: _u_strToPunycode_56+6CEj
					; _u_strToPunycode_56+6DFj
		mov	eax, [ebp+var_394]
		cmp	eax, [ebp+var_3AC]
		jge	short loc_86F
		jmp	short loc_8EA
; ---------------------------------------------------------------------------

loc_86F:				; CODE XREF: _u_strToPunycode_56+6F7j
		mov	eax, [ebp+var_364]
		cmp	eax, [ebp+arg_C]
		jge	short loc_8B6
		push	0
		mov	eax, [ebp+var_394]
		sub	eax, [ebp+var_3AC]
		mov	ecx, 24h ; '$'
		sub	ecx, [ebp+var_3AC]
		cdq
		idiv	ecx
		add	edx, [ebp+var_3AC]
		push	edx
		call	?digitToBasic@@YADHC@Z ; digitToBasic(int,signed char)
		add	esp, 8
		movsx	dx, al
		mov	eax, [ebp+var_364]
		mov	ecx, [ebp+arg_8]
		mov	[ecx+eax*2], dx

loc_8B6:				; CODE XREF: _u_strToPunycode_56+704j
		mov	eax, [ebp+var_364]
		add	eax, 1
		mov	[ebp+var_364], eax
		mov	eax, [ebp+var_394]
		sub	eax, [ebp+var_3AC]
		mov	ecx, 24h ; '$'
		sub	ecx, [ebp+var_3AC]
		cdq
		idiv	ecx
		mov	[ebp+var_394], eax
		jmp	loc_80E
; ---------------------------------------------------------------------------

loc_8EA:				; CODE XREF: _u_strToPunycode_56+6F9j
		mov	eax, [ebp+var_364]
		cmp	eax, [ebp+arg_C]
		jge	short loc_92A
		mov	eax, [ebp+var_37C]
		cmp	[ebp+eax*4+var_328], 0
		setl	cl
		movzx	edx, cl
		push	edx
		mov	eax, [ebp+var_394]
		push	eax
		call	?digitToBasic@@YADHC@Z ; digitToBasic(int,signed char)
		add	esp, 8
		movsx	cx, al
		mov	edx, [ebp+var_364]
		mov	eax, [ebp+arg_8]
		mov	[eax+edx*2], cx

loc_92A:				; CODE XREF: _u_strToPunycode_56+77Fj
		mov	eax, [ebp+var_364]
		add	eax, 1
		mov	[ebp+var_364], eax
		mov	eax, [ebp+var_34C]
		cmp	eax, [ebp+var_358]
		setz	cl
		movzx	edx, cl
		push	edx
		mov	eax, [ebp+var_34C]
		add	eax, 1
		push	eax
		mov	ecx, [ebp+var_340]
		push	ecx
		call	?adaptBias@@YAHHHC@Z ; adaptBias(int,int,signed	char)
		add	esp, 0Ch
		mov	[ebp+var_370], eax
		mov	[ebp+var_340], 0
		mov	eax, [ebp+var_34C]
		add	eax, 1
		mov	[ebp+var_34C], eax

loc_984:				; CODE XREF: _u_strToPunycode_56+66Bj
					; _u_strToPunycode_56+67Cj
		jmp	loc_788
; ---------------------------------------------------------------------------

loc_989:				; CODE XREF: _u_strToPunycode_56+62Fj
		mov	eax, [ebp+var_340]
		add	eax, 1
		mov	[ebp+var_340], eax
		mov	eax, [ebp+var_334]
		add	eax, 1
		mov	[ebp+var_334], eax
		jmp	loc_68D
; ---------------------------------------------------------------------------

loc_9AC:				; CODE XREF: _u_strToPunycode_56+525j
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+var_364]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		call	_u_terminateUChars_56
		add	esp, 10h

loc_9C7:				; CODE XREF: _u_strToPunycode_56+45j
					; _u_strToPunycode_56+6Dj ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN66
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 498h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_strToPunycode_56 endp

; ---------------------------------------------------------------------------
		align 4
$LN66		dd 1			; DATA XREF: _u_strToPunycode_56+857o
		dd offset $LN65
$LN65		dd 0FFFFFCD8h, 320h	; DATA XREF: .text:000009FCo
		dd offset $LN64		; "cpBuffer"
$LN64		db 'cpBuffer',0         ; DATA XREF: .text:00000A08o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A18h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl U_FAILURE(enum  UErrorCode)
?U_FAILURE@@YACW4UErrorCode@@@Z	proc near ; CODE XREF: _u_strToPunycode_56+34p
					; _u_strFromPunycode_56+2Ap

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		setnle	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?U_FAILURE@@YACW4UErrorCode@@@Z	endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A44h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; char __cdecl digitToBasic(int, signed	char)
?digitToBasic@@YADHC@Z proc near	; CODE XREF: _u_strToPunycode_56+729p
					; _u_strToPunycode_56+79Dp

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 1Ah
		jge	short loc_A84
		movsx	eax, [ebp+arg_4]
		test	eax, eax
		jz	short loc_A7A
		mov	eax, [ebp+arg_0]
		add	eax, 41h ; 'A'
		jmp	short loc_A8A
; ---------------------------------------------------------------------------
		jmp	short loc_A82
; ---------------------------------------------------------------------------

loc_A7A:				; CODE XREF: digitToBasic(int,signed char)+2Aj
		mov	eax, [ebp+arg_0]
		add	eax, 61h ; 'a'
		jmp	short loc_A8A
; ---------------------------------------------------------------------------

loc_A82:				; CODE XREF: digitToBasic(int,signed char)+34j
		jmp	short loc_A8A
; ---------------------------------------------------------------------------

loc_A84:				; CODE XREF: digitToBasic(int,signed char)+22j
		mov	eax, [ebp+arg_0]
		add	eax, 16h

loc_A8A:				; CODE XREF: digitToBasic(int,signed char)+32j
					; digitToBasic(int,signed char)+3Cj ...
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?digitToBasic@@YADHC@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A94h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; char __cdecl asciiCaseMap(char, signed char)
?asciiCaseMap@@YADDC@Z proc near	; CODE XREF: _u_strToPunycode_56+145p
					; _u_strToPunycode_56+34Ep

var_C0		= byte ptr -0C0h
arg_0		= byte ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		movsx	eax, [ebp+arg_4]
		test	eax, eax
		jz	short loc_AD8
		movsx	eax, [ebp+arg_0]
		cmp	eax, 61h ; 'a'
		jl	short loc_AD6
		movsx	eax, [ebp+arg_0]
		cmp	eax, 7Ah ; 'z'
		jg	short loc_AD6
		movsx	eax, [ebp+arg_0]
		sub	eax, 20h ; ' '
		mov	[ebp+arg_0], al

loc_AD6:				; CODE XREF: asciiCaseMap(char,signed char)+2Dj
					; asciiCaseMap(char,signed char)+36j
		jmp	short loc_AF4
; ---------------------------------------------------------------------------

loc_AD8:				; CODE XREF: asciiCaseMap(char,signed char)+24j
		movsx	eax, [ebp+arg_0]
		cmp	eax, 41h ; 'A'
		jl	short loc_AF4
		movsx	eax, [ebp+arg_0]
		cmp	eax, 5Ah ; 'Z'
		jg	short loc_AF4
		movsx	eax, [ebp+arg_0]
		add	eax, 20h ; ' '
		mov	[ebp+arg_0], al

loc_AF4:				; CODE XREF: asciiCaseMap(char,signed char):loc_AD6j
					; asciiCaseMap(char,signed char)+4Bj ...
		mov	al, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?asciiCaseMap@@YADDC@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0B00h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl adaptBias(int, int, signed char)
?adaptBias@@YAHHHC@Z proc near		; CODE XREF: _u_strToPunycode_56+7E9p
					; _u_strFromPunycode_56+318p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		movsx	eax, [ebp+arg_8]
		test	eax, eax
		jz	short loc_B36
		mov	eax, [ebp+arg_0]
		cdq
		mov	ecx, 2BCh
		idiv	ecx
		mov	[ebp+arg_0], eax
		jmp	short loc_B41
; ---------------------------------------------------------------------------

loc_B36:				; CODE XREF: adaptBias(int,int,signed char)+24j
		mov	eax, [ebp+arg_0]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+arg_0], eax

loc_B41:				; CODE XREF: adaptBias(int,int,signed char)+34j
		mov	eax, [ebp+arg_0]
		cdq
		idiv	[ebp+arg_4]
		add	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		mov	[ebp+var_8], 0
		jmp	short loc_B60
; ---------------------------------------------------------------------------

loc_B57:				; CODE XREF: adaptBias(int,int,signed char)+77j
		mov	eax, [ebp+var_8]
		add	eax, 24h ; '$'
		mov	[ebp+var_8], eax

loc_B60:				; CODE XREF: adaptBias(int,int,signed char)+55j
		cmp	[ebp+arg_0], 1C7h
		jle	short loc_B79
		mov	eax, [ebp+arg_0]
		cdq
		mov	ecx, 23h ; '#'
		idiv	ecx
		mov	[ebp+arg_0], eax
		jmp	short loc_B57
; ---------------------------------------------------------------------------

loc_B79:				; CODE XREF: adaptBias(int,int,signed char)+67j
		mov	eax, [ebp+arg_0]
		imul	eax, 24h
		mov	ecx, [ebp+arg_0]
		add	ecx, 26h ; '&'
		cdq
		idiv	ecx
		add	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?adaptBias@@YAHHHC@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0B94h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_strFromPunycode_56
_u_strFromPunycode_56 proc near

var_19C		= dword	ptr -19Ch
var_D4		= dword	ptr -0D4h
var_C8		= dword	ptr -0C8h
var_BC		= word ptr -0BCh
var_B0		= dword	ptr -0B0h
var_A4		= dword	ptr -0A4h
var_98		= dword	ptr -98h
var_8C		= dword	ptr -8Ch
var_80		= dword	ptr -80h
var_74		= dword	ptr -74h
var_68		= dword	ptr -68h
var_5C		= dword	ptr -5Ch
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 19Ch
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_19C]
		mov	ecx, 67h ; 'g'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_14], 0
		jz	short loc_BCD
		mov	eax, [ebp+arg_14]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_BD4

loc_BCD:				; CODE XREF: _u_strFromPunycode_56+22j
		xor	eax, eax
		jmp	loc_1234
; ---------------------------------------------------------------------------

loc_BD4:				; CODE XREF: _u_strFromPunycode_56+37j
		cmp	[ebp+arg_0], 0
		jz	short loc_BEC
		cmp	[ebp+arg_4], 0FFFFFFFFh
		jl	short loc_BEC
		cmp	[ebp+arg_8], 0
		jnz	short loc_BFC
		cmp	[ebp+arg_C], 0
		jz	short loc_BFC

loc_BEC:				; CODE XREF: _u_strFromPunycode_56+44j
					; _u_strFromPunycode_56+4Aj
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 1
		xor	eax, eax
		jmp	loc_1234
; ---------------------------------------------------------------------------

loc_BFC:				; CODE XREF: _u_strFromPunycode_56+50j
					; _u_strFromPunycode_56+56j
		cmp	[ebp+arg_4], 0FFFFFFFFh
		jnz	short loc_C11
		mov	eax, [ebp+arg_0]
		push	eax
		call	_u_strlen_56
		add	esp, 4
		mov	[ebp+arg_4], eax

loc_C11:				; CODE XREF: _u_strFromPunycode_56+6Cj
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_44], eax

loc_C17:				; CODE XREF: _u_strFromPunycode_56:loc_C37j
		cmp	[ebp+var_44], 0
		jle	short loc_C39
		mov	eax, [ebp+var_44]
		sub	eax, 1
		mov	[ebp+var_44], eax
		mov	ecx, [ebp+var_44]
		mov	edx, [ebp+arg_0]
		movzx	eax, word ptr [edx+ecx*2]
		cmp	eax, 2Dh ; '-'
		jnz	short loc_C37
		jmp	short loc_C39
; ---------------------------------------------------------------------------

loc_C37:				; CODE XREF: _u_strFromPunycode_56+9Fj
		jmp	short loc_C17
; ---------------------------------------------------------------------------

loc_C39:				; CODE XREF: _u_strFromPunycode_56+87j
					; _u_strFromPunycode_56+A1j
		mov	eax, [ebp+var_44]
		mov	[ebp+var_98], eax
		mov	ecx, [ebp+var_98]
		mov	[ebp+var_38], ecx
		mov	edx, [ebp+var_38]
		mov	[ebp+var_14], edx
		cmp	[ebp+var_14], 0
		jge	short loc_C7C
		mov	eax, ds:?__LINE__Var@?1??u_strFromPunycode_56@@9@4JA ; long `u_strFromPunycode_56'::`2'::__LINE__Var
		add	eax, 21h ; '!'
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FO@NJAIDAAM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1BM@MEDOPMNL@?$AAd?$AAe?$AAs?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@ ; "destLength>=0"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_C7C:				; CODE XREF: _u_strFromPunycode_56+C1j
					; _u_strFromPunycode_56:loc_D13j
		cmp	[ebp+var_44], 0
		jle	loc_D18
		mov	eax, [ebp+var_44]
		sub	eax, 1
		mov	[ebp+var_44], eax
		mov	ecx, [ebp+var_44]
		mov	edx, [ebp+arg_0]
		mov	ax, [edx+ecx*2]
		mov	[ebp+var_BC], ax
		movzx	eax, [ebp+var_BC]
		cmp	eax, 80h ; '€'
		jl	short loc_CBE
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0Ah
		xor	eax, eax
		jmp	loc_1234
; ---------------------------------------------------------------------------

loc_CBE:				; CODE XREF: _u_strFromPunycode_56+118j
		mov	eax, [ebp+var_44]
		cmp	eax, [ebp+arg_C]
		jge	short loc_D13
		mov	eax, [ebp+var_44]
		mov	ecx, [ebp+arg_8]
		mov	dx, [ebp+var_BC]
		mov	[ecx+eax*2], dx
		cmp	[ebp+arg_10], 0
		jz	short loc_D13
		movzx	eax, [ebp+var_BC]
		cmp	eax, 41h ; 'A'
		jl	short loc_CFE
		movzx	ecx, [ebp+var_BC]
		cmp	ecx, 5Ah ; 'Z'
		jg	short loc_CFE
		mov	byte ptr [ebp+var_19C+3], 1
		jmp	short loc_D05
; ---------------------------------------------------------------------------

loc_CFE:				; CODE XREF: _u_strFromPunycode_56+153j
					; _u_strFromPunycode_56+15Fj
		mov	byte ptr [ebp+var_19C+3], 0

loc_D05:				; CODE XREF: _u_strFromPunycode_56+168j
		mov	edx, [ebp+arg_10]
		add	edx, [ebp+var_44]
		mov	al, byte ptr [ebp+var_19C+3]
		mov	[edx], al

loc_D13:				; CODE XREF: _u_strFromPunycode_56+130j
					; _u_strFromPunycode_56+147j
		jmp	loc_C7C
; ---------------------------------------------------------------------------

loc_D18:				; CODE XREF: _u_strFromPunycode_56+ECj
		mov	[ebp+var_8], 80h ; '€'
		mov	[ebp+var_20], 0
		mov	[ebp+var_2C], 48h ; 'H'
		mov	[ebp+var_A4], 3B9ACA00h
		cmp	[ebp+var_38], 0
		jle	short loc_D4B
		mov	eax, [ebp+var_38]
		add	eax, 1
		mov	[ebp+var_19C], eax
		jmp	short loc_D55
; ---------------------------------------------------------------------------

loc_D4B:				; CODE XREF: _u_strFromPunycode_56+1A7j
		mov	[ebp+var_19C], 0

loc_D55:				; CODE XREF: _u_strFromPunycode_56+1B5j
		mov	ecx, [ebp+var_19C]
		mov	[ebp+var_50], ecx

loc_D5E:				; CODE XREF: _u_strFromPunycode_56+683j
		mov	eax, [ebp+var_50]
		cmp	eax, [ebp+arg_4]
		jge	loc_121C
		mov	eax, [ebp+var_20]
		mov	[ebp+var_5C], eax
		mov	[ebp+var_68], 1
		mov	[ebp+var_74], 24h ; '$'
		jmp	short loc_D89
; ---------------------------------------------------------------------------

loc_D80:				; CODE XREF: _u_strFromPunycode_56+2EBj
		mov	eax, [ebp+var_74]
		add	eax, 24h ; '$'
		mov	[ebp+var_74], eax

loc_D89:				; CODE XREF: _u_strFromPunycode_56+1EAj
		mov	eax, [ebp+var_50]
		cmp	eax, [ebp+arg_4]
		jl	short loc_DA1
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0Ch
		xor	eax, eax
		jmp	loc_1234
; ---------------------------------------------------------------------------

loc_DA1:				; CODE XREF: _u_strFromPunycode_56+1FBj
		mov	eax, [ebp+var_50]
		mov	ecx, [ebp+arg_0]
		movzx	edx, byte ptr [ecx+eax*2]
		movsx	eax, _basicToDigit[edx]
		mov	[ebp+var_80], eax
		mov	ecx, [ebp+var_50]
		add	ecx, 1
		mov	[ebp+var_50], ecx
		cmp	[ebp+var_80], 0
		jge	short loc_DD4
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0Ah
		xor	eax, eax
		jmp	loc_1234
; ---------------------------------------------------------------------------

loc_DD4:				; CODE XREF: _u_strFromPunycode_56+22Ej
		mov	eax, 7FFFFFFFh
		sub	eax, [ebp+var_20]
		cdq
		idiv	[ebp+var_68]
		cmp	[ebp+var_80], eax
		jle	short loc_DF5
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0Ch
		xor	eax, eax
		jmp	loc_1234
; ---------------------------------------------------------------------------

loc_DF5:				; CODE XREF: _u_strFromPunycode_56+24Fj
		mov	eax, [ebp+var_80]
		imul	eax, [ebp+var_68]
		add	eax, [ebp+var_20]
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_74]
		sub	eax, [ebp+var_2C]
		mov	[ebp+var_8C], eax
		cmp	[ebp+var_8C], 1
		jge	short loc_E23
		mov	[ebp+var_8C], 1
		jmp	short loc_E38
; ---------------------------------------------------------------------------

loc_E23:				; CODE XREF: _u_strFromPunycode_56+281j
		mov	eax, [ebp+var_2C]
		add	eax, 1Ah
		cmp	[ebp+var_74], eax
		jl	short loc_E38
		mov	[ebp+var_8C], 1Ah

loc_E38:				; CODE XREF: _u_strFromPunycode_56+28Dj
					; _u_strFromPunycode_56+298j
		mov	eax, [ebp+var_80]
		cmp	eax, [ebp+var_8C]
		jge	short loc_E45
		jmp	short loc_E84
; ---------------------------------------------------------------------------

loc_E45:				; CODE XREF: _u_strFromPunycode_56+2ADj
		mov	ecx, 24h ; '$'
		sub	ecx, [ebp+var_8C]
		mov	eax, 7FFFFFFFh
		cdq
		idiv	ecx
		cmp	[ebp+var_68], eax
		jle	short loc_E6D
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0Ch
		xor	eax, eax
		jmp	loc_1234
; ---------------------------------------------------------------------------

loc_E6D:				; CODE XREF: _u_strFromPunycode_56+2C7j
		mov	eax, 24h ; '$'
		sub	eax, [ebp+var_8C]
		imul	eax, [ebp+var_68]
		mov	[ebp+var_68], eax
		jmp	loc_D80
; ---------------------------------------------------------------------------

loc_E84:				; CODE XREF: _u_strFromPunycode_56+2AFj
		mov	eax, [ebp+var_98]
		add	eax, 1
		mov	[ebp+var_98], eax
		cmp	[ebp+var_5C], 0
		setz	al
		movzx	ecx, al
		push	ecx
		mov	edx, [ebp+var_98]
		push	edx
		mov	eax, [ebp+var_20]
		sub	eax, [ebp+var_5C]
		push	eax
		call	?adaptBias@@YAHHHC@Z ; adaptBias(int,int,signed	char)
		add	esp, 0Ch
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+var_20]
		cdq
		idiv	[ebp+var_98]
		mov	ecx, 7FFFFFFFh
		sub	ecx, [ebp+var_8]
		cmp	eax, ecx
		jle	short loc_EDD
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0Ch
		xor	eax, eax
		jmp	loc_1234
; ---------------------------------------------------------------------------

loc_EDD:				; CODE XREF: _u_strFromPunycode_56+337j
		mov	eax, [ebp+var_20]
		cdq
		idiv	[ebp+var_98]
		add	eax, [ebp+var_8]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_20]
		cdq
		idiv	[ebp+var_98]
		mov	[ebp+var_20], edx
		cmp	[ebp+var_8], 10FFFFh
		jg	short loc_F12
		mov	eax, [ebp+var_8]
		and	eax, 0FFFFF800h
		cmp	eax, 0D800h
		jnz	short loc_F22

loc_F12:				; CODE XREF: _u_strFromPunycode_56+36Dj
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0Ch
		xor	eax, eax
		jmp	loc_1234
; ---------------------------------------------------------------------------

loc_F22:				; CODE XREF: _u_strFromPunycode_56+37Cj
		mov	eax, 0FFFFh
		cmp	eax, [ebp+var_8]
		sbb	ecx, ecx
		neg	ecx
		add	ecx, 1
		mov	[ebp+var_B0], ecx
		cmp	[ebp+arg_8], 0
		jz	loc_11D9
		mov	eax, [ebp+var_14]
		add	eax, [ebp+var_B0]
		cmp	eax, [ebp+arg_C]
		jg	loc_11D9
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+var_A4]
		jg	short loc_F92
		mov	eax, [ebp+var_20]
		mov	[ebp+var_C8], eax
		cmp	[ebp+var_B0], 1
		jle	short loc_F7E
		mov	eax, [ebp+var_C8]
		mov	[ebp+var_A4], eax
		jmp	short loc_F8D
; ---------------------------------------------------------------------------

loc_F7E:				; CODE XREF: _u_strFromPunycode_56+3DAj
		mov	eax, [ebp+var_A4]
		add	eax, 1
		mov	[ebp+var_A4], eax

loc_F8D:				; CODE XREF: _u_strFromPunycode_56+3E8j
		jmp	loc_1076
; ---------------------------------------------------------------------------

loc_F92:				; CODE XREF: _u_strFromPunycode_56+3C8j
		mov	eax, [ebp+var_A4]
		mov	[ebp+var_C8], eax
		mov	eax, [ebp+var_20]
		sub	eax, [ebp+var_C8]
		mov	[ebp+var_D4], eax

loc_FAD:				; CODE XREF: _u_strFromPunycode_56+4DDj
		cmp	[ebp+var_D4], 0
		jle	loc_1076
		mov	eax, [ebp+var_C8]
		cmp	eax, [ebp+var_14]
		jl	short loc_FE4
		cmp	[ebp+var_14], 0
		jge	loc_1076
		mov	eax, [ebp+var_C8]
		mov	ecx, [ebp+arg_8]
		movzx	edx, word ptr [ecx+eax*2]
		test	edx, edx
		jz	loc_1076

loc_FE4:				; CODE XREF: _u_strFromPunycode_56+42Fj
		mov	eax, [ebp+var_C8]
		mov	ecx, [ebp+arg_8]
		movzx	edx, word ptr [ecx+eax*2]
		and	edx, 0FFFFFC00h
		mov	eax, [ebp+var_C8]
		add	eax, 1
		mov	[ebp+var_C8], eax
		cmp	edx, 0D800h
		jnz	short loc_101A
		mov	[ebp+var_19C], 1
		jmp	short loc_1024
; ---------------------------------------------------------------------------

loc_101A:				; CODE XREF: _u_strFromPunycode_56+478j
		mov	[ebp+var_19C], 0

loc_1024:				; CODE XREF: _u_strFromPunycode_56+484j
		cmp	[ebp+var_19C], 0
		jz	short loc_1062
		mov	eax, [ebp+var_C8]
		cmp	eax, [ebp+var_14]
		jz	short loc_1062
		mov	eax, [ebp+var_C8]
		mov	ecx, [ebp+arg_8]
		movzx	edx, word ptr [ecx+eax*2]
		and	edx, 0FFFFFC00h
		cmp	edx, 0DC00h
		jnz	short loc_1062
		mov	eax, [ebp+var_C8]
		add	eax, 1
		mov	[ebp+var_C8], eax

loc_1062:				; CODE XREF: _u_strFromPunycode_56+497j
					; _u_strFromPunycode_56+4A2j ...
		mov	eax, [ebp+var_D4]
		sub	eax, 1
		mov	[ebp+var_D4], eax
		jmp	loc_FAD
; ---------------------------------------------------------------------------

loc_1076:				; CODE XREF: _u_strFromPunycode_56:loc_F8Dj
					; _u_strFromPunycode_56+420j ...
		mov	eax, [ebp+var_C8]
		cmp	eax, [ebp+var_14]
		jge	loc_112D
		push	1
		mov	eax, [ebp+var_C8]
		mov	ecx, [ebp+arg_8]
		lea	edx, [ecx+eax*2]
		push	edx
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	eax, [ebp+var_14]
		sub	eax, [ebp+var_C8]
		shl	eax, 1
		mov	esi, esp
		push	eax		; Size
		mov	ecx, [ebp+var_C8]
		mov	edx, [ebp+arg_8]
		lea	eax, [edx+ecx*2]
		push	eax		; Src
		mov	ecx, [ebp+var_C8]
		mov	edx, [ebp+arg_8]
		lea	eax, [edx+ecx*2]
		mov	ecx, [ebp+var_B0]
		lea	edx, [eax+ecx*2]
		push	edx		; Dst
		call	dword ptr ds:__imp__memmove
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	[ebp+arg_10], 0
		jz	short loc_112D
		push	1
		mov	eax, [ebp+arg_10]
		add	eax, [ebp+var_C8]
		push	eax
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	ecx, [ebp+var_14]
		sub	ecx, [ebp+var_C8]
		mov	esi, esp
		push	ecx		; Size
		mov	edx, [ebp+arg_10]
		add	edx, [ebp+var_C8]
		push	edx		; Src
		mov	eax, [ebp+arg_10]
		add	eax, [ebp+var_C8]
		add	eax, [ebp+var_B0]
		push	eax		; Dst
		call	dword ptr ds:__imp__memmove
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_112D:				; CODE XREF: _u_strFromPunycode_56+4EBj
					; _u_strFromPunycode_56+54Dj
		cmp	[ebp+var_B0], 1
		jnz	short loc_1149
		mov	eax, [ebp+var_C8]
		mov	ecx, [ebp+arg_8]
		mov	dx, word ptr [ebp+var_8]
		mov	[ecx+eax*2], dx
		jmp	short loc_117C
; ---------------------------------------------------------------------------

loc_1149:				; CODE XREF: _u_strFromPunycode_56+5A0j
		mov	eax, [ebp+var_8]
		sar	eax, 0Ah
		add	eax, 0D7C0h
		mov	ecx, [ebp+var_C8]
		mov	edx, [ebp+arg_8]
		mov	[edx+ecx*2], ax
		mov	eax, [ebp+var_8]
		and	eax, 3FFh
		or	eax, 0DC00h
		mov	ecx, [ebp+var_C8]
		mov	edx, [ebp+arg_8]
		mov	[edx+ecx*2+2], ax

loc_117C:				; CODE XREF: _u_strFromPunycode_56+5B3j
		cmp	[ebp+arg_10], 0
		jz	short loc_11D9
		mov	eax, [ebp+var_50]
		mov	ecx, [ebp+arg_0]
		movzx	edx, word ptr [ecx+eax*2-2]
		cmp	edx, 41h ; 'A'
		jl	short loc_11AB
		mov	eax, [ebp+var_50]
		mov	ecx, [ebp+arg_0]
		movzx	edx, word ptr [ecx+eax*2-2]
		cmp	edx, 5Ah ; 'Z'
		jg	short loc_11AB
		mov	byte ptr [ebp+var_19C+3], 1
		jmp	short loc_11B2
; ---------------------------------------------------------------------------

loc_11AB:				; CODE XREF: _u_strFromPunycode_56+5FCj
					; _u_strFromPunycode_56+60Cj
		mov	byte ptr [ebp+var_19C+3], 0

loc_11B2:				; CODE XREF: _u_strFromPunycode_56+615j
		mov	eax, [ebp+arg_10]
		add	eax, [ebp+var_C8]
		mov	cl, byte ptr [ebp+var_19C+3]
		mov	[eax], cl
		cmp	[ebp+var_B0], 2
		jnz	short loc_11D9
		mov	eax, [ebp+arg_10]
		add	eax, [ebp+var_C8]
		mov	byte ptr [eax+1], 0

loc_11D9:				; CODE XREF: _u_strFromPunycode_56+3A7j
					; _u_strFromPunycode_56+3B9j ...
		mov	eax, [ebp+var_14]
		add	eax, [ebp+var_B0]
		mov	[ebp+var_14], eax
		jns	short loc_120E
		mov	eax, ds:?__LINE__Var@?1??u_strFromPunycode_56@@9@4JA ; long `u_strFromPunycode_56'::`2'::__LINE__Var
		add	eax, 0C8h ; 'È'
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FO@NJAIDAAM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1BM@MEDOPMNL@?$AAd?$AAe?$AAs?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@ ; "destLength>=0"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_120E:				; CODE XREF: _u_strFromPunycode_56+651j
		mov	eax, [ebp+var_20]
		add	eax, 1
		mov	[ebp+var_20], eax
		jmp	loc_D5E
; ---------------------------------------------------------------------------

loc_121C:				; CODE XREF: _u_strFromPunycode_56+1D0j
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		call	_u_terminateUChars_56
		add	esp, 10h

loc_1234:				; CODE XREF: _u_strFromPunycode_56+3Bj
					; _u_strFromPunycode_56+63j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 19Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_strFromPunycode_56 endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1248h
		public ??_C@_1BM@MEDOPMNL@?$AAd?$AAe?$AAs?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@
; wchar_t `string'
??_C@_1BM@MEDOPMNL@?$AAd?$AAe?$AAs?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@:
					; DATA XREF: _u_strFromPunycode_56+D3o
					; _u_strFromPunycode_56+665o
		unicode	0, <destLength>
		dw 3Eh
		unicode	0, <=0>,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 1264h
		public ??_C@_1FO@NJAIDAAM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
; wchar_t `string'
??_C@_1FO@NJAIDAAM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@:
					; DATA XREF: _u_strFromPunycode_56+CEo
					; _u_strFromPunycode_56+660o
		unicode	0, <d:\mozilla\intl\icu\source\common\punycode.cpp>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 12C4h
		public ?__LINE__Var@?1??u_strFromPunycode_56@@9@4JA
; long `u_strFromPunycode_56'::`2'::__LINE__Var
?__LINE__Var@?1??u_strFromPunycode_56@@9@4JA dd	17Ah ; DATA XREF: _u_strFromPunycode_56+C3r
					; _u_strFromPunycode_56+653r
_data		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn _u_terminateUChars_56:near ; CODE	XREF: _u_strToPunycode_56+84Bp
					; _u_strFromPunycode_56+698p
		extrn ___security_cookie:near ;	DATA XREF: _u_strToPunycode_56+1Er
		extrn __RTC_CheckEsp:near ; CODE XREF: _u_strToPunycode_56+879p
					; _u_strFromPunycode_56+E3p ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _u_strToPunycode_56+86Cp
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _u_strToPunycode_56+85Dp
; void *__cdecl	_memmove(void *Dst, const void *Src, size_t Size)
		extrn __imp__memmove:near ; CODE XREF: _u_strFromPunycode_56+539p
					; _u_strFromPunycode_56+589p
					; DATA XREF: ...
		extrn _uprv_checkValidMemory:near ; CODE XREF: _u_strFromPunycode_56+500p
					; _u_strFromPunycode_56+55Bp
; void __cdecl __wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
		extrn __imp___wassert:near ; CODE XREF:	_u_strFromPunycode_56+D8p
					; _u_strFromPunycode_56+66Ap
					; DATA XREF: ...
		extrn _u_strlen_56:near	; CODE XREF: _u_strFromPunycode_56+72p


		end
