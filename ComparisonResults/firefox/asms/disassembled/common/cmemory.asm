;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	FA46341C08E9A59AF1D624441C47FFE3
; Input	CRC32 :	2578F37E

; File Name   :	D:\compspace\objfiles\firefox\common\cmemory.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
_zeroMem	dd 6 dup(0)		; DATA XREF: _uprv_malloc_56:loc_1C0o
					; _uprv_realloc_56+1Eo	...
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 18h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
_pContext	dd ?			; DATA XREF: _uprv_malloc_56+33r
					; _uprv_realloc_56+52r	...
_pAlloc		dd ?			; DATA XREF: _uprv_malloc_56+24r
					; _uprv_malloc_56+3Ar ...
_pFree		dd ?			; DATA XREF: _uprv_realloc_56+43r
					; _uprv_realloc_56+59r	...
_pRealloc	dd ?			; DATA XREF: _uprv_realloc_56:loc_266r
					; _uprv_realloc_56+A4r	...
_gValidMemorySink db ?			; DATA XREF: _uprv_checkValidMemory+24r
					; _uprv_checkValidMemory+88w
		align 4
_bss		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_checkValidMemory
_uprv_checkValidMemory proc near

var_E4		= byte ptr -0E4h
var_20		= dword	ptr -20h
var_11		= byte ptr -11h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	al, ds:_gValidMemorySink
		mov	[ebp+var_11], al
		cmp	[ebp+arg_0], 0
		jnz	short loc_83
		mov	eax, ds:?__LINE__Var@?1??uprv_checkValidMemory@@9@9 ; `uprv_checkValidMemory'::`2'::__LINE__Var
		add	eax, 0Bh
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FI@CJNEAOGH@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1CC@EAFADDBO@?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@ ; "p != ((void *)0)"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_83:					; CODE XREF: _uprv_checkValidMemory+30j
		mov	[ebp+var_20], 0
		jmp	short loc_95
; ---------------------------------------------------------------------------

loc_8C:					; CODE XREF: _uprv_checkValidMemory+83j
		mov	eax, [ebp+var_20]
		add	eax, 1
		mov	[ebp+var_20], eax

loc_95:					; CODE XREF: _uprv_checkValidMemory+5Ej
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+arg_4]
		jnb	short loc_B1
		mov	eax, [ebp+var_8]
		add	eax, [ebp+var_20]
		movsx	ecx, byte ptr [eax]
		movsx	edx, [ebp+var_11]
		xor	edx, ecx
		mov	[ebp+var_11], dl
		jmp	short loc_8C
; ---------------------------------------------------------------------------

loc_B1:					; CODE XREF: _uprv_checkValidMemory+6Fj
		mov	al, [ebp+var_11]
		mov	ds:_gValidMemorySink, al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uprv_checkValidMemory endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D0h
		public ??_C@_1CC@EAFADDBO@?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@
; wchar_t `string'
??_C@_1CC@EAFADDBO@?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@:
					; DATA XREF: _uprv_checkValidMemory+42o
		unicode	0, <p != ((void	*)0)>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 0F4h
		public ??_C@_1FI@CJNEAOGH@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
; wchar_t `string'
??_C@_1FI@CJNEAOGH@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@:
					; DATA XREF: _uprv_checkValidMemory+3Do
		unicode	0, <d:\mozilla\intl\icu\source\common\cmemory.c>,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 14Ch
		public ?__LINE__Var@?1??uprv_checkValidMemory@@9@9
; `uprv_checkValidMemory'::`2'::__LINE__Var
?__LINE__Var@?1??uprv_checkValidMemory@@9@9 dd 2Eh ; DATA XREF:	_uprv_checkValidMemory+32r
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 150h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 154h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 158h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl uprv_malloc_56(size_t Size)
		public _uprv_malloc_56
_uprv_malloc_56	proc near		; CODE XREF: _uprv_realloc_56+2Bp
					; _uprv_calloc_56+33p

var_C0		= byte ptr -0C0h
Size		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+Size], 0
		jbe	short loc_1C0
		cmp	ds:_pAlloc, 0
		jz	short loc_1A6
		mov	esi, esp
		mov	eax, [ebp+Size]
		push	eax
		mov	ecx, ds:_pContext
		push	ecx
		call	ds:_pAlloc
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_1C5
; ---------------------------------------------------------------------------
		jmp	short loc_1BE
; ---------------------------------------------------------------------------

loc_1A6:				; CODE XREF: _uprv_malloc_56+2Bj
		mov	esi, esp
		mov	eax, [ebp+Size]
		push	eax		; Size
		call	dword ptr ds:__imp__malloc
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_1C5
; ---------------------------------------------------------------------------

loc_1BE:				; CODE XREF: _uprv_malloc_56+4Cj
		jmp	short loc_1C5
; ---------------------------------------------------------------------------

loc_1C0:				; CODE XREF: _uprv_malloc_56+22j
		mov	eax, offset _zeroMem

loc_1C5:				; CODE XREF: _uprv_malloc_56+4Aj
					; _uprv_malloc_56+64j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uprv_malloc_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1DCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl uprv_realloc_56(void *Memory, size_t NewSize)
		public _uprv_realloc_56
_uprv_realloc_56 proc near

var_C0		= byte ptr -0C0h
Memory		= dword	ptr  8
NewSize		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+Memory], offset _zeroMem
		jnz	short loc_219
		mov	eax, [ebp+NewSize]
		push	eax		; Size
		call	_uprv_malloc_56
		add	esp, 4
		jmp	loc_2AE
; ---------------------------------------------------------------------------
		jmp	loc_2AE
; ---------------------------------------------------------------------------

loc_219:				; CODE XREF: _uprv_realloc_56+25j
		cmp	[ebp+NewSize], 0
		jnz	short loc_266
		cmp	ds:_pFree, 0
		jz	short loc_247
		mov	esi, esp
		mov	eax, [ebp+Memory]
		push	eax
		mov	ecx, ds:_pContext
		push	ecx
		call	ds:_pFree
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_25D
; ---------------------------------------------------------------------------

loc_247:				; CODE XREF: _uprv_realloc_56+4Aj
		mov	esi, esp
		mov	eax, [ebp+Memory]
		push	eax		; Memory
		call	dword ptr ds:__imp__free
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_25D:				; CODE XREF: _uprv_realloc_56+69j
		mov	eax, offset _zeroMem
		jmp	short loc_2AE
; ---------------------------------------------------------------------------
		jmp	short loc_2AE
; ---------------------------------------------------------------------------

loc_266:				; CODE XREF: _uprv_realloc_56+41j
		cmp	ds:_pRealloc, 0
		jz	short loc_294
		mov	esi, esp
		mov	eax, [ebp+NewSize]
		push	eax
		mov	ecx, [ebp+Memory]
		push	ecx
		mov	edx, ds:_pContext
		push	edx
		call	ds:_pRealloc
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_2AE
; ---------------------------------------------------------------------------
		jmp	short loc_2AE
; ---------------------------------------------------------------------------

loc_294:				; CODE XREF: _uprv_realloc_56+91j
		mov	esi, esp
		mov	eax, [ebp+NewSize]
		push	eax		; NewSize
		mov	ecx, [ebp+Memory]
		push	ecx		; Memory
		call	dword ptr ds:__imp__realloc
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_2AE:				; CODE XREF: _uprv_realloc_56+33j
					; _uprv_realloc_56+38j	...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uprv_realloc_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2C4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl uprv_free_56(void	*Memory)
		public _uprv_free_56
_uprv_free_56	proc near

var_C0		= byte ptr -0C0h
Memory		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+Memory], offset _zeroMem
		jz	short loc_329
		cmp	ds:_pFree, 0
		jz	short loc_313
		mov	esi, esp
		mov	eax, [ebp+Memory]
		push	eax
		mov	ecx, ds:_pContext
		push	ecx
		call	ds:_pFree
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_329
; ---------------------------------------------------------------------------

loc_313:				; CODE XREF: _uprv_free_56+2Ej
		mov	esi, esp
		mov	eax, [ebp+Memory]
		push	eax		; Memory
		call	dword ptr ds:__imp__free
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_329:				; CODE XREF: _uprv_free_56+25j
					; _uprv_free_56+4Dj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uprv_free_56	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 340h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl uprv_calloc_56(int, size_t Size)
		public _uprv_calloc_56
_uprv_calloc_56	proc near

var_CC		= byte ptr -0CCh
Dst		= dword	ptr -8
arg_0		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+Dst], 0
		mov	eax, [ebp+Size]
		imul	eax, [ebp+arg_0]
		mov	[ebp+Size], eax
		mov	eax, [ebp+Size]
		push	eax		; Size
		call	_uprv_malloc_56
		add	esp, 4
		mov	[ebp+Dst], eax
		cmp	[ebp+Dst], 0
		jz	short loc_396
		mov	eax, [ebp+Size]
		push	eax		; Size
		push	0		; Val
		mov	ecx, [ebp+Dst]
		push	ecx		; Dst
		call	_memset
		add	esp, 0Ch

loc_396:				; CODE XREF: _uprv_calloc_56+42j
		mov	eax, [ebp+Dst]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uprv_calloc_56	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3B0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_setMemoryFunctions_56
_u_setMemoryFunctions_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_10]
		cmp	dword ptr [eax], 0
		jle	short loc_3D8
		jmp	short loc_415
; ---------------------------------------------------------------------------

loc_3D8:				; CODE XREF: _u_setMemoryFunctions_56+24j
		cmp	[ebp+arg_4], 0
		jz	short loc_3EA
		cmp	[ebp+arg_8], 0
		jz	short loc_3EA
		cmp	[ebp+arg_C], 0
		jnz	short loc_3F5

loc_3EA:				; CODE XREF: _u_setMemoryFunctions_56+2Cj
					; _u_setMemoryFunctions_56+32j
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 1
		jmp	short loc_415
; ---------------------------------------------------------------------------

loc_3F5:				; CODE XREF: _u_setMemoryFunctions_56+38j
		mov	eax, [ebp+arg_0]
		mov	ds:_pContext, eax
		mov	eax, [ebp+arg_4]
		mov	ds:_pAlloc, eax
		mov	eax, [ebp+arg_8]
		mov	ds:_pRealloc, eax
		mov	eax, [ebp+arg_C]
		mov	ds:_pFree, eax

loc_415:				; CODE XREF: _u_setMemoryFunctions_56+26j
					; _u_setMemoryFunctions_56+43j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_u_setMemoryFunctions_56 endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 41Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _cmemory_cleanup_56
_cmemory_cleanup_56 proc near

var_C0		= byte ptr -0C0h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	ds:_pContext, 0
		mov	ds:_pAlloc, 0
		mov	ds:_pRealloc, 0
		mov	ds:_pFree, 0
		mov	al, 1
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_cmemory_cleanup_56 endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; void __cdecl __wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
		extrn __imp___wassert:near ; CODE XREF:	_uprv_checkValidMemory+47p
					; DATA XREF: _uprv_checkValidMemory+47r
		extrn __RTC_CheckEsp:near ; CODE XREF: _uprv_checkValidMemory+52p
					; _uprv_checkValidMemory+98p ...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; void *__cdecl	_malloc(size_t Size)
		extrn __imp__malloc:near ; CODE	XREF: _uprv_malloc_56+54p
					; DATA XREF: _uprv_malloc_56+54r
; void *__cdecl	_realloc(void *Memory, size_t NewSize)
		extrn __imp__realloc:near ; CODE XREF: _uprv_realloc_56+C2p
					; DATA XREF: _uprv_realloc_56+C2r
; void __cdecl _free(void *Memory)
		extrn __imp__free:near	; CODE XREF: _uprv_realloc_56+71p
					; _uprv_free_56+55p
					; DATA XREF: ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _uprv_calloc_56+4Ep


		end
