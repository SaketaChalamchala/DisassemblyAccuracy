;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	82BF7693A2F9FA786F321A40531302FA
; Input	CRC32 :	1B1E8BCA

; File Name   :	D:\compspace\objfiles\firefox\common\utf_impl.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"
;
; Exported entry
;

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		public _utf8_countTrailBytes_56
_utf8_countTrailBytes_56 dd 1Fh	dup(0)
		db 0
byte_7D		db 3 dup(0)		; DATA XREF: .data:`utf8_nextCharSafeBody_56'::`2'::__LINE__Varo
dword_80	dd 10h dup(0)		; DATA XREF: .rdata:00000104o
		dd 8 dup(1010101h), 4 dup(2020202h), 2 dup(3030303h), 4040404h
		dd 505h
_utf8_minLegal	dd 0			; DATA XREF: _utf8_nextCharSafeBody_56+20Br
					; _utf8_prevCharSafeBody_56+191r
		dd offset dword_80
		dd offset loc_7FE+2
dword_10C	dd 10000h		; DATA XREF: _utf8_appendCharSafeBody_56+1D8r
_utf8_errorValue dd 15h			; DATA XREF: _errorValue+29r
		dd offset dword_80+1Fh
		dd 0FFFFh, 10FFFFh, 3FFFFFFh, 7FFFFFFFh
_rdata		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 128h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utf8_nextCharSafeBody_56
_utf8_nextCharSafeBody_56 proc near

var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_1D		= byte ptr -1Dh
var_11		= byte ptr -11h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0ECh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_EC]
		mov	ecx, 3Bh ; ';'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		movzx	eax, byte ptr [ebp+arg_C]
		cmp	eax, 0F0h ; 'ð'
		jge	short loc_180
		movzx	ecx, byte ptr [ebp+arg_C]
		xor	edx, edx
		cmp	ecx, 0C0h ; 'À'
		setnl	dl
		movzx	eax, byte ptr [ebp+arg_C]
		xor	ecx, ecx
		cmp	eax, 0E0h ; 'à'
		setnl	cl
		add	edx, ecx
		mov	[ebp+var_E8], edx
		jmp	short loc_1CB
; ---------------------------------------------------------------------------

loc_180:				; CODE XREF: _utf8_nextCharSafeBody_56+2Fj
		movzx	edx, byte ptr [ebp+arg_C]
		cmp	edx, 0FEh ; 'þ'
		jge	short loc_1B5
		movzx	eax, byte ptr [ebp+arg_C]
		xor	ecx, ecx
		cmp	eax, 0F8h ; 'ø'
		setnl	cl
		movzx	edx, byte ptr [ebp+arg_C]
		xor	eax, eax
		cmp	edx, 0FCh ; 'ü'
		setnl	al
		lea	ecx, [ecx+eax+3]
		mov	[ebp+var_EC], ecx
		jmp	short loc_1BF
; ---------------------------------------------------------------------------

loc_1B5:				; CODE XREF: _utf8_nextCharSafeBody_56+62j
		mov	[ebp+var_EC], 0

loc_1BF:				; CODE XREF: _utf8_nextCharSafeBody_56+8Bj
		mov	edx, [ebp+var_EC]
		mov	[ebp+var_E8], edx

loc_1CB:				; CODE XREF: _utf8_nextCharSafeBody_56+56j
		mov	al, byte ptr [ebp+var_E8]
		mov	[ebp+var_11], al
		movzx	eax, [ebp+var_11]
		cmp	eax, 5
		jle	short loc_203
		mov	ecx, ds:?__LINE__Var@?1??utf8_nextCharSafeBody_56@@9@9 ; `utf8_nextCharSafeBody_56'::`2'::__LINE__Var
		add	ecx, 3
		mov	esi, esp
		push	ecx		; Line
		push	offset ??_C@_1FK@BJPAIEHP@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1BG@MBJJCPN@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA5?$AA?$AA@ ; "count <= 5"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_203:				; CODE XREF: _utf8_nextCharSafeBody_56+B3j
		movzx	eax, [ebp+var_11]
		add	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_8]
		jle	short loc_219
		cmp	[ebp+arg_8], 0
		jge	loc_37D

loc_219:				; CODE XREF: _utf8_nextCharSafeBody_56+E5j
		movzx	eax, [ebp+var_11]
		mov	ecx, 6
		sub	ecx, eax
		mov	edx, 1
		shl	edx, cl
		sub	edx, 1
		and	edx, [ebp+arg_C]
		mov	[ebp+arg_C], edx
		mov	al, [ebp+var_11]
		mov	byte ptr [ebp+var_E8], al
		cmp	byte ptr [ebp+var_E8], 1
		jz	loc_2F7
		cmp	byte ptr [ebp+var_E8], 2
		jz	short loc_2A7
		cmp	byte ptr [ebp+var_E8], 3
		jz	short loc_266
		jmp	loc_37B
; ---------------------------------------------------------------------------
		jmp	loc_37B
; ---------------------------------------------------------------------------

loc_266:				; CODE XREF: _utf8_nextCharSafeBody_56+132j
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+var_8]
		movzx	ecx, byte ptr [eax]
		sub	ecx, 80h ; '€'
		mov	[ebp+var_1D], cl
		mov	edx, [ebp+var_8]
		add	edx, 1
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_C]
		shl	eax, 6
		movzx	ecx, [ebp+var_1D]
		or	eax, ecx
		mov	[ebp+arg_C], eax
		cmp	[ebp+arg_C], 110h
		jge	short loc_2A2
		movzx	eax, [ebp+var_1D]
		cmp	eax, 3Fh ; '?'
		jle	short loc_2A7

loc_2A2:				; CODE XREF: _utf8_nextCharSafeBody_56+16Fj
		jmp	loc_37B
; ---------------------------------------------------------------------------

loc_2A7:				; CODE XREF: _utf8_nextCharSafeBody_56+129j
					; _utf8_nextCharSafeBody_56+178j
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+var_8]
		movzx	ecx, byte ptr [eax]
		sub	ecx, 80h ; '€'
		mov	[ebp+var_1D], cl
		mov	edx, [ebp+var_8]
		add	edx, 1
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_C]
		shl	eax, 6
		movzx	ecx, [ebp+var_1D]
		or	eax, ecx
		mov	[ebp+arg_C], eax
		mov	eax, [ebp+arg_C]
		and	eax, 0FFE0h
		cmp	eax, 360h
		jnz	short loc_2E9
		movsx	eax, [ebp+arg_10]
		cmp	eax, 0FFFFFFFEh
		jnz	short loc_2F2

loc_2E9:				; CODE XREF: _utf8_nextCharSafeBody_56+1B6j
		movzx	eax, [ebp+var_1D]
		cmp	eax, 3Fh ; '?'
		jle	short loc_2F7

loc_2F2:				; CODE XREF: _utf8_nextCharSafeBody_56+1BFj
		jmp	loc_37B
; ---------------------------------------------------------------------------

loc_2F7:				; CODE XREF: _utf8_nextCharSafeBody_56+11Cj
					; _utf8_nextCharSafeBody_56+1C8j
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+var_8]
		movzx	ecx, byte ptr [eax]
		sub	ecx, 80h ; '€'
		mov	[ebp+var_1D], cl
		mov	edx, [ebp+var_8]
		add	edx, 1
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_C]
		shl	eax, 6
		movzx	ecx, [ebp+var_1D]
		or	eax, ecx
		mov	[ebp+arg_C], eax
		movzx	eax, [ebp+var_1D]
		cmp	eax, 3Fh ; '?'
		jle	short loc_32C
		jmp	short loc_37B
; ---------------------------------------------------------------------------

loc_32C:				; CODE XREF: _utf8_nextCharSafeBody_56+200j
		movzx	eax, [ebp+var_11]
		mov	ecx, [ebp+arg_C]
		cmp	ecx, _utf8_minLegal[eax*4]
		jl	short loc_37B
		movsx	eax, [ebp+arg_10]
		test	eax, eax
		jle	short loc_36E
		cmp	[ebp+arg_C], 0FDD0h
		jl	short loc_36E
		cmp	[ebp+arg_C], 0FDEFh
		jbe	short loc_365
		mov	eax, [ebp+arg_C]
		and	eax, 0FFFEh
		cmp	eax, 0FFFEh
		jnz	short loc_36E

loc_365:				; CODE XREF: _utf8_nextCharSafeBody_56+22Cj
		cmp	[ebp+arg_C], 10FFFFh
		jbe	short loc_37B

loc_36E:				; CODE XREF: _utf8_nextCharSafeBody_56+21Aj
					; _utf8_nextCharSafeBody_56+223j ...
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		mov	[eax], ecx
		mov	eax, [ebp+arg_C]
		jmp	short loc_3E4
; ---------------------------------------------------------------------------

loc_37B:				; CODE XREF: _utf8_nextCharSafeBody_56+134j
					; _utf8_nextCharSafeBody_56+139j ...
		jmp	short loc_386
; ---------------------------------------------------------------------------

loc_37D:				; CODE XREF: _utf8_nextCharSafeBody_56+EBj
		mov	eax, [ebp+arg_8]
		sub	eax, [ebp+var_8]
		mov	[ebp+var_11], al

loc_386:				; CODE XREF: _utf8_nextCharSafeBody_56:loc_37Bj
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx

loc_38E:				; CODE XREF: _utf8_nextCharSafeBody_56+296j
		movzx	eax, [ebp+var_11]
		test	eax, eax
		jle	short loc_3C0
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+var_8]
		movzx	ecx, byte ptr [eax]
		and	ecx, 0C0h
		cmp	ecx, 80h ; '€'
		jnz	short loc_3C0
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		mov	al, [ebp+var_11]
		sub	al, 1
		mov	[ebp+var_11], al
		jmp	short loc_38E
; ---------------------------------------------------------------------------

loc_3C0:				; CODE XREF: _utf8_nextCharSafeBody_56+26Cj
					; _utf8_nextCharSafeBody_56+283j
		movzx	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+var_8]
		sub	edx, [ecx]
		push	edx
		call	_errorValue
		add	esp, 8
		mov	[ebp+arg_C], eax
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		mov	[eax], ecx
		mov	eax, [ebp+arg_C]

loc_3E4:				; CODE XREF: _utf8_nextCharSafeBody_56+251j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0ECh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utf8_nextCharSafeBody_56 endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3F8h
		public ??_C@_1BG@MBJJCPN@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA5?$AA?$AA@
; wchar_t `string'
??_C@_1BG@MBJJCPN@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA5?$AA?$AA@:
					; DATA XREF: _utf8_nextCharSafeBody_56+C6o
		unicode	0, <count >
		dw 3Ch
		unicode	0, <= 5>,0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 410h
		public ??_C@_1FK@BJPAIEHP@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
; wchar_t `string'
??_C@_1FK@BJPAIEHP@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@:
					; DATA XREF: _utf8_nextCharSafeBody_56+C1o
		unicode	0, <d:\mozilla\intl\icu\source\common\utf_impl.c>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 46Ch
		public ?__LINE__Var@?1??utf8_nextCharSafeBody_56@@9@9
; `utf8_nextCharSafeBody_56'::`2'::__LINE__Var
?__LINE__Var@?1??utf8_nextCharSafeBody_56@@9@9 dd offset byte_7D
					; DATA XREF: _utf8_nextCharSafeBody_56+B5r
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 470h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 474h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 478h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_errorValue	proc near		; CODE XREF: _utf8_nextCharSafeBody_56+2A6p
					; _utf8_prevCharSafeBody_56+44p ...

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		movsx	eax, [ebp+arg_4]
		test	eax, eax
		jl	short loc_4AC
		mov	eax, [ebp+arg_0]
		mov	eax, _utf8_errorValue[eax*4]
		jmp	short loc_4C1
; ---------------------------------------------------------------------------
		jmp	short loc_4C1
; ---------------------------------------------------------------------------

loc_4AC:				; CODE XREF: _errorValue+24j
		movsx	eax, [ebp+arg_4]
		cmp	eax, 0FFFFFFFDh
		jnz	short loc_4BE
		mov	eax, 0FFFDh
		jmp	short loc_4C1
; ---------------------------------------------------------------------------
		jmp	short loc_4C1
; ---------------------------------------------------------------------------

loc_4BE:				; CODE XREF: _errorValue+3Bj
		or	eax, 0FFFFFFFFh

loc_4C1:				; CODE XREF: _errorValue+30j
					; _errorValue+32j ...
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_errorValue	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4C8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utf8_appendCharSafeBody_56
_utf8_appendCharSafeBody_56 proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_C], 7FFh
		ja	short loc_53F
		mov	eax, [ebp+arg_4]
		add	eax, 1
		cmp	eax, [ebp+arg_8]
		jge	short loc_53A
		mov	eax, [ebp+arg_C]
		sar	eax, 6
		or	eax, 0C0h
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+arg_4]
		mov	[ecx], al
		mov	edx, [ebp+arg_4]
		add	edx, 1
		mov	[ebp+arg_4], edx
		mov	eax, [ebp+arg_C]
		and	eax, 3Fh
		or	eax, 80h
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+arg_4]
		mov	[ecx], al
		mov	edx, [ebp+arg_4]
		add	edx, 1
		mov	[ebp+arg_4], edx
		mov	eax, [ebp+arg_4]
		jmp	loc_79C
; ---------------------------------------------------------------------------

loc_53A:				; CODE XREF: _utf8_appendCharSafeBody_56+30j
		jmp	loc_65C
; ---------------------------------------------------------------------------

loc_53F:				; CODE XREF: _utf8_appendCharSafeBody_56+25j
		cmp	[ebp+arg_C], 0FFFFh
		ja	short loc_5C6
		mov	eax, [ebp+arg_4]
		add	eax, 2
		cmp	eax, [ebp+arg_8]
		jge	short loc_5C1
		mov	eax, [ebp+arg_C]
		and	eax, 0FFFFF800h
		cmp	eax, 0D800h
		jz	short loc_5C1
		mov	eax, [ebp+arg_C]
		sar	eax, 0Ch
		or	eax, 0E0h
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+arg_4]
		mov	[ecx], al
		mov	edx, [ebp+arg_4]
		add	edx, 1
		mov	[ebp+arg_4], edx
		mov	eax, [ebp+arg_C]
		sar	eax, 6
		and	eax, 3Fh
		or	eax, 80h
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+arg_4]
		mov	[ecx], al
		mov	edx, [ebp+arg_4]
		add	edx, 1
		mov	[ebp+arg_4], edx
		mov	eax, [ebp+arg_C]
		and	eax, 3Fh
		or	eax, 80h
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+arg_4]
		mov	[ecx], al
		mov	edx, [ebp+arg_4]
		add	edx, 1
		mov	[ebp+arg_4], edx
		mov	eax, [ebp+arg_4]
		jmp	loc_79C
; ---------------------------------------------------------------------------

loc_5C1:				; CODE XREF: _utf8_appendCharSafeBody_56+89j
					; _utf8_appendCharSafeBody_56+98j
		jmp	loc_65C
; ---------------------------------------------------------------------------

loc_5C6:				; CODE XREF: _utf8_appendCharSafeBody_56+7Ej
		cmp	[ebp+arg_C], 10FFFFh
		ja	loc_65C
		mov	eax, [ebp+arg_4]
		add	eax, 3
		cmp	eax, [ebp+arg_8]
		jge	short loc_65C
		mov	eax, [ebp+arg_C]
		sar	eax, 12h
		or	eax, 0F0h
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+arg_4]
		mov	[ecx], al
		mov	edx, [ebp+arg_4]
		add	edx, 1
		mov	[ebp+arg_4], edx
		mov	eax, [ebp+arg_C]
		sar	eax, 0Ch
		and	eax, 3Fh
		or	eax, 80h
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+arg_4]
		mov	[ecx], al
		mov	edx, [ebp+arg_4]
		add	edx, 1
		mov	[ebp+arg_4], edx
		mov	eax, [ebp+arg_C]
		sar	eax, 6
		and	eax, 3Fh
		or	eax, 80h
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+arg_4]
		mov	[ecx], al
		mov	edx, [ebp+arg_4]
		add	edx, 1
		mov	[ebp+arg_4], edx
		mov	eax, [ebp+arg_C]
		and	eax, 3Fh
		or	eax, 80h
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+arg_4]
		mov	[ecx], al
		mov	edx, [ebp+arg_4]
		add	edx, 1
		mov	[ebp+arg_4], edx
		mov	eax, [ebp+arg_4]
		jmp	loc_79C
; ---------------------------------------------------------------------------

loc_65C:				; CODE XREF: _utf8_appendCharSafeBody_56:loc_53Aj
					; _utf8_appendCharSafeBody_56:loc_5C1j	...
		cmp	[ebp+arg_10], 0
		jz	short loc_66D
		mov	eax, [ebp+arg_10]
		mov	byte ptr [eax],	1
		jmp	loc_799
; ---------------------------------------------------------------------------

loc_66D:				; CODE XREF: _utf8_appendCharSafeBody_56+198j
		mov	eax, [ebp+arg_8]
		sub	eax, [ebp+arg_4]
		mov	[ebp+arg_8], eax
		cmp	[ebp+arg_8], 0
		jle	loc_799
		cmp	[ebp+arg_8], 3
		jle	short loc_68D
		mov	[ebp+arg_8], 3

loc_68D:				; CODE XREF: _utf8_appendCharSafeBody_56+1BCj
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+arg_4]
		mov	[ebp+arg_0], eax
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_8]
		mov	ecx, dword_10C[eax*4]
		mov	[ebp+arg_C], ecx
		cmp	[ebp+arg_C], 7Fh ; ''
		ja	short loc_6C9
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+var_8]
		mov	cl, byte ptr [ebp+arg_C]
		mov	[eax], cl
		mov	edx, [ebp+var_8]
		add	edx, 1
		mov	[ebp+var_8], edx
		jmp	loc_790
; ---------------------------------------------------------------------------

loc_6C9:				; CODE XREF: _utf8_appendCharSafeBody_56+1E6j
		cmp	[ebp+arg_C], 7FFh
		ja	short loc_6F3
		mov	eax, [ebp+arg_C]
		sar	eax, 6
		or	eax, 0C0h
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+var_8]
		mov	[ecx], al
		mov	edx, [ebp+var_8]
		add	edx, 1
		mov	[ebp+var_8], edx
		jmp	loc_774
; ---------------------------------------------------------------------------

loc_6F3:				; CODE XREF: _utf8_appendCharSafeBody_56+208j
		cmp	[ebp+arg_C], 0FFFFh
		ja	short loc_71A
		mov	eax, [ebp+arg_C]
		sar	eax, 0Ch
		or	eax, 0E0h
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+var_8]
		mov	[ecx], al
		mov	edx, [ebp+var_8]
		add	edx, 1
		mov	[ebp+var_8], edx
		jmp	short loc_755
; ---------------------------------------------------------------------------

loc_71A:				; CODE XREF: _utf8_appendCharSafeBody_56+232j
		mov	eax, [ebp+arg_C]
		sar	eax, 12h
		or	eax, 0F0h
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+var_8]
		mov	[ecx], al
		mov	edx, [ebp+var_8]
		add	edx, 1
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_C]
		sar	eax, 0Ch
		and	eax, 3Fh
		or	eax, 80h
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+var_8]
		mov	[ecx], al
		mov	edx, [ebp+var_8]
		add	edx, 1
		mov	[ebp+var_8], edx

loc_755:				; CODE XREF: _utf8_appendCharSafeBody_56+250j
		mov	eax, [ebp+arg_C]
		sar	eax, 6
		and	eax, 3Fh
		or	eax, 80h
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+var_8]
		mov	[ecx], al
		mov	edx, [ebp+var_8]
		add	edx, 1
		mov	[ebp+var_8], edx

loc_774:				; CODE XREF: _utf8_appendCharSafeBody_56+226j
		mov	eax, [ebp+arg_C]
		and	eax, 3Fh
		or	eax, 80h
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+var_8]
		mov	[ecx], al
		mov	edx, [ebp+var_8]
		add	edx, 1
		mov	[ebp+var_8], edx

loc_790:				; CODE XREF: _utf8_appendCharSafeBody_56+1FCj
		mov	eax, [ebp+arg_4]
		add	eax, [ebp+var_8]
		mov	[ebp+arg_4], eax

loc_799:				; CODE XREF: _utf8_appendCharSafeBody_56+1A0j
					; _utf8_appendCharSafeBody_56+1B2j
		mov	eax, [ebp+arg_4]

loc_79C:				; CODE XREF: _utf8_appendCharSafeBody_56+6Dj
					; _utf8_appendCharSafeBody_56+F4j ...
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_utf8_appendCharSafeBody_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 7A4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utf8_prevCharSafeBody_56
_utf8_prevCharSafeBody_56 proc near

var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_35		= byte ptr -35h
var_29		= byte ptr -29h
var_1D		= byte ptr -1Dh
var_11		= byte ptr -11h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 104h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_104]
		mov	ecx, 41h ; 'A'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		mov	[ebp+var_1D], 1
		mov	[ebp+var_29], 6
		mov	eax, [ebp+arg_C]
		and	eax, 0C0h
		cmp	eax, 80h ; '€'
		jz	short loc_7F5
		movzx	eax, [ebp+arg_10]
		push	eax
		push	0
		call	_errorValue
		add	esp, 8
		jmp	loc_A4F
; ---------------------------------------------------------------------------

loc_7F5:				; CODE XREF: _utf8_prevCharSafeBody_56+3Bj
		mov	eax, [ebp+arg_C]
		and	eax, 3Fh
		mov	[ebp+arg_C], eax

loc_7FE:				; CODE XREF: _utf8_prevCharSafeBody_56:loc_A47j
					; DATA XREF: .rdata:00000108o
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_4]
		jg	short loc_81A
		movzx	eax, [ebp+arg_10]
		push	eax
		push	0
		call	_errorValue
		add	esp, 8
		jmp	loc_A4F
; ---------------------------------------------------------------------------

loc_81A:				; CODE XREF: _utf8_prevCharSafeBody_56+60j
		mov	eax, [ebp+var_8]
		sub	eax, 1
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+var_8]
		mov	dl, [ecx]
		mov	[ebp+var_11], dl
		movzx	eax, [ebp+var_11]
		sub	eax, 80h ; '€'
		movzx	ecx, al
		cmp	ecx, 7Eh ; '~'
		jge	loc_A33
		movzx	eax, [ebp+var_11]
		and	eax, 40h
		jz	loc_9ED
		movzx	eax, [ebp+var_11]
		cmp	eax, 0F0h ; 'ð'
		jge	short loc_882
		movzx	ecx, [ebp+var_11]
		xor	edx, edx
		cmp	ecx, 0C0h ; 'À'
		setnl	dl
		movzx	eax, [ebp+var_11]
		xor	ecx, ecx
		cmp	eax, 0E0h ; 'à'
		setnl	cl
		add	edx, ecx
		mov	[ebp+var_100], edx
		jmp	short loc_8CD
; ---------------------------------------------------------------------------

loc_882:				; CODE XREF: _utf8_prevCharSafeBody_56+B5j
		movzx	edx, [ebp+var_11]
		cmp	edx, 0FEh ; 'þ'
		jge	short loc_8B7
		movzx	eax, [ebp+var_11]
		xor	ecx, ecx
		cmp	eax, 0F8h ; 'ø'
		setnl	cl
		movzx	edx, [ebp+var_11]
		xor	eax, eax
		cmp	edx, 0FCh ; 'ü'
		setnl	al
		lea	ecx, [ecx+eax+3]
		mov	[ebp+var_104], ecx
		jmp	short loc_8C1
; ---------------------------------------------------------------------------

loc_8B7:				; CODE XREF: _utf8_prevCharSafeBody_56+E8j
		mov	[ebp+var_104], 0

loc_8C1:				; CODE XREF: _utf8_prevCharSafeBody_56+111j
		mov	edx, [ebp+var_104]
		mov	[ebp+var_100], edx

loc_8CD:				; CODE XREF: _utf8_prevCharSafeBody_56+DCj
		mov	al, byte ptr [ebp+var_100]
		mov	[ebp+var_35], al
		movzx	eax, [ebp+var_1D]
		movzx	ecx, [ebp+var_35]
		cmp	eax, ecx
		jnz	loc_9AC
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+var_8]
		mov	[eax], ecx
		movzx	eax, [ebp+var_1D]
		mov	ecx, 6
		sub	ecx, eax
		mov	edx, 1
		shl	edx, cl
		sub	edx, 1
		movzx	eax, [ebp+var_11]
		and	eax, edx
		mov	[ebp+var_11], al
		movzx	eax, [ebp+var_11]
		movzx	ecx, [ebp+var_29]
		shl	eax, cl
		or	eax, [ebp+arg_C]
		mov	[ebp+arg_C], eax
		movzx	eax, [ebp+var_1D]
		cmp	eax, 4
		jge	short loc_988
		cmp	[ebp+arg_C], 10FFFFh
		jg	short loc_988
		movzx	eax, [ebp+var_1D]
		mov	ecx, [ebp+arg_C]
		cmp	ecx, _utf8_minLegal[eax*4]
		jl	short loc_988
		mov	eax, [ebp+arg_C]
		and	eax, 0FFFFF800h
		cmp	eax, 0D800h
		jnz	short loc_956
		movsx	eax, [ebp+arg_10]
		cmp	eax, 0FFFFFFFEh
		jnz	short loc_988

loc_956:				; CODE XREF: _utf8_prevCharSafeBody_56+1A7j
		movsx	eax, [ebp+arg_10]
		test	eax, eax
		jle	short loc_9AA
		cmp	[ebp+arg_C], 0FDD0h
		jl	short loc_9AA
		cmp	[ebp+arg_C], 0FDEFh
		jbe	short loc_97F
		mov	eax, [ebp+arg_C]
		and	eax, 0FFFEh
		cmp	eax, 0FFFEh
		jnz	short loc_9AA

loc_97F:				; CODE XREF: _utf8_prevCharSafeBody_56+1CAj
		cmp	[ebp+arg_C], 10FFFFh
		ja	short loc_9AA

loc_988:				; CODE XREF: _utf8_prevCharSafeBody_56+17Fj
					; _utf8_prevCharSafeBody_56+188j ...
		movzx	eax, [ebp+var_1D]
		cmp	eax, 4
		jl	short loc_995
		mov	[ebp+var_1D], 3

loc_995:				; CODE XREF: _utf8_prevCharSafeBody_56+1EBj
		movzx	eax, [ebp+arg_10]
		push	eax
		movzx	ecx, [ebp+var_1D]
		push	ecx
		call	_errorValue
		add	esp, 8
		mov	[ebp+arg_C], eax

loc_9AA:				; CODE XREF: _utf8_prevCharSafeBody_56+1B8j
					; _utf8_prevCharSafeBody_56+1C1j ...
		jmp	short loc_9E9
; ---------------------------------------------------------------------------

loc_9AC:				; CODE XREF: _utf8_prevCharSafeBody_56+13Cj
		movzx	eax, [ebp+var_1D]
		movzx	ecx, [ebp+var_35]
		cmp	eax, ecx
		jge	short loc_9D7
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+var_8]
		mov	[eax], ecx
		movzx	eax, [ebp+arg_10]
		push	eax
		movzx	ecx, [ebp+var_1D]
		push	ecx
		call	_errorValue
		add	esp, 8
		mov	[ebp+arg_C], eax
		jmp	short loc_9E9
; ---------------------------------------------------------------------------

loc_9D7:				; CODE XREF: _utf8_prevCharSafeBody_56+212j
		movzx	eax, [ebp+arg_10]
		push	eax
		push	0
		call	_errorValue
		add	esp, 8
		mov	[ebp+arg_C], eax

loc_9E9:				; CODE XREF: _utf8_prevCharSafeBody_56:loc_9AAj
					; _utf8_prevCharSafeBody_56+231j
		jmp	short loc_A4C
; ---------------------------------------------------------------------------
		jmp	short loc_A31
; ---------------------------------------------------------------------------

loc_9ED:				; CODE XREF: _utf8_prevCharSafeBody_56+A6j
		movzx	eax, [ebp+var_1D]
		cmp	eax, 5
		jge	short loc_A1D
		movzx	eax, [ebp+var_11]
		and	eax, 3Fh
		movzx	ecx, [ebp+var_29]
		shl	eax, cl
		or	eax, [ebp+arg_C]
		mov	[ebp+arg_C], eax
		mov	al, [ebp+var_1D]
		add	al, 1
		mov	[ebp+var_1D], al
		movzx	eax, [ebp+var_29]
		add	eax, 6
		mov	[ebp+var_29], al
		jmp	short loc_A31
; ---------------------------------------------------------------------------

loc_A1D:				; CODE XREF: _utf8_prevCharSafeBody_56+250j
		movzx	eax, [ebp+arg_10]
		push	eax
		push	0
		call	_errorValue
		add	esp, 8
		mov	[ebp+arg_C], eax
		jmp	short loc_A4C
; ---------------------------------------------------------------------------

loc_A31:				; CODE XREF: _utf8_prevCharSafeBody_56+247j
					; _utf8_prevCharSafeBody_56+277j
		jmp	short loc_A47
; ---------------------------------------------------------------------------

loc_A33:				; CODE XREF: _utf8_prevCharSafeBody_56+99j
		movzx	eax, [ebp+arg_10]
		push	eax
		push	0
		call	_errorValue
		add	esp, 8
		mov	[ebp+arg_C], eax
		jmp	short loc_A4C
; ---------------------------------------------------------------------------

loc_A47:				; CODE XREF: _utf8_prevCharSafeBody_56:loc_A31j
		jmp	loc_7FE
; ---------------------------------------------------------------------------

loc_A4C:				; CODE XREF: _utf8_prevCharSafeBody_56:loc_9E9j
					; _utf8_prevCharSafeBody_56+28Bj ...
		mov	eax, [ebp+arg_C]

loc_A4F:				; CODE XREF: _utf8_prevCharSafeBody_56+4Cj
					; _utf8_prevCharSafeBody_56+71j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 104h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utf8_prevCharSafeBody_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A64h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utf8_back1SafeBody_56
_utf8_back1SafeBody_56 proc near

var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_1D		= byte ptr -1Dh
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0ECh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_EC]
		mov	ecx, 3Bh ; ';'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		sub	eax, 5
		cmp	eax, [ebp+arg_4]
		jle	short loc_A9E
		mov	eax, [ebp+var_8]
		sub	eax, 5
		mov	[ebp+var_14], eax
		jmp	short loc_AA4
; ---------------------------------------------------------------------------

loc_A9E:				; CODE XREF: _utf8_back1SafeBody_56+2Dj
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_14], eax

loc_AA4:				; CODE XREF: _utf8_back1SafeBody_56+38j
					; _utf8_back1SafeBody_56+118j
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+var_8]
		mov	cl, [eax]
		mov	[ebp+var_1D], cl
		movzx	eax, [ebp+var_1D]
		sub	eax, 80h ; '€'
		movzx	ecx, al
		cmp	ecx, 7Eh ; '~'
		jl	short loc_ACA
		jmp	loc_B82
; ---------------------------------------------------------------------------
		jmp	loc_B6D
; ---------------------------------------------------------------------------

loc_ACA:				; CODE XREF: _utf8_back1SafeBody_56+5Aj
		movzx	eax, [ebp+var_1D]
		cmp	eax, 0C0h ; 'À'
		jl	loc_B6D
		movzx	eax, [ebp+var_1D]
		cmp	eax, 0F0h ; 'ð'
		jge	short loc_B0B
		movzx	ecx, [ebp+var_1D]
		xor	edx, edx
		cmp	ecx, 0C0h ; 'À'
		setnl	dl
		movzx	eax, [ebp+var_1D]
		xor	ecx, ecx
		cmp	eax, 0E0h ; 'à'
		setnl	cl
		add	edx, ecx
		mov	[ebp+var_E8], edx
		jmp	short loc_B56
; ---------------------------------------------------------------------------

loc_B0B:				; CODE XREF: _utf8_back1SafeBody_56+7Ej
		movzx	edx, [ebp+var_1D]
		cmp	edx, 0FEh ; 'þ'
		jge	short loc_B40
		movzx	eax, [ebp+var_1D]
		xor	ecx, ecx
		cmp	eax, 0F8h ; 'ø'
		setnl	cl
		movzx	edx, [ebp+var_1D]
		xor	eax, eax
		cmp	edx, 0FCh ; 'ü'
		setnl	al
		lea	ecx, [ecx+eax+3]
		mov	[ebp+var_EC], ecx
		jmp	short loc_B4A
; ---------------------------------------------------------------------------

loc_B40:				; CODE XREF: _utf8_back1SafeBody_56+B1j
		mov	[ebp+var_EC], 0

loc_B4A:				; CODE XREF: _utf8_back1SafeBody_56+DAj
		mov	edx, [ebp+var_EC]
		mov	[ebp+var_E8], edx

loc_B56:				; CODE XREF: _utf8_back1SafeBody_56+A5j
		mov	eax, [ebp+arg_8]
		sub	eax, [ebp+var_8]
		cmp	[ebp+var_E8], eax
		jl	short loc_B6B
		mov	eax, [ebp+var_8]
		jmp	short loc_B85
; ---------------------------------------------------------------------------
		jmp	short loc_B6D
; ---------------------------------------------------------------------------

loc_B6B:				; CODE XREF: _utf8_back1SafeBody_56+FEj
		jmp	short loc_B82
; ---------------------------------------------------------------------------

loc_B6D:				; CODE XREF: _utf8_back1SafeBody_56+61j
					; _utf8_back1SafeBody_56+6Fj ...
		mov	eax, [ebp+var_8]
		sub	eax, 1
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+var_14]
		cmp	ecx, [ebp+var_8]
		jle	loc_AA4

loc_B82:				; CODE XREF: _utf8_back1SafeBody_56+5Cj
					; _utf8_back1SafeBody_56:loc_B6Bj
		mov	eax, [ebp+arg_8]

loc_B85:				; CODE XREF: _utf8_back1SafeBody_56+103j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_utf8_back1SafeBody_56 endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; void __cdecl __wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
		extrn __imp___wassert:near ; CODE XREF:	_utf8_nextCharSafeBody_56+CBp
					; DATA XREF: _utf8_nextCharSafeBody_56+CBr
		extrn __RTC_CheckEsp:near ; CODE XREF: _utf8_nextCharSafeBody_56+D6p
					; _utf8_nextCharSafeBody_56+2C7p ...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo


		end
