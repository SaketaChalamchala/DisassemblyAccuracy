;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	B2FE41848384E457B58A046851634423
; Input	CRC32 :	B60449B7

; File Name   :	D:\compspace\objfiles\firefox\common\ubidiwrt.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"
;
; Exported entry
;

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ubidi_writeReverse_56
_ubidi_writeReverse_56 proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= word ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_14], 0
		jz	short loc_2C
		mov	eax, [ebp+arg_14]
		cmp	dword ptr [eax], 0
		jle	short loc_33

loc_2C:					; CODE XREF: _ubidi_writeReverse_56+22j
		xor	eax, eax
		jmp	loc_100
; ---------------------------------------------------------------------------

loc_33:					; CODE XREF: _ubidi_writeReverse_56+2Aj
		cmp	[ebp+arg_0], 0
		jz	short loc_51
		cmp	[ebp+arg_4], 0FFFFFFFFh
		jl	short loc_51
		cmp	[ebp+arg_C], 0
		jl	short loc_51
		cmp	[ebp+arg_C], 0
		jle	short loc_61
		cmp	[ebp+arg_8], 0
		jnz	short loc_61

loc_51:					; CODE XREF: _ubidi_writeReverse_56+37j
					; _ubidi_writeReverse_56+3Dj ...
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 1
		xor	eax, eax
		jmp	loc_100
; ---------------------------------------------------------------------------

loc_61:					; CODE XREF: _ubidi_writeReverse_56+49j
					; _ubidi_writeReverse_56+4Fj
		cmp	[ebp+arg_8], 0
		jz	short loc_A0
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+arg_8]
		jb	short loc_7D
		mov	eax, [ebp+arg_C]
		mov	ecx, [ebp+arg_8]
		lea	edx, [ecx+eax*2]
		cmp	[ebp+arg_0], edx
		jb	short loc_93

loc_7D:					; CODE XREF: _ubidi_writeReverse_56+6Dj
		mov	eax, [ebp+arg_8]
		cmp	eax, [ebp+arg_0]
		jb	short loc_A0
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax*2]
		cmp	[ebp+arg_8], edx
		jnb	short loc_A0

loc_93:					; CODE XREF: _ubidi_writeReverse_56+7Bj
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 1
		xor	eax, eax
		jmp	short loc_100
; ---------------------------------------------------------------------------

loc_A0:					; CODE XREF: _ubidi_writeReverse_56+65j
					; _ubidi_writeReverse_56+83j ...
		cmp	[ebp+arg_4], 0FFFFFFFFh
		jnz	short loc_B5
		mov	eax, [ebp+arg_0]
		push	eax
		call	_u_strlen_56
		add	esp, 4
		mov	[ebp+arg_4], eax

loc_B5:					; CODE XREF: _ubidi_writeReverse_56+A4j
		cmp	[ebp+arg_4], 0
		jle	short loc_E1
		mov	eax, [ebp+arg_14]
		push	eax
		movzx	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_doWriteReverse
		add	esp, 18h
		mov	[ebp+var_8], eax
		jmp	short loc_E8
; ---------------------------------------------------------------------------

loc_E1:					; CODE XREF: _ubidi_writeReverse_56+B9j
		mov	[ebp+var_8], 0

loc_E8:					; CODE XREF: _ubidi_writeReverse_56+DFj
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		call	_u_terminateUChars_56
		add	esp, 10h

loc_100:				; CODE XREF: _ubidi_writeReverse_56+2Ej
					; _ubidi_writeReverse_56+5Cj ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ubidi_writeReverse_56 endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 114h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 118h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 11Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_doWriteReverse	proc near		; CODE XREF: _ubidi_writeReverse_56+D4p
					; _ubidi_writeReordered_56+220p ...

var_130		= dword	ptr -130h
var_68		= dword	ptr -68h
var_5C		= word ptr -5Ch
var_50		= word ptr -50h
var_44		= word ptr -44h
var_38		= dword	ptr -38h
var_2C		= word ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= word ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 130h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_130]
		mov	ecx, 4Ch ; 'L'
		mov	eax, 0CCCCCCCCh
		rep stosd
		movzx	eax, [ebp+arg_10]
		and	eax, 0Bh
		mov	[ebp+var_130], eax
		jz	short loc_15B
		cmp	[ebp+var_130], 1
		jz	loc_206
		jmp	loc_2F9
; ---------------------------------------------------------------------------

loc_15B:				; CODE XREF: _doWriteReverse+2Bj
		mov	eax, [ebp+arg_C]
		cmp	eax, [ebp+arg_4]
		jge	short loc_174
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0Fh
		mov	eax, [ebp+arg_4]
		jmp	loc_5B2
; ---------------------------------------------------------------------------

loc_174:				; CODE XREF: _doWriteReverse+45j
		mov	eax, [ebp+arg_4]
		mov	[ebp+arg_C], eax

loc_17A:				; CODE XREF: _doWriteReverse+DFj
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_4]
		sub	eax, 1
		mov	[ebp+arg_4], eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_0]
		movzx	eax, word ptr [edx+ecx*2]
		and	eax, 0FFFFFC00h
		cmp	eax, 0DC00h
		jnz	short loc_1C7
		cmp	[ebp+arg_4], 0
		jle	short loc_1C7
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		movzx	edx, word ptr [ecx+eax*2-2]
		and	edx, 0FFFFFC00h
		cmp	edx, 0D800h
		jnz	short loc_1C7
		mov	eax, [ebp+arg_4]
		sub	eax, 1
		mov	[ebp+arg_4], eax

loc_1C7:				; CODE XREF: _doWriteReverse+81j
					; _doWriteReverse+87j ...
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_14], eax

loc_1CD:				; CODE XREF: _doWriteReverse+D9j
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+var_14]
		mov	edx, [ebp+arg_0]
		mov	cx, [edx+ecx*2]
		mov	[eax], cx
		mov	edx, [ebp+arg_8]
		add	edx, 2
		mov	[ebp+arg_8], edx
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_8]
		jl	short loc_1CD
		cmp	[ebp+arg_4], 0
		jg	loc_17A
		jmp	loc_5AF
; ---------------------------------------------------------------------------

loc_206:				; CODE XREF: _doWriteReverse+34j
		mov	eax, [ebp+arg_C]
		cmp	eax, [ebp+arg_4]
		jge	short loc_21F
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0Fh
		mov	eax, [ebp+arg_4]
		jmp	loc_5B2
; ---------------------------------------------------------------------------

loc_21F:				; CODE XREF: _doWriteReverse+F0j
		mov	eax, [ebp+arg_4]
		mov	[ebp+arg_C], eax

loc_225:				; CODE XREF: _doWriteReverse+1D2j
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax

loc_22B:				; CODE XREF: _doWriteReverse+198j
		mov	eax, [ebp+arg_4]
		sub	eax, 1
		mov	[ebp+arg_4], eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_0]
		movzx	eax, word ptr [edx+ecx*2]
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_20]
		and	eax, 0FFFFFC00h
		cmp	eax, 0DC00h
		jnz	short loc_292
		cmp	[ebp+arg_4], 0
		jle	short loc_292
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		mov	dx, [ecx+eax*2-2]
		mov	[ebp+var_2C], dx
		movzx	eax, [ebp+var_2C]
		and	eax, 0FFFFFC00h
		cmp	eax, 0D800h
		jnz	short loc_292
		mov	eax, [ebp+arg_4]
		sub	eax, 1
		mov	[ebp+arg_4], eax
		movzx	eax, [ebp+var_2C]
		shl	eax, 0Ah
		mov	ecx, [ebp+var_20]
		lea	edx, [eax+ecx-35FDC00h]
		mov	[ebp+var_20], edx

loc_292:				; CODE XREF: _doWriteReverse+132j
					; _doWriteReverse+138j	...
		cmp	[ebp+arg_4], 0
		jle	short loc_2BA
		mov	eax, [ebp+var_20]
		push	eax
		call	_u_charType_56
		add	esp, 4
		movsx	ecx, al
		mov	edx, 1
		shl	edx, cl
		and	edx, 1C0h
		jnz	loc_22B

loc_2BA:				; CODE XREF: _doWriteReverse+17Aj
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_14], eax

loc_2C0:				; CODE XREF: _doWriteReverse+1CCj
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+var_14]
		mov	edx, [ebp+arg_0]
		mov	cx, [edx+ecx*2]
		mov	[eax], cx
		mov	edx, [ebp+arg_8]
		add	edx, 2
		mov	[ebp+arg_8], edx
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_8]
		jl	short loc_2C0
		cmp	[ebp+arg_4], 0
		jg	loc_225
		jmp	loc_5AF
; ---------------------------------------------------------------------------

loc_2F9:				; CODE XREF: _doWriteReverse+3Aj
		movzx	eax, [ebp+arg_10]
		and	eax, 8
		jnz	short loc_30A
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		jmp	short loc_379
; ---------------------------------------------------------------------------

loc_30A:				; CODE XREF: _doWriteReverse+1E4j
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_38], eax
		mov	[ebp+var_8], 0

loc_317:				; CODE XREF: _doWriteReverse+24Ej
		mov	eax, [ebp+arg_0]
		mov	cx, [eax]
		mov	[ebp+var_44], cx
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx
		movzx	eax, [ebp+var_44]
		and	eax, 0FFFFFFFCh
		cmp	eax, 200Ch
		jz	short loc_35D
		movzx	eax, [ebp+var_44]
		sub	eax, 202Ah
		cmp	eax, 5
		jb	short loc_35D
		movzx	eax, [ebp+var_44]
		sub	eax, 2066h
		cmp	eax, 4
		jb	short loc_35D
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax

loc_35D:				; CODE XREF: _doWriteReverse+21Aj
					; _doWriteReverse+228j	...
		mov	eax, [ebp+var_38]
		sub	eax, 1
		mov	[ebp+var_38], eax
		cmp	[ebp+var_38], 0
		jg	short loc_317
		mov	eax, [ebp+arg_4]
		shl	eax, 1
		mov	ecx, [ebp+arg_0]
		sub	ecx, eax
		mov	[ebp+arg_0], ecx

loc_379:				; CODE XREF: _doWriteReverse+1ECj
		mov	eax, [ebp+arg_C]
		cmp	eax, [ebp+var_8]
		jge	short loc_392
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0Fh
		mov	eax, [ebp+var_8]
		jmp	loc_5B2
; ---------------------------------------------------------------------------

loc_392:				; CODE XREF: _doWriteReverse+263j
		mov	eax, [ebp+var_8]
		mov	[ebp+arg_C], eax

loc_398:				; CODE XREF: _doWriteReverse+48Dj
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_4]
		sub	eax, 1
		mov	[ebp+arg_4], eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_0]
		movzx	eax, word ptr [edx+ecx*2]
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_20]
		and	eax, 0FFFFFC00h
		cmp	eax, 0DC00h
		jnz	short loc_405
		cmp	[ebp+arg_4], 0
		jle	short loc_405
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		mov	dx, [ecx+eax*2-2]
		mov	[ebp+var_50], dx
		movzx	eax, [ebp+var_50]
		and	eax, 0FFFFFC00h
		cmp	eax, 0D800h
		jnz	short loc_405
		mov	eax, [ebp+arg_4]
		sub	eax, 1
		mov	[ebp+arg_4], eax
		movzx	eax, [ebp+var_50]
		shl	eax, 0Ah
		mov	ecx, [ebp+var_20]
		lea	edx, [eax+ecx-35FDC00h]
		mov	[ebp+var_20], edx

loc_405:				; CODE XREF: _doWriteReverse+2A5j
					; _doWriteReverse+2ABj	...
		movzx	eax, [ebp+arg_10]
		and	eax, 1
		jz	loc_4A6

loc_412:				; CODE XREF: _doWriteReverse:loc_4A1j
		cmp	[ebp+arg_4], 0
		jle	loc_4A6
		mov	eax, [ebp+var_20]
		push	eax
		call	_u_charType_56
		add	esp, 4
		movsx	ecx, al
		mov	edx, 1
		shl	edx, cl
		and	edx, 1C0h
		jz	short loc_4A6
		mov	eax, [ebp+arg_4]
		sub	eax, 1
		mov	[ebp+arg_4], eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_0]
		movzx	eax, word ptr [edx+ecx*2]
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_20]
		and	eax, 0FFFFFC00h
		cmp	eax, 0DC00h
		jnz	short loc_4A1
		cmp	[ebp+arg_4], 0
		jle	short loc_4A1
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		mov	dx, [ecx+eax*2-2]
		mov	[ebp+var_5C], dx
		movzx	eax, [ebp+var_5C]
		and	eax, 0FFFFFC00h
		cmp	eax, 0D800h
		jnz	short loc_4A1
		mov	eax, [ebp+arg_4]
		sub	eax, 1
		mov	[ebp+arg_4], eax
		movzx	eax, [ebp+var_5C]
		shl	eax, 0Ah
		mov	ecx, [ebp+var_20]
		lea	edx, [eax+ecx-35FDC00h]
		mov	[ebp+var_20], edx

loc_4A1:				; CODE XREF: _doWriteReverse+341j
					; _doWriteReverse+347j	...
		jmp	loc_412
; ---------------------------------------------------------------------------

loc_4A6:				; CODE XREF: _doWriteReverse+2F0j
					; _doWriteReverse+2FAj	...
		movzx	eax, [ebp+arg_10]
		and	eax, 8
		jz	short loc_4DB
		mov	eax, [ebp+var_20]
		and	eax, 0FFFFFFFCh
		cmp	eax, 200Ch
		jz	short loc_4D6
		mov	eax, [ebp+var_20]
		sub	eax, 202Ah
		cmp	eax, 5
		jb	short loc_4D6
		mov	eax, [ebp+var_20]
		sub	eax, 2066h
		cmp	eax, 4
		jnb	short loc_4DB

loc_4D6:				; CODE XREF: _doWriteReverse+39Ej
					; _doWriteReverse+3ABj
		jmp	loc_5A5
; ---------------------------------------------------------------------------

loc_4DB:				; CODE XREF: _doWriteReverse+391j
					; _doWriteReverse+3B8j
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_14], eax
		movzx	eax, [ebp+arg_10]
		and	eax, 2
		jz	loc_579
		mov	[ebp+var_68], 0
		mov	eax, [ebp+var_20]
		push	eax
		call	_u_charMirror_56
		add	esp, 4
		mov	[ebp+var_20], eax
		cmp	[ebp+var_20], 0FFFFh
		ja	short loc_526
		mov	eax, [ebp+var_68]
		mov	ecx, [ebp+arg_8]
		mov	dx, word ptr [ebp+var_20]
		mov	[ecx+eax*2], dx
		mov	eax, [ebp+var_68]
		add	eax, 1
		mov	[ebp+var_68], eax
		jmp	short loc_564
; ---------------------------------------------------------------------------

loc_526:				; CODE XREF: _doWriteReverse+3EFj
		mov	eax, [ebp+var_20]
		sar	eax, 0Ah
		add	eax, 0D7C0h
		mov	ecx, [ebp+var_68]
		mov	edx, [ebp+arg_8]
		mov	[edx+ecx*2], ax
		mov	eax, [ebp+var_68]
		add	eax, 1
		mov	[ebp+var_68], eax
		mov	eax, [ebp+var_20]
		and	eax, 3FFh
		or	eax, 0DC00h
		mov	ecx, [ebp+var_68]
		mov	edx, [ebp+arg_8]
		mov	[edx+ecx*2], ax
		mov	eax, [ebp+var_68]
		add	eax, 1
		mov	[ebp+var_68], eax

loc_564:				; CODE XREF: _doWriteReverse+408j
		mov	eax, [ebp+var_68]
		mov	ecx, [ebp+arg_8]
		lea	edx, [ecx+eax*2]
		mov	[ebp+arg_8], edx
		mov	eax, [ebp+var_14]
		add	eax, [ebp+var_68]
		mov	[ebp+var_14], eax

loc_579:				; CODE XREF: _doWriteReverse+3CCj
					; _doWriteReverse+487j
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_8]
		jge	short loc_5A5
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+var_14]
		mov	edx, [ebp+arg_0]
		mov	cx, [edx+ecx*2]
		mov	[eax], cx
		mov	edx, [ebp+arg_8]
		add	edx, 2
		mov	[ebp+arg_8], edx
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		jmp	short loc_579
; ---------------------------------------------------------------------------

loc_5A5:				; CODE XREF: _doWriteReverse:loc_4D6j
					; _doWriteReverse+463j
		cmp	[ebp+arg_4], 0
		jg	loc_398

loc_5AF:				; CODE XREF: _doWriteReverse+E5j
					; _doWriteReverse+1D8j
		mov	eax, [ebp+arg_C]

loc_5B2:				; CODE XREF: _doWriteReverse+53j
					; _doWriteReverse+FEj ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 130h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_doWriteReverse	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 5C8h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ubidi_writeReordered_56
_ubidi_writeReordered_56 proc near

var_180		= byte ptr -180h
var_BC		= dword	ptr -0BCh
var_B0		= dword	ptr -0B0h
var_A4		= dword	ptr -0A4h
var_98		= dword	ptr -98h
var_8C		= dword	ptr -8Ch
var_80		= word ptr -80h
var_74		= dword	ptr -74h
var_68		= dword	ptr -68h
var_5C		= dword	ptr -5Ch
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= word ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 180h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_180]
		mov	ecx, 60h ; '`'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_10], 0
		jz	short loc_5F4
		mov	eax, [ebp+arg_10]
		cmp	dword ptr [eax], 0
		jle	short loc_5FB

loc_5F4:				; CODE XREF: _ubidi_writeReordered_56+22j
		xor	eax, eax
		jmp	loc_E0D
; ---------------------------------------------------------------------------

loc_5FB:				; CODE XREF: _ubidi_writeReordered_56+2Aj
		cmp	[ebp+arg_0], 0
		jz	short loc_631
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	[ebp+var_8], ecx
		cmp	[ebp+var_8], 0
		jz	short loc_631
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+10h]
		mov	[ebp+var_20], ecx
		cmp	[ebp+var_20], 0
		jl	short loc_631
		cmp	[ebp+arg_8], 0
		jl	short loc_631
		cmp	[ebp+arg_8], 0
		jle	short loc_641
		cmp	[ebp+arg_4], 0
		jnz	short loc_641

loc_631:				; CODE XREF: _ubidi_writeReordered_56+37j
					; _ubidi_writeReordered_56+46j	...
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 1
		xor	eax, eax
		jmp	loc_E0D
; ---------------------------------------------------------------------------

loc_641:				; CODE XREF: _ubidi_writeReordered_56+61j
					; _ubidi_writeReordered_56+67j
		cmp	[ebp+arg_4], 0
		jz	short loc_686
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_4]
		jb	short loc_65D
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_4]
		lea	edx, [ecx+eax*2]
		cmp	[ebp+var_8], edx
		jb	short loc_676

loc_65D:				; CODE XREF: _ubidi_writeReordered_56+85j
		mov	eax, [ebp+arg_4]
		cmp	eax, [ebp+var_8]
		jb	short loc_686
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	edx, [ebp+var_8]
		lea	eax, [edx+ecx*2]
		cmp	[ebp+arg_4], eax
		jnb	short loc_686

loc_676:				; CODE XREF: _ubidi_writeReordered_56+93j
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 1
		xor	eax, eax
		jmp	loc_E0D
; ---------------------------------------------------------------------------

loc_686:				; CODE XREF: _ubidi_writeReordered_56+7Dj
					; _ubidi_writeReordered_56+9Bj	...
		cmp	[ebp+var_20], 0
		jnz	short loc_6A7
		mov	eax, [ebp+arg_10]
		push	eax
		push	0
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		call	_u_terminateUChars_56
		add	esp, 10h
		jmp	loc_E0D
; ---------------------------------------------------------------------------

loc_6A7:				; CODE XREF: _ubidi_writeReordered_56+C2j
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ubidi_countRuns_56
		add	esp, 8
		mov	[ebp+var_44], eax
		mov	eax, [ebp+arg_10]
		cmp	dword ptr [eax], 0
		jle	short loc_6C9
		xor	eax, eax
		jmp	loc_E0D
; ---------------------------------------------------------------------------

loc_6C9:				; CODE XREF: _ubidi_writeReordered_56+F8j
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+5Ch]
		and	ecx, 1
		jz	short loc_6F6
		movzx	eax, [ebp+arg_C]
		or	eax, 4
		mov	[ebp+arg_C], ax
		movzx	eax, [ebp+arg_C]
		and	eax, 0FFFFFFF7h
		mov	[ebp+arg_C], ax

loc_6F6:				; CODE XREF: _ubidi_writeReordered_56+116j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+5Ch]
		and	ecx, 2
		jz	short loc_717
		movzx	eax, [ebp+arg_C]
		or	eax, 8
		mov	[ebp+arg_C], ax
		movzx	eax, [ebp+arg_C]
		and	eax, 0FFFFFFFBh
		mov	[ebp+arg_C], ax

loc_717:				; CODE XREF: _ubidi_writeReordered_56+137j
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+58h], 4
		jz	short loc_746
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+58h], 5
		jz	short loc_746
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+58h], 6
		jz	short loc_746
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+58h], 3
		jz	short loc_746
		movzx	eax, [ebp+arg_C]
		and	eax, 0FFFFFFFBh
		mov	[ebp+arg_C], ax

loc_746:				; CODE XREF: _ubidi_writeReordered_56+156j
					; _ubidi_writeReordered_56+15Fj ...
		movzx	eax, [ebp+arg_C]
		and	eax, 10h
		jnz	loc_B5E
		movzx	eax, [ebp+arg_C]
		and	eax, 4
		jnz	loc_818
		mov	[ebp+var_38], 0
		jmp	short loc_772
; ---------------------------------------------------------------------------

loc_769:				; CODE XREF: _ubidi_writeReordered_56+246j
		mov	eax, [ebp+var_38]
		add	eax, 1
		mov	[ebp+var_38], eax

loc_772:				; CODE XREF: _ubidi_writeReordered_56+19Fj
		mov	eax, [ebp+var_38]
		cmp	eax, [ebp+var_44]
		jge	loc_813
		lea	eax, [ebp+var_5C]
		push	eax
		lea	ecx, [ebp+var_50]
		push	ecx
		mov	edx, [ebp+var_38]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ubidi_getVisualRun_56
		add	esp, 10h
		test	eax, eax
		jnz	short loc_7C9
		mov	eax, [ebp+arg_10]
		push	eax
		movzx	ecx, [ebp+arg_C]
		and	ecx, 0FFFFFFFDh
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_5C]
		push	ecx
		mov	edx, [ebp+var_50]
		mov	eax, [ebp+var_8]
		lea	ecx, [eax+edx*2]
		push	ecx
		call	_doWriteForward
		add	esp, 18h
		mov	[ebp+var_5C], eax
		jmp	short loc_7F3
; ---------------------------------------------------------------------------

loc_7C9:				; CODE XREF: _ubidi_writeReordered_56+1D0j
		mov	eax, [ebp+arg_10]
		push	eax
		movzx	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_5C]
		push	ecx
		mov	edx, [ebp+var_50]
		mov	eax, [ebp+var_8]
		lea	ecx, [eax+edx*2]
		push	ecx
		call	_doWriteReverse
		add	esp, 18h
		mov	[ebp+var_5C], eax

loc_7F3:				; CODE XREF: _ubidi_writeReordered_56+1FFj
		cmp	[ebp+arg_4], 0
		jz	short loc_805
		mov	eax, [ebp+var_5C]
		mov	ecx, [ebp+arg_4]
		lea	edx, [ecx+eax*2]
		mov	[ebp+arg_4], edx

loc_805:				; CODE XREF: _ubidi_writeReordered_56+22Fj
		mov	eax, [ebp+arg_8]
		sub	eax, [ebp+var_5C]
		mov	[ebp+arg_8], eax
		jmp	loc_769
; ---------------------------------------------------------------------------

loc_813:				; CODE XREF: _ubidi_writeReordered_56+1B0j
		jmp	loc_B59
; ---------------------------------------------------------------------------

loc_818:				; CODE XREF: _ubidi_writeReordered_56+192j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4Ch]
		mov	[ebp+var_68], ecx
		mov	[ebp+var_38], 0
		jmp	short loc_833
; ---------------------------------------------------------------------------

loc_82A:				; CODE XREF: _ubidi_writeReordered_56:loc_B54j
		mov	eax, [ebp+var_38]
		add	eax, 1
		mov	[ebp+var_38], eax

loc_833:				; CODE XREF: _ubidi_writeReordered_56+260j
		mov	eax, [ebp+var_38]
		cmp	eax, [ebp+var_44]
		jge	loc_B59
		lea	eax, [ebp+var_5C]
		push	eax
		lea	ecx, [ebp+var_50]
		push	ecx
		mov	edx, [ebp+var_38]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ubidi_getVisualRun_56
		add	esp, 10h
		mov	[ebp+var_8C], eax
		mov	eax, [ebp+var_50]
		mov	ecx, [ebp+var_8]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_74], edx
		mov	eax, [ebp+var_38]
		imul	eax, 0Ch
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0E4h]
		mov	eax, [edx+eax+8]
		mov	[ebp+var_98], eax
		cmp	[ebp+var_98], 0
		jge	short loc_895
		mov	[ebp+var_98], 0

loc_895:				; CODE XREF: _ubidi_writeReordered_56+2C1j
		cmp	[ebp+var_8C], 0
		jnz	loc_9F4
		mov	eax, [ebp+arg_0]
		movsx	ecx, byte ptr [eax+54h]
		test	ecx, ecx
		jz	short loc_8C9
		mov	eax, [ebp+var_68]
		add	eax, [ebp+var_50]
		movzx	ecx, byte ptr [eax]
		test	ecx, ecx
		jz	short loc_8C9
		mov	eax, [ebp+var_98]
		or	eax, 1
		mov	[ebp+var_98], eax

loc_8C9:				; CODE XREF: _ubidi_writeReordered_56+2E3j
					; _ubidi_writeReordered_56+2F0j
		mov	eax, [ebp+var_98]
		and	eax, 1
		jz	short loc_8DF
		mov	eax, 200Eh
		mov	[ebp+var_80], ax
		jmp	short loc_8FB
; ---------------------------------------------------------------------------

loc_8DF:				; CODE XREF: _ubidi_writeReordered_56+30Aj
		mov	eax, [ebp+var_98]
		and	eax, 4
		jz	short loc_8F5
		mov	eax, 200Fh
		mov	[ebp+var_80], ax
		jmp	short loc_8FB
; ---------------------------------------------------------------------------

loc_8F5:				; CODE XREF: _ubidi_writeReordered_56+320j
		xor	eax, eax
		mov	[ebp+var_80], ax

loc_8FB:				; CODE XREF: _ubidi_writeReordered_56+315j
					; _ubidi_writeReordered_56+32Bj
		movzx	eax, [ebp+var_80]
		test	eax, eax
		jz	short loc_925
		cmp	[ebp+arg_8], 0
		jle	short loc_91C
		mov	eax, [ebp+arg_4]
		mov	cx, [ebp+var_80]
		mov	[eax], cx
		mov	edx, [ebp+arg_4]
		add	edx, 2
		mov	[ebp+arg_4], edx

loc_91C:				; CODE XREF: _ubidi_writeReordered_56+33Fj
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax

loc_925:				; CODE XREF: _ubidi_writeReordered_56+339j
		mov	eax, [ebp+arg_10]
		push	eax
		movzx	ecx, [ebp+arg_C]
		and	ecx, 0FFFFFFFDh
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_5C]
		push	ecx
		mov	edx, [ebp+var_74]
		push	edx
		call	_doWriteForward
		add	esp, 18h
		mov	[ebp+var_5C], eax
		cmp	[ebp+arg_4], 0
		jz	short loc_95E
		mov	eax, [ebp+var_5C]
		mov	ecx, [ebp+arg_4]
		lea	edx, [ecx+eax*2]
		mov	[ebp+arg_4], edx

loc_95E:				; CODE XREF: _ubidi_writeReordered_56+388j
		mov	eax, [ebp+arg_8]
		sub	eax, [ebp+var_5C]
		mov	[ebp+arg_8], eax
		mov	eax, [ebp+arg_0]
		movsx	ecx, byte ptr [eax+54h]
		test	ecx, ecx
		jz	short loc_993
		mov	eax, [ebp+var_50]
		add	eax, [ebp+var_5C]
		mov	ecx, [ebp+var_68]
		movzx	edx, byte ptr [ecx+eax-1]
		test	edx, edx
		jz	short loc_993
		mov	eax, [ebp+var_98]
		or	eax, 2
		mov	[ebp+var_98], eax

loc_993:				; CODE XREF: _ubidi_writeReordered_56+3A8j
					; _ubidi_writeReordered_56+3BAj
		mov	eax, [ebp+var_98]
		and	eax, 2
		jz	short loc_9A9
		mov	eax, 200Eh
		mov	[ebp+var_80], ax
		jmp	short loc_9C5
; ---------------------------------------------------------------------------

loc_9A9:				; CODE XREF: _ubidi_writeReordered_56+3D4j
		mov	eax, [ebp+var_98]
		and	eax, 8
		jz	short loc_9BF
		mov	eax, 200Fh
		mov	[ebp+var_80], ax
		jmp	short loc_9C5
; ---------------------------------------------------------------------------

loc_9BF:				; CODE XREF: _ubidi_writeReordered_56+3EAj
		xor	eax, eax
		mov	[ebp+var_80], ax

loc_9C5:				; CODE XREF: _ubidi_writeReordered_56+3DFj
					; _ubidi_writeReordered_56+3F5j
		movzx	eax, [ebp+var_80]
		test	eax, eax
		jz	short loc_9EF
		cmp	[ebp+arg_8], 0
		jle	short loc_9E6
		mov	eax, [ebp+arg_4]
		mov	cx, [ebp+var_80]
		mov	[eax], cx
		mov	edx, [ebp+arg_4]
		add	edx, 2
		mov	[ebp+arg_4], edx

loc_9E6:				; CODE XREF: _ubidi_writeReordered_56+409j
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax

loc_9EF:				; CODE XREF: _ubidi_writeReordered_56+403j
		jmp	loc_B54
; ---------------------------------------------------------------------------

loc_9F4:				; CODE XREF: _ubidi_writeReordered_56+2D4j
		mov	eax, [ebp+arg_0]
		movsx	ecx, byte ptr [eax+54h]
		test	ecx, ecx
		jz	short loc_A2B
		mov	eax, [ebp+var_50]
		add	eax, [ebp+var_5C]
		mov	ecx, [ebp+var_68]
		movzx	ecx, byte ptr [ecx+eax-1]
		mov	edx, 1
		shl	edx, cl
		and	edx, 2002h
		jnz	short loc_A2B
		mov	eax, [ebp+var_98]
		or	eax, 4
		mov	[ebp+var_98], eax

loc_A2B:				; CODE XREF: _ubidi_writeReordered_56+435j
					; _ubidi_writeReordered_56+452j
		mov	eax, [ebp+var_98]
		and	eax, 1
		jz	short loc_A41
		mov	eax, 200Eh
		mov	[ebp+var_80], ax
		jmp	short loc_A5D
; ---------------------------------------------------------------------------

loc_A41:				; CODE XREF: _ubidi_writeReordered_56+46Cj
		mov	eax, [ebp+var_98]
		and	eax, 4
		jz	short loc_A57
		mov	eax, 200Fh
		mov	[ebp+var_80], ax
		jmp	short loc_A5D
; ---------------------------------------------------------------------------

loc_A57:				; CODE XREF: _ubidi_writeReordered_56+482j
		xor	eax, eax
		mov	[ebp+var_80], ax

loc_A5D:				; CODE XREF: _ubidi_writeReordered_56+477j
					; _ubidi_writeReordered_56+48Dj
		movzx	eax, [ebp+var_80]
		test	eax, eax
		jz	short loc_A87
		cmp	[ebp+arg_8], 0
		jle	short loc_A7E
		mov	eax, [ebp+arg_4]
		mov	cx, [ebp+var_80]
		mov	[eax], cx
		mov	edx, [ebp+arg_4]
		add	edx, 2
		mov	[ebp+arg_4], edx

loc_A7E:				; CODE XREF: _ubidi_writeReordered_56+4A1j
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax

loc_A87:				; CODE XREF: _ubidi_writeReordered_56+49Bj
		mov	eax, [ebp+arg_10]
		push	eax
		movzx	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_5C]
		push	ecx
		mov	edx, [ebp+var_74]
		push	edx
		call	_doWriteReverse
		add	esp, 18h
		mov	[ebp+var_5C], eax
		cmp	[ebp+arg_4], 0
		jz	short loc_ABD
		mov	eax, [ebp+var_5C]
		mov	ecx, [ebp+arg_4]
		lea	edx, [ecx+eax*2]
		mov	[ebp+arg_4], edx

loc_ABD:				; CODE XREF: _ubidi_writeReordered_56+4E7j
		mov	eax, [ebp+arg_8]
		sub	eax, [ebp+var_5C]
		mov	[ebp+arg_8], eax
		mov	eax, [ebp+arg_0]
		movsx	ecx, byte ptr [eax+54h]
		test	ecx, ecx
		jz	short loc_AF8
		mov	eax, [ebp+var_68]
		add	eax, [ebp+var_50]
		movzx	ecx, byte ptr [eax]
		mov	edx, 1
		shl	edx, cl
		and	edx, 2002h
		jnz	short loc_AF8
		mov	eax, [ebp+var_98]
		or	eax, 8
		mov	[ebp+var_98], eax

loc_AF8:				; CODE XREF: _ubidi_writeReordered_56+507j
					; _ubidi_writeReordered_56+51Fj
		mov	eax, [ebp+var_98]
		and	eax, 2
		jz	short loc_B0E
		mov	eax, 200Eh
		mov	[ebp+var_80], ax
		jmp	short loc_B2A
; ---------------------------------------------------------------------------

loc_B0E:				; CODE XREF: _ubidi_writeReordered_56+539j
		mov	eax, [ebp+var_98]
		and	eax, 8
		jz	short loc_B24
		mov	eax, 200Fh
		mov	[ebp+var_80], ax
		jmp	short loc_B2A
; ---------------------------------------------------------------------------

loc_B24:				; CODE XREF: _ubidi_writeReordered_56+54Fj
		xor	eax, eax
		mov	[ebp+var_80], ax

loc_B2A:				; CODE XREF: _ubidi_writeReordered_56+544j
					; _ubidi_writeReordered_56+55Aj
		movzx	eax, [ebp+var_80]
		test	eax, eax
		jz	short loc_B54
		cmp	[ebp+arg_8], 0
		jle	short loc_B4B
		mov	eax, [ebp+arg_4]
		mov	cx, [ebp+var_80]
		mov	[eax], cx
		mov	edx, [ebp+arg_4]
		add	edx, 2
		mov	[ebp+arg_4], edx

loc_B4B:				; CODE XREF: _ubidi_writeReordered_56+56Ej
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax

loc_B54:				; CODE XREF: _ubidi_writeReordered_56:loc_9EFj
					; _ubidi_writeReordered_56+568j
		jmp	loc_82A
; ---------------------------------------------------------------------------

loc_B59:				; CODE XREF: _ubidi_writeReordered_56:loc_813j
					; _ubidi_writeReordered_56+271j
		jmp	loc_DF2
; ---------------------------------------------------------------------------

loc_B5E:				; CODE XREF: _ubidi_writeReordered_56+185j
		movzx	eax, [ebp+arg_C]
		and	eax, 4
		jnz	loc_C1A
		mov	eax, [ebp+var_44]
		mov	[ebp+var_38], eax

loc_B71:				; CODE XREF: _ubidi_writeReordered_56+648j
		mov	eax, [ebp+var_38]
		sub	eax, 1
		mov	[ebp+var_38], eax
		js	loc_C15
		lea	eax, [ebp+var_5C]
		push	eax
		lea	ecx, [ebp+var_50]
		push	ecx
		mov	edx, [ebp+var_38]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ubidi_getVisualRun_56
		add	esp, 10h
		test	eax, eax
		jnz	short loc_BCB
		mov	eax, [ebp+arg_10]
		push	eax
		movzx	ecx, [ebp+arg_C]
		and	ecx, 0FFFFFFFDh
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_5C]
		push	ecx
		mov	edx, [ebp+var_50]
		mov	eax, [ebp+var_8]
		lea	ecx, [eax+edx*2]
		push	ecx
		call	_doWriteReverse
		add	esp, 18h
		mov	[ebp+var_5C], eax
		jmp	short loc_BF5
; ---------------------------------------------------------------------------

loc_BCB:				; CODE XREF: _ubidi_writeReordered_56+5D2j
		mov	eax, [ebp+arg_10]
		push	eax
		movzx	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_5C]
		push	ecx
		mov	edx, [ebp+var_50]
		mov	eax, [ebp+var_8]
		lea	ecx, [eax+edx*2]
		push	ecx
		call	_doWriteForward
		add	esp, 18h
		mov	[ebp+var_5C], eax

loc_BF5:				; CODE XREF: _ubidi_writeReordered_56+601j
		cmp	[ebp+arg_4], 0
		jz	short loc_C07
		mov	eax, [ebp+var_5C]
		mov	ecx, [ebp+arg_4]
		lea	edx, [ecx+eax*2]
		mov	[ebp+arg_4], edx

loc_C07:				; CODE XREF: _ubidi_writeReordered_56+631j
		mov	eax, [ebp+arg_8]
		sub	eax, [ebp+var_5C]
		mov	[ebp+arg_8], eax
		jmp	loc_B71
; ---------------------------------------------------------------------------

loc_C15:				; CODE XREF: _ubidi_writeReordered_56+5B2j
		jmp	loc_DF2
; ---------------------------------------------------------------------------

loc_C1A:				; CODE XREF: _ubidi_writeReordered_56+59Dj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4Ch]
		mov	[ebp+var_A4], ecx
		mov	eax, [ebp+var_44]
		mov	[ebp+var_38], eax

loc_C2C:				; CODE XREF: _ubidi_writeReordered_56:loc_DEDj
		mov	eax, [ebp+var_38]
		sub	eax, 1
		mov	[ebp+var_38], eax
		js	loc_DF2
		lea	eax, [ebp+var_5C]
		push	eax
		lea	ecx, [ebp+var_50]
		push	ecx
		mov	edx, [ebp+var_38]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ubidi_getVisualRun_56
		add	esp, 10h
		mov	[ebp+var_BC], eax
		mov	eax, [ebp+var_50]
		mov	ecx, [ebp+var_8]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_B0], edx
		cmp	[ebp+var_BC], 0
		jnz	loc_D2A
		mov	eax, [ebp+var_50]
		add	eax, [ebp+var_5C]
		mov	ecx, [ebp+var_A4]
		movzx	edx, byte ptr [ecx+eax-1]
		test	edx, edx
		jz	short loc_CAD
		cmp	[ebp+arg_8], 0
		jle	short loc_CA4
		mov	eax, 200Eh
		mov	ecx, [ebp+arg_4]
		mov	[ecx], ax
		mov	edx, [ebp+arg_4]
		add	edx, 2
		mov	[ebp+arg_4], edx

loc_CA4:				; CODE XREF: _ubidi_writeReordered_56+6C6j
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax

loc_CAD:				; CODE XREF: _ubidi_writeReordered_56+6C0j
		mov	eax, [ebp+arg_10]
		push	eax
		movzx	ecx, [ebp+arg_C]
		and	ecx, 0FFFFFFFDh
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_5C]
		push	ecx
		mov	edx, [ebp+var_B0]
		push	edx
		call	_doWriteReverse
		add	esp, 18h
		mov	[ebp+var_5C], eax
		cmp	[ebp+arg_4], 0
		jz	short loc_CE9
		mov	eax, [ebp+var_5C]
		mov	ecx, [ebp+arg_4]
		lea	edx, [ecx+eax*2]
		mov	[ebp+arg_4], edx

loc_CE9:				; CODE XREF: _ubidi_writeReordered_56+713j
		mov	eax, [ebp+arg_8]
		sub	eax, [ebp+var_5C]
		mov	[ebp+arg_8], eax
		mov	eax, [ebp+var_A4]
		add	eax, [ebp+var_50]
		movzx	ecx, byte ptr [eax]
		test	ecx, ecx
		jz	short loc_D25
		cmp	[ebp+arg_8], 0
		jle	short loc_D1C
		mov	eax, 200Eh
		mov	ecx, [ebp+arg_4]
		mov	[ecx], ax
		mov	edx, [ebp+arg_4]
		add	edx, 2
		mov	[ebp+arg_4], edx

loc_D1C:				; CODE XREF: _ubidi_writeReordered_56+73Ej
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax

loc_D25:				; CODE XREF: _ubidi_writeReordered_56+738j
		jmp	loc_DED
; ---------------------------------------------------------------------------

loc_D2A:				; CODE XREF: _ubidi_writeReordered_56+6A7j
		mov	eax, [ebp+var_A4]
		add	eax, [ebp+var_50]
		movzx	ecx, byte ptr [eax]
		mov	edx, 1
		shl	edx, cl
		and	edx, 2002h
		jnz	short loc_D68
		cmp	[ebp+arg_8], 0
		jle	short loc_D5F
		mov	eax, 200Fh
		mov	ecx, [ebp+arg_4]
		mov	[ecx], ax
		mov	edx, [ebp+arg_4]
		add	edx, 2
		mov	[ebp+arg_4], edx

loc_D5F:				; CODE XREF: _ubidi_writeReordered_56+781j
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax

loc_D68:				; CODE XREF: _ubidi_writeReordered_56+77Bj
		mov	eax, [ebp+arg_10]
		push	eax
		movzx	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_5C]
		push	ecx
		mov	edx, [ebp+var_B0]
		push	edx
		call	_doWriteForward
		add	esp, 18h
		mov	[ebp+var_5C], eax
		cmp	[ebp+arg_4], 0
		jz	short loc_DA1
		mov	eax, [ebp+var_5C]
		mov	ecx, [ebp+arg_4]
		lea	edx, [ecx+eax*2]
		mov	[ebp+arg_4], edx

loc_DA1:				; CODE XREF: _ubidi_writeReordered_56+7CBj
		mov	eax, [ebp+arg_8]
		sub	eax, [ebp+var_5C]
		mov	[ebp+arg_8], eax
		mov	eax, [ebp+var_50]
		add	eax, [ebp+var_5C]
		mov	ecx, [ebp+var_A4]
		movzx	ecx, byte ptr [ecx+eax-1]
		mov	edx, 1
		shl	edx, cl
		and	edx, 2002h
		jnz	short loc_DED
		cmp	[ebp+arg_8], 0
		jle	short loc_DE4
		mov	eax, 200Fh
		mov	ecx, [ebp+arg_4]
		mov	[ecx], ax
		mov	edx, [ebp+arg_4]
		add	edx, 2
		mov	[ebp+arg_4], edx

loc_DE4:				; CODE XREF: _ubidi_writeReordered_56+806j
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax

loc_DED:				; CODE XREF: _ubidi_writeReordered_56:loc_D25j
					; _ubidi_writeReordered_56+800j
		jmp	loc_C2C
; ---------------------------------------------------------------------------

loc_DF2:				; CODE XREF: _ubidi_writeReordered_56:loc_B59j
					; _ubidi_writeReordered_56:loc_C15j ...
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+var_2C]
		sub	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+var_2C]
		push	edx
		mov	eax, [ebp+var_14]
		push	eax
		call	_u_terminateUChars_56
		add	esp, 10h

loc_E0D:				; CODE XREF: _ubidi_writeReordered_56+2Ej
					; _ubidi_writeReordered_56+74j	...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN85
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 180h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ubidi_writeReordered_56 endp

; ---------------------------------------------------------------------------
		align 4
$LN85		dd 2			; DATA XREF: _ubidi_writeReordered_56+849o
		dd offset $LN84
$LN84		dd 0FFFFFFB0h, 4	; DATA XREF: .text:00000E38o
		dd offset $LN82		; "logicalStart"
		dd 0FFFFFFA4h, 4
		dd offset $LN83		; "runLength"
$LN83		db 'runLength',0        ; DATA XREF: .text:00000E50o
$LN82		db 'logicalStart',0     ; DATA XREF: .text:00000E44o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0E6Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_doWriteForward	proc near		; CODE XREF: _ubidi_writeReordered_56+1F4p
					; _ubidi_writeReordered_56+379p ...

var_154		= dword	ptr -154h
var_8C		= word ptr -8Ch
var_80		= dword	ptr -80h
var_74		= dword	ptr -74h
var_68		= dword	ptr -68h
var_5C		= dword	ptr -5Ch
var_50		= word ptr -50h
var_44		= dword	ptr -44h
var_38		= word ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= word ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 154h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_154]
		mov	ecx, 55h ; 'U'
		mov	eax, 0CCCCCCCCh
		rep stosd
		movzx	eax, [ebp+arg_10]
		and	eax, 0Ah
		mov	[ebp+var_154], eax
		jz	short loc_EB4
		cmp	[ebp+var_154], 2
		jz	short loc_F08
		cmp	[ebp+var_154], 8
		jz	loc_101A
		jmp	loc_1110
; ---------------------------------------------------------------------------

loc_EB4:				; CODE XREF: _doWriteForward+2Bj
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_C]
		cmp	eax, [ebp+var_8]
		jge	short loc_ED3
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0Fh
		mov	eax, [ebp+arg_4]
		jmp	loc_12C8
; ---------------------------------------------------------------------------

loc_ED3:				; CODE XREF: _doWriteForward+54j
					; _doWriteForward+92j
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		mov	dx, [ecx]
		mov	[eax], dx
		mov	eax, [ebp+arg_8]
		add	eax, 2
		mov	[ebp+arg_8], eax
		mov	ecx, [ebp+arg_0]
		add	ecx, 2
		mov	[ebp+arg_0], ecx
		mov	eax, [ebp+var_8]
		sub	eax, 1
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jg	short loc_ED3
		mov	eax, [ebp+arg_4]
		jmp	loc_12C8
; ---------------------------------------------------------------------------

loc_F08:				; CODE XREF: _doWriteForward+34j
		mov	[ebp+var_14], 0
		mov	[ebp+var_20], 0
		mov	eax, [ebp+arg_C]
		cmp	eax, [ebp+arg_4]
		jge	short loc_F2F
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0Fh
		mov	eax, [ebp+arg_4]
		jmp	loc_12C8
; ---------------------------------------------------------------------------

loc_F2F:				; CODE XREF: _doWriteForward+B0j
					; _doWriteForward+1A0j
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_0]
		movzx	edx, word ptr [ecx+eax*2]
		mov	[ebp+var_2C], edx
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_2C]
		and	eax, 0FFFFFC00h
		cmp	eax, 0D800h
		jnz	short loc_F97
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+arg_4]
		jz	short loc_F97
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_0]
		mov	dx, [ecx+eax*2]
		mov	[ebp+var_38], dx
		movzx	eax, [ebp+var_38]
		and	eax, 0FFFFFC00h
		cmp	eax, 0DC00h
		jnz	short loc_F97
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_2C]
		shl	eax, 0Ah
		movzx	ecx, [ebp+var_38]
		lea	edx, [eax+ecx-35FDC00h]
		mov	[ebp+var_2C], edx

loc_F97:				; CODE XREF: _doWriteForward+E6j
					; _doWriteForward+EEj ...
		mov	eax, [ebp+var_2C]
		push	eax
		call	_u_charMirror_56
		add	esp, 4
		mov	[ebp+var_2C], eax
		cmp	[ebp+var_2C], 0FFFFh
		ja	short loc_FC8
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+arg_8]
		mov	dx, word ptr [ebp+var_2C]
		mov	[ecx+eax*2], dx
		mov	eax, [ebp+var_20]
		add	eax, 1
		mov	[ebp+var_20], eax
		jmp	short loc_1006
; ---------------------------------------------------------------------------

loc_FC8:				; CODE XREF: _doWriteForward+141j
		mov	eax, [ebp+var_2C]
		sar	eax, 0Ah
		add	eax, 0D7C0h
		mov	ecx, [ebp+var_20]
		mov	edx, [ebp+arg_8]
		mov	[edx+ecx*2], ax
		mov	eax, [ebp+var_20]
		add	eax, 1
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_2C]
		and	eax, 3FFh
		or	eax, 0DC00h
		mov	ecx, [ebp+var_20]
		mov	edx, [ebp+arg_8]
		mov	[edx+ecx*2], ax
		mov	eax, [ebp+var_20]
		add	eax, 1
		mov	[ebp+var_20], eax

loc_1006:				; CODE XREF: _doWriteForward+15Aj
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+arg_4]
		jl	loc_F2F
		mov	eax, [ebp+arg_4]
		jmp	loc_12C8
; ---------------------------------------------------------------------------

loc_101A:				; CODE XREF: _doWriteForward+3Dj
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_44], eax

loc_1020:				; CODE XREF: _doWriteForward+293j
		mov	eax, [ebp+arg_0]
		mov	cx, [eax]
		mov	[ebp+var_50], cx
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx
		movzx	eax, [ebp+var_50]
		and	eax, 0FFFFFFFCh
		cmp	eax, 200Ch
		jz	loc_10F2
		movzx	eax, [ebp+var_50]
		sub	eax, 202Ah
		cmp	eax, 5
		jb	loc_10F2
		movzx	eax, [ebp+var_50]
		sub	eax, 2066h
		cmp	eax, 4
		jb	loc_10F2
		mov	eax, [ebp+var_44]
		sub	eax, 1
		mov	[ebp+var_44], eax
		jns	short loc_10DF
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0Fh

loc_107D:				; CODE XREF: _doWriteForward:loc_10D2j
		mov	eax, [ebp+arg_4]
		sub	eax, 1
		mov	[ebp+arg_4], eax
		cmp	[ebp+arg_4], 0
		jle	short loc_10D4
		mov	eax, [ebp+arg_0]
		mov	cx, [eax]
		mov	[ebp+var_50], cx
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx
		movzx	eax, [ebp+var_50]
		and	eax, 0FFFFFFFCh
		cmp	eax, 200Ch
		jz	short loc_10D2
		movzx	eax, [ebp+var_50]
		sub	eax, 202Ah
		cmp	eax, 5
		jb	short loc_10D2
		movzx	eax, [ebp+var_50]
		sub	eax, 2066h
		cmp	eax, 4
		jb	short loc_10D2
		mov	eax, [ebp+var_44]
		sub	eax, 1
		mov	[ebp+var_44], eax

loc_10D2:				; CODE XREF: _doWriteForward+23Fj
					; _doWriteForward+24Dj	...
		jmp	short loc_107D
; ---------------------------------------------------------------------------

loc_10D4:				; CODE XREF: _doWriteForward+21Ej
		mov	eax, [ebp+arg_C]
		sub	eax, [ebp+var_44]
		jmp	loc_12C8
; ---------------------------------------------------------------------------

loc_10DF:				; CODE XREF: _doWriteForward+206j
		mov	eax, [ebp+arg_8]
		mov	cx, [ebp+var_50]
		mov	[eax], cx
		mov	edx, [ebp+arg_8]
		add	edx, 2
		mov	[ebp+arg_8], edx

loc_10F2:				; CODE XREF: _doWriteForward+1D3j
					; _doWriteForward+1E5j	...
		mov	eax, [ebp+arg_4]
		sub	eax, 1
		mov	[ebp+arg_4], eax
		cmp	[ebp+arg_4], 0
		jg	loc_1020
		mov	eax, [ebp+arg_C]
		sub	eax, [ebp+var_44]
		jmp	loc_12C8
; ---------------------------------------------------------------------------

loc_1110:				; CODE XREF: _doWriteForward+43j
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_5C], eax
		mov	[ebp+var_74], 0

loc_111D:				; CODE XREF: _doWriteForward+453j
		mov	[ebp+var_68], 0
		mov	eax, [ebp+var_68]
		mov	ecx, [ebp+arg_0]
		movzx	edx, word ptr [ecx+eax*2]
		mov	[ebp+var_80], edx
		mov	eax, [ebp+var_68]
		add	eax, 1
		mov	[ebp+var_68], eax
		mov	eax, [ebp+var_80]
		and	eax, 0FFFFFC00h
		cmp	eax, 0D800h
		jnz	short loc_1195
		mov	eax, [ebp+var_68]
		cmp	eax, [ebp+arg_4]
		jz	short loc_1195
		mov	eax, [ebp+var_68]
		mov	ecx, [ebp+arg_0]
		mov	dx, [ecx+eax*2]
		mov	[ebp+var_8C], dx
		movzx	eax, [ebp+var_8C]
		and	eax, 0FFFFFC00h
		cmp	eax, 0DC00h
		jnz	short loc_1195
		mov	eax, [ebp+var_68]
		add	eax, 1
		mov	[ebp+var_68], eax
		mov	eax, [ebp+var_80]
		shl	eax, 0Ah
		movzx	ecx, [ebp+var_8C]
		lea	edx, [eax+ecx-35FDC00h]
		mov	[ebp+var_80], edx

loc_1195:				; CODE XREF: _doWriteForward+2DBj
					; _doWriteForward+2E3j	...
		mov	eax, [ebp+var_68]
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax*2]
		mov	[ebp+arg_0], edx
		mov	eax, [ebp+arg_4]
		sub	eax, [ebp+var_68]
		mov	[ebp+arg_4], eax
		mov	eax, [ebp+var_80]
		and	eax, 0FFFFFFFCh
		cmp	eax, 200Ch
		jz	loc_12BB
		mov	eax, [ebp+var_80]
		sub	eax, 202Ah
		cmp	eax, 5
		jb	loc_12BB
		mov	eax, [ebp+var_80]
		sub	eax, 2066h
		cmp	eax, 4
		jb	loc_12BB
		mov	eax, [ebp+var_5C]
		sub	eax, [ebp+var_68]
		mov	[ebp+var_5C], eax
		jns	short loc_124C
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0Fh

loc_11F1:				; CODE XREF: _doWriteForward+3D6j
		cmp	[ebp+arg_4], 0
		jle	short loc_1244
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		mov	[ebp+var_80], ecx
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx
		mov	eax, [ebp+var_80]
		and	eax, 0FFFFFFFCh
		cmp	eax, 200Ch
		jz	short loc_1239
		mov	eax, [ebp+var_80]
		sub	eax, 202Ah
		cmp	eax, 5
		jb	short loc_1239
		mov	eax, [ebp+var_80]
		sub	eax, 2066h
		cmp	eax, 4
		jb	short loc_1239
		mov	eax, [ebp+var_5C]
		sub	eax, 1
		mov	[ebp+var_5C], eax

loc_1239:				; CODE XREF: _doWriteForward+3A8j
					; _doWriteForward+3B5j	...
		mov	eax, [ebp+arg_4]
		sub	eax, 1
		mov	[ebp+arg_4], eax
		jmp	short loc_11F1
; ---------------------------------------------------------------------------

loc_1244:				; CODE XREF: _doWriteForward+389j
		mov	eax, [ebp+arg_C]
		sub	eax, [ebp+var_5C]
		jmp	short loc_12C8
; ---------------------------------------------------------------------------

loc_124C:				; CODE XREF: _doWriteForward+37Aj
		mov	eax, [ebp+var_80]
		push	eax
		call	_u_charMirror_56
		add	esp, 4
		mov	[ebp+var_80], eax
		cmp	[ebp+var_80], 0FFFFh
		ja	short loc_127D
		mov	eax, [ebp+var_74]
		mov	ecx, [ebp+arg_8]
		mov	dx, word ptr [ebp+var_80]
		mov	[ecx+eax*2], dx
		mov	eax, [ebp+var_74]
		add	eax, 1
		mov	[ebp+var_74], eax
		jmp	short loc_12BB
; ---------------------------------------------------------------------------

loc_127D:				; CODE XREF: _doWriteForward+3F6j
		mov	eax, [ebp+var_80]
		sar	eax, 0Ah
		add	eax, 0D7C0h
		mov	ecx, [ebp+var_74]
		mov	edx, [ebp+arg_8]
		mov	[edx+ecx*2], ax
		mov	eax, [ebp+var_74]
		add	eax, 1
		mov	[ebp+var_74], eax
		mov	eax, [ebp+var_80]
		and	eax, 3FFh
		or	eax, 0DC00h
		mov	ecx, [ebp+var_74]
		mov	edx, [ebp+arg_8]
		mov	[edx+ecx*2], ax
		mov	eax, [ebp+var_74]
		add	eax, 1
		mov	[ebp+var_74], eax

loc_12BB:				; CODE XREF: _doWriteForward+349j
					; _doWriteForward+35Aj	...
		cmp	[ebp+arg_4], 0
		jg	loc_111D
		mov	eax, [ebp+var_74]

loc_12C8:				; CODE XREF: _doWriteForward+62j
					; _doWriteForward+97j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 154h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_doWriteForward	endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _u_terminateUChars_56:near ; CODE	XREF: _ubidi_writeReverse_56+F8p
					; _ubidi_writeReordered_56+D2p	...
		extrn _u_strlen_56:near	; CODE XREF: _ubidi_writeReverse_56+AAp
		extrn __RTC_CheckEsp:near ; CODE XREF: _ubidi_writeReverse_56+10Bp
					; _doWriteReverse+4A1p	...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn _u_charMirror_56:near ; CODE XREF: _doWriteReverse+3DDp
					; _doWriteForward+12Fp	...
		extrn _u_charType_56:near ; CODE XREF: _doWriteReverse+180p
					; _doWriteReverse+304p
		extrn _ubidi_getVisualRun_56:near ; CODE XREF: _ubidi_writeReordered_56+1C6p
					; _ubidi_writeReordered_56+287p ...
		extrn _ubidi_countRuns_56:near ; CODE XREF: _ubidi_writeReordered_56+E7p
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _ubidi_writeReordered_56+84Fp


		end
