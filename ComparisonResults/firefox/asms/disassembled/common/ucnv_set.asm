;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	8B7A95FD86DF56E215FE3BEC4E99A70F
; Input	CRC32 :	6AC02A2E

; File Name   :	D:\compspace\objfiles\firefox\common\ucnv_set.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"
;
; Exported entry
;

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ucnv_getUnicodeSet_56
_ucnv_getUnicodeSet_56 proc near

var_E0		= byte ptr -0E0h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E0]
		mov	ecx, 38h ; '8'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_C], 0
		jz	short loc_2C
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jle	short loc_31

loc_2C:					; CODE XREF: _ucnv_getUnicodeSet_56+22j
		jmp	loc_D7
; ---------------------------------------------------------------------------

loc_31:					; CODE XREF: _ucnv_getUnicodeSet_56+2Aj
		cmp	[ebp+arg_0], 0
		jz	short loc_49
		cmp	[ebp+arg_4], 0
		jz	short loc_49
		cmp	[ebp+arg_8], 0
		jl	short loc_49
		cmp	[ebp+arg_8], 2
		jl	short loc_57

loc_49:					; CODE XREF: _ucnv_getUnicodeSet_56+35j
					; _ucnv_getUnicodeSet_56+3Bj ...
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 1
		jmp	loc_D7
; ---------------------------------------------------------------------------

loc_57:					; CODE XREF: _ucnv_getUnicodeSet_56+47j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+18h]
		mov	edx, [ecx+14h]
		cmp	dword ptr [edx+3Ch], 0
		jnz	short loc_71
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 10h
		jmp	short loc_D7
; ---------------------------------------------------------------------------

loc_71:					; CODE XREF: _ucnv_getUnicodeSet_56+64j
		mov	[ebp+var_1C], 0
		mov	[ebp+var_18], offset _uset_add_56
		mov	[ebp+var_14], offset _uset_addRange_56
		mov	[ebp+var_10], offset _uset_addString_56
		mov	[ebp+var_C], offset _uset_remove_56
		mov	[ebp+var_8], offset _uset_removeRange_56
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+arg_4]
		push	eax
		call	_uset_clear_56
		add	esp, 4
		mov	esi, esp
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		lea	edx, [ebp+var_1C]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+18h]
		mov	eax, [edx+14h]
		mov	ecx, [eax+3Ch]
		call	ecx
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_D7:					; CODE XREF: _ucnv_getUnicodeSet_56:loc_2Cj
					; _ucnv_getUnicodeSet_56+52j ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN10
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ucnv_getUnicodeSet_56 endp

; ---------------------------------------------------------------------------
$LN10		dd 1			; DATA XREF: _ucnv_getUnicodeSet_56+DBo
		dd offset $LN9
$LN9		dd 0FFFFFFE4h, 18h	; DATA XREF: .text:00000100o
		dd offset $LN8
$LN8		db 73h,	61h, 0		; DATA XREF: .text:0000010Co
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 114h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 118h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _uset_clear_56:near ; CODE XREF: _ucnv_getUnicodeSet_56+A5p
		extrn _uset_removeRange_56:near	; DATA XREF: _ucnv_getUnicodeSet_56+94o
		extrn _uset_remove_56:near ; DATA XREF:	_ucnv_getUnicodeSet_56+8Do
		extrn _uset_addString_56:near ;	DATA XREF: _ucnv_getUnicodeSet_56+86o
		extrn _uset_addRange_56:near ; DATA XREF: _ucnv_getUnicodeSet_56+7Fo
		extrn _uset_add_56:near	; DATA XREF: _ucnv_getUnicodeSet_56+78o
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _ucnv_getUnicodeSet_56+E1p
		extrn __RTC_CheckEsp:near ; CODE XREF: _ucnv_getUnicodeSet_56+D2p
					; _ucnv_getUnicodeSet_56+F3p
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo


		end
