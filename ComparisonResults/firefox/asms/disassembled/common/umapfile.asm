;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	8382A2DAEEE3B2844F37B842D26981A0
; Input	CRC32 :	03F0AAA9

; File Name   :	D:\compspace\objfiles\firefox\common\umapfile.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl uprv_mapFile_56(int, LPCSTR lpFileName)
		public _uprv_mapFile_56
_uprv_mapFile_56 proc near

var_114		= byte ptr -114h
pSecurityDescriptor= byte ptr -50h
lpFileMappingAttributes= dword ptr -34h
Dst		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
hFile		= dword	ptr -14h
hFileMappingObject= dword ptr -8
arg_0		= dword	ptr  8
lpFileName	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 114h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_114]
		mov	ecx, 45h ; 'E'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+lpFileMappingAttributes], 0
		mov	eax, [ebp+arg_0]
		push	eax
		call	_UDataMemory_init_56
		add	esp, 4
		mov	esi, esp
		push	0		; hTemplateFile
		push	10000080h	; dwFlagsAndAttributes
		push	3		; dwCreationDisposition
		push	0		; lpSecurityAttributes
		push	1		; dwShareMode
		push	80000000h	; dwDesiredAccess
		mov	eax, [ebp+lpFileName]
		push	eax		; lpFileName
		call	dword ptr ds:__imp__CreateFileA@28 ; CreateFileA(x,x,x,x,x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+hFile], eax
		cmp	[ebp+hFile], 0FFFFFFFFh
		jnz	short loc_66
		xor	al, al
		jmp	loc_151
; ---------------------------------------------------------------------------

loc_66:					; CODE XREF: _uprv_mapFile_56+5Dj
		mov	esi, esp
		push	1		; dwRevision
		lea	eax, [ebp+pSecurityDescriptor]
		push	eax		; pSecurityDescriptor
		call	dword ptr ds:__imp__InitializeSecurityDescriptor@8 ; InitializeSecurityDescriptor(x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_C6
		mov	esi, esp
		push	0		; bDaclDefaulted
		push	0		; pDacl
		push	1		; bDaclPresent
		lea	eax, [ebp+pSecurityDescriptor]
		push	eax		; pSecurityDescriptor
		call	dword ptr ds:__imp__SetSecurityDescriptorDacl@16 ; SetSecurityDescriptorDacl(x,x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_C6
		push	0Ch		; Size
		push	0		; Val
		lea	eax, [ebp+Dst]
		push	eax		; Dst
		call	_memset
		add	esp, 0Ch
		mov	[ebp+Dst], 0Ch
		lea	eax, [ebp+pSecurityDescriptor]
		mov	[ebp+var_24], eax
		mov	[ebp+var_20], 0
		lea	eax, [ebp+Dst]
		mov	[ebp+lpFileMappingAttributes], eax

loc_C6:					; CODE XREF: _uprv_mapFile_56+7Dj
					; _uprv_mapFile_56+9Aj
		mov	esi, esp
		push	0		; lpName
		push	0		; dwMaximumSizeLow
		push	0		; dwMaximumSizeHigh
		push	2		; flProtect
		mov	eax, [ebp+lpFileMappingAttributes]
		push	eax		; lpFileMappingAttributes
		mov	ecx, [ebp+hFile]
		push	ecx		; hFile
		call	dword ptr ds:__imp__CreateFileMappingA@24 ; CreateFileMappingA(x,x,x,x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+hFileMappingObject], eax
		mov	esi, esp
		mov	eax, [ebp+hFile]
		push	eax		; hObject
		call	dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	[ebp+hFileMappingObject], 0
		jnz	short loc_105
		xor	al, al
		jmp	short loc_151
; ---------------------------------------------------------------------------

loc_105:				; CODE XREF: _uprv_mapFile_56+FFj
		mov	esi, esp
		push	0		; dwNumberOfBytesToMap
		push	0		; dwFileOffsetLow
		push	0		; dwFileOffsetHigh
		push	4		; dwDesiredAccess
		mov	eax, [ebp+hFileMappingObject]
		push	eax		; hFileMappingObject
		call	dword ptr ds:__imp__MapViewOfFile@20 ; MapViewOfFile(x,x,x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+arg_0]
		mov	[ecx+4], eax
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+4], 0
		jnz	short loc_146
		mov	esi, esp
		mov	eax, [ebp+hFileMappingObject]
		push	eax		; hObject
		call	dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		xor	al, al
		jmp	short loc_151
; ---------------------------------------------------------------------------

loc_146:				; CODE XREF: _uprv_mapFile_56+12Dj
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+hFileMappingObject]
		mov	[eax+14h], ecx
		mov	al, 1

loc_151:				; CODE XREF: _uprv_mapFile_56+61j
					; _uprv_mapFile_56+103j ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN11
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 114h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uprv_mapFile_56 endp

; ---------------------------------------------------------------------------
		align 4
$LN11		dd 2			; DATA XREF: _uprv_mapFile_56+155o
		dd offset $LN10
$LN10		dd 0FFFFFFD8h, 0Ch	; DATA XREF: .text:0000017Co
		dd offset $LN8		; "mappingAttributes"
		dd 0FFFFFFB0h, 14h
		dd offset $LN9		; "securityDesc"
$LN9		db 'securityDesc',0     ; DATA XREF: .text:00000194o
$LN8		db 'mappingAttributes',0 ; DATA XREF: .text:00000188o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 1B8h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 1BCh
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1C0h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_unmapFile_56
_uprv_unmapFile_56 proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jz	short loc_22D
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+14h], 0
		jz	short loc_22D
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		push	ecx		; lpBaseAddress
		call	dword ptr ds:__imp__UnmapViewOfFile@4 ;	UnmapViewOfFile(x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		push	ecx		; hObject
		call	dword ptr ds:__imp__CloseHandle@4 ; CloseHandle(x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+4], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+14h], 0

loc_22D:				; CODE XREF: _uprv_unmapFile_56+22j
					; _uprv_unmapFile_56+2Bj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uprv_unmapFile_56 endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; LPVOID __stdcall MapViewOfFile(HANDLE	hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap)
		extrn __imp__MapViewOfFile@20:near ; CODE XREF:	_uprv_mapFile_56+113p
					; DATA XREF: _uprv_mapFile_56+113r
; BOOL __stdcall CloseHandle(HANDLE hObject)
		extrn __imp__CloseHandle@4:near	; CODE XREF: _uprv_mapFile_56+EEp
					; _uprv_mapFile_56+135p ...
; HANDLE __stdcall CreateFileMappingA(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName)
		extrn __imp__CreateFileMappingA@24:near	; CODE XREF: _uprv_mapFile_56+D8p
					; DATA XREF: _uprv_mapFile_56+D8r
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _uprv_mapFile_56+A4p
; BOOL __stdcall SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR	pSecurityDescriptor, BOOL bDaclPresent,	PACL pDacl, BOOL bDaclDefaulted)
		extrn __imp__SetSecurityDescriptorDacl@16:near
					; CODE XREF: _uprv_mapFile_56+8Bp
					; DATA XREF: _uprv_mapFile_56+8Br
; BOOL __stdcall InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor,	DWORD dwRevision)
		extrn __imp__InitializeSecurityDescriptor@8:near
					; CODE XREF: _uprv_mapFile_56+6Ep
					; DATA XREF: _uprv_mapFile_56+6Er
; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD	dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes,	DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE	hTemplateFile)
		extrn __imp__CreateFileA@28:near ; CODE	XREF: _uprv_mapFile_56+49p
					; DATA XREF: _uprv_mapFile_56+49r
		extrn _UDataMemory_init_56:near	; CODE XREF: _uprv_mapFile_56+29p
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _uprv_mapFile_56+15Bp
		extrn __RTC_CheckEsp:near ; CODE XREF: _uprv_mapFile_56+51p
					; _uprv_mapFile_56+76p	...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; BOOL __stdcall UnmapViewOfFile(LPCVOID lpBaseAddress)
		extrn __imp__UnmapViewOfFile@4:near ; CODE XREF: _uprv_unmapFile_56+36p
					; DATA XREF: _uprv_unmapFile_56+36r


		end
