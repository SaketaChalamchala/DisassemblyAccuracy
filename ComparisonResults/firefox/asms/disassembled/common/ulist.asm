;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	3C34E5E759C24EF25B03545C4927BD54
; Input	CRC32 :	92858604

; File Name   :	D:\compspace\objfiles\firefox\common\ulist.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"
;
; Exported entry
;

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ulist_createEmptyList_56
_ulist_createEmptyList_56 proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax], 0
		jle	short loc_31
		xor	eax, eax
		jmp	short loc_85
; ---------------------------------------------------------------------------

loc_31:					; CODE XREF: _ulist_createEmptyList_56+2Bj
		push	14h
		call	_uprv_malloc_56
		add	esp, 4
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jnz	short loc_51
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 7
		xor	eax, eax
		jmp	short loc_85
; ---------------------------------------------------------------------------

loc_51:					; CODE XREF: _ulist_createEmptyList_56+42j
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+4], 0
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+8], 0
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+0Ch], 0
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+10h], 0FFFFFFFFh
		mov	eax, [ebp+var_8]

loc_85:					; CODE XREF: _ulist_createEmptyList_56+2Fj
					; _ulist_createEmptyList_56+4Fj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ulist_createEmptyList_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 9Ch
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 0A0h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A4h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ulist_addItemEndList_56
_ulist_addItemEndList_56 proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jg	short loc_DD
		cmp	[ebp+arg_0], 0
		jz	short loc_DD
		cmp	[ebp+arg_4], 0
		jnz	short loc_E2

loc_DD:					; CODE XREF: _ulist_addItemEndList_56+2Bj
					; _ulist_addItemEndList_56+31j
		jmp	loc_166
; ---------------------------------------------------------------------------

loc_E2:					; CODE XREF: _ulist_addItemEndList_56+37j
		push	10h
		call	_uprv_malloc_56
		add	esp, 4
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jnz	short loc_100
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 7
		jmp	short loc_166
; ---------------------------------------------------------------------------

loc_100:				; CODE XREF: _ulist_addItemEndList_56+4Fj
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_4]
		mov	[eax], ecx
		mov	eax, [ebp+var_8]
		mov	cl, [ebp+arg_8]
		mov	[eax+0Ch], cl
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_12C
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ulist_addFirstItem
		add	esp, 8
		jmp	short loc_157
; ---------------------------------------------------------------------------

loc_12C:				; CODE XREF: _ulist_addItemEndList_56+74j
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+4], 0
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		mov	[eax+8], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	edx, [ebp+var_8]
		mov	[ecx+4], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		mov	[eax+8], ecx

loc_157:				; CODE XREF: _ulist_addItemEndList_56+86j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		add	ecx, 1
		mov	edx, [ebp+arg_0]
		mov	[edx+0Ch], ecx

loc_166:				; CODE XREF: _ulist_addItemEndList_56:loc_DDj
					; _ulist_addItemEndList_56+5Aj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ulist_addItemEndList_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 17Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ulist_addFirstItem proc near		; CODE XREF: _ulist_addItemEndList_56+7Ep
					; _ulist_addItemBeginList_56+7Ep

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax+4], 0
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax+8], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	[eax+4], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	[eax+8], ecx
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+10h], 0
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_ulist_addFirstItem endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1D4h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ulist_addItemBeginList_56
_ulist_addItemBeginList_56 proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jg	short loc_20D
		cmp	[ebp+arg_0], 0
		jz	short loc_20D
		cmp	[ebp+arg_4], 0
		jnz	short loc_212

loc_20D:				; CODE XREF: _ulist_addItemBeginList_56+2Bj
					; _ulist_addItemBeginList_56+31j
		jmp	loc_2A5
; ---------------------------------------------------------------------------

loc_212:				; CODE XREF: _ulist_addItemBeginList_56+37j
		push	10h
		call	_uprv_malloc_56
		add	esp, 4
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jnz	short loc_230
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 7
		jmp	short loc_2A5
; ---------------------------------------------------------------------------

loc_230:				; CODE XREF: _ulist_addItemBeginList_56+4Fj
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_4]
		mov	[eax], ecx
		mov	eax, [ebp+var_8]
		mov	cl, [ebp+arg_8]
		mov	[eax+0Ch], cl
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_25C
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ulist_addFirstItem
		add	esp, 8
		jmp	short loc_296
; ---------------------------------------------------------------------------

loc_25C:				; CODE XREF: _ulist_addItemBeginList_56+74j
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+8], 0
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_8]
		mov	[ecx+8], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		mov	[eax+4], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+10h]
		add	ecx, 1
		mov	edx, [ebp+arg_0]
		mov	[edx+10h], ecx

loc_296:				; CODE XREF: _ulist_addItemBeginList_56+86j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		add	ecx, 1
		mov	edx, [ebp+arg_0]
		mov	[edx+0Ch], ecx

loc_2A5:				; CODE XREF: _ulist_addItemBeginList_56:loc_20Dj
					; _ulist_addItemBeginList_56+5Aj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ulist_addItemBeginList_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2BCh
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ulist_containsString_56(int, void	*, size_t)
		public _ulist_containsString_56
_ulist_containsString_56 proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_5		= byte ptr -5
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_5], 0
		mov	[ebp+var_14], 0
		cmp	[ebp+arg_0], 0
		jz	short loc_341
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+0Ch], 0
		jz	short loc_341
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	[ebp+var_14], ecx

loc_2FD:				; CODE XREF: _ulist_containsString_56+83j
		cmp	[ebp+var_14], 0
		jz	short loc_341
		mov	eax, [ebp+var_14]
		mov	ecx, [eax]
		push	ecx		; char *
		call	_strlen
		add	esp, 4
		cmp	[ebp+arg_8], eax
		jnz	short loc_336
		mov	eax, [ebp+arg_8]
		push	eax		; size_t
		mov	ecx, [ebp+var_14]
		mov	edx, [ecx]
		push	edx		; void *
		mov	eax, [ebp+arg_4]
		push	eax		; void *
		call	_memcmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_336
		mov	[ebp+var_5], 1
		jmp	short loc_341
; ---------------------------------------------------------------------------

loc_336:				; CODE XREF: _ulist_containsString_56+58j
					; _ulist_containsString_56+72j
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	[ebp+var_14], ecx
		jmp	short loc_2FD
; ---------------------------------------------------------------------------

loc_341:				; CODE XREF: _ulist_containsString_56+2Dj
					; _ulist_containsString_56+36j	...
		mov	al, [ebp+var_5]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ulist_containsString_56 endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 358h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ulist_getNext_56
_ulist_getNext_56 proc near		; CODE XREF: _ulist_next_keyword_value_56+31p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		cmp	[ebp+arg_0], 0
		jz	short loc_38B
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax], 0
		jnz	short loc_38F

loc_38B:				; CODE XREF: _ulist_getNext_56+29j
		xor	eax, eax
		jmp	short loc_3B6
; ---------------------------------------------------------------------------

loc_38F:				; CODE XREF: _ulist_getNext_56+31j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		mov	[eax], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+10h]
		add	ecx, 1
		mov	edx, [ebp+arg_0]
		mov	[edx+10h], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax]

loc_3B6:				; CODE XREF: _ulist_getNext_56+35j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_ulist_getNext_56 endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3C0h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ulist_getListSize_56
_ulist_getListSize_56 proc near		; CODE XREF: _ulist_count_keyword_values_56+32p

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jz	short loc_3EC
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		jmp	short loc_3EF
; ---------------------------------------------------------------------------

loc_3EC:				; CODE XREF: _ulist_getListSize_56+22j
		or	eax, 0FFFFFFFFh

loc_3EF:				; CODE XREF: _ulist_getListSize_56+2Aj
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_ulist_getListSize_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3F8h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ulist_resetList_56
_ulist_resetList_56 proc near		; CODE XREF: _ulist_reset_keyword_values_iterator_56+2Fp

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jz	short loc_431
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	[eax], edx
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+10h], 0

loc_431:				; CODE XREF: _ulist_resetList_56+22j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_ulist_resetList_56 endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 438h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ulist_deleteList_56
_ulist_deleteList_56 proc near		; CODE XREF: _ulist_close_keyword_values_iterator_56+2Bp

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		cmp	[ebp+arg_0], 0
		jz	short loc_4BB
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	[ebp+var_8], ecx

loc_46C:				; CODE XREF: _ulist_deleteList_56+6Ej
		cmp	[ebp+var_8], 0
		jz	short loc_4A8
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+var_8]
		movsx	ecx, byte ptr [eax+0Ch]
		test	ecx, ecx
		jz	short loc_494
		mov	eax, [ebp+var_8]
		mov	ecx, [eax]
		push	ecx
		call	_uprv_free_56
		add	esp, 4

loc_494:				; CODE XREF: _ulist_deleteList_56+4Cj
		mov	eax, [ebp+var_8]
		push	eax
		call	_uprv_free_56
		add	esp, 4
		mov	eax, [ebp+var_14]
		mov	[ebp+var_8], eax
		jmp	short loc_46C
; ---------------------------------------------------------------------------

loc_4A8:				; CODE XREF: _ulist_deleteList_56+38j
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_free_56
		add	esp, 4
		mov	[ebp+arg_0], 0

loc_4BB:				; CODE XREF: _ulist_deleteList_56+29j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ulist_deleteList_56 endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4D0h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ulist_close_keyword_values_iterator_56
_ulist_close_keyword_values_iterator_56	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jz	short loc_50F
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		push	ecx
		call	_ulist_deleteList_56
		add	esp, 4
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_free_56
		add	esp, 4

loc_50F:				; CODE XREF: _ulist_close_keyword_values_iterator_56+22j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ulist_close_keyword_values_iterator_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 524h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ulist_count_keyword_values_56
_ulist_count_keyword_values_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jle	short loc_54F
		or	eax, 0FFFFFFFFh
		jmp	short loc_55E
; ---------------------------------------------------------------------------

loc_54F:				; CODE XREF: _ulist_count_keyword_values_56+24j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		push	ecx
		call	_ulist_getListSize_56
		add	esp, 4

loc_55E:				; CODE XREF: _ulist_count_keyword_values_56+29j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ulist_count_keyword_values_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 574h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ulist_next_keyword_value_56
_ulist_next_keyword_value_56 proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0
		jle	short loc_59E
		xor	eax, eax
		jmp	short loc_5D0
; ---------------------------------------------------------------------------

loc_59E:				; CODE XREF: _ulist_next_keyword_value_56+24j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		push	ecx
		call	_ulist_getNext_56
		add	esp, 4
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_5CD
		cmp	[ebp+arg_4], 0
		jz	short loc_5CD
		mov	eax, [ebp+var_8]
		push	eax		; char *
		call	_strlen
		add	esp, 4
		mov	ecx, [ebp+arg_4]
		mov	[ecx], eax

loc_5CD:				; CODE XREF: _ulist_next_keyword_value_56+40j
					; _ulist_next_keyword_value_56+46j
		mov	eax, [ebp+var_8]

loc_5D0:				; CODE XREF: _ulist_next_keyword_value_56+28j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ulist_next_keyword_value_56 endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 5E4h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ulist_reset_keyword_values_iterator_56
_ulist_reset_keyword_values_iterator_56	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jle	short loc_60C
		jmp	short loc_61B
; ---------------------------------------------------------------------------

loc_60C:				; CODE XREF: _ulist_reset_keyword_values_iterator_56+24j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		push	ecx
		call	_ulist_resetList_56
		add	esp, 4

loc_61B:				; CODE XREF: _ulist_reset_keyword_values_iterator_56+26j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ulist_reset_keyword_values_iterator_56	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 630h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ulist_getListFromEnum_56
_ulist_getListFromEnum_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+4]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_ulist_getListFromEnum_56 endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _uprv_malloc_56:near ; CODE XREF:	_ulist_createEmptyList_56+33p
					; _ulist_addItemEndList_56+40p	...
		extrn __RTC_CheckEsp:near ; CODE XREF: _ulist_createEmptyList_56+90p
					; _ulist_addItemEndList_56+CDp	...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; int __cdecl memcmp(const void	*, const void *, size_t)
		extrn _memcmp:near	; CODE XREF: _ulist_containsString_56+68p
; size_t __cdecl strlen(const char *)
		extrn _strlen:near	; CODE XREF: _ulist_containsString_56+4Dp
					; _ulist_next_keyword_value_56+4Cp
		extrn _uprv_free_56:near ; CODE	XREF: _ulist_deleteList_56+54p
					; _ulist_deleteList_56+60p ...


		end
