;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	59BD7ED7790293C2FF3EA02C250C0761
; Input	CRC32 :	0D1C3D08

; File Name   :	D:\compspace\objfiles\firefox\common\ucnvdisp.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"
;
; Exported entry
;

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ucnv_getDisplayName_56
_ucnv_getDisplayName_56	proc near

var_F0		= byte ptr -0F0h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0F0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_F0]
		mov	ecx, 3Ch ; '<'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_2C], 0
		cmp	[ebp+arg_10], 0
		jz	short loc_33
		mov	eax, [ebp+arg_10]
		cmp	dword ptr [eax], 0
		jle	short loc_3A

loc_33:					; CODE XREF: _ucnv_getDisplayName_56+29j
		xor	eax, eax
		jmp	loc_14B
; ---------------------------------------------------------------------------

loc_3A:					; CODE XREF: _ucnv_getDisplayName_56+31j
		cmp	[ebp+arg_0], 0
		jz	short loc_52
		cmp	[ebp+arg_C], 0
		jl	short loc_52
		cmp	[ebp+arg_C], 0
		jle	short loc_62
		cmp	[ebp+arg_8], 0
		jnz	short loc_62

loc_52:					; CODE XREF: _ucnv_getDisplayName_56+3Ej
					; _ucnv_getDisplayName_56+44j
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 1
		xor	eax, eax
		jmp	loc_14B
; ---------------------------------------------------------------------------

loc_62:					; CODE XREF: _ucnv_getDisplayName_56+4Aj
					; _ucnv_getDisplayName_56+50j
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		push	0
		call	_ures_open_56
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_10]
		cmp	dword ptr [eax], 0
		jle	short loc_86
		xor	eax, eax
		jmp	loc_14B
; ---------------------------------------------------------------------------

loc_86:					; CODE XREF: _ucnv_getDisplayName_56+7Dj
		lea	eax, [ebp+var_2C]
		push	eax
		lea	ecx, [ebp+var_20]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+18h]
		mov	ecx, [eax+0Ch]
		add	ecx, 4
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		call	_ures_getStringByKey_56
		add	esp, 10h
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_8]
		push	eax
		call	_ures_close_56
		add	esp, 4
		cmp	[ebp+var_2C], 0
		jg	short loc_F1
		mov	eax, [ebp+arg_10]
		cmp	dword ptr [eax], 0
		jnz	short loc_CC
		mov	eax, [ebp+arg_10]
		mov	ecx, [ebp+var_2C]
		mov	[eax], ecx

loc_CC:					; CODE XREF: _ucnv_getDisplayName_56+C2j
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+var_20]
		push	ecx
		call	_uprv_min_56
		add	esp, 8
		shl	eax, 1
		push	eax
		mov	edx, [ebp+var_14]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		call	_u_memcpy_56
		add	esp, 0Ch
		jmp	short loc_133
; ---------------------------------------------------------------------------

loc_F1:					; CODE XREF: _ucnv_getDisplayName_56+BAj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+18h]
		mov	edx, [ecx+0Ch]
		add	edx, 4
		push	edx		; char *
		call	_strlen
		add	esp, 4
		mov	[ebp+var_20], eax
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+var_20]
		push	ecx
		call	_uprv_min_56
		add	esp, 8
		push	eax
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+18h]
		mov	edx, [ecx+0Ch]
		add	edx, 4
		push	edx
		call	_u_charsToUChars_56
		add	esp, 0Ch

loc_133:				; CODE XREF: _ucnv_getDisplayName_56+EFj
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+var_20]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		call	_u_terminateUChars_56
		add	esp, 10h

loc_14B:				; CODE XREF: _ucnv_getDisplayName_56+35j
					; _ucnv_getDisplayName_56+5Dj ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN14
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0F0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ucnv_getDisplayName_56	endp

; ---------------------------------------------------------------------------
$LN14		dd 2			; DATA XREF: _ucnv_getDisplayName_56+14Fo
		dd offset $LN13
$LN13		dd 0FFFFFFE0h, 4	; DATA XREF: .text:00000174o
		dd offset $LN11		; "length"
		dd 0FFFFFFD4h, 4
		dd offset $LN12		; "localStatus"
$LN12		db 'localStatus',0      ; DATA XREF: .text:0000018Co
$LN11		db 'length',0           ; DATA XREF: .text:00000180o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 1A4h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 1A8h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _u_terminateUChars_56:near ; CODE	XREF: _ucnv_getDisplayName_56+143p
		extrn _u_charsToUChars_56:near ; CODE XREF: _ucnv_getDisplayName_56+12Bp
; size_t __cdecl strlen(const char *)
		extrn _strlen:near	; CODE XREF: _ucnv_getDisplayName_56+FEp
		extrn _u_memcpy_56:near	; CODE XREF: _ucnv_getDisplayName_56+E7p
		extrn _uprv_min_56:near	; CODE XREF: _ucnv_getDisplayName_56+D4p
					; _ucnv_getDisplayName_56+111p
		extrn _ures_close_56:near ; CODE XREF: _ucnv_getDisplayName_56+AEp
		extrn _ures_getStringByKey_56:near ; CODE XREF:	_ucnv_getDisplayName_56+9Fp
		extrn _ures_open_56:near ; CODE	XREF: _ucnv_getDisplayName_56+6Cp
		extrn __RTC_CheckEsp:near ; CODE XREF: _ucnv_getDisplayName_56+167p
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _ucnv_getDisplayName_56+155p
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo


		end
