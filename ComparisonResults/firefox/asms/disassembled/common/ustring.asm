;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	722DA1FEDA6BE275C66AAFC8565B4691
; Input	CRC32 :	2AE23A76

; File Name   :	D:\compspace\objfiles\firefox\common\ustring.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
_UNESCAPE_MAP	dw 61h			; DATA XREF: _u_unescapeAt_56+327r
					; _u_unescapeAt_56+34Cr
word_2		dw 7			; DATA XREF: _u_unescapeAt_56+336r
aBEF:
		unicode	0, <b>
		dw 8
		unicode	0, <e>
		dw 1Bh
		unicode	0, <f>
		dw 0Ch
aNRTV:
		unicode	0, <n>
		dw 0Ah
		unicode	0, <r>
		dw 0Dh
		unicode	0, <t>
		dw 9
		unicode	0, <v>
		dw 0Bh
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 20h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int)
		public ??2@YAPAXI@Z
??2@YAPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??2@YAPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 58h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 5Ch
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 60h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX@Z
??3@YAXPAX@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??3@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 94h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_strFindFirst_56(int, int, wchar_t *Str,	int)
		public _u_strFindFirst_56
_u_strFindFirst_56 proc	near		; CODE XREF: _u_strstr_56+2Ap
					; _u_strchr_56+3Ap ...

var_130		= dword	ptr -130h
var_68		= dword	ptr -68h
var_5C		= dword	ptr -5Ch
var_50		= word ptr -50h
var_44		= word ptr -44h
var_38		= word ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Str		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 130h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_130]
		mov	ecx, 4Ch ; 'L'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+Str], 0
		jz	short loc_BE
		cmp	[ebp+arg_C], 0FFFFFFFFh
		jge	short loc_C6

loc_BE:					; CODE XREF: _u_strFindFirst_56+22j
		mov	eax, [ebp+arg_0]
		jmp	loc_491
; ---------------------------------------------------------------------------

loc_C6:					; CODE XREF: _u_strFindFirst_56+28j
		cmp	[ebp+arg_0], 0
		jz	short loc_D2
		cmp	[ebp+arg_4], 0FFFFFFFFh
		jge	short loc_D9

loc_D2:					; CODE XREF: _u_strFindFirst_56+36j
		xor	eax, eax
		jmp	loc_491
; ---------------------------------------------------------------------------

loc_D9:					; CODE XREF: _u_strFindFirst_56+3Cj
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		cmp	[ebp+arg_4], 0
		jge	loc_247
		cmp	[ebp+arg_C], 0
		jge	loc_247
		mov	eax, [ebp+Str]
		mov	cx, [eax]
		mov	[ebp+var_44], cx
		movzx	edx, [ebp+var_44]
		mov	eax, [ebp+Str]
		add	eax, 2
		mov	[ebp+Str], eax
		test	edx, edx
		jnz	short loc_11A
		mov	[ebp+var_130], 1
		jmp	short loc_124
; ---------------------------------------------------------------------------

loc_11A:				; CODE XREF: _u_strFindFirst_56+78j
		mov	[ebp+var_130], 0

loc_124:				; CODE XREF: _u_strFindFirst_56+84j
		cmp	[ebp+var_130], 0
		jz	short loc_135
		mov	eax, [ebp+arg_0]
		jmp	loc_491
; ---------------------------------------------------------------------------

loc_135:				; CODE XREF: _u_strFindFirst_56+97j
		mov	eax, [ebp+Str]
		movzx	ecx, word ptr [eax]
		test	ecx, ecx
		jnz	short loc_165
		movzx	eax, [ebp+var_44]
		and	eax, 0FFFFF800h
		cmp	eax, 0D800h
		jz	short loc_165
		movzx	eax, [ebp+var_44]
		push	eax		; Str
		mov	ecx, [ebp+arg_0]
		push	ecx		; int
		call	_u_strchr_56
		add	esp, 8
		jmp	loc_491
; ---------------------------------------------------------------------------

loc_165:				; CODE XREF: _u_strFindFirst_56+A9j
					; _u_strFindFirst_56+B9j ...
		mov	eax, [ebp+arg_0]
		mov	cx, [eax]
		mov	[ebp+var_38], cx
		movzx	edx, [ebp+var_38]
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		test	edx, edx
		jz	short loc_18C
		mov	[ebp+var_130], 1
		jmp	short loc_196
; ---------------------------------------------------------------------------

loc_18C:				; CODE XREF: _u_strFindFirst_56+EAj
		mov	[ebp+var_130], 0

loc_196:				; CODE XREF: _u_strFindFirst_56+F6j
		cmp	[ebp+var_130], 0
		jz	loc_240
		movzx	eax, [ebp+var_38]
		movzx	ecx, [ebp+var_44]
		cmp	eax, ecx
		jnz	loc_23B
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+Str]
		mov	[ebp+var_20], eax

loc_1BF:				; CODE XREF: _u_strFindFirst_56+1A5j
		mov	eax, [ebp+var_20]
		mov	cx, [eax]
		mov	[ebp+var_50], cx
		movzx	edx, [ebp+var_50]
		test	edx, edx
		jnz	short loc_200
		push	0
		mov	eax, [ebp+var_14]
		push	eax
		mov	ecx, [ebp+arg_0]
		sub	ecx, 2
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		call	?isMatchAtCPBoundary@@YACPB_W000@Z ; isMatchAtCPBoundary(wchar_t const *,wchar_t const *,wchar_t const *,wchar_t const *)
		add	esp, 10h
		movsx	eax, al
		test	eax, eax
		jz	short loc_1FE
		mov	eax, [ebp+arg_0]
		sub	eax, 2
		jmp	loc_491
; ---------------------------------------------------------------------------
		jmp	short loc_200
; ---------------------------------------------------------------------------

loc_1FE:				; CODE XREF: _u_strFindFirst_56+15Bj
		jmp	short loc_23B
; ---------------------------------------------------------------------------

loc_200:				; CODE XREF: _u_strFindFirst_56+13Bj
					; _u_strFindFirst_56+168j
		mov	eax, [ebp+var_14]
		mov	cx, [eax]
		mov	[ebp+var_38], cx
		movzx	edx, [ebp+var_38]
		test	edx, edx
		jnz	short loc_219
		xor	eax, eax
		jmp	loc_491
; ---------------------------------------------------------------------------

loc_219:				; CODE XREF: _u_strFindFirst_56+17Cj
		movzx	eax, [ebp+var_38]
		movzx	ecx, [ebp+var_50]
		cmp	eax, ecx
		jz	short loc_227
		jmp	short loc_23B
; ---------------------------------------------------------------------------

loc_227:				; CODE XREF: _u_strFindFirst_56+18Fj
		mov	eax, [ebp+var_14]
		add	eax, 2
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_20]
		add	eax, 2
		mov	[ebp+var_20], eax
		jmp	short loc_1BF
; ---------------------------------------------------------------------------

loc_23B:				; CODE XREF: _u_strFindFirst_56+119j
					; _u_strFindFirst_56:loc_1FEj ...
		jmp	loc_165
; ---------------------------------------------------------------------------

loc_240:				; CODE XREF: _u_strFindFirst_56+109j
		xor	eax, eax
		jmp	loc_491
; ---------------------------------------------------------------------------

loc_247:				; CODE XREF: _u_strFindFirst_56+4Fj
					; _u_strFindFirst_56+59j
		cmp	[ebp+arg_C], 0
		jge	short loc_25C
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	_u_strlen_56
		add	esp, 4
		mov	[ebp+arg_C], eax

loc_25C:				; CODE XREF: _u_strFindFirst_56+1B7j
		cmp	[ebp+arg_C], 0
		jnz	short loc_26A
		mov	eax, [ebp+arg_0]
		jmp	loc_491
; ---------------------------------------------------------------------------

loc_26A:				; CODE XREF: _u_strFindFirst_56+1CCj
		mov	eax, [ebp+Str]
		mov	cx, [eax]
		mov	[ebp+var_44], cx
		mov	edx, [ebp+Str]
		add	edx, 2
		mov	[ebp+Str], edx
		mov	eax, [ebp+arg_C]
		sub	eax, 1
		mov	[ebp+arg_C], eax
		mov	eax, [ebp+arg_C]
		mov	ecx, [ebp+Str]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_2C], edx
		cmp	[ebp+arg_C], 0
		jnz	short loc_2ED
		movzx	eax, [ebp+var_44]
		and	eax, 0FFFFF800h
		cmp	eax, 0D800h
		jz	short loc_2ED
		cmp	[ebp+arg_4], 0
		jge	short loc_2C7
		movzx	eax, [ebp+var_44]
		push	eax		; Str
		mov	ecx, [ebp+arg_0]
		push	ecx		; int
		call	_u_strchr_56
		add	esp, 8
		mov	[ebp+var_130], eax
		jmp	short loc_2E2
; ---------------------------------------------------------------------------

loc_2C7:				; CODE XREF: _u_strFindFirst_56+218j
		mov	edx, [ebp+arg_4]
		push	edx		; int
		movzx	eax, [ebp+var_44]
		push	eax		; Str
		mov	ecx, [ebp+arg_0]
		push	ecx		; int
		call	_u_memchr_56
		add	esp, 0Ch
		mov	[ebp+var_130], eax

loc_2E2:				; CODE XREF: _u_strFindFirst_56+231j
		mov	eax, [ebp+var_130]
		jmp	loc_491
; ---------------------------------------------------------------------------

loc_2ED:				; CODE XREF: _u_strFindFirst_56+202j
					; _u_strFindFirst_56+212j
		cmp	[ebp+arg_4], 0
		jge	loc_3CF

loc_2F7:				; CODE XREF: _u_strFindFirst_56:loc_3C5j
		mov	eax, [ebp+arg_0]
		mov	cx, [eax]
		mov	[ebp+var_38], cx
		movzx	edx, [ebp+var_38]
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		test	edx, edx
		jz	short loc_31E
		mov	[ebp+var_130], 1
		jmp	short loc_328
; ---------------------------------------------------------------------------

loc_31E:				; CODE XREF: _u_strFindFirst_56+27Cj
		mov	[ebp+var_130], 0

loc_328:				; CODE XREF: _u_strFindFirst_56+288j
		cmp	[ebp+var_130], 0
		jz	loc_3CA
		movzx	eax, [ebp+var_38]
		movzx	ecx, [ebp+var_44]
		cmp	eax, ecx
		jnz	loc_3C5
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+Str]
		mov	[ebp+var_20], eax

loc_351:				; CODE XREF: _u_strFindFirst_56+32Fj
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+var_2C]
		jnz	short loc_388
		push	0
		mov	eax, [ebp+var_14]
		push	eax
		mov	ecx, [ebp+arg_0]
		sub	ecx, 2
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		call	?isMatchAtCPBoundary@@YACPB_W000@Z ; isMatchAtCPBoundary(wchar_t const *,wchar_t const *,wchar_t const *,wchar_t const *)
		add	esp, 10h
		movsx	eax, al
		test	eax, eax
		jz	short loc_386
		mov	eax, [ebp+arg_0]
		sub	eax, 2
		jmp	loc_491
; ---------------------------------------------------------------------------
		jmp	short loc_388
; ---------------------------------------------------------------------------

loc_386:				; CODE XREF: _u_strFindFirst_56+2E3j
		jmp	short loc_3C5
; ---------------------------------------------------------------------------

loc_388:				; CODE XREF: _u_strFindFirst_56+2C3j
					; _u_strFindFirst_56+2F0j
		mov	eax, [ebp+var_14]
		mov	cx, [eax]
		mov	[ebp+var_38], cx
		movzx	edx, [ebp+var_38]
		test	edx, edx
		jnz	short loc_3A1
		xor	eax, eax
		jmp	loc_491
; ---------------------------------------------------------------------------

loc_3A1:				; CODE XREF: _u_strFindFirst_56+304j
		movzx	eax, [ebp+var_38]
		mov	ecx, [ebp+var_20]
		movzx	edx, word ptr [ecx]
		cmp	eax, edx
		jz	short loc_3B1
		jmp	short loc_3C5
; ---------------------------------------------------------------------------

loc_3B1:				; CODE XREF: _u_strFindFirst_56+319j
		mov	eax, [ebp+var_14]
		add	eax, 2
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_20]
		add	eax, 2
		mov	[ebp+var_20], eax
		jmp	short loc_351
; ---------------------------------------------------------------------------

loc_3C5:				; CODE XREF: _u_strFindFirst_56+2ABj
					; _u_strFindFirst_56:loc_386j ...
		jmp	loc_2F7
; ---------------------------------------------------------------------------

loc_3CA:				; CODE XREF: _u_strFindFirst_56+29Bj
		jmp	loc_48F
; ---------------------------------------------------------------------------

loc_3CF:				; CODE XREF: _u_strFindFirst_56+25Dj
		mov	eax, [ebp+arg_4]
		cmp	eax, [ebp+arg_C]
		jg	short loc_3DE
		xor	eax, eax
		jmp	loc_491
; ---------------------------------------------------------------------------

loc_3DE:				; CODE XREF: _u_strFindFirst_56+341j
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_5C], edx
		mov	eax, [ebp+arg_C]
		shl	eax, 1
		mov	ecx, [ebp+var_5C]
		sub	ecx, eax
		mov	[ebp+var_68], ecx

loc_3F7:				; CODE XREF: _u_strFindFirst_56:loc_48Aj
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+var_68]
		jz	loc_48F
		mov	eax, [ebp+arg_0]
		mov	cx, [eax]
		mov	[ebp+var_38], cx
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx
		movzx	eax, [ebp+var_38]
		movzx	ecx, [ebp+var_44]
		cmp	eax, ecx
		jnz	short loc_48A
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+Str]
		mov	[ebp+var_20], eax

loc_42E:				; CODE XREF: _u_strFindFirst_56+3F4j
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+var_2C]
		jnz	short loc_464
		mov	eax, [ebp+var_5C]
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+arg_0]
		sub	edx, 2
		push	edx
		mov	eax, [ebp+var_8]
		push	eax
		call	?isMatchAtCPBoundary@@YACPB_W000@Z ; isMatchAtCPBoundary(wchar_t const *,wchar_t const *,wchar_t const *,wchar_t const *)
		add	esp, 10h
		movsx	ecx, al
		test	ecx, ecx
		jz	short loc_462
		mov	eax, [ebp+arg_0]
		sub	eax, 2
		jmp	short loc_491
; ---------------------------------------------------------------------------
		jmp	short loc_464
; ---------------------------------------------------------------------------

loc_462:				; CODE XREF: _u_strFindFirst_56+3C2j
		jmp	short loc_48A
; ---------------------------------------------------------------------------

loc_464:				; CODE XREF: _u_strFindFirst_56+3A0j
					; _u_strFindFirst_56+3CCj
		mov	eax, [ebp+var_14]
		movzx	ecx, word ptr [eax]
		mov	edx, [ebp+var_20]
		movzx	eax, word ptr [edx]
		cmp	ecx, eax
		jz	short loc_476
		jmp	short loc_48A
; ---------------------------------------------------------------------------

loc_476:				; CODE XREF: _u_strFindFirst_56+3DEj
		mov	eax, [ebp+var_14]
		add	eax, 2
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_20]
		add	eax, 2
		mov	[ebp+var_20], eax
		jmp	short loc_42E
; ---------------------------------------------------------------------------

loc_48A:				; CODE XREF: _u_strFindFirst_56+38Cj
					; _u_strFindFirst_56:loc_462j ...
		jmp	loc_3F7
; ---------------------------------------------------------------------------

loc_48F:				; CODE XREF: _u_strFindFirst_56:loc_3CAj
					; _u_strFindFirst_56+369j
		xor	eax, eax

loc_491:				; CODE XREF: _u_strFindFirst_56+2Dj
					; _u_strFindFirst_56+40j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 130h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_strFindFirst_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4A8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl isMatchAtCPBoundary(wchar_t const	*, wchar_t const *, wchar_t const *, wchar_t const *)
?isMatchAtCPBoundary@@YACPB_W000@Z proc	near ; CODE XREF: _u_strFindFirst_56+14Ep
					; _u_strFindFirst_56+2D6p ...

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		movzx	ecx, word ptr [eax]
		and	ecx, 0FFFFFC00h
		cmp	ecx, 0DC00h
		jnz	short loc_4FB
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+arg_4]
		jz	short loc_4FB
		mov	eax, [ebp+arg_4]
		movzx	ecx, word ptr [eax-2]
		and	ecx, 0FFFFFC00h
		cmp	ecx, 0D800h
		jnz	short loc_4FB
		xor	al, al
		jmp	short loc_532
; ---------------------------------------------------------------------------

loc_4FB:				; CODE XREF: isMatchAtCPBoundary(wchar_t const *,wchar_t const *,wchar_t const *,wchar_t const *)+30j
					; isMatchAtCPBoundary(wchar_t const *,wchar_t const *,wchar_t const *,wchar_t const *)+38j ...
		mov	eax, [ebp+arg_8]
		movzx	ecx, word ptr [eax-2]
		and	ecx, 0FFFFFC00h
		cmp	ecx, 0D800h
		jnz	short loc_530
		mov	eax, [ebp+arg_4]
		cmp	eax, [ebp+arg_C]
		jz	short loc_530
		mov	eax, [ebp+arg_8]
		movzx	ecx, word ptr [eax]
		and	ecx, 0FFFFFC00h
		cmp	ecx, 0DC00h
		jnz	short loc_530
		xor	al, al
		jmp	short loc_532
; ---------------------------------------------------------------------------

loc_530:				; CODE XREF: isMatchAtCPBoundary(wchar_t const *,wchar_t const *,wchar_t const *,wchar_t const *)+66j
					; isMatchAtCPBoundary(wchar_t const *,wchar_t const *,wchar_t const *,wchar_t const *)+6Ej ...
		mov	al, 1

loc_532:				; CODE XREF: isMatchAtCPBoundary(wchar_t const *,wchar_t const *,wchar_t const *,wchar_t const *)+51j
					; isMatchAtCPBoundary(wchar_t const *,wchar_t const *,wchar_t const *,wchar_t const *)+86j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?isMatchAtCPBoundary@@YACPB_W000@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 53Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_strstr_56(int, wchar_t *Str)
		public _u_strstr_56
_u_strstr_56	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		push	0FFFFFFFFh	; int
		mov	eax, [ebp+Str]
		push	eax		; Str
		push	0FFFFFFFFh	; int
		mov	ecx, [ebp+arg_0]
		push	ecx		; int
		call	_u_strFindFirst_56
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_strstr_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 584h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_strchr_56(int, wchar_t Str)
		public _u_strchr_56
_u_strchr_56	proc near		; CODE XREF: _u_strFindFirst_56+C4p
					; _u_strFindFirst_56+223p ...

var_CC		= byte ptr -0CCh
var_8		= word ptr -8
arg_0		= dword	ptr  8
Str		= word ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		movzx	eax, [ebp+Str]
		and	eax, 0FFFFF800h
		cmp	eax, 0D800h
		jnz	short loc_5CA
		push	1		; int
		lea	eax, [ebp+Str]
		push	eax		; Str
		push	0FFFFFFFFh	; int
		mov	ecx, [ebp+arg_0]
		push	ecx		; int
		call	_u_strFindFirst_56
		add	esp, 10h
		jmp	short loc_5FC
; ---------------------------------------------------------------------------
		jmp	short loc_5FC
; ---------------------------------------------------------------------------

loc_5CA:				; CODE XREF: _u_strchr_56+2Cj
					; _u_strchr_56+76j
		mov	eax, [ebp+arg_0]
		mov	cx, [eax]
		mov	[ebp+var_8], cx
		movzx	edx, [ebp+var_8]
		movzx	eax, [ebp+Str]
		cmp	edx, eax
		jnz	short loc_5E5
		mov	eax, [ebp+arg_0]
		jmp	short loc_5FC
; ---------------------------------------------------------------------------

loc_5E5:				; CODE XREF: _u_strchr_56+5Aj
		movzx	eax, [ebp+var_8]
		test	eax, eax
		jnz	short loc_5F1
		xor	eax, eax
		jmp	short loc_5FC
; ---------------------------------------------------------------------------

loc_5F1:				; CODE XREF: _u_strchr_56+67j
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		jmp	short loc_5CA
; ---------------------------------------------------------------------------

loc_5FC:				; CODE XREF: _u_strchr_56+42j
					; _u_strchr_56+44j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_strchr_56	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 610h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_strchr32_56
_u_strchr32_56	proc near

var_E8		= dword	ptr -0E8h
var_20		= word ptr -20h
var_14		= word ptr -14h
var_8		= word ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0E8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E8]
		mov	ecx, 3Ah ; ':'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_4], 0FFFFh
		ja	short loc_652
		movzx	eax, word ptr [ebp+arg_4]
		push	eax		; Str
		mov	ecx, [ebp+arg_0]
		push	ecx		; int
		call	_u_strchr_56
		add	esp, 8
		jmp	loc_6E5
; ---------------------------------------------------------------------------
		jmp	loc_6E5
; ---------------------------------------------------------------------------

loc_652:				; CODE XREF: _u_strchr32_56+25j
		cmp	[ebp+arg_4], 10FFFFh
		ja	loc_6E3
		mov	eax, [ebp+arg_4]
		sar	eax, 0Ah
		add	eax, 0D7C0h
		mov	[ebp+var_14], ax
		mov	eax, [ebp+arg_4]
		and	eax, 3FFh
		or	eax, 0DC00h
		mov	[ebp+var_20], ax

loc_67F:				; CODE XREF: _u_strchr32_56:loc_6DBj
		mov	eax, [ebp+arg_0]
		mov	cx, [eax]
		mov	[ebp+var_8], cx
		movzx	edx, [ebp+var_8]
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		test	edx, edx
		jz	short loc_6A6
		mov	[ebp+var_E8], 1
		jmp	short loc_6B0
; ---------------------------------------------------------------------------

loc_6A6:				; CODE XREF: _u_strchr32_56+88j
		mov	[ebp+var_E8], 0

loc_6B0:				; CODE XREF: _u_strchr32_56+94j
		cmp	[ebp+var_E8], 0
		jz	short loc_6DD
		movzx	eax, [ebp+var_8]
		movzx	ecx, [ebp+var_14]
		cmp	eax, ecx
		jnz	short loc_6DB
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		movzx	edx, [ebp+var_20]
		cmp	ecx, edx
		jnz	short loc_6DB
		mov	eax, [ebp+arg_0]
		sub	eax, 2
		jmp	short loc_6E5
; ---------------------------------------------------------------------------

loc_6DB:				; CODE XREF: _u_strchr32_56+B3j
					; _u_strchr32_56+C1j
		jmp	short loc_67F
; ---------------------------------------------------------------------------

loc_6DD:				; CODE XREF: _u_strchr32_56+A7j
		xor	eax, eax
		jmp	short loc_6E5
; ---------------------------------------------------------------------------
		jmp	short loc_6E5
; ---------------------------------------------------------------------------

loc_6E3:				; CODE XREF: _u_strchr32_56+49j
		xor	eax, eax

loc_6E5:				; CODE XREF: _u_strchr32_56+38j
					; _u_strchr32_56+3Dj ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_strchr32_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 6FCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_memchr_56(int, wchar_t Str, int)
		public _u_memchr_56
_u_memchr_56	proc near		; CODE XREF: _u_strFindFirst_56+240p
					; _u_memchr32_56+34p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
Str		= word ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_8], 0
		jg	short loc_726
		xor	eax, eax
		jmp	short loc_782
; ---------------------------------------------------------------------------
		jmp	short loc_782
; ---------------------------------------------------------------------------

loc_726:				; CODE XREF: _u_memchr_56+22j
		movzx	eax, [ebp+Str]
		and	eax, 0FFFFF800h
		cmp	eax, 0D800h
		jnz	short loc_750
		push	1		; int
		lea	eax, [ebp+Str]
		push	eax		; Str
		mov	ecx, [ebp+arg_8]
		push	ecx		; int
		mov	edx, [ebp+arg_0]
		push	edx		; int
		call	_u_strFindFirst_56
		add	esp, 10h
		jmp	short loc_782
; ---------------------------------------------------------------------------
		jmp	short loc_782
; ---------------------------------------------------------------------------

loc_750:				; CODE XREF: _u_memchr_56+38j
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_8], edx

loc_75C:				; CODE XREF: _u_memchr_56+82j
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		movzx	edx, [ebp+Str]
		cmp	ecx, edx
		jnz	short loc_76F
		mov	eax, [ebp+arg_0]
		jmp	short loc_782
; ---------------------------------------------------------------------------

loc_76F:				; CODE XREF: _u_memchr_56+6Cj
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		mov	ecx, [ebp+arg_0]
		cmp	ecx, [ebp+var_8]
		jnz	short loc_75C
		xor	eax, eax

loc_782:				; CODE XREF: _u_memchr_56+26j
					; _u_memchr_56+28j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_memchr_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 798h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_memchr32_56
_u_memchr32_56	proc near

var_E4		= byte ptr -0E4h
var_20		= word ptr -20h
var_14		= word ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_4], 0FFFFh
		ja	short loc_7D8
		mov	eax, [ebp+arg_8]
		push	eax		; int
		movzx	ecx, word ptr [ebp+arg_4]
		push	ecx		; Str
		mov	edx, [ebp+arg_0]
		push	edx		; int
		call	_u_memchr_56
		add	esp, 0Ch
		jmp	short loc_855
; ---------------------------------------------------------------------------
		jmp	short loc_855
; ---------------------------------------------------------------------------

loc_7D8:				; CODE XREF: _u_memchr32_56+25j
		cmp	[ebp+arg_8], 2
		jge	short loc_7E4
		xor	eax, eax
		jmp	short loc_855
; ---------------------------------------------------------------------------
		jmp	short loc_855
; ---------------------------------------------------------------------------

loc_7E4:				; CODE XREF: _u_memchr32_56+44j
		cmp	[ebp+arg_4], 10FFFFh
		ja	short loc_853
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax*2-2]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_4]
		sar	eax, 0Ah
		add	eax, 0D7C0h
		mov	[ebp+var_14], ax
		mov	eax, [ebp+arg_4]
		and	eax, 3FFh
		or	eax, 0DC00h
		mov	[ebp+var_20], ax

loc_81A:				; CODE XREF: _u_memchr32_56+B3j
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		movzx	edx, [ebp+var_14]
		cmp	ecx, edx
		jnz	short loc_83C
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax+2]
		movzx	edx, [ebp+var_20]
		cmp	ecx, edx
		jnz	short loc_83C
		mov	eax, [ebp+arg_0]
		jmp	short loc_855
; ---------------------------------------------------------------------------

loc_83C:				; CODE XREF: _u_memchr32_56+8Ej
					; _u_memchr32_56+9Dj
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		mov	ecx, [ebp+arg_0]
		cmp	ecx, [ebp+var_8]
		jnz	short loc_81A
		xor	eax, eax
		jmp	short loc_855
; ---------------------------------------------------------------------------
		jmp	short loc_855
; ---------------------------------------------------------------------------

loc_853:				; CODE XREF: _u_memchr32_56+53j
		xor	eax, eax

loc_855:				; CODE XREF: _u_memchr32_56+3Cj
					; _u_memchr32_56+3Ej ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_memchr32_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 86Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_strFindLast_56(wchar_t *, int, wchar_t *Str, int)
		public _u_strFindLast_56
_u_strFindLast_56 proc near		; CODE XREF: _u_strrstr_56+2Ap
					; _u_strrchr_56+3Ap ...

var_118		= dword	ptr -118h
var_50		= word ptr -50h
var_44		= word ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Str		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 118h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_118]
		mov	ecx, 46h ; 'F'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+Str], 0
		jz	short loc_896
		cmp	[ebp+arg_C], 0FFFFFFFFh
		jge	short loc_89E

loc_896:				; CODE XREF: _u_strFindLast_56+22j
		mov	eax, [ebp+arg_0]
		jmp	loc_A32
; ---------------------------------------------------------------------------

loc_89E:				; CODE XREF: _u_strFindLast_56+28j
		cmp	[ebp+arg_0], 0
		jz	short loc_8AA
		cmp	[ebp+arg_4], 0FFFFFFFFh
		jge	short loc_8B1

loc_8AA:				; CODE XREF: _u_strFindLast_56+36j
		xor	eax, eax
		jmp	loc_A32
; ---------------------------------------------------------------------------

loc_8B1:				; CODE XREF: _u_strFindLast_56+3Cj
		cmp	[ebp+arg_C], 0
		jge	short loc_8C6
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	_u_strlen_56
		add	esp, 4
		mov	[ebp+arg_C], eax

loc_8C6:				; CODE XREF: _u_strFindLast_56+49j
		cmp	[ebp+arg_C], 0
		jnz	short loc_8D4
		mov	eax, [ebp+arg_0]
		jmp	loc_A32
; ---------------------------------------------------------------------------

loc_8D4:				; CODE XREF: _u_strFindLast_56+5Ej
		mov	eax, [ebp+arg_C]
		mov	ecx, [ebp+Str]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_38], edx
		mov	eax, [ebp+var_38]
		sub	eax, 2
		mov	[ebp+var_38], eax
		mov	ecx, [ebp+var_38]
		mov	dx, [ecx]
		mov	[ebp+var_50], dx
		mov	eax, [ebp+arg_C]
		sub	eax, 1
		mov	[ebp+arg_C], eax
		jnz	short loc_953
		movzx	eax, [ebp+var_50]
		and	eax, 0FFFFF800h
		cmp	eax, 0D800h
		jz	short loc_953
		cmp	[ebp+arg_4], 0
		jge	short loc_92D
		movzx	eax, [ebp+var_50]
		push	eax		; Str
		mov	ecx, [ebp+arg_0]
		push	ecx		; wchar_t *
		call	_u_strrchr_56
		add	esp, 8
		mov	[ebp+var_118], eax
		jmp	short loc_948
; ---------------------------------------------------------------------------

loc_92D:				; CODE XREF: _u_strFindLast_56+A6j
		mov	edx, [ebp+arg_4]
		push	edx		; int
		movzx	eax, [ebp+var_50]
		push	eax		; Str
		mov	ecx, [ebp+arg_0]
		push	ecx		; wchar_t *
		call	_u_memrchr_56
		add	esp, 0Ch
		mov	[ebp+var_118], eax

loc_948:				; CODE XREF: _u_strFindLast_56+BFj
		mov	eax, [ebp+var_118]
		jmp	loc_A32
; ---------------------------------------------------------------------------

loc_953:				; CODE XREF: _u_strFindLast_56+90j
					; _u_strFindLast_56+A0j
		cmp	[ebp+arg_4], 0
		jge	short loc_968
		mov	eax, [ebp+arg_0]
		push	eax		; Str
		call	_u_strlen_56
		add	esp, 4
		mov	[ebp+arg_4], eax

loc_968:				; CODE XREF: _u_strFindLast_56+EBj
		mov	eax, [ebp+arg_4]
		cmp	eax, [ebp+arg_C]
		jg	short loc_977
		xor	eax, eax
		jmp	loc_A32
; ---------------------------------------------------------------------------

loc_977:				; CODE XREF: _u_strFindLast_56+102j
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_14], edx
		mov	eax, [ebp+arg_C]
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax*2]
		mov	[ebp+arg_0], edx

loc_995:				; CODE XREF: _u_strFindLast_56:loc_A2Bj
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+var_14]
		jz	loc_A30
		mov	eax, [ebp+var_14]
		sub	eax, 2
		mov	[ebp+var_14], eax
		mov	ecx, [ebp+var_14]
		mov	dx, [ecx]
		mov	[ebp+var_44], dx
		movzx	eax, [ebp+var_44]
		movzx	ecx, [ebp+var_50]
		cmp	eax, ecx
		jnz	short loc_A2B
		mov	eax, [ebp+var_14]
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_38]
		mov	[ebp+var_2C], eax

loc_9CC:				; CODE XREF: _u_strFindLast_56:loc_A29j
		mov	eax, [ebp+var_2C]
		cmp	eax, [ebp+Str]
		jnz	short loc_A05
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		lea	edx, [ecx+eax*2]
		push	edx
		mov	eax, [ebp+var_14]
		add	eax, 2
		push	eax
		mov	ecx, [ebp+var_20]
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		call	?isMatchAtCPBoundary@@YACPB_W000@Z ; isMatchAtCPBoundary(wchar_t const *,wchar_t const *,wchar_t const *,wchar_t const *)
		add	esp, 10h
		movsx	eax, al
		test	eax, eax
		jz	short loc_A03
		mov	eax, [ebp+var_20]
		jmp	short loc_A32
; ---------------------------------------------------------------------------
		jmp	short loc_A05
; ---------------------------------------------------------------------------

loc_A03:				; CODE XREF: _u_strFindLast_56+18Ej
		jmp	short loc_A2B
; ---------------------------------------------------------------------------

loc_A05:				; CODE XREF: _u_strFindLast_56+166j
					; _u_strFindLast_56+195j
		mov	eax, [ebp+var_20]
		sub	eax, 2
		mov	[ebp+var_20], eax
		mov	ecx, [ebp+var_2C]
		sub	ecx, 2
		mov	[ebp+var_2C], ecx
		mov	edx, [ebp+var_2C]
		movzx	eax, word ptr [edx]
		mov	ecx, [ebp+var_20]
		movzx	edx, word ptr [ecx]
		cmp	edx, eax
		jz	short loc_A29
		jmp	short loc_A2B
; ---------------------------------------------------------------------------

loc_A29:				; CODE XREF: _u_strFindLast_56+1B9j
		jmp	short loc_9CC
; ---------------------------------------------------------------------------

loc_A2B:				; CODE XREF: _u_strFindLast_56+152j
					; _u_strFindLast_56:loc_A03j ...
		jmp	loc_995
; ---------------------------------------------------------------------------

loc_A30:				; CODE XREF: _u_strFindLast_56+12Fj
		xor	eax, eax

loc_A32:				; CODE XREF: _u_strFindLast_56+2Dj
					; _u_strFindLast_56+40j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 118h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_strFindLast_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A48h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_strrstr_56(wchar_t *, wchar_t *Str)
		public _u_strrstr_56
_u_strrstr_56	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		push	0FFFFFFFFh	; int
		mov	eax, [ebp+Str]
		push	eax		; Str
		push	0FFFFFFFFh	; int
		mov	ecx, [ebp+arg_0]
		push	ecx		; wchar_t *
		call	_u_strFindLast_56
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_strrstr_56	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A90h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_strrchr_56(wchar_t *, wchar_t Str)
		public _u_strrchr_56
_u_strrchr_56	proc near		; CODE XREF: _u_strFindLast_56+B1p
					; _u_strrchr32_56+30p

var_D8		= byte ptr -0D8h
var_14		= word ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
Str		= word ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		movzx	eax, [ebp+Str]
		and	eax, 0FFFFF800h
		cmp	eax, 0D800h
		jnz	short loc_AD6
		push	1		; int
		lea	eax, [ebp+Str]
		push	eax		; Str
		push	0FFFFFFFFh	; int
		mov	ecx, [ebp+arg_0]
		push	ecx		; wchar_t *
		call	_u_strFindLast_56
		add	esp, 10h
		jmp	short loc_B11
; ---------------------------------------------------------------------------
		jmp	short loc_B11
; ---------------------------------------------------------------------------

loc_AD6:				; CODE XREF: _u_strrchr_56+2Cj
		mov	[ebp+var_8], 0

loc_ADD:				; CODE XREF: _u_strrchr_56+7Fj
		mov	eax, [ebp+arg_0]
		mov	cx, [eax]
		mov	[ebp+var_14], cx
		movzx	edx, [ebp+var_14]
		movzx	eax, [ebp+Str]
		cmp	edx, eax
		jnz	short loc_AF9
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax

loc_AF9:				; CODE XREF: _u_strrchr_56+61j
		movzx	eax, [ebp+var_14]
		test	eax, eax
		jnz	short loc_B06
		mov	eax, [ebp+var_8]
		jmp	short loc_B11
; ---------------------------------------------------------------------------

loc_B06:				; CODE XREF: _u_strrchr_56+6Fj
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		jmp	short loc_ADD
; ---------------------------------------------------------------------------

loc_B11:				; CODE XREF: _u_strrchr_56+42j
					; _u_strrchr_56+44j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_strrchr_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0B28h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_strrchr32_56(wchar_t *,	int)
		public _u_strrchr32_56
_u_strrchr32_56	proc near

var_F4		= dword	ptr -0F4h
var_2C		= word ptr -2Ch
var_20		= word ptr -20h
var_14		= word ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0F4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_F4]
		mov	ecx, 3Dh ; '='
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_4], 0FFFFh
		ja	short loc_B6A
		movzx	eax, word ptr [ebp+arg_4]
		push	eax		; Str
		mov	ecx, [ebp+arg_0]
		push	ecx		; wchar_t *
		call	_u_strrchr_56
		add	esp, 8
		jmp	loc_C06
; ---------------------------------------------------------------------------
		jmp	loc_C06
; ---------------------------------------------------------------------------

loc_B6A:				; CODE XREF: _u_strrchr32_56+25j
		cmp	[ebp+arg_4], 10FFFFh
		ja	loc_C04
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_4]
		sar	eax, 0Ah
		add	eax, 0D7C0h
		mov	[ebp+var_20], ax
		mov	eax, [ebp+arg_4]
		and	eax, 3FFh
		or	eax, 0DC00h
		mov	[ebp+var_2C], ax

loc_B9E:				; CODE XREF: _u_strrchr32_56:loc_BFBj
		mov	eax, [ebp+arg_0]
		mov	cx, [eax]
		mov	[ebp+var_14], cx
		movzx	edx, [ebp+var_14]
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		test	edx, edx
		jz	short loc_BC5
		mov	[ebp+var_F4], 1
		jmp	short loc_BCF
; ---------------------------------------------------------------------------

loc_BC5:				; CODE XREF: _u_strrchr32_56+8Fj
		mov	[ebp+var_F4], 0

loc_BCF:				; CODE XREF: _u_strrchr32_56+9Bj
		cmp	[ebp+var_F4], 0
		jz	short loc_BFD
		movzx	eax, [ebp+var_14]
		movzx	ecx, [ebp+var_20]
		cmp	eax, ecx
		jnz	short loc_BFB
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		movzx	edx, [ebp+var_2C]
		cmp	ecx, edx
		jnz	short loc_BFB
		mov	eax, [ebp+arg_0]
		sub	eax, 2
		mov	[ebp+var_8], eax

loc_BFB:				; CODE XREF: _u_strrchr32_56+BAj
					; _u_strrchr32_56+C8j
		jmp	short loc_B9E
; ---------------------------------------------------------------------------

loc_BFD:				; CODE XREF: _u_strrchr32_56+AEj
		mov	eax, [ebp+var_8]
		jmp	short loc_C06
; ---------------------------------------------------------------------------
		jmp	short loc_C06
; ---------------------------------------------------------------------------

loc_C04:				; CODE XREF: _u_strrchr32_56+49j
		xor	eax, eax

loc_C06:				; CODE XREF: _u_strrchr32_56+38j
					; _u_strrchr32_56+3Dj ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0F4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_strrchr32_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C1Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_memrchr_56(wchar_t *, wchar_t Str, int)
		public _u_memrchr_56
_u_memrchr_56	proc near		; CODE XREF: _u_strFindLast_56+CEp
					; _u_memrchr32_56+34p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
Str		= word ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_8], 0
		jg	short loc_C46
		xor	eax, eax
		jmp	short loc_CA2
; ---------------------------------------------------------------------------
		jmp	short loc_CA2
; ---------------------------------------------------------------------------

loc_C46:				; CODE XREF: _u_memrchr_56+22j
		movzx	eax, [ebp+Str]
		and	eax, 0FFFFF800h
		cmp	eax, 0D800h
		jnz	short loc_C70
		push	1		; int
		lea	eax, [ebp+Str]
		push	eax		; Str
		mov	ecx, [ebp+arg_8]
		push	ecx		; int
		mov	edx, [ebp+arg_0]
		push	edx		; wchar_t *
		call	_u_strFindLast_56
		add	esp, 10h
		jmp	short loc_CA2
; ---------------------------------------------------------------------------
		jmp	short loc_CA2
; ---------------------------------------------------------------------------

loc_C70:				; CODE XREF: _u_memrchr_56+38j
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_8], edx

loc_C7C:				; CODE XREF: _u_memrchr_56+82j
		mov	eax, [ebp+var_8]
		sub	eax, 2
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+var_8]
		movzx	edx, word ptr [ecx]
		movzx	eax, [ebp+Str]
		cmp	edx, eax
		jnz	short loc_C98
		mov	eax, [ebp+var_8]
		jmp	short loc_CA2
; ---------------------------------------------------------------------------

loc_C98:				; CODE XREF: _u_memrchr_56+75j
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+var_8]
		jnz	short loc_C7C
		xor	eax, eax

loc_CA2:				; CODE XREF: _u_memrchr_56+26j
					; _u_memrchr_56+28j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_memrchr_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0CB8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_memrchr32_56(wchar_t *,	int, int)
		public _u_memrchr32_56
_u_memrchr32_56	proc near

var_E4		= byte ptr -0E4h
var_20		= word ptr -20h
var_14		= word ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_4], 0FFFFh
		ja	short loc_CFE
		mov	eax, [ebp+arg_8]
		push	eax		; int
		movzx	ecx, word ptr [ebp+arg_4]
		push	ecx		; Str
		mov	edx, [ebp+arg_0]
		push	edx		; wchar_t *
		call	_u_memrchr_56
		add	esp, 0Ch
		jmp	loc_D7E
; ---------------------------------------------------------------------------
		jmp	loc_D7E
; ---------------------------------------------------------------------------

loc_CFE:				; CODE XREF: _u_memrchr32_56+25j
		cmp	[ebp+arg_8], 2
		jge	short loc_D0A
		xor	eax, eax
		jmp	short loc_D7E
; ---------------------------------------------------------------------------
		jmp	short loc_D7E
; ---------------------------------------------------------------------------

loc_D0A:				; CODE XREF: _u_memrchr32_56+4Aj
		cmp	[ebp+arg_4], 10FFFFh
		ja	short loc_D7C
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax*2-2]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_4]
		sar	eax, 0Ah
		add	eax, 0D7C0h
		mov	[ebp+var_14], ax
		mov	eax, [ebp+arg_4]
		and	eax, 3FFh
		or	eax, 0DC00h
		mov	[ebp+var_20], ax

loc_D40:				; CODE XREF: _u_memrchr32_56+BCj
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		movzx	edx, [ebp+var_20]
		cmp	ecx, edx
		jnz	short loc_D65
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax-2]
		movzx	edx, [ebp+var_14]
		cmp	ecx, edx
		jnz	short loc_D65
		mov	eax, [ebp+var_8]
		sub	eax, 2
		jmp	short loc_D7E
; ---------------------------------------------------------------------------

loc_D65:				; CODE XREF: _u_memrchr32_56+94j
					; _u_memrchr32_56+A3j
		mov	eax, [ebp+var_8]
		sub	eax, 2
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_0]
		cmp	ecx, [ebp+var_8]
		jnz	short loc_D40
		xor	eax, eax
		jmp	short loc_D7E
; ---------------------------------------------------------------------------
		jmp	short loc_D7E
; ---------------------------------------------------------------------------

loc_D7C:				; CODE XREF: _u_memrchr32_56+59j
		xor	eax, eax

loc_D7E:				; CODE XREF: _u_memrchr32_56+3Cj
					; _u_memrchr32_56+41j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_memrchr32_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0D94h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_strpbrk_56
_u_strpbrk_56	proc near		; CODE XREF: _u_strtok_r_56+7Ep

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		push	1
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	?_matchFromSet@@YAHPB_W0C@Z ; _matchFromSet(wchar_t const *,wchar_t const *,signed char)
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jl	short loc_DDA
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		lea	eax, [ecx+eax*2]
		jmp	short loc_DDC
; ---------------------------------------------------------------------------
		jmp	short loc_DDC
; ---------------------------------------------------------------------------

loc_DDA:				; CODE XREF: _u_strpbrk_56+37j
		xor	eax, eax

loc_DDC:				; CODE XREF: _u_strpbrk_56+42j
					; _u_strpbrk_56+44j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_strpbrk_56	endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0DF0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl _matchFromSet(wchar_t const *, wchar_t const *, signed char)
?_matchFromSet@@YAHPB_W0C@Z proc near	; CODE XREF: _u_strpbrk_56+28p
					; _u_strcspn_56+28p ...

var_138		= byte ptr -138h
var_74		= word ptr -74h
var_68		= word ptr -68h
var_5C		= word ptr -5Ch
var_50		= word ptr -50h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 138h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_138]
		mov	ecx, 4Eh ; 'N'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_14], 0

loc_E15:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+54j
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_4]
		mov	dx, [ecx+eax*2]
		mov	[ebp+var_50], dx
		movzx	eax, [ebp+var_50]
		test	eax, eax
		jz	short loc_E46
		movzx	eax, [ebp+var_50]
		and	eax, 0FFFFF800h
		cmp	eax, 0D800h
		jz	short loc_E46
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		jmp	short loc_E15
; ---------------------------------------------------------------------------

loc_E46:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+39j
					; _matchFromSet(wchar_t	const *,wchar_t	const *,signed char)+49j
		mov	eax, [ebp+var_14]
		mov	[ebp+var_8], eax

loc_E4C:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+73j
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_4]
		movzx	edx, word ptr [ecx+eax*2]
		test	edx, edx
		jz	short loc_E65
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		jmp	short loc_E4C
; ---------------------------------------------------------------------------

loc_E65:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+68j
		mov	[ebp+var_20], 0

loc_E6C:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char):$endloop$12370j
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+arg_0]
		mov	dx, [ecx+eax*2]
		mov	[ebp+var_50], dx
		movzx	eax, [ebp+var_50]
		test	eax, eax
		jz	loc_10CE
		mov	eax, [ebp+var_20]
		add	eax, 1
		mov	[ebp+var_20], eax
		movzx	eax, [ebp+var_50]
		and	eax, 0FFFFF800h
		cmp	eax, 0D800h
		jz	loc_F2E
		movsx	eax, [ebp+arg_8]
		test	eax, eax
		jz	short loc_EE6
		mov	[ebp+var_2C], 0
		jmp	short loc_EBD
; ---------------------------------------------------------------------------

loc_EB4:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char):loc_EE2j
		mov	eax, [ebp+var_2C]
		add	eax, 1
		mov	[ebp+var_2C], eax

loc_EBD:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+C2j
		mov	eax, [ebp+var_2C]
		cmp	eax, [ebp+var_8]
		jge	short loc_EE4
		movzx	eax, [ebp+var_50]
		mov	ecx, [ebp+var_2C]
		mov	edx, [ebp+arg_4]
		movzx	ecx, word ptr [edx+ecx*2]
		cmp	eax, ecx
		jnz	short loc_EE2
		mov	eax, [ebp+var_20]
		sub	eax, 1
		jmp	loc_10D6
; ---------------------------------------------------------------------------

loc_EE2:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+E5j
		jmp	short loc_EB4
; ---------------------------------------------------------------------------

loc_EE4:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+D3j
		jmp	short loc_F29
; ---------------------------------------------------------------------------

loc_EE6:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+B9j
		mov	[ebp+var_2C], 0
		jmp	short loc_EF8
; ---------------------------------------------------------------------------

loc_EEF:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char):loc_F1Cj
		mov	eax, [ebp+var_2C]
		add	eax, 1
		mov	[ebp+var_2C], eax

loc_EF8:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+FDj
		mov	eax, [ebp+var_2C]
		cmp	eax, [ebp+var_8]
		jge	short loc_F1E
		movzx	eax, [ebp+var_50]
		mov	ecx, [ebp+var_2C]
		mov	edx, [ebp+arg_4]
		movzx	ecx, word ptr [edx+ecx*2]
		cmp	eax, ecx
		jnz	short loc_F1C
		jmp	$endloop$12370
; ---------------------------------------------------------------------------
		jmp	$endloop$12370
; ---------------------------------------------------------------------------

loc_F1C:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+120j
		jmp	short loc_EEF
; ---------------------------------------------------------------------------

loc_F1E:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+10Ej
		mov	eax, [ebp+var_20]
		sub	eax, 1
		jmp	loc_10D6
; ---------------------------------------------------------------------------

loc_F29:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char):loc_EE4j
		jmp	$endloop$12370
; ---------------------------------------------------------------------------

loc_F2E:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+ADj
		movzx	eax, [ebp+var_50]
		and	eax, 400h
		jnz	short loc_F77
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+arg_0]
		mov	dx, [ecx+eax*2]
		mov	[ebp+var_5C], dx
		movzx	eax, [ebp+var_5C]
		and	eax, 0FFFFFC00h
		cmp	eax, 0DC00h
		jnz	short loc_F77
		mov	eax, [ebp+var_20]
		add	eax, 1
		mov	[ebp+var_20], eax
		movzx	eax, [ebp+var_50]
		shl	eax, 0Ah
		movzx	ecx, [ebp+var_5C]
		lea	edx, [eax+ecx-35FDC00h]
		mov	[ebp+var_38], edx
		jmp	short loc_F7E
; ---------------------------------------------------------------------------

loc_F77:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+147j
					; _matchFromSet(wchar_t	const *,wchar_t	const *,signed char)+165j
		movzx	eax, [ebp+var_50]
		mov	[ebp+var_38], eax

loc_F7E:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+185j
		movsx	eax, [ebp+arg_8]
		test	eax, eax
		jz	loc_102F
		mov	eax, [ebp+var_14]
		mov	[ebp+var_2C], eax

loc_F90:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char):loc_1025j
		mov	eax, [ebp+var_2C]
		cmp	eax, [ebp+var_8]
		jge	loc_102A
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+arg_4]
		movzx	edx, word ptr [ecx+eax*2]
		mov	[ebp+var_44], edx
		mov	eax, [ebp+var_2C]
		add	eax, 1
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+var_44]
		and	eax, 0FFFFFC00h
		cmp	eax, 0D800h
		jnz	short loc_1004
		mov	eax, [ebp+var_2C]
		cmp	eax, [ebp+var_8]
		jz	short loc_1004
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+arg_4]
		mov	dx, [ecx+eax*2]
		mov	[ebp+var_68], dx
		movzx	eax, [ebp+var_68]
		and	eax, 0FFFFFC00h
		cmp	eax, 0DC00h
		jnz	short loc_1004
		mov	eax, [ebp+var_2C]
		add	eax, 1
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+var_44]
		shl	eax, 0Ah
		movzx	ecx, [ebp+var_68]
		lea	edx, [eax+ecx-35FDC00h]
		mov	[ebp+var_44], edx

loc_1004:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+1CFj
					; _matchFromSet(wchar_t	const *,wchar_t	const *,signed char)+1D7j ...
		mov	eax, [ebp+var_38]
		cmp	eax, [ebp+var_44]
		jnz	short loc_1025
		mov	eax, 0FFFFh
		cmp	eax, [ebp+var_38]
		sbb	ecx, ecx
		neg	ecx
		add	ecx, 1
		mov	eax, [ebp+var_20]
		sub	eax, ecx
		jmp	loc_10D6
; ---------------------------------------------------------------------------

loc_1025:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+21Aj
		jmp	loc_F90
; ---------------------------------------------------------------------------

loc_102A:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+1A6j
		jmp	$endloop$12370
; ---------------------------------------------------------------------------

loc_102F:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+194j
		mov	eax, [ebp+var_14]
		mov	[ebp+var_2C], eax

loc_1035:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char):loc_10B1j
		mov	eax, [ebp+var_2C]
		cmp	eax, [ebp+var_8]
		jge	short loc_10B3
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+arg_4]
		movzx	edx, word ptr [ecx+eax*2]
		mov	[ebp+var_44], edx
		mov	eax, [ebp+var_2C]
		add	eax, 1
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+var_44]
		and	eax, 0FFFFFC00h
		cmp	eax, 0D800h
		jnz	short loc_10A5
		mov	eax, [ebp+var_2C]
		cmp	eax, [ebp+var_8]
		jz	short loc_10A5
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+arg_4]
		mov	dx, [ecx+eax*2]
		mov	[ebp+var_74], dx
		movzx	eax, [ebp+var_74]
		and	eax, 0FFFFFC00h
		cmp	eax, 0DC00h
		jnz	short loc_10A5
		mov	eax, [ebp+var_2C]
		add	eax, 1
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+var_44]
		shl	eax, 0Ah
		movzx	ecx, [ebp+var_74]
		lea	edx, [eax+ecx-35FDC00h]
		mov	[ebp+var_44], edx

loc_10A5:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+270j
					; _matchFromSet(wchar_t	const *,wchar_t	const *,signed char)+278j ...
		mov	eax, [ebp+var_38]
		cmp	eax, [ebp+var_44]
		jnz	short loc_10B1
		jmp	short $endloop$12370
; ---------------------------------------------------------------------------
		jmp	short $endloop$12370
; ---------------------------------------------------------------------------

loc_10B1:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+2BBj
		jmp	short loc_1035
; ---------------------------------------------------------------------------

loc_10B3:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+24Bj
		mov	eax, 0FFFFh
		cmp	eax, [ebp+var_38]
		sbb	ecx, ecx
		neg	ecx
		add	ecx, 1
		mov	eax, [ebp+var_20]
		sub	eax, ecx
		jmp	short loc_10D6
; ---------------------------------------------------------------------------

$endloop$12370:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+122j
					; _matchFromSet(wchar_t	const *,wchar_t	const *,signed char)+127j ...
		jmp	loc_E6C
; ---------------------------------------------------------------------------

loc_10CE:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+90j
		mov	eax, [ebp+var_20]
		neg	eax
		sub	eax, 1

loc_10D6:				; CODE XREF: _matchFromSet(wchar_t const *,wchar_t const *,signed char)+EDj
					; _matchFromSet(wchar_t	const *,wchar_t	const *,signed char)+134j ...
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?_matchFromSet@@YAHPB_W0C@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10E0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_strcspn_56
_u_strcspn_56	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		push	1
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	?_matchFromSet@@YAHPB_W0C@Z ; _matchFromSet(wchar_t const *,wchar_t const *,signed char)
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jl	short loc_1120
		mov	eax, [ebp+var_8]
		jmp	short loc_1128
; ---------------------------------------------------------------------------
		jmp	short loc_1128
; ---------------------------------------------------------------------------

loc_1120:				; CODE XREF: _u_strcspn_56+37j
		mov	eax, [ebp+var_8]
		neg	eax
		sub	eax, 1

loc_1128:				; CODE XREF: _u_strcspn_56+3Cj
					; _u_strcspn_56+3Ej
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_strcspn_56	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 113Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_strspn_56
_u_strspn_56	proc near		; CODE XREF: _u_strtok_r_56+55p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		push	0
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	?_matchFromSet@@YAHPB_W0C@Z ; _matchFromSet(wchar_t const *,wchar_t const *,signed char)
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jl	short loc_117C
		mov	eax, [ebp+var_8]
		jmp	short loc_1184
; ---------------------------------------------------------------------------
		jmp	short loc_1184
; ---------------------------------------------------------------------------

loc_117C:				; CODE XREF: _u_strspn_56+37j
		mov	eax, [ebp+var_8]
		neg	eax
		sub	eax, 1

loc_1184:				; CODE XREF: _u_strspn_56+3Cj
					; _u_strspn_56+3Ej
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_strspn_56	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1198h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_strtok_r_56
_u_strtok_r_56	proc near

var_E4		= byte ptr -0E4h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jz	short loc_11CC
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax], ecx
		jmp	short loc_11E5
; ---------------------------------------------------------------------------

loc_11CC:				; CODE XREF: _u_strtok_r_56+22j
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0
		jz	short loc_11DE
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		jmp	short loc_11E5
; ---------------------------------------------------------------------------

loc_11DE:				; CODE XREF: _u_strtok_r_56+3Aj
		xor	eax, eax
		jmp	loc_126A
; ---------------------------------------------------------------------------

loc_11E5:				; CODE XREF: _u_strtok_r_56+32j
					; _u_strtok_r_56+44j
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_8]
		push	ecx
		call	_u_strspn_56
		add	esp, 8
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_8]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		test	ecx, ecx
		jz	short loc_125F
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_8]
		push	ecx
		call	_u_strpbrk_56
		add	esp, 8
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_1247
		xor	eax, eax
		mov	ecx, [ebp+var_14]
		mov	[ecx], ax
		mov	edx, [ebp+var_14]
		add	edx, 2
		mov	[ebp+var_14], edx
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+var_14]
		mov	[eax], ecx
		mov	eax, [ebp+var_8]
		jmp	short loc_126A
; ---------------------------------------------------------------------------
		jmp	short loc_125D
; ---------------------------------------------------------------------------

loc_1247:				; CODE XREF: _u_strtok_r_56+8Dj
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0
		jz	short loc_125D
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+var_8]
		jmp	short loc_126A
; ---------------------------------------------------------------------------

loc_125D:				; CODE XREF: _u_strtok_r_56+ADj
					; _u_strtok_r_56+B5j
		jmp	short loc_1268
; ---------------------------------------------------------------------------

loc_125F:				; CODE XREF: _u_strtok_r_56+74j
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 0

loc_1268:				; CODE XREF: _u_strtok_r_56:loc_125Dj
		xor	eax, eax

loc_126A:				; CODE XREF: _u_strtok_r_56+48j
					; _u_strtok_r_56+ABj ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_strtok_r_56	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1280h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_strcat_56
_u_strcat_56	proc near

var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax

loc_12A4:				; CODE XREF: _u_strcat_56+37j
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		test	ecx, ecx
		jz	short loc_12B9
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		jmp	short loc_12A4
; ---------------------------------------------------------------------------

loc_12B9:				; CODE XREF: _u_strcat_56+2Cj
					; _u_strcat_56+80j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	dx, [ecx]
		mov	[eax], dx
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx
		mov	eax, [ebp+arg_4]
		add	eax, 2
		mov	[ebp+arg_4], eax
		test	ecx, ecx
		jz	short loc_12ED
		mov	[ebp+var_D0], 1
		jmp	short loc_12F7
; ---------------------------------------------------------------------------

loc_12ED:				; CODE XREF: _u_strcat_56+5Fj
		mov	[ebp+var_D0], 0

loc_12F7:				; CODE XREF: _u_strcat_56+6Bj
		cmp	[ebp+var_D0], 0
		jz	short loc_1302
		jmp	short loc_12B9
; ---------------------------------------------------------------------------

loc_1302:				; CODE XREF: _u_strcat_56+7Ej
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_u_strcat_56	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 130Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_strncat_56
_u_strncat_56	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_8], 0
		jle	short loc_1391
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax

loc_1336:				; CODE XREF: _u_strncat_56+3Dj
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		test	ecx, ecx
		jz	short loc_134B
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		jmp	short loc_1336
; ---------------------------------------------------------------------------

loc_134B:				; CODE XREF: _u_strncat_56+32j
					; _u_strncat_56+7Cj
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	dx, [ecx]
		mov	[eax], dx
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		test	ecx, ecx
		jz	short loc_138A
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax
		jnz	short loc_137F
		xor	eax, eax
		mov	ecx, [ebp+arg_0]
		mov	[ecx], ax
		jmp	short loc_138A
; ---------------------------------------------------------------------------

loc_137F:				; CODE XREF: _u_strncat_56+67j
		mov	eax, [ebp+arg_4]
		add	eax, 2
		mov	[ebp+arg_4], eax
		jmp	short loc_134B
; ---------------------------------------------------------------------------

loc_138A:				; CODE XREF: _u_strncat_56+53j
					; _u_strncat_56+71j
		mov	eax, [ebp+var_8]
		jmp	short loc_1394
; ---------------------------------------------------------------------------
		jmp	short loc_1394
; ---------------------------------------------------------------------------

loc_1391:				; CODE XREF: _u_strncat_56+22j
		mov	eax, [ebp+arg_0]

loc_1394:				; CODE XREF: _u_strncat_56+81j
					; _u_strncat_56+83j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_u_strncat_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 139Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_strcmp_56
_u_strcmp_56	proc near

var_D8		= byte ptr -0D8h
var_14		= word ptr -14h
var_8		= word ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd

loc_13BA:				; CODE XREF: _u_strcmp_56:loc_13F6j
		mov	eax, [ebp+arg_0]
		mov	cx, [eax]
		mov	[ebp+var_8], cx
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx
		mov	eax, [ebp+arg_4]
		mov	cx, [eax]
		mov	[ebp+var_14], cx
		mov	edx, [ebp+arg_4]
		add	edx, 2
		mov	[ebp+arg_4], edx
		movzx	eax, [ebp+var_8]
		movzx	ecx, [ebp+var_14]
		cmp	eax, ecx
		jnz	short loc_13F4
		movzx	eax, [ebp+var_8]
		test	eax, eax
		jnz	short loc_13F6

loc_13F4:				; CODE XREF: _u_strcmp_56+4Ej
		jmp	short loc_13F8
; ---------------------------------------------------------------------------

loc_13F6:				; CODE XREF: _u_strcmp_56+56j
		jmp	short loc_13BA
; ---------------------------------------------------------------------------

loc_13F8:				; CODE XREF: _u_strcmp_56:loc_13F4j
		movzx	eax, [ebp+var_8]
		movzx	ecx, [ebp+var_14]
		sub	eax, ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_u_strcmp_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 140Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl uprv_strCompare_56(wchar_t *Str, int, wchar_t *, int, char, char)
		public _uprv_strCompare_56
_uprv_strCompare_56 proc near		; CODE XREF: _u_strCompare_56+51p
					; _u_strcmpCodePointOrder_56+2Ep ...

var_114		= byte ptr -114h
var_50		= dword	ptr -50h
var_44		= word ptr -44h
var_38		= word ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
Str		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= byte ptr  18h
arg_14		= byte ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 114h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_114]
		mov	ecx, 45h ; 'E'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+Str]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_14], eax
		cmp	[ebp+arg_4], 0
		jge	short loc_14A8
		cmp	[ebp+arg_C], 0
		jge	short loc_14A8
		mov	eax, [ebp+Str]
		cmp	eax, [ebp+arg_8]
		jnz	short loc_1451
		xor	eax, eax
		jmp	loc_171B
; ---------------------------------------------------------------------------

loc_1451:				; CODE XREF: _uprv_strCompare_56+3Cj
					; _uprv_strCompare_56+88j
		mov	eax, [ebp+Str]
		mov	cx, [eax]
		mov	[ebp+var_38], cx
		mov	eax, [ebp+arg_8]
		mov	cx, [eax]
		mov	[ebp+var_44], cx
		movzx	eax, [ebp+var_38]
		movzx	ecx, [ebp+var_44]
		cmp	eax, ecx
		jz	short loc_1473
		jmp	short loc_1496
; ---------------------------------------------------------------------------

loc_1473:				; CODE XREF: _uprv_strCompare_56+63j
		movzx	eax, [ebp+var_38]
		test	eax, eax
		jnz	short loc_1482
		xor	eax, eax
		jmp	loc_171B
; ---------------------------------------------------------------------------

loc_1482:				; CODE XREF: _uprv_strCompare_56+6Dj
		mov	eax, [ebp+Str]
		add	eax, 2
		mov	[ebp+Str], eax
		mov	eax, [ebp+arg_8]
		add	eax, 2
		mov	[ebp+arg_8], eax
		jmp	short loc_1451
; ---------------------------------------------------------------------------

loc_1496:				; CODE XREF: _uprv_strCompare_56+65j
		mov	[ebp+var_2C], 0
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_20], eax
		jmp	loc_1619
; ---------------------------------------------------------------------------

loc_14A8:				; CODE XREF: _uprv_strCompare_56+2Ej
					; _uprv_strCompare_56+34j
		movsx	eax, [ebp+arg_10]
		test	eax, eax
		jz	loc_1534
		mov	eax, [ebp+Str]
		cmp	eax, [ebp+arg_8]
		jnz	short loc_14C3
		xor	eax, eax
		jmp	loc_171B
; ---------------------------------------------------------------------------

loc_14C3:				; CODE XREF: _uprv_strCompare_56+AEj
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_20], edx

loc_14CF:				; CODE XREF: _uprv_strCompare_56+115j
		mov	eax, [ebp+Str]
		cmp	eax, [ebp+var_20]
		jnz	short loc_14DE
		xor	eax, eax
		jmp	loc_171B
; ---------------------------------------------------------------------------

loc_14DE:				; CODE XREF: _uprv_strCompare_56+C9j
		mov	eax, [ebp+Str]
		mov	cx, [eax]
		mov	[ebp+var_38], cx
		mov	eax, [ebp+arg_8]
		mov	cx, [eax]
		mov	[ebp+var_44], cx
		movzx	eax, [ebp+var_38]
		movzx	ecx, [ebp+var_44]
		cmp	eax, ecx
		jz	short loc_1500
		jmp	short loc_1523
; ---------------------------------------------------------------------------

loc_1500:				; CODE XREF: _uprv_strCompare_56+F0j
		movzx	eax, [ebp+var_38]
		test	eax, eax
		jnz	short loc_150F
		xor	eax, eax
		jmp	loc_171B
; ---------------------------------------------------------------------------

loc_150F:				; CODE XREF: _uprv_strCompare_56+FAj
		mov	eax, [ebp+Str]
		add	eax, 2
		mov	[ebp+Str], eax
		mov	eax, [ebp+arg_8]
		add	eax, 2
		mov	[ebp+arg_8], eax
		jmp	short loc_14CF
; ---------------------------------------------------------------------------

loc_1523:				; CODE XREF: _uprv_strCompare_56+F2j
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_14]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_2C], edx
		jmp	loc_1619
; ---------------------------------------------------------------------------

loc_1534:				; CODE XREF: _uprv_strCompare_56+A2j
		cmp	[ebp+arg_4], 0
		jge	short loc_1549
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	_u_strlen_56
		add	esp, 4
		mov	[ebp+arg_4], eax

loc_1549:				; CODE XREF: _uprv_strCompare_56+12Cj
		cmp	[ebp+arg_C], 0
		jge	short loc_155E
		mov	eax, [ebp+arg_8]
		push	eax		; Str
		call	_u_strlen_56
		add	esp, 4
		mov	[ebp+arg_C], eax

loc_155E:				; CODE XREF: _uprv_strCompare_56+141j
		mov	eax, [ebp+arg_4]
		cmp	eax, [ebp+arg_C]
		jge	short loc_157B
		mov	[ebp+var_50], 0FFFFFFFFh
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_20], edx
		jmp	short loc_15AB
; ---------------------------------------------------------------------------

loc_157B:				; CODE XREF: _uprv_strCompare_56+158j
		mov	eax, [ebp+arg_4]
		cmp	eax, [ebp+arg_C]
		jnz	short loc_1598
		mov	[ebp+var_50], 0
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_20], edx
		jmp	short loc_15AB
; ---------------------------------------------------------------------------

loc_1598:				; CODE XREF: _uprv_strCompare_56+175j
		mov	[ebp+var_50], 1
		mov	eax, [ebp+arg_C]
		mov	ecx, [ebp+var_8]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_20], edx

loc_15AB:				; CODE XREF: _uprv_strCompare_56+16Dj
					; _uprv_strCompare_56+18Aj
		mov	eax, [ebp+Str]
		cmp	eax, [ebp+arg_8]
		jnz	short loc_15BB
		mov	eax, [ebp+var_50]
		jmp	loc_171B
; ---------------------------------------------------------------------------

loc_15BB:				; CODE XREF: _uprv_strCompare_56+1A5j
					; _uprv_strCompare_56+1F3j
		mov	eax, [ebp+Str]
		cmp	eax, [ebp+var_20]
		jnz	short loc_15CB
		mov	eax, [ebp+var_50]
		jmp	loc_171B
; ---------------------------------------------------------------------------

loc_15CB:				; CODE XREF: _uprv_strCompare_56+1B5j
		mov	eax, [ebp+Str]
		mov	cx, [eax]
		mov	[ebp+var_38], cx
		mov	eax, [ebp+arg_8]
		mov	cx, [eax]
		mov	[ebp+var_44], cx
		movzx	eax, [ebp+var_38]
		movzx	ecx, [ebp+var_44]
		cmp	eax, ecx
		jz	short loc_15ED
		jmp	short loc_1601
; ---------------------------------------------------------------------------

loc_15ED:				; CODE XREF: _uprv_strCompare_56+1DDj
		mov	eax, [ebp+Str]
		add	eax, 2
		mov	[ebp+Str], eax
		mov	eax, [ebp+arg_8]
		add	eax, 2
		mov	[ebp+arg_8], eax
		jmp	short loc_15BB
; ---------------------------------------------------------------------------

loc_1601:				; CODE XREF: _uprv_strCompare_56+1DFj
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_20], edx
		mov	eax, [ebp+arg_C]
		mov	ecx, [ebp+var_14]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_2C], edx

loc_1619:				; CODE XREF: _uprv_strCompare_56+97j
					; _uprv_strCompare_56+123j
		movzx	eax, [ebp+var_38]
		cmp	eax, 0D800h
		jl	loc_1711
		movzx	eax, [ebp+var_44]
		cmp	eax, 0D800h
		jl	loc_1711
		movsx	eax, [ebp+arg_14]
		test	eax, eax
		jz	loc_1711
		movzx	eax, [ebp+var_38]
		cmp	eax, 0DBFFh
		jg	short loc_166E
		mov	eax, [ebp+Str]
		add	eax, 2
		cmp	eax, [ebp+var_20]
		jz	short loc_166E
		mov	eax, [ebp+Str]
		movzx	ecx, word ptr [eax+2]
		and	ecx, 0FFFFFC00h
		cmp	ecx, 0DC00h
		jz	short loc_169B

loc_166E:				; CODE XREF: _uprv_strCompare_56+240j
					; _uprv_strCompare_56+24Bj
		movzx	eax, [ebp+var_38]
		and	eax, 0FFFFFC00h
		cmp	eax, 0DC00h
		jnz	short loc_169D
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+Str]
		jz	short loc_169D
		mov	eax, [ebp+Str]
		movzx	ecx, word ptr [eax-2]
		and	ecx, 0FFFFFC00h
		cmp	ecx, 0D800h
		jnz	short loc_169D

loc_169B:				; CODE XREF: _uprv_strCompare_56+260j
		jmp	short loc_16AA
; ---------------------------------------------------------------------------

loc_169D:				; CODE XREF: _uprv_strCompare_56+270j
					; _uprv_strCompare_56+278j ...
		movzx	eax, [ebp+var_38]
		sub	eax, 2800h
		mov	[ebp+var_38], ax

loc_16AA:				; CODE XREF: _uprv_strCompare_56:loc_169Bj
		movzx	eax, [ebp+var_44]
		cmp	eax, 0DBFFh
		jg	short loc_16D5
		mov	eax, [ebp+arg_8]
		add	eax, 2
		cmp	eax, [ebp+var_2C]
		jz	short loc_16D5
		mov	eax, [ebp+arg_8]
		movzx	ecx, word ptr [eax+2]
		and	ecx, 0FFFFFC00h
		cmp	ecx, 0DC00h
		jz	short loc_1702

loc_16D5:				; CODE XREF: _uprv_strCompare_56+2A7j
					; _uprv_strCompare_56+2B2j
		movzx	eax, [ebp+var_44]
		and	eax, 0FFFFFC00h
		cmp	eax, 0DC00h
		jnz	short loc_1704
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+arg_8]
		jz	short loc_1704
		mov	eax, [ebp+arg_8]
		movzx	ecx, word ptr [eax-2]
		and	ecx, 0FFFFFC00h
		cmp	ecx, 0D800h
		jnz	short loc_1704

loc_1702:				; CODE XREF: _uprv_strCompare_56+2C7j
		jmp	short loc_1711
; ---------------------------------------------------------------------------

loc_1704:				; CODE XREF: _uprv_strCompare_56+2D7j
					; _uprv_strCompare_56+2DFj ...
		movzx	eax, [ebp+var_44]
		sub	eax, 2800h
		mov	[ebp+var_44], ax

loc_1711:				; CODE XREF: _uprv_strCompare_56+216j
					; _uprv_strCompare_56+225j ...
		movzx	eax, [ebp+var_38]
		movzx	ecx, [ebp+var_44]
		sub	eax, ecx

loc_171B:				; CODE XREF: _uprv_strCompare_56+40j
					; _uprv_strCompare_56+71j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 114h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uprv_strCompare_56 endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1730h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_strCompareIter_56
_u_strCompareIter_56 proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jz	short loc_175A
		cmp	[ebp+arg_4], 0
		jnz	short loc_1761

loc_175A:				; CODE XREF: _u_strCompareIter_56+22j
		xor	eax, eax
		jmp	loc_192D
; ---------------------------------------------------------------------------

loc_1761:				; CODE XREF: _u_strCompareIter_56+28j
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+arg_4]
		jnz	short loc_1770
		xor	eax, eax
		jmp	loc_192D
; ---------------------------------------------------------------------------

loc_1770:				; CODE XREF: _u_strCompareIter_56+37j
		mov	esi, esp
		push	0
		push	0
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+1Ch]
		call	edx
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	0
		push	0
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+1Ch]
		call	edx
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_17A8:				; CODE XREF: _u_strCompareIter_56:loc_17F5j
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+2Ch]
		call	edx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_8], eax
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+2Ch]
		call	edx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+var_14]
		jz	short loc_17E8
		jmp	short loc_17F7
; ---------------------------------------------------------------------------

loc_17E8:				; CODE XREF: _u_strCompareIter_56+B4j
		cmp	[ebp+var_8], 0FFFFFFFFh
		jnz	short loc_17F5
		xor	eax, eax
		jmp	loc_192D
; ---------------------------------------------------------------------------

loc_17F5:				; CODE XREF: _u_strCompareIter_56+BCj
		jmp	short loc_17A8
; ---------------------------------------------------------------------------

loc_17F7:				; CODE XREF: _u_strCompareIter_56+B6j
		cmp	[ebp+var_8], 0D800h
		jl	loc_1927
		cmp	[ebp+var_14], 0D800h
		jl	loc_1927
		movsx	eax, [ebp+arg_8]
		test	eax, eax
		jz	loc_1927
		cmp	[ebp+var_8], 0DBFFh
		jg	short loc_184A
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+28h]
		call	edx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		and	eax, 0FFFFFC00h
		cmp	eax, 0DC00h
		jz	short loc_1895

loc_184A:				; CODE XREF: _u_strCompareIter_56+F4j
		mov	eax, [ebp+var_8]
		and	eax, 0FFFFFC00h
		cmp	eax, 0DC00h
		jnz	short loc_1897
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+30h]
		call	edx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+30h]
		call	edx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		and	eax, 0FFFFFC00h
		cmp	eax, 0D800h
		jnz	short loc_1897

loc_1895:				; CODE XREF: _u_strCompareIter_56+118j
		jmp	short loc_18A2
; ---------------------------------------------------------------------------

loc_1897:				; CODE XREF: _u_strCompareIter_56+127j
					; _u_strCompareIter_56+163j
		mov	eax, [ebp+var_8]
		sub	eax, 2800h
		mov	[ebp+var_8], eax

loc_18A2:				; CODE XREF: _u_strCompareIter_56:loc_1895j
		cmp	[ebp+var_14], 0DBFFh
		jg	short loc_18CF
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+28h]
		call	edx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		and	eax, 0FFFFFC00h
		cmp	eax, 0DC00h
		jz	short loc_191A

loc_18CF:				; CODE XREF: _u_strCompareIter_56+179j
		mov	eax, [ebp+var_14]
		and	eax, 0FFFFFC00h
		cmp	eax, 0DC00h
		jnz	short loc_191C
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+30h]
		call	edx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+30h]
		call	edx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		and	eax, 0FFFFFC00h
		cmp	eax, 0D800h
		jnz	short loc_191C

loc_191A:				; CODE XREF: _u_strCompareIter_56+19Dj
		jmp	short loc_1927
; ---------------------------------------------------------------------------

loc_191C:				; CODE XREF: _u_strCompareIter_56+1ACj
					; _u_strCompareIter_56+1E8j
		mov	eax, [ebp+var_14]
		sub	eax, 2800h
		mov	[ebp+var_14], eax

loc_1927:				; CODE XREF: _u_strCompareIter_56+CEj
					; _u_strCompareIter_56+DBj ...
		mov	eax, [ebp+var_8]
		sub	eax, [ebp+var_14]

loc_192D:				; CODE XREF: _u_strCompareIter_56+2Cj
					; _u_strCompareIter_56+3Bj ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_strCompareIter_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1944h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_strCompare_56(wchar_t *Str, int, wchar_t *, int, char)
		public _u_strCompare_56
_u_strCompare_56 proc near

var_C0		= byte ptr -0C0h
Str		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+Str], 0
		jz	short loc_197A
		cmp	[ebp+arg_4], 0FFFFFFFFh
		jl	short loc_197A
		cmp	[ebp+arg_8], 0
		jz	short loc_197A
		cmp	[ebp+arg_C], 0FFFFFFFFh
		jge	short loc_197E

loc_197A:				; CODE XREF: _u_strCompare_56+22j
					; _u_strCompare_56+28j	...
		xor	eax, eax
		jmp	short loc_199D
; ---------------------------------------------------------------------------

loc_197E:				; CODE XREF: _u_strCompare_56+34j
		movzx	eax, [ebp+arg_10]
		push	eax		; char
		push	0		; char
		mov	ecx, [ebp+arg_C]
		push	ecx		; int
		mov	edx, [ebp+arg_8]
		push	edx		; wchar_t *
		mov	eax, [ebp+arg_4]
		push	eax		; int
		mov	ecx, [ebp+Str]
		push	ecx		; Str
		call	_uprv_strCompare_56
		add	esp, 18h

loc_199D:				; CODE XREF: _u_strCompare_56+38j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_strCompare_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 19B4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_strcmpCodePointOrder_56(wchar_t	*Str, wchar_t *)
		public _u_strcmpCodePointOrder_56
_u_strcmpCodePointOrder_56 proc	near

var_C0		= byte ptr -0C0h
Str		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		push	1		; char
		push	0		; char
		push	0FFFFFFFFh	; int
		mov	eax, [ebp+arg_4]
		push	eax		; wchar_t *
		push	0FFFFFFFFh	; int
		mov	ecx, [ebp+Str]
		push	ecx		; Str
		call	_uprv_strCompare_56
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_strcmpCodePointOrder_56 endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1A00h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_strncmp_56
_u_strncmp_56	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_8], 0
		jle	short loc_1A67

loc_1A24:				; CODE XREF: _u_strncmp_56+63j
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		mov	edx, [ebp+arg_4]
		movzx	eax, word ptr [edx]
		sub	ecx, eax
		mov	[ebp+var_8], ecx
		jnz	short loc_1A4C
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		test	ecx, ecx
		jz	short loc_1A4C
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax
		jnz	short loc_1A51

loc_1A4C:				; CODE XREF: _u_strncmp_56+35j
					; _u_strncmp_56+3Fj
		mov	eax, [ebp+var_8]
		jmp	short loc_1A69
; ---------------------------------------------------------------------------

loc_1A51:				; CODE XREF: _u_strncmp_56+4Aj
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		mov	eax, [ebp+arg_4]
		add	eax, 2
		mov	[ebp+arg_4], eax
		jmp	short loc_1A24
; ---------------------------------------------------------------------------
		jmp	short loc_1A69
; ---------------------------------------------------------------------------

loc_1A67:				; CODE XREF: _u_strncmp_56+22j
		xor	eax, eax

loc_1A69:				; CODE XREF: _u_strncmp_56+4Fj
					; _u_strncmp_56+65j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_u_strncmp_56	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1A70h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_strncmpCodePointOrder_56(wchar_t *Str, wchar_t *, int)
		public _u_strncmpCodePointOrder_56
_u_strncmpCodePointOrder_56 proc near

var_C0		= byte ptr -0C0h
Str		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		push	1		; char
		push	1		; char
		mov	eax, [ebp+arg_8]
		push	eax		; int
		mov	ecx, [ebp+arg_4]
		push	ecx		; wchar_t *
		mov	edx, [ebp+arg_8]
		push	edx		; int
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	_uprv_strCompare_56
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_strncmpCodePointOrder_56 endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1AC0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_strcpy_56
_u_strcpy_56	proc near

var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax

loc_1AE4:				; CODE XREF: _u_strcpy_56+6Bj
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	dx, [ecx]
		mov	[eax], dx
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx
		mov	eax, [ebp+arg_4]
		add	eax, 2
		mov	[ebp+arg_4], eax
		test	ecx, ecx
		jz	short loc_1B18
		mov	[ebp+var_D0], 1
		jmp	short loc_1B22
; ---------------------------------------------------------------------------

loc_1B18:				; CODE XREF: _u_strcpy_56+4Aj
		mov	[ebp+var_D0], 0

loc_1B22:				; CODE XREF: _u_strcpy_56+56j
		cmp	[ebp+var_D0], 0
		jz	short loc_1B2D
		jmp	short loc_1AE4
; ---------------------------------------------------------------------------

loc_1B2D:				; CODE XREF: _u_strcpy_56+69j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_u_strcpy_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1B38h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_strncpy_56
_u_strncpy_56	proc near

var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax

loc_1B5C:				; CODE XREF: _u_strncpy_56+7Aj
		cmp	[ebp+arg_8], 0
		jle	short loc_1BB4
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	dx, [ecx]
		mov	[eax], dx
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx
		mov	eax, [ebp+arg_4]
		add	eax, 2
		mov	[ebp+arg_4], eax
		test	ecx, ecx
		jz	short loc_1B96
		mov	[ebp+var_D0], 1
		jmp	short loc_1BA0
; ---------------------------------------------------------------------------

loc_1B96:				; CODE XREF: _u_strncpy_56+50j
		mov	[ebp+var_D0], 0

loc_1BA0:				; CODE XREF: _u_strncpy_56+5Cj
		cmp	[ebp+var_D0], 0
		jz	short loc_1BB4
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax
		jmp	short loc_1B5C
; ---------------------------------------------------------------------------

loc_1BB4:				; CODE XREF: _u_strncpy_56+28j
					; _u_strncpy_56+6Fj
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_u_strncpy_56	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1BC0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_strlen_56(wchar_t *Str)
		public _u_strlen_56
_u_strlen_56	proc near		; CODE XREF: _u_strFindFirst_56+1BDp
					; _u_strFindLast_56+4Fp ...

var_C0		= byte ptr -0C0h
Str		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	esi, esp
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	dword ptr ds:__imp__wcslen
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_strlen_56	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1C08h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_countChar32_56
_u_countChar32_56 proc near

var_DC		= dword	ptr -0DCh
var_14		= word ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0DCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_DC]
		mov	ecx, 37h ; '7'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jz	short loc_1C32
		cmp	[ebp+arg_4], 0FFFFFFFFh
		jge	short loc_1C39

loc_1C32:				; CODE XREF: _u_countChar32_56+22j
		xor	eax, eax
		jmp	loc_1D25
; ---------------------------------------------------------------------------

loc_1C39:				; CODE XREF: _u_countChar32_56+28j
		mov	[ebp+var_8], 0
		cmp	[ebp+arg_4], 0
		jl	short loc_1CAE

loc_1C46:				; CODE XREF: _u_countChar32_56:loc_1CAAj
		cmp	[ebp+arg_4], 0
		jle	short loc_1CAC
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		and	ecx, 0FFFFFC00h
		cmp	ecx, 0D800h
		jnz	short loc_1C98
		cmp	[ebp+arg_4], 2
		jl	short loc_1C98
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax+2]
		and	ecx, 0FFFFFC00h
		cmp	ecx, 0DC00h
		jnz	short loc_1C98
		mov	eax, [ebp+arg_0]
		add	eax, 4
		mov	[ebp+arg_0], eax
		mov	eax, [ebp+arg_4]
		sub	eax, 2
		mov	[ebp+arg_4], eax
		jmp	short loc_1CAA
; ---------------------------------------------------------------------------

loc_1C98:				; CODE XREF: _u_countChar32_56+5Fj
					; _u_countChar32_56+65j ...
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		mov	eax, [ebp+arg_4]
		sub	eax, 1
		mov	[ebp+arg_4], eax

loc_1CAA:				; CODE XREF: _u_countChar32_56+8Ej
		jmp	short loc_1C46
; ---------------------------------------------------------------------------

loc_1CAC:				; CODE XREF: _u_countChar32_56+42j
		jmp	short loc_1D22
; ---------------------------------------------------------------------------

loc_1CAE:				; CODE XREF: _u_countChar32_56+3Cj
					; _u_countChar32_56:loc_1D20j
		mov	eax, [ebp+arg_0]
		mov	cx, [eax]
		mov	[ebp+var_14], cx
		movzx	edx, [ebp+var_14]
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		test	edx, edx
		jnz	short loc_1CD5
		mov	[ebp+var_DC], 1
		jmp	short loc_1CDF
; ---------------------------------------------------------------------------

loc_1CD5:				; CODE XREF: _u_countChar32_56+BFj
		mov	[ebp+var_DC], 0

loc_1CDF:				; CODE XREF: _u_countChar32_56+CBj
		cmp	[ebp+var_DC], 0
		jz	short loc_1CEA
		jmp	short loc_1D22
; ---------------------------------------------------------------------------

loc_1CEA:				; CODE XREF: _u_countChar32_56+DEj
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		movzx	eax, [ebp+var_14]
		and	eax, 0FFFFFC00h
		cmp	eax, 0D800h
		jnz	short loc_1D20
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		and	ecx, 0FFFFFC00h
		cmp	ecx, 0DC00h
		jnz	short loc_1D20
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax

loc_1D20:				; CODE XREF: _u_countChar32_56+F9j
					; _u_countChar32_56+10Dj
		jmp	short loc_1CAE
; ---------------------------------------------------------------------------

loc_1D22:				; CODE XREF: _u_countChar32_56:loc_1CACj
					; _u_countChar32_56+E0j
		mov	eax, [ebp+var_8]

loc_1D25:				; CODE XREF: _u_countChar32_56+2Cj
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_u_countChar32_56 endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1D2Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_strHasMoreChar32Than_56
_u_strHasMoreChar32Than_56 proc	near

var_E8		= dword	ptr -0E8h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= word ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E8]
		mov	ecx, 3Ah ; ':'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_8], 0
		jge	short loc_1D57
		mov	al, 1
		jmp	loc_1ED9
; ---------------------------------------------------------------------------

loc_1D57:				; CODE XREF: _u_strHasMoreChar32Than_56+22j
		cmp	[ebp+arg_0], 0
		jz	short loc_1D63
		cmp	[ebp+arg_4], 0FFFFFFFFh
		jge	short loc_1D6A

loc_1D63:				; CODE XREF: _u_strHasMoreChar32Than_56+2Fj
		xor	al, al
		jmp	loc_1ED9
; ---------------------------------------------------------------------------

loc_1D6A:				; CODE XREF: _u_strHasMoreChar32Than_56+35j
		cmp	[ebp+arg_4], 0FFFFFFFFh
		jnz	loc_1E02

loc_1D74:				; CODE XREF: _u_strHasMoreChar32Than_56+CCj
		mov	eax, [ebp+arg_0]
		mov	cx, [eax]
		mov	[ebp+var_8], cx
		movzx	edx, [ebp+var_8]
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		test	edx, edx
		jnz	short loc_1D9B
		mov	[ebp+var_E8], 1
		jmp	short loc_1DA5
; ---------------------------------------------------------------------------

loc_1D9B:				; CODE XREF: _u_strHasMoreChar32Than_56+61j
		mov	[ebp+var_E8], 0

loc_1DA5:				; CODE XREF: _u_strHasMoreChar32Than_56+6Dj
		cmp	[ebp+var_E8], 0
		jz	short loc_1DB5
		xor	al, al
		jmp	loc_1ED9
; ---------------------------------------------------------------------------

loc_1DB5:				; CODE XREF: _u_strHasMoreChar32Than_56+80j
		cmp	[ebp+arg_8], 0
		jnz	short loc_1DC2
		mov	al, 1
		jmp	loc_1ED9
; ---------------------------------------------------------------------------

loc_1DC2:				; CODE XREF: _u_strHasMoreChar32Than_56+8Dj
		movzx	eax, [ebp+var_8]
		and	eax, 0FFFFFC00h
		cmp	eax, 0D800h
		jnz	short loc_1DEF
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		and	ecx, 0FFFFFC00h
		cmp	ecx, 0DC00h
		jnz	short loc_1DEF
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax

loc_1DEF:				; CODE XREF: _u_strHasMoreChar32Than_56+A4j
					; _u_strHasMoreChar32Than_56+B8j
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax
		jmp	loc_1D74
; ---------------------------------------------------------------------------
		jmp	loc_1ED9
; ---------------------------------------------------------------------------

loc_1E02:				; CODE XREF: _u_strHasMoreChar32Than_56+42j
		mov	eax, [ebp+arg_4]
		add	eax, 1
		cdq
		sub	eax, edx
		sar	eax, 1
		cmp	eax, [ebp+arg_8]
		jle	short loc_1E19
		mov	al, 1
		jmp	loc_1ED9
; ---------------------------------------------------------------------------

loc_1E19:				; CODE XREF: _u_strHasMoreChar32Than_56+E4j
		mov	eax, [ebp+arg_4]
		sub	eax, [ebp+arg_8]
		mov	[ebp+var_20], eax
		cmp	[ebp+var_20], 0
		jg	short loc_1E2F
		xor	al, al
		jmp	loc_1ED9
; ---------------------------------------------------------------------------

loc_1E2F:				; CODE XREF: _u_strHasMoreChar32Than_56+FAj
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_14], edx

loc_1E3B:				; CODE XREF: _u_strHasMoreChar32Than_56+1A8j
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+var_14]
		jnz	short loc_1E4A
		xor	al, al
		jmp	loc_1ED9
; ---------------------------------------------------------------------------

loc_1E4A:				; CODE XREF: _u_strHasMoreChar32Than_56+115j
		cmp	[ebp+arg_8], 0
		jnz	short loc_1E57
		mov	al, 1
		jmp	loc_1ED9
; ---------------------------------------------------------------------------

loc_1E57:				; CODE XREF: _u_strHasMoreChar32Than_56+122j
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		and	ecx, 0FFFFFC00h
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx
		cmp	ecx, 0D800h
		jnz	short loc_1E80
		mov	[ebp+var_E8], 1
		jmp	short loc_1E8A
; ---------------------------------------------------------------------------

loc_1E80:				; CODE XREF: _u_strHasMoreChar32Than_56+146j
		mov	[ebp+var_E8], 0

loc_1E8A:				; CODE XREF: _u_strHasMoreChar32Than_56+152j
		cmp	[ebp+var_E8], 0
		jz	short loc_1ECB
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+var_14]
		jz	short loc_1ECB
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		and	ecx, 0FFFFFC00h
		cmp	ecx, 0DC00h
		jnz	short loc_1ECB
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		mov	eax, [ebp+var_20]
		sub	eax, 1
		mov	[ebp+var_20], eax
		cmp	[ebp+var_20], 0
		jg	short loc_1ECB
		xor	al, al
		jmp	short loc_1ED9
; ---------------------------------------------------------------------------

loc_1ECB:				; CODE XREF: _u_strHasMoreChar32Than_56+165j
					; _u_strHasMoreChar32Than_56+16Dj ...
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax
		jmp	loc_1E3B
; ---------------------------------------------------------------------------

loc_1ED9:				; CODE XREF: _u_strHasMoreChar32Than_56+26j
					; _u_strHasMoreChar32Than_56+39j ...
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_u_strHasMoreChar32Than_56 endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1EE0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_memcpy_56(void *Dst, void *Src,	int)
		public _u_memcpy_56
_u_memcpy_56	proc near

var_C0		= byte ptr -0C0h
Dst		= dword	ptr  8
Src		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_8], 0
		jle	short loc_1F28
		push	1
		mov	eax, [ebp+Src]
		push	eax
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	ecx, [ebp+arg_8]
		shl	ecx, 1
		push	ecx		; Size
		mov	edx, [ebp+Src]
		push	edx		; Src
		mov	eax, [ebp+Dst]
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch

loc_1F28:				; CODE XREF: _u_memcpy_56+22j
		mov	eax, [ebp+Dst]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_memcpy_56	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1F40h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_memmove_56(void	*Dst, void *Src, int)
		public _u_memmove_56
_u_memmove_56	proc near

var_C0		= byte ptr -0C0h
Dst		= dword	ptr  8
Src		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_8], 0
		jle	short loc_1F92
		push	1
		mov	eax, [ebp+Src]
		push	eax
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	ecx, [ebp+arg_8]
		shl	ecx, 1
		mov	esi, esp
		push	ecx		; Size
		mov	edx, [ebp+Src]
		push	edx		; Src
		mov	eax, [ebp+Dst]
		push	eax		; Dst
		call	dword ptr ds:__imp__memmove
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1F92:				; CODE XREF: _u_memmove_56+22j
		mov	eax, [ebp+Dst]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_memmove_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1FACh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_memset_56
_u_memset_56	proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= word ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_8], 0
		jle	short loc_1FFF
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_14], edx

loc_1FE2:				; CODE XREF: _u_memset_56+51j
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+var_14]
		jnb	short loc_1FFF
		mov	eax, [ebp+var_8]
		mov	cx, [ebp+arg_4]
		mov	[eax], cx
		mov	edx, [ebp+var_8]
		add	edx, 2
		mov	[ebp+var_8], edx
		jmp	short loc_1FE2
; ---------------------------------------------------------------------------

loc_1FFF:				; CODE XREF: _u_memset_56+22j
					; _u_memset_56+3Cj
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_u_memset_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 200Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_memcmp_56
_u_memcmp_56	proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_8], 0
		jle	short loc_2070
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_8], edx

loc_203C:				; CODE XREF: _u_memcmp_56+62j
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+var_8]
		jnb	short loc_2070
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		mov	edx, [ebp+arg_4]
		movzx	eax, word ptr [edx]
		sub	ecx, eax
		mov	[ebp+var_14], ecx
		jz	short loc_205C
		mov	eax, [ebp+var_14]
		jmp	short loc_2072
; ---------------------------------------------------------------------------

loc_205C:				; CODE XREF: _u_memcmp_56+49j
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		mov	eax, [ebp+arg_4]
		add	eax, 2
		mov	[ebp+arg_4], eax
		jmp	short loc_203C
; ---------------------------------------------------------------------------

loc_2070:				; CODE XREF: _u_memcmp_56+22j
					; _u_memcmp_56+36j
		xor	eax, eax

loc_2072:				; CODE XREF: _u_memcmp_56+4Ej
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_u_memcmp_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 207Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_memcmpCodePointOrder_56(wchar_t	*Str, wchar_t *, int)
		public _u_memcmpCodePointOrder_56
_u_memcmpCodePointOrder_56 proc	near

var_C0		= byte ptr -0C0h
Str		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		push	1		; char
		push	0		; char
		mov	eax, [ebp+arg_8]
		push	eax		; int
		mov	ecx, [ebp+arg_4]
		push	ecx		; wchar_t *
		mov	edx, [ebp+arg_8]
		push	edx		; int
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	_uprv_strCompare_56
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_memcmpCodePointOrder_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 20CCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_unescapeAt_56
_u_unescapeAt_56 proc near		; CODE XREF: _u_unescapeAt_56+2C8p
					; _u_unescape_56+B4p

var_160		= dword	ptr -160h
var_98		= word ptr -98h
var_8C		= word ptr -8Ch
var_80		= dword	ptr -80h
var_71		= byte ptr -71h
var_68		= dword	ptr -68h
var_59		= byte ptr -59h
var_4D		= byte ptr -4Dh
var_41		= byte ptr -41h
var_35		= byte ptr -35h
var_29		= byte ptr -29h
var_20		= dword	ptr -20h
var_14		= word ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 160h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_160]
		mov	ecx, 58h ; 'X'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		mov	[ebp+var_20], 0
		mov	[ebp+var_29], 0
		mov	[ebp+var_35], 0
		mov	[ebp+var_41], 0
		mov	[ebp+var_4D], 4
		mov	[ebp+var_71], 0
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jl	short loc_211F
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		cmp	ecx, [ebp+arg_8]
		jl	short loc_2129

loc_211F:				; CODE XREF: _u_unescapeAt_56+47j
		jmp	$err$12740
; ---------------------------------------------------------------------------
		jmp	$err$12740
; ---------------------------------------------------------------------------

loc_2129:				; CODE XREF: _u_unescapeAt_56+51j
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		mov	[ebp+var_160], ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		add	eax, 1
		mov	ecx, [ebp+arg_4]
		mov	[ecx], eax
		mov	esi, esp
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+var_160]
		push	eax
		call	[ebp+arg_0]
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], ax
		movzx	eax, [ebp+var_14]
		mov	[ebp+var_160], eax
		cmp	[ebp+var_160], 55h ; 'U'
		jz	short loc_2195
		cmp	[ebp+var_160], 75h ; 'u'
		jz	short loc_2186
		cmp	[ebp+var_160], 78h ; 'x'
		jz	short loc_21A1
		jmp	short loc_21ED
; ---------------------------------------------------------------------------

loc_2186:				; CODE XREF: _u_unescapeAt_56+ADj
		mov	[ebp+var_41], 4
		mov	al, [ebp+var_41]
		mov	[ebp+var_35], al
		jmp	loc_221C
; ---------------------------------------------------------------------------

loc_2195:				; CODE XREF: _u_unescapeAt_56+A4j
		mov	[ebp+var_41], 8
		mov	al, [ebp+var_41]
		mov	[ebp+var_35], al
		jmp	short loc_221C
; ---------------------------------------------------------------------------

loc_21A1:				; CODE XREF: _u_unescapeAt_56+B6j
		mov	[ebp+var_35], 1
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		cmp	ecx, [ebp+arg_8]
		jge	short loc_21E7
		mov	esi, esp
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		push	edx
		call	[ebp+arg_0]
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		movzx	eax, ax
		cmp	eax, 7Bh ; '{'
		jnz	short loc_21E7
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		add	ecx, 1
		mov	edx, [ebp+arg_4]
		mov	[edx], ecx
		mov	[ebp+var_71], 1
		mov	[ebp+var_41], 8
		jmp	short loc_21EB
; ---------------------------------------------------------------------------

loc_21E7:				; CODE XREF: _u_unescapeAt_56+E1j
					; _u_unescapeAt_56+102j
		mov	[ebp+var_41], 2

loc_21EB:				; CODE XREF: _u_unescapeAt_56+119j
		jmp	short loc_221C
; ---------------------------------------------------------------------------

loc_21ED:				; CODE XREF: _u_unescapeAt_56+B8j
		movzx	eax, [ebp+var_14]
		push	eax
		call	?_digit8@@YAC_W@Z ; _digit8(wchar_t)
		add	esp, 4
		mov	[ebp+var_59], al
		movsx	eax, [ebp+var_59]
		test	eax, eax
		jl	short loc_221C
		mov	[ebp+var_35], 1
		mov	[ebp+var_41], 3
		mov	[ebp+var_29], 1
		mov	[ebp+var_4D], 3
		movsx	eax, [ebp+var_59]
		mov	[ebp+var_20], eax

loc_221C:				; CODE XREF: _u_unescapeAt_56+C4j
					; _u_unescapeAt_56+D3j	...
		movsx	eax, [ebp+var_35]
		test	eax, eax
		jz	loc_23D4

loc_2228:				; CODE XREF: _u_unescapeAt_56+202j
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		cmp	ecx, [ebp+arg_8]
		jge	loc_22D3
		movsx	eax, [ebp+var_29]
		movsx	ecx, [ebp+var_41]
		cmp	eax, ecx
		jge	loc_22D3
		mov	esi, esp
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		push	edx
		call	[ebp+arg_0]
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], ax
		movsx	eax, [ebp+var_4D]
		cmp	eax, 3
		jnz	short loc_2281
		movzx	ecx, [ebp+var_14]
		push	ecx
		call	?_digit8@@YAC_W@Z ; _digit8(wchar_t)
		add	esp, 4
		mov	byte ptr [ebp+var_160+3], al
		jmp	short loc_2294
; ---------------------------------------------------------------------------

loc_2281:				; CODE XREF: _u_unescapeAt_56+19Ej
		movzx	edx, [ebp+var_14]
		push	edx
		call	?_digit16@@YAC_W@Z ; _digit16(wchar_t)
		add	esp, 4
		mov	byte ptr [ebp+var_160+3], al

loc_2294:				; CODE XREF: _u_unescapeAt_56+1B3j
		mov	al, byte ptr [ebp+var_160+3]
		mov	[ebp+var_59], al
		movsx	eax, [ebp+var_59]
		test	eax, eax
		jge	short loc_22A7
		jmp	short loc_22D3
; ---------------------------------------------------------------------------

loc_22A7:				; CODE XREF: _u_unescapeAt_56+1D7j
		movsx	ecx, [ebp+var_4D]
		mov	eax, [ebp+var_20]
		shl	eax, cl
		movsx	ecx, [ebp+var_59]
		or	eax, ecx
		mov	[ebp+var_20], eax
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		add	ecx, 1
		mov	edx, [ebp+arg_4]
		mov	[edx], ecx
		mov	al, [ebp+var_29]
		add	al, 1
		mov	[ebp+var_29], al
		jmp	loc_2228
; ---------------------------------------------------------------------------

loc_22D3:				; CODE XREF: _u_unescapeAt_56+164j
					; _u_unescapeAt_56+174j ...
		movsx	eax, [ebp+var_29]
		movsx	ecx, [ebp+var_35]
		cmp	eax, ecx
		jge	short loc_22E9
		jmp	$err$12740
; ---------------------------------------------------------------------------
		jmp	$err$12740
; ---------------------------------------------------------------------------

loc_22E9:				; CODE XREF: _u_unescapeAt_56+211j
		movsx	eax, [ebp+var_71]
		test	eax, eax
		jz	short loc_2311
		movzx	eax, [ebp+var_14]
		cmp	eax, 7Dh ; '}'
		jz	short loc_2304
		jmp	$err$12740
; ---------------------------------------------------------------------------
		jmp	$err$12740
; ---------------------------------------------------------------------------

loc_2304:				; CODE XREF: _u_unescapeAt_56+22Cj
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		add	ecx, 1
		mov	edx, [ebp+arg_4]
		mov	[edx], ecx

loc_2311:				; CODE XREF: _u_unescapeAt_56+223j
		cmp	[ebp+var_20], 0
		jl	short loc_2320
		cmp	[ebp+var_20], 110000h
		jl	short loc_232A

loc_2320:				; CODE XREF: _u_unescapeAt_56+249j
		jmp	$err$12740
; ---------------------------------------------------------------------------
		jmp	$err$12740
; ---------------------------------------------------------------------------

loc_232A:				; CODE XREF: _u_unescapeAt_56+252j
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		cmp	ecx, [ebp+arg_8]
		jge	loc_23CC
		mov	eax, [ebp+var_20]
		and	eax, 0FFFFFC00h
		cmp	eax, 0D800h
		jnz	loc_23CC
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		add	ecx, 1
		mov	[ebp+var_80], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		push	edx
		call	[ebp+arg_0]
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], ax
		movzx	eax, [ebp+var_14]
		cmp	eax, 5Ch ; '\'
		jnz	short loc_23A0
		mov	eax, [ebp+var_80]
		cmp	eax, [ebp+arg_8]
		jge	short loc_23A0
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		lea	edx, [ebp+var_80]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_u_unescapeAt_56
		add	esp, 10h
		mov	[ebp+var_14], ax

loc_23A0:				; CODE XREF: _u_unescapeAt_56+2AEj
					; _u_unescapeAt_56+2B6j
		movzx	eax, [ebp+var_14]
		and	eax, 0FFFFFC00h
		cmp	eax, 0DC00h
		jnz	short loc_23CC
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_80]
		mov	[eax], ecx
		mov	eax, [ebp+var_20]
		shl	eax, 0Ah
		movzx	ecx, [ebp+var_14]
		lea	edx, [eax+ecx-35FDC00h]
		mov	[ebp+var_20], edx

loc_23CC:				; CODE XREF: _u_unescapeAt_56+266j
					; _u_unescapeAt_56+279j ...
		mov	eax, [ebp+var_20]
		jmp	loc_257A
; ---------------------------------------------------------------------------

loc_23D4:				; CODE XREF: _u_unescapeAt_56+156j
		mov	[ebp+var_68], 0
		jmp	short loc_23E6
; ---------------------------------------------------------------------------

loc_23DD:				; CODE XREF: _u_unescapeAt_56:loc_2426j
		mov	eax, [ebp+var_68]
		add	eax, 2
		mov	[ebp+var_68], eax

loc_23E6:				; CODE XREF: _u_unescapeAt_56+30Fj
		cmp	[ebp+var_68], 10h
		jge	short loc_2428
		movzx	eax, [ebp+var_14]
		mov	ecx, [ebp+var_68]
		movzx	edx, _UNESCAPE_MAP[ecx*2]
		cmp	eax, edx
		jnz	short loc_2411
		mov	eax, [ebp+var_68]
		movzx	eax, word_2[eax*2]
		jmp	loc_257A
; ---------------------------------------------------------------------------
		jmp	short loc_2426
; ---------------------------------------------------------------------------

loc_2411:				; CODE XREF: _u_unescapeAt_56+331j
		movzx	eax, [ebp+var_14]
		mov	ecx, [ebp+var_68]
		movzx	edx, _UNESCAPE_MAP[ecx*2]
		cmp	eax, edx
		jge	short loc_2426
		jmp	short loc_2428
; ---------------------------------------------------------------------------

loc_2426:				; CODE XREF: _u_unescapeAt_56+343j
					; _u_unescapeAt_56+356j
		jmp	short loc_23DD
; ---------------------------------------------------------------------------

loc_2428:				; CODE XREF: _u_unescapeAt_56+31Ej
					; _u_unescapeAt_56+358j
		movzx	eax, [ebp+var_14]
		cmp	eax, 63h ; 'c'
		jnz	loc_24F8
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		cmp	ecx, [ebp+arg_8]
		jge	loc_24F8
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		mov	[ebp+var_160], ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		add	eax, 1
		mov	ecx, [ebp+arg_4]
		mov	[ecx], eax
		mov	esi, esp
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+var_160]
		push	eax
		call	[ebp+arg_0]
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], ax
		movzx	eax, [ebp+var_14]
		and	eax, 0FFFFFC00h
		cmp	eax, 0D800h
		jnz	short loc_24EC
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		cmp	ecx, [ebp+arg_8]
		jge	short loc_24EC
		mov	esi, esp
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		push	edx
		call	[ebp+arg_0]
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_8C], ax
		movzx	eax, [ebp+var_8C]
		and	eax, 0FFFFFC00h
		cmp	eax, 0DC00h
		jnz	short loc_24EC
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		add	ecx, 1
		mov	edx, [ebp+arg_4]
		mov	[edx], ecx
		movzx	eax, [ebp+var_14]
		shl	eax, 0Ah
		movzx	ecx, [ebp+var_8C]
		lea	edx, [eax+ecx-35FDC00h]
		mov	[ebp+var_14], dx

loc_24EC:				; CODE XREF: _u_unescapeAt_56+3BBj
					; _u_unescapeAt_56+3C5j ...
		movzx	eax, [ebp+var_14]
		and	eax, 1Fh
		jmp	loc_257A
; ---------------------------------------------------------------------------

loc_24F8:				; CODE XREF: _u_unescapeAt_56+363j
					; _u_unescapeAt_56+371j
		movzx	eax, [ebp+var_14]
		and	eax, 0FFFFFC00h
		cmp	eax, 0D800h
		jnz	short loc_2569
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		cmp	ecx, [ebp+arg_8]
		jge	short loc_2569
		mov	esi, esp
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		push	edx
		call	[ebp+arg_0]
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_98], ax
		movzx	eax, [ebp+var_98]
		and	eax, 0FFFFFC00h
		cmp	eax, 0DC00h
		jnz	short loc_2569
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		add	ecx, 1
		mov	edx, [ebp+arg_4]
		mov	[edx], ecx
		movzx	eax, [ebp+var_14]
		shl	eax, 0Ah
		movzx	ecx, [ebp+var_98]
		lea	eax, [eax+ecx-35FDC00h]
		jmp	short loc_257A
; ---------------------------------------------------------------------------

loc_2569:				; CODE XREF: _u_unescapeAt_56+43Aj
					; _u_unescapeAt_56+444j ...
		movzx	eax, [ebp+var_14]
		jmp	short loc_257A
; ---------------------------------------------------------------------------

$err$12740:				; CODE XREF: _u_unescapeAt_56:loc_211Fj
					; _u_unescapeAt_56+58j	...
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		mov	[eax], ecx
		or	eax, 0FFFFFFFFh

loc_257A:				; CODE XREF: _u_unescapeAt_56+303j
					; _u_unescapeAt_56+33Ej ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN45
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 160h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_unescapeAt_56 endp

; ---------------------------------------------------------------------------
		align 10h
$LN45		dd 1			; DATA XREF: _u_unescapeAt_56+4B2o
		dd offset $LN44
$LN44		dd 0FFFFFF80h, 4	; DATA XREF: .text:000025A4o
		dd offset $LN43		; "ahead"
$LN43		db 'ahead',0            ; DATA XREF: .text:000025B0o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 25BCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl _digit8(wchar_t)
?_digit8@@YAC_W@Z proc near		; CODE XREF: _u_unescapeAt_56+126p
					; _u_unescapeAt_56+1A5p

var_C0		= byte ptr -0C0h
arg_0		= word ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		movzx	eax, [ebp+arg_0]
		cmp	eax, 30h ; '0'
		jl	short loc_25F5
		movzx	eax, [ebp+arg_0]
		cmp	eax, 37h ; '7'
		jg	short loc_25F5
		movzx	eax, [ebp+arg_0]
		sub	eax, 30h ; '0'
		jmp	short loc_25F7
; ---------------------------------------------------------------------------

loc_25F5:				; CODE XREF: _digit8(wchar_t)+25j
					; _digit8(wchar_t)+2Ej
		or	al, 0FFh

loc_25F7:				; CODE XREF: _digit8(wchar_t)+37j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?_digit8@@YAC_W@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2600h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl _digit16(wchar_t)
?_digit16@@YAC_W@Z proc	near		; CODE XREF: _u_unescapeAt_56+1BAp

var_C0		= byte ptr -0C0h
arg_0		= word ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		movzx	eax, [ebp+arg_0]
		cmp	eax, 30h ; '0'
		jl	short loc_2639
		movzx	eax, [ebp+arg_0]
		cmp	eax, 39h ; '9'
		jg	short loc_2639
		movzx	eax, [ebp+arg_0]
		sub	eax, 30h ; '0'
		jmp	short loc_2671
; ---------------------------------------------------------------------------

loc_2639:				; CODE XREF: _digit16(wchar_t)+25j
					; _digit16(wchar_t)+2Ej
		movzx	eax, [ebp+arg_0]
		cmp	eax, 41h ; 'A'
		jl	short loc_2654
		movzx	eax, [ebp+arg_0]
		cmp	eax, 46h ; 'F'
		jg	short loc_2654
		movzx	eax, [ebp+arg_0]
		sub	eax, 37h ; '7'
		jmp	short loc_2671
; ---------------------------------------------------------------------------

loc_2654:				; CODE XREF: _digit16(wchar_t)+40j
					; _digit16(wchar_t)+49j
		movzx	eax, [ebp+arg_0]
		cmp	eax, 61h ; 'a'
		jl	short loc_266F
		movzx	eax, [ebp+arg_0]
		cmp	eax, 66h ; 'f'
		jg	short loc_266F
		movzx	eax, [ebp+arg_0]
		sub	eax, 57h ; 'W'
		jmp	short loc_2671
; ---------------------------------------------------------------------------

loc_266F:				; CODE XREF: _digit16(wchar_t)+5Bj
					; _digit16(wchar_t)+64j
		or	al, 0FFh

loc_2671:				; CODE XREF: _digit16(wchar_t)+37j
					; _digit16(wchar_t)+52j ...
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?_digit16@@YAC_W@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2678h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_unescape_56(char *Str, int, int)
		public _u_unescape_56
_u_unescape_56	proc near

var_FC		= byte ptr -0FCh
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_1D		= byte ptr -1Dh
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
Str		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0FCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_FC]
		mov	ecx, 3Fh ; '?'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+Str]
		mov	[ebp+var_8], eax
		mov	[ebp+var_14], 0

loc_26A3:				; CODE XREF: _u_unescape_56:loc_27F7j
		mov	eax, [ebp+Str]
		mov	cl, [eax]
		mov	[ebp+var_1D], cl
		movsx	edx, [ebp+var_1D]
		test	edx, edx
		jz	loc_27FC
		movsx	eax, [ebp+var_1D]
		cmp	eax, 5Ch ; '\'
		jnz	loc_27EE
		mov	[ebp+var_2C], 0
		mov	eax, [ebp+Str]
		cmp	eax, [ebp+var_8]
		jz	short loc_2709
		cmp	[ebp+arg_4], 0
		jz	short loc_26FD
		mov	eax, [ebp+Str]
		sub	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+arg_8]
		sub	edx, [ebp+var_14]
		push	edx
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_4]
		lea	edx, [ecx+eax*2]
		push	edx
		call	?_appendUChars@@YAXPA_WHPBDH@Z ; _appendUChars(wchar_t *,int,char const	*,int)
		add	esp, 10h

loc_26FD:				; CODE XREF: _u_unescape_56+5Fj
		mov	eax, [ebp+Str]
		sub	eax, [ebp+var_8]
		add	eax, [ebp+var_14]
		mov	[ebp+var_14], eax

loc_2709:				; CODE XREF: _u_unescape_56+59j
		mov	eax, [ebp+Str]
		add	eax, 1
		mov	[ebp+Str], eax
		mov	eax, [ebp+Str]
		push	eax
		mov	ecx, [ebp+Str]
		push	ecx		; Str
		call	_strlen
		add	esp, 4
		push	eax
		lea	edx, [ebp+var_2C]
		push	edx
		push	offset ?_charPtr_charAt@@YA_WHPAX@Z ; _charPtr_charAt(int,void *)
		call	_u_unescapeAt_56
		add	esp, 10h
		mov	[ebp+var_38], eax
		cmp	[ebp+var_2C], 0
		jnz	short loc_2747
		jmp	$err$12829
; ---------------------------------------------------------------------------
		jmp	$err$12829
; ---------------------------------------------------------------------------

loc_2747:				; CODE XREF: _u_unescape_56+C3j
		mov	eax, [ebp+Str]
		add	eax, [ebp+var_2C]
		mov	[ebp+Str], eax
		cmp	[ebp+arg_4], 0
		jz	short loc_27D1
		mov	eax, 0FFFFh
		cmp	eax, [ebp+var_38]
		sbb	ecx, ecx
		neg	ecx
		add	ecx, 1
		mov	edx, [ebp+arg_8]
		sub	edx, [ebp+var_14]
		cmp	ecx, edx
		jg	short loc_27D1
		cmp	[ebp+var_38], 0FFFFh
		ja	short loc_2791
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_4]
		mov	dx, word ptr [ebp+var_38]
		mov	[ecx+eax*2], dx
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		jmp	short loc_27CF
; ---------------------------------------------------------------------------

loc_2791:				; CODE XREF: _u_unescape_56+FEj
		mov	eax, [ebp+var_38]
		sar	eax, 0Ah
		add	eax, 0D7C0h
		mov	ecx, [ebp+var_14]
		mov	edx, [ebp+arg_4]
		mov	[edx+ecx*2], ax
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_38]
		and	eax, 3FFh
		or	eax, 0DC00h
		mov	ecx, [ebp+var_14]
		mov	edx, [ebp+arg_4]
		mov	[edx+ecx*2], ax
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax

loc_27CF:				; CODE XREF: _u_unescape_56+117j
		jmp	short loc_27E6
; ---------------------------------------------------------------------------

loc_27D1:				; CODE XREF: _u_unescape_56+DCj
					; _u_unescape_56+F5j
		mov	eax, 0FFFFh
		cmp	eax, [ebp+var_38]
		sbb	ecx, ecx
		neg	ecx
		add	ecx, 1
		add	ecx, [ebp+var_14]
		mov	[ebp+var_14], ecx

loc_27E6:				; CODE XREF: _u_unescape_56:loc_27CFj
		mov	eax, [ebp+Str]
		mov	[ebp+var_8], eax
		jmp	short loc_27F7
; ---------------------------------------------------------------------------

loc_27EE:				; CODE XREF: _u_unescape_56+46j
		mov	eax, [ebp+Str]
		add	eax, 1
		mov	[ebp+Str], eax

loc_27F7:				; CODE XREF: _u_unescape_56+174j
		jmp	loc_26A3
; ---------------------------------------------------------------------------

loc_27FC:				; CODE XREF: _u_unescape_56+39j
		mov	eax, [ebp+Str]
		cmp	eax, [ebp+var_8]
		jz	short loc_283A
		cmp	[ebp+arg_4], 0
		jz	short loc_282E
		mov	eax, [ebp+Str]
		sub	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+arg_8]
		sub	edx, [ebp+var_14]
		push	edx
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_4]
		lea	edx, [ecx+eax*2]
		push	edx
		call	?_appendUChars@@YAXPA_WHPBDH@Z ; _appendUChars(wchar_t *,int,char const	*,int)
		add	esp, 10h

loc_282E:				; CODE XREF: _u_unescape_56+190j
		mov	eax, [ebp+Str]
		sub	eax, [ebp+var_8]
		add	eax, [ebp+var_14]
		mov	[ebp+var_14], eax

loc_283A:				; CODE XREF: _u_unescape_56+18Aj
		cmp	[ebp+arg_4], 0
		jz	short loc_2854
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+arg_8]
		jge	short loc_2854
		xor	eax, eax
		mov	ecx, [ebp+var_14]
		mov	edx, [ebp+arg_4]
		mov	[edx+ecx*2], ax

loc_2854:				; CODE XREF: _u_unescape_56+1C6j
					; _u_unescape_56+1CEj
		mov	eax, [ebp+var_14]
		jmp	short loc_286F
; ---------------------------------------------------------------------------

$err$12829:				; CODE XREF: _u_unescape_56+C5j
					; _u_unescape_56+CAj
		cmp	[ebp+arg_4], 0
		jz	short loc_286D
		cmp	[ebp+arg_8], 0
		jle	short loc_286D
		xor	eax, eax
		mov	ecx, [ebp+arg_4]
		mov	[ecx], ax

loc_286D:				; CODE XREF: _u_unescape_56+1E5j
					; _u_unescape_56+1EBj
		xor	eax, eax

loc_286F:				; CODE XREF: _u_unescape_56+1DFj
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN21
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0FCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_unescape_56	endp

; ---------------------------------------------------------------------------
$LN21		dd 1			; DATA XREF: _u_unescape_56+1FBo
		dd offset $LN20
$LN20		dd 0FFFFFFD4h, 4	; DATA XREF: .text:00002898o
		dd offset $LN19		; "lenParsed"
$LN19		db 'lenParsed',0        ; DATA XREF: .text:000028A4o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 28B4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; wchar_t __cdecl _charPtr_charAt(int, void *)
?_charPtr_charAt@@YA_WHPAX@Z proc near	; DATA XREF: _u_unescape_56+AFo

var_CC		= byte ptr -0CCh
var_8		= word ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		push	1
		lea	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		add	ecx, [ebp+arg_0]
		push	ecx
		call	_u_charsToUChars_56
		add	esp, 0Ch
		mov	ax, [ebp+var_8]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?_charPtr_charAt@@YA_WHPAX@Z endp

; ---------------------------------------------------------------------------
$LN5		dd 1			; DATA XREF: _charPtr_charAt(int,void *)+3Bo
		dd offset $LN4
$LN4		dd 0FFFFFFF8h, 2	; DATA XREF: .text:00002914o
		dd offset $LN3
$LN3		dd 363163h		; DATA XREF: .text:00002920o
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2928h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl _appendUChars(wchar_t *,	int, char const	*, int)
?_appendUChars@@YAXPA_WHPBDH@Z proc near ; CODE	XREF: _u_unescape_56+7Dp
					; _u_unescape_56+1AEp

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_4], 0
		jge	short loc_2953
		mov	[ebp+arg_4], 0

loc_2953:				; CODE XREF: _appendUChars(wchar_t *,int,char const *,int)+22j
		mov	eax, [ebp+arg_C]
		cmp	eax, [ebp+arg_4]
		jle	short loc_2961
		mov	eax, [ebp+arg_4]
		mov	[ebp+arg_C], eax

loc_2961:				; CODE XREF: _appendUChars(wchar_t *,int,char const *,int)+31j
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		call	_u_charsToUChars_56
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?_appendUChars@@YAXPA_WHPBDH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 298Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_terminateUChars_56
_u_terminateUChars_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_C], 0
		jz	short loc_2A10
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_2A10
		cmp	[ebp+arg_8], 0
		jge	short loc_29CD
		jmp	short loc_2A10
; ---------------------------------------------------------------------------

loc_29CD:				; CODE XREF: _u_terminateUChars_56+3Dj
		mov	eax, [ebp+arg_8]
		cmp	eax, [ebp+arg_4]
		jge	short loc_29F4
		xor	eax, eax
		mov	ecx, [ebp+arg_8]
		mov	edx, [ebp+arg_0]
		mov	[edx+ecx*2], ax
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0FFFFFF84h
		jnz	short loc_29F2
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0

loc_29F2:				; CODE XREF: _u_terminateUChars_56+5Bj
		jmp	short loc_2A10
; ---------------------------------------------------------------------------

loc_29F4:				; CODE XREF: _u_terminateUChars_56+47j
		mov	eax, [ebp+arg_8]
		cmp	eax, [ebp+arg_4]
		jnz	short loc_2A07
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0FFFFFF84h
		jmp	short loc_2A10
; ---------------------------------------------------------------------------

loc_2A07:				; CODE XREF: _u_terminateUChars_56+6Ej
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0Fh

loc_2A10:				; CODE XREF: _u_terminateUChars_56+22j
					; _u_terminateUChars_56+37j ...
		mov	eax, [ebp+arg_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_terminateUChars_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2A28h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl U_SUCCESS(enum  UErrorCode)
?U_SUCCESS@@YACW4UErrorCode@@@Z	proc near ; CODE XREF: _u_terminateUChars_56+2Ap
					; _u_terminateChars_56+2Ap ...

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		setle	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?U_SUCCESS@@YACW4UErrorCode@@@Z	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2A54h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_terminateChars_56
_u_terminateChars_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_C], 0
		jz	short loc_2AD5
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_2AD5
		cmp	[ebp+arg_8], 0
		jge	short loc_2A95
		jmp	short loc_2AD5
; ---------------------------------------------------------------------------

loc_2A95:				; CODE XREF: _u_terminateChars_56+3Dj
		mov	eax, [ebp+arg_8]
		cmp	eax, [ebp+arg_4]
		jge	short loc_2AB9
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+arg_8]
		mov	byte ptr [eax],	0
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0FFFFFF84h
		jnz	short loc_2AB7
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0

loc_2AB7:				; CODE XREF: _u_terminateChars_56+58j
		jmp	short loc_2AD5
; ---------------------------------------------------------------------------

loc_2AB9:				; CODE XREF: _u_terminateChars_56+47j
		mov	eax, [ebp+arg_8]
		cmp	eax, [ebp+arg_4]
		jnz	short loc_2ACC
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0FFFFFF84h
		jmp	short loc_2AD5
; ---------------------------------------------------------------------------

loc_2ACC:				; CODE XREF: _u_terminateChars_56+6Bj
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0Fh

loc_2AD5:				; CODE XREF: _u_terminateChars_56+22j
					; _u_terminateChars_56+37j ...
		mov	eax, [ebp+arg_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_terminateChars_56 endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2AECh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_terminateUChar32s_56
_u_terminateUChar32s_56	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_C], 0
		jz	short loc_2B71
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_2B71
		cmp	[ebp+arg_8], 0
		jge	short loc_2B2D
		jmp	short loc_2B71
; ---------------------------------------------------------------------------

loc_2B2D:				; CODE XREF: _u_terminateUChar32s_56+3Dj
		mov	eax, [ebp+arg_8]
		cmp	eax, [ebp+arg_4]
		jge	short loc_2B55
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+eax*4], 0
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0FFFFFF84h
		jnz	short loc_2B53
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0

loc_2B53:				; CODE XREF: _u_terminateUChar32s_56+5Cj
		jmp	short loc_2B71
; ---------------------------------------------------------------------------

loc_2B55:				; CODE XREF: _u_terminateUChar32s_56+47j
		mov	eax, [ebp+arg_8]
		cmp	eax, [ebp+arg_4]
		jnz	short loc_2B68
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0FFFFFF84h
		jmp	short loc_2B71
; ---------------------------------------------------------------------------

loc_2B68:				; CODE XREF: _u_terminateUChar32s_56+6Fj
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0Fh

loc_2B71:				; CODE XREF: _u_terminateUChar32s_56+22j
					; _u_terminateUChar32s_56+37j ...
		mov	eax, [ebp+arg_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_terminateUChar32s_56	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2B88h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_terminateWChars_56
_u_terminateWChars_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_C], 0
		jz	short loc_2C0C
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_2C0C
		cmp	[ebp+arg_8], 0
		jge	short loc_2BC9
		jmp	short loc_2C0C
; ---------------------------------------------------------------------------

loc_2BC9:				; CODE XREF: _u_terminateWChars_56+3Dj
		mov	eax, [ebp+arg_8]
		cmp	eax, [ebp+arg_4]
		jge	short loc_2BF0
		xor	eax, eax
		mov	ecx, [ebp+arg_8]
		mov	edx, [ebp+arg_0]
		mov	[edx+ecx*2], ax
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0FFFFFF84h
		jnz	short loc_2BEE
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0

loc_2BEE:				; CODE XREF: _u_terminateWChars_56+5Bj
		jmp	short loc_2C0C
; ---------------------------------------------------------------------------

loc_2BF0:				; CODE XREF: _u_terminateWChars_56+47j
		mov	eax, [ebp+arg_8]
		cmp	eax, [ebp+arg_4]
		jnz	short loc_2C03
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0FFFFFF84h
		jmp	short loc_2C0C
; ---------------------------------------------------------------------------

loc_2C03:				; CODE XREF: _u_terminateWChars_56+6Ej
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0Fh

loc_2C0C:				; CODE XREF: _u_terminateWChars_56+22j
					; _u_terminateWChars_56+37j ...
		mov	eax, [ebp+arg_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_terminateWChars_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2C24h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ustr_hashUCharsN_56
_ustr_hashUCharsN_56 proc near

var_FC		= byte ptr -0FCh
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0FCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_FC]
		mov	ecx, 3Fh ; '?'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_2CA3
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_20]
		sub	eax, 20h ; ' '
		cdq
		and	edx, 1Fh
		add	eax, edx
		sar	eax, 5
		add	eax, 1
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_14]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_38], edx

loc_2C7C:				; CODE XREF: _ustr_hashUCharsN_56+7Dj
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_38]
		jnb	short loc_2CA3
		mov	eax, [ebp+var_8]
		imul	eax, 25h
		mov	ecx, [ebp+var_14]
		movzx	edx, word ptr [ecx]
		add	eax, edx
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+var_14]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_14], edx
		jmp	short loc_2C7C
; ---------------------------------------------------------------------------

loc_2CA3:				; CODE XREF: _ustr_hashUCharsN_56+2Fj
					; _ustr_hashUCharsN_56+5Ej
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_ustr_hashUCharsN_56 endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2CB0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ustr_hashCharsN_56
_ustr_hashCharsN_56 proc near

var_FC		= byte ptr -0FCh
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0FCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_FC]
		mov	ecx, 3Fh ; '?'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_2D29
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_20]
		sub	eax, 20h ; ' '
		cdq
		and	edx, 1Fh
		add	eax, edx
		sar	eax, 5
		add	eax, 1
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+var_14]
		add	eax, [ebp+var_20]
		mov	[ebp+var_38], eax

loc_2D05:				; CODE XREF: _ustr_hashCharsN_56+77j
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_38]
		jnb	short loc_2D29
		mov	eax, [ebp+var_8]
		imul	eax, 25h
		mov	ecx, [ebp+var_14]
		movzx	edx, byte ptr [ecx]
		add	eax, edx
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_14]
		add	eax, [ebp+var_2C]
		mov	[ebp+var_14], eax
		jmp	short loc_2D05
; ---------------------------------------------------------------------------

loc_2D29:				; CODE XREF: _ustr_hashCharsN_56+2Fj
					; _ustr_hashCharsN_56+5Bj
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_ustr_hashCharsN_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2D34h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ustr_hashICharsN_56
_ustr_hashICharsN_56 proc near

var_FC		= byte ptr -0FCh
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0FCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_FC]
		mov	ecx, 3Fh ; '?'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_2DB9
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_20]
		sub	eax, 20h ; ' '
		cdq
		and	edx, 1Fh
		add	eax, edx
		sar	eax, 5
		add	eax, 1
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+var_14]
		add	eax, [ebp+var_20]
		mov	[ebp+var_38], eax

loc_2D89:				; CODE XREF: _ustr_hashICharsN_56+83j
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_38]
		jnb	short loc_2DB9
		mov	esi, [ebp+var_8]
		imul	esi, 25h
		mov	eax, [ebp+var_14]
		movzx	ecx, byte ptr [eax]
		push	ecx
		call	_uprv_asciitolower_56
		add	esp, 4
		movzx	edx, al
		add	esi, edx
		mov	[ebp+var_8], esi
		mov	eax, [ebp+var_14]
		add	eax, [ebp+var_2C]
		mov	[ebp+var_14], eax
		jmp	short loc_2D89
; ---------------------------------------------------------------------------

loc_2DB9:				; CODE XREF: _ustr_hashICharsN_56+2Fj
					; _ustr_hashICharsN_56+5Bj
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0FCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ustr_hashICharsN_56 endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_CheckEsp:near ; CODE XREF: _u_strFindFirst_56+408p
					; _u_strstr_56+3Dp ...
; size_t __cdecl _wcslen(const wchar_t *Str)
		extrn __imp__wcslen:near ; CODE	XREF: _u_strlen_56+24p
					; DATA XREF: _u_strlen_56+24r
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _u_memcpy_56+40p
		extrn _uprv_checkValidMemory:near ; CODE XREF: _u_memcpy_56+2Ap
					; _u_memmove_56+2Ap
; void *__cdecl	_memmove(void *Dst, const void *Src, size_t Size)
		extrn __imp__memmove:near ; CODE XREF: _u_memmove_56+42p
					; DATA XREF: _u_memmove_56+42r
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _u_unescapeAt_56+4B8p
					; _u_unescape_56+201p ...
; size_t __cdecl strlen(const char *Str)
		extrn _strlen:near	; CODE XREF: _u_unescape_56+A2p
		extrn _u_charsToUChars_56:near ; CODE XREF: _charPtr_charAt(int,void *)+2Bp
					; _appendUChars(wchar_t	*,int,char const *,int)+45p
		extrn _uprv_asciitolower_56:near ; CODE	XREF: _ustr_hashICharsN_56+6Ap


		end
