;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	BD471F41E6F354F7C8A11B1EF34D0B54
; Input	CRC32 :	4ACE9343

; File Name   :	D:\compspace\objfiles\firefox\common\uhash.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
_PRIMES		dd 0Dh			; DATA XREF: __uhash_allocate+6Br
					; _uhash_openSize_56+2Er
		dd 1Fh,	3Dh, 7Fh, 0FBh,	1FDh, 3FDh, 7F7h, 0FFDh, 1FFFh
		dd 3FFDh, 7FEDh
dword_30	dd 0FFF1h, 1FFFFh, 3FFFBh, 7FFFFh, 0FFFFDh, 1FFFF7h, 3FFFFDh
					; DATA XREF: .rdata:`string'o
		dd 7FFFF1h, 0FFFFFDh, 1FFFFD9h,	3FFFFFBh, 7FFFFD9h, 0FFFFFC7h
		dd 1FFFFFFDh, 3FFFFFDDh, 7FFFFFFFh
_RESIZE_POLICY_RATIO_TABLE dd 0.0	; DATA XREF: __uhash_internalSetResizePolicy+A7r
flt_74		dd 0.5			; DATA XREF: __uhash_internalSetResizePolicy+B9r
		db 'млл=',0
		db 2 dup(0), 3Fh
		dd 0
		dd 3F800000h
_rdata		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 88h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_open_56
_uhash_open_56	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_C]
		push	eax
		push	3
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	__uhash_create
		add	esp, 14h
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_open_56	endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 0D4h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 0D8h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0DCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

__uhash_create	proc near		; CODE XREF: _uhash_open_56+30p
					; _uhash_openSize_56+59p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_10]
		cmp	dword ptr [eax], 0
		jle	short loc_106
		xor	eax, eax
		jmp	short loc_168
; ---------------------------------------------------------------------------

loc_106:				; CODE XREF: __uhash_create+24j
		push	34h ; '4'
		call	_uprv_malloc_56
		add	esp, 4
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jnz	short loc_126
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 7
		xor	eax, eax
		jmp	short loc_168
; ---------------------------------------------------------------------------

loc_126:				; CODE XREF: __uhash_create+3Bj
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		call	__uhash_init
		add	esp, 18h
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax+31h], 1
		mov	eax, [ebp+arg_10]
		cmp	dword ptr [eax], 0
		jle	short loc_165
		mov	eax, [ebp+var_8]
		push	eax
		call	_uprv_free_56
		add	esp, 4
		xor	eax, eax
		jmp	short loc_168
; ---------------------------------------------------------------------------

loc_165:				; CODE XREF: __uhash_create+77j
		mov	eax, [ebp+var_8]

loc_168:				; CODE XREF: __uhash_create+28j
					; __uhash_create+48j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
__uhash_create	endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 17Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

__uhash_init	proc near		; CODE XREF: __uhash_create+62p
					; _uhash_init_56+34p

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_14]
		cmp	dword ptr [eax], 0
		jle	short loc_1A9
		xor	eax, eax
		jmp	loc_266
; ---------------------------------------------------------------------------

loc_1A9:				; CODE XREF: __uhash_init+24j
		cmp	[ebp+arg_4], 0
		jnz	short loc_1D4
		mov	eax, ds:?__LINE__Var@?1??_uhash_init@@9@9@dd133793
		add	eax, 2
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FE@PKGPAHFE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1CO@GLHFCAAK@?$AAk?$AAe?$AAy?$AAH?$AAa?$AAs?$AAh?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@ ; "keyHash !=	((void *)0)"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1D4:				; CODE XREF: __uhash_init+31j
		cmp	[ebp+arg_8], 0
		jnz	short loc_1FF
		mov	eax, ds:?__LINE__Var@?1??_uhash_init@@9@9@dd133793
		add	eax, 3
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FE@PKGPAHFE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1CO@JFPPFJPJ@?$AAk?$AAe?$AAy?$AAC?$AAo?$AAm?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@ ; "keyComp !=	((void *)0)"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1FF:				; CODE XREF: __uhash_init+5Cj
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	[eax+4], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_8]
		mov	[eax+8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_C]
		mov	[eax+0Ch], ecx
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+10h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+14h], 0
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+31h], 0
		push	0
		mov	eax, [ebp+arg_0]
		push	eax
		call	__uhash_internalSetResizePolicy
		add	esp, 8
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	__uhash_allocate
		add	esp, 0Ch
		mov	eax, [ebp+arg_14]
		cmp	dword ptr [eax], 0
		jle	short loc_263
		xor	eax, eax
		jmp	short loc_266
; ---------------------------------------------------------------------------

loc_263:				; CODE XREF: __uhash_init+E1j
		mov	eax, [ebp+arg_0]

loc_266:				; CODE XREF: __uhash_init+28j
					; __uhash_init+E5j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
__uhash_init	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 27Ch
		public ??_C@_1CO@JFPPFJPJ@?$AAk?$AAe?$AAy?$AAC?$AAo?$AAm?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@
; wchar_t `string'
??_C@_1CO@JFPPFJPJ@?$AAk?$AAe?$AAy?$AAC?$AAo?$AAm?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@:
					; DATA XREF: __uhash_init+6Eo
		unicode	0, <keyComp != ((void *)0)>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2ACh
		public ??_C@_1CO@GLHFCAAK@?$AAk?$AAe?$AAy?$AAH?$AAa?$AAs?$AAh?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@
; wchar_t `string'
??_C@_1CO@GLHFCAAK@?$AAk?$AAe?$AAy?$AAH?$AAa?$AAs?$AAh?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@:
					; DATA XREF: __uhash_init+43o
		unicode	0, <keyHash != ((void *)0)>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 2DCh
		public ??_C@_1FE@PKGPAHFE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
; wchar_t `string'
??_C@_1FE@PKGPAHFE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@:
					; DATA XREF: __uhash_init+3Eo
					; __uhash_init+69o ...
		unicode	0, <d:\mozilla\intl\icu\source\common\uhash.c>,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 330h
		public ?__LINE__Var@?1??_uhash_init@@9@9@dd133793
?__LINE__Var@?1??_uhash_init@@9@9@dd133793 dd 0FDh ; DATA XREF:	__uhash_init+33r
					; __uhash_init+5Er
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 334h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

__uhash_internalSetResizePolicy	proc near ; CODE XREF: __uhash_init+BFp
					; _uhash_setResizePolicy_56+2Dp

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jnz	short loc_37D
		mov	eax, ds:?__LINE__Var@?1??_uhash_internalSetResizePolicy@@9@9@dd133793
		add	eax, 1
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FE@PKGPAHFE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1CI@DGNLPDEI@?$AAh?$AAa?$AAs?$AAh?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@ ; "hash != ((void *)0)"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_37D:				; CODE XREF: __uhash_internalSetResizePolicy+22j
		cmp	[ebp+arg_4], 0
		jge	short loc_3A8
		mov	eax, ds:?__LINE__Var@?1??_uhash_internalSetResizePolicy@@9@9@dd133793
		add	eax, 2
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FE@PKGPAHFE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1CO@FGBLPIGO@?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AAp?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ;	"((int32_t)policy) >= 0"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_3A8:				; CODE XREF: __uhash_internalSetResizePolicy+4Dj
		cmp	[ebp+arg_4], 3
		jl	short loc_3D3
		mov	eax, ds:?__LINE__Var@?1??_uhash_internalSetResizePolicy@@9@9@dd133793
		add	eax, 3
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FE@PKGPAHFE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1CM@DLBFLIBH@?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AAp?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AA3?$AA?$AA@ ;	"((int32_t)policy) < 3"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_3D3:				; CODE XREF: __uhash_internalSetResizePolicy+78j
		mov	eax, [ebp+arg_4]
		shl	eax, 1
		mov	ecx, [ebp+arg_0]
		fld	_RESIZE_POLICY_RATIO_TABLE[eax*4]
		fstp	dword ptr [ecx+2Ch]
		mov	eax, [ebp+arg_4]
		shl	eax, 1
		mov	ecx, [ebp+arg_0]
		fld	flt_74[eax*4]
		fstp	dword ptr [ecx+28h]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
__uhash_internalSetResizePolicy	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 40Ch
		public ??_C@_1CM@DLBFLIBH@?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AAp?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AA3?$AA?$AA@
; wchar_t `string'
??_C@_1CM@DLBFLIBH@?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AAp?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AA3?$AA?$AA@:
					; DATA XREF: __uhash_internalSetResizePolicy+8Ao
		unicode	0, <((int32_t)policy) >
		dw 3Ch
		unicode	0, < 3>,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 438h
		public ??_C@_1CO@FGBLPIGO@?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AAp?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
; wchar_t `string'
??_C@_1CO@FGBLPIGO@?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AAp?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@:
					; DATA XREF: __uhash_internalSetResizePolicy+5Fo
		unicode	0, <((int32_t)policy) >
		dw 3Eh
		unicode	0, <= 0>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 468h
		public ??_C@_1CI@DGNLPDEI@?$AAh?$AAa?$AAs?$AAh?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@
; wchar_t `string'
??_C@_1CI@DGNLPDEI@?$AAh?$AAa?$AAs?$AAh?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@:
					; DATA XREF: __uhash_internalSetResizePolicy+34o
					; __uhash_put+41o ...
		unicode	0, <hash != ((void *)0)>,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 490h
		public ?__LINE__Var@?1??_uhash_internalSetResizePolicy@@9@9@dd133793
?__LINE__Var@?1??_uhash_internalSetResizePolicy@@9@9@dd133793 dd 0BEh
					; DATA XREF: __uhash_internalSetResizePolicy+24r
					; __uhash_internalSetResizePolicy+4Fr ...
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 494h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

__uhash_allocate proc near		; CODE XREF: __uhash_init+D3p
					; __uhash_rehash+8Ep

var_E4		= byte ptr -0E4h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0
		jle	short loc_4BF
		jmp	loc_5C1
; ---------------------------------------------------------------------------

loc_4BF:				; CODE XREF: __uhash_allocate+24j
		cmp	[ebp+arg_4], 0
		jl	short loc_4CB
		cmp	[ebp+arg_4], 1Ch
		jb	short loc_4F0

loc_4CB:				; CODE XREF: __uhash_allocate+2Fj
		mov	eax, ds:?__LINE__Var@?1??_uhash_allocate@@9@9@dd133793
		add	eax, 7
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FE@PKGPAHFE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1IK@FIGHKOOP@?$AAp?$AAr?$AAi?$AAm?$AAe?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp?$AAr?$AAi?$AAm?$AAe?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5@ ; "primeIndex >= 0 && primeIndex < (sizeof"...
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_4F0:				; CODE XREF: __uhash_allocate+35j
		mov	eax, [ebp+arg_0]
		mov	cl, byte ptr [ebp+arg_4]
		mov	[eax+30h], cl
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	edx, _PRIMES[ecx*4]
		mov	[eax+1Ch], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+1Ch]
		imul	ecx, 0Ch
		push	ecx
		call	_uprv_malloc_56
		add	esp, 4
		mov	edx, [ebp+arg_0]
		mov	[edx], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax], 0
		jnz	short loc_53E
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 7
		jmp	loc_5C1
; ---------------------------------------------------------------------------

loc_53E:				; CODE XREF: __uhash_allocate+9Aj
		mov	[ebp+var_20], 0
		mov	[ebp+var_20], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+1Ch]
		imul	ecx, 0Ch
		add	ecx, [ebp+var_8]
		mov	[ebp+var_14], ecx

loc_55B:				; CODE XREF: __uhash_allocate+F3j
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+var_14]
		jnb	short loc_589
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_20]
		mov	[eax+8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_20]
		mov	[eax+4], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], 80000001h
		mov	eax, [ebp+var_8]
		add	eax, 0Ch
		mov	[ebp+var_8], eax
		jmp	short loc_55B
; ---------------------------------------------------------------------------

loc_589:				; CODE XREF: __uhash_allocate+CDj
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+18h], 0
		mov	eax, [ebp+arg_0]
		fild	dword ptr [eax+1Ch]
		mov	ecx, [ebp+arg_0]
		fmul	dword ptr [ecx+2Ch]
		call	__ftol2_sse
		mov	edx, [ebp+arg_0]
		mov	[edx+24h], eax
		mov	eax, [ebp+arg_0]
		fild	dword ptr [eax+1Ch]
		mov	ecx, [ebp+arg_0]
		fmul	dword ptr [ecx+28h]
		call	__ftol2_sse
		mov	edx, [ebp+arg_0]
		mov	[edx+20h], eax

loc_5C1:				; CODE XREF: __uhash_allocate+26j
					; __uhash_allocate+A5j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN11
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
__uhash_allocate endp

; ---------------------------------------------------------------------------
		align 4
$LN11		dd 1			; DATA XREF: __uhash_allocate+131o
		dd offset $LN10
$LN10		dd 0FFFFFFE0h, 4	; DATA XREF: .text:000005ECo
		dd offset $LN9		; "emptytok"
$LN9		db 'emptytok',0         ; DATA XREF: .text:000005F8o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 608h
		public ??_C@_1IK@FIGHKOOP@?$AAp?$AAr?$AAi?$AAm?$AAe?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp?$AAr?$AAi?$AAm?$AAe?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5@
; wchar_t `string'
??_C@_1IK@FIGHKOOP@?$AAp?$AAr?$AAi?$AAm?$AAe?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp?$AAr?$AAi?$AAm?$AAe?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5@:
					; DATA XREF: __uhash_allocate+47o
		unicode	0, <primeIndex >
		dw 3Eh
		unicode	0, <= 0	&& primeIndex >
		dw 3Ch
		unicode	0, < (sizeof(PRIMES) / sizeof(PRIMES[0]))>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 694h
		public ?__LINE__Var@?1??_uhash_allocate@@9@9@dd133793
?__LINE__Var@?1??_uhash_allocate@@9@9@dd133793 dd 0D2h
					; DATA XREF: __uhash_allocate:loc_4CBr
_data		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 698h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_openSize_56
_uhash_openSize_56 proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0

loc_6BD:				; CODE XREF: _uhash_openSize_56+43j
		cmp	[ebp+var_8], 1Bh
		jnb	short loc_6DD
		mov	eax, [ebp+var_8]
		mov	ecx, _PRIMES[eax*4]
		cmp	ecx, [ebp+arg_C]
		jge	short loc_6DD
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		jmp	short loc_6BD
; ---------------------------------------------------------------------------

loc_6DD:				; CODE XREF: _uhash_openSize_56+29j
					; _uhash_openSize_56+38j
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	__uhash_create
		add	esp, 14h
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_openSize_56 endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 710h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_init_56
_uhash_init_56	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_10]
		push	eax
		push	3
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	__uhash_init
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_init_56	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 760h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_close_56
_uhash_close_56	proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jnz	short loc_789
		jmp	loc_851
; ---------------------------------------------------------------------------

loc_789:				; CODE XREF: _uhash_close_56+22j
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax], 0
		jz	loc_83A
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+10h], 0
		jnz	short loc_7A7
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+14h], 0
		jz	short loc_823

loc_7A7:				; CODE XREF: _uhash_close_56+3Cj
		mov	[ebp+var_8], 0FFFFFFFFh

loc_7AE:				; CODE XREF: _uhash_close_56:loc_821j
		lea	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_uhash_nextElement_56
		add	esp, 8
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_823
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+10h], 0
		jz	short loc_7F4
		mov	eax, [ebp+var_14]
		cmp	dword ptr [eax+8], 0
		jz	short loc_7F4
		mov	esi, esp
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+8]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+10h]
		call	eax
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_7F4:				; CODE XREF: _uhash_close_56+6Ej
					; _uhash_close_56+77j
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+14h], 0
		jz	short loc_821
		mov	eax, [ebp+var_14]
		cmp	dword ptr [eax+4], 0
		jz	short loc_821
		mov	esi, esp
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+14h]
		call	eax
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_821:				; CODE XREF: _uhash_close_56+9Bj
					; _uhash_close_56+A4j
		jmp	short loc_7AE
; ---------------------------------------------------------------------------

loc_823:				; CODE XREF: _uhash_close_56+45j
					; _uhash_close_56+65j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		call	_uprv_free_56
		add	esp, 4
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0

loc_83A:				; CODE XREF: _uhash_close_56+2Fj
		mov	eax, [ebp+arg_0]
		movsx	ecx, byte ptr [eax+31h]
		test	ecx, ecx
		jz	short loc_851
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_free_56
		add	esp, 4

loc_851:				; CODE XREF: _uhash_close_56+24j
					; _uhash_close_56+E3j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN14
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_close_56	endp

; ---------------------------------------------------------------------------
		align 4
$LN14		dd 1			; DATA XREF: _uhash_close_56+F5o
		dd offset $LN13
$LN13		dd 0FFFFFFF8h, 4	; DATA XREF: .text:0000087Co
		dd offset $LN12
$LN12		dd 736F70h		; DATA XREF: .text:00000888o
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 890h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_setKeyHasher_56
_uhash_setKeyHasher_56 proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	[eax+4], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uhash_setKeyHasher_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 8CCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_setKeyComparator_56
_uhash_setKeyComparator_56 proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	[eax+8], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uhash_setKeyComparator_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 908h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_setValueComparator_56
_uhash_setValueComparator_56 proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	[eax+0Ch], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uhash_setValueComparator_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 944h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_setKeyDeleter_56
_uhash_setKeyDeleter_56	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+10h]
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	[eax+10h], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uhash_setKeyDeleter_56	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 980h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_setValueDeleter_56
_uhash_setValueDeleter_56 proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	[eax+14h], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uhash_setValueDeleter_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 9BCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_setResizePolicy_56
_uhash_setResizePolicy_56 proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	__uhash_internalSetResizePolicy
		add	esp, 8
		mov	eax, [ebp+arg_0]
		fild	dword ptr [eax+1Ch]
		mov	ecx, [ebp+arg_0]
		fmul	dword ptr [ecx+2Ch]
		call	__ftol2_sse
		mov	edx, [ebp+arg_0]
		mov	[edx+24h], eax
		mov	eax, [ebp+arg_0]
		fild	dword ptr [eax+1Ch]
		mov	ecx, [ebp+arg_0]
		fmul	dword ptr [ecx+28h]
		call	__ftol2_sse
		mov	edx, [ebp+arg_0]
		mov	[edx+20h], eax
		lea	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	__uhash_rehash
		add	esp, 8
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_setResizePolicy_56 endp

; ---------------------------------------------------------------------------
$LN5		dd 1			; DATA XREF: _uhash_setResizePolicy_56+77o
		dd offset $LN4
$LN4		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00000A58o
		dd offset $LN3		; "status"
$LN3		db 'status',0           ; DATA XREF: .text:00000A64o
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A70h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

__uhash_rehash	proc near		; CODE XREF: _uhash_setResizePolicy_56+6Bp
					; __uhash_put+90p ...

var_FC		= byte ptr -0FCh
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0FCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_FC]
		mov	ecx, 3Fh ; '?'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+1Ch]
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_0]
		movsx	ecx, byte ptr [eax+30h]
		mov	[ebp+var_20], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+18h]
		cmp	edx, [ecx+20h]
		jle	short loc_ACD
		mov	eax, [ebp+var_20]
		add	eax, 1
		mov	[ebp+var_20], eax
		cmp	[ebp+var_20], 1Ch
		jb	short loc_ACB
		jmp	loc_C32
; ---------------------------------------------------------------------------

loc_ACB:				; CODE XREF: __uhash_rehash+54j
		jmp	short loc_AF2
; ---------------------------------------------------------------------------

loc_ACD:				; CODE XREF: __uhash_rehash+45j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+18h]
		cmp	edx, [ecx+24h]
		jge	short loc_AED
		mov	eax, [ebp+var_20]
		sub	eax, 1
		mov	[ebp+var_20], eax
		jns	short loc_AEB
		jmp	loc_C32
; ---------------------------------------------------------------------------

loc_AEB:				; CODE XREF: __uhash_rehash+74j
		jmp	short loc_AF2
; ---------------------------------------------------------------------------

loc_AED:				; CODE XREF: __uhash_rehash+69j
		jmp	loc_C32
; ---------------------------------------------------------------------------

loc_AF2:				; CODE XREF: __uhash_rehash:loc_ACBj
					; __uhash_rehash:loc_AEBj
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_20]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	__uhash_allocate
		add	esp, 0Ch
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jle	short loc_B24
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		mov	[eax], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_14]
		mov	[eax+1Ch], ecx
		jmp	loc_C32
; ---------------------------------------------------------------------------

loc_B24:				; CODE XREF: __uhash_rehash+9Cj
		mov	eax, [ebp+var_14]
		sub	eax, 1
		mov	[ebp+var_2C], eax
		jmp	short loc_B38
; ---------------------------------------------------------------------------

loc_B2F:				; CODE XREF: __uhash_rehash:loc_C21j
		mov	eax, [ebp+var_2C]
		sub	eax, 1
		mov	[ebp+var_2C], eax

loc_B38:				; CODE XREF: __uhash_rehash+BDj
		cmp	[ebp+var_2C], 0
		jl	loc_C26
		mov	eax, [ebp+var_2C]
		imul	eax, 0Ch
		mov	ecx, [ebp+var_8]
		cmp	dword ptr [ecx+eax], 0
		jl	loc_C21
		mov	eax, [ebp+var_2C]
		imul	eax, 0Ch
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+eax]
		push	edx
		mov	eax, [ebp+var_2C]
		imul	eax, 0Ch
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+eax+8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	__uhash_find
		add	esp, 0Ch
		mov	[ebp+var_38], eax
		cmp	[ebp+var_38], 0
		jnz	short loc_BAA
		mov	eax, ds:?__LINE__Var@?1??_uhash_rehash@@9@9@dd133793
		add	eax, 1Eh
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FE@PKGPAHFE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1CC@NDGNDPFD@?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@ ; "e != ((void *)0)"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_BAA:				; CODE XREF: __uhash_rehash+113j
		mov	eax, [ebp+var_38]
		cmp	dword ptr [eax], 80000001h
		jz	short loc_BDB
		mov	ecx, ds:?__LINE__Var@?1??_uhash_rehash@@9@9@dd133793
		add	ecx, 1Fh
		mov	esi, esp
		push	ecx		; Line
		push	offset ??_C@_1FE@PKGPAHFE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1GM@NEPLMLMO@?$AAe?$AA?9?$AA?$DO?$AAh?$AAa?$AAs?$AAh?$AAc?$AAo?$AAd?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?5?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA3@	; "e->hashcode == ((int32_t) ((int32_t)	0x"...
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_BDB:				; CODE XREF: __uhash_rehash+143j
		mov	eax, [ebp+var_2C]
		imul	eax, 0Ch
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+eax+8]
		mov	eax, [ebp+var_38]
		mov	[eax+8], edx
		mov	eax, [ebp+var_2C]
		imul	eax, 0Ch
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+eax+4]
		mov	eax, [ebp+var_38]
		mov	[eax+4], edx
		mov	eax, [ebp+var_2C]
		imul	eax, 0Ch
		mov	ecx, [ebp+var_38]
		mov	edx, [ebp+var_8]
		mov	eax, [edx+eax]
		mov	[ecx], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+18h]
		add	ecx, 1
		mov	edx, [ebp+arg_0]
		mov	[edx+18h], ecx

loc_C21:				; CODE XREF: __uhash_rehash+DFj
		jmp	loc_B2F
; ---------------------------------------------------------------------------

loc_C26:				; CODE XREF: __uhash_rehash+CCj
		mov	eax, [ebp+var_8]
		push	eax
		call	_uprv_free_56
		add	esp, 4

loc_C32:				; CODE XREF: __uhash_rehash+56j
					; __uhash_rehash+76j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0FCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
__uhash_rehash	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 0C48h
		public ??_C@_1GM@NEPLMLMO@?$AAe?$AA?9?$AA?$DO?$AAh?$AAa?$AAs?$AAh?$AAc?$AAo?$AAd?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?5?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA3@
; wchar_t `string'
??_C@_1GM@NEPLMLMO@?$AAe?$AA?9?$AA?$DO?$AAh?$AAa?$AAs?$AAh?$AAc?$AAo?$AAd?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?5?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA3@:
					; DATA XREF: __uhash_rehash+156o
		unicode	0, <e->
		dw 3Eh
		unicode	0, <hashcode ==	((int32_t) ((int32_t) 0x80000000) + 1)>,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CB4h
		public ??_C@_1CC@NDGNDPFD@?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@
; wchar_t `string'
??_C@_1CC@NDGNDPFD@?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@:
					; DATA XREF: __uhash_rehash+125o
					; __uhash_put+EDo ...
		unicode	0, <e != ((void	*)0)>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 0CD8h
		public ?__LINE__Var@?1??_uhash_rehash@@9@9@dd133793
?__LINE__Var@?1??_uhash_rehash@@9@9@dd133793 dd	189h ; DATA XREF: __uhash_rehash+115r
					; __uhash_rehash+145r
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0CDCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

__uhash_find	proc near		; CODE XREF: __uhash_rehash+104p
					; _uhash_get_56+45p ...

var_108		= byte ptr -108h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_108]
		mov	ecx, 42h ; 'B'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0FFFFFFFFh
		mov	[ebp+var_2C], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_44], ecx
		mov	eax, [ebp+arg_8]
		and	eax, 7FFFFFFFh
		mov	[ebp+arg_8], eax
		mov	eax, [ebp+arg_8]
		xor	eax, 4000000h
		mov	ecx, [ebp+arg_0]
		cdq
		idiv	dword ptr [ecx+1Ch]
		mov	[ebp+var_14], edx
		mov	edx, [ebp+var_14]
		mov	[ebp+var_20], edx

loc_D33:				; CODE XREF: __uhash_find+FDj
		mov	eax, [ebp+var_14]
		imul	eax, 0Ch
		mov	ecx, [ebp+var_44]
		mov	edx, [ecx+eax]
		mov	[ebp+var_38], edx
		mov	eax, [ebp+var_38]
		cmp	eax, [ebp+arg_8]
		jnz	short loc_D87
		mov	eax, [ebp+var_14]
		imul	eax, 0Ch
		mov	esi, esp
		mov	ecx, [ebp+var_44]
		mov	edx, [ecx+eax+8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		call	edx
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		movsx	eax, al
		test	eax, eax
		jz	short loc_D85
		mov	eax, [ebp+var_14]
		imul	eax, 0Ch
		add	eax, [ebp+var_44]
		jmp	loc_E2D
; ---------------------------------------------------------------------------

loc_D85:				; CODE XREF: __uhash_find+99j
		jmp	short loc_DA8
; ---------------------------------------------------------------------------

loc_D87:				; CODE XREF: __uhash_find+6Cj
		cmp	[ebp+var_38], 0
		jl	short loc_D8F
		jmp	short loc_DA8
; ---------------------------------------------------------------------------

loc_D8F:				; CODE XREF: __uhash_find+AFj
		cmp	[ebp+var_38], 80000001h
		jnz	short loc_D9C
		jmp	short loc_DDF
; ---------------------------------------------------------------------------
		jmp	short loc_DA8
; ---------------------------------------------------------------------------

loc_D9C:				; CODE XREF: __uhash_find+BAj
		cmp	[ebp+var_8], 0
		jge	short loc_DA8
		mov	eax, [ebp+var_14]
		mov	[ebp+var_8], eax

loc_DA8:				; CODE XREF: __uhash_find:loc_D85j
					; __uhash_find+B1j ...
		cmp	[ebp+var_2C], 0
		jnz	short loc_DC3
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+1Ch]
		sub	ecx, 1
		mov	eax, [ebp+arg_8]
		cdq
		idiv	ecx
		add	edx, 1
		mov	[ebp+var_2C], edx

loc_DC3:				; CODE XREF: __uhash_find+D0j
		mov	eax, [ebp+var_14]
		add	eax, [ebp+var_2C]
		mov	ecx, [ebp+arg_0]
		cdq
		idiv	dword ptr [ecx+1Ch]
		mov	[ebp+var_14], edx
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_20]
		jnz	loc_D33

loc_DDF:				; CODE XREF: __uhash_find+BCj
		cmp	[ebp+var_8], 0
		jl	short loc_DED
		mov	eax, [ebp+var_8]
		mov	[ebp+var_14], eax
		jmp	short loc_E24
; ---------------------------------------------------------------------------

loc_DED:				; CODE XREF: __uhash_find+107j
		cmp	[ebp+var_38], 80000001h
		jz	short loc_E24
		xor	eax, eax
		jnz	short loc_E20
		mov	ecx, ds:?__LINE__Var@?1??_uhash_find@@9@9@dd133793
		add	ecx, 2Dh ; '-'
		mov	esi, esp
		push	ecx		; Line
		push	offset ??_C@_1FE@PKGPAHFE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_13COJANIEC@?$AA0?$AA?$AA@ ; Message
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_E20:				; CODE XREF: __uhash_find+11Cj
		xor	eax, eax
		jmp	short loc_E2D
; ---------------------------------------------------------------------------

loc_E24:				; CODE XREF: __uhash_find+10Fj
					; __uhash_find+118j
		mov	eax, [ebp+var_14]
		imul	eax, 0Ch
		add	eax, [ebp+var_44]

loc_E2D:				; CODE XREF: __uhash_find+A4j
					; __uhash_find+146j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 108h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
__uhash_find	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E44h
		public ??_C@_13COJANIEC@?$AA0?$AA?$AA@
; wchar_t `string'
??_C@_13COJANIEC@?$AA0?$AA?$AA@	dd offset dword_30 ; DATA XREF:	__uhash_find+12Fo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 0E48h
		public ?__LINE__Var@?1??_uhash_find@@9@9@dd133793
?__LINE__Var@?1??_uhash_find@@9@9@dd133793 dd 14Ch ; DATA XREF:	__uhash_find+11Er
_data		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0E4Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_count_56
_uhash_count_56	proc near		; CODE XREF: _uhash_equals_56+69p
					; _uhash_equals_56+78p

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+18h]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uhash_count_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0E78h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_get_56
_uhash_get_56	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	__uhash_find
		add	esp, 0Ch
		mov	eax, [eax+4]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_get_56	endp

; ---------------------------------------------------------------------------
		align 10h
$LN5_0		dd 1			; DATA XREF: _uhash_get_56+54o
		dd offset $LN4_0
$LN4_0		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00000EF4o
		dd offset $LN3_0	; "keyholder"
$LN3_0		db 'keyholder',0        ; DATA XREF: .text:00000F00o
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0F10h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_iget_56
_uhash_iget_56	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	__uhash_find
		add	esp, 0Ch
		mov	eax, [eax+4]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_1
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_iget_56	endp

; ---------------------------------------------------------------------------
		align 4
$LN5_1		dd 1			; DATA XREF: _uhash_iget_56+54o
		dd offset $LN4_1
$LN4_1		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00000F8Co
		dd offset $LN3_1	; "keyholder"
$LN3_1		db 'keyholder',0        ; DATA XREF: .text:00000F98o
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0FA8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_geti_56
_uhash_geti_56	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	__uhash_find
		add	esp, 0Ch
		mov	eax, [eax+4]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_2
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_geti_56	endp

; ---------------------------------------------------------------------------
		align 10h
$LN5_2		dd 1			; DATA XREF: _uhash_geti_56+54o
		dd offset $LN4_2
$LN4_2		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00001024o
		dd offset $LN3_2	; "keyholder"
$LN3_2		db 'keyholder',0        ; DATA XREF: .text:00001030o
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1040h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_igeti_56
_uhash_igeti_56	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	__uhash_find
		add	esp, 0Ch
		mov	eax, [eax+4]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_3
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_igeti_56	endp

; ---------------------------------------------------------------------------
		align 4
$LN5_3		dd 1			; DATA XREF: _uhash_igeti_56+54o
		dd offset $LN4_3
$LN4_3		dd 0FFFFFFF8h, 4	; DATA XREF: .text:000010BCo
		dd offset $LN3_3	; "keyholder"
$LN3_3		db 'keyholder',0        ; DATA XREF: .text:000010C8o
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10D8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_put_56
_uhash_put_56	proc near

var_E4		= byte ptr -0E4h
var_E0		= dword	ptr -0E0h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_C]
		push	eax
		push	3
		mov	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	__uhash_put
		add	esp, 14h
		mov	[ebp+var_E0], eax
		mov	eax, [ebp+var_E0]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN6
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_put_56	endp

; ---------------------------------------------------------------------------
		align 10h
$LN6		dd 2			; DATA XREF: _uhash_put_56+54o
		dd offset $LN5_4
$LN5_4		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00001154o
		dd offset $LN3_4	; "keyholder"
		dd 0FFFFFFECh, 4
		dd offset $LN4_4	; "valueholder"
$LN4_4		db 'valueholder',0      ; DATA XREF: .text:0000116Co
$LN3_4		db 'keyholder',0        ; DATA XREF: .text:00001160o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1188h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

__uhash_put	proc near		; CODE XREF: _uhash_put_56+3Cp
					; _uhash_iput_56+3Cp ...

var_E4		= byte ptr -0E4h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_10]
		cmp	dword ptr [eax], 0
		jle	short loc_11B3
		jmp	$err$10679
; ---------------------------------------------------------------------------

loc_11B3:				; CODE XREF: __uhash_put+24j
		cmp	[ebp+arg_0], 0
		jnz	short loc_11DE
		mov	eax, ds:?__LINE__Var@?1??_uhash_put@@9@9@dd133793
		add	eax, 0Eh
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FE@PKGPAHFE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1CI@DGNLPDEI@?$AAh?$AAa?$AAs?$AAh?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@ ; "hash != ((void *)0)"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_11DE:				; CODE XREF: __uhash_put+2Fj
		movsx	eax, [ebp+arg_C]
		and	eax, 2
		jz	short loc_1202
		cmp	[ebp+arg_8], 0
		jnz	short loc_1202
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	__uhash_remove
		add	esp, 8
		jmp	loc_1350
; ---------------------------------------------------------------------------

loc_1202:				; CODE XREF: __uhash_put+5Dj
					; __uhash_put+63j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+18h]
		cmp	edx, [ecx+20h]
		jle	short loc_122D
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	__uhash_rehash
		add	esp, 8
		mov	eax, [ebp+arg_10]
		cmp	dword ptr [eax], 0
		jle	short loc_122D
		jmp	$err$10679
; ---------------------------------------------------------------------------

loc_122D:				; CODE XREF: __uhash_put+86j
					; __uhash_put+9Ej
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	__uhash_find
		add	esp, 0Ch
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	short loc_128A
		mov	eax, ds:?__LINE__Var@?1??_uhash_put@@9@9@dd133793
		add	eax, 1Fh
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FE@PKGPAHFE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1CC@NDGNDPFD@?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@ ; "e != ((void *)0)"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_128A:				; CODE XREF: __uhash_put+DBj
		mov	eax, [ebp+var_14]
		cmp	dword ptr [eax], 0
		jge	short loc_12C9
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+18h]
		add	ecx, 1
		mov	edx, [ebp+arg_0]
		mov	[edx+18h], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+18h]
		cmp	edx, [ecx+1Ch]
		jnz	short loc_12C9
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+18h]
		sub	ecx, 1
		mov	edx, [ebp+arg_0]
		mov	[edx+18h], ecx
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 7
		jmp	short $err$10679
; ---------------------------------------------------------------------------

loc_12C9:				; CODE XREF: __uhash_put+108j
					; __uhash_put+125j
		movzx	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+var_8]
		and	eax, 7FFFFFFFh
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	__uhash_setElement
		add	esp, 18h
		jmp	short loc_1350
; ---------------------------------------------------------------------------

$err$10679:				; CODE XREF: __uhash_put+26j
					; __uhash_put+A0j ...
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+10h], 0
		jz	short loc_1318
		cmp	[ebp+arg_4], 0
		jz	short loc_1318
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+10h]
		call	edx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1318:				; CODE XREF: __uhash_put+170j
					; __uhash_put+176j
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+14h], 0
		jz	short loc_133F
		cmp	[ebp+arg_8], 0
		jz	short loc_133F
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+14h]
		call	edx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_133F:				; CODE XREF: __uhash_put+197j
					; __uhash_put+19Dj
		mov	[ebp+var_20], 0
		mov	[ebp+var_20], 0
		mov	eax, [ebp+var_20]

loc_1350:				; CODE XREF: __uhash_put+75j
					; __uhash_put+167j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN15
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
__uhash_put	endp

; ---------------------------------------------------------------------------
		align 4
$LN15		dd 1			; DATA XREF: __uhash_put+1CCo
		dd offset $LN14_0
$LN14_0		dd 0FFFFFFE0h, 4	; DATA XREF: .text:0000137Co
		dd offset $LN13_0	; "emptytok"
$LN13_0		db 'emptytok',0         ; DATA XREF: .text:00001388o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 1398h
		public ?__LINE__Var@?1??_uhash_put@@9@9@dd133793
?__LINE__Var@?1??_uhash_put@@9@9@dd133793 dd 1D1h ; DATA XREF: __uhash_put+31r
					; __uhash_put+DDr
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 139Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

__uhash_setElement proc	near		; CODE XREF: __uhash_put+15Fp
					; __uhash_internalRemoveElement+80p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= byte ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+4]
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+10h], 0
		jz	short loc_13FB
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax+8], 0
		jz	short loc_13FB
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+8]
		cmp	ecx, [ebp+arg_C]
		jz	short loc_13FB
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+8]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+10h]
		call	eax
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_13FB:				; CODE XREF: __uhash_setElement+2Ej
					; __uhash_setElement+37j ...
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+14h], 0
		jz	short loc_1431
		cmp	[ebp+var_8], 0
		jz	short loc_142A
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_10]
		jz	short loc_142A
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+14h]
		call	edx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_142A:				; CODE XREF: __uhash_setElement+6Cj
					; __uhash_setElement+74j
		mov	[ebp+var_8], 0

loc_1431:				; CODE XREF: __uhash_setElement+66j
		movsx	eax, [ebp+arg_14]
		and	eax, 1
		jz	short loc_1445
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_C]
		mov	[eax+8], ecx
		jmp	short loc_144E
; ---------------------------------------------------------------------------

loc_1445:				; CODE XREF: __uhash_setElement+9Cj
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_C]
		mov	[eax+8], ecx

loc_144E:				; CODE XREF: __uhash_setElement+A7j
		movsx	eax, [ebp+arg_14]
		and	eax, 2
		jz	short loc_1462
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_10]
		mov	[eax+4], ecx
		jmp	short loc_146B
; ---------------------------------------------------------------------------

loc_1462:				; CODE XREF: __uhash_setElement+B9j
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_10]
		mov	[eax+4], ecx

loc_146B:				; CODE XREF: __uhash_setElement+C4j
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_8]
		mov	[eax], ecx
		mov	eax, [ebp+var_8]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN12_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
__uhash_setElement endp

; ---------------------------------------------------------------------------
		align 4
$LN12_0		dd 1			; DATA XREF: __uhash_setElement+DEo
		dd offset $LN11_0
$LN11_0		dd 0FFFFFFF8h, 4	; DATA XREF: .text:000014A0o
		dd offset $LN10_0	; "oldValue"
$LN10_0		db 'oldValue',0         ; DATA XREF: .text:000014ACo
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 14BCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

__uhash_remove	proc near		; CODE XREF: __uhash_put+6Dp
					; _uhash_remove_56+2Cp	...

var_E4		= byte ptr -0E4h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	__uhash_find
		add	esp, 0Ch
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	short loc_1531
		mov	eax, ds:?__LINE__Var@?1??_uhash_remove@@9@9@dd133793
		add	eax, 0Ah
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FE@PKGPAHFE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1CC@NDGNDPFD@?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@ ; "e != ((void *)0)"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1531:				; CODE XREF: __uhash_remove+4Ej
		mov	[ebp+var_8], 0
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_14]
		cmp	dword ptr [eax], 0
		jl	short loc_157F
		mov	eax, [ebp+var_14]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	__uhash_internalRemoveElement
		add	esp, 8
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+18h]
		cmp	edx, [ecx+24h]
		jge	short loc_157F
		mov	[ebp+var_20], 0
		lea	eax, [ebp+var_20]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	__uhash_rehash
		add	esp, 8

loc_157F:				; CODE XREF: __uhash_remove+89j
					; __uhash_remove+AAj
		mov	eax, [ebp+var_8]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN9_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
__uhash_remove	endp

; ---------------------------------------------------------------------------
		align 4
$LN9_0		dd 2			; DATA XREF: __uhash_remove+CAo
		dd offset $LN8
$LN8		dd 0FFFFFFF8h, 4	; DATA XREF: .text:000015ACo
		dd offset $LN6_0	; "result"
		dd 0FFFFFFE0h, 4
		dd offset $LN7		; "status"
$LN7		db 'status',0           ; DATA XREF: .text:000015C4o
$LN6_0		db 'result',0           ; DATA XREF: .text:000015B8o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 15D8h
		public ?__LINE__Var@?1??_uhash_remove@@9@9@dd133793
?__LINE__Var@?1??_uhash_remove@@9@9@dd133793 dd	1B5h ; DATA XREF: __uhash_remove+50r
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 15DCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

__uhash_internalRemoveElement proc near	; CODE XREF: __uhash_remove+93p
					; _uhash_removeElement_56+8Ap

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jge	short loc_1628
		mov	ecx, ds:?__LINE__Var@?1??_uhash_internalRemoveElement@@9@9@dd133793
		add	ecx, 2
		mov	esi, esp
		push	ecx		; Line
		push	offset ??_C@_1FE@PKGPAHFE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1CK@PHNIFBIN@?$AA?$CB?$AA?$CI?$AA?$CI?$AAe?$AA?9?$AA?$DO?$AAh?$AAa?$AAs?$AAh?$AAc?$AAo?$AAd?$AAe?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AA0?$AA?$CJ?$AA?$AA@	; "!((e->hashcode) < 0)"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1628:				; CODE XREF: __uhash_internalRemoveElement+24j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+18h]
		sub	ecx, 1
		mov	edx, [ebp+arg_0]
		mov	[edx+18h], ecx
		mov	[ebp+var_8], 0
		mov	[ebp+var_8], 0
		push	0
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+var_8]
		push	ecx
		push	80000000h
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	__uhash_setElement
		add	esp, 18h
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN6_1
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
__uhash_internalRemoveElement endp

; ---------------------------------------------------------------------------
		align 4
$LN6_1		dd 1			; DATA XREF: __uhash_internalRemoveElement+8Co
		dd offset $LN5_5
$LN5_5		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00001690o
		dd offset $LN4_5	; "empty"
$LN4_5		db 'empty',0            ; DATA XREF: .text:0000169Co
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 16A8h
		public ??_C@_1CK@PHNIFBIN@?$AA?$CB?$AA?$CI?$AA?$CI?$AAe?$AA?9?$AA?$DO?$AAh?$AAa?$AAs?$AAh?$AAc?$AAo?$AAd?$AAe?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
; wchar_t `string'
??_C@_1CK@PHNIFBIN@?$AA?$CB?$AA?$CI?$AA?$CI?$AAe?$AA?9?$AA?$DO?$AAh?$AAa?$AAs?$AAh?$AAc?$AAo?$AAd?$AAe?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AA0?$AA?$CJ?$AA?$AA@:
					; DATA XREF: __uhash_internalRemoveElement+37o
		unicode	0, <!((e->
		dw 3Eh
		unicode	0, <hashcode) >
		dw 3Ch
		unicode	0, < 0)>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 16D4h
		public ?__LINE__Var@?1??_uhash_internalRemoveElement@@9@9@dd133793
?__LINE__Var@?1??_uhash_internalRemoveElement@@9@9@dd133793 dd 0B5h
					; DATA XREF: __uhash_internalRemoveElement+26r
_data		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 16D8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_iput_56
_uhash_iput_56	proc near

var_E4		= byte ptr -0E4h
var_E0		= dword	ptr -0E0h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_C]
		push	eax
		push	2
		mov	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	__uhash_put
		add	esp, 14h
		mov	[ebp+var_E0], eax
		mov	eax, [ebp+var_E0]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN6_2
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_iput_56	endp

; ---------------------------------------------------------------------------
		align 10h
$LN6_2		dd 2			; DATA XREF: _uhash_iput_56+54o
		dd offset $LN5_6
$LN5_6		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00001754o
		dd offset $LN3_5	; "keyholder"
		dd 0FFFFFFECh, 4
		dd offset $LN4_6	; "valueholder"
$LN4_6		db 'valueholder',0      ; DATA XREF: .text:0000176Co
$LN3_5		db 'keyholder',0        ; DATA XREF: .text:00001760o
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1788h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_puti_56
_uhash_puti_56	proc near

var_E4		= byte ptr -0E4h
var_E0		= dword	ptr -0E0h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_C]
		push	eax
		push	1
		mov	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	__uhash_put
		add	esp, 14h
		mov	[ebp+var_E0], eax
		mov	eax, [ebp+var_E0]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN6_3
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_puti_56	endp

; ---------------------------------------------------------------------------
		align 10h
$LN6_3		dd 2			; DATA XREF: _uhash_puti_56+54o
		dd offset $LN5_7
$LN5_7		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00001804o
		dd offset $LN3_6	; "keyholder"
		dd 0FFFFFFECh, 4
		dd offset $LN4_7	; "valueholder"
$LN4_7		db 'valueholder',0      ; DATA XREF: .text:0000181Co
$LN3_6		db 'keyholder',0        ; DATA XREF: .text:00001810o
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1838h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_iputi_56
_uhash_iputi_56	proc near

var_E4		= byte ptr -0E4h
var_E0		= dword	ptr -0E0h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_C]
		push	eax
		push	0
		mov	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	__uhash_put
		add	esp, 14h
		mov	[ebp+var_E0], eax
		mov	eax, [ebp+var_E0]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN6_4
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_iputi_56	endp

; ---------------------------------------------------------------------------
		align 10h
$LN6_4		dd 2			; DATA XREF: _uhash_iputi_56+54o
		dd offset $LN5_8
$LN5_8		dd 0FFFFFFF8h, 4	; DATA XREF: .text:000018B4o
		dd offset $LN3_7	; "keyholder"
		dd 0FFFFFFECh, 4
		dd offset $LN4_8	; "valueholder"
$LN4_8		db 'valueholder',0      ; DATA XREF: .text:000018CCo
$LN3_7		db 'keyholder',0        ; DATA XREF: .text:000018C0o
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 18E8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_remove_56
_uhash_remove_56 proc near

var_D8		= byte ptr -0D8h
var_D4		= dword	ptr -0D4h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	__uhash_remove
		add	esp, 8
		mov	[ebp+var_D4], eax
		mov	eax, [ebp+var_D4]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_9
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_remove_56 endp

; ---------------------------------------------------------------------------
		align 10h
$LN5_9		dd 1			; DATA XREF: _uhash_remove_56+44o
		dd offset $LN4_9
$LN4_9		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00001954o
		dd offset $LN3_8	; "keyholder"
$LN3_8		db 'keyholder',0        ; DATA XREF: .text:00001960o
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1970h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_iremove_56
_uhash_iremove_56 proc near

var_D8		= byte ptr -0D8h
var_D4		= dword	ptr -0D4h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	__uhash_remove
		add	esp, 8
		mov	[ebp+var_D4], eax
		mov	eax, [ebp+var_D4]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_10
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_iremove_56 endp

; ---------------------------------------------------------------------------
		align 4
$LN5_10		dd 1			; DATA XREF: _uhash_iremove_56+44o
		dd offset $LN4_10
$LN4_10		dd 0FFFFFFF8h, 4	; DATA XREF: .text:000019DCo
		dd offset $LN3_9	; "keyholder"
$LN3_9		db 'keyholder',0        ; DATA XREF: .text:000019E8o
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 19F8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_removei_56
_uhash_removei_56 proc near

var_D8		= byte ptr -0D8h
var_D4		= dword	ptr -0D4h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	__uhash_remove
		add	esp, 8
		mov	[ebp+var_D4], eax
		mov	eax, [ebp+var_D4]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_11
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_removei_56 endp

; ---------------------------------------------------------------------------
		align 10h
$LN5_11		dd 1			; DATA XREF: _uhash_removei_56+44o
		dd offset $LN4_11
$LN4_11		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00001A64o
		dd offset $LN3_10	; "keyholder"
$LN3_10		db 'keyholder',0        ; DATA XREF: .text:00001A70o
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1A80h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_iremovei_56
_uhash_iremovei_56 proc	near

var_D8		= byte ptr -0D8h
var_D4		= dword	ptr -0D4h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	__uhash_remove
		add	esp, 8
		mov	[ebp+var_D4], eax
		mov	eax, [ebp+var_D4]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_12
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_iremovei_56 endp

; ---------------------------------------------------------------------------
		align 4
$LN5_12		dd 1			; DATA XREF: _uhash_iremovei_56+44o
		dd offset $LN4_12
$LN4_12		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00001AECo
		dd offset $LN3_11	; "keyholder"
$LN3_11		db 'keyholder',0        ; DATA XREF: .text:00001AF8o
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1B08h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_removeAll_56
_uhash_removeAll_56 proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0FFFFFFFFh
		cmp	[ebp+arg_0], 0
		jnz	short loc_1B58
		mov	eax, ds:?__LINE__Var@?1??uhash_removeAll_56@@9@9 ; `uhash_removeAll_56'::`2'::__LINE__Var
		add	eax, 3
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FE@PKGPAHFE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1CI@DGNLPDEI@?$AAh?$AAa?$AAs?$AAh?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@ ; "hash != ((void *)0)"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1B58:				; CODE XREF: _uhash_removeAll_56+29j
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+18h], 0
		jz	short loc_1B8C

loc_1B61:				; CODE XREF: _uhash_removeAll_56+82j
		lea	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_uhash_nextElement_56
		add	esp, 8
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_1B8C
		mov	eax, [ebp+var_14]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_uhash_removeElement_56
		add	esp, 8
		jmp	short loc_1B61
; ---------------------------------------------------------------------------

loc_1B8C:				; CODE XREF: _uhash_removeAll_56+57j
					; _uhash_removeAll_56+70j
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+18h], 0
		jz	short loc_1BBB
		mov	ecx, ds:?__LINE__Var@?1??uhash_removeAll_56@@9@9 ; `uhash_removeAll_56'::`2'::__LINE__Var
		add	ecx, 9
		mov	esi, esp
		push	ecx		; Line
		push	offset ??_C@_1FE@PKGPAHFE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1CC@MOEELEGO@?$AAh?$AAa?$AAs?$AAh?$AA?9?$AA?$DO?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@	; "hash->count == 0"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1BBB:				; CODE XREF: _uhash_removeAll_56+8Bj
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN10_1
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_removeAll_56 endp

; ---------------------------------------------------------------------------
$LN10_1		dd 1			; DATA XREF: _uhash_removeAll_56+B7o
		dd offset $LN9_1
$LN9_1		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00001BE4o
		dd offset $LN8_0
$LN8_0		dd 736F70h		; DATA XREF: .text:00001BF0o
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1BF8h
		public ??_C@_1CC@MOEELEGO@?$AAh?$AAa?$AAs?$AAh?$AA?9?$AA?$DO?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
; wchar_t `string'
??_C@_1CC@MOEELEGO@?$AAh?$AAa?$AAs?$AAh?$AA?9?$AA?$DO?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@:
					; DATA XREF: _uhash_removeAll_56+9Eo
		unicode	0, <hash->
		dw 3Eh
		unicode	0, <count == 0>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 1C1Ch
		public ?__LINE__Var@?1??uhash_removeAll_56@@9@9
; `uhash_removeAll_56'::`2'::__LINE__Var
?__LINE__Var@?1??uhash_removeAll_56@@9@9 dd 2F6h ; DATA	XREF: _uhash_removeAll_56+2Br
					; _uhash_removeAll_56+8Dr
_data		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1C20h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_find_56
_uhash_find_56	proc near

var_DC		= dword	ptr -0DCh
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0DCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_DC]
		mov	ecx, 37h ; '7'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	__uhash_find
		add	esp, 0Ch
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_14]
		cmp	dword ptr [eax], 0
		jge	short loc_1C84
		mov	[ebp+var_DC], 0
		jmp	short loc_1C8D
; ---------------------------------------------------------------------------

loc_1C84:				; CODE XREF: _uhash_find_56+56j
		mov	ecx, [ebp+var_14]
		mov	[ebp+var_DC], ecx

loc_1C8D:				; CODE XREF: _uhash_find_56+62j
		mov	eax, [ebp+var_DC]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0DCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_find_56	endp

; ---------------------------------------------------------------------------
$LN7_0		dd 1			; DATA XREF: _uhash_find_56+77o
		dd offset $LN6_5
$LN6_5		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00001CBCo
		dd offset $LN5_13	; "keyholder"
$LN5_13		db 'keyholder',0        ; DATA XREF: .text:00001CC8o
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1CD8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_nextElement_56
_uhash_nextElement_56 proc near		; CODE XREF: _uhash_close_56+56p
					; _uhash_removeAll_56+61p ...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jnz	short loc_1D21
		mov	eax, ds:?__LINE__Var@?1??uhash_nextElement_56@@9@9 ; `uhash_nextElement_56'::`2'::__LINE__Var
		add	eax, 5
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FE@PKGPAHFE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1CI@DGNLPDEI@?$AAh?$AAa?$AAs?$AAh?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@ ; "hash != ((void *)0)"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1D21:				; CODE XREF: _uhash_nextElement_56+22j
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		add	ecx, 1
		mov	[ebp+var_8], ecx
		jmp	short loc_1D37
; ---------------------------------------------------------------------------

loc_1D2E:				; CODE XREF: _uhash_nextElement_56:loc_1D68j
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax

loc_1D37:				; CODE XREF: _uhash_nextElement_56+54j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		cmp	ecx, [eax+1Ch]
		jge	short loc_1D6A
		mov	eax, [ebp+var_8]
		imul	eax, 0Ch
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		cmp	dword ptr [eax+edx], 0
		jl	short loc_1D68
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		mov	[eax], ecx
		mov	eax, [ebp+var_8]
		imul	eax, 0Ch
		mov	ecx, [ebp+arg_0]
		add	eax, [ecx]
		jmp	short loc_1D6C
; ---------------------------------------------------------------------------

loc_1D68:				; CODE XREF: _uhash_nextElement_56+79j
		jmp	short loc_1D2E
; ---------------------------------------------------------------------------

loc_1D6A:				; CODE XREF: _uhash_nextElement_56+68j
		xor	eax, eax

loc_1D6C:				; CODE XREF: _uhash_nextElement_56+8Ej
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_nextElement_56 endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 1D80h
		public ?__LINE__Var@?1??uhash_nextElement_56@@9@9
; `uhash_nextElement_56'::`2'::__LINE__Var
?__LINE__Var@?1??uhash_nextElement_56@@9@9 dd 30Ch ; DATA XREF:	_uhash_nextElement_56+24r
_data		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1D84h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_removeElement_56
_uhash_removeElement_56	proc near	; CODE XREF: _uhash_removeAll_56+7Ap

var_D8		= byte ptr -0D8h
var_D4		= dword	ptr -0D4h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jnz	short loc_1DCD
		mov	eax, ds:?__LINE__Var@?1??uhash_removeElement_56@@9@9 ; `uhash_removeElement_56'::`2'::__LINE__Var
		add	eax, 1
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FE@PKGPAHFE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1CI@DGNLPDEI@?$AAh?$AAa?$AAs?$AAh?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@ ; "hash != ((void *)0)"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1DCD:				; CODE XREF: _uhash_removeElement_56+22j
		cmp	[ebp+arg_4], 0
		jnz	short loc_1DF8
		mov	eax, ds:?__LINE__Var@?1??uhash_removeElement_56@@9@9 ; `uhash_removeElement_56'::`2'::__LINE__Var
		add	eax, 2
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FE@PKGPAHFE@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1CC@NDGNDPFD@?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@ ; "e != ((void *)0)"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1DF8:				; CODE XREF: _uhash_removeElement_56+4Dj
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jl	short loc_1E24
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	__uhash_internalRemoveElement
		add	esp, 8
		mov	[ebp+var_D4], eax
		mov	eax, [ebp+var_D4]
		jmp	short loc_1E26
; ---------------------------------------------------------------------------

loc_1E24:				; CODE XREF: _uhash_removeElement_56+7Aj
		xor	eax, eax

loc_1E26:				; CODE XREF: _uhash_removeElement_56+9Ej
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_removeElement_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 1E3Ch
		public ?__LINE__Var@?1??uhash_removeElement_56@@9@9
; `uhash_removeElement_56'::`2'::__LINE__Var
?__LINE__Var@?1??uhash_removeElement_56@@9@9 dd	31Eh
					; DATA XREF: _uhash_removeElement_56+24r
					; _uhash_removeElement_56+4Fr
_data		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1E40h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_hashUChars_56
_uhash_hashUChars_56 proc near

var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jnz	short loc_1E76
		mov	[ebp+var_D0], 0
		jmp	short loc_1E95
; ---------------------------------------------------------------------------

loc_1E76:				; CODE XREF: _uhash_hashUChars_56+28j
		mov	eax, [ebp+var_8]
		push	eax
		call	_u_strlen_56
		add	esp, 4
		push	eax
		mov	ecx, [ebp+var_8]
		push	ecx
		call	_ustr_hashUCharsN_56
		add	esp, 8
		mov	[ebp+var_D0], eax

loc_1E95:				; CODE XREF: _uhash_hashUChars_56+34j
		mov	eax, [ebp+var_D0]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_hashUChars_56 endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1EB0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_hashChars_56
_uhash_hashChars_56 proc near

var_D0		= dword	ptr -0D0h
Str		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+Str], eax
		cmp	[ebp+Str], 0
		jnz	short loc_1EE6
		mov	[ebp+var_D0], 0
		jmp	short loc_1F05
; ---------------------------------------------------------------------------

loc_1EE6:				; CODE XREF: _uhash_hashChars_56+28j
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		push	eax
		mov	ecx, [ebp+Str]
		push	ecx
		call	_ustr_hashCharsN_56
		add	esp, 8
		mov	[ebp+var_D0], eax

loc_1F05:				; CODE XREF: _uhash_hashChars_56+34j
		mov	eax, [ebp+var_D0]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_hashChars_56 endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1F20h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_hashIChars_56
_uhash_hashIChars_56 proc near

var_D0		= dword	ptr -0D0h
Str		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+Str], eax
		cmp	[ebp+Str], 0
		jnz	short loc_1F56
		mov	[ebp+var_D0], 0
		jmp	short loc_1F75
; ---------------------------------------------------------------------------

loc_1F56:				; CODE XREF: _uhash_hashIChars_56+28j
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		push	eax
		mov	ecx, [ebp+Str]
		push	ecx
		call	_ustr_hashICharsN_56
		add	esp, 8
		mov	[ebp+var_D0], eax

loc_1F75:				; CODE XREF: _uhash_hashIChars_56+34j
		mov	eax, [ebp+var_D0]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_hashIChars_56 endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1F90h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_equals_56
_uhash_equals_56 proc near

var_12C		= byte ptr -12Ch
var_68		= dword	ptr -68h
var_5C		= dword	ptr -5Ch
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 12Ch
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_12C]
		mov	ecx, 4Bh ; 'K'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+arg_4]
		jnz	short loc_1FBD
		mov	al, 1
		jmp	loc_20CF
; ---------------------------------------------------------------------------

loc_1FBD:				; CODE XREF: _uhash_equals_56+24j
		cmp	[ebp+arg_0], 0
		jz	short loc_1FEE
		cmp	[ebp+arg_4], 0
		jz	short loc_1FEE
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	edx, [eax+8]
		cmp	edx, [ecx+8]
		jnz	short loc_1FEE
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	edx, [eax+0Ch]
		cmp	edx, [ecx+0Ch]
		jnz	short loc_1FEE
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_1FF5

loc_1FEE:				; CODE XREF: _uhash_equals_56+31j
					; _uhash_equals_56+37j	...
		xor	al, al
		jmp	loc_20CF
; ---------------------------------------------------------------------------

loc_1FF5:				; CODE XREF: _uhash_equals_56+5Cj
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uhash_count_56
		add	esp, 4
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_4]
		push	eax
		call	_uhash_count_56
		add	esp, 4
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+var_14]
		jz	short loc_2022
		xor	al, al
		jmp	loc_20CF
; ---------------------------------------------------------------------------

loc_2022:				; CODE XREF: _uhash_equals_56+89j
		mov	[ebp+var_20], 0FFFFFFFFh
		mov	[ebp+var_2C], 0
		jmp	short loc_203B
; ---------------------------------------------------------------------------

loc_2032:				; CODE XREF: _uhash_equals_56:loc_20C8j
		mov	eax, [ebp+var_2C]
		add	eax, 1
		mov	[ebp+var_2C], eax

loc_203B:				; CODE XREF: _uhash_equals_56+A0j
		mov	eax, [ebp+var_2C]
		cmp	eax, [ebp+var_8]
		jge	loc_20CD
		lea	eax, [ebp+var_20]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_uhash_nextElement_56
		add	esp, 8
		mov	[ebp+var_38], eax
		mov	eax, [ebp+var_38]
		mov	ecx, [eax+8]
		mov	[ebp+var_44], ecx
		mov	eax, [ebp+var_38]
		mov	ecx, [eax+4]
		mov	[ebp+var_50], ecx
		mov	esi, esp
		mov	eax, [ebp+var_44]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax
		mov	eax, [ebp+var_44]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		call	__uhash_find
		add	esp, 0Ch
		mov	[ebp+var_5C], eax
		mov	eax, [ebp+var_5C]
		mov	ecx, [eax+4]
		mov	[ebp+var_68], ecx
		mov	esi, esp
		mov	eax, [ebp+var_68]
		push	eax
		mov	ecx, [ebp+var_50]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+0Ch]
		call	eax
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		movsx	ecx, al
		test	ecx, ecx
		jnz	short loc_20C8
		xor	al, al
		jmp	short loc_20CF
; ---------------------------------------------------------------------------

loc_20C8:				; CODE XREF: _uhash_equals_56+132j
		jmp	loc_2032
; ---------------------------------------------------------------------------

loc_20CD:				; CODE XREF: _uhash_equals_56+B1j
		mov	al, 1

loc_20CF:				; CODE XREF: _uhash_equals_56+28j
					; _uhash_equals_56+60j	...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN16
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 12Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_equals_56 endp

; ---------------------------------------------------------------------------
$LN16		dd 4			; DATA XREF: _uhash_equals_56+143o
		dd offset $LN15_0
$LN15_0		dd 0FFFFFFE0h, 4	; DATA XREF: .text:000020F8o
		dd offset $LN11_1	; "pos"
		dd 0FFFFFFBCh, 4
		dd offset $LN12_1	; "key1"
		dd 0FFFFFFB0h, 4
		dd offset $LN13_1	; "val1"
		dd 0FFFFFF98h, 4
		dd offset $LN14_1	; "val2"
$LN14_1		db 'val2',0             ; DATA XREF: .text:00002128o
$LN13_1		db 'val1',0             ; DATA XREF: .text:0000211Co
$LN12_1		db 'key1',0             ; DATA XREF: .text:00002110o
$LN11_1		db 'pos',0              ; DATA XREF: .text:00002104o
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2140h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_compareUChars_56
_uhash_compareUChars_56	proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+var_14]
		jnz	short loc_2176
		mov	al, 1
		jmp	short loc_21C5
; ---------------------------------------------------------------------------

loc_2176:				; CODE XREF: _uhash_compareUChars_56+30j
		cmp	[ebp+var_8], 0
		jz	short loc_2182
		cmp	[ebp+var_14], 0
		jnz	short loc_2186

loc_2182:				; CODE XREF: _uhash_compareUChars_56+3Aj
		xor	al, al
		jmp	short loc_21C5
; ---------------------------------------------------------------------------

loc_2186:				; CODE XREF: _uhash_compareUChars_56+40j
					; _uhash_compareUChars_56+72j
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		test	ecx, ecx
		jz	short loc_21B4
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		mov	edx, [ebp+var_14]
		movzx	eax, word ptr [edx]
		cmp	ecx, eax
		jnz	short loc_21B4
		mov	eax, [ebp+var_8]
		add	eax, 2
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_14]
		add	eax, 2
		mov	[ebp+var_14], eax
		jmp	short loc_2186
; ---------------------------------------------------------------------------

loc_21B4:				; CODE XREF: _uhash_compareUChars_56+4Ej
					; _uhash_compareUChars_56+5Ej
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		mov	edx, [ebp+var_14]
		movzx	eax, word ptr [edx]
		cmp	ecx, eax
		setz	al

loc_21C5:				; CODE XREF: _uhash_compareUChars_56+34j
					; _uhash_compareUChars_56+44j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uhash_compareUChars_56	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 21CCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_compareChars_56
_uhash_compareChars_56 proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+var_14]
		jnz	short loc_2202
		mov	al, 1
		jmp	short loc_2251
; ---------------------------------------------------------------------------

loc_2202:				; CODE XREF: _uhash_compareChars_56+30j
		cmp	[ebp+var_8], 0
		jz	short loc_220E
		cmp	[ebp+var_14], 0
		jnz	short loc_2212

loc_220E:				; CODE XREF: _uhash_compareChars_56+3Aj
		xor	al, al
		jmp	short loc_2251
; ---------------------------------------------------------------------------

loc_2212:				; CODE XREF: _uhash_compareChars_56+40j
					; _uhash_compareChars_56+72j
		mov	eax, [ebp+var_8]
		movsx	ecx, byte ptr [eax]
		test	ecx, ecx
		jz	short loc_2240
		mov	eax, [ebp+var_8]
		movsx	ecx, byte ptr [eax]
		mov	edx, [ebp+var_14]
		movsx	eax, byte ptr [edx]
		cmp	ecx, eax
		jnz	short loc_2240
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		jmp	short loc_2212
; ---------------------------------------------------------------------------

loc_2240:				; CODE XREF: _uhash_compareChars_56+4Ej
					; _uhash_compareChars_56+5Ej
		mov	eax, [ebp+var_8]
		movsx	ecx, byte ptr [eax]
		mov	edx, [ebp+var_14]
		movsx	eax, byte ptr [edx]
		cmp	ecx, eax
		setz	al

loc_2251:				; CODE XREF: _uhash_compareChars_56+34j
					; _uhash_compareChars_56+44j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uhash_compareChars_56 endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2258h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_compareIChars_56
_uhash_compareIChars_56	proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+var_14]
		jnz	short loc_228E
		mov	al, 1
		jmp	short loc_22F5
; ---------------------------------------------------------------------------

loc_228E:				; CODE XREF: _uhash_compareIChars_56+30j
		cmp	[ebp+var_8], 0
		jz	short loc_229A
		cmp	[ebp+var_14], 0
		jnz	short loc_229E

loc_229A:				; CODE XREF: _uhash_compareIChars_56+3Aj
		xor	al, al
		jmp	short loc_22F5
; ---------------------------------------------------------------------------

loc_229E:				; CODE XREF: _uhash_compareIChars_56+40j
					; _uhash_compareIChars_56+8Aj
		mov	eax, [ebp+var_8]
		movsx	ecx, byte ptr [eax]
		test	ecx, ecx
		jz	short loc_22E4
		mov	eax, [ebp+var_8]
		movzx	ecx, byte ptr [eax]
		push	ecx
		call	_uprv_asciitolower_56
		add	esp, 4
		movsx	esi, al
		mov	edx, [ebp+var_14]
		movzx	eax, byte ptr [edx]
		push	eax
		call	_uprv_asciitolower_56
		add	esp, 4
		movsx	ecx, al
		cmp	esi, ecx
		jnz	short loc_22E4
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		jmp	short loc_229E
; ---------------------------------------------------------------------------

loc_22E4:				; CODE XREF: _uhash_compareIChars_56+4Ej
					; _uhash_compareIChars_56+76j
		mov	eax, [ebp+var_8]
		movsx	ecx, byte ptr [eax]
		mov	edx, [ebp+var_14]
		movsx	eax, byte ptr [edx]
		cmp	ecx, eax
		setz	al

loc_22F5:				; CODE XREF: _uhash_compareIChars_56+34j
					; _uhash_compareIChars_56+44j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uhash_compareIChars_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 230Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_hashLong_56
_uhash_hashLong_56 proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uhash_hashLong_56 endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2334h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uhash_compareLong_56
_uhash_compareLong_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+arg_4]
		setz	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uhash_compareLong_56 endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_CheckEsp:near ; CODE XREF: _uhash_open_56+43p
					; __uhash_create+97p ...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn _uprv_free_56:near ; CODE	XREF: __uhash_create+7Dp
					; _uhash_close_56+C9p ...
		extrn _uprv_malloc_56:near ; CODE XREF:	__uhash_create+2Cp
					; __uhash_allocate+7Fp
; void __cdecl __wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
		extrn __imp___wassert:near ; CODE XREF:	__uhash_init+48p
					; __uhash_init+73p ...
		extrn __fltused:near
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: __uhash_allocate+137p
					; _uhash_close_56+FBp ...
		extrn __ftol2_sse:near	; CODE XREF: __uhash_allocate+10Bp
					; __uhash_allocate+122p ...
		extrn _ustr_hashUCharsN_56:near	; CODE XREF: _uhash_hashUChars_56+47p
		extrn _u_strlen_56:near	; CODE XREF: _uhash_hashUChars_56+3Ap
		extrn _ustr_hashCharsN_56:near ; CODE XREF: _uhash_hashChars_56+47p
; size_t __cdecl strlen(const char *Str)
		extrn _strlen:near	; CODE XREF: _uhash_hashChars_56+3Ap
					; _uhash_hashIChars_56+3Ap
		extrn _ustr_hashICharsN_56:near	; CODE XREF: _uhash_hashIChars_56+47p
		extrn _uprv_asciitolower_56:near ; CODE	XREF: _uhash_compareIChars_56+57p
					; _uhash_compareIChars_56+69p


		end
