;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	0143A25AD18250AFAADEF2A157EC74A9
; Input	CRC32 :	A8EA7F71

; File Name   :	D:\compspace\objfiles\firefox\common\uscript.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
_JAPANESE	dd 16h,	14h, 11h	; DATA XREF: _getCodesFromLocale+8Ao
_KOREAN		dd 12h,	11h		; DATA XREF: _getCodesFromLocale+BFo
_HAN_BOPO	dd 11h,	5		; DATA XREF: _getCodesFromLocale+135o
_rdata		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl uscript_getCode_56(char *Str, int, int, int)
		public _uscript_getCode_56
_uscript_getCode_56 proc near

var_1AC		= dword	ptr -1ACh
var_E4		= dword	ptr -0E4h
var_D8		= dword	ptr -0D8h
var_CC		= dword	ptr -0CCh
var_C0		= dword	ptr -0C0h
var_B4		= byte ptr -0B4h
var_9		= byte ptr -9
var_4		= dword	ptr -4
Str		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 1ACh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_1AC]
		mov	ecx, 6Bh ; 'k'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jle	short loc_53
		xor	eax, eax
		jmp	loc_20E
; ---------------------------------------------------------------------------

loc_53:					; CODE XREF: _uscript_getCode_56+2Ej
		cmp	[ebp+Str], 0
		jz	short loc_88
		cmp	[ebp+arg_4], 0
		jnz	short loc_70
		xor	eax, eax
		cmp	[ebp+arg_8], 0
		setnz	al
		mov	[ebp+var_1AC], eax
		jmp	short loc_7F
; ---------------------------------------------------------------------------

loc_70:					; CODE XREF: _uscript_getCode_56+41j
		xor	ecx, ecx
		cmp	[ebp+arg_8], 0
		setl	cl
		mov	[ebp+var_1AC], ecx

loc_7F:					; CODE XREF: _uscript_getCode_56+52j
		cmp	[ebp+var_1AC], 0
		jz	short loc_98

loc_88:					; CODE XREF: _uscript_getCode_56+3Bj
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 1
		xor	eax, eax
		jmp	loc_20E
; ---------------------------------------------------------------------------

loc_98:					; CODE XREF: _uscript_getCode_56+6Aj
		mov	[ebp+var_9], 0
		mov	esi, esp
		push	2Dh ; '-'       ; Val
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	dword ptr ds:__imp__strchr
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jnz	short loc_118
		mov	esi, esp
		push	5Fh ; '_'       ; Val
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	dword ptr ds:__imp__strchr
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jnz	short loc_118
		mov	eax, [ebp+Str]
		push	eax
		push	100Ah
		call	_u_getPropertyValueEnum_56
		add	esp, 8
		mov	[ebp+var_D8], eax
		cmp	[ebp+var_D8], 0FFFFFFFFh
		jz	short loc_114
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+var_D8]
		push	eax
		call	_setOneCode
		add	esp, 10h
		jmp	loc_20E
; ---------------------------------------------------------------------------

loc_114:				; CODE XREF: _uscript_getCode_56+D6j
		mov	[ebp+var_9], 1

loc_118:				; CODE XREF: _uscript_getCode_56+9Aj
					; _uscript_getCode_56+B6j
		mov	[ebp+var_C0], 0
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+Str]
		push	eax
		call	_getCodesFromLocale
		add	esp, 10h
		mov	[ebp+var_CC], eax
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jg	short loc_151
		cmp	[ebp+var_CC], 0
		jz	short loc_15C

loc_151:				; CODE XREF: _uscript_getCode_56+12Aj
		mov	eax, [ebp+var_CC]
		jmp	loc_20E
; ---------------------------------------------------------------------------

loc_15C:				; CODE XREF: _uscript_getCode_56+133j
		lea	eax, [ebp+var_C0]
		push	eax
		push	9Dh ; 'ù'
		lea	ecx, [ebp+var_B4]
		push	ecx
		mov	edx, [ebp+Str]
		push	edx
		call	_uloc_addLikelySubtags_56
		add	esp, 10h
		cmp	[ebp+var_C0], 0
		jg	short loc_1C7
		cmp	[ebp+var_C0], 0FFFFFF84h
		jz	short loc_1C7
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		lea	eax, [ebp+var_B4]
		push	eax
		call	_getCodesFromLocale
		add	esp, 10h
		mov	[ebp+var_CC], eax
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jg	short loc_1BF
		cmp	[ebp+var_CC], 0
		jz	short loc_1C7

loc_1BF:				; CODE XREF: _uscript_getCode_56+198j
		mov	eax, [ebp+var_CC]
		jmp	short loc_20E
; ---------------------------------------------------------------------------

loc_1C7:				; CODE XREF: _uscript_getCode_56+166j
					; _uscript_getCode_56+16Fj ...
		movsx	eax, [ebp+var_9]
		test	eax, eax
		jnz	short loc_20C
		mov	eax, [ebp+Str]
		push	eax
		push	100Ah
		call	_u_getPropertyValueEnum_56
		add	esp, 8
		mov	[ebp+var_E4], eax
		cmp	[ebp+var_E4], 0FFFFFFFFh
		jz	short loc_20C
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+var_E4]
		push	eax
		call	_setOneCode
		add	esp, 10h
		jmp	short loc_20E
; ---------------------------------------------------------------------------

loc_20C:				; CODE XREF: _uscript_getCode_56+1B1j
					; _uscript_getCode_56+1D1j
		xor	eax, eax

loc_20E:				; CODE XREF: _uscript_getCode_56+32j
					; _uscript_getCode_56+77j ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN20
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1ACh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uscript_getCode_56 endp

; ---------------------------------------------------------------------------
		align 10h
$LN20		dd 2			; DATA XREF: _uscript_getCode_56+1F6o
		dd offset $LN19
$LN19		dd 0FFFFFF4Ch, 9Dh	; DATA XREF: .text:00000244o
		dd offset $LN17		; "likely"
		dd 0FFFFFF40h, 4
		dd offset $LN18		; "internalErrorCode"
$LN18		db 'internalErrorCode',0 ; DATA XREF: .text:0000025Co
$LN17		db 'likely',0           ; DATA XREF: .text:00000250o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 27Ch
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 280h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 284h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_setOneCode	proc near		; CODE XREF: _uscript_getCode_56+EBp
					; _uscript_getCode_56+1E6p ...

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jle	short loc_2AE
		xor	eax, eax
		jmp	short loc_2D1
; ---------------------------------------------------------------------------

loc_2AE:				; CODE XREF: _setOneCode+24j
		cmp	[ebp+arg_8], 1
		jge	short loc_2C4
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0Fh
		mov	eax, 1
		jmp	short loc_2D1
; ---------------------------------------------------------------------------

loc_2C4:				; CODE XREF: _setOneCode+2Ej
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		mov	[eax], ecx
		mov	eax, 1

loc_2D1:				; CODE XREF: _setOneCode+28j
					; _setOneCode+3Ej
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_setOneCode	endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2D8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_getCodesFromLocale proc near		; CODE XREF: _uscript_getCode_56+116p
					; _uscript_getCode_56+184p

var_108		= byte ptr -108h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= byte ptr -2Ch
Str1		= byte ptr -1Ch
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_108]
		mov	ecx, 42h ; 'B'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	[ebp+var_C], 0
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jle	short loc_316
		xor	eax, eax
		jmp	loc_46B
; ---------------------------------------------------------------------------

loc_316:				; CODE XREF: _getCodesFromLocale+35j
		lea	eax, [ebp+var_C]
		push	eax
		push	8
		lea	ecx, [ebp+Str1]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_uloc_getLanguage_56
		add	esp, 10h
		cmp	[ebp+var_C], 0
		jg	short loc_338
		cmp	[ebp+var_C], 0FFFFFF84h
		jnz	short loc_33F

loc_338:				; CODE XREF: _getCodesFromLocale+58j
		xor	eax, eax
		jmp	loc_46B
; ---------------------------------------------------------------------------

loc_33F:				; CODE XREF: _getCodesFromLocale+5Ej
		push	offset ??_C@_02DJBIDCPN@ja?$AA@	; "ja"
		lea	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_374
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		push	3
		push	offset _JAPANESE
		call	_setCodes
		add	esp, 14h
		jmp	loc_46B
; ---------------------------------------------------------------------------

loc_374:				; CODE XREF: _getCodesFromLocale+7Aj
		push	offset ??_C@_02KGFJHFEE@ko?$AA@	; "ko"
		lea	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_3A9
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		push	2
		push	offset _KOREAN
		call	_setCodes
		add	esp, 14h
		jmp	loc_46B
; ---------------------------------------------------------------------------

loc_3A9:				; CODE XREF: _getCodesFromLocale+AFj
		lea	eax, [ebp+var_C]
		push	eax
		push	8
		lea	ecx, [ebp+var_2C]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_uloc_getScript_56
		add	esp, 10h
		mov	[ebp+var_38], eax
		cmp	[ebp+var_C], 0
		jg	short loc_3CE
		cmp	[ebp+var_C], 0FFFFFF84h
		jnz	short loc_3D5

loc_3CE:				; CODE XREF: _getCodesFromLocale+EEj
		xor	eax, eax
		jmp	loc_46B
; ---------------------------------------------------------------------------

loc_3D5:				; CODE XREF: _getCodesFromLocale+F4j
		push	offset ??_C@_02PEPMCKME@zh?$AA@	; "zh"
		lea	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_41C
		push	offset ??_C@_04NLNONBNE@Hant?$AA@ ; "Hant"
		lea	eax, [ebp+var_2C]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_41C
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		push	2
		push	offset _HAN_BOPO
		call	_setCodes
		add	esp, 14h
		jmp	short loc_46B
; ---------------------------------------------------------------------------

loc_41C:				; CODE XREF: _getCodesFromLocale+110j
					; _getCodesFromLocale+125j
		cmp	[ebp+var_38], 0
		jz	short loc_469
		lea	eax, [ebp+var_2C]
		push	eax
		push	100Ah
		call	_u_getPropertyValueEnum_56
		add	esp, 8
		mov	[ebp+var_44], eax
		cmp	[ebp+var_44], 0FFFFFFFFh
		jz	short loc_469
		cmp	[ebp+var_44], 49h ; 'I'
		jz	short loc_448
		cmp	[ebp+var_44], 4Ah ; 'J'
		jnz	short loc_44F

loc_448:				; CODE XREF: _getCodesFromLocale+168j
		mov	[ebp+var_44], 11h

loc_44F:				; CODE XREF: _getCodesFromLocale+16Ej
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+var_44]
		push	eax
		call	_setOneCode
		add	esp, 10h
		jmp	short loc_46B
; ---------------------------------------------------------------------------

loc_469:				; CODE XREF: _getCodesFromLocale+148j
					; _getCodesFromLocale+162j
		xor	eax, eax

loc_46B:				; CODE XREF: _getCodesFromLocale+39j
					; _getCodesFromLocale+62j ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN19_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 108h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_getCodesFromLocale endp

; ---------------------------------------------------------------------------
		align 4
$LN19_0		dd 3			; DATA XREF: _getCodesFromLocale+197o
		dd offset $LN18_0
$LN18_0		dd 0FFFFFFF4h, 4	; DATA XREF: .text:000004A0o
		dd offset $LN15		; "internalErrorCode"
		dd 0FFFFFFE4h, 8
		dd offset $LN16		; "lang"
		dd 0FFFFFFD4h, 8
		dd offset $LN17_0	; "script"
$LN17_0		db 'script',0           ; DATA XREF: .text:000004C4o
$LN16		db 'lang',0             ; DATA XREF: .text:000004B8o
$LN15		db 'internalErrorCode',0 ; DATA XREF: .text:000004ACo
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4E8h
		public ??_C@_04NLNONBNE@Hant?$AA@
; char `string'[]
??_C@_04NLNONBNE@Hant?$AA@ db 'Hant',0  ; DATA XREF: _getCodesFromLocale+112o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4F0h
		public ??_C@_02PEPMCKME@zh?$AA@
; char `string'[3]
??_C@_02PEPMCKME@zh?$AA@ db 'zh',0      ; DATA XREF: _getCodesFromLocale:loc_3D5o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4F4h
		public ??_C@_02KGFJHFEE@ko?$AA@
; char `string'[3]
??_C@_02KGFJHFEE@ko?$AA@ db 'ko',0      ; DATA XREF: _getCodesFromLocale:loc_374o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4F8h
		public ??_C@_02DJBIDCPN@ja?$AA@
; char `string'[3]
??_C@_02DJBIDCPN@ja?$AA@ db 'ja',0      ; DATA XREF: _getCodesFromLocale:loc_33Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4FCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_setCodes	proc near		; CODE XREF: _getCodesFromLocale+8Fp
					; _getCodesFromLocale+C4p ...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_10]
		cmp	dword ptr [eax], 0
		jle	short loc_526
		xor	eax, eax
		jmp	short loc_56D
; ---------------------------------------------------------------------------

loc_526:				; CODE XREF: _setCodes+24j
		mov	eax, [ebp+arg_4]
		cmp	eax, [ebp+arg_C]
		jle	short loc_53C
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0Fh
		mov	eax, [ebp+arg_4]
		jmp	short loc_56D
; ---------------------------------------------------------------------------

loc_53C:				; CODE XREF: _setCodes+30j
		mov	[ebp+var_8], 0
		jmp	short loc_54E
; ---------------------------------------------------------------------------

loc_545:				; CODE XREF: _setCodes+6Cj
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax

loc_54E:				; CODE XREF: _setCodes+47j
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_4]
		jge	short loc_56A
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_8]
		mov	edx, [ebp+var_8]
		mov	esi, [ebp+arg_0]
		mov	edx, [esi+edx*4]
		mov	[ecx+eax*4], edx
		jmp	short loc_545
; ---------------------------------------------------------------------------

loc_56A:				; CODE XREF: _setCodes+58j
		mov	eax, [ebp+arg_4]

loc_56D:				; CODE XREF: _setCodes+28j
					; _setCodes+3Ej
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_setCodes	endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _uloc_addLikelySubtags_56:near ; CODE XREF: _uscript_getCode_56+157p
		extrn _u_getPropertyValueEnum_56:near ;	CODE XREF: _uscript_getCode_56+C1p
					; _uscript_getCode_56+1BCp ...
; char *__cdecl	_strchr(const char *Str, int Val)
		extrn __imp__strchr:near ; CODE	XREF: _uscript_getCode_56+88p
					; _uscript_getCode_56+A4p
					; DATA XREF: ...
		extrn ___security_cookie:near ;	DATA XREF: _uscript_getCode_56+1Er
					; _getCodesFromLocale+1Er
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _uscript_getCode_56+20Bp
					; _getCodesFromLocale+1ACp
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _uscript_getCode_56+1FCp
					; _getCodesFromLocale+19Dp
		extrn __RTC_CheckEsp:near ; CODE XREF: _uscript_getCode_56+93p
					; _uscript_getCode_56+AFp ...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn _uloc_getScript_56:near ;	CODE XREF: _getCodesFromLocale+DFp
; int __cdecl strcmp(const char	*Str1, const char *Str2)
		extrn _strcmp:near	; CODE XREF: _getCodesFromLocale+70p
					; _getCodesFromLocale+A5p ...
		extrn _uloc_getLanguage_56:near	; CODE XREF: _getCodesFromLocale+4Cp


		end
