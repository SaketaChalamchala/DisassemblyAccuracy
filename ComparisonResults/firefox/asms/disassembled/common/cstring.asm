;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	44B43867E14BEAED54F57E0BE8916F4C
; Input	CRC32 :	DFACFD0E

; File Name   :	D:\compspace\objfiles\firefox\common\cstring.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"
;
; Exported entry
;

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_isASCIILetter_56
_uprv_isASCIILetter_56 proc near

var_C4		= dword	ptr -0C4h
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C4]
		mov	ecx, 31h ; '1'
		mov	eax, 0CCCCCCCCh
		rep stosd
		movsx	eax, [ebp+arg_0]
		cmp	eax, 61h ; 'a'
		jl	short loc_30
		movsx	ecx, [ebp+arg_0]
		cmp	ecx, 7Ah ; 'z'
		jle	short loc_4E

loc_30:					; CODE XREF: _uprv_isASCIILetter_56+25j
		movsx	edx, [ebp+arg_0]
		cmp	edx, 41h ; 'A'
		jl	short loc_42
		movsx	eax, [ebp+arg_0]
		cmp	eax, 5Ah ; 'Z'
		jle	short loc_4E

loc_42:					; CODE XREF: _uprv_isASCIILetter_56+37j
		mov	[ebp+var_C4], 0
		jmp	short loc_58
; ---------------------------------------------------------------------------

loc_4E:					; CODE XREF: _uprv_isASCIILetter_56+2Ej
					; _uprv_isASCIILetter_56+40j
		mov	[ebp+var_C4], 1

loc_58:					; CODE XREF: _uprv_isASCIILetter_56+4Cj
		mov	al, byte ptr [ebp+var_C4]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uprv_isASCIILetter_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 68h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 6Ch
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 70h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_toupper_56
_uprv_toupper_56 proc near		; CODE XREF: _T_CString_toUpperCase_56+31p

var_C0		= byte ptr -0C0h
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		movsx	eax, [ebp+arg_0]
		cmp	eax, 61h ; 'a'
		jl	short loc_AA
		movsx	eax, [ebp+arg_0]
		cmp	eax, 7Ah ; 'z'
		jg	short loc_AA
		movsx	eax, [ebp+arg_0]
		sub	eax, 20h ; ' '
		mov	[ebp+arg_0], al

loc_AA:					; CODE XREF: _uprv_toupper_56+25j
					; _uprv_toupper_56+2Ej
		mov	al, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uprv_toupper_56 endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0B4h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_asciitolower_56
_uprv_asciitolower_56 proc near		; CODE XREF: _T_CString_toLowerCase_56+31p
					; _uprv_stricmp_56+95p	...

var_C0		= byte ptr -0C0h
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		movsx	eax, [ebp+arg_0]
		cmp	eax, 41h ; 'A'
		jl	short loc_EE
		movsx	eax, [ebp+arg_0]
		cmp	eax, 5Ah ; 'Z'
		jg	short loc_EE
		movsx	eax, [ebp+arg_0]
		add	eax, 20h ; ' '
		mov	[ebp+arg_0], al

loc_EE:					; CODE XREF: _uprv_asciitolower_56+25j
					; _uprv_asciitolower_56+2Ej
		mov	al, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uprv_asciitolower_56 endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0F8h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_ebcdictolower_56
_uprv_ebcdictolower_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		movzx	eax, [ebp+arg_0]
		cmp	eax, 0C1h ; 'Á'
		jl	short loc_12C
		movzx	eax, [ebp+arg_0]
		cmp	eax, 0C9h ; 'É'
		jle	short loc_158

loc_12C:				; CODE XREF: _uprv_ebcdictolower_56+27j
		movzx	eax, [ebp+arg_0]
		cmp	eax, 0D1h ; 'Ñ'
		jl	short loc_142
		movzx	eax, [ebp+arg_0]
		cmp	eax, 0D9h ; 'Ù'
		jle	short loc_158

loc_142:				; CODE XREF: _uprv_ebcdictolower_56+3Dj
		movzx	eax, [ebp+arg_0]
		cmp	eax, 0E2h ; 'â'
		jl	short loc_162
		movzx	eax, [ebp+arg_0]
		cmp	eax, 0E9h ; 'é'
		jg	short loc_162

loc_158:				; CODE XREF: _uprv_ebcdictolower_56+32j
					; _uprv_ebcdictolower_56+48j
		movsx	eax, [ebp+arg_0]
		sub	eax, 40h ; '@'
		mov	[ebp+arg_0], al

loc_162:				; CODE XREF: _uprv_ebcdictolower_56+53j
					; _uprv_ebcdictolower_56+5Ej
		mov	al, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uprv_ebcdictolower_56 endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 16Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _T_CString_toLowerCase_56
_T_CString_toLowerCase_56 proc near

var_D0		= byte ptr -0D0h
var_CD		= byte ptr -0CDh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		cmp	[ebp+arg_0], 0
		jz	short loc_1C9

loc_196:				; CODE XREF: _T_CString_toLowerCase_56+5Bj
		mov	eax, [ebp+arg_0]
		movzx	ecx, byte ptr [eax]
		push	ecx
		call	_uprv_asciitolower_56
		add	esp, 4
		mov	edx, [ebp+arg_0]
		mov	[edx], al
		mov	eax, [ebp+arg_0]
		mov	cl, [eax]
		mov	[ebp+var_CD], cl
		mov	edx, [ebp+arg_0]
		add	edx, 1
		mov	[ebp+arg_0], edx
		movsx	eax, [ebp+var_CD]
		test	eax, eax
		jnz	short loc_196

loc_1C9:				; CODE XREF: _T_CString_toLowerCase_56+28j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_T_CString_toLowerCase_56 endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1E0h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _T_CString_toUpperCase_56
_T_CString_toUpperCase_56 proc near

var_D0		= byte ptr -0D0h
var_CD		= byte ptr -0CDh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		cmp	[ebp+arg_0], 0
		jz	short loc_23D

loc_20A:				; CODE XREF: _T_CString_toUpperCase_56+5Bj
		mov	eax, [ebp+arg_0]
		movzx	ecx, byte ptr [eax]
		push	ecx
		call	_uprv_toupper_56
		add	esp, 4
		mov	edx, [ebp+arg_0]
		mov	[edx], al
		mov	eax, [ebp+arg_0]
		mov	cl, [eax]
		mov	[ebp+var_CD], cl
		mov	edx, [ebp+arg_0]
		add	edx, 1
		mov	[ebp+arg_0], edx
		movsx	eax, [ebp+var_CD]
		test	eax, eax
		jnz	short loc_20A

loc_23D:				; CODE XREF: _T_CString_toUpperCase_56+28j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_T_CString_toUpperCase_56 endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 254h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _T_CString_integerToString_56
_T_CString_integerToString_56 proc near

var_120		= dword	ptr -120h
var_58		= dword	ptr -58h
var_4C		= dword	ptr -4Ch
var_3D		= byte ptr -3Dh
var_34		= dword	ptr -34h
Source		= byte ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 120h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_120]
		mov	ecx, 48h ; 'H'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	[ebp+var_34], 1Eh
		mov	[ebp+var_4C], 0
		cmp	[ebp+arg_8], 2
		jl	short loc_296
		cmp	[ebp+arg_8], 10h
		jle	short loc_2BB

loc_296:				; CODE XREF: _T_CString_integerToString_56+3Aj
		mov	eax, ds:?__LINE__Var@?1??T_CString_integerToString_56@@9@9 ; `T_CString_integerToString_56'::`2'::__LINE__Var
		add	eax, 7
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FI@NNKNIAPM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1CM@NPJAKICH@?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DO?$AA?$DN?$AA2?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DM?$AA?$DN?$AA1?$AA6?$AA?$AA@ ; "radix>=2 &&	radix<=16"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_2BB:				; CODE XREF: _T_CString_integerToString_56+40j
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_58], eax
		cmp	[ebp+arg_4], 0
		jge	short loc_2E7
		cmp	[ebp+arg_8], 0Ah
		jnz	short loc_2E7
		mov	eax, [ebp+arg_4]
		neg	eax
		mov	[ebp+var_58], eax
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+var_4C]
		mov	byte ptr [eax],	2Dh ; '-'
		mov	ecx, [ebp+var_4C]
		add	ecx, 1
		mov	[ebp+var_4C], ecx

loc_2E7:				; CODE XREF: _T_CString_integerToString_56+71j
					; _T_CString_integerToString_56+77j
		mov	[ebp+var_34], 1Dh
		mov	eax, [ebp+var_34]
		mov	[ebp+eax+Source], 0

loc_2F6:				; CODE XREF: _T_CString_integerToString_56+F7j
		mov	eax, [ebp+var_58]
		xor	edx, edx
		div	[ebp+arg_8]
		mov	[ebp+var_3D], dl
		movzx	eax, [ebp+var_3D]
		cmp	eax, 9
		jg	short loc_319
		movzx	ecx, [ebp+var_3D]
		add	ecx, 30h ; '0'
		mov	[ebp+var_120], ecx
		jmp	short loc_326
; ---------------------------------------------------------------------------

loc_319:				; CODE XREF: _T_CString_integerToString_56+B4j
		movzx	edx, [ebp+var_3D]
		add	edx, 37h ; '7'
		mov	[ebp+var_120], edx

loc_326:				; CODE XREF: _T_CString_integerToString_56+C3j
		mov	eax, [ebp+var_34]
		sub	eax, 1
		mov	[ebp+var_34], eax
		mov	ecx, [ebp+var_34]
		mov	dl, byte ptr [ebp+var_120]
		mov	[ebp+ecx+Source], dl
		mov	eax, [ebp+var_58]
		xor	edx, edx
		div	[ebp+arg_8]
		mov	[ebp+var_58], eax
		cmp	[ebp+var_58], 0
		jnz	short loc_2F6
		mov	eax, [ebp+var_34]
		lea	ecx, [ebp+eax+Source]
		push	ecx		; Source
		mov	edx, [ebp+arg_0]
		add	edx, [ebp+var_4C]
		push	edx		; Dest
		call	_strcpy
		add	esp, 8
		mov	eax, 1Eh
		sub	eax, [ebp+var_34]
		mov	ecx, [ebp+var_4C]
		lea	edx, [ecx+eax-1]
		mov	[ebp+var_4C], edx
		mov	eax, [ebp+var_4C]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN13
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 120h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_T_CString_integerToString_56 endp

; ---------------------------------------------------------------------------
$LN13		dd 1			; DATA XREF: _T_CString_integerToString_56+129o
		dd offset $LN12
$LN12		dd 0FFFFFFD8h, 1Eh	; DATA XREF: .text:000003ACo
		dd offset $LN11		; "tbuf"
$LN11		db 'tbuf',0             ; DATA XREF: .text:000003B8o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3C4h
		public ??_C@_1CM@NPJAKICH@?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DO?$AA?$DN?$AA2?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DM?$AA?$DN?$AA1?$AA6?$AA?$AA@
; wchar_t `string'
??_C@_1CM@NPJAKICH@?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DO?$AA?$DN?$AA2?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DM?$AA?$DN?$AA1?$AA6?$AA?$AA@:
					; DATA XREF: _T_CString_integerToString_56+52o
					; _T_CString_int64ToString_56+52o
		unicode	0, <radix>
		dw 3Eh
		unicode	0, <=2 && radix>
		dw 3Ch
		unicode	0, <=16>,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 3F0h
		public ??_C@_1FI@NNKNIAPM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
; wchar_t `string'
??_C@_1FI@NNKNIAPM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@:
					; DATA XREF: _T_CString_integerToString_56+4Do
					; _T_CString_int64ToString_56+4Do
		unicode	0, <d:\mozilla\intl\icu\source\common\cstring.c>,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 448h
		public ?__LINE__Var@?1??T_CString_integerToString_56@@9@9
; `T_CString_integerToString_56'::`2'::__LINE__Var
?__LINE__Var@?1??T_CString_integerToString_56@@9@9 dd 9Ch
					; DATA XREF: _T_CString_integerToString_56:loc_296r
_data		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 44Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _T_CString_int64ToString_56
_T_CString_int64ToString_56 proc near

var_124		= dword	ptr -124h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_4C		= dword	ptr -4Ch
var_3D		= byte ptr -3Dh
var_34		= dword	ptr -34h
Source		= byte ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 124h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_124]
		mov	ecx, 49h ; 'I'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	[ebp+var_34], 1Eh
		mov	[ebp+var_4C], 0
		cmp	[ebp+arg_C], 2
		jb	short loc_48E
		cmp	[ebp+arg_C], 10h
		jbe	short loc_4B3

loc_48E:				; CODE XREF: _T_CString_int64ToString_56+3Aj
		mov	eax, ds:?__LINE__Var@?1??T_CString_int64ToString_56@@9@9 ; `T_CString_int64ToString_56'::`2'::__LINE__Var
		add	eax, 7
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FI@NNKNIAPM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; "d:\\mozilla\\intl\\icu\\source\\common\"...
		push	offset ??_C@_1CM@NPJAKICH@?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DO?$AA?$DN?$AA2?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DM?$AA?$DN?$AA1?$AA6?$AA?$AA@ ; "radix>=2 &&	radix<=16"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_4B3:				; CODE XREF: _T_CString_int64ToString_56+40j
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_5C], eax
		mov	ecx, [ebp+arg_8]
		mov	[ebp+var_58], ecx
		cmp	[ebp+arg_8], 0
		jg	short loc_4F8
		jl	short loc_4CD
		cmp	[ebp+arg_4], 0
		jnb	short loc_4F8

loc_4CD:				; CODE XREF: _T_CString_int64ToString_56+79j
		cmp	[ebp+arg_C], 0Ah
		jnz	short loc_4F8
		mov	eax, [ebp+arg_4]
		neg	eax
		mov	ecx, [ebp+arg_8]
		adc	ecx, 0
		neg	ecx
		mov	[ebp+var_5C], eax
		mov	[ebp+var_58], ecx
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+var_4C]
		mov	byte ptr [eax],	2Dh ; '-'
		mov	ecx, [ebp+var_4C]
		add	ecx, 1
		mov	[ebp+var_4C], ecx

loc_4F8:				; CODE XREF: _T_CString_int64ToString_56+77j
					; _T_CString_int64ToString_56+7Fj ...
		mov	[ebp+var_34], 1Dh
		mov	eax, [ebp+var_34]
		mov	[ebp+eax+Source], 0

loc_507:				; CODE XREF: _T_CString_int64ToString_56+12Dj
		mov	eax, [ebp+arg_C]
		xor	ecx, ecx
		push	ecx
		push	eax
		mov	edx, [ebp+var_58]
		push	edx
		mov	eax, [ebp+var_5C]
		push	eax
		call	__aullrem
		mov	[ebp+var_3D], al
		movzx	eax, [ebp+var_3D]
		cmp	eax, 9
		jg	short loc_536
		movzx	ecx, [ebp+var_3D]
		add	ecx, 30h ; '0'
		mov	[ebp+var_124], ecx
		jmp	short loc_543
; ---------------------------------------------------------------------------

loc_536:				; CODE XREF: _T_CString_int64ToString_56+D9j
		movzx	edx, [ebp+var_3D]
		add	edx, 37h ; '7'
		mov	[ebp+var_124], edx

loc_543:				; CODE XREF: _T_CString_int64ToString_56+E8j
		mov	eax, [ebp+var_34]
		sub	eax, 1
		mov	[ebp+var_34], eax
		mov	ecx, [ebp+var_34]
		mov	dl, byte ptr [ebp+var_124]
		mov	[ebp+ecx+Source], dl
		mov	eax, [ebp+arg_C]
		xor	ecx, ecx
		push	ecx
		push	eax
		mov	edx, [ebp+var_58]
		push	edx
		mov	eax, [ebp+var_5C]
		push	eax
		call	__aulldiv
		mov	[ebp+var_5C], eax
		mov	[ebp+var_58], edx
		mov	eax, [ebp+var_5C]
		or	eax, [ebp+var_58]
		jnz	short loc_507
		mov	eax, [ebp+var_34]
		lea	ecx, [ebp+eax+Source]
		push	ecx		; Source
		mov	edx, [ebp+arg_0]
		add	edx, [ebp+var_4C]
		push	edx		; Dest
		call	_strcpy
		add	esp, 8
		mov	eax, 1Eh
		sub	eax, [ebp+var_34]
		mov	ecx, [ebp+var_4C]
		lea	edx, [ecx+eax-1]
		mov	[ebp+var_4C], edx
		mov	eax, [ebp+var_4C]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN14
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 124h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_T_CString_int64ToString_56 endp

; ---------------------------------------------------------------------------
		align 4
$LN14		dd 1			; DATA XREF: _T_CString_int64ToString_56+15Fo
		dd offset $LN13_0
$LN13_0		dd 0FFFFFFD8h, 1Eh	; DATA XREF: .text:000005DCo
		dd offset $LN12_0	; "tbuf"
$LN12_0		db 'tbuf',0             ; DATA XREF: .text:000005E8o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 5F4h
		public ?__LINE__Var@?1??T_CString_int64ToString_56@@9@9
; `T_CString_int64ToString_56'::`2'::__LINE__Var
?__LINE__Var@?1??T_CString_int64ToString_56@@9@9 dd 0C2h
					; DATA XREF: _T_CString_int64ToString_56:loc_48Er
_data		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 5F8h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl T_CString_stringToInteger_56(char	*Str, int Radix)
		public _T_CString_stringToInteger_56
_T_CString_stringToInteger_56 proc near

var_CC		= byte ptr -0CCh
EndPtr		= dword	ptr -8
Str		= dword	ptr  8
Radix		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	esi, esp
		mov	eax, [ebp+Radix]
		push	eax		; Radix
		lea	ecx, [ebp+EndPtr]
		push	ecx		; EndPtr
		mov	edx, [ebp+Str]
		push	edx		; Str
		call	dword ptr ds:__imp__strtoul
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_T_CString_stringToInteger_56 endp

; ---------------------------------------------------------------------------
		align 4
$LN5		dd 1			; DATA XREF: _T_CString_stringToInteger_56+40o
		dd offset $LN4
$LN4		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00000660o
		dd offset $LN3
$LN3		dd 646E65h		; DATA XREF: .text:0000066Co
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 674h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_stricmp_56
_uprv_stricmp_56 proc near

var_E4		= byte ptr -0E4h
var_1D		= byte ptr -1Dh
var_11		= byte ptr -11h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jnz	short loc_6B4
		cmp	[ebp+arg_4], 0
		jnz	short loc_6A7
		xor	eax, eax
		jmp	loc_744
; ---------------------------------------------------------------------------
		jmp	short loc_6AF
; ---------------------------------------------------------------------------

loc_6A7:				; CODE XREF: _uprv_stricmp_56+28j
		or	eax, 0FFFFFFFFh
		jmp	loc_744
; ---------------------------------------------------------------------------

loc_6AF:				; CODE XREF: _uprv_stricmp_56+31j
		jmp	loc_744
; ---------------------------------------------------------------------------

loc_6B4:				; CODE XREF: _uprv_stricmp_56+22j
		cmp	[ebp+arg_4], 0
		jnz	short loc_6C6
		mov	eax, 1
		jmp	loc_744
; ---------------------------------------------------------------------------
		jmp	short loc_744
; ---------------------------------------------------------------------------

loc_6C6:				; CODE XREF: _uprv_stricmp_56+44j
					; _uprv_stricmp_56+CEj
		mov	eax, [ebp+arg_0]
		mov	cl, [eax]
		mov	[ebp+var_11], cl
		mov	eax, [ebp+arg_4]
		mov	cl, [eax]
		mov	[ebp+var_1D], cl
		movzx	eax, [ebp+var_11]
		test	eax, eax
		jnz	short loc_6F3
		movzx	eax, [ebp+var_1D]
		test	eax, eax
		jnz	short loc_6EC
		xor	eax, eax
		jmp	short loc_744
; ---------------------------------------------------------------------------
		jmp	short loc_6F1
; ---------------------------------------------------------------------------

loc_6EC:				; CODE XREF: _uprv_stricmp_56+70j
		or	eax, 0FFFFFFFFh
		jmp	short loc_744
; ---------------------------------------------------------------------------

loc_6F1:				; CODE XREF: _uprv_stricmp_56+76j
		jmp	short loc_730
; ---------------------------------------------------------------------------

loc_6F3:				; CODE XREF: _uprv_stricmp_56+68j
		movzx	eax, [ebp+var_1D]
		test	eax, eax
		jnz	short loc_704
		mov	eax, 1
		jmp	short loc_744
; ---------------------------------------------------------------------------
		jmp	short loc_730
; ---------------------------------------------------------------------------

loc_704:				; CODE XREF: _uprv_stricmp_56+85j
		movzx	eax, [ebp+var_11]
		push	eax
		call	_uprv_asciitolower_56
		add	esp, 4
		movzx	esi, al
		movzx	ecx, [ebp+var_1D]
		push	ecx
		call	_uprv_asciitolower_56
		add	esp, 4
		movzx	edx, al
		sub	esi, edx
		mov	[ebp+var_8], esi
		jz	short loc_730
		mov	eax, [ebp+var_8]
		jmp	short loc_744
; ---------------------------------------------------------------------------

loc_730:				; CODE XREF: _uprv_stricmp_56:loc_6F1j
					; _uprv_stricmp_56+8Ej	...
		mov	eax, [ebp+arg_0]
		add	eax, 1
		mov	[ebp+arg_0], eax
		mov	eax, [ebp+arg_4]
		add	eax, 1
		mov	[ebp+arg_4], eax
		jmp	short loc_6C6
; ---------------------------------------------------------------------------

loc_744:				; CODE XREF: _uprv_stricmp_56+2Cj
					; _uprv_stricmp_56+36j	...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uprv_stricmp_56 endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 758h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_strnicmp_56
_uprv_strnicmp_56 proc near

var_E8		= dword	ptr -0E8h
var_1D		= byte ptr -1Dh
var_11		= byte ptr -11h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E8]
		mov	ecx, 3Ah ; ':'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jnz	short loc_798
		cmp	[ebp+arg_4], 0
		jnz	short loc_78B
		xor	eax, eax
		jmp	loc_84F
; ---------------------------------------------------------------------------
		jmp	short loc_793
; ---------------------------------------------------------------------------

loc_78B:				; CODE XREF: _uprv_strnicmp_56+28j
		or	eax, 0FFFFFFFFh
		jmp	loc_84F
; ---------------------------------------------------------------------------

loc_793:				; CODE XREF: _uprv_strnicmp_56+31j
		jmp	loc_84D
; ---------------------------------------------------------------------------

loc_798:				; CODE XREF: _uprv_strnicmp_56+22j
		cmp	[ebp+arg_4], 0
		jnz	short loc_7AD
		mov	eax, 1
		jmp	loc_84F
; ---------------------------------------------------------------------------
		jmp	loc_84D
; ---------------------------------------------------------------------------

loc_7AD:				; CODE XREF: _uprv_strnicmp_56+44j
					; _uprv_strnicmp_56+F0j
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_E8], eax
		mov	ecx, [ebp+arg_8]
		sub	ecx, 1
		mov	[ebp+arg_8], ecx
		cmp	[ebp+var_E8], 0
		jz	loc_84D
		mov	eax, [ebp+arg_0]
		mov	cl, [eax]
		mov	[ebp+var_11], cl
		mov	eax, [ebp+arg_4]
		mov	cl, [eax]
		mov	[ebp+var_1D], cl
		movzx	eax, [ebp+var_11]
		test	eax, eax
		jnz	short loc_7F9
		movzx	eax, [ebp+var_1D]
		test	eax, eax
		jnz	short loc_7F2
		xor	eax, eax
		jmp	short loc_84F
; ---------------------------------------------------------------------------
		jmp	short loc_7F7
; ---------------------------------------------------------------------------

loc_7F2:				; CODE XREF: _uprv_strnicmp_56+92j
		or	eax, 0FFFFFFFFh
		jmp	short loc_84F
; ---------------------------------------------------------------------------

loc_7F7:				; CODE XREF: _uprv_strnicmp_56+98j
		jmp	short loc_836
; ---------------------------------------------------------------------------

loc_7F9:				; CODE XREF: _uprv_strnicmp_56+8Aj
		movzx	eax, [ebp+var_1D]
		test	eax, eax
		jnz	short loc_80A
		mov	eax, 1
		jmp	short loc_84F
; ---------------------------------------------------------------------------
		jmp	short loc_836
; ---------------------------------------------------------------------------

loc_80A:				; CODE XREF: _uprv_strnicmp_56+A7j
		movzx	eax, [ebp+var_11]
		push	eax
		call	_uprv_asciitolower_56
		add	esp, 4
		movzx	esi, al
		movzx	ecx, [ebp+var_1D]
		push	ecx
		call	_uprv_asciitolower_56
		add	esp, 4
		movzx	edx, al
		sub	esi, edx
		mov	[ebp+var_8], esi
		jz	short loc_836
		mov	eax, [ebp+var_8]
		jmp	short loc_84F
; ---------------------------------------------------------------------------

loc_836:				; CODE XREF: _uprv_strnicmp_56:loc_7F7j
					; _uprv_strnicmp_56+B0j ...
		mov	eax, [ebp+arg_0]
		add	eax, 1
		mov	[ebp+arg_0], eax
		mov	eax, [ebp+arg_4]
		add	eax, 1
		mov	[ebp+arg_4], eax
		jmp	loc_7AD
; ---------------------------------------------------------------------------

loc_84D:				; CODE XREF: _uprv_strnicmp_56:loc_793j
					; _uprv_strnicmp_56+50j ...
		xor	eax, eax

loc_84F:				; CODE XREF: _uprv_strnicmp_56+2Cj
					; _uprv_strnicmp_56+36j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uprv_strnicmp_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 864h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl uprv_strdup_56(char *Str)
		public _uprv_strdup_56
_uprv_strdup_56	proc near		; CODE XREF: _uprv_strndup_56+28p

var_D8		= byte ptr -0D8h
Dst		= dword	ptr -14h
Size		= dword	ptr -8
Str		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		add	eax, 1
		mov	[ebp+Size], eax
		mov	eax, [ebp+Size]
		push	eax
		call	_uprv_malloc_56
		add	esp, 4
		mov	[ebp+Dst], eax
		cmp	[ebp+Dst], 0
		jz	short loc_8CB
		push	1
		mov	eax, [ebp+Str]
		push	eax
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	ecx, [ebp+Size]
		push	ecx		; Size
		mov	edx, [ebp+Str]
		push	edx		; Src
		mov	eax, [ebp+Dst]
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch

loc_8CB:				; CODE XREF: _uprv_strdup_56+43j
		mov	eax, [ebp+Dst]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uprv_strdup_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 8E4h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl uprv_strndup_56(void *Src, size_t	Size)
		public _uprv_strndup_56
_uprv_strndup_56 proc near

var_CC		= byte ptr -0CCh
Dst		= dword	ptr -8
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+Size], 0
		jge	short loc_919
		mov	eax, [ebp+Src]
		push	eax		; Str
		call	_uprv_strdup_56
		add	esp, 4
		mov	[ebp+Dst], eax
		jmp	short loc_95C
; ---------------------------------------------------------------------------

loc_919:				; CODE XREF: _uprv_strndup_56+22j
		mov	eax, [ebp+Size]
		add	eax, 1
		push	eax
		call	_uprv_malloc_56
		add	esp, 4
		mov	[ebp+Dst], eax
		cmp	[ebp+Dst], 0
		jz	short loc_95C
		push	1
		mov	eax, [ebp+Src]
		push	eax
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	ecx, [ebp+Size]
		push	ecx		; Size
		mov	edx, [ebp+Src]
		push	edx		; Src
		mov	eax, [ebp+Dst]
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	eax, [ebp+Dst]
		add	eax, [ebp+Size]
		mov	byte ptr [eax],	0

loc_95C:				; CODE XREF: _uprv_strndup_56+33j
					; _uprv_strndup_56+4Bj
		mov	eax, [ebp+Dst]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uprv_strndup_56 endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_CheckEsp:near ; CODE XREF: _T_CString_toLowerCase_56+6Bp
					; _T_CString_toUpperCase_56+6Bp ...
; char *__cdecl	strcpy(char *Dest, const char *Source)
		extrn _strcpy:near	; CODE XREF: _T_CString_integerToString_56+108p
					; _T_CString_int64ToString_56+13Ep
; void __cdecl __wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
		extrn __imp___wassert:near ; CODE XREF:	_T_CString_integerToString_56+57p
					; _T_CString_int64ToString_56+57p
					; DATA XREF: ...
		extrn ___security_cookie:near ;	DATA XREF: _T_CString_integerToString_56+1Er
					; _T_CString_int64ToString_56+1Er
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _T_CString_integerToString_56+13Ep
					; _T_CString_int64ToString_56+174p
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near
					; CODE XREF: _T_CString_integerToString_56+12Fp
					; _T_CString_int64ToString_56+165p ...
		extrn __aulldiv:near	; CODE XREF: _T_CString_int64ToString_56+11Cp
		extrn __aullrem:near	; CODE XREF: _T_CString_int64ToString_56+CAp
; unsigned __int32 __cdecl _strtoul(const char *Str, char **EndPtr, int	Radix)
		extrn __imp__strtoul:near ; CODE XREF: _T_CString_stringToInteger_56+2Cp
					; DATA XREF: _T_CString_stringToInteger_56+2Cr
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _uprv_strdup_56+5Fp
					; _uprv_strndup_56+67p
		extrn _uprv_checkValidMemory:near ; CODE XREF: _uprv_strdup_56+4Bp
					; _uprv_strndup_56+53p
		extrn _uprv_malloc_56:near ; CODE XREF:	_uprv_strdup_56+34p
					; _uprv_strndup_56+3Cp
; size_t __cdecl strlen(const char *Str)
		extrn _strlen:near	; CODE XREF: _uprv_strdup_56+22p


		end
