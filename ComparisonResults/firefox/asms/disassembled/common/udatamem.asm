;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	3609C793AF7EEC13ECA088560598B7B1
; Input	CRC32 :	CD73FDB0

; File Name   :	D:\compspace\objfiles\firefox\common\udatamem.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl UDataMemory_init_56(void *)
		public _UDataMemory_init_56
_UDataMemory_init_56 proc near		; CODE XREF: _UDataMemory_createNewInstance_56+4Cp
					; _udata_close_56+4Dp

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		push	1Ch		; size_t
		push	0		; int
		mov	eax, [ebp+arg_0]
		push	eax		; void *
		call	_memset
		add	esp, 0Ch
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+18h], 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_UDataMemory_init_56 endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 4Ch
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 50h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 54h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl UDatamemory_assign_56(void *, void *)
		public _UDatamemory_assign_56
_UDatamemory_assign_56 proc near

var_CC		= byte ptr -0CCh
var_5		= byte ptr -5
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	cl, [eax+0Ch]
		mov	[ebp+var_5], cl
		push	1
		mov	eax, [ebp+arg_4]
		push	eax
		call	_uprv_checkValidMemory
		add	esp, 8
		push	1Ch		; size_t
		mov	ecx, [ebp+arg_4]
		push	ecx		; void *
		mov	edx, [ebp+arg_0]
		push	edx		; void *
		call	_memcpy
		add	esp, 0Ch
		mov	eax, [ebp+arg_0]
		mov	cl, [ebp+var_5]
		mov	[eax+0Ch], cl
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_UDatamemory_assign_56 endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0B8h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _UDataMemory_createNewInstance_56
_UDataMemory_createNewInstance_56 proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax], 0
		jle	short loc_E2
		xor	eax, eax
		jmp	short loc_116
; ---------------------------------------------------------------------------

loc_E2:					; CODE XREF: _UDataMemory_createNewInstance_56+24j
		push	1Ch
		call	_uprv_malloc_56
		add	esp, 4
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jnz	short loc_100
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 7
		jmp	short loc_113
; ---------------------------------------------------------------------------

loc_100:				; CODE XREF: _UDataMemory_createNewInstance_56+3Bj
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	_UDataMemory_init_56
		add	esp, 4
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax+0Ch], 1

loc_113:				; CODE XREF: _UDataMemory_createNewInstance_56+46j
		mov	eax, [ebp+var_8]

loc_116:				; CODE XREF: _UDataMemory_createNewInstance_56+28j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_UDataMemory_createNewInstance_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 12Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _UDataMemory_normalizeDataPointer_56
_UDataMemory_normalizeDataPointer_56 proc near ; CODE XREF: _UDataMemory_setData_56+22p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_171
		mov	eax, [ebp+var_8]
		movzx	ecx, byte ptr [eax+2]
		cmp	ecx, 0DAh ; 'Ú'
		jnz	short loc_178
		mov	eax, [ebp+var_8]
		movzx	ecx, byte ptr [eax+3]
		cmp	ecx, 27h ; '''
		jnz	short loc_178

loc_171:				; CODE XREF: _UDataMemory_normalizeDataPointer_56+28j
		mov	eax, [ebp+var_8]
		jmp	short loc_17E
; ---------------------------------------------------------------------------
		jmp	short loc_17E
; ---------------------------------------------------------------------------

loc_178:				; CODE XREF: _UDataMemory_normalizeDataPointer_56+37j
					; _UDataMemory_normalizeDataPointer_56+43j
		mov	eax, [ebp+arg_0]
		add	eax, 8

loc_17E:				; CODE XREF: _UDataMemory_normalizeDataPointer_56+48j
					; _UDataMemory_normalizeDataPointer_56+4Aj
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_UDataMemory_normalizeDataPointer_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 188h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _UDataMemory_setData_56
_UDataMemory_setData_56	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		push	eax
		call	_UDataMemory_normalizeDataPointer_56
		add	esp, 4
		mov	ecx, [ebp+arg_0]
		mov	[ecx+4], eax
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_UDataMemory_setData_56	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1CCh
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl udata_close_56(void *)
		public _udata_close_56
_udata_close_56	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jz	short loc_221
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_unmapFile_56
		add	esp, 4
		mov	eax, [ebp+arg_0]
		movsx	ecx, byte ptr [eax+0Ch]
		test	ecx, ecx
		jz	short loc_215
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_free_56
		add	esp, 4
		jmp	short loc_221
; ---------------------------------------------------------------------------

loc_215:				; CODE XREF: _udata_close_56+39j
		mov	eax, [ebp+arg_0]
		push	eax		; void *
		call	_UDataMemory_init_56
		add	esp, 4

loc_221:				; CODE XREF: _udata_close_56+22j
					; _udata_close_56+47j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_udata_close_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 238h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _udata_getMemory_56
_udata_getMemory_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jz	short loc_281
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+4], 0
		jz	short loc_281
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		push	ecx
		call	_udata_getHeaderSize_56
		add	esp, 4
		movzx	eax, ax
		mov	edx, [ebp+arg_0]
		add	eax, [edx+4]
		jmp	short loc_283
; ---------------------------------------------------------------------------
		jmp	short loc_283
; ---------------------------------------------------------------------------

loc_281:				; CODE XREF: _udata_getMemory_56+22j
					; _udata_getMemory_56+2Bj
		xor	eax, eax

loc_283:				; CODE XREF: _udata_getMemory_56+45j
					; _udata_getMemory_56+47j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_udata_getMemory_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 298h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _udata_getLength_56
_udata_getLength_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jz	short loc_2EC
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+4], 0
		jz	short loc_2EC
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+18h], 0
		jl	short loc_2EC
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		push	ecx
		call	_udata_getHeaderSize_56
		add	esp, 4
		movzx	edx, ax
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+18h]
		sub	eax, edx
		jmp	short loc_2EF
; ---------------------------------------------------------------------------
		jmp	short loc_2EF
; ---------------------------------------------------------------------------

loc_2EC:				; CODE XREF: _udata_getLength_56+22j
					; _udata_getLength_56+2Bj ...
		or	eax, 0FFFFFFFFh

loc_2EF:				; CODE XREF: _udata_getLength_56+50j
					; _udata_getLength_56+52j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_udata_getLength_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 304h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _udata_getRawMemory_56
_udata_getRawMemory_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jz	short loc_33B
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+4], 0
		jz	short loc_33B
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+4]
		jmp	short loc_33D
; ---------------------------------------------------------------------------
		jmp	short loc_33D
; ---------------------------------------------------------------------------

loc_33B:				; CODE XREF: _udata_getRawMemory_56+22j
					; _udata_getRawMemory_56+2Bj
		xor	eax, eax

loc_33D:				; CODE XREF: _udata_getRawMemory_56+33j
					; _udata_getRawMemory_56+35j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_udata_getRawMemory_56 endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 344h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _UDataMemory_isLoaded_56
_UDataMemory_isLoaded_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		xor	ecx, ecx
		cmp	dword ptr [eax+4], 0
		setnz	cl
		mov	al, cl
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_UDataMemory_isLoaded_56 endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; void *__cdecl	memset(void *, int, size_t)
		extrn _memset:near	; CODE XREF: _UDataMemory_init_56+26p
		extrn __RTC_CheckEsp:near ; CODE XREF: _UDataMemory_init_56+43p
					; _UDatamemory_assign_56+5Bp ...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; void *__cdecl	memcpy(void *, const void *, size_t)
		extrn _memcpy:near	; CODE XREF: _UDatamemory_assign_56+3Fp
		extrn _uprv_checkValidMemory:near ; CODE XREF: _UDatamemory_assign_56+2Dp
		extrn _uprv_malloc_56:near
					; CODE XREF: _UDataMemory_createNewInstance_56+2Cp
		extrn _uprv_free_56:near ; CODE	XREF: _udata_close_56+3Fp
		extrn _uprv_unmapFile_56:near ;	CODE XREF: _udata_close_56+28p
		extrn _udata_getHeaderSize_56:near ; CODE XREF:	_udata_getMemory_56+34p
					; _udata_getLength_56+3Dp


		end
