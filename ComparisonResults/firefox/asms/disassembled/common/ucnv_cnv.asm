;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	8EABE542EC458EF49D6EE9BFF2DD9391
; Input	CRC32 :	C1E22ABF

; File Name   :	D:\compspace\objfiles\firefox\common\ucnv_cnv.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ucnv_getCompleteUnicodeSet_56
_ucnv_getCompleteUnicodeSet_56 proc near

var_C0		= byte ptr -0C0h
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	esi, esp
		push	10FFFFh
		push	0
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+8]
		call	eax
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ucnv_getCompleteUnicodeSet_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 54h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 58h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 5Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ucnv_getNonSurrogateUnicodeSet_56
_ucnv_getNonSurrogateUnicodeSet_56 proc	near

var_C0		= byte ptr -0C0h
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	esi, esp
		push	0D7FFh
		push	0
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+8]
		call	eax
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	10FFFFh
		push	0E000h
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+8]
		call	eax
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ucnv_getNonSurrogateUnicodeSet_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0D4h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ucnv_fromUWriteBytes_56
_ucnv_fromUWriteBytes_56 proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		cmp	[ebp+arg_14], 0
		jz	short loc_10E
		mov	eax, [ebp+arg_14]
		mov	ecx, [eax]
		mov	[ebp+var_14], ecx
		cmp	[ebp+var_14], 0
		jnz	short loc_145

loc_10E:				; CODE XREF: _ucnv_fromUWriteBytes_56+2Aj
					; _ucnv_fromUWriteBytes_56+6Dj
		cmp	[ebp+arg_8], 0
		jle	short loc_143
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_10]
		jnb	short loc_143
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_4]
		mov	dl, [ecx]
		mov	[eax], dl
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_4]
		add	ecx, 1
		mov	[ebp+arg_4], ecx
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax
		jmp	short loc_10E
; ---------------------------------------------------------------------------

loc_143:				; CODE XREF: _ucnv_fromUWriteBytes_56+3Ej
					; _ucnv_fromUWriteBytes_56+46j
		jmp	short loc_193
; ---------------------------------------------------------------------------

loc_145:				; CODE XREF: _ucnv_fromUWriteBytes_56+38j
					; _ucnv_fromUWriteBytes_56+B5j
		cmp	[ebp+arg_8], 0
		jle	short loc_18B
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_10]
		jnb	short loc_18B
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_4]
		mov	dl, [ecx]
		mov	[eax], dl
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_4]
		add	ecx, 1
		mov	[ebp+arg_4], ecx
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_18]
		mov	[eax], ecx
		mov	edx, [ebp+var_14]
		add	edx, 4
		mov	[ebp+var_14], edx
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax
		jmp	short loc_145
; ---------------------------------------------------------------------------

loc_18B:				; CODE XREF: _ucnv_fromUWriteBytes_56+75j
					; _ucnv_fromUWriteBytes_56+7Dj
		mov	eax, [ebp+arg_14]
		mov	ecx, [ebp+var_14]
		mov	[eax], ecx

loc_193:				; CODE XREF: _ucnv_fromUWriteBytes_56:loc_143j
		mov	eax, [ebp+arg_C]
		mov	ecx, [ebp+var_8]
		mov	[eax], ecx
		cmp	[ebp+arg_8], 0
		jle	short loc_1ED
		cmp	[ebp+arg_0], 0
		jz	short loc_1E4
		mov	eax, [ebp+arg_0]
		add	eax, 4Ch ; 'L'
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_0]
		mov	cl, byte ptr [ebp+arg_8]
		mov	[eax+3Fh], cl

loc_1B9:				; CODE XREF: _ucnv_fromUWriteBytes_56+10Ej
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_4]
		mov	dl, [ecx]
		mov	[eax], dl
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_4]
		add	ecx, 1
		mov	[ebp+arg_4], ecx
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax
		cmp	[ebp+arg_8], 0
		jg	short loc_1B9

loc_1E4:				; CODE XREF: _ucnv_fromUWriteBytes_56+D1j
		mov	eax, [ebp+arg_1C]
		mov	dword ptr [eax], 0Fh

loc_1ED:				; CODE XREF: _ucnv_fromUWriteBytes_56+CBj
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_ucnv_fromUWriteBytes_56 endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1F4h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ucnv_toUWriteUChars_56
_ucnv_toUWriteUChars_56	proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		cmp	[ebp+arg_14], 0
		jz	short loc_22E
		mov	eax, [ebp+arg_14]
		mov	ecx, [eax]
		mov	[ebp+var_14], ecx
		cmp	[ebp+var_14], 0
		jnz	short loc_267

loc_22E:				; CODE XREF: _ucnv_toUWriteUChars_56+2Aj
					; _ucnv_toUWriteUChars_56+6Fj
		cmp	[ebp+arg_8], 0
		jle	short loc_265
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_10]
		jnb	short loc_265
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_4]
		mov	dx, [ecx]
		mov	[eax], dx
		mov	eax, [ebp+var_8]
		add	eax, 2
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_4]
		add	ecx, 2
		mov	[ebp+arg_4], ecx
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax
		jmp	short loc_22E
; ---------------------------------------------------------------------------

loc_265:				; CODE XREF: _ucnv_toUWriteUChars_56+3Ej
					; _ucnv_toUWriteUChars_56+46j
		jmp	short loc_2B7
; ---------------------------------------------------------------------------

loc_267:				; CODE XREF: _ucnv_toUWriteUChars_56+38j
					; _ucnv_toUWriteUChars_56+B9j
		cmp	[ebp+arg_8], 0
		jle	short loc_2AF
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_10]
		jnb	short loc_2AF
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_4]
		mov	dx, [ecx]
		mov	[eax], dx
		mov	eax, [ebp+var_8]
		add	eax, 2
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_4]
		add	ecx, 2
		mov	[ebp+arg_4], ecx
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_18]
		mov	[eax], ecx
		mov	edx, [ebp+var_14]
		add	edx, 4
		mov	[ebp+var_14], edx
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax
		jmp	short loc_267
; ---------------------------------------------------------------------------

loc_2AF:				; CODE XREF: _ucnv_toUWriteUChars_56+77j
					; _ucnv_toUWriteUChars_56+7Fj
		mov	eax, [ebp+arg_14]
		mov	ecx, [ebp+var_14]
		mov	[eax], ecx

loc_2B7:				; CODE XREF: _ucnv_toUWriteUChars_56:loc_265j
		mov	eax, [ebp+arg_C]
		mov	ecx, [ebp+var_8]
		mov	[eax], ecx
		cmp	[ebp+arg_8], 0
		jle	short loc_313
		cmp	[ebp+arg_0], 0
		jz	short loc_30A
		mov	eax, [ebp+arg_0]
		add	eax, 74h ; 't'
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_0]
		mov	cl, byte ptr [ebp+arg_8]
		mov	[eax+41h], cl

loc_2DD:				; CODE XREF: _ucnv_toUWriteUChars_56+114j
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_4]
		mov	dx, [ecx]
		mov	[eax], dx
		mov	eax, [ebp+var_8]
		add	eax, 2
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+arg_4]
		add	ecx, 2
		mov	[ebp+arg_4], ecx
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax
		cmp	[ebp+arg_8], 0
		jg	short loc_2DD

loc_30A:				; CODE XREF: _ucnv_toUWriteUChars_56+D5j
		mov	eax, [ebp+arg_1C]
		mov	dword ptr [eax], 0Fh

loc_313:				; CODE XREF: _ucnv_toUWriteUChars_56+CFj
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_ucnv_toUWriteUChars_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 31Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ucnv_toUWriteCodePoint_56
_ucnv_toUWriteCodePoint_56 proc	near

var_E4		= byte ptr -0E4h
var_1D		= byte ptr -1Dh
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_C]
		jnb	loc_40D
		cmp	[ebp+arg_4], 0FFFFh
		jg	short loc_373
		mov	eax, [ebp+var_8]
		mov	cx, word ptr [ebp+arg_4]
		mov	[eax], cx
		mov	edx, [ebp+var_8]
		add	edx, 2
		mov	[ebp+var_8], edx
		mov	[ebp+arg_4], 0FFFFFFFFh
		jmp	short loc_3C2
; ---------------------------------------------------------------------------

loc_373:				; CODE XREF: _ucnv_toUWriteCodePoint_56+39j
		mov	eax, [ebp+arg_4]
		sar	eax, 0Ah
		add	eax, 0D7C0h
		mov	ecx, [ebp+var_8]
		mov	[ecx], ax
		mov	edx, [ebp+var_8]
		add	edx, 2
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_4]
		and	eax, 3FFh
		or	eax, 0DC00h
		movzx	ecx, ax
		mov	[ebp+arg_4], ecx
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_C]
		jnb	short loc_3C2
		mov	eax, [ebp+var_8]
		mov	cx, word ptr [ebp+arg_4]
		mov	[eax], cx
		mov	edx, [ebp+var_8]
		add	edx, 2
		mov	[ebp+var_8], edx
		mov	[ebp+arg_4], 0FFFFFFFFh

loc_3C2:				; CODE XREF: _ucnv_toUWriteCodePoint_56+55j
					; _ucnv_toUWriteCodePoint_56+8Aj
		cmp	[ebp+arg_10], 0
		jz	short loc_40D
		mov	eax, [ebp+arg_10]
		mov	ecx, [eax]
		mov	[ebp+var_14], ecx
		cmp	[ebp+var_14], 0
		jz	short loc_40D
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_14]
		mov	[eax], ecx
		mov	edx, [ebp+var_14]
		add	edx, 4
		mov	[ebp+var_14], edx
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		add	ecx, 2
		cmp	ecx, [ebp+var_8]
		jnb	short loc_405
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_14]
		mov	[eax], ecx
		mov	edx, [ebp+var_14]
		add	edx, 4
		mov	[ebp+var_14], edx

loc_405:				; CODE XREF: _ucnv_toUWriteCodePoint_56+D6j
		mov	eax, [ebp+arg_10]
		mov	ecx, [ebp+var_14]
		mov	[eax], ecx

loc_40D:				; CODE XREF: _ucnv_toUWriteCodePoint_56+2Cj
					; _ucnv_toUWriteCodePoint_56+AAj ...
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+var_8]
		mov	[eax], ecx
		cmp	[ebp+arg_4], 0
		jl	short loc_49A
		cmp	[ebp+arg_0], 0
		jz	short loc_491
		mov	[ebp+var_1D], 0
		cmp	[ebp+arg_4], 0FFFFh
		ja	short loc_448
		movsx	eax, [ebp+var_1D]
		mov	ecx, [ebp+arg_0]
		mov	dx, word ptr [ebp+arg_4]
		mov	[ecx+eax*2+74h], dx
		mov	al, [ebp+var_1D]
		add	al, 1
		mov	[ebp+var_1D], al
		jmp	short loc_488
; ---------------------------------------------------------------------------

loc_448:				; CODE XREF: _ucnv_toUWriteCodePoint_56+110j
		mov	eax, [ebp+arg_4]
		sar	eax, 0Ah
		add	eax, 0D7C0h
		movsx	ecx, [ebp+var_1D]
		mov	edx, [ebp+arg_0]
		mov	[edx+ecx*2+74h], ax
		mov	al, [ebp+var_1D]
		add	al, 1
		mov	[ebp+var_1D], al
		mov	eax, [ebp+arg_4]
		and	eax, 3FFh
		or	eax, 0DC00h
		movsx	ecx, [ebp+var_1D]
		mov	edx, [ebp+arg_0]
		mov	[edx+ecx*2+74h], ax
		mov	al, [ebp+var_1D]
		add	al, 1
		mov	[ebp+var_1D], al

loc_488:				; CODE XREF: _ucnv_toUWriteCodePoint_56+12Aj
		mov	eax, [ebp+arg_0]
		mov	cl, [ebp+var_1D]
		mov	[eax+41h], cl

loc_491:				; CODE XREF: _ucnv_toUWriteCodePoint_56+103j
		mov	eax, [ebp+arg_18]
		mov	dword ptr [eax], 0Fh

loc_49A:				; CODE XREF: _ucnv_toUWriteCodePoint_56+FDj
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_ucnv_toUWriteCodePoint_56 endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_CheckEsp:near ; CODE XREF: _ucnv_getCompleteUnicodeSet_56+3Ap
					; _ucnv_getCompleteUnicodeSet_56+4Ap ...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo


		end
