;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	D8F732DAB53A14802AB4CCA27B0D08D1
; Input	CRC32 :	765078FC

; File Name   :	D:\compspace\objfiles\firefox\common\ucat.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
_SEPARATOR	db 25h			; DATA XREF: __catkey+40r
		align 4
_rdata		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_catopen_56
_u_catopen_56	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ures_open_56
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_catopen_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 4Ch
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 50h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 54h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_catclose_56
_u_catclose_56	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ures_close_56
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_catclose_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 94h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_catgets_56
_u_catgets_56	proc near

var_F0		= byte ptr -0F0h
var_2C		= dword	ptr -2Ch
var_20		= byte ptr -20h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0F0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_F0]
		mov	ecx, 3Ch ; '<'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		cmp	[ebp+arg_14], 0
		jz	short loc_CA
		mov	eax, [ebp+arg_14]
		cmp	dword ptr [eax], 0
		jle	short loc_CC

loc_CA:					; CODE XREF: _u_catgets_56+2Cj
		jmp	short $ERROR$8648
; ---------------------------------------------------------------------------

loc_CC:					; CODE XREF: _u_catgets_56+34j
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		lea	ecx, [ebp+var_20]
		push	ecx
		call	__catkey
		add	esp, 0Ch
		push	eax
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ures_getStringByKey_56
		add	esp, 10h
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+arg_14]
		cmp	dword ptr [eax], 0
		jle	short loc_102
		jmp	short $ERROR$8648
; ---------------------------------------------------------------------------

loc_102:				; CODE XREF: _u_catgets_56+6Aj
		mov	eax, [ebp+var_2C]
		jmp	short loc_121
; ---------------------------------------------------------------------------

$ERROR$8648:				; CODE XREF: _u_catgets_56:loc_CAj
					; _u_catgets_56+6Cj
		cmp	[ebp+arg_10], 0
		jz	short loc_11E
		mov	eax, [ebp+arg_C]
		push	eax
		call	_u_strlen_56
		add	esp, 4
		mov	ecx, [ebp+arg_10]
		mov	[ecx], eax

loc_11E:				; CODE XREF: _u_catgets_56+77j
		mov	eax, [ebp+arg_C]

loc_121:				; CODE XREF: _u_catgets_56+71j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN9
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4
		add	esp, 0F0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_catgets_56	endp

; ---------------------------------------------------------------------------
$LN9		dd 1			; DATA XREF: _u_catgets_56+91o
		dd offset $LN8
$LN8		dd 0FFFFFFE0h, 18h	; DATA XREF: .text:00000154o
		dd offset $LN7
$LN7		dd 79656Bh		; DATA XREF: .text:00000160o
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 168h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

__catkey	proc near		; CODE XREF: _u_catgets_56+4Cp

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		push	0Ah
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_T_CString_integerToString_56
		add	esp, 0Ch
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+var_8]
		mov	cl, _SEPARATOR
		mov	[eax], cl
		mov	edx, [ebp+var_8]
		add	edx, 1
		mov	[ebp+var_8], edx
		push	0Ah
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+var_8]
		push	ecx
		call	_T_CString_integerToString_56
		add	esp, 0Ch
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
__catkey	endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _ures_open_56:near ; CODE	XREF: _u_catopen_56+2Ap
		extrn __RTC_CheckEsp:near ; CODE XREF: _u_catopen_56+3Dp
					; _u_catclose_56+35p ...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn _ures_close_56:near ; CODE XREF: _u_catclose_56+22p
		extrn _u_strlen_56:near	; CODE XREF: _u_catgets_56+7Dp
		extrn _ures_getStringByKey_56:near ; CODE XREF:	_u_catgets_56+59p
		extrn ___security_cookie:near ;	DATA XREF: _u_catgets_56+1Er
		extrn @__security_check_cookie@4:near ;	CODE XREF: _u_catgets_56+A6p
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _u_catgets_56+97p
		extrn _T_CString_integerToString_56:near ; CODE	XREF: __catkey+2Fp
					; __catkey+5Ep


		end
