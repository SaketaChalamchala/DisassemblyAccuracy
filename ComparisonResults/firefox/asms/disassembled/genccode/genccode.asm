;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	AC7AB6BDCD7F5A68BD405CEA9B18A620
; Input	CRC32 :	C6613C01

; File Name   :	D:\compspace\objfiles\firefox\genccode\genccode.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		public ??_C@_08LKDFMABF@assembly?$AA@
; `string'
??_C@_08LKDFMABF@assembly?$AA@ db 'assembly',0 ; DATA XREF: .data:000000F0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0Ch
		public ??_C@_08BABJIOEM@filename?$AA@
; `string'
??_C@_08BABJIOEM@filename?$AA@ db 'filename',0 ; DATA XREF: .data:000000DCo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18h
		public ??_C@_0L@EDIMHJLF@match?9arch?$AA@
; `string'
??_C@_0L@EDIMHJLF@match?9arch?$AA@ db 'match-arch',0 ; DATA XREF: .data:000000C8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 24h
		public ??_C@_06IEOJBDIK@object?$AA@
; `string'
??_C@_06IEOJBDIK@object?$AA@ db	'object',0 ; DATA XREF: .data:000000B4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2Ch
		public ??_C@_0L@BPGLNOGK@entrypoint?$AA@
; `string'
??_C@_0L@BPGLNOGK@entrypoint?$AA@ db 'entrypoint',0 ; DATA XREF: .data:000000A0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 38h
		public ??_C@_04MEMAJGDJ@name?$AA@
; `string'
??_C@_04MEMAJGDJ@name?$AA@ db 'name',0  ; DATA XREF: .data:0000008Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 40h
		public ??_C@_07HIFNFPHK@destdir?$AA@
; `string'
??_C@_07HIFNFPHK@destdir?$AA@ db 'destdir',0 ; DATA XREF: .data:00000078o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 48h
		public ??_C@_04PCJFHION@help?$AA@
; `string'
??_C@_04PCJFHION@help?$AA@ db 'help',0  ; DATA XREF: .data:_optionso
					; .data:00000064o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 50h
_options	dd offset ??_C@_04PCJFHION@help?$AA@ ; DATA XREF: _main+2Co
					; "help"
		align 10h
		db 68h,	0
byte_62		db 0			; DATA XREF: _main+88r
		align 4
		dd offset ??_C@_04PCJFHION@help?$AA@ ; "help"
		dd 3 dup(0)
		db 3Fh,	0
byte_76		db 0			; DATA XREF: _main+93r
		align 4
		dd offset ??_C@_07HIFNFPHK@destdir?$AA@	; "destdir"
dword_7C	dd 0			; DATA XREF: _main+22w	_main+260r ...
		dd 2 dup(0)
		dd offset loc_163+1
		dd offset ??_C@_04MEMAJGDJ@name?$AA@ ; "name"
dword_90	dd 0			; DATA XREF: _main+259r
		dd 2 dup(0)
		db 6Eh,	1
byte_9E		db 0			; DATA XREF: _main+24Er
		align 10h
		dd offset ??_C@_0L@BPGLNOGK@entrypoint?$AA@ ; "entrypoint"
dword_A4	dd 0			; DATA XREF: _main+297r _main+2E4r
		align 10h
		db 65h,	1
byte_B2		db 0			; DATA XREF: _main+28Cr _main+2D9r
		align 4
		dd offset ??_C@_06IEOJBDIK@object?$AA@ ; "object"
		dd 3 dup(0)
		db 6Fh,	0
byte_C6		db 0			; DATA XREF: _main:loc_299r
		align 4
		dd offset ??_C@_0L@EDIMHJLF@match?9arch?$AA@ ; "match-arch"
dword_CC	dd 0			; DATA XREF: _main+2D2r
		dd 2 dup(0)
		db 6Dh,	1
byte_DA		db 0			; DATA XREF: _main+2C7r
		align 4
		dd offset ??_C@_08BABJIOEM@filename?$AA@ ; "filename"
dword_E0	dd 0			; DATA XREF: _main+247r _main+285r ...
		dd 2 dup(0)
		db 66h,	1
byte_EE		db 0			; DATA XREF: _main+23Cr _main+27Ar ...
		align 10h
		dd offset ??_C@_08LKDFMABF@assembly?$AA@ ; "assembly"
dword_F4	dd 0			; DATA XREF: _main+146r _main+15Dr
		align 10h
		db 61h,	1
byte_102	db 0			; DATA XREF: _main:loc_234r
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 104h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public _main
_main		proc near

var_F4		= byte ptr -0F4h
var_2C		= dword	ptr -2Ch
Format		= dword	ptr -20h
var_11		= byte ptr -11h
var_5		= byte ptr -5
argc		= dword	ptr  8
argv		= dword	ptr  0Ch
envp		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0F4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_F4]
		mov	ecx, 3Dh ; '='
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_5], 1
		mov	ds:dword_7C, offset ??_C@_01LFCBOECM@?4?$AA@ ; `string'
		push	offset _options
		push	9
		mov	eax, [ebp+argv]
		push	eax
		mov	ecx, [ebp+argc]
		push	ecx
		call	_u_parseArgs
		add	esp, 10h
		mov	[ebp+argc], eax
		cmp	[ebp+argc], 0
		jge	short loc_186
		mov	eax, [ebp+argc]
		neg	eax
		mov	esi, esp
		mov	ecx, [ebp+argv]
		mov	edx, [ecx+eax*4]
		push	edx
		push	offset ??_C@_0CF@BGPNLJEE@error?5in?5command?5line?5argument?5?$CC@ ; "error in	command	line argument \"%s\"\n"

loc_163:				; DATA XREF: .data:00000088o
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_186:				; CODE XREF: _main+4Aj
		cmp	[ebp+argc], 0
		jl	short loc_1A6
		movsx	eax, ds:byte_62
		test	eax, eax
		jnz	short loc_1A6
		movsx	eax, ds:byte_76
		test	eax, eax
		jz	loc_234

loc_1A6:				; CODE XREF: _main+86j	_main+91j
		mov	esi, esp
		mov	eax, [ebp+argv]
		mov	ecx, [eax]
		push	ecx
		push	offset ??_C@_0BLN@IFKELJHJ@usage?3?5?$CFs?5?$FL?9options?$FN?5filename1?5f@ ; "usage: %s [-options] filename1 filename"...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	offset ??_C@_0OK@CBNEBILO@?7?9o?5or?5?9?9object?5?5?5?5?5?5write?5a?5?4ob@ ; "\t-o or --object	    write a .obj file"...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	offset ??_C@_0JF@ELKGNILA@?7?9f?5or?5?9?9filename?5?5?5?5Specify?5an?5@	; "\t-f	or --filename	 Specify an altern"...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		call	_printAssemblyHeadersToStdErr
		jmp	loc_406
; ---------------------------------------------------------------------------

loc_234:				; CODE XREF: _main+9Cj
		movsx	eax, ds:byte_102
		test	eax, eax
		jz	short loc_299
		mov	[ebp+Format], offset ??_C@_0CB@BDINFBLB@generating?5assembly?5code?5for?5?$CFs?6@ ; "generating	assembly code for %s\n"
		mov	[ebp+var_11], 61h ; 'a'
		mov	eax, ds:dword_F4
		push	eax
		call	_checkAssemblyHeaderName
		add	esp, 4
		movsx	ecx, al
		test	ecx, ecx
		jnz	short loc_297
		mov	esi, esp
		mov	eax, ds:dword_F4
		push	eax
		push	offset ??_C@_0CA@LDKEGMIE@Assembly?5type?5?$CC?$CFs?$CC?5is?5unknown?4?6?$AA@ ;	"Assembly type \"%s\" is unknown.\n"
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		or	eax, 0FFFFFFFFh
		jmp	loc_408
; ---------------------------------------------------------------------------

loc_297:				; CODE XREF: _main+159j
		jmp	short loc_2BC
; ---------------------------------------------------------------------------

loc_299:				; CODE XREF: _main+139j
		movsx	eax, ds:byte_C6
		test	eax, eax
		jz	short loc_2B1
		mov	[ebp+Format], offset ??_C@_0BP@NABGCAI@generating?5object?5code?5for?5?$CFs?6?$AA@ ; "generating object	code for %s\n"
		mov	[ebp+var_11], 6Fh ; 'o'
		jmp	short loc_2BC
; ---------------------------------------------------------------------------

loc_2B1:				; CODE XREF: _main+19Ej
		mov	[ebp+Format], offset ??_C@_0BK@HKNBMBBN@generating?5C?5code?5for?5?$CFs?6?$AA@ ; "generating C code for	%s\n"
		mov	[ebp+var_11], 63h ; 'c'

loc_2BC:				; CODE XREF: _main:loc_297j _main+1ABj ...
		mov	eax, [ebp+argc]
		sub	eax, 1
		mov	[ebp+argc], eax
		jz	loc_406
		mov	eax, [ebp+argc]
		mov	ecx, [ebp+argv]
		mov	edx, [ecx+eax*4]
		push	edx
		call	_getLongPathname
		add	esp, 4
		mov	[ebp+var_2C], eax
		movsx	eax, [ebp+var_5]
		test	eax, eax
		jz	short loc_315
		mov	esi, esp
		mov	eax, [ebp+var_2C]
		push	eax
		mov	ecx, [ebp+Format]
		push	ecx		; Format
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 20h ; ' '
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_315:				; CODE XREF: _main+1E2j
		mov	al, [ebp+var_11]
		mov	[ebp+var_F4], al
		cmp	[ebp+var_F4], 61h ; 'a'
		jz	short loc_37C
		cmp	[ebp+var_F4], 63h ; 'c'
		jz	short loc_33E
		cmp	[ebp+var_F4], 6Fh ; 'o'
		jz	short loc_3B7
		jmp	loc_401
; ---------------------------------------------------------------------------

loc_33E:				; CODE XREF: _main+22Aj
		push	0
		movsx	eax, ds:byte_EE
		neg	eax
		sbb	eax, eax
		and	eax, ds:dword_E0
		push	eax
		movsx	ecx, ds:byte_9E
		neg	ecx
		sbb	ecx, ecx
		and	ecx, ds:dword_90
		push	ecx
		mov	edx, ds:dword_7C
		push	edx
		mov	eax, [ebp+var_2C]
		push	eax
		call	_writeCCode
		add	esp, 14h
		jmp	loc_401
; ---------------------------------------------------------------------------

loc_37C:				; CODE XREF: _main+221j
		push	0
		movsx	eax, ds:byte_EE
		neg	eax
		sbb	eax, eax
		and	eax, ds:dword_E0
		push	eax
		movsx	ecx, ds:byte_B2
		neg	ecx
		sbb	ecx, ecx
		and	ecx, ds:dword_A4
		push	ecx
		mov	edx, ds:dword_7C
		push	edx
		mov	eax, [ebp+var_2C]
		push	eax
		call	_writeAssemblyCode
		add	esp, 14h
		jmp	short loc_401
; ---------------------------------------------------------------------------

loc_3B7:				; CODE XREF: _main+233j
		push	0
		movsx	eax, ds:byte_EE
		neg	eax
		sbb	eax, eax
		and	eax, ds:dword_E0
		push	eax
		movsx	ecx, ds:byte_DA
		neg	ecx
		sbb	ecx, ecx
		and	ecx, ds:dword_CC
		push	ecx
		movsx	edx, ds:byte_B2
		neg	edx
		sbb	edx, edx
		and	edx, ds:dword_A4
		push	edx
		mov	eax, ds:dword_7C
		push	eax
		mov	ecx, [ebp+var_2C]
		push	ecx
		call	_writeObjectCode
		add	esp, 18h

loc_401:				; CODE XREF: _main+235j _main+273j ...
		jmp	loc_2BC
; ---------------------------------------------------------------------------

loc_406:				; CODE XREF: _main+12Bj _main+1C1j
		xor	eax, eax

loc_408:				; CODE XREF: _main+18Ej
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0F4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_main		endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 41Ch
		public ??_C@_0BK@HKNBMBBN@generating?5C?5code?5for?5?$CFs?6?$AA@
; `string'
??_C@_0BK@HKNBMBBN@generating?5C?5code?5for?5?$CFs?6?$AA@ db 'generating C code for %s',0Ah,0
					; DATA XREF: _main:loc_2B1o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 438h
		public ??_C@_0BP@NABGCAI@generating?5object?5code?5for?5?$CFs?6?$AA@
; `string'
??_C@_0BP@NABGCAI@generating?5object?5code?5for?5?$CFs?6?$AA@ db 'generating object code for %s',0Ah,0
					; DATA XREF: _main+1A0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 458h
		public ??_C@_0CA@LDKEGMIE@Assembly?5type?5?$CC?$CFs?$CC?5is?5unknown?4?6?$AA@
; char `string'[]
??_C@_0CA@LDKEGMIE@Assembly?5type?5?$CC?$CFs?$CC?5is?5unknown?4?6?$AA@ db 'Assembly type "%s" is unknown.',0Ah,0
					; DATA XREF: _main+163o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 478h
		public ??_C@_0CB@BDINFBLB@generating?5assembly?5code?5for?5?$CFs?6@
; `string'
??_C@_0CB@BDINFBLB@generating?5assembly?5code?5for?5?$CFs?6@ db	'generating assembly code for %s',0Ah,0
					; DATA XREF: _main+13Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 49Ch
		public ??_C@_0JF@ELKGNILA@?7?9f?5or?5?9?9filename?5?5?5?5Specify?5an?5@
; char `string'[]
??_C@_0JF@ELKGNILA@?7?9f?5or?5?9?9filename?5?5?5?5Specify?5an?5@ db 9,'-f or --filename    Specify an alternate base filename. (default'
					; DATA XREF: _main+FEo
		db ': symbolname_typ)',0Ah
		db 9,'-a or --assembly    Create assembly file. (possible values are: '
		db 0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 534h
		public ??_C@_0OK@CBNEBILO@?7?9o?5or?5?9?9object?5?5?5?5?5?5write?5a?5?4ob@
; char `string'[]
??_C@_0OK@CBNEBILO@?7?9o?5or?5?9?9object?5?5?5?5?5?5write?5a?5?4ob@ db 9,'-o or --object      write a .obj file instead of .c',0Ah
					; DATA XREF: _main+D4o
		db 9,'-m or --match-arch file.o  match the architecture (CPU, 32/64 bi'
		db 'ts) of the specified .o',0Ah
		db 9,'                    ELF format defaults to i386. Windows default'
		db 's to the native platform.',0Ah,0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 620h
		public ??_C@_0BLN@IFKELJHJ@usage?3?5?$CFs?5?$FL?9options?$FN?5filename1?5f@
; char `string'[]
??_C@_0BLN@IFKELJHJ@usage?3?5?$CFs?5?$FL?9options?$FN?5filename1?5f@ db	'usage: %s [-options] filename1 filename2 ...',0Ah
					; DATA XREF: _main+AAo
		db 9,'read each binary input file and ',0Ah
		db 9,'create a .c file with a byte array that contains the input file',27h
		db 's data',0Ah
		db 'options:',0Ah
		db 9,'-h or -? or --help  this usage text',0Ah
		db 9,'-d or --destdir     destination directory, followed by the path',0Ah
		db 9,'-n or --name        symbol prefix, followed by the prefix',0Ah
		db 9,'-e or --entrypoint  entry point name, followed by the name (_dat'
		db ' will be appended)',0Ah
		db 9,'-r or --revision    Specify a version',0Ah,0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7E0h
		public ??_C@_0CF@BGPNLJEE@error?5in?5command?5line?5argument?5?$CC@
; char `string'[]
??_C@_0CF@BGPNLJEE@error?5in?5command?5line?5argument?5?$CC@ db	'error in command line argument "%s"',0Ah,0
					; DATA XREF: _main+5Ao
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 808h
		public ??_C@_01LFCBOECM@?4?$AA@
; `string'
??_C@_01LFCBOECM@?4?$AA@ db 2Eh, 0	; DATA XREF: _main+22o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 80Ch
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 810h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _writeObjectCode:near ; CODE XREF: _main+2F5p
		extrn _writeAssemblyCode:near ;	CODE XREF: _main+2A9p
		extrn _writeCCode:near	; CODE XREF: _main+26Bp
		extrn _getLongPathname:near ; CODE XREF: _main+1D1p
		extrn _checkAssemblyHeaderName:near ; CODE XREF: _main+14Cp
		extrn _printAssemblyHeadersToStdErr:near ; CODE	XREF: _main+126p
; int _fprintf(FILE *File, const char *Format, ...)
		extrn __imp__fprintf:near ; CODE XREF: _main+72p _main+C2p ...
; FILE *__cdecl	___iob_func()
		extrn __imp____iob_func:near ; CODE XREF: _main+61p _main+B1p	...
		extrn _u_parseArgs:near	; CODE XREF: _main+3Bp
		extrn __RTC_CheckEsp:near ; CODE XREF: _main+69p _main+7Dp ...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo


		end
