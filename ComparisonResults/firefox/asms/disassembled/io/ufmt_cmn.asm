;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	4C7440EC76D5029C72F97F3744945280
; Input	CRC32 :	91F40552

; File Name   :	D:\compspace\objfiles\firefox\io\ufmt_cmn.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ufmt_digitvalue_56
_ufmt_digitvalue_56 proc near		; CODE XREF: _ufmt_isdigit_56+23p
					; _ufmt_uto64_56+9Cp ...

var_C4		= dword	ptr -0C4h
arg_0		= word ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C4]
		mov	ecx, 31h ; '1'
		mov	eax, 0CCCCCCCCh
		rep stosd
		movzx	eax, [ebp+arg_0]
		cmp	eax, 30h ; '0'
		jl	short loc_30
		movzx	eax, [ebp+arg_0]
		cmp	eax, 39h ; '9'
		jle	short loc_54

loc_30:					; CODE XREF: _ufmt_digitvalue_56+25j
		movzx	eax, [ebp+arg_0]
		cmp	eax, 61h ; 'a'
		jl	short loc_42
		movzx	eax, [ebp+arg_0]
		cmp	eax, 7Ah ; 'z'
		jle	short loc_54

loc_42:					; CODE XREF: _ufmt_digitvalue_56+37j
		movzx	eax, [ebp+arg_0]
		cmp	eax, 41h ; 'A'
		jl	short loc_95
		movzx	eax, [ebp+arg_0]
		cmp	eax, 5Ah ; 'Z'
		jg	short loc_95

loc_54:					; CODE XREF: _ufmt_digitvalue_56+2Ej
					; _ufmt_digitvalue_56+40j
		movzx	eax, [ebp+arg_0]
		cmp	eax, 41h ; 'A'
		jl	short loc_7A
		movzx	ecx, [ebp+arg_0]
		xor	edx, edx
		cmp	ecx, 61h ; 'a'
		setl	dl
		sub	edx, 1
		and	edx, 20h
		add	edx, 7
		mov	[ebp+var_C4], edx
		jmp	short loc_84
; ---------------------------------------------------------------------------

loc_7A:					; CODE XREF: _ufmt_digitvalue_56+5Bj
		mov	[ebp+var_C4], 0

loc_84:					; CODE XREF: _ufmt_digitvalue_56+78j
		movzx	eax, [ebp+arg_0]
		sub	eax, 30h ; '0'
		sub	eax, [ebp+var_C4]
		jmp	short loc_98
; ---------------------------------------------------------------------------
		jmp	short loc_98
; ---------------------------------------------------------------------------

loc_95:					; CODE XREF: _ufmt_digitvalue_56+49j
					; _ufmt_digitvalue_56+52j
		or	eax, 0FFFFFFFFh

loc_98:					; CODE XREF: _ufmt_digitvalue_56+91j
					; _ufmt_digitvalue_56+93j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_ufmt_digitvalue_56 endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 0A0h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 0A4h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A8h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ufmt_isdigit_56
_ufmt_isdigit_56 proc near		; CODE XREF: _ufmt_uto64_56+4Dp
					; _ufmt_utop_56+7Dp

var_D0		= byte ptr -0D0h
var_CD		= byte ptr -0CDh
var_8		= dword	ptr -8
arg_0		= word ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		movzx	eax, [ebp+arg_0]
		push	eax
		call	_ufmt_digitvalue_56
		add	esp, 4
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_4]
		jge	short loc_ED
		cmp	[ebp+var_8], 0
		jl	short loc_ED
		mov	[ebp+var_CD], 1
		jmp	short loc_F4
; ---------------------------------------------------------------------------

loc_ED:					; CODE XREF: _ufmt_isdigit_56+34j
					; _ufmt_isdigit_56+3Aj
		mov	[ebp+var_CD], 0

loc_F4:					; CODE XREF: _ufmt_isdigit_56+43j
		mov	al, [ebp+var_CD]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ufmt_isdigit_56 endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 110h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ufmt_64tou_56
_ufmt_64tou_56	proc near

var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_38		= word ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= byte ptr  18h
arg_14		= byte ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_108]
		mov	ecx, 42h ; 'B'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0

loc_135:				; CODE XREF: _ufmt_64tou_56+D8j
		movzx	eax, [ebp+arg_10]
		cdq
		push	edx
		push	eax
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		call	__aullrem
		mov	[ebp+var_14], eax
		movzx	eax, [ebp+arg_10]
		cdq
		push	edx
		push	eax
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		call	__aulldiv
		mov	[ebp+arg_8], eax
		mov	[ebp+arg_C], edx
		movsx	eax, [ebp+arg_14]
		test	eax, eax
		jz	short loc_19C
		cmp	[ebp+var_14], 9
		ja	short loc_182
		mov	ecx, [ebp+var_14]
		add	ecx, 30h ; '0'
		mov	[ebp+var_100], ecx
		jmp	short loc_18E
; ---------------------------------------------------------------------------

loc_182:				; CODE XREF: _ufmt_64tou_56+62j
		mov	edx, [ebp+var_14]
		add	edx, 57h ; 'W'
		mov	[ebp+var_100], edx

loc_18E:				; CODE XREF: _ufmt_64tou_56+70j
		mov	eax, [ebp+var_100]
		mov	[ebp+var_104], eax
		jmp	short loc_1C8
; ---------------------------------------------------------------------------

loc_19C:				; CODE XREF: _ufmt_64tou_56+5Cj
		cmp	[ebp+var_14], 9
		ja	short loc_1B0
		mov	ecx, [ebp+var_14]
		add	ecx, 30h ; '0'
		mov	[ebp+var_108], ecx
		jmp	short loc_1BC
; ---------------------------------------------------------------------------

loc_1B0:				; CODE XREF: _ufmt_64tou_56+90j
		mov	edx, [ebp+var_14]
		add	edx, 37h ; '7'
		mov	[ebp+var_108], edx

loc_1BC:				; CODE XREF: _ufmt_64tou_56+9Ej
		mov	eax, [ebp+var_108]
		mov	[ebp+var_104], eax

loc_1C8:				; CODE XREF: _ufmt_64tou_56+8Aj
		mov	ecx, [ebp+var_8]
		mov	edx, [ebp+arg_0]
		mov	ax, word ptr [ebp+var_104]
		mov	[edx+ecx*2], ax
		mov	ecx, [ebp+var_8]
		add	ecx, 1
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_8]
		or	eax, [ebp+arg_C]
		jnz	loc_135
		cmp	[ebp+arg_18], 0FFFFFFFFh
		jz	short loc_228
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_18]
		jge	short loc_228

loc_1FC:				; CODE XREF: _ufmt_64tou_56+116j
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_18]
		jge	short loc_228
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		cmp	ecx, [eax]
		jge	short loc_228
		mov	eax, 30h ; '0'
		mov	ecx, [ebp+var_8]
		mov	edx, [ebp+arg_0]
		mov	[edx+ecx*2], ax
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		jmp	short loc_1FC
; ---------------------------------------------------------------------------

loc_228:				; CODE XREF: _ufmt_64tou_56+E2j
					; _ufmt_64tou_56+EAj ...
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_2C], edx

loc_23A:				; CODE XREF: _ufmt_64tou_56+164j
		mov	eax, [ebp+var_2C]
		sub	eax, 2
		mov	[ebp+var_2C], eax
		mov	ecx, [ebp+var_20]
		cmp	ecx, [ebp+var_2C]
		jnb	short loc_276
		mov	eax, [ebp+var_20]
		mov	cx, [eax]
		mov	[ebp+var_38], cx
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_2C]
		mov	dx, [ecx]
		mov	[eax], dx
		mov	eax, [ebp+var_20]
		add	eax, 2
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_2C]
		mov	cx, [ebp+var_38]
		mov	[eax], cx
		jmp	short loc_23A
; ---------------------------------------------------------------------------

loc_276:				; CODE XREF: _ufmt_64tou_56+139j
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		mov	[eax], ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 108h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ufmt_64tou_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 294h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ufmt_ptou_56
_ufmt_ptou_56	proc near

var_10C		= dword	ptr -10Ch
var_44		= word ptr -44h
var_38		= word ptr -38h
var_29		= byte ptr -29h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 10Ch
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_10C]
		mov	ecx, 43h ; 'C'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_14], 0
		lea	eax, [ebp+arg_8]
		mov	[ebp+var_20], eax
		mov	[ebp+var_8], 3
		jmp	short loc_2D1
; ---------------------------------------------------------------------------

loc_2C8:				; CODE XREF: _ufmt_ptou_56:loc_406j
		mov	eax, [ebp+var_8]
		sub	eax, 1
		mov	[ebp+var_8], eax

loc_2D1:				; CODE XREF: _ufmt_ptou_56+32j
		cmp	[ebp+var_8], 0
		jl	loc_40B
		mov	eax, [ebp+var_20]
		add	eax, [ebp+var_8]
		mov	cl, [eax]
		mov	[ebp+var_29], cl
		movzx	eax, [ebp+var_29]
		sar	eax, 4
		mov	[ebp+var_38], ax
		movzx	eax, [ebp+var_29]
		and	eax, 0Fh
		mov	[ebp+var_44], ax
		movsx	eax, [ebp+arg_C]
		test	eax, eax
		jz	loc_388
		movzx	eax, [ebp+var_38]
		cmp	eax, 9
		jg	short loc_320
		movzx	ecx, [ebp+var_38]
		add	ecx, 30h ; '0'
		mov	[ebp+var_10C], ecx
		jmp	short loc_32D
; ---------------------------------------------------------------------------

loc_320:				; CODE XREF: _ufmt_ptou_56+7Bj
		movzx	edx, [ebp+var_38]
		add	edx, 57h ; 'W'
		mov	[ebp+var_10C], edx

loc_32D:				; CODE XREF: _ufmt_ptou_56+8Aj
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_0]
		mov	dx, word ptr [ebp+var_10C]
		mov	[ecx+eax*2], dx
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		movzx	eax, [ebp+var_44]
		cmp	eax, 9
		jg	short loc_35F
		movzx	ecx, [ebp+var_44]
		add	ecx, 30h ; '0'
		mov	[ebp+var_10C], ecx
		jmp	short loc_36C
; ---------------------------------------------------------------------------

loc_35F:				; CODE XREF: _ufmt_ptou_56+BAj
		movzx	edx, [ebp+var_44]
		add	edx, 57h ; 'W'
		mov	[ebp+var_10C], edx

loc_36C:				; CODE XREF: _ufmt_ptou_56+C9j
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_0]
		mov	dx, word ptr [ebp+var_10C]
		mov	[ecx+eax*2], dx
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		jmp	short loc_406
; ---------------------------------------------------------------------------

loc_388:				; CODE XREF: _ufmt_ptou_56+6Ej
		movzx	eax, [ebp+var_38]
		cmp	eax, 9
		jg	short loc_3A0
		movzx	ecx, [ebp+var_38]
		add	ecx, 30h ; '0'
		mov	[ebp+var_10C], ecx
		jmp	short loc_3AD
; ---------------------------------------------------------------------------

loc_3A0:				; CODE XREF: _ufmt_ptou_56+FBj
		movzx	edx, [ebp+var_38]
		add	edx, 37h ; '7'
		mov	[ebp+var_10C], edx

loc_3AD:				; CODE XREF: _ufmt_ptou_56+10Aj
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_0]
		mov	dx, word ptr [ebp+var_10C]
		mov	[ecx+eax*2], dx
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		movzx	eax, [ebp+var_44]
		cmp	eax, 9
		jg	short loc_3DF
		movzx	ecx, [ebp+var_44]
		add	ecx, 30h ; '0'
		mov	[ebp+var_10C], ecx
		jmp	short loc_3EC
; ---------------------------------------------------------------------------

loc_3DF:				; CODE XREF: _ufmt_ptou_56+13Aj
		movzx	edx, [ebp+var_44]
		add	edx, 37h ; '7'
		mov	[ebp+var_10C], edx

loc_3EC:				; CODE XREF: _ufmt_ptou_56+149j
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_0]
		mov	dx, word ptr [ebp+var_10C]
		mov	[ecx+eax*2], dx
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax

loc_406:				; CODE XREF: _ufmt_ptou_56+F2j
		jmp	loc_2C8
; ---------------------------------------------------------------------------

loc_40B:				; CODE XREF: _ufmt_ptou_56+41j
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_14]
		mov	[eax], ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_ufmt_ptou_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 41Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ufmt_uto64_56
_ufmt_uto64_56	proc near

var_EC		= byte ptr -0ECh
var_EA		= word ptr -0EAh
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0ECh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_EC]
		mov	ecx, 3Bh ; ';'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		lea	eax, [edx+ecx*2]
		mov	[ebp+var_8], eax
		mov	[ebp+var_14], 0
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0

loc_45D:				; CODE XREF: _ufmt_uto64_56+BAj
		movsx	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		movzx	edx, word ptr [ecx]
		push	edx
		call	_ufmt_isdigit_56
		add	esp, 8
		movsx	eax, al
		test	eax, eax
		jz	short loc_4D8
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+var_8]
		jnb	short loc_4D8
		movsx	eax, [ebp+arg_8]
		cdq
		push	edx
		push	eax
		mov	eax, [ebp+var_20]
		push	eax
		mov	ecx, [ebp+var_24]
		push	ecx
		call	__allmul
		mov	[ebp+var_24], eax
		mov	[ebp+var_20], edx
		mov	eax, [ebp+arg_0]
		mov	cx, [eax]
		mov	[ebp+var_EA], cx
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx
		movzx	eax, [ebp+var_EA]
		push	eax
		call	_ufmt_digitvalue_56
		add	esp, 4
		cdq
		add	eax, [ebp+var_24]
		adc	edx, [ebp+var_20]
		mov	[ebp+var_24], eax
		mov	[ebp+var_20], edx
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		jmp	short loc_45D
; ---------------------------------------------------------------------------

loc_4D8:				; CODE XREF: _ufmt_uto64_56+5Aj
					; _ufmt_uto64_56+62j
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_14]
		mov	[eax], ecx
		mov	eax, [ebp+var_24]
		mov	edx, [ebp+var_20]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0ECh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ufmt_uto64_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4FCh
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ufmt_utop_56
_ufmt_utop_56	proc near

var_108		= byte ptr -108h
var_41		= byte ptr -41h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_108]
		mov	ecx, 42h ; 'B'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	[ebp+var_2C], 0
		mov	[ebp+var_38], 0

loc_52F:				; CODE XREF: _ufmt_utop_56+6Ej
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		movzx	edx, word ptr [ecx+eax*2]
		cmp	edx, 30h ; '0'
		jz	short loc_558
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		movzx	edx, word ptr [ecx+eax*2]
		push	edx
		call	_u_isspace_56
		add	esp, 4
		movsx	eax, al
		test	eax, eax
		jz	short loc_56C

loc_558:				; CODE XREF: _ufmt_utop_56+40j
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_2C]
		add	eax, 1
		mov	[ebp+var_2C], eax
		jmp	short loc_52F
; ---------------------------------------------------------------------------

loc_56C:				; CODE XREF: _ufmt_utop_56+5Aj
					; _ufmt_utop_56+9Fj
		push	10h
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		movzx	edx, word ptr [ecx+eax*2]
		push	edx
		call	_ufmt_isdigit_56
		add	esp, 8
		movsx	eax, al
		test	eax, eax
		jz	short loc_59D
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		cmp	ecx, [eax]
		jge	short loc_59D
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		jmp	short loc_56C
; ---------------------------------------------------------------------------

loc_59D:				; CODE XREF: _ufmt_utop_56+8Aj
					; _ufmt_utop_56+94j
		mov	eax, [ebp+var_8]
		sub	eax, [ebp+var_2C]
		cmp	eax, 8
		jle	short loc_5B1
		mov	eax, [ebp+var_8]
		sub	eax, 8
		mov	[ebp+var_2C], eax

loc_5B1:				; CODE XREF: _ufmt_utop_56+AAj
		mov	[ebp+var_20], 1
		mov	[ebp+var_14], 0
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		mov	[eax], ecx

loc_5C7:				; CODE XREF: _ufmt_utop_56+135j
		mov	eax, [ebp+var_8]
		sub	eax, 1
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+var_8]
		cmp	ecx, [ebp+var_2C]
		jl	short loc_633
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		movzx	edx, word ptr [ecx+eax*2]
		push	edx
		call	_ufmt_digitvalue_56
		add	esp, 4
		mov	[ebp+var_41], al
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+var_2C]
		jle	short loc_61E
		mov	eax, [ebp+var_8]
		sub	eax, 1
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ebp+arg_0]
		movzx	eax, word ptr [edx+ecx*2]
		push	eax
		call	_ufmt_digitvalue_56
		add	esp, 4
		shl	eax, 4
		movzx	ecx, [ebp+var_41]
		add	ecx, eax
		mov	[ebp+var_41], cl

loc_61E:				; CODE XREF: _ufmt_utop_56+F8j
		mov	eax, [ebp+var_14]
		mov	cl, [ebp+var_41]
		mov	byte ptr [ebp+eax+var_38], cl
		mov	eax, [ebp+var_14]
		add	eax, [ebp+var_20]
		mov	[ebp+var_14], eax
		jmp	short loc_5C7
; ---------------------------------------------------------------------------

loc_633:				; CODE XREF: _ufmt_utop_56+DAj
		mov	eax, [ebp+var_38]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN14
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 108h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ufmt_utop_56	endp

; ---------------------------------------------------------------------------
		align 4
$LN14		dd 1			; DATA XREF: _ufmt_utop_56+13Eo
		dd offset $LN13
$LN13		dd 0FFFFFFC8h, 4	; DATA XREF: .text:00000660o
		dd offset $LN12		; "result"
$LN12		db 'result',0           ; DATA XREF: .text:0000066Co
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 678h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ufmt_defaultCPToUnicode_56(char *, int, int, int)
		public _ufmt_defaultCPToUnicode_56
_ufmt_defaultCPToUnicode_56 proc near

var_E4		= byte ptr -0E4h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_14], 0
		lea	eax, [ebp+var_14]
		push	eax
		call	_u_getDefaultConverter_56
		add	esp, 4
		mov	[ebp+var_20], eax
		cmp	[ebp+var_14], 0
		jg	short loc_6B8
		cmp	[ebp+var_20], 0
		jnz	short loc_6BC

loc_6B8:				; CODE XREF: _ufmt_defaultCPToUnicode_56+38j
		xor	eax, eax
		jmp	short loc_728
; ---------------------------------------------------------------------------

loc_6BC:				; CODE XREF: _ufmt_defaultCPToUnicode_56+3Ej
		cmp	[ebp+arg_4], 0
		jg	short loc_6D4
		mov	eax, [ebp+arg_0]
		push	eax		; char *
		call	_strlen
		add	esp, 4
		add	eax, 1
		mov	[ebp+arg_4], eax

loc_6D4:				; CODE XREF: _ufmt_defaultCPToUnicode_56+48j
		cmp	[ebp+arg_8], 0
		jz	short loc_719
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_8], eax
		lea	eax, [ebp+var_14]
		push	eax
		push	1
		push	0
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_0]
		lea	eax, [edx+ecx-1]
		push	eax
		lea	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+arg_C]
		mov	eax, [ebp+var_8]
		lea	ecx, [eax+edx*2]
		push	ecx
		lea	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+var_20]
		push	eax
		call	_ucnv_toUnicode_56
		add	esp, 20h
		xor	eax, eax
		mov	ecx, [ebp+var_8]
		mov	[ecx], ax

loc_719:				; CODE XREF: _ufmt_defaultCPToUnicode_56+60j
		mov	eax, [ebp+var_20]
		push	eax
		call	_u_releaseDefaultConverter_56
		add	esp, 4
		mov	eax, [ebp+arg_8]

loc_728:				; CODE XREF: _ufmt_defaultCPToUnicode_56+42j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN10
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ufmt_defaultCPToUnicode_56 endp

; ---------------------------------------------------------------------------
		align 10h
$LN10		dd 2			; DATA XREF: _ufmt_defaultCPToUnicode_56+B4o
		dd offset $LN9
$LN9		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00000754o
		dd offset $LN7		; "alias"
		dd 0FFFFFFECh, 4
		dd offset $LN8		; "status"
$LN8		db 'status',0           ; DATA XREF: .text:0000076Co
$LN7		db 'alias',0            ; DATA XREF: .text:00000760o
_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_CheckEsp:near ; CODE XREF: _ufmt_isdigit_56+5Dp
					; _ufmt_64tou_56+179p ...
		extrn __aulldiv:near	; CODE XREF: _ufmt_64tou_56+4Bp
		extrn __aullrem:near	; CODE XREF: _ufmt_64tou_56+34p
		extrn __allmul:near	; CODE XREF: _ufmt_uto64_56+73p
		extrn _u_isspace_56:near ; CODE	XREF: _ufmt_utop_56+4Dp
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _ufmt_utop_56+144p
					; _ufmt_defaultCPToUnicode_56+BAp
		extrn _u_releaseDefaultConverter_56:near
					; CODE XREF: _ufmt_defaultCPToUnicode_56+A5p
		extrn _ucnv_toUnicode_56:near ;	CODE XREF: _ufmt_defaultCPToUnicode_56+91p
; size_t __cdecl strlen(const char *)
		extrn _strlen:near	; CODE XREF: _ufmt_defaultCPToUnicode_56+4Ep
		extrn _u_getDefaultConverter_56:near
					; CODE XREF: _ufmt_defaultCPToUnicode_56+29p


		end
