;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	6AF07878A04B4175AA001D4A26B52A64
; Input	CRC32 :	337F227E

; File Name   :	D:\compspace\objfiles\firefox\io\sprintf.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
_g_sprintf_stream_handler dd offset _u_sprintf_write ; DATA XREF: _u_vsnprintf_u_56+7Co
		dd offset _u_sprintf_pad_and_justify
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 8
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_sprintf_write proc near		; CODE XREF: _u_sprintf_pad_and_justify+D6p
					; _u_sprintf_pad_and_justify+153p ...

var_DC		= dword	ptr -0DCh
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0DCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_DC]
		mov	ecx, 37h ; '7'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_8]
		cmp	ecx, [eax+4]
		jge	short loc_42
		mov	edx, [ebp+arg_8]
		mov	[ebp+var_DC], edx
		jmp	short loc_4E
; ---------------------------------------------------------------------------

loc_42:					; CODE XREF: _u_sprintf_write+2Dj
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	[ebp+var_DC], ecx

loc_4E:					; CODE XREF: _u_sprintf_write+38j
		mov	edx, [ebp+var_DC]
		mov	[ebp+var_14], edx
		mov	eax, [ebp+var_14]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [ebp+var_8]
		mov	ecx, [edx+8]
		sub	ecx, [eax+4]
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		lea	ecx, [eax+ecx*2]
		push	ecx
		call	_u_strncpy_56
		add	esp, 0Ch
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		sub	ecx, [ebp+var_14]
		mov	edx, [ebp+var_8]
		mov	[edx+4], ecx
		mov	eax, [ebp+var_14]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0DCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_sprintf_write endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 0A4h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 0A8h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0ACh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_sprintf_pad_and_justify proc	near	; DATA XREF: .rdata:00000004o

var_100		= dword	ptr -100h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 100h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_100]
		mov	ecx, 40h ; '@'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	[ebp+var_14], 0
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_C]
		cmp	ecx, [eax+4]
		jge	short loc_F3
		mov	edx, [ebp+arg_C]
		mov	[ebp+var_100], edx
		jmp	short loc_FF
; ---------------------------------------------------------------------------

loc_F3:					; CODE XREF: _u_sprintf_pad_and_justify+3Aj
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	[ebp+var_100], ecx

loc_FF:					; CODE XREF: _u_sprintf_pad_and_justify+45j
		mov	edx, [ebp+var_100]
		mov	[ebp+arg_C], edx
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax+4], 0FFFFFFFFh
		jz	loc_20F
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_C]
		cmp	ecx, [eax+4]
		jge	loc_20F
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+4]
		sub	ecx, [ebp+arg_C]
		mov	[ebp+var_2C], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax+8]
		sub	edx, [ecx+4]
		mov	[ebp+var_38], edx
		mov	eax, [ebp+var_2C]
		add	eax, [ebp+arg_C]
		mov	ecx, [ebp+var_8]
		cmp	eax, [ecx+4]
		jle	short loc_162
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		sub	ecx, [ebp+arg_C]
		mov	[ebp+var_2C], ecx
		jns	short loc_162
		mov	[ebp+var_2C], 0

loc_162:				; CODE XREF: _u_sprintf_pad_and_justify+9Fj
					; _u_sprintf_pad_and_justify+ADj
		mov	eax, [ebp+var_14]
		add	eax, [ebp+var_2C]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+10h]
		test	ecx, ecx
		jz	short loc_1C4
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		call	_u_sprintf_write
		add	esp, 0Ch
		add	eax, [ebp+var_14]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_2C]
		push	eax
		mov	ecx, [ebp+arg_4]
		movzx	edx, word ptr [ecx+0Ch]
		push	edx
		mov	eax, [ebp+var_38]
		add	eax, [ebp+arg_C]
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		lea	eax, [edx+eax*2]
		push	eax
		call	_u_memset_56
		add	esp, 0Ch
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		sub	ecx, [ebp+var_2C]
		mov	edx, [ebp+var_8]
		mov	[edx+4], ecx
		jmp	short loc_20D
; ---------------------------------------------------------------------------

loc_1C4:				; CODE XREF: _u_sprintf_pad_and_justify+C8j
		mov	eax, [ebp+var_2C]
		push	eax
		mov	ecx, [ebp+arg_4]
		movzx	edx, word ptr [ecx+0Ch]
		push	edx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax]
		mov	edx, [ebp+var_38]
		lea	eax, [ecx+edx*2]
		push	eax
		call	_u_memset_56
		add	esp, 0Ch
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		sub	ecx, [ebp+var_2C]
		mov	edx, [ebp+var_8]
		mov	[edx+4], ecx
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		call	_u_sprintf_write
		add	esp, 0Ch
		add	eax, [ebp+var_14]
		mov	[ebp+var_14], eax

loc_20D:				; CODE XREF: _u_sprintf_pad_and_justify+116j
		jmp	short loc_226
; ---------------------------------------------------------------------------

loc_20F:				; CODE XREF: _u_sprintf_pad_and_justify+63j
					; _u_sprintf_pad_and_justify+72j
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		call	_u_sprintf_write
		add	esp, 0Ch
		mov	[ebp+var_14], eax

loc_226:				; CODE XREF: _u_sprintf_pad_and_justify:loc_20Dj
		cmp	[ebp+var_14], 0
		jl	short loc_239
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+var_14]
		jle	short loc_239
		mov	eax, [ebp+var_20]
		jmp	short loc_23C
; ---------------------------------------------------------------------------

loc_239:				; CODE XREF: _u_sprintf_pad_and_justify+17Ej
					; _u_sprintf_pad_and_justify+186j
		mov	eax, [ebp+var_14]

loc_23C:				; CODE XREF: _u_sprintf_pad_and_justify+18Bj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 100h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_sprintf_pad_and_justify endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 250h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_sprintf_56(int,	char *Str, char)
		public _u_sprintf_56
_u_sprintf_56	proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		lea	eax, [ebp+arg_8]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		push	eax		; int
		mov	ecx, [ebp+Str]
		push	ecx		; Str
		push	7FFFFFFFh	; int
		mov	edx, [ebp+arg_0]
		push	edx		; int
		call	_u_vsnprintf_56
		add	esp, 10h
		mov	[ebp+var_14], eax
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_14]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_sprintf_56	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2B0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_sprintf_u_56
_u_sprintf_u_56	proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		lea	eax, [ebp+arg_8]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		push	7FFFFFFFh
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_vsnprintf_u_56
		add	esp, 10h
		mov	[ebp+var_14], eax
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_14]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_sprintf_u_56	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 310h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_vsprintf_56(int, char *Str, int)
		public _u_vsprintf_56
_u_vsprintf_56	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		push	eax		; int
		mov	ecx, [ebp+Str]
		push	ecx		; Str
		push	7FFFFFFFh	; int
		mov	edx, [ebp+arg_0]
		push	edx		; int
		call	_u_vsnprintf_56
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_vsprintf_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 35Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_snprintf_56(int, int, char *Str, char)
		public _u_snprintf_56
_u_snprintf_56	proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Str		= dword	ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		lea	eax, [ebp+arg_C]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		push	eax		; int
		mov	ecx, [ebp+Str]
		push	ecx		; Str
		mov	edx, [ebp+arg_4]
		push	edx		; int
		mov	eax, [ebp+arg_0]
		push	eax		; int
		call	_u_vsnprintf_56
		add	esp, 10h
		mov	[ebp+var_14], eax
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_14]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_snprintf_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3BCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_snprintf_u_56
_u_snprintf_u_56 proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		lea	eax, [ebp+arg_C]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_u_vsnprintf_u_56
		add	esp, 10h
		mov	[ebp+var_14], eax
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_14]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_snprintf_u_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 41Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_vsnprintf_56(int, int, char *Str, int)
		public _u_vsnprintf_56
_u_vsnprintf_56	proc near		; CODE XREF: _u_sprintf_56+35p
					; _u_vsprintf_56+2Fp ...

var_1F0		= byte ptr -1F0h
var_12C		= dword	ptr -12Ch
var_120		= byte ptr -120h
var_18		= dword	ptr -18h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Str		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 1F0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_1F0]
		mov	ecx, 7Ch ; '|'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		add	eax, 1
		mov	[ebp+var_12C], eax
		cmp	[ebp+var_12C], 40h ; '@'
		jb	short loc_482
		mov	eax, [ebp+var_12C]
		shl	eax, 1
		push	eax
		call	_uprv_malloc_56
		add	esp, 4
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jnz	short loc_480
		xor	eax, eax
		jmp	short loc_4D9
; ---------------------------------------------------------------------------

loc_480:				; CODE XREF: _u_vsnprintf_56+5Ej
		jmp	short loc_48B
; ---------------------------------------------------------------------------

loc_482:				; CODE XREF: _u_vsnprintf_56+44j
		lea	eax, [ebp+var_120]
		mov	[ebp+var_18], eax

loc_48B:				; CODE XREF: _u_vsnprintf_56:loc_480j
		mov	eax, [ebp+var_12C]
		push	eax
		mov	ecx, [ebp+var_18]
		push	ecx
		mov	edx, [ebp+Str]
		push	edx
		call	_u_charsToUChars_56
		add	esp, 0Ch
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+var_18]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_u_vsnprintf_u_56
		add	esp, 10h
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_18]
		lea	ecx, [ebp+var_120]
		cmp	eax, ecx
		jz	short loc_4D6
		mov	eax, [ebp+var_18]
		push	eax
		call	_uprv_free_56
		add	esp, 4

loc_4D6:				; CODE XREF: _u_vsnprintf_56+ACj
		mov	eax, [ebp+var_C]

loc_4D9:				; CODE XREF: _u_vsnprintf_56+62j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN9
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1F0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_vsnprintf_56	endp

; ---------------------------------------------------------------------------
$LN9		dd 1			; DATA XREF: _u_vsnprintf_56+C1o
		dd offset $LN8
$LN8		dd 0FFFFFEE0h, 100h	; DATA XREF: .text:0000050Co
		dd offset $LN7		; "patBuffer"
$LN7		db 'patBuffer',0        ; DATA XREF: .text:00000518o
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 528h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_vsprintf_u_56
_u_vsprintf_u_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		push	7FFFFFFFh
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_vsnprintf_u_56
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_vsprintf_u_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 574h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_vsnprintf_u_56
_u_vsnprintf_u_56 proc near		; CODE XREF: _u_sprintf_u_56+35p
					; _u_snprintf_u_56+34p	...

var_108		= byte ptr -108h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= byte ptr -38h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_108]
		mov	ecx, 42h ; 'B'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	[ebp+var_14], 0
		cmp	[ebp+arg_4], 0
		jge	short loc_5AD
		mov	[ebp+arg_4], 7FFFFFFFh

loc_5AD:				; CODE XREF: _u_vsnprintf_u_56+30j
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_44], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_3C], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_40], eax
		push	offset ??_C@_0M@EKCLCNAB@en_US_POSIX?$AA@ ; "en_US_POSIX"
		lea	eax, [ebp+var_38]
		push	eax
		call	_u_locbund_init_56
		add	esp, 8
		test	eax, eax
		jnz	short loc_5D8
		xor	eax, eax
		jmp	short loc_62F
; ---------------------------------------------------------------------------

loc_5D8:				; CODE XREF: _u_vsnprintf_u_56+5Ej
		mov	eax, [ebp+arg_C]
		push	eax
		lea	ecx, [ebp+var_8]
		push	ecx
		lea	edx, [ebp+var_38]
		push	edx
		lea	eax, [ebp+var_44]
		push	eax
		lea	ecx, [ebp+var_44]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		push	offset _g_sprintf_stream_handler
		call	_u_printf_parse_56
		add	esp, 1Ch
		mov	[ebp+var_14], eax
		cmp	[ebp+var_40], 0
		jle	short loc_615
		mov	eax, [ebp+var_3C]
		sub	eax, [ebp+var_40]
		xor	ecx, ecx
		mov	edx, [ebp+arg_0]
		mov	[edx+eax*2], cx

loc_615:				; CODE XREF: _u_vsnprintf_u_56+90j
		lea	eax, [ebp+var_38]
		push	eax
		call	_u_locbund_close_56
		add	esp, 4
		cmp	[ebp+var_14], 0
		jge	short loc_62C
		mov	eax, [ebp+var_14]
		jmp	short loc_62F
; ---------------------------------------------------------------------------

loc_62C:				; CODE XREF: _u_vsnprintf_u_56+B1j
		mov	eax, [ebp+var_8]

loc_62F:				; CODE XREF: _u_vsnprintf_u_56+62j
					; _u_vsnprintf_u_56+B6j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN10
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 108h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_vsnprintf_u_56 endp

; ---------------------------------------------------------------------------
$LN10		dd 2			; DATA XREF: _u_vsnprintf_u_56+BFo
		dd offset $LN9_0
$LN9_0		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00000658o
		dd offset $LN7_0	; "written"
		dd 0FFFFFFBCh, 28h
		dd offset $LN8_0	; "outStr"
$LN8_0		db 'outStr',0           ; DATA XREF: .text:00000670o
$LN7_0		db 'written',0          ; DATA XREF: .text:00000664o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 684h
		public ??_C@_0M@EKCLCNAB@en_US_POSIX?$AA@
; `string'
??_C@_0M@EKCLCNAB@en_US_POSIX?$AA@ db 'en_US_POSIX',0 ; DATA XREF: _u_vsnprintf_u_56+4Bo
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _u_strncpy_56:near ; CODE	XREF: _u_sprintf_write+6Cp
		extrn __RTC_CheckEsp:near ; CODE XREF: _u_sprintf_write+91p
					; _u_sprintf_pad_and_justify+19Bp ...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn _u_memset_56:near	; CODE XREF: _u_sprintf_pad_and_justify+FFp
					; _u_sprintf_pad_and_justify+130p
		extrn _uprv_free_56:near ; CODE	XREF: _u_vsnprintf_56+B2p
		extrn _u_charsToUChars_56:near ; CODE XREF: _u_vsnprintf_56+7Ep
		extrn _uprv_malloc_56:near ; CODE XREF:	_u_vsnprintf_56+4Fp
; size_t __cdecl strlen(const char *Str)
		extrn _strlen:near	; CODE XREF: _u_vsnprintf_56+2Cp
		extrn ___security_cookie:near ;	DATA XREF: _u_vsnprintf_56+1Er
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _u_vsnprintf_56+D6p
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _u_vsnprintf_56+C7p
					; _u_vsnprintf_u_56+C5p
		extrn _u_locbund_close_56:near ; CODE XREF: _u_vsnprintf_u_56+A5p
		extrn _u_printf_parse_56:near ;	CODE XREF: _u_vsnprintf_u_56+81p
		extrn _u_locbund_init_56:near ;	CODE XREF: _u_vsnprintf_u_56+54p


		end
