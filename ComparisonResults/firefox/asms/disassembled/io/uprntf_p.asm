;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	73ABEA6F425D2994D91120A84F9309B3
; Input	CRC32 :	F4A3F7F9

; File Name   :	D:\compspace\objfiles\firefox\io\uprntf_p.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
_gNullStr:				; DATA XREF: _u_printf_string_handler:loc_4A3o
					; _u_printf_string_handler+139o ...
		unicode	0, <(null)>,0
		align 10h
_gSpaceStr	dd offset dword_20	; DATA XREF: _u_printf_set_sign+65o
; `u_printf_simple_percent_handler'::`2'::PERCENT
?PERCENT@?1??u_printf_simple_percent_handler@@9@9 dd offset byte_25
					; DATA XREF: _u_printf_simple_percent_handler+22o
_g_u_printf_infos dd 0			; DATA XREF: _u_printf_parse_56+B88r
					; _parseArguments+5C0r
dword_1C	dd 0			; DATA XREF: _u_printf_parse_56+CF6r
dword_20	dd 0			; DATA XREF: .rdata:_gSpaceStro
		db 0
byte_25		db 3 dup(0)		; DATA XREF: .rdata:`u_printf_simple_percent_handler'::`2'::PERCENTo
		align 20h
		dd 1
		dd offset _u_printf_simple_percent_handler
		dd 3Ah dup(0)
		dd 9
		dd offset _u_printf_uchar_handler
		align 10h
		dd 8
		dd offset _u_printf_scientific_handler
		align 10h
		dd 8
		dd offset _u_printf_scidbl_handler
		dd 10h dup(0)
		dd 8
		dd offset _u_printf_percent_handler
		dd 4 dup(0)
		dd 0Ah
		dd offset _u_printf_ustring_handler
		dd 4 dup(0)
		dd 8
		dd offset _u_printf_spellout_handler
		dd 2 dup(0)
		dd 3
		dd offset _u_printf_hex_handler
		dd 14h dup(0)
		dd 4
		dd offset _u_printf_char_handler
		dd 3
		dd offset _u_printf_integer_handler
		dd 8
		dd offset _u_printf_scientific_handler
		dd 8
		dd offset _u_printf_double_handler
		dd 8
		dd offset _u_printf_scidbl_handler
		align 10h
		dd 3
		dd offset _u_printf_integer_handler
		dd 8 dup(0)
		dd 2
		dd offset _u_printf_count_handler
		dd 3
		dd offset _u_printf_octal_handler
		dd 6
		dd offset _u_printf_pointer_handler
		dd 4 dup(0)
		dd 5
		dd offset _u_printf_string_handler
		align 10h
		dd 3
		dd offset _u_printf_uinteger_handler
		dd 4 dup(0)
		dd 3
		dd offset _u_printf_hex_handler
		dd 26h dup(0)
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 378h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_printf_simple_percent_handler proc near ; DATA XREF:	.rdata:00000044o

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	esi, esp
		push	1
		push	offset ?PERCENT@?1??u_printf_simple_percent_handler@@9@9 ; `u_printf_simple_percent_handler'::`2'::PERCENT
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		call	edx
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_printf_simple_percent_handler endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 3C8h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 3CCh
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3D0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_printf_string_handler proc near	; DATA XREF: .rdata:000002B4o

var_208		= byte ptr -208h
Str		= dword	ptr -144h
var_138		= dword	ptr -138h
var_12C		= dword	ptr -12Ch
var_120		= dword	ptr -120h
var_114		= byte ptr -114h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 208h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_208]
		mov	ecx, 82h ; '‚'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_10]
		mov	ecx, [eax]
		mov	[ebp+Str], ecx
		cmp	[ebp+Str], 0
		jz	loc_4A3
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		add	eax, 1
		mov	[ebp+var_138], eax
		cmp	[ebp+var_138], 40h ; '@'
		jb	short loc_47C
		mov	eax, [ebp+var_138]
		lea	ecx, [eax+eax+2]
		shl	ecx, 1
		push	ecx
		mov	edx, [ebp+var_138]
		lea	eax, [edx+edx+2]
		shl	eax, 1
		push	eax
		call	_uprv_malloc_56
		add	esp, 4
		push	eax
		mov	ecx, [ebp+var_138]
		push	ecx
		mov	edx, [ebp+Str]
		push	edx
		call	_ufmt_defaultCPToUnicode_56
		add	esp, 10h
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_47A
		xor	eax, eax
		jmp	loc_52F
; ---------------------------------------------------------------------------

loc_47A:				; CODE XREF: _u_printf_string_handler+A1j
		jmp	short loc_4A1
; ---------------------------------------------------------------------------

loc_47C:				; CODE XREF: _u_printf_string_handler+5Fj
		push	80h ; '€'
		lea	eax, [ebp+var_114]
		push	eax
		mov	ecx, [ebp+var_138]
		push	ecx
		mov	edx, [ebp+Str]
		push	edx
		call	_ufmt_defaultCPToUnicode_56
		add	esp, 10h
		mov	[ebp+var_C], eax

loc_4A1:				; CODE XREF: _u_printf_string_handler:loc_47Aj
		jmp	short loc_4AA
; ---------------------------------------------------------------------------

loc_4A3:				; CODE XREF: _u_printf_string_handler+3Aj
		mov	[ebp+var_C], offset _gNullStr ;	"(null)"

loc_4AA:				; CODE XREF: _u_printf_string_handler:loc_4A1j
		mov	eax, [ebp+var_C]
		push	eax
		call	_u_strlen_56
		add	esp, 4
		mov	[ebp+var_120], eax
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_4DC
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		cmp	ecx, [ebp+var_120]
		jge	short loc_4DC
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		mov	[ebp+var_120], ecx

loc_4DC:				; CODE XREF: _u_printf_string_handler+F2j
					; _u_printf_string_handler+FFj
		mov	esi, esp
		mov	eax, [ebp+var_120]
		push	eax
		mov	ecx, [ebp+var_C]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_12C], eax
		cmp	[ebp+var_C], offset _gNullStr ;	"(null)"
		jz	short loc_529
		lea	eax, [ebp+var_114]
		cmp	eax, [ebp+var_C]
		jz	short loc_529
		mov	eax, [ebp+var_C]
		push	eax
		call	_uprv_free_56
		add	esp, 4

loc_529:				; CODE XREF: _u_printf_string_handler+140j
					; _u_printf_string_handler+14Bj
		mov	eax, [ebp+var_12C]

loc_52F:				; CODE XREF: _u_printf_string_handler+A5j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN12
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 208h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_printf_string_handler endp

; ---------------------------------------------------------------------------
		align 10h
$LN12		dd 1			; DATA XREF: _u_printf_string_handler+163o
		dd offset $LN11
$LN11		dd 0FFFFFEECh, 100h	; DATA XREF: .text:00000564o
		dd offset $LN10		; "buffer"
$LN10		db 'buffer',0           ; DATA XREF: .text:00000570o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 57Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_printf_char_handler proc near	; DATA XREF: .rdata:00000234o

var_F8		= byte ptr -0F8h
var_31		= byte ptr -31h
var_28		= dword	ptr -28h
var_1C		= dword	ptr -1Ch
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0F8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_F8]
		mov	ecx, 3Eh ; '>'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	[ebp+var_1C], 1
		mov	eax, [ebp+arg_10]
		mov	cl, [eax]
		mov	[ebp+var_31], cl
		push	3
		lea	eax, [ebp+var_10]
		push	eax
		push	2
		lea	ecx, [ebp+var_31]
		push	ecx
		call	_ufmt_defaultCPToUnicode_56
		add	esp, 10h
		movzx	eax, [ebp+var_31]
		test	eax, eax
		jz	short loc_5DE
		lea	eax, [ebp+var_10]
		push	eax
		call	_u_strlen_56
		add	esp, 4
		mov	[ebp+var_1C], eax

loc_5DE:				; CODE XREF: _u_printf_char_handler+51j
		mov	esi, esp
		mov	eax, [ebp+var_1C]
		push	eax
		lea	ecx, [ebp+var_10]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_28], eax
		mov	eax, [ebp+var_28]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0F8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_printf_char_handler endp

; ---------------------------------------------------------------------------
		align 4
$LN7		dd 2			; DATA XREF: _u_printf_char_handler+90o
		dd offset $LN6
$LN6		dd 0FFFFFFF0h, 6	; DATA XREF: .text:0000063Co
		dd offset $LN4
		dd 0FFFFFFCFh, 1
		dd offset $LN5
$LN5		dd 677261h		; DATA XREF: .text:00000654o
$LN4		db 73h,	0		; DATA XREF: .text:00000648o
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 660h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_printf_double_handler proc near	; CODE XREF: _u_printf_scidbl_handler+89p
					; _u_printf_scidbl_handler+198p
					; DATA XREF: ...

var_115C	= qword	ptr -115Ch
var_1138	= byte ptr -1138h
var_1074	= dword	ptr -1074h
var_1068	= dword	ptr -1068h
var_105C	= dword	ptr -105Ch
var_1050	= dword	ptr -1050h
var_1044	= dword	ptr -1044h
var_1038	= dword	ptr -1038h
var_102C	= word ptr -102Ch
var_824		= byte ptr -824h
var_1C		= dword	ptr -1Ch
var_10		= qword	ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, 1138h
		call	__chkstk
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_1138]
		mov	ecx, 44Eh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_10]
		fld	qword ptr [eax]
		fstp	[ebp+var_10]
		mov	[ebp+var_1038],	800h
		mov	[ebp+var_1068],	0
		xor	eax, eax
		mov	[ebp+var_102C],	ax
		push	1
		mov	eax, [ebp+arg_8]
		push	eax
		call	_u_locbund_getNumberFormat_56
		add	esp, 8
		mov	[ebp+var_1C], eax
		cmp	[ebp+var_1C], 0
		jnz	short loc_6CF
		xor	eax, eax
		jmp	loc_843
; ---------------------------------------------------------------------------

loc_6CF:				; CODE XREF: _u_printf_double_handler+66j
		push	7
		mov	eax, [ebp+var_1C]
		push	eax
		call	_unum_getAttribute_56
		add	esp, 8
		mov	[ebp+var_1044],	eax
		push	6
		mov	eax, [ebp+var_1C]
		push	eax
		call	_unum_getAttribute_56
		add	esp, 8
		mov	[ebp+var_1050],	eax
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_715
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		push	8
		mov	edx, [ebp+var_1C]
		push	edx
		call	_unum_setAttribute_56
		add	esp, 0Ch
		jmp	short loc_742
; ---------------------------------------------------------------------------

loc_715:				; CODE XREF: _u_printf_double_handler+9Dj
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+0Eh]
		test	ecx, ecx
		jz	short loc_732
		push	6
		push	8
		mov	eax, [ebp+var_1C]
		push	eax
		call	_unum_setAttribute_56
		add	esp, 0Ch
		jmp	short loc_742
; ---------------------------------------------------------------------------

loc_732:				; CODE XREF: _u_printf_double_handler+BEj
		push	6
		push	8
		mov	eax, [ebp+var_1C]
		push	eax
		call	_unum_setAttribute_56
		add	esp, 0Ch

loc_742:				; CODE XREF: _u_printf_double_handler+B3j
					; _u_printf_double_handler+D0j
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+11h]
		test	ecx, ecx
		jz	short loc_772
		lea	eax, [ebp+var_1068]
		push	eax
		lea	ecx, [ebp+var_1038]
		push	ecx
		lea	edx, [ebp+var_102C]
		push	edx
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_u_printf_set_sign
		add	esp, 14h

loc_772:				; CODE XREF: _u_printf_double_handler+EBj
		lea	eax, [ebp+var_1068]
		push	eax
		push	0
		push	400h
		lea	ecx, [ebp+var_824]
		push	ecx
		sub	esp, 8
		fld	[ebp+var_10]
		fstp	[esp+115Ch+var_115C]
		mov	edx, [ebp+var_1C]
		push	edx
		call	_unum_formatDouble_56
		add	esp, 1Ch
		mov	[ebp+var_105C],	eax
		cmp	[ebp+var_1068],	0
		jle	short loc_7B5
		mov	[ebp+var_105C],	0

loc_7B5:				; CODE XREF: _u_printf_double_handler+149j
		mov	eax, [ebp+var_1044]
		push	eax
		push	7
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_unum_setAttribute_56
		add	esp, 0Ch
		mov	eax, [ebp+var_1050]
		push	eax
		push	6
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_unum_setAttribute_56
		add	esp, 0Ch
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+11h]
		test	ecx, ecx
		jz	short loc_819
		mov	[ebp+var_1074],	0
		lea	eax, [ebp+var_1074]
		push	eax
		lea	ecx, [ebp+var_1038]
		push	ecx
		lea	edx, [ebp+var_102C]
		push	edx
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_u_printf_reset_sign
		add	esp, 14h

loc_819:				; CODE XREF: _u_printf_double_handler+188j
		mov	esi, esp
		mov	eax, [ebp+var_105C]
		push	eax
		lea	ecx, [ebp+var_824]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_843:				; CODE XREF: _u_printf_double_handler+6Aj
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN17
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1138h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_printf_double_handler endp

; ---------------------------------------------------------------------------
		align 4
$LN17		dd 5			; DATA XREF: _u_printf_double_handler+1E7o
		dd offset $LN16
$LN16		dd 0FFFFF7DCh, 800h	; DATA XREF: .text:00000878o
		dd offset $LN11_0	; "result"
		dd 0FFFFEFD4h, 800h
		dd offset $LN12_0	; "prefixBuffer"
		dd 0FFFFEFC8h, 4
		dd offset $LN13		; "prefixBufferLen"
		dd 0FFFFEF98h, 4
		dd offset $LN14		; "status"
		dd 0FFFFEF8Ch, 4
		dd offset $LN15		; "localStatus"
$LN15		db 'localStatus',0      ; DATA XREF: .text:000008B4o
$LN14		db 'status',0           ; DATA XREF: .text:000008A8o
$LN13		db 'prefixBufferLen',0  ; DATA XREF: .text:0000089Co
$LN12_0		db 'prefixBuffer',0     ; DATA XREF: .text:00000890o
$LN11_0		db 'result',0           ; DATA XREF: .text:00000884o
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 8F0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_printf_set_sign proc	near		; CODE XREF: _u_printf_double_handler+10Ap
					; _u_printf_integer_handler+104p ...

var_E8		= byte ptr -0E8h
var_24		= dword	ptr -24h
var_18		= byte ptr -18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E8]
		mov	ecx, 3Ah ; ':'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+11h]
		test	ecx, ecx
		jz	short loc_9A1
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+arg_C]
		mov	edx, [ecx]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		push	0
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_unum_getTextAttribute_56
		add	esp, 14h
		mov	edx, [ebp+arg_C]
		mov	[edx], eax
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+0Fh]
		test	ecx, ecx
		jz	short loc_96A
		mov	eax, [ebp+arg_10]
		push	eax
		push	1
		push	offset _gSpaceStr
		push	0
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_unum_setTextAttribute_56
		add	esp, 14h
		jmp	short loc_99F
; ---------------------------------------------------------------------------

loc_96A:				; CODE XREF: _u_printf_set_sign+5Dj
		mov	eax, [ebp+arg_10]
		push	eax
		push	8
		lea	ecx, [ebp+var_18]
		push	ecx
		push	7
		mov	edx, [ebp+arg_0]
		push	edx
		call	_unum_getSymbol_56
		add	esp, 14h
		mov	[ebp+var_24], eax
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+var_24]
		push	ecx
		lea	edx, [ebp+var_18]
		push	edx
		push	0
		mov	eax, [ebp+arg_0]
		push	eax
		call	_unum_setTextAttribute_56
		add	esp, 14h

loc_99F:				; CODE XREF: _u_printf_set_sign+78j
		jmp	short loc_9AA
; ---------------------------------------------------------------------------

loc_9A1:				; CODE XREF: _u_printf_set_sign+31j
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0

loc_9AA:				; CODE XREF: _u_printf_set_sign:loc_99Fj
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN9
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0E8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_printf_set_sign endp

; ---------------------------------------------------------------------------
		align 4
$LN9		dd 1			; DATA XREF: _u_printf_set_sign+BEo
		dd offset $LN8
$LN8		dd 0FFFFFFE8h, 10h	; DATA XREF: .text:000009E0o
		dd offset $LN7_0	; "plusSymbol"
$LN7_0		db 'plusSymbol',0       ; DATA XREF: .text:000009ECo
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 9FCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_printf_reset_sign proc near		; CODE XREF: _u_printf_double_handler+1B1p
					; _u_printf_integer_handler+19Ep ...

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+11h]
		test	ecx, ecx
		jz	short loc_A41
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+arg_C]
		mov	edx, [ecx]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		push	0
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_unum_setTextAttribute_56
		add	esp, 14h

loc_A41:				; CODE XREF: _u_printf_reset_sign+27j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_printf_reset_sign endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A58h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_printf_integer_handler proc near	; DATA XREF: .rdata:0000023Co
					; .rdata:00000264o

var_112C	= byte ptr -112Ch
var_1068	= dword	ptr -1068h
var_105C	= dword	ptr -105Ch
var_1050	= dword	ptr -1050h
var_1044	= dword	ptr -1044h
var_1038	= dword	ptr -1038h
var_102C	= word ptr -102Ch
var_824		= byte ptr -824h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, 112Ch
		call	__chkstk
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_112C]
		mov	ecx, 44Bh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_10]
		mov	ecx, [eax]
		mov	[ebp+var_10], ecx
		mov	edx, [eax+4]
		mov	[ebp+var_C], edx
		mov	[ebp+var_1038],	800h
		mov	[ebp+var_1044],	0FFFFFFFFh
		mov	[ebp+var_105C],	0
		xor	eax, eax
		mov	[ebp+var_102C],	ax
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+14h]
		test	ecx, ecx
		jz	short loc_AD1
		movsx	eax, word ptr [ebp+var_10]
		cdq
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], edx
		jmp	short loc_AE6
; ---------------------------------------------------------------------------

loc_AD1:				; CODE XREF: _u_printf_integer_handler+6Aj
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+16h]
		test	ecx, ecx
		jnz	short loc_AE6
		mov	eax, [ebp+var_10]
		cdq
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], edx

loc_AE6:				; CODE XREF: _u_printf_integer_handler+77j
					; _u_printf_integer_handler+82j
		push	1
		mov	eax, [ebp+arg_8]
		push	eax
		call	_u_locbund_getNumberFormat_56
		add	esp, 8
		mov	[ebp+var_1C], eax
		cmp	[ebp+var_1C], 0
		jnz	short loc_B04
		xor	eax, eax
		jmp	loc_C28
; ---------------------------------------------------------------------------

loc_B04:				; CODE XREF: _u_printf_integer_handler+A3j
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_B34
		push	4
		mov	eax, [ebp+var_1C]
		push	eax
		call	_unum_getAttribute_56
		add	esp, 8
		mov	[ebp+var_1044],	eax
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		push	4
		mov	edx, [ebp+var_1C]
		push	edx
		call	_unum_setAttribute_56
		add	esp, 0Ch

loc_B34:				; CODE XREF: _u_printf_integer_handler+B2j
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+11h]
		test	ecx, ecx
		jz	short loc_B64
		lea	eax, [ebp+var_105C]
		push	eax
		lea	ecx, [ebp+var_1038]
		push	ecx
		lea	edx, [ebp+var_102C]
		push	edx
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_u_printf_set_sign
		add	esp, 14h

loc_B64:				; CODE XREF: _u_printf_integer_handler+E5j
		lea	eax, [ebp+var_105C]
		push	eax
		push	0
		push	400h
		lea	ecx, [ebp+var_824]
		push	ecx
		mov	edx, [ebp+var_C]
		push	edx
		mov	eax, [ebp+var_10]
		push	eax
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_unum_formatInt64_56
		add	esp, 1Ch
		mov	[ebp+var_1050],	eax
		cmp	[ebp+var_105C],	0
		jle	short loc_BA6
		mov	[ebp+var_1050],	0

loc_BA6:				; CODE XREF: _u_printf_integer_handler+142j
		cmp	[ebp+var_1044],	0FFFFFFFFh
		jz	short loc_BC4
		mov	eax, [ebp+var_1044]
		push	eax
		push	4
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_unum_setAttribute_56
		add	esp, 0Ch

loc_BC4:				; CODE XREF: _u_printf_integer_handler+155j
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+11h]
		test	ecx, ecx
		jz	short loc_BFE
		mov	[ebp+var_1068],	0
		lea	eax, [ebp+var_1068]
		push	eax
		lea	ecx, [ebp+var_1038]
		push	ecx
		lea	edx, [ebp+var_102C]
		push	edx
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_u_printf_reset_sign
		add	esp, 14h

loc_BFE:				; CODE XREF: _u_printf_integer_handler+175j
		mov	esi, esp
		mov	eax, [ebp+var_1050]
		push	eax
		lea	ecx, [ebp+var_824]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_C28:				; CODE XREF: _u_printf_integer_handler+A7j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN18
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 112Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_printf_integer_handler endp

; ---------------------------------------------------------------------------
		align 4
$LN18		dd 5			; DATA XREF: _u_printf_integer_handler+1D4o
		dd offset $LN17_0
$LN17_0		dd 0FFFFF7DCh, 800h	; DATA XREF: .text:00000C5Co
		dd offset $LN12_1	; "result"
		dd 0FFFFEFD4h, 800h
		dd offset $LN13_0	; "prefixBuffer"
		dd 0FFFFEFC8h, 4
		dd offset $LN14_0	; "prefixBufferLen"
		dd 0FFFFEFA4h, 4
		dd offset $LN15_0	; "status"
		dd 0FFFFEF98h, 4
		dd offset $LN16_0	; "localStatus"
$LN16_0		db 'localStatus',0      ; DATA XREF: .text:00000C98o
$LN15_0		db 'status',0           ; DATA XREF: .text:00000C8Co
$LN14_0		db 'prefixBufferLen',0  ; DATA XREF: .text:00000C80o
$LN13_0		db 'prefixBuffer',0     ; DATA XREF: .text:00000C74o
$LN12_1		db 'result',0           ; DATA XREF: .text:00000C68o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0CD4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_printf_hex_handler proc near		; DATA XREF: .rdata:000001DCo
					; .rdata:000002DCo

var_8EC		= dword	ptr -8ECh
var_824		= dword	ptr -824h
Src		= word ptr -818h
var_816		= word ptr -816h
Dst		= byte ptr -814h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 8ECh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_8EC]
		mov	ecx, 23Bh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_10]
		mov	ecx, [eax]
		mov	[ebp+var_10], ecx
		mov	edx, [eax+4]
		mov	[ebp+var_C], edx
		mov	[ebp+var_824], 400h
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+14h]
		test	ecx, ecx
		jz	short loc_D35
		mov	eax, [ebp+var_10]
		and	eax, 0FFFFh
		mov	ecx, [ebp+var_C]
		and	ecx, 0
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], ecx
		jmp	short loc_D4F
; ---------------------------------------------------------------------------

loc_D35:				; CODE XREF: _u_printf_hex_handler+49j
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+16h]
		test	ecx, ecx
		jnz	short loc_D4F
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		and	ecx, 0
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], ecx

loc_D4F:				; CODE XREF: _u_printf_hex_handler+5Fj
					; _u_printf_hex_handler+6Aj
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jnz	short loc_D70
		mov	ecx, [ebp+arg_C]
		movsx	edx, byte ptr [ecx+12h]
		test	edx, edx
		jz	short loc_D70
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax+4]
		mov	[ebp+var_8EC], ecx
		jmp	short loc_D7B
; ---------------------------------------------------------------------------

loc_D70:				; CODE XREF: _u_printf_hex_handler+81j
					; _u_printf_hex_handler+8Cj
		mov	edx, [ebp+arg_C]
		mov	eax, [edx]
		mov	[ebp+var_8EC], eax

loc_D7B:				; CODE XREF: _u_printf_hex_handler+9Aj
		mov	ecx, [ebp+var_8EC]
		push	ecx
		mov	edx, [ebp+arg_C]
		movzx	eax, word ptr [edx+0Ah]
		cmp	eax, 78h ; 'x'
		setz	cl
		movzx	edx, cl
		push	edx
		push	10h
		mov	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+var_10]
		push	ecx
		lea	edx, [ebp+var_824]
		push	edx
		lea	eax, [ebp+Src]
		push	eax
		call	_ufmt_64tou_56
		add	esp, 1Ch
		mov	eax, [ebp+var_10]
		or	eax, [ebp+var_C]
		jz	short loc_E24
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+0Eh]
		test	ecx, ecx
		jz	short loc_E24
		cmp	[ebp+var_824], 3FEh
		jge	short loc_E24
		mov	eax, [ebp+var_824]
		shl	eax, 1
		mov	esi, esp
		push	eax		; Size
		lea	ecx, [ebp+Src]
		push	ecx		; Src
		lea	edx, [ebp+Dst]
		push	edx		; Dst
		call	dword ptr ds:__imp__memmove
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, 30h ; '0'
		mov	[ebp+Src], ax
		mov	eax, [ebp+arg_C]
		mov	cx, [eax+0Ah]
		mov	[ebp+var_816], cx
		mov	eax, [ebp+var_824]
		add	eax, 2
		mov	[ebp+var_824], eax

loc_E24:				; CODE XREF: _u_printf_hex_handler+E5j
					; _u_printf_hex_handler+F0j ...
		mov	esi, esp
		mov	eax, [ebp+var_824]
		push	eax
		lea	ecx, [ebp+Src]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN12_2
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 8ECh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_printf_hex_handler endp

; ---------------------------------------------------------------------------
		align 10h
$LN12_2		dd 2			; DATA XREF: _u_printf_hex_handler+17Eo
		dd offset $LN11_1
$LN11_1		dd 0FFFFF7E8h, 800h	; DATA XREF: .text:00000E84o
		dd offset $LN9_0	; "result"
		dd 0FFFFF7DCh, 4
		dd offset $LN10_0
$LN10_0		dd 6E656Ch		; DATA XREF: .text:00000E9Co
$LN9_0		db 'result',0           ; DATA XREF: .text:00000E90o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0EACh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_printf_octal_handler	proc near	; DATA XREF: .rdata:00000294o

var_8EC		= dword	ptr -8ECh
var_824		= dword	ptr -824h
Src		= word ptr -818h
Dst		= byte ptr -816h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 8ECh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_8EC]
		mov	ecx, 23Bh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_10]
		mov	ecx, [eax]
		mov	[ebp+var_10], ecx
		mov	edx, [eax+4]
		mov	[ebp+var_C], edx
		mov	[ebp+var_824], 400h
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+14h]
		test	ecx, ecx
		jz	short loc_F0D
		mov	eax, [ebp+var_10]
		and	eax, 0FFFFh
		mov	ecx, [ebp+var_C]
		and	ecx, 0
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], ecx
		jmp	short loc_F27
; ---------------------------------------------------------------------------

loc_F0D:				; CODE XREF: _u_printf_octal_handler+49j
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+16h]
		test	ecx, ecx
		jnz	short loc_F27
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		and	ecx, 0
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], ecx

loc_F27:				; CODE XREF: _u_printf_octal_handler+5Fj
					; _u_printf_octal_handler+6Aj
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jnz	short loc_F48
		mov	ecx, [ebp+arg_C]
		movsx	edx, byte ptr [ecx+12h]
		test	edx, edx
		jz	short loc_F48
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax+4]
		mov	[ebp+var_8EC], ecx
		jmp	short loc_F53
; ---------------------------------------------------------------------------

loc_F48:				; CODE XREF: _u_printf_octal_handler+81j
					; _u_printf_octal_handler+8Cj
		mov	edx, [ebp+arg_C]
		mov	eax, [edx]
		mov	[ebp+var_8EC], eax

loc_F53:				; CODE XREF: _u_printf_octal_handler+9Aj
		mov	ecx, [ebp+var_8EC]
		push	ecx
		push	0
		push	8
		mov	edx, [ebp+var_C]
		push	edx
		mov	eax, [ebp+var_10]
		push	eax
		lea	ecx, [ebp+var_824]
		push	ecx
		lea	edx, [ebp+Src]
		push	edx
		call	_ufmt_64tou_56
		add	esp, 1Ch
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+0Eh]
		test	ecx, ecx
		jz	short loc_FE3
		movzx	eax, [ebp+Src]
		cmp	eax, 30h ; '0'
		jz	short loc_FE3
		cmp	[ebp+var_824], 3FFh
		jge	short loc_FE3
		mov	eax, [ebp+var_824]
		shl	eax, 1
		mov	esi, esp
		push	eax		; Size
		lea	ecx, [ebp+Src]
		push	ecx		; Src
		lea	edx, [ebp+Dst]
		push	edx		; Dst
		call	dword ptr ds:__imp__memmove
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, 30h ; '0'
		mov	[ebp+Src], ax
		mov	eax, [ebp+var_824]
		add	eax, 1
		mov	[ebp+var_824], eax

loc_FE3:				; CODE XREF: _u_printf_octal_handler+D9j
					; _u_printf_octal_handler+E5j ...
		mov	esi, esp
		mov	eax, [ebp+var_824]
		push	eax
		lea	ecx, [ebp+Src]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN12_3
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 8ECh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_printf_octal_handler	endp

; ---------------------------------------------------------------------------
$LN12_3		dd 2			; DATA XREF: _u_printf_octal_handler+165o
		dd offset $LN11_2
$LN11_2		dd 0FFFFF7E8h, 800h	; DATA XREF: .text:00001040o
		dd offset $LN9_1	; "result"
		dd 0FFFFF7DCh, 4
		dd offset $LN10_1
$LN10_1		dd 6E656Ch		; DATA XREF: .text:00001058o
$LN9_1		db 'result',0           ; DATA XREF: .text:0000104Co
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1068h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_printf_uinteger_handler proc	near	; DATA XREF: .rdata:000002C4o

var_90C		= byte ptr -90Ch
var_848		= dword	ptr -848h
var_83C		= dword	ptr -83Ch
var_830		= dword	ptr -830h
var_824		= byte ptr -824h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 90Ch
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_90C]
		mov	ecx, 243h
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_10]
		mov	ecx, [eax]
		mov	[ebp+var_10], ecx
		mov	edx, [eax+4]
		mov	[ebp+var_C], edx
		mov	[ebp+var_830], 0FFFFFFFFh
		mov	[ebp+var_848], 0
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+14h]
		test	ecx, ecx
		jz	short loc_10D3
		mov	eax, [ebp+var_10]
		and	eax, 0FFFFh
		mov	ecx, [ebp+var_C]
		and	ecx, 0
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], ecx
		jmp	short loc_10ED
; ---------------------------------------------------------------------------

loc_10D3:				; CODE XREF: _u_printf_uinteger_handler+53j
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+16h]
		test	ecx, ecx
		jnz	short loc_10ED
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		and	ecx, 0
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], ecx

loc_10ED:				; CODE XREF: _u_printf_uinteger_handler+69j
					; _u_printf_uinteger_handler+74j
		push	1
		mov	eax, [ebp+arg_8]
		push	eax
		call	_u_locbund_getNumberFormat_56
		add	esp, 8
		mov	[ebp+var_1C], eax
		cmp	[ebp+var_1C], 0
		jnz	short loc_110B
		xor	eax, eax
		jmp	loc_11C5
; ---------------------------------------------------------------------------

loc_110B:				; CODE XREF: _u_printf_uinteger_handler+9Aj
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_113B
		push	4
		mov	eax, [ebp+var_1C]
		push	eax
		call	_unum_getAttribute_56
		add	esp, 8
		mov	[ebp+var_830], eax
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		push	4
		mov	edx, [ebp+var_1C]
		push	edx
		call	_unum_setAttribute_56
		add	esp, 0Ch

loc_113B:				; CODE XREF: _u_printf_uinteger_handler+A9j
		lea	eax, [ebp+var_848]
		push	eax
		push	0
		push	400h
		lea	ecx, [ebp+var_824]
		push	ecx
		mov	edx, [ebp+var_C]
		push	edx
		mov	eax, [ebp+var_10]
		push	eax
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_unum_formatInt64_56
		add	esp, 1Ch
		mov	[ebp+var_83C], eax
		cmp	[ebp+var_848], 0
		jle	short loc_117D
		mov	[ebp+var_83C], 0

loc_117D:				; CODE XREF: _u_printf_uinteger_handler+109j
		cmp	[ebp+var_830], 0FFFFFFFFh
		jz	short loc_119B
		mov	eax, [ebp+var_830]
		push	eax
		push	4
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_unum_setAttribute_56
		add	esp, 0Ch

loc_119B:				; CODE XREF: _u_printf_uinteger_handler+11Cj
		mov	esi, esp
		mov	eax, [ebp+var_83C]
		push	eax
		lea	ecx, [ebp+var_824]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_11C5:				; CODE XREF: _u_printf_uinteger_handler+9Ej
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN13_1
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 90Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_printf_uinteger_handler endp

; ---------------------------------------------------------------------------
$LN13_1		dd 2			; DATA XREF: _u_printf_uinteger_handler+161o
		dd offset $LN12_4
$LN12_4		dd 0FFFFF7DCh, 800h	; DATA XREF: .text:000011F8o
		dd offset $LN10_2	; "result"
		dd 0FFFFF7B8h, 4
		dd offset $LN11_3	; "status"
$LN11_3		db 'status',0           ; DATA XREF: .text:00001210o
$LN10_2		db 'result',0           ; DATA XREF: .text:00001204o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1224h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_printf_pointer_handler proc near	; DATA XREF: .rdata:0000029Co

var_8D8		= byte ptr -8D8h
var_814		= dword	ptr -814h
var_808		= byte ptr -808h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 8D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_8D8]
		mov	ecx, 236h
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	[ebp+var_814], 400h
		push	1
		mov	eax, [ebp+arg_10]
		mov	ecx, [eax]
		push	ecx
		lea	edx, [ebp+var_814]
		push	edx
		lea	eax, [ebp+var_808]
		push	eax
		call	_ufmt_ptou_56
		add	esp, 10h
		mov	esi, esp
		mov	eax, [ebp+var_814]
		push	eax
		lea	ecx, [ebp+var_808]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN6_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 8D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_printf_pointer_handler endp

; ---------------------------------------------------------------------------
		align 10h
$LN6_0		dd 2			; DATA XREF: _u_printf_pointer_handler+7Eo
		dd offset $LN5_0
$LN5_0		dd 0FFFFF7F8h, 800h	; DATA XREF: .text:000012D4o
		dd offset $LN3		; "result"
		dd 0FFFFF7ECh, 4
		dd offset $LN4_0
$LN4_0		dd 6E656Ch		; DATA XREF: .text:000012ECo
$LN3		db 'result',0           ; DATA XREF: .text:000012E0o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 12FCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_printf_scientific_handler proc near	; CODE XREF: _u_printf_scidbl_handler+107p
					; DATA XREF: .rdata:00000144o ...

var_11A4	= qword	ptr -11A4h
var_1180	= byte ptr -1180h
var_10BC	= dword	ptr -10BCh
var_10B0	= byte ptr -10B0h
var_1098	= dword	ptr -1098h
var_108C	= dword	ptr -108Ch
var_1080	= dword	ptr -1080h
var_1074	= byte ptr -1074h
var_105C	= dword	ptr -105Ch
var_1050	= dword	ptr -1050h
var_1044	= dword	ptr -1044h
var_1038	= dword	ptr -1038h
var_102C	= word ptr -102Ch
var_824		= byte ptr -824h
var_1C		= dword	ptr -1Ch
var_10		= qword	ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, 1180h
		call	__chkstk
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_1180]
		mov	ecx, 460h
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_10]
		fld	qword ptr [eax]
		fstp	[ebp+var_10]
		mov	[ebp+var_1038],	800h
		mov	[ebp+var_105C],	0
		xor	eax, eax
		mov	[ebp+var_102C],	ax
		push	4
		mov	eax, [ebp+arg_8]
		push	eax
		call	_u_locbund_getNumberFormat_56
		add	esp, 8
		mov	[ebp+var_1C], eax
		cmp	[ebp+var_1C], 0
		jnz	short loc_136B
		xor	eax, eax
		jmp	loc_15D6
; ---------------------------------------------------------------------------

loc_136B:				; CODE XREF: _u_printf_scientific_handler+66j
		lea	eax, [ebp+var_105C]
		push	eax
		push	10h
		lea	ecx, [ebp+var_1074]
		push	ecx
		push	0Bh
		mov	edx, [ebp+var_1C]
		push	edx
		call	_unum_getSymbol_56
		add	esp, 14h
		mov	[ebp+var_1080],	eax
		mov	eax, [ebp+arg_C]
		movzx	ecx, word ptr [eax+0Ah]
		cmp	ecx, 65h ; 'e'
		jnz	short loc_13CF
		lea	eax, [ebp+var_105C]
		push	eax
		mov	ecx, [ebp+arg_8]
		mov	edx, [ecx]
		push	edx
		mov	eax, [ebp+var_1080]
		push	eax
		lea	ecx, [ebp+var_1074]
		push	ecx
		push	10h
		lea	edx, [ebp+var_10B0]
		push	edx
		call	_u_strToLower_56
		add	esp, 18h
		mov	[ebp+var_108C],	eax
		jmp	short loc_1401
; ---------------------------------------------------------------------------

loc_13CF:				; CODE XREF: _u_printf_scientific_handler+9Dj
		lea	eax, [ebp+var_105C]
		push	eax
		mov	ecx, [ebp+arg_8]
		mov	edx, [ecx]
		push	edx
		mov	eax, [ebp+var_1080]
		push	eax
		lea	ecx, [ebp+var_1074]
		push	ecx
		push	10h
		lea	edx, [ebp+var_10B0]
		push	edx
		call	_u_strToUpper_56
		add	esp, 18h
		mov	[ebp+var_108C],	eax

loc_1401:				; CODE XREF: _u_printf_scientific_handler+D1j
		lea	eax, [ebp+var_105C]
		push	eax
		mov	ecx, [ebp+var_108C]
		push	ecx
		lea	edx, [ebp+var_10B0]
		push	edx
		push	0Bh
		mov	eax, [ebp+var_1C]
		push	eax
		call	_unum_setSymbol_56
		add	esp, 14h
		push	7
		mov	eax, [ebp+var_1C]
		push	eax
		call	_unum_getAttribute_56
		add	esp, 8
		mov	[ebp+var_1044],	eax
		push	6
		mov	eax, [ebp+var_1C]
		push	eax
		call	_unum_getAttribute_56
		add	esp, 8
		mov	[ebp+var_1050],	eax
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_14A8
		mov	eax, [ebp+arg_C]
		movzx	ecx, word ptr [eax+8]
		cmp	ecx, 65h ; 'e'
		jz	short loc_146C
		mov	eax, [ebp+arg_C]
		movzx	ecx, word ptr [eax+8]
		cmp	ecx, 45h ; 'E'
		jnz	short loc_1482

loc_146C:				; CODE XREF: _u_printf_scientific_handler+162j
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		push	8
		mov	edx, [ebp+var_1C]
		push	edx
		call	_unum_setAttribute_56
		add	esp, 0Ch
		jmp	short loc_14A6
; ---------------------------------------------------------------------------

loc_1482:				; CODE XREF: _u_printf_scientific_handler+16Ej
		push	1
		push	7
		mov	eax, [ebp+var_1C]
		push	eax
		call	_unum_setAttribute_56
		add	esp, 0Ch
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		push	6
		mov	edx, [ebp+var_1C]
		push	edx
		call	_unum_setAttribute_56
		add	esp, 0Ch

loc_14A6:				; CODE XREF: _u_printf_scientific_handler+184j
		jmp	short loc_14D5
; ---------------------------------------------------------------------------

loc_14A8:				; CODE XREF: _u_printf_scientific_handler+156j
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+0Eh]
		test	ecx, ecx
		jz	short loc_14C5
		push	6
		push	8
		mov	eax, [ebp+var_1C]
		push	eax
		call	_unum_setAttribute_56
		add	esp, 0Ch
		jmp	short loc_14D5
; ---------------------------------------------------------------------------

loc_14C5:				; CODE XREF: _u_printf_scientific_handler+1B5j
		push	6
		push	8
		mov	eax, [ebp+var_1C]
		push	eax
		call	_unum_setAttribute_56
		add	esp, 0Ch

loc_14D5:				; CODE XREF: _u_printf_scientific_handler:loc_14A6j
					; _u_printf_scientific_handler+1C7j
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+11h]
		test	ecx, ecx
		jz	short loc_1505
		lea	eax, [ebp+var_105C]
		push	eax
		lea	ecx, [ebp+var_1038]
		push	ecx
		lea	edx, [ebp+var_102C]
		push	edx
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_u_printf_set_sign
		add	esp, 14h

loc_1505:				; CODE XREF: _u_printf_scientific_handler+1E2j
		lea	eax, [ebp+var_105C]
		push	eax
		push	0
		push	400h
		lea	ecx, [ebp+var_824]
		push	ecx
		sub	esp, 8
		fld	[ebp+var_10]
		fstp	[esp+11A4h+var_11A4]
		mov	edx, [ebp+var_1C]
		push	edx
		call	_unum_formatDouble_56
		add	esp, 1Ch
		mov	[ebp+var_1098],	eax
		cmp	[ebp+var_105C],	0
		jle	short loc_1548
		mov	[ebp+var_1098],	0

loc_1548:				; CODE XREF: _u_printf_scientific_handler+240j
		mov	eax, [ebp+var_1044]
		push	eax
		push	7
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_unum_setAttribute_56
		add	esp, 0Ch
		mov	eax, [ebp+var_1050]
		push	eax
		push	6
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_unum_setAttribute_56
		add	esp, 0Ch
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+11h]
		test	ecx, ecx
		jz	short loc_15AC
		mov	[ebp+var_10BC],	0
		lea	eax, [ebp+var_10BC]
		push	eax
		lea	ecx, [ebp+var_1038]
		push	ecx
		lea	edx, [ebp+var_102C]
		push	edx
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_u_printf_reset_sign
		add	esp, 14h

loc_15AC:				; CODE XREF: _u_printf_scientific_handler+27Fj
		mov	esi, esp
		mov	eax, [ebp+var_1098]
		push	eax
		lea	ecx, [ebp+var_824]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_15D6:				; CODE XREF: _u_printf_scientific_handler+6Aj
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN24
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1180h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_printf_scientific_handler endp

; ---------------------------------------------------------------------------
		align 4
$LN24		dd 7			; DATA XREF: _u_printf_scientific_handler+2DEo
		dd offset $LN23
$LN23		dd 0FFFFF7DCh, 800h	; DATA XREF: .text:0000160Co
		dd offset $LN16_1	; "result"
		dd 0FFFFEFD4h, 800h
		dd offset $LN17_1	; "prefixBuffer"
		dd 0FFFFEFC8h, 4
		dd offset $LN18_0	; "prefixBufferLen"
		dd 0FFFFEFA4h, 4
		dd offset $LN19		; "status"
		dd 0FFFFEF8Ch, 10h
		dd offset $LN20		; "srcExpBuf"
		dd 0FFFFEF50h, 10h
		dd offset $LN21		; "expBuf"
		dd 0FFFFEF44h, 4
		dd offset $LN22		; "localStatus"
$LN22		db 'localStatus',0      ; DATA XREF: .text:00001660o
$LN21		db 'expBuf',0           ; DATA XREF: .text:00001654o
$LN20		db 'srcExpBuf',0        ; DATA XREF: .text:00001648o
$LN19		db 'status',0           ; DATA XREF: .text:0000163Co
$LN18_0		db 'prefixBufferLen',0  ; DATA XREF: .text:00001630o
$LN17_1		db 'prefixBuffer',0     ; DATA XREF: .text:00001624o
$LN16_1		db 'result',0           ; DATA XREF: .text:00001618o
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 16ACh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_printf_percent_handler proc near	; DATA XREF: .rdata:0000019Co

var_115C	= qword	ptr -115Ch
var_1138	= byte ptr -1138h
var_1074	= dword	ptr -1074h
var_1068	= dword	ptr -1068h
var_105C	= dword	ptr -105Ch
var_1050	= dword	ptr -1050h
var_1044	= dword	ptr -1044h
var_1038	= dword	ptr -1038h
var_102C	= word ptr -102Ch
var_824		= byte ptr -824h
var_1C		= dword	ptr -1Ch
var_10		= qword	ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, 1138h
		call	__chkstk
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_1138]
		mov	ecx, 44Eh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_10]
		fld	qword ptr [eax]
		fstp	[ebp+var_10]
		mov	[ebp+var_1038],	800h
		mov	[ebp+var_1068],	0
		xor	eax, eax
		mov	[ebp+var_102C],	ax
		push	3
		mov	eax, [ebp+arg_8]
		push	eax
		call	_u_locbund_getNumberFormat_56
		add	esp, 8
		mov	[ebp+var_1C], eax
		cmp	[ebp+var_1C], 0
		jnz	short loc_171B
		xor	eax, eax
		jmp	loc_188F
; ---------------------------------------------------------------------------

loc_171B:				; CODE XREF: _u_printf_percent_handler+66j
		push	7
		mov	eax, [ebp+var_1C]
		push	eax
		call	_unum_getAttribute_56
		add	esp, 8
		mov	[ebp+var_1044],	eax
		push	6
		mov	eax, [ebp+var_1C]
		push	eax
		call	_unum_getAttribute_56
		add	esp, 8
		mov	[ebp+var_1050],	eax
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_1761
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		push	8
		mov	edx, [ebp+var_1C]
		push	edx
		call	_unum_setAttribute_56
		add	esp, 0Ch
		jmp	short loc_178E
; ---------------------------------------------------------------------------

loc_1761:				; CODE XREF: _u_printf_percent_handler+9Dj
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+0Eh]
		test	ecx, ecx
		jz	short loc_177E
		push	6
		push	8
		mov	eax, [ebp+var_1C]
		push	eax
		call	_unum_setAttribute_56
		add	esp, 0Ch
		jmp	short loc_178E
; ---------------------------------------------------------------------------

loc_177E:				; CODE XREF: _u_printf_percent_handler+BEj
		push	6
		push	8
		mov	eax, [ebp+var_1C]
		push	eax
		call	_unum_setAttribute_56
		add	esp, 0Ch

loc_178E:				; CODE XREF: _u_printf_percent_handler+B3j
					; _u_printf_percent_handler+D0j
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+11h]
		test	ecx, ecx
		jz	short loc_17BE
		lea	eax, [ebp+var_1068]
		push	eax
		lea	ecx, [ebp+var_1038]
		push	ecx
		lea	edx, [ebp+var_102C]
		push	edx
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_u_printf_set_sign
		add	esp, 14h

loc_17BE:				; CODE XREF: _u_printf_percent_handler+EBj
		lea	eax, [ebp+var_1068]
		push	eax
		push	0
		push	400h
		lea	ecx, [ebp+var_824]
		push	ecx
		sub	esp, 8
		fld	[ebp+var_10]
		fstp	[esp+115Ch+var_115C]
		mov	edx, [ebp+var_1C]
		push	edx
		call	_unum_formatDouble_56
		add	esp, 1Ch
		mov	[ebp+var_105C],	eax
		cmp	[ebp+var_1068],	0
		jle	short loc_1801
		mov	[ebp+var_105C],	0

loc_1801:				; CODE XREF: _u_printf_percent_handler+149j
		mov	eax, [ebp+var_1044]
		push	eax
		push	7
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_unum_setAttribute_56
		add	esp, 0Ch
		mov	eax, [ebp+var_1050]
		push	eax
		push	6
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_unum_setAttribute_56
		add	esp, 0Ch
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+11h]
		test	ecx, ecx
		jz	short loc_1865
		mov	[ebp+var_1074],	0
		lea	eax, [ebp+var_1074]
		push	eax
		lea	ecx, [ebp+var_1038]
		push	ecx
		lea	edx, [ebp+var_102C]
		push	edx
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_u_printf_reset_sign
		add	esp, 14h

loc_1865:				; CODE XREF: _u_printf_percent_handler+188j
		mov	esi, esp
		mov	eax, [ebp+var_105C]
		push	eax
		lea	ecx, [ebp+var_824]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_188F:				; CODE XREF: _u_printf_percent_handler+6Aj
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN17_2
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1138h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_printf_percent_handler endp

; ---------------------------------------------------------------------------
		align 10h
$LN17_2		dd 5			; DATA XREF: _u_printf_percent_handler+1E7o
		dd offset $LN16_2
$LN16_2		dd 0FFFFF7DCh, 800h	; DATA XREF: .text:000018C4o
		dd offset $LN11_4	; "result"
		dd 0FFFFEFD4h, 800h
		dd offset $LN12_5	; "prefixBuffer"
		dd 0FFFFEFC8h, 4
		dd offset $LN13_2	; "prefixBufferLen"
		dd 0FFFFEF98h, 4
		dd offset $LN14_1	; "status"
		dd 0FFFFEF8Ch, 4
		dd offset $LN15_1	; "localStatus"
$LN15_1		db 'localStatus',0      ; DATA XREF: .text:00001900o
$LN14_1		db 'status',0           ; DATA XREF: .text:000018F4o
$LN13_2		db 'prefixBufferLen',0  ; DATA XREF: .text:000018E8o
$LN12_5		db 'prefixBuffer',0     ; DATA XREF: .text:000018DCo
$LN11_4		db 'result',0           ; DATA XREF: .text:000018D0o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 193Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_printf_ustring_handler proc near	; DATA XREF: .rdata:000001B4o

var_E4		= byte ptr -0E4h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_10]
		mov	ecx, [eax]
		mov	[ebp+var_20], ecx
		cmp	[ebp+var_20], 0
		jnz	short loc_196F
		mov	[ebp+var_20], offset _gNullStr ; "(null)"

loc_196F:				; CODE XREF: _u_printf_ustring_handler+2Aj
		mov	eax, [ebp+var_20]
		push	eax
		call	_u_strlen_56
		add	esp, 4
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_1998
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		cmp	ecx, [ebp+var_8]
		jge	short loc_1998
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx

loc_1998:				; CODE XREF: _u_printf_ustring_handler+48j
					; _u_printf_ustring_handler+52j
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+var_20]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_14]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_printf_ustring_handler endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 19D8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_printf_uchar_handler	proc near	; DATA XREF: .rdata:00000134o

var_D8		= byte ptr -0D8h
var_14		= word ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_10]
		mov	cx, [eax]
		mov	[ebp+var_14], cx
		mov	esi, esp
		push	1
		lea	eax, [ebp+var_14]
		push	eax
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		call	ecx
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_1
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_printf_uchar_handler	endp

; ---------------------------------------------------------------------------
$LN5_1		dd 1			; DATA XREF: _u_printf_uchar_handler+5Bo
		dd offset $LN4_1
$LN4_1		dd 0FFFFFFECh, 2	; DATA XREF: .text:00001A58o
		dd offset $LN3_0
$LN3_0		dd 677261h		; DATA XREF: .text:00001A64o
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1A6Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl u_printf_scidbl_handler(int, int,	int, void *Src,	int)
_u_printf_scidbl_handler proc near	; DATA XREF: .rdata:00000154o
					; .rdata:00000254o

var_138		= qword	ptr -138h
var_124		= byte ptr -124h
var_60		= dword	ptr -60h
var_54		= dword	ptr -54h
var_48		= dword	ptr -48h
var_3C		= dword	ptr -3Ch
var_30		= qword	ptr -30h
Dst		= dword	ptr -20h
var_16		= word ptr -16h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Src		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 124h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_124]
		mov	ecx, 49h ; 'I'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_10]
		fld	qword ptr [eax]
		fstp	[ebp+var_30]
		push	18h		; Size
		mov	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+Dst]
		push	ecx		; Dst
		call	_memcpy
		add	esp, 0Ch
		cmp	[ebp+Dst], 0FFFFFFFFh
		jnz	short loc_1B05
		sub	esp, 8
		fld	[ebp+var_30]
		fstp	[esp+138h+var_138]
		call	_uprv_trunc_56
		add	esp, 8
		fld	[ebp+var_30]
		fucompp
		fnstsw	ax
		test	ah, 44h
		jp	short loc_1B05
		mov	eax, 66h ; 'f'
		mov	[ebp+var_16], ax
		mov	[ebp+Dst], 0
		mov	eax, [ebp+arg_10]
		push	eax
		lea	ecx, [ebp+Dst]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_u_printf_double_handler
		add	esp, 14h
		mov	[ebp+var_3C], eax
		jmp	loc_1C31
; ---------------------------------------------------------------------------

loc_1B05:				; CODE XREF: _u_printf_scidbl_handler+46j
					; _u_printf_scidbl_handler+63j
		fld	ds:__real@3f1a36e2eb1c432d
		fcomp	[ebp+var_30]
		fnstsw	ax
		test	ah, 41h
		jz	short loc_1B47
		cmp	[ebp+Dst], 1
		jge	short loc_1B2B
		fld	[ebp+var_30]
		fcomp	ds:__real@412e848000000000
		fnstsw	ax
		test	ah, 1
		jz	short loc_1B47

loc_1B2B:				; CODE XREF: _u_printf_scidbl_handler+ADj
		cmp	[ebp+Dst], 0FFFFFFFFh
		jz	short loc_1B83
		mov	eax, [ebp+Dst]
		push	eax
		call	_uprv_pow10_56
		add	esp, 4
		fcomp	[ebp+var_30]
		fnstsw	ax
		test	ah, 5
		jp	short loc_1B83

loc_1B47:				; CODE XREF: _u_printf_scidbl_handler+A7j
					; _u_printf_scidbl_handler+BDj
		movzx	eax, [ebp+var_16]
		sub	eax, 2
		mov	[ebp+var_16], ax
		cmp	[ebp+Dst], 0FFFFFFFFh
		jnz	short loc_1B5F
		mov	[ebp+Dst], 5

loc_1B5F:				; CODE XREF: _u_printf_scidbl_handler+EAj
		mov	eax, [ebp+arg_10]
		push	eax
		lea	ecx, [ebp+Dst]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_u_printf_scientific_handler
		add	esp, 14h
		mov	[ebp+var_3C], eax
		jmp	loc_1C31
; ---------------------------------------------------------------------------

loc_1B83:				; CODE XREF: _u_printf_scidbl_handler+C3j
					; _u_printf_scidbl_handler+D9j
		push	1
		mov	eax, [ebp+arg_8]
		push	eax
		call	_u_locbund_getNumberFormat_56
		add	esp, 8
		mov	[ebp+var_48], eax
		cmp	[ebp+var_48], 0
		jnz	short loc_1BA1
		xor	eax, eax
		jmp	loc_1C34
; ---------------------------------------------------------------------------

loc_1BA1:				; CODE XREF: _u_printf_scidbl_handler+12Cj
		push	12h
		mov	eax, [ebp+var_48]
		push	eax
		call	_unum_getAttribute_56
		add	esp, 8
		mov	[ebp+var_54], eax
		mov	eax, [ebp+Dst]
		mov	[ebp+var_60], eax
		mov	eax, 66h ; 'f'
		mov	[ebp+var_16], ax
		cmp	[ebp+var_60], 0FFFFFFFFh
		jnz	short loc_1BCE
		mov	[ebp+var_60], 6

loc_1BCE:				; CODE XREF: _u_printf_scidbl_handler+159j
		push	1
		push	10h
		mov	eax, [ebp+var_48]
		push	eax
		call	_unum_setAttribute_56
		add	esp, 0Ch
		mov	eax, [ebp+var_60]
		push	eax
		push	12h
		mov	ecx, [ebp+var_48]
		push	ecx
		call	_unum_setAttribute_56
		add	esp, 0Ch
		mov	eax, [ebp+arg_10]
		push	eax
		lea	ecx, [ebp+Dst]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_u_printf_double_handler
		add	esp, 14h
		mov	[ebp+var_3C], eax
		mov	eax, [ebp+var_54]
		push	eax
		push	12h
		mov	ecx, [ebp+var_48]
		push	ecx
		call	_unum_setAttribute_56
		add	esp, 0Ch
		push	0
		push	10h
		mov	eax, [ebp+var_48]
		push	eax
		call	_unum_setAttribute_56
		add	esp, 0Ch

loc_1C31:				; CODE XREF: _u_printf_scidbl_handler+94j
					; _u_printf_scidbl_handler+112j
		mov	eax, [ebp+var_3C]

loc_1C34:				; CODE XREF: _u_printf_scidbl_handler+130j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN14_2
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 124h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_printf_scidbl_handler endp

; ---------------------------------------------------------------------------
		align 4
$LN14_2		dd 1			; DATA XREF: _u_printf_scidbl_handler+1CCo
		dd offset $LN13_3
$LN13_3		dd 0FFFFFFE0h, 18h	; DATA XREF: .text:00001C68o
		dd offset $LN12_6	; "scidbl_info"
$LN12_6		db 'scidbl_info',0      ; DATA XREF: .text:00001C74o
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 1C84h
		public __real@412e848000000000
__real@412e848000000000	dq 1000000.0	; DATA XREF: _u_printf_scidbl_handler+B2r
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 1C8Ch
		public __real@3f1a36e2eb1c432d
__real@3f1a36e2eb1c432d	dq 0.0001	; DATA XREF: _u_printf_scidbl_handler:loc_1B05r
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1C94h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_printf_count_handler	proc near	; DATA XREF: .rdata:0000028Co

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_10]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_C]
		mov	edx, [ecx+4]
		mov	[eax], edx
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_u_printf_count_handler	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1CD0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_printf_spellout_handler proc	near	; DATA XREF: .rdata:000001CCo

var_115C	= qword	ptr -115Ch
var_1138	= byte ptr -1138h
var_1074	= dword	ptr -1074h
var_1068	= dword	ptr -1068h
var_105C	= dword	ptr -105Ch
var_1050	= dword	ptr -1050h
var_1044	= dword	ptr -1044h
var_1038	= dword	ptr -1038h
var_102C	= word ptr -102Ch
var_824		= byte ptr -824h
var_1C		= dword	ptr -1Ch
var_10		= qword	ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, 1138h
		call	__chkstk
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_1138]
		mov	ecx, 44Eh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_10]
		fld	qword ptr [eax]
		fstp	[ebp+var_10]
		mov	[ebp+var_1038],	800h
		mov	[ebp+var_1068],	0
		xor	eax, eax
		mov	[ebp+var_102C],	ax
		push	5
		mov	eax, [ebp+arg_8]
		push	eax
		call	_u_locbund_getNumberFormat_56
		add	esp, 8
		mov	[ebp+var_1C], eax
		cmp	[ebp+var_1C], 0
		jnz	short loc_1D3F
		xor	eax, eax
		jmp	loc_1EB3
; ---------------------------------------------------------------------------

loc_1D3F:				; CODE XREF: _u_printf_spellout_handler+66j
		push	7
		mov	eax, [ebp+var_1C]
		push	eax
		call	_unum_getAttribute_56
		add	esp, 8
		mov	[ebp+var_1044],	eax
		push	6
		mov	eax, [ebp+var_1C]
		push	eax
		call	_unum_getAttribute_56
		add	esp, 8
		mov	[ebp+var_1050],	eax
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_1D85
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		push	8
		mov	edx, [ebp+var_1C]
		push	edx
		call	_unum_setAttribute_56
		add	esp, 0Ch
		jmp	short loc_1DB2
; ---------------------------------------------------------------------------

loc_1D85:				; CODE XREF: _u_printf_spellout_handler+9Dj
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+0Eh]
		test	ecx, ecx
		jz	short loc_1DA2
		push	6
		push	8
		mov	eax, [ebp+var_1C]
		push	eax
		call	_unum_setAttribute_56
		add	esp, 0Ch
		jmp	short loc_1DB2
; ---------------------------------------------------------------------------

loc_1DA2:				; CODE XREF: _u_printf_spellout_handler+BEj
		push	6
		push	8
		mov	eax, [ebp+var_1C]
		push	eax
		call	_unum_setAttribute_56
		add	esp, 0Ch

loc_1DB2:				; CODE XREF: _u_printf_spellout_handler+B3j
					; _u_printf_spellout_handler+D0j
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+11h]
		test	ecx, ecx
		jz	short loc_1DE2
		lea	eax, [ebp+var_1068]
		push	eax
		lea	ecx, [ebp+var_1038]
		push	ecx
		lea	edx, [ebp+var_102C]
		push	edx
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_u_printf_set_sign
		add	esp, 14h

loc_1DE2:				; CODE XREF: _u_printf_spellout_handler+EBj
		lea	eax, [ebp+var_1068]
		push	eax
		push	0
		push	400h
		lea	ecx, [ebp+var_824]
		push	ecx
		sub	esp, 8
		fld	[ebp+var_10]
		fstp	[esp+115Ch+var_115C]
		mov	edx, [ebp+var_1C]
		push	edx
		call	_unum_formatDouble_56
		add	esp, 1Ch
		mov	[ebp+var_105C],	eax
		cmp	[ebp+var_1068],	0
		jle	short loc_1E25
		mov	[ebp+var_105C],	0

loc_1E25:				; CODE XREF: _u_printf_spellout_handler+149j
		mov	eax, [ebp+var_1044]
		push	eax
		push	7
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_unum_setAttribute_56
		add	esp, 0Ch
		mov	eax, [ebp+var_1050]
		push	eax
		push	6
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_unum_setAttribute_56
		add	esp, 0Ch
		mov	eax, [ebp+arg_C]
		movsx	ecx, byte ptr [eax+11h]
		test	ecx, ecx
		jz	short loc_1E89
		mov	[ebp+var_1074],	0
		lea	eax, [ebp+var_1074]
		push	eax
		lea	ecx, [ebp+var_1038]
		push	ecx
		lea	edx, [ebp+var_102C]
		push	edx
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+var_1C]
		push	ecx
		call	_u_printf_reset_sign
		add	esp, 14h

loc_1E89:				; CODE XREF: _u_printf_spellout_handler+188j
		mov	esi, esp
		mov	eax, [ebp+var_105C]
		push	eax
		lea	ecx, [ebp+var_824]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1EB3:				; CODE XREF: _u_printf_spellout_handler+6Aj
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN17_3
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1138h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_printf_spellout_handler endp

; ---------------------------------------------------------------------------
		align 4
$LN17_3		dd 5			; DATA XREF: _u_printf_spellout_handler+1E7o
		dd offset $LN16_3
$LN16_3		dd 0FFFFF7DCh, 800h	; DATA XREF: .text:00001EE8o
		dd offset $LN11_5	; "result"
		dd 0FFFFEFD4h, 800h
		dd offset $LN12_7	; "prefixBuffer"
		dd 0FFFFEFC8h, 4
		dd offset $LN13_4	; "prefixBufferLen"
		dd 0FFFFEF98h, 4
		dd offset $LN14_3	; "status"
		dd 0FFFFEF8Ch, 4
		dd offset $LN15_2	; "localStatus"
$LN15_2		db 'localStatus',0      ; DATA XREF: .text:00001F24o
$LN14_3		db 'status',0           ; DATA XREF: .text:00001F18o
$LN13_4		db 'prefixBufferLen',0  ; DATA XREF: .text:00001F0Co
$LN12_7		db 'prefixBuffer',0     ; DATA XREF: .text:00001F00o
$LN11_5		db 'result',0           ; DATA XREF: .text:00001EF4o
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1F60h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_printf_parse_56
_u_printf_parse_56 proc	near

var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_B4		= dword	ptr -0B4h
var_A8		= dword	ptr -0A8h
var_9C		= dword	ptr -9Ch
var_90		= dword	ptr -90h
var_84		= dword	ptr -84h
var_78		= dword	ptr -78h
Dst		= dword	ptr -6Ch
var_60		= byte ptr -60h
var_5C		= dword	ptr -5Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_1C		= qword	ptr -1Ch
var_C		= word ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		sub	esp, 180h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_180]
		mov	ecx, 60h ; '`'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_60]
		mov	[ebp+Dst], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_78], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_9C], eax
		mov	[ebp+var_A8], 0
		mov	[ebp+var_B4], 0
		cmp	[ebp+arg_C], 0
		jz	short loc_1FC0
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax+4], 0
		jl	short loc_1FF1

loc_1FC0:				; CODE XREF: _u_printf_parse_56+55j
		lea	eax, [ebp+var_B4]
		push	eax
		mov	ecx, [ebp+arg_18]
		push	ecx
		mov	edx, [ebp+var_9C]
		push	edx
		call	_parseArguments
		add	esp, 0Ch
		mov	[ebp+var_A8], eax
		cmp	[ebp+var_B4], 0
		jle	short loc_1FF1
		or	eax, 0FFFFFFFFh
		jmp	loc_2D1E
; ---------------------------------------------------------------------------

loc_1FF1:				; CODE XREF: _u_printf_parse_56+5Ej
					; _u_printf_parse_56+87j ...
		cmp	[ebp+arg_C], 0
		jz	short loc_2004
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax+4], 0
		jl	loc_2CFE

loc_2004:				; CODE XREF: _u_printf_parse_56+95j
		mov	eax, [ebp+var_78]
		mov	[ebp+var_90], eax

loc_200D:				; CODE XREF: _u_printf_parse_56+CBj
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 25h ; '%'
		jz	short loc_202D
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		test	ecx, ecx
		jz	short loc_202D
		mov	eax, [ebp+var_78]
		add	eax, 2
		mov	[ebp+var_78], eax
		jmp	short loc_200D
; ---------------------------------------------------------------------------

loc_202D:				; CODE XREF: _u_printf_parse_56+B6j
					; _u_printf_parse_56+C0j
		mov	eax, [ebp+var_78]
		cmp	eax, [ebp+var_90]
		jbe	short loc_206C
		mov	eax, [ebp+var_78]
		sub	eax, [ebp+var_90]
		sar	eax, 1
		mov	esi, esp
		push	eax
		mov	ecx, [ebp+var_90]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		call	ecx
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+arg_14]
		add	eax, [edx]
		mov	ecx, [ebp+arg_14]
		mov	[ecx], eax

loc_206C:				; CODE XREF: _u_printf_parse_56+D6j
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		test	ecx, ecx
		jnz	short loc_207B
		jmp	loc_2CFE
; ---------------------------------------------------------------------------

loc_207B:				; CODE XREF: _u_printf_parse_56+114j
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	[ebp+var_44], 0FFFFFFFFh
		mov	[ebp+var_40], 0FFFFFFFFh
		push	18h		; Size
		push	0		; Val
		mov	eax, [ebp+Dst]
		push	eax		; Dst
		call	_memset
		add	esp, 0Ch
		mov	eax, [ebp+Dst]
		mov	dword ptr [eax], 0FFFFFFFFh
		mov	eax, [ebp+Dst]
		mov	dword ptr [eax+4], 0FFFFFFFFh
		mov	eax, 20h ; ' '
		mov	ecx, [ebp+Dst]
		mov	[ecx+0Ch], ax
		mov	eax, [ebp+var_78]
		add	eax, 2
		mov	[ebp+var_78], eax
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_213A
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_213A
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_213A
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_213A
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_213A
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_213A
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_213A
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_213A
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_213A
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	loc_2285

loc_213A:				; CODE XREF: _u_printf_parse_56+171j
					; _u_printf_parse_56+17Cj ...
		mov	eax, [ebp+var_78]
		mov	[ebp+var_84], eax
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_21B5
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_21B5
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_21B5
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_21B5
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_21B5
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_21B5
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_21B5
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_21B5
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_21B5
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	loc_225F

loc_21B5:				; CODE XREF: _u_printf_parse_56+1ECj
					; _u_printf_parse_56+1F7j ...
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		sub	ecx, 30h ; '0'
		mov	[ebp+var_40], ecx
		mov	edx, [ebp+var_78]
		add	edx, 2
		mov	[ebp+var_78], edx

loc_21CA:				; CODE XREF: _u_printf_parse_56+2FAj
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_2238
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_2238
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_2238
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_2238
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_2238
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_2238
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_2238
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_2238
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_2238
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	short loc_225F

loc_2238:				; CODE XREF: _u_printf_parse_56+273j
					; _u_printf_parse_56+27Ej ...
		mov	eax, [ebp+var_40]
		imul	eax, 0Ah
		mov	[ebp+var_40], eax
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		mov	edx, [ebp+var_40]
		lea	eax, [edx+ecx-30h]
		mov	[ebp+var_40], eax
		mov	ecx, [ebp+var_78]
		add	ecx, 2
		mov	[ebp+var_78], ecx
		jmp	loc_21CA
; ---------------------------------------------------------------------------

loc_225F:				; CODE XREF: _u_printf_parse_56+24Fj
					; _u_printf_parse_56+2D6j
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 24h ; '$'
		jz	short loc_227C
		mov	[ebp+var_40], 0FFFFFFFFh
		mov	eax, [ebp+var_84]
		mov	[ebp+var_78], eax
		jmp	short loc_2285
; ---------------------------------------------------------------------------

loc_227C:				; CODE XREF: _u_printf_parse_56+308j
		mov	eax, [ebp+var_78]
		add	eax, 2
		mov	[ebp+var_78], eax

loc_2285:				; CODE XREF: _u_printf_parse_56+1D4j
					; _u_printf_parse_56+31Aj ...
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 2Dh ; '-'
		jz	short loc_22CB
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 2Bh ; '+'
		jz	short loc_22CB
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 20h ; ' '
		jz	short loc_22CB
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 23h ; '#'
		jz	short loc_22CB
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_22CB
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 28h ; '('
		jnz	loc_2451

loc_22CB:				; CODE XREF: _u_printf_parse_56+32Ej
					; _u_printf_parse_56+339j ...
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		mov	[ebp+var_17C], ecx
		mov	edx, [ebp+var_78]
		add	edx, 2
		mov	[ebp+var_78], edx
		mov	eax, [ebp+var_17C]
		mov	[ebp+var_180], eax
		mov	ecx, [ebp+var_180]
		sub	ecx, 20h ; ' '
		mov	[ebp+var_180], ecx
		cmp	[ebp+var_180], 10h ; switch 17 cases
		ja	$LN76		; jumptable 00002315 default case
		mov	edx, [ebp+var_180]
		movzx	eax, ds:$LN102[edx]
		jmp	ds:$LN108[eax*4] ; switch jump
; ---------------------------------------------------------------------------

$LN75:					; CODE XREF: _u_printf_parse_56+3B5j
					; DATA XREF: .text:$LN108o
		mov	eax, [ebp+Dst]	; jumptable 00002315 case 13
		mov	byte ptr [eax+10h], 1
		jmp	$LN76		; jumptable 00002315 default case
; ---------------------------------------------------------------------------

$LN74:					; CODE XREF: _u_printf_parse_56+3B5j
					; DATA XREF: .text:$LN108o
		mov	eax, [ebp+Dst]	; jumptable 00002315 case 11
		mov	byte ptr [eax+11h], 1
		jmp	$LN76		; jumptable 00002315 default case
; ---------------------------------------------------------------------------

$LN73:					; CODE XREF: _u_printf_parse_56+3B5j
					; DATA XREF: .text:$LN108o
		mov	eax, [ebp+Dst]	; jumptable 00002315 case 0
		mov	byte ptr [eax+11h], 1
		mov	eax, [ebp+Dst]
		mov	byte ptr [eax+0Fh], 1
		jmp	$LN76		; jumptable 00002315 default case
; ---------------------------------------------------------------------------

$LN72:					; CODE XREF: _u_printf_parse_56+3B5j
					; DATA XREF: .text:$LN108o
		mov	eax, [ebp+Dst]	; jumptable 00002315 case 3
		mov	byte ptr [eax+0Eh], 1
		jmp	$LN76		; jumptable 00002315 default case
; ---------------------------------------------------------------------------

$LN71:					; CODE XREF: _u_printf_parse_56+3B5j
					; DATA XREF: .text:$LN108o
		mov	eax, [ebp+Dst]	; jumptable 00002315 case 16
		mov	byte ptr [eax+12h], 1
		mov	eax, 30h ; '0'
		mov	ecx, [ebp+Dst]
		mov	[ecx+0Ch], ax
		jmp	$LN76		; jumptable 00002315 default case
; ---------------------------------------------------------------------------

$LN70:					; CODE XREF: _u_printf_parse_56+3B5j
					; DATA XREF: .text:$LN108o
		mov	eax, [ebp+var_78] ; jumptable 00002315 case 8
		mov	cx, [eax]
		mov	word ptr [ebp+var_17C+2], cx
		mov	edx, [ebp+var_78]
		add	edx, 2
		mov	[ebp+var_78], edx
		movzx	eax, word ptr [ebp+var_17C+2]
		push	eax
		call	_ufmt_digitvalue_56
		add	esp, 4
		mov	ecx, [ebp+Dst]
		mov	[ecx+0Ch], ax
		mov	eax, [ebp+var_78]
		mov	cx, [eax]
		mov	word ptr [ebp+var_17C+2], cx
		mov	edx, [ebp+var_78]
		add	edx, 2
		mov	[ebp+var_78], edx
		movzx	eax, word ptr [ebp+var_17C+2]
		push	eax
		call	_ufmt_digitvalue_56
		add	esp, 4
		mov	ecx, [ebp+Dst]
		movzx	edx, word ptr [ecx+0Ch]
		shl	edx, 4
		add	edx, eax
		mov	eax, [ebp+Dst]
		mov	[eax+0Ch], dx
		mov	eax, [ebp+var_78]
		mov	cx, [eax]
		mov	word ptr [ebp+var_17C+2], cx
		mov	edx, [ebp+var_78]
		add	edx, 2
		mov	[ebp+var_78], edx
		movzx	eax, word ptr [ebp+var_17C+2]
		push	eax
		call	_ufmt_digitvalue_56
		add	esp, 4
		mov	ecx, [ebp+Dst]
		movzx	edx, word ptr [ecx+0Ch]
		shl	edx, 4
		add	edx, eax
		mov	eax, [ebp+Dst]
		mov	[eax+0Ch], dx
		mov	eax, [ebp+var_78]
		mov	cx, [eax]
		mov	word ptr [ebp+var_17C+2], cx
		mov	edx, [ebp+var_78]
		add	edx, 2
		mov	[ebp+var_78], edx
		movzx	eax, word ptr [ebp+var_17C+2]
		push	eax
		call	_ufmt_digitvalue_56
		add	esp, 4
		mov	ecx, [ebp+Dst]
		movzx	edx, word ptr [ecx+0Ch]
		shl	edx, 4
		add	edx, eax
		mov	eax, [ebp+Dst]
		mov	[eax+0Ch], dx
		mov	eax, [ebp+var_78]
		add	eax, 2
		mov	[ebp+var_78], eax

$LN76:					; CODE XREF: _u_printf_parse_56+3A2j
					; _u_printf_parse_56+3B5j ...
		jmp	loc_2285	; jumptable 00002315 default case
; ---------------------------------------------------------------------------

loc_2451:				; CODE XREF: _u_printf_parse_56+365j
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 2Ah ; '*'
		jnz	loc_25C3
		mov	eax, [ebp+Dst]
		mov	dword ptr [eax+4], 0FFFFFFFEh
		mov	eax, [ebp+var_78]
		add	eax, 2
		mov	[ebp+var_78], eax
		mov	eax, [ebp+var_78]
		mov	[ebp+var_84], eax
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_24EE
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_24EE
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_24EE
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_24EE
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_24EE
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_24EE
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_24EE
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_24EE
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_24EE
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	loc_2598

loc_24EE:				; CODE XREF: _u_printf_parse_56+525j
					; _u_printf_parse_56+530j ...
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		sub	ecx, 30h ; '0'
		mov	[ebp+var_48], ecx
		mov	edx, [ebp+var_78]
		add	edx, 2
		mov	[ebp+var_78], edx

loc_2503:				; CODE XREF: _u_printf_parse_56+633j
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_2571
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_2571
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_2571
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_2571
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_2571
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_2571
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_2571
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_2571
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_2571
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	short loc_2598

loc_2571:				; CODE XREF: _u_printf_parse_56+5ACj
					; _u_printf_parse_56+5B7j ...
		mov	eax, [ebp+var_48]
		imul	eax, 0Ah
		mov	[ebp+var_48], eax
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		mov	edx, [ebp+var_48]
		lea	eax, [edx+ecx-30h]
		mov	[ebp+var_48], eax
		mov	ecx, [ebp+var_78]
		add	ecx, 2
		mov	[ebp+var_78], ecx
		jmp	loc_2503
; ---------------------------------------------------------------------------

loc_2598:				; CODE XREF: _u_printf_parse_56+588j
					; _u_printf_parse_56+60Fj
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 24h ; '$'
		jz	short loc_25B5
		mov	[ebp+var_48], 0FFFFFFFFh
		mov	eax, [ebp+var_84]
		mov	[ebp+var_78], eax
		jmp	short loc_25BE
; ---------------------------------------------------------------------------

loc_25B5:				; CODE XREF: _u_printf_parse_56+641j
		mov	eax, [ebp+var_78]
		add	eax, 2
		mov	[ebp+var_78], eax

loc_25BE:				; CODE XREF: _u_printf_parse_56+653j
		jmp	loc_26EE
; ---------------------------------------------------------------------------

loc_25C3:				; CODE XREF: _u_printf_parse_56+4FAj
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_2635
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_2635
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_2635
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_2635
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_2635
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_2635
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_2635
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_2635
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_2635
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	loc_26EE

loc_2635:				; CODE XREF: _u_printf_parse_56+66Cj
					; _u_printf_parse_56+677j ...
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		sub	ecx, 30h ; '0'
		mov	edx, [ebp+Dst]
		mov	[edx+4], ecx
		mov	eax, [ebp+var_78]
		add	eax, 2
		mov	[ebp+var_78], eax

loc_264D:				; CODE XREF: _u_printf_parse_56+789j
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_26BB
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_26BB
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_26BB
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_26BB
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_26BB
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_26BB
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_26BB
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_26BB
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_26BB
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	short loc_26EE

loc_26BB:				; CODE XREF: _u_printf_parse_56+6F6j
					; _u_printf_parse_56+701j ...
		mov	eax, [ebp+Dst]
		mov	ecx, [eax+4]
		imul	ecx, 0Ah
		mov	edx, [ebp+Dst]
		mov	[edx+4], ecx
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		mov	edx, [ebp+Dst]
		mov	eax, [edx+4]
		lea	ecx, [ecx+eax-30h]
		mov	edx, [ebp+Dst]
		mov	[edx+4], ecx
		mov	eax, [ebp+var_78]
		add	eax, 2
		mov	[ebp+var_78], eax
		jmp	loc_264D
; ---------------------------------------------------------------------------

loc_26EE:				; CODE XREF: _u_printf_parse_56:loc_25BEj
					; _u_printf_parse_56+6CFj ...
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 2Eh ; '.'
		jnz	loc_299D
		mov	eax, [ebp+var_78]
		add	eax, 2
		mov	[ebp+var_78], eax
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 2Ah ; '*'
		jnz	loc_2877
		mov	eax, [ebp+Dst]
		mov	dword ptr [eax], 0FFFFFFFEh
		mov	eax, [ebp+var_78]
		add	eax, 2
		mov	[ebp+var_78], eax
		mov	eax, [ebp+var_78]
		mov	[ebp+var_84], eax
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_27A2
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_27A2
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_27A2
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_27A2
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_27A2
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_27A2
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_27A2
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_27A2
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_27A2
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	loc_2872

loc_27A2:				; CODE XREF: _u_printf_parse_56+7D9j
					; _u_printf_parse_56+7E4j ...
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		sub	ecx, 30h ; '0'
		mov	[ebp+var_44], ecx
		mov	edx, [ebp+var_78]
		add	edx, 2
		mov	[ebp+var_78], edx

loc_27B7:				; CODE XREF: _u_printf_parse_56+8E7j
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_2825
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_2825
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_2825
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_2825
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_2825
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_2825
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_2825
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_2825
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_2825
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	short loc_284C

loc_2825:				; CODE XREF: _u_printf_parse_56+860j
					; _u_printf_parse_56+86Bj ...
		mov	eax, [ebp+var_44]
		imul	eax, 0Ah
		mov	[ebp+var_44], eax
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		mov	edx, [ebp+var_44]
		lea	eax, [edx+ecx-30h]
		mov	[ebp+var_44], eax
		mov	ecx, [ebp+var_78]
		add	ecx, 2
		mov	[ebp+var_78], ecx
		jmp	loc_27B7
; ---------------------------------------------------------------------------

loc_284C:				; CODE XREF: _u_printf_parse_56+8C3j
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 24h ; '$'
		jz	short loc_2869
		mov	[ebp+var_44], 0FFFFFFFFh
		mov	eax, [ebp+var_84]
		mov	[ebp+var_78], eax
		jmp	short loc_2872
; ---------------------------------------------------------------------------

loc_2869:				; CODE XREF: _u_printf_parse_56+8F5j
		mov	eax, [ebp+var_78]
		add	eax, 2
		mov	[ebp+var_78], eax

loc_2872:				; CODE XREF: _u_printf_parse_56+83Cj
					; _u_printf_parse_56+907j
		jmp	loc_299D
; ---------------------------------------------------------------------------

loc_2877:				; CODE XREF: _u_printf_parse_56+7AFj
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_28E9
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_28E9
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_28E9
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_28E9
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_28E9
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_28E9
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_28E9
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_28E9
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_28E9
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	loc_299D

loc_28E9:				; CODE XREF: _u_printf_parse_56+920j
					; _u_printf_parse_56+92Bj ...
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		sub	ecx, 30h ; '0'
		mov	edx, [ebp+Dst]
		mov	[edx], ecx
		mov	eax, [ebp+var_78]
		add	eax, 2
		mov	[ebp+var_78], eax

loc_2900:				; CODE XREF: _u_printf_parse_56+A38j
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_296E
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_296E
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_296E
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_296E
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_296E
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_296E
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_296E
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_296E
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_296E
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	short loc_299D

loc_296E:				; CODE XREF: _u_printf_parse_56+9A9j
					; _u_printf_parse_56+9B4j ...
		mov	eax, [ebp+Dst]
		mov	ecx, [eax]
		imul	ecx, 0Ah
		mov	edx, [ebp+Dst]
		mov	[edx], ecx
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		mov	edx, [ebp+Dst]
		mov	eax, [edx]
		lea	ecx, [ecx+eax-30h]
		mov	edx, [ebp+Dst]
		mov	[edx], ecx
		mov	eax, [ebp+var_78]
		add	eax, 2
		mov	[ebp+var_78], eax
		jmp	loc_2900
; ---------------------------------------------------------------------------

loc_299D:				; CODE XREF: _u_printf_parse_56+797j
					; _u_printf_parse_56:loc_2872j	...
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 68h ; 'h'
		jz	short loc_29BE
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 6Ch ; 'l'
		jz	short loc_29BE
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 4Ch ; 'L'
		jnz	short loc_2A32

loc_29BE:				; CODE XREF: _u_printf_parse_56+A46j
					; _u_printf_parse_56+A51j
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		mov	[ebp+var_17C], ecx
		mov	edx, [ebp+var_78]
		add	edx, 2
		mov	[ebp+var_78], edx
		mov	eax, [ebp+var_17C]
		mov	[ebp+var_180], eax
		cmp	[ebp+var_180], 4Ch ; 'L'
		jz	short loc_2A2B
		cmp	[ebp+var_180], 68h ; 'h'
		jz	short loc_29FC
		cmp	[ebp+var_180], 6Ch ; 'l'
		jz	short loc_2A05
		jmp	short loc_2A32
; ---------------------------------------------------------------------------

loc_29FC:				; CODE XREF: _u_printf_parse_56+A8Fj
		mov	eax, [ebp+Dst]
		mov	byte ptr [eax+14h], 1
		jmp	short loc_2A32
; ---------------------------------------------------------------------------

loc_2A05:				; CODE XREF: _u_printf_parse_56+A98j
		mov	eax, [ebp+var_78]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 6Ch ; 'l'
		jnz	short loc_2A22
		mov	eax, [ebp+Dst]
		mov	byte ptr [eax+16h], 1
		mov	eax, [ebp+var_78]
		add	eax, 2
		mov	[ebp+var_78], eax
		jmp	short loc_2A29
; ---------------------------------------------------------------------------

loc_2A22:				; CODE XREF: _u_printf_parse_56+AAEj
		mov	eax, [ebp+Dst]
		mov	byte ptr [eax+15h], 1

loc_2A29:				; CODE XREF: _u_printf_parse_56+AC0j
		jmp	short loc_2A32
; ---------------------------------------------------------------------------

loc_2A2B:				; CODE XREF: _u_printf_parse_56+A86j
		mov	eax, [ebp+Dst]
		mov	byte ptr [eax+13h], 1

loc_2A32:				; CODE XREF: _u_printf_parse_56+A5Cj
					; _u_printf_parse_56+A9Aj ...
		mov	eax, [ebp+Dst]
		mov	ecx, [ebp+var_78]
		mov	dx, [ecx]
		mov	[eax+0Ah], dx
		mov	eax, [ebp+var_78]
		add	eax, 2
		mov	[ebp+var_78], eax
		mov	eax, [ebp+Dst]
		mov	ecx, [ebp+Dst]
		mov	dx, [ecx+0Ah]
		mov	[eax+8], dx
		cmp	[ebp+var_5C], 0FFFFFFFEh
		jnz	short loc_2A96
		cmp	[ebp+var_48], 0FFFFFFFFh
		jnz	short loc_2A77
		mov	eax, [ebp+arg_18]
		add	eax, 4
		mov	[ebp+arg_18], eax
		mov	ecx, [ebp+Dst]
		mov	edx, [ebp+arg_18]
		mov	eax, [edx-4]
		mov	[ecx+4], eax

loc_2A77:				; CODE XREF: _u_printf_parse_56+B00j
		mov	eax, [ebp+Dst]
		cmp	dword ptr [eax+4], 0
		jge	short loc_2A96
		mov	eax, [ebp+Dst]
		mov	ecx, [eax+4]
		imul	ecx, -1
		mov	edx, [ebp+Dst]
		mov	[edx+4], ecx
		mov	eax, [ebp+Dst]
		mov	byte ptr [eax+10h], 1

loc_2A96:				; CODE XREF: _u_printf_parse_56+AFAj
					; _u_printf_parse_56+B1Ej
		mov	eax, [ebp+Dst]
		cmp	dword ptr [eax], 0FFFFFFFEh
		jnz	short loc_2AC9
		cmp	[ebp+var_44], 0FFFFFFFFh
		jnz	short loc_2AB8
		mov	eax, [ebp+arg_18]
		add	eax, 4
		mov	[ebp+arg_18], eax
		mov	ecx, [ebp+Dst]
		mov	edx, [ebp+arg_18]
		mov	eax, [edx-4]
		mov	[ecx], eax

loc_2AB8:				; CODE XREF: _u_printf_parse_56+B42j
		mov	eax, [ebp+Dst]
		cmp	dword ptr [eax], 0
		jge	short loc_2AC9
		mov	eax, [ebp+Dst]
		mov	dword ptr [eax], 0

loc_2AC9:				; CODE XREF: _u_printf_parse_56+B3Cj
					; _u_printf_parse_56+B5Ej
		mov	eax, [ebp+Dst]
		movzx	ecx, word ptr [eax+0Ah]
		sub	ecx, 20h ; ' '
		mov	[ebp+var_C], cx
		movzx	eax, [ebp+var_C]
		cmp	eax, 6Ch ; 'l'
		jge	loc_2CC8
		movzx	eax, [ebp+var_C]
		mov	ecx, _g_u_printf_infos[eax*8]
		mov	[ebp+var_28], ecx
		cmp	[ebp+var_40], 0
		jle	loc_2B95
		mov	eax, [ebp+var_40]
		sub	eax, 1
		mov	[ebp+var_40], eax
		mov	eax, [ebp+var_28]
		mov	[ebp+var_17C], eax
		mov	ecx, [ebp+var_17C]
		sub	ecx, 2
		mov	[ebp+var_17C], ecx
		cmp	[ebp+var_17C], 8 ; switch 9 cases
		ja	short loc_2B89	; jumptable 00002B2C default case
		mov	edx, [ebp+var_17C]
		jmp	ds:$LN109[edx*4] ; switch jump
; ---------------------------------------------------------------------------

$LN21_0:				; CODE XREF: _u_printf_parse_56+BCCj
					; DATA XREF: .text:$LN109o
		mov	eax, [ebp+Dst]	; jumptable 00002B2C case 0
		mov	ecx, [ebp+arg_14]
		mov	edx, [ecx]
		mov	[eax+4], edx

$LN20_0:				; CODE XREF: _u_printf_parse_56+BCCj
					; DATA XREF: .text:$LN109o
		mov	eax, [ebp+var_40] ; jumptable 00002B2C cases 3,4,8
		mov	ecx, [ebp+var_A8]
		mov	edx, [ecx+eax*8]
		mov	dword ptr [ebp+var_1C],	edx
		jmp	short loc_2B90
; ---------------------------------------------------------------------------

$LN19_0:				; CODE XREF: _u_printf_parse_56+BCCj
					; DATA XREF: .text:$LN109o
		mov	eax, [ebp+var_40] ; jumptable 00002B2C cases 1,2,7
		mov	ecx, [ebp+var_A8]
		mov	edx, [ecx+eax*8]
		mov	dword ptr [ebp+var_1C],	edx
		mov	eax, [ecx+eax*8+4]
		mov	dword ptr [ebp+var_1C+4], eax
		jmp	short loc_2B90
; ---------------------------------------------------------------------------

$LN18_1:				; CODE XREF: _u_printf_parse_56+BCCj
					; DATA XREF: .text:$LN109o
		mov	eax, [ebp+var_40] ; jumptable 00002B2C case 5
		mov	ecx, [ebp+var_A8]
		fld	dword ptr [ecx+eax*8]
		fstp	dword ptr [ebp+var_1C]
		jmp	short loc_2B90
; ---------------------------------------------------------------------------

$LN17_4:				; CODE XREF: _u_printf_parse_56+BCCj
					; DATA XREF: .text:$LN109o
		mov	eax, [ebp+var_40] ; jumptable 00002B2C case 6
		mov	ecx, [ebp+var_A8]
		fld	qword ptr [ecx+eax*8]
		fstp	[ebp+var_1C]
		jmp	short loc_2B90
; ---------------------------------------------------------------------------

loc_2B89:				; CODE XREF: _u_printf_parse_56+BC4j
		mov	dword ptr [ebp+var_1C],	0 ; jumptable 00002B2C default case

loc_2B90:				; CODE XREF: _u_printf_parse_56+BEDj
					; _u_printf_parse_56+C05j ...
		jmp	loc_2C52
; ---------------------------------------------------------------------------

loc_2B95:				; CODE XREF: _u_printf_parse_56+B96j
		mov	eax, [ebp+var_28]
		mov	[ebp+var_17C], eax
		mov	ecx, [ebp+var_17C]
		sub	ecx, 2
		mov	[ebp+var_17C], ecx
		cmp	[ebp+var_17C], 8 ; switch 9 cases
		ja	loc_2C4B	; jumptable 00002BC0 default case
		mov	edx, [ebp+var_17C]
		jmp	ds:$LN110[edx*4] ; switch jump
; ---------------------------------------------------------------------------

$LN12_8:				; CODE XREF: _u_printf_parse_56+C60j
					; DATA XREF: .text:$LN110o
		mov	eax, [ebp+Dst]	; jumptable 00002BC0 case 0
		mov	ecx, [ebp+arg_14]
		mov	edx, [ecx]
		mov	[eax+4], edx

$LN11_6:				; CODE XREF: _u_printf_parse_56+C60j
					; DATA XREF: .text:$LN110o
		mov	eax, [ebp+arg_18] ; jumptable 00002BC0 cases 3,4,8
		add	eax, 4
		mov	[ebp+arg_18], eax
		mov	ecx, [ebp+arg_18]
		mov	edx, [ecx-4]
		mov	dword ptr [ebp+var_1C],	edx
		jmp	short loc_2C52
; ---------------------------------------------------------------------------

$LN10_3:				; CODE XREF: _u_printf_parse_56+C60j
					; DATA XREF: .text:$LN110o
		mov	eax, [ebp+Dst]	; jumptable 00002BC0 cases 1,2,7
		movsx	ecx, byte ptr [eax+16h]
		test	ecx, ecx
		jz	short loc_2C0B
		mov	eax, [ebp+arg_18]
		add	eax, 8
		mov	[ebp+arg_18], eax
		mov	ecx, [ebp+arg_18]
		mov	edx, [ecx-8]
		mov	dword ptr [ebp+var_1C],	edx
		mov	eax, [ecx-4]
		mov	dword ptr [ebp+var_1C+4], eax
		jmp	short loc_2C21
; ---------------------------------------------------------------------------

loc_2C0B:				; CODE XREF: _u_printf_parse_56+C8Fj
		mov	eax, [ebp+arg_18]
		add	eax, 4
		mov	[ebp+arg_18], eax
		mov	ecx, [ebp+arg_18]
		mov	eax, [ecx-4]
		cdq
		mov	dword ptr [ebp+var_1C],	eax
		mov	dword ptr [ebp+var_1C+4], edx

loc_2C21:				; CODE XREF: _u_printf_parse_56+CA9j
		jmp	short loc_2C52
; ---------------------------------------------------------------------------

$LN7_1:					; CODE XREF: _u_printf_parse_56+C60j
					; DATA XREF: .text:$LN110o
		mov	eax, [ebp+arg_18] ; jumptable 00002BC0 case 5
		add	eax, 8
		mov	[ebp+arg_18], eax
		mov	ecx, [ebp+arg_18]
		fld	qword ptr [ecx-8]
		fstp	dword ptr [ebp+var_1C]
		jmp	short loc_2C52
; ---------------------------------------------------------------------------

$LN6_1:					; CODE XREF: _u_printf_parse_56+C60j
					; DATA XREF: .text:$LN110o
		mov	eax, [ebp+arg_18] ; jumptable 00002BC0 case 6
		add	eax, 8
		mov	[ebp+arg_18], eax
		mov	ecx, [ebp+arg_18]
		fld	qword ptr [ecx-8]
		fstp	[ebp+var_1C]
		jmp	short loc_2C52
; ---------------------------------------------------------------------------

loc_2C4B:				; CODE XREF: _u_printf_parse_56+C54j
		mov	dword ptr [ebp+var_1C],	0 ; jumptable 00002BC0 default case

loc_2C52:				; CODE XREF: _u_printf_parse_56:loc_2B90j
					; _u_printf_parse_56+C84j ...
		movzx	eax, [ebp+var_C]
		mov	ecx, dword_1C[eax*8]
		mov	[ebp+var_34], ecx
		cmp	[ebp+var_34], 0
		jz	short loc_2C95
		mov	esi, esp
		lea	eax, [ebp+var_1C]
		push	eax
		mov	ecx, [ebp+Dst]
		push	ecx
		mov	edx, [ebp+arg_10]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	[ebp+var_34]
		add	esp, 14h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+arg_14]
		add	eax, [edx]
		mov	ecx, [ebp+arg_14]
		mov	[ecx], eax
		jmp	short loc_2CC6
; ---------------------------------------------------------------------------

loc_2C95:				; CODE XREF: _u_printf_parse_56+D04j
		mov	eax, [ebp+var_78]
		sub	eax, [ebp+var_90]
		sar	eax, 1
		mov	esi, esp
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		call	ecx
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+arg_14]
		add	eax, [edx]
		mov	ecx, [ebp+arg_14]
		mov	[ecx], eax

loc_2CC6:				; CODE XREF: _u_printf_parse_56+D33j
		jmp	short loc_2CF9
; ---------------------------------------------------------------------------

loc_2CC8:				; CODE XREF: _u_printf_parse_56+B7Ej
		mov	eax, [ebp+var_78]
		sub	eax, [ebp+var_90]
		sar	eax, 1
		mov	esi, esp
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		call	ecx
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+arg_14]
		add	eax, [edx]
		mov	ecx, [ebp+arg_14]
		mov	[ecx], eax

loc_2CF9:				; CODE XREF: _u_printf_parse_56:loc_2CC6j
		jmp	loc_1FF1
; ---------------------------------------------------------------------------

loc_2CFE:				; CODE XREF: _u_printf_parse_56+9Ej
					; _u_printf_parse_56+116j
		cmp	[ebp+var_A8], 0
		jz	short loc_2D16
		mov	eax, [ebp+var_A8]
		push	eax
		call	_uprv_free_56
		add	esp, 4

loc_2D16:				; CODE XREF: _u_printf_parse_56+DA5j
		mov	eax, [ebp+var_78]
		sub	eax, [ebp+arg_4]
		sar	eax, 1

loc_2D1E:				; CODE XREF: _u_printf_parse_56+8Cj
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN107
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 180h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_printf_parse_56 endp

; ---------------------------------------------------------------------------
		align 10h
$LN107		dd 3			; DATA XREF: _u_printf_parse_56+DC2o
		dd offset $LN106
$LN106		dd 0FFFFFFE4h, 8	; DATA XREF: .text:00002D54o
		dd offset $LN103	; "args"
		dd 0FFFFFFA0h, 24h
		dd offset $LN104	; "spec"
		dd 0FFFFFF4Ch, 4
		dd offset $LN105	; "status"
$LN105		db 'status',0           ; DATA XREF: .text:00002D78o
$LN104		db 'spec',0             ; DATA XREF: .text:00002D6Co
$LN103		db 'args',0             ; DATA XREF: .text:00002D60o
		align 10h
$LN108		dd offset $LN73		; DATA XREF: _u_printf_parse_56+3B5r
		dd offset $LN72		; jump table for switch	statement
		dd offset $LN70
		dd offset $LN74
		dd offset $LN75
		dd offset $LN71
		dd offset $LN76
$LN102		db	0,     6,     6,     1 ; DATA XREF: _u_printf_parse_56+3AEr
		db	6,     6,     6,     6 ; indirect table	for switch statement
		db	2,     6,     6,     3
		db	6,     4,     6,     6
		db	5
		align 10h
$LN109		dd offset $LN21_0	; DATA XREF: _u_printf_parse_56+BCCr
		dd offset $LN19_0	; jump table for switch	statement
		dd offset $LN19_0
		dd offset $LN20_0
		dd offset $LN20_0
		dd offset $LN18_1
		dd offset $LN17_4
		dd offset $LN19_0
		dd offset $LN20_0
$LN110		dd offset $LN12_8	; DATA XREF: _u_printf_parse_56+C60r
		dd offset $LN10_3	; jump table for switch	statement
		dd offset $LN10_3
		dd offset $LN11_6
		dd offset $LN11_6
		dd offset $LN7_1
		dd offset $LN6_1
		dd offset $LN10_3
		dd offset $LN11_6
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2E08h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_parseArguments	proc near		; CODE XREF: _u_printf_parse_56+72p

var_124		= dword	ptr -124h
var_5C		= dword	ptr -5Ch
var_50		= word ptr -50h
var_44		= word ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 124h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_124]
		mov	ecx, 49h ; 'I'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	[ebp+var_14], 0
		mov	[ebp+var_20], 0
		mov	[ebp+var_2C], 0
		mov	[ebp+var_38], 0
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_5C], eax

loc_2E4F:				; CODE XREF: _parseArguments+65j
					; _parseArguments:loc_303Ej
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 25h ; '%'
		jz	short loc_2E6F
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		test	ecx, ecx
		jz	short loc_2E6F
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		jmp	short loc_2E4F
; ---------------------------------------------------------------------------

loc_2E6F:				; CODE XREF: _parseArguments+50j
					; _parseArguments+5Aj
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		test	ecx, ecx
		jnz	short loc_2E7E
		jmp	loc_3043
; ---------------------------------------------------------------------------

loc_2E7E:				; CODE XREF: _parseArguments+6Fj
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_2EF9
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_2EF9
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_2EF9
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_2EF9
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_2EF9
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_2EF9
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_2EF9
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_2EF9
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_2EF9
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	loc_3029

loc_2EF9:				; CODE XREF: _parseArguments+88j
					; _parseArguments+93j ...
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_2F6B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_2F6B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_2F6B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_2F6B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_2F6B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_2F6B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_2F6B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_2F6B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_2F6B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	loc_3015

loc_2F6B:				; CODE XREF: _parseArguments+FAj
					; _parseArguments+105j	...
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		sub	ecx, 30h ; '0'
		mov	[ebp+var_38], ecx
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx

loc_2F80:				; CODE XREF: _parseArguments+208j
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_2FEE
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_2FEE
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_2FEE
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_2FEE
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_2FEE
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_2FEE
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_2FEE
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_2FEE
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_2FEE
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	short loc_3015

loc_2FEE:				; CODE XREF: _parseArguments+181j
					; _parseArguments+18Cj	...
		mov	eax, [ebp+var_38]
		imul	eax, 0Ah
		mov	[ebp+var_38], eax
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		mov	edx, [ebp+var_38]
		lea	eax, [edx+ecx-30h]
		mov	[ebp+var_38], eax
		mov	ecx, [ebp+arg_0]
		add	ecx, 2
		mov	[ebp+arg_0], ecx
		jmp	loc_2F80
; ---------------------------------------------------------------------------

loc_3015:				; CODE XREF: _parseArguments+15Dj
					; _parseArguments+1E4j
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 24h ; '$'
		jz	short loc_3027
		xor	eax, eax
		jmp	loc_3507
; ---------------------------------------------------------------------------

loc_3027:				; CODE XREF: _parseArguments+216j
		jmp	short loc_3030
; ---------------------------------------------------------------------------

loc_3029:				; CODE XREF: _parseArguments+EBj
		xor	eax, eax
		jmp	loc_3507
; ---------------------------------------------------------------------------

loc_3030:				; CODE XREF: _parseArguments:loc_3027j
		mov	eax, [ebp+var_38]
		cmp	eax, [ebp+var_2C]
		jle	short loc_303E
		mov	eax, [ebp+var_38]
		mov	[ebp+var_2C], eax

loc_303E:				; CODE XREF: _parseArguments+22Ej
		jmp	loc_2E4F
; ---------------------------------------------------------------------------

loc_3043:				; CODE XREF: _parseArguments+71j
		mov	eax, [ebp+var_2C]
		shl	eax, 2
		push	eax
		call	_uprv_malloc_56
		add	esp, 4
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_2C]
		push	eax
		call	_uprv_malloc_56
		add	esp, 4
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_2C]
		shl	eax, 3
		push	eax
		call	_uprv_malloc_56
		add	esp, 4
		mov	[ebp+var_8], eax
		cmp	[ebp+var_14], 0
		jz	short loc_3088
		cmp	[ebp+var_20], 0
		jz	short loc_3088
		cmp	[ebp+var_8], 0
		jnz	short loc_30CE

loc_3088:				; CODE XREF: _parseArguments+272j
					; _parseArguments+278j
		cmp	[ebp+var_14], 0
		jz	short loc_309A
		mov	eax, [ebp+var_14]
		push	eax
		call	_uprv_free_56
		add	esp, 4

loc_309A:				; CODE XREF: _parseArguments+284j
		cmp	[ebp+var_20], 0
		jz	short loc_30AC
		mov	eax, [ebp+var_20]
		push	eax
		call	_uprv_free_56
		add	esp, 4

loc_30AC:				; CODE XREF: _parseArguments+296j
		cmp	[ebp+var_8], 0
		jz	short loc_30BE
		mov	eax, [ebp+var_8]
		push	eax
		call	_uprv_free_56
		add	esp, 4

loc_30BE:				; CODE XREF: _parseArguments+2A8j
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 7
		xor	eax, eax
		jmp	loc_3507
; ---------------------------------------------------------------------------

loc_30CE:				; CODE XREF: _parseArguments+27Ej
		mov	eax, [ebp+var_5C]
		mov	[ebp+arg_0], eax

loc_30D4:				; CODE XREF: _parseArguments+2EAj
					; _parseArguments:loc_33E1j
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 25h ; '%'
		jz	short loc_30F4
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		test	ecx, ecx
		jz	short loc_30F4
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		jmp	short loc_30D4
; ---------------------------------------------------------------------------

loc_30F4:				; CODE XREF: _parseArguments+2D5j
					; _parseArguments+2DFj
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		test	ecx, ecx
		jnz	short loc_3103
		jmp	loc_33E6
; ---------------------------------------------------------------------------

loc_3103:				; CODE XREF: _parseArguments+2F4j
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_317E
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_317E
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_317E
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_317E
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_317E
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_317E
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_317E
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_317E
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_317E
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	loc_3228

loc_317E:				; CODE XREF: _parseArguments+30Dj
					; _parseArguments+318j	...
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		sub	ecx, 30h ; '0'
		mov	[ebp+var_38], ecx
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx

loc_3193:				; CODE XREF: _parseArguments+41Bj
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_3201
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_3201
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_3201
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_3201
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_3201
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_3201
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_3201
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_3201
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_3201
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	short loc_3228

loc_3201:				; CODE XREF: _parseArguments+394j
					; _parseArguments+39Fj	...
		mov	eax, [ebp+var_38]
		imul	eax, 0Ah
		mov	[ebp+var_38], eax
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		mov	edx, [ebp+var_38]
		lea	eax, [edx+ecx-30h]
		mov	[ebp+var_38], eax
		mov	ecx, [ebp+arg_0]
		add	ecx, 2
		mov	[ebp+arg_0], ecx
		jmp	loc_3193
; ---------------------------------------------------------------------------

loc_3228:				; CODE XREF: _parseArguments+370j
					; _parseArguments+3F7j
		mov	eax, [ebp+var_38]
		sub	eax, 1
		mov	[ebp+var_38], eax

loc_3231:				; CODE XREF: _parseArguments+593j
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 68h ; 'h'
		jz	loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 6Ch ; 'l'
		jz	loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 4Ch ; 'L'
		jz	loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 2Dh ; '-'
		jz	loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 2Bh ; '+'
		jz	loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 20h ; ' '
		jz	loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 23h ; '#'
		jz	loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 28h ; '('
		jz	loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jz	short loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 2Ah ; '*'
		jz	short loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 2Eh ; '.'
		jz	short loc_334B
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 24h ; '$'
		jnz	short loc_33A0

loc_334B:				; CODE XREF: _parseArguments+432j
					; _parseArguments+441j	...
		mov	eax, [ebp+var_20]
		add	eax, [ebp+var_38]
		mov	byte ptr [eax],	0
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 68h ; 'h'
		jz	short loc_3375
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 6Ch ; 'l'
		jz	short loc_3375
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 4Ch ; 'L'
		jnz	short loc_3392

loc_3375:				; CODE XREF: _parseArguments+555j
					; _parseArguments+560j
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 6Ch ; 'l'
		jnz	short loc_3392
		mov	eax, [ebp+var_20]
		add	eax, [ebp+var_38]
		mov	byte ptr [eax],	1

loc_3392:				; CODE XREF: _parseArguments+56Bj
					; _parseArguments+57Fj
		mov	eax, [ebp+arg_0]
		add	eax, 2
		mov	[ebp+arg_0], eax
		jmp	loc_3231
; ---------------------------------------------------------------------------

loc_33A0:				; CODE XREF: _parseArguments+541j
		mov	eax, [ebp+arg_0]
		mov	cx, [eax]
		mov	[ebp+var_44], cx
		movzx	eax, [ebp+var_44]
		sub	eax, 20h ; ' '
		mov	[ebp+var_50], ax
		movzx	eax, [ebp+var_50]
		cmp	eax, 6Ch ; 'l'
		jge	short loc_33D4
		movzx	eax, [ebp+var_50]
		mov	ecx, [ebp+var_38]
		mov	edx, [ebp+var_14]
		mov	eax, _g_u_printf_infos[eax*8]
		mov	[edx+ecx*4], eax
		jmp	short loc_33E1
; ---------------------------------------------------------------------------

loc_33D4:				; CODE XREF: _parseArguments+5B4j
		mov	eax, [ebp+var_38]
		mov	ecx, [ebp+var_14]
		mov	dword ptr [ecx+eax*4], 0

loc_33E1:				; CODE XREF: _parseArguments+5CAj
		jmp	loc_30D4
; ---------------------------------------------------------------------------

loc_33E6:				; CODE XREF: _parseArguments+2F6j
		mov	[ebp+var_38], 0
		jmp	short loc_33F8
; ---------------------------------------------------------------------------

loc_33EF:				; CODE XREF: _parseArguments:loc_34E7j
		mov	eax, [ebp+var_38]
		add	eax, 1
		mov	[ebp+var_38], eax

loc_33F8:				; CODE XREF: _parseArguments+5E5j
		mov	eax, [ebp+var_38]
		cmp	eax, [ebp+var_2C]
		jge	loc_34EC
		mov	eax, [ebp+var_38]
		mov	ecx, [ebp+var_14]
		mov	edx, [ecx+eax*4]
		mov	[ebp+var_124], edx
		mov	eax, [ebp+var_124]
		sub	eax, 3
		mov	[ebp+var_124], eax
		cmp	[ebp+var_124], 7 ; switch 8 cases
		ja	loc_34DA	; jumptable 00003435 default case
		mov	ecx, [ebp+var_124]
		jmp	ds:$LN53[ecx*4]	; switch jump
; ---------------------------------------------------------------------------

$LN7_2:					; CODE XREF: _parseArguments+62Dj
					; DATA XREF: .text:$LN53o
		mov	eax, [ebp+arg_4] ; jumptable 00003435 cases 2,3,7
		add	eax, 4
		mov	[ebp+arg_4], eax
		mov	ecx, [ebp+var_38]
		mov	edx, [ebp+var_8]
		mov	eax, [ebp+arg_4]
		mov	eax, [eax-4]
		mov	[edx+ecx*8], eax
		jmp	loc_34E7
; ---------------------------------------------------------------------------

$LN6_2:					; CODE XREF: _parseArguments+62Dj
					; DATA XREF: .text:$LN53o
		mov	eax, [ebp+var_20] ; jumptable 00003435 cases 0,1,6
		add	eax, [ebp+var_38]
		movsx	ecx, byte ptr [eax]
		test	ecx, ecx
		jz	short loc_3487
		mov	eax, [ebp+arg_4]
		add	eax, 8
		mov	[ebp+arg_4], eax
		mov	ecx, [ebp+var_38]
		mov	edx, [ebp+var_8]
		mov	eax, [ebp+arg_4]
		mov	esi, [eax-8]
		mov	[edx+ecx*8], esi
		mov	eax, [eax-4]
		mov	[edx+ecx*8+4], eax
		jmp	short loc_34A4
; ---------------------------------------------------------------------------

loc_3487:				; CODE XREF: _parseArguments+65Cj
		mov	eax, [ebp+arg_4]
		add	eax, 4
		mov	[ebp+arg_4], eax
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx-4]
		cdq
		mov	ecx, [ebp+var_38]
		mov	esi, [ebp+var_8]
		mov	[esi+ecx*8], eax
		mov	[esi+ecx*8+4], edx

loc_34A4:				; CODE XREF: _parseArguments+67Dj
		jmp	short loc_34E7
; ---------------------------------------------------------------------------

$LN3_1:					; CODE XREF: _parseArguments+62Dj
					; DATA XREF: .text:$LN53o
		mov	eax, [ebp+arg_4] ; jumptable 00003435 case 4
		add	eax, 8
		mov	[ebp+arg_4], eax
		mov	ecx, [ebp+arg_4]
		fld	qword ptr [ecx-8]
		mov	edx, [ebp+var_38]
		mov	eax, [ebp+var_8]
		fstp	dword ptr [eax+edx*8]
		jmp	short loc_34E7
; ---------------------------------------------------------------------------

$LN2:					; CODE XREF: _parseArguments+62Dj
					; DATA XREF: .text:$LN53o
		mov	eax, [ebp+arg_4] ; jumptable 00003435 case 5
		add	eax, 8
		mov	[ebp+arg_4], eax
		mov	ecx, [ebp+arg_4]
		fld	qword ptr [ecx-8]
		mov	edx, [ebp+var_38]
		mov	eax, [ebp+var_8]
		fstp	qword ptr [eax+edx*8]
		jmp	short loc_34E7
; ---------------------------------------------------------------------------

loc_34DA:				; CODE XREF: _parseArguments+621j
		mov	eax, [ebp+var_38] ; jumptable 00003435 default case
		mov	ecx, [ebp+var_8]
		mov	dword ptr [ecx+eax*8], 0

loc_34E7:				; CODE XREF: _parseArguments+64Cj
					; _parseArguments:loc_34A4j ...
		jmp	loc_33EF
; ---------------------------------------------------------------------------

loc_34EC:				; CODE XREF: _parseArguments+5F6j
		mov	eax, [ebp+var_14]
		push	eax
		call	_uprv_free_56
		add	esp, 4
		mov	eax, [ebp+var_20]
		push	eax
		call	_uprv_free_56
		add	esp, 4
		mov	eax, [ebp+var_8]

loc_3507:				; CODE XREF: _parseArguments+21Aj
					; _parseArguments+223j	...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 124h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_parseArguments	endp

; ---------------------------------------------------------------------------
		align 4
$LN53		dd offset $LN6_2	; DATA XREF: _parseArguments+62Dr
		dd offset $LN6_2	; jump table for switch	statement
		dd offset $LN7_2
		dd offset $LN7_2
		dd offset $LN3_1
		dd offset $LN2
		dd offset $LN6_2
		dd offset $LN7_2
_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_CheckEsp:near ; CODE XREF: _u_printf_simple_percent_handler+37p
					; _u_printf_simple_percent_handler+47p	...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn _uprv_free_56:near ; CODE	XREF: _u_printf_string_handler+151p
					; _u_printf_parse_56+DAEp ...
		extrn _u_strlen_56:near	; CODE XREF: _u_printf_string_handler+DEp
					; _u_printf_char_handler+57p ...
		extrn _ufmt_defaultCPToUnicode_56:near
					; CODE XREF: _u_printf_string_handler+92p
					; _u_printf_string_handler+C6p	...
		extrn _uprv_malloc_56:near ; CODE XREF:	_u_printf_string_handler+7Bp
					; _parseArguments+242p	...
; size_t __cdecl strlen(const char *Str)
		extrn _strlen:near	; CODE XREF: _u_printf_string_handler+47p
		extrn ___security_cookie:near ;	DATA XREF: _u_printf_string_handler+1Er
					; _u_printf_char_handler+1Er ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _u_printf_string_handler+178p
					; _u_printf_char_handler+A5p ...
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _u_printf_string_handler+169p
					; _u_printf_char_handler+96p ...
		extrn _unum_formatDouble_56:near ; CODE	XREF: _u_printf_double_handler+134p
					; _u_printf_scientific_handler+22Bp ...
		extrn _unum_setAttribute_56:near ; CODE	XREF: _u_printf_double_handler+ABp
					; _u_printf_double_handler+C8p	...
		extrn _unum_getAttribute_56:near ; CODE	XREF: _u_printf_double_handler+75p
					; _u_printf_double_handler+89p	...
		extrn _u_locbund_getNumberFormat_56:near
					; CODE XREF: _u_printf_double_handler+57p
					; _u_printf_integer_handler+94p ...
		extrn __fltused:near
		extrn __chkstk:near	; CODE XREF: _u_printf_double_handler+8p
					; _u_printf_integer_handler+8p	...
		extrn _unum_getSymbol_56:near ;	CODE XREF: _u_printf_set_sign+8Ap
					; _u_printf_scientific_handler+85p
		extrn _unum_setTextAttribute_56:near ; CODE XREF: _u_printf_set_sign+70p
					; _u_printf_set_sign+A7p ...
		extrn _unum_getTextAttribute_56:near ; CODE XREF: _u_printf_set_sign+47p
		extrn _unum_formatInt64_56:near	; CODE XREF: _u_printf_integer_handler+12Dp
					; _u_printf_uinteger_handler+F4p
; void *__cdecl	_memmove(void *Dst, const void *Src, size_t Size)
		extrn __imp__memmove:near ; CODE XREF: _u_printf_hex_handler+117p
					; _u_printf_octal_handler+10Cp
					; DATA XREF: ...
		extrn _ufmt_64tou_56:near ; CODE XREF: _u_printf_hex_handler+D7p
					; _u_printf_octal_handler+C8p
		extrn _ufmt_ptou_56:near ; CODE	XREF: _u_printf_pointer_handler+48p
		extrn _unum_setSymbol_56:near ;	CODE XREF: _u_printf_scientific_handler+120p
		extrn _u_strToUpper_56:near ; CODE XREF: _u_printf_scientific_handler+F7p
		extrn _u_strToLower_56:near ; CODE XREF: _u_printf_scientific_handler+C3p
		extrn _uprv_pow10_56:near ; CODE XREF: _u_printf_scidbl_handler+C9p
		extrn _uprv_trunc_56:near ; CODE XREF: _u_printf_scidbl_handler+51p
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: _u_printf_scidbl_handler+3Ap
		extrn _ufmt_digitvalue_56:near ; CODE XREF: _u_printf_parse_56+429p
					; _u_printf_parse_56+456p ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: _u_printf_parse_56+138p


		end
