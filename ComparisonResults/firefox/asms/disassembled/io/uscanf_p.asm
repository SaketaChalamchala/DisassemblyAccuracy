;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	86ACBD55EB332ABEB610BE95E31CDC34
; Input	CRC32 :	706731F5

; File Name   :	D:\compspace\objfiles\firefox\io\uscanf_p.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
_g_u_scanf_infos dd 0			; DATA XREF: _u_scanf_parse_56+D1r
dword_4		dd 0			; DATA XREF: _u_scanf_parse_56+157r
		dd 8 dup(0)
		dd 1
		dd offset _u_scanf_simple_percent_handler
		dd 3Ah dup(0)
		dd 9
		dd offset _u_scanf_uchar_handler
		dd 2 dup(0)
		dd 8
		dd offset _u_scanf_scientific_handler
		dd 2 dup(0)
		dd 8
		dd offset _u_scanf_scidbl_handler
		align 80h
		dd 8
		dd offset _u_scanf_percent_handler
		dd 4 dup(0)
		dd 0Ah
		dd offset _u_scanf_ustring_handler
		dd 4 dup(0)
		dd 8
		dd offset _u_scanf_spellout_handler
		align 10h
		dd 3
		dd offset _u_scanf_hex_handler
		dd 4 dup(0)
		dd 5
		dd offset _u_scanf_scanset_handler
		dd 0Eh dup(0)
		dd 5
		dd offset _u_scanf_char_handler
		dd 3
		dd offset _u_scanf_integer_handler
		dd 8
		dd offset _u_scanf_scientific_handler
		dd 8
		dd offset _u_scanf_double_handler
		dd 8
		dd offset _u_scanf_scidbl_handler
		dd 2 dup(0)
		dd 3
		dd offset _u_scanf_integer_handler
		dd 8 dup(0)
		dd 2
		dd offset _u_scanf_count_handler
		dd 3
		dd offset _u_scanf_octal_handler
		dd 6
		dd offset _u_scanf_pointer_handler
		dd 4 dup(0)
		dd 5
		dd offset _u_scanf_string_handler
		dd 2 dup(0)
		dd 3
		dd offset _u_scanf_uinteger_handler
		align 20h
		dd 3
		dd offset _u_scanf_hex_handler
		dd 26h dup(0)
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 360h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_scanf_simple_percent_handler	proc near ; DATA XREF: .rdata:0000002Co

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+arg_0]
		push	eax
		call	_u_fgetc_56
		add	esp, 4
		movzx	ecx, ax
		cmp	ecx, 25h ; '%'
		jz	short loc_3A4
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0FFFFFFFFh

loc_3A4:				; CODE XREF: _u_scanf_simple_percent_handler+39j
		mov	eax, 1
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_simple_percent_handler	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 3C0h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 3C4h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3C8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_scanf_count_handler proc near	; DATA XREF: .rdata:00000274o

var_C0		= byte ptr -0C0h
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		test	ecx, ecx
		jnz	short loc_43A
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+0Ah]
		test	ecx, ecx
		jz	short loc_411
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		and	ecx, 0FFFFh
		mov	edx, [ebp+arg_8]
		mov	eax, [edx]
		mov	[eax], cx
		jmp	short loc_43A
; ---------------------------------------------------------------------------

loc_411:				; CODE XREF: _u_scanf_count_handler+32j
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+0Ch]
		test	ecx, ecx
		jz	short loc_42E
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		cdq
		mov	[ecx], eax
		mov	[ecx+4], edx
		jmp	short loc_43A
; ---------------------------------------------------------------------------

loc_42E:				; CODE XREF: _u_scanf_count_handler+52j
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		mov	[ecx], eax

loc_43A:				; CODE XREF: _u_scanf_count_handler+27j
					; _u_scanf_count_handler+47j ...
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_count_handler endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 44Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_scanf_double_handler	proc near	; DATA XREF: .rdata:00000234o

var_110		= dword	ptr -110h
var_48		= dword	ptr -48h
var_3C		= dword	ptr -3Ch
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_18		= qword	ptr -18h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 110h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_110]
		mov	ecx, 44h ; 'D'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_30], 0
		mov	[ebp+var_48], 0
		mov	eax, [ebp+arg_4]
		movzx	ecx, word ptr [eax+6]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_scanf_skip_leading_ws
		add	esp, 8
		mov	[ebp+var_3C], eax
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ufile_fill_uchar_buffer_56
		add	esp, 4
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+10h]
		sub	edx, [ecx+0Ch]
		sar	edx, 1
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_4DD
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		cmp	ecx, [eax]
		jge	short loc_4C9
		mov	edx, [ebp+var_8]
		mov	[ebp+var_110], edx
		jmp	short loc_4D4
; ---------------------------------------------------------------------------

loc_4C9:				; CODE XREF: _u_scanf_double_handler+70j
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		mov	[ebp+var_110], ecx

loc_4D4:				; CODE XREF: _u_scanf_double_handler+7Bj
		mov	edx, [ebp+var_110]
		mov	[ebp+var_8], edx

loc_4DD:				; CODE XREF: _u_scanf_double_handler+66j
		push	1
		mov	eax, [ebp+arg_0]
		add	eax, 18h
		push	eax
		call	_u_locbund_getNumberFormat_56
		add	esp, 8
		mov	[ebp+var_24], eax
		cmp	[ebp+var_24], 0
		jnz	short loc_4FE
		xor	eax, eax
		jmp	loc_5B4
; ---------------------------------------------------------------------------

loc_4FE:				; CODE XREF: _u_scanf_double_handler+A9j
		lea	eax, [ebp+var_48]
		push	eax
		mov	ecx, [ebp+var_24]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_scanf_skip_leading_positive_sign
		add	esp, 0Ch
		add	eax, [ebp+var_3C]
		mov	[ebp+var_3C], eax
		lea	eax, [ebp+var_48]
		push	eax
		lea	ecx, [ebp+var_30]
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		push	ecx
		mov	edx, [ebp+var_24]
		push	edx
		call	_unum_parseDouble_56
		add	esp, 14h
		fstp	[ebp+var_18]
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		test	ecx, ecx
		jnz	short loc_589
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+0Bh]
		test	ecx, ecx
		jz	short loc_55C
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		fld	[ebp+var_18]
		fstp	qword ptr [ecx]
		jmp	short loc_589
; ---------------------------------------------------------------------------

loc_55C:				; CODE XREF: _u_scanf_double_handler+102j
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+9]
		test	ecx, ecx
		jz	short loc_573
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		fld	[ebp+var_18]
		fstp	qword ptr [ecx]
		jmp	short loc_589
; ---------------------------------------------------------------------------

loc_573:				; CODE XREF: _u_scanf_double_handler+119j
		fld	[ebp+var_18]
		fstp	[ebp+var_110]
		fld	[ebp+var_110]
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		fstp	dword ptr [ecx]

loc_589:				; CODE XREF: _u_scanf_double_handler+F7j
					; _u_scanf_double_handler+10Ej	...
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	edx, [ebp+var_30]
		lea	eax, [ecx+edx*2]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+0Ch], eax
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		neg	ecx
		sbb	ecx, ecx
		add	ecx, 1
		mov	edx, [ebp+arg_14]
		mov	[edx], ecx
		mov	eax, [ebp+var_30]
		add	eax, [ebp+var_3C]

loc_5B4:				; CODE XREF: _u_scanf_double_handler+ADj
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN15
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 110h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_double_handler	endp

; ---------------------------------------------------------------------------
		align 4
$LN15		dd 2			; DATA XREF: _u_scanf_double_handler+16Co
		dd offset $LN14
$LN14		dd 0FFFFFFD0h, 4	; DATA XREF: .text:000005E0o
		dd offset $LN12		; "parsePos"
		dd 0FFFFFFB8h, 4
		dd offset $LN13		; "status"
$LN13		db 'status',0           ; DATA XREF: .text:000005F8o
$LN12		db 'parsePos',0         ; DATA XREF: .text:000005ECo
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 60Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_scanf_skip_leading_ws proc near	; CODE XREF: _u_scanf_double_handler+38p
					; _u_scanf_scientific_handler+42p ...

var_E4		= byte ptr -0E4h
var_1D		= byte ptr -1Dh
var_14		= dword	ptr -14h
var_8		= word ptr -8
arg_0		= dword	ptr  8
arg_4		= word ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_14], 0

loc_631:				; CODE XREF: _u_scanf_skip_leading_ws+69j
		lea	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ufile_getch_56
		add	esp, 8
		mov	[ebp+var_1D], al
		movsx	edx, [ebp+var_1D]
		test	edx, edx
		jz	short loc_677
		movzx	eax, [ebp+var_8]
		movzx	ecx, [ebp+arg_4]
		cmp	eax, ecx
		jz	short loc_66C
		movzx	eax, [ebp+var_8]
		push	eax
		call	_u_isWhitespace_56
		add	esp, 4
		movsx	ecx, al
		test	ecx, ecx
		jz	short loc_677

loc_66C:				; CODE XREF: _u_scanf_skip_leading_ws+4Aj
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		jmp	short loc_631
; ---------------------------------------------------------------------------

loc_677:				; CODE XREF: _u_scanf_skip_leading_ws+3Ej
					; _u_scanf_skip_leading_ws+5Ej
		movsx	eax, [ebp+var_1D]
		test	eax, eax
		jz	short loc_690
		mov	eax, [ebp+arg_0]
		push	eax
		movzx	ecx, [ebp+var_8]
		push	ecx
		call	_u_fungetc_56
		add	esp, 8

loc_690:				; CODE XREF: _u_scanf_skip_leading_ws+71j
		mov	eax, [ebp+var_14]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN9
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_skip_leading_ws endp

; ---------------------------------------------------------------------------
$LN9		dd 1			; DATA XREF: _u_scanf_skip_leading_ws+8Bo
		dd offset $LN8
$LN8		dd 0FFFFFFF8h, 2	; DATA XREF: .text:000006BCo
		dd offset $LN7
$LN7		db 63h,	0		; DATA XREF: .text:000006C8o
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 6D0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_scanf_skip_leading_positive_sign proc near ;	CODE XREF: _u_scanf_double_handler+BEp
					; _u_scanf_scientific_handler+15Cp ...

var_118		= byte ptr -118h
var_54		= dword	ptr -54h
var_48		= dword	ptr -48h
var_3C		= word ptr -3Ch
var_21		= byte ptr -21h
var_18		= dword	ptr -18h
var_C		= word ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 118h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_118]
		mov	ecx, 46h ; 'F'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	[ebp+var_18], 0
		mov	[ebp+var_54], 0
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0
		jg	short loc_786
		lea	eax, [ebp+var_54]
		push	eax
		push	8
		lea	ecx, [ebp+var_3C]
		push	ecx
		push	7
		mov	edx, [ebp+arg_4]
		push	edx
		call	_unum_getSymbol_56
		add	esp, 14h
		mov	[ebp+var_48], eax
		cmp	[ebp+var_54], 0
		jg	short loc_786

loc_72F:				; CODE XREF: _u_scanf_skip_leading_positive_sign+9Bj
		lea	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ufile_getch_56
		add	esp, 8
		mov	[ebp+var_21], al
		movsx	edx, [ebp+var_21]
		test	edx, edx
		jz	short loc_76D
		mov	eax, [ebp+var_18]
		cmp	eax, [ebp+var_48]
		jge	short loc_76D
		movzx	eax, [ebp+var_C]
		mov	ecx, [ebp+var_18]
		movzx	edx, [ebp+ecx*2+var_3C]
		cmp	eax, edx
		jnz	short loc_76D
		mov	eax, [ebp+var_18]
		add	eax, 1
		mov	[ebp+var_18], eax
		jmp	short loc_72F
; ---------------------------------------------------------------------------

loc_76D:				; CODE XREF: _u_scanf_skip_leading_positive_sign+78j
					; _u_scanf_skip_leading_positive_sign+80j ...
		movsx	eax, [ebp+var_21]
		test	eax, eax
		jz	short loc_786
		mov	eax, [ebp+arg_0]
		push	eax
		movzx	ecx, [ebp+var_C]
		push	ecx
		call	_u_fungetc_56
		add	esp, 8

loc_786:				; CODE XREF: _u_scanf_skip_leading_positive_sign+3Cj
					; _u_scanf_skip_leading_positive_sign+5Dj ...
		mov	eax, [ebp+var_18]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN12_0
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4
		add	esp, 118h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_skip_leading_positive_sign endp

; ---------------------------------------------------------------------------
$LN12_0		dd 3			; DATA XREF: _u_scanf_skip_leading_positive_sign+BDo
		dd offset $LN11
$LN11		dd 0FFFFFFF4h, 2	; DATA XREF: .text:000007BCo
		dd offset $LN8_0	; "c"
		dd 0FFFFFFC4h, 10h
		dd offset $LN9_0	; "plusSymbol"
		dd 0FFFFFFACh, 4
		dd offset $LN10		; "localStatus"
$LN10		db 'localStatus',0      ; DATA XREF: .text:000007E0o
$LN9_0		db 'plusSymbol',0       ; DATA XREF: .text:000007D4o
$LN8_0		db 'c',0                ; DATA XREF: .text:000007C8o
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 800h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_scanf_scientific_handler proc near	; DATA XREF: .rdata:0000012Co
					; .rdata:0000022Co

var_15C		= dword	ptr -15Ch
var_94		= byte ptr -94h
var_7C		= dword	ptr -7Ch
var_70		= dword	ptr -70h
var_64		= byte ptr -64h
var_4C		= dword	ptr -4Ch
var_40		= dword	ptr -40h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_1C		= qword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 15Ch
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_15C]
		mov	ecx, 57h ; 'W'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	[ebp+var_34], 0
		mov	[ebp+var_4C], 0
		mov	eax, [ebp+arg_4]
		movzx	ecx, word ptr [eax+6]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_scanf_skip_leading_ws
		add	esp, 8
		mov	[ebp+var_40], eax
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ufile_fill_uchar_buffer_56
		add	esp, 4
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+10h]
		sub	edx, [ecx+0Ch]
		sar	edx, 1
		mov	[ebp+var_C], edx
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_89B
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_C]
		cmp	ecx, [eax]
		jge	short loc_887
		mov	edx, [ebp+var_C]
		mov	[ebp+var_15C], edx
		jmp	short loc_892
; ---------------------------------------------------------------------------

loc_887:				; CODE XREF: _u_scanf_scientific_handler+7Aj
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		mov	[ebp+var_15C], ecx

loc_892:				; CODE XREF: _u_scanf_scientific_handler+85j
		mov	edx, [ebp+var_15C]
		mov	[ebp+var_C], edx

loc_89B:				; CODE XREF: _u_scanf_scientific_handler+70j
		push	4
		mov	eax, [ebp+arg_0]
		add	eax, 18h
		push	eax
		call	_u_locbund_getNumberFormat_56
		add	esp, 8
		mov	[ebp+var_28], eax
		cmp	[ebp+var_28], 0
		jnz	short loc_8BC
		xor	eax, eax
		jmp	loc_A06
; ---------------------------------------------------------------------------

loc_8BC:				; CODE XREF: _u_scanf_scientific_handler+B3j
		lea	eax, [ebp+var_4C]
		push	eax
		push	10h
		lea	ecx, [ebp+var_64]
		push	ecx
		push	0Bh
		mov	edx, [ebp+var_28]
		push	edx
		call	_unum_getSymbol_56
		add	esp, 14h
		mov	[ebp+var_70], eax
		mov	eax, [ebp+arg_4]
		movzx	ecx, word ptr [eax+4]
		cmp	ecx, 65h ; 'e'
		jnz	short loc_90C
		lea	eax, [ebp+var_4C]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+18h]
		push	edx
		mov	eax, [ebp+var_70]
		push	eax
		lea	ecx, [ebp+var_64]
		push	ecx
		push	10h
		lea	edx, [ebp+var_94]
		push	edx
		call	_u_strToLower_56
		add	esp, 18h
		mov	[ebp+var_7C], eax
		jmp	short loc_933
; ---------------------------------------------------------------------------

loc_90C:				; CODE XREF: _u_scanf_scientific_handler+E1j
		lea	eax, [ebp+var_4C]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+18h]
		push	edx
		mov	eax, [ebp+var_70]
		push	eax
		lea	ecx, [ebp+var_64]
		push	ecx
		push	10h
		lea	edx, [ebp+var_94]
		push	edx
		call	_u_strToUpper_56
		add	esp, 18h
		mov	[ebp+var_7C], eax

loc_933:				; CODE XREF: _u_scanf_scientific_handler+10Aj
		lea	eax, [ebp+var_4C]
		push	eax
		mov	ecx, [ebp+var_7C]
		push	ecx
		lea	edx, [ebp+var_94]
		push	edx
		push	0Bh
		mov	eax, [ebp+var_28]
		push	eax
		call	_unum_setSymbol_56
		add	esp, 14h
		lea	eax, [ebp+var_4C]
		push	eax
		mov	ecx, [ebp+var_28]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_scanf_skip_leading_positive_sign
		add	esp, 0Ch
		add	eax, [ebp+var_40]
		mov	[ebp+var_40], eax
		lea	eax, [ebp+var_4C]
		push	eax
		lea	ecx, [ebp+var_34]
		push	ecx
		mov	edx, [ebp+var_C]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		push	ecx
		mov	edx, [ebp+var_28]
		push	edx
		call	_unum_parseDouble_56
		add	esp, 14h
		fstp	[ebp+var_1C]
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		test	ecx, ecx
		jnz	short loc_9DB
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+0Bh]
		test	ecx, ecx
		jz	short loc_9AE
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		fld	[ebp+var_1C]
		fstp	qword ptr [ecx]
		jmp	short loc_9DB
; ---------------------------------------------------------------------------

loc_9AE:				; CODE XREF: _u_scanf_scientific_handler+1A0j
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+9]
		test	ecx, ecx
		jz	short loc_9C5
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		fld	[ebp+var_1C]
		fstp	qword ptr [ecx]
		jmp	short loc_9DB
; ---------------------------------------------------------------------------

loc_9C5:				; CODE XREF: _u_scanf_scientific_handler+1B7j
		fld	[ebp+var_1C]
		fstp	[ebp+var_15C]
		fld	[ebp+var_15C]
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		fstp	dword ptr [ecx]

loc_9DB:				; CODE XREF: _u_scanf_scientific_handler+195j
					; _u_scanf_scientific_handler+1ACj ...
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	edx, [ebp+var_34]
		lea	eax, [ecx+edx*2]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+0Ch], eax
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		neg	ecx
		sbb	ecx, ecx
		add	ecx, 1
		mov	edx, [ebp+arg_14]
		mov	[edx], ecx
		mov	eax, [ebp+var_34]
		add	eax, [ebp+var_40]

loc_A06:				; CODE XREF: _u_scanf_scientific_handler+B7j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN19
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4
		add	esp, 15Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_scientific_handler endp

; ---------------------------------------------------------------------------
		align 4
$LN19		dd 4			; DATA XREF: _u_scanf_scientific_handler+20Ao
		dd offset $LN18
$LN18		db 0CCh			; DATA XREF: .text:00000A3Co
		db 3 dup(0FFh)
		dd 4
		dd offset $LN14_0	; "parsePos"
		dd 0FFFFFFB4h, 4
		dd offset $LN15_0	; "status"
		dd 0FFFFFF9Ch, 10h
		dd offset $LN16		; "srcExpBuf"
		dd 0FFFFFF6Ch, 10h
		dd offset $LN17		; "expBuf"
$LN17		db 'expBuf',0           ; DATA XREF: .text:00000A6Co
$LN16		db 'srcExpBuf',0        ; DATA XREF: .text:00000A60o
$LN15_0		db 'status',0           ; DATA XREF: .text:00000A54o
$LN14_0		db 'parsePos',0         ; DATA XREF: .text:00000A48o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A94h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_scanf_scidbl_handler	proc near	; DATA XREF: .rdata:0000013Co
					; .rdata:0000023Co

var_160		= dword	ptr -160h
var_98		= dword	ptr -98h
var_8C		= dword	ptr -8Ch
var_80		= dword	ptr -80h
var_74		= dword	ptr -74h
var_68		= dword	ptr -68h
var_5C		= dword	ptr -5Ch
var_50		= qword	ptr -50h
var_40		= qword	ptr -40h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_18		= qword	ptr -18h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 160h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_160]
		mov	ecx, 58h ; 'X'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_5C], 0
		mov	[ebp+var_68], 0
		mov	[ebp+var_74], 0
		mov	[ebp+var_8C], 0
		mov	[ebp+var_98], 0
		mov	eax, [ebp+arg_4]
		movzx	ecx, word ptr [eax+6]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_scanf_skip_leading_ws
		add	esp, 8
		mov	[ebp+var_80], eax
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ufile_fill_uchar_buffer_56
		add	esp, 4
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+10h]
		sub	edx, [ecx+0Ch]
		sar	edx, 1
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_B40
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		cmp	ecx, [eax]
		jge	short loc_B2C
		mov	edx, [ebp+var_8]
		mov	[ebp+var_160], edx
		jmp	short loc_B37
; ---------------------------------------------------------------------------

loc_B2C:				; CODE XREF: _u_scanf_scidbl_handler+8Bj
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		mov	[ebp+var_160], ecx

loc_B37:				; CODE XREF: _u_scanf_scidbl_handler+96j
		mov	edx, [ebp+var_160]
		mov	[ebp+var_8], edx

loc_B40:				; CODE XREF: _u_scanf_scidbl_handler+81j
		push	4
		mov	eax, [ebp+arg_0]
		add	eax, 18h
		push	eax
		call	_u_locbund_getNumberFormat_56
		add	esp, 8
		mov	[ebp+var_24], eax
		push	1
		mov	eax, [ebp+arg_0]
		add	eax, 18h
		push	eax
		call	_u_locbund_getNumberFormat_56
		add	esp, 8
		mov	[ebp+var_30], eax
		cmp	[ebp+var_24], 0
		jz	short loc_B74
		cmp	[ebp+var_30], 0
		jnz	short loc_B7B

loc_B74:				; CODE XREF: _u_scanf_scidbl_handler+D8j
		xor	eax, eax
		jmp	loc_C84
; ---------------------------------------------------------------------------

loc_B7B:				; CODE XREF: _u_scanf_scidbl_handler+DEj
		lea	eax, [ebp+var_98]
		push	eax
		mov	ecx, [ebp+var_30]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_scanf_skip_leading_positive_sign
		add	esp, 0Ch
		add	eax, [ebp+var_80]
		mov	[ebp+var_80], eax
		lea	eax, [ebp+var_8C]
		push	eax
		lea	ecx, [ebp+var_5C]
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		push	ecx
		mov	edx, [ebp+var_24]
		push	edx
		call	_unum_parseDouble_56
		add	esp, 14h
		fstp	[ebp+var_40]
		lea	eax, [ebp+var_98]
		push	eax
		lea	ecx, [ebp+var_68]
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		push	ecx
		mov	edx, [ebp+var_30]
		push	edx
		call	_unum_parseDouble_56
		add	esp, 14h
		fstp	[ebp+var_50]
		mov	eax, [ebp+var_5C]
		cmp	eax, [ebp+var_68]
		jle	short loc_BFB
		fld	[ebp+var_40]
		fstp	[ebp+var_18]
		mov	eax, [ebp+var_74]
		add	eax, [ebp+var_5C]
		mov	[ebp+var_74], eax
		jmp	short loc_C0A
; ---------------------------------------------------------------------------

loc_BFB:				; CODE XREF: _u_scanf_scidbl_handler+154j
		fld	[ebp+var_50]
		fstp	[ebp+var_18]
		mov	eax, [ebp+var_74]
		add	eax, [ebp+var_68]
		mov	[ebp+var_74], eax

loc_C0A:				; CODE XREF: _u_scanf_scidbl_handler+165j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	edx, [ebp+var_74]
		lea	eax, [ecx+edx*2]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+0Ch], eax
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		test	ecx, ecx
		jnz	short loc_C6B
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+0Bh]
		test	ecx, ecx
		jz	short loc_C3E
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		fld	[ebp+var_18]
		fstp	qword ptr [ecx]
		jmp	short loc_C6B
; ---------------------------------------------------------------------------

loc_C3E:				; CODE XREF: _u_scanf_scidbl_handler+19Cj
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+9]
		test	ecx, ecx
		jz	short loc_C55
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		fld	[ebp+var_18]
		fstp	qword ptr [ecx]
		jmp	short loc_C6B
; ---------------------------------------------------------------------------

loc_C55:				; CODE XREF: _u_scanf_scidbl_handler+1B3j
		fld	[ebp+var_18]
		fstp	[ebp+var_160]
		fld	[ebp+var_160]
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		fstp	dword ptr [ecx]

loc_C6B:				; CODE XREF: _u_scanf_scidbl_handler+191j
					; _u_scanf_scidbl_handler+1A8j	...
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		neg	ecx
		sbb	ecx, ecx
		add	ecx, 1
		mov	edx, [ebp+arg_14]
		mov	[edx], ecx
		mov	eax, [ebp+var_74]
		add	eax, [ebp+var_80]

loc_C84:				; CODE XREF: _u_scanf_scidbl_handler+E2j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN20
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 160h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_scidbl_handler	endp

; ---------------------------------------------------------------------------
		align 4
$LN20		dd 4			; DATA XREF: _u_scanf_scidbl_handler+1F4o
		dd offset $LN19_0
$LN19_0		dd 0FFFFFFA4h, 4	; DATA XREF: .text:00000CB0o
		dd offset $LN15_1	; "scientificParsePos"
		dd 0FFFFFF98h, 4
		dd offset $LN16_0	; "genericParsePos"
		dd 0FFFFFF74h, 4
		dd offset $LN17_0	; "scientificStatus"
		dd 0FFFFFF68h, 4
		dd offset $LN18_0	; "genericStatus"
$LN18_0		db 'genericStatus',0    ; DATA XREF: .text:00000CE0o
$LN17_0		db 'scientificStatus',0 ; DATA XREF: .text:00000CD4o
$LN16_0		db 'genericParsePos',0  ; DATA XREF: .text:00000CC8o
$LN15_1		db 'scientificParsePos',0 ; DATA XREF: .text:00000CBCo
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0D28h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_scanf_integer_handler proc near	; CODE XREF: _u_scanf_uinteger_handler+36p
					; DATA XREF: .rdata:00000224o ...

var_11C		= dword	ptr -11Ch
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 11Ch
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_11C]
		mov	ecx, 47h ; 'G'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	[ebp+var_14], ecx
		mov	[ebp+var_2C], 0
		mov	[ebp+var_44], 0
		mov	eax, [ebp+arg_4]
		movzx	ecx, word ptr [eax+6]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_scanf_skip_leading_ws
		add	esp, 8
		mov	[ebp+var_38], eax
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ufile_fill_uchar_buffer_56
		add	esp, 4
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+10h]
		sub	edx, [ecx+0Ch]
		sar	edx, 1
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_DC1
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		cmp	ecx, [eax]
		jge	short loc_DAD
		mov	edx, [ebp+var_8]
		mov	[ebp+var_11C], edx
		jmp	short loc_DB8
; ---------------------------------------------------------------------------

loc_DAD:				; CODE XREF: _u_scanf_integer_handler+78j
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		mov	[ebp+var_11C], ecx

loc_DB8:				; CODE XREF: _u_scanf_integer_handler+83j
		mov	edx, [ebp+var_11C]
		mov	[ebp+var_8], edx

loc_DC1:				; CODE XREF: _u_scanf_integer_handler+6Ej
		push	1
		mov	eax, [ebp+arg_0]
		add	eax, 18h
		push	eax
		call	_u_locbund_getNumberFormat_56
		add	esp, 8
		mov	[ebp+var_20], eax
		cmp	[ebp+var_20], 0
		jnz	short loc_DE2
		xor	eax, eax
		jmp	loc_EA1
; ---------------------------------------------------------------------------

loc_DE2:				; CODE XREF: _u_scanf_integer_handler+B1j
		lea	eax, [ebp+var_44]
		push	eax
		mov	ecx, [ebp+var_20]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_scanf_skip_leading_positive_sign
		add	esp, 0Ch
		add	eax, [ebp+var_38]
		mov	[ebp+var_38], eax
		lea	eax, [ebp+var_44]
		push	eax
		lea	ecx, [ebp+var_2C]
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		push	ecx
		mov	edx, [ebp+var_20]
		push	edx
		call	_unum_parseInt64_56
		add	esp, 14h
		mov	[ebp+var_54], eax
		mov	[ebp+var_50], edx
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		test	ecx, ecx
		jnz	short loc_E76
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+0Ah]
		test	ecx, ecx
		jz	short loc_E4D
		mov	eax, [ebp+var_54]
		and	eax, 0FFFFh
		mov	ecx, [ebp+var_50]
		and	ecx, 0
		mov	edx, [ebp+var_14]
		mov	[edx], ax
		jmp	short loc_E76
; ---------------------------------------------------------------------------

loc_E4D:				; CODE XREF: _u_scanf_integer_handler+10Dj
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+0Ch]
		test	ecx, ecx
		jz	short loc_E68
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_54]
		mov	[eax], ecx
		mov	edx, [ebp+var_50]
		mov	[eax+4], edx
		jmp	short loc_E76
; ---------------------------------------------------------------------------

loc_E68:				; CODE XREF: _u_scanf_integer_handler+12Ej
		mov	eax, [ebp+var_54]
		mov	ecx, [ebp+var_50]
		and	ecx, 0
		mov	edx, [ebp+var_14]
		mov	[edx], eax

loc_E76:				; CODE XREF: _u_scanf_integer_handler+102j
					; _u_scanf_integer_handler+123j ...
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	edx, [ebp+var_2C]
		lea	eax, [ecx+edx*2]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+0Ch], eax
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		neg	ecx
		sbb	ecx, ecx
		add	ecx, 1
		mov	edx, [ebp+arg_14]
		mov	[edx], ecx
		mov	eax, [ebp+var_2C]
		add	eax, [ebp+var_38]

loc_EA1:				; CODE XREF: _u_scanf_integer_handler+B5j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN15_2
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 11Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_integer_handler endp

; ---------------------------------------------------------------------------
		align 4
$LN15_2		dd 2			; DATA XREF: _u_scanf_integer_handler+17Do
		dd offset $LN14_1
$LN14_1		dd 0FFFFFFD4h, 4	; DATA XREF: .text:00000ECCo
		dd offset $LN12_1	; "parsePos"
		dd 0FFFFFFBCh, 4
		dd offset $LN13_0	; "status"
$LN13_0		db 'status',0           ; DATA XREF: .text:00000EE4o
$LN12_1		db 'parsePos',0         ; DATA XREF: .text:00000ED8o
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0EF8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_scanf_uinteger_handler proc near	; DATA XREF: .rdata:000002ACo

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_scanf_integer_handler
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_uinteger_handler endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0F4Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_scanf_percent_handler proc near	; DATA XREF: .rdata:00000184o

var_104		= dword	ptr -104h
var_3C		= dword	ptr -3Ch
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_18		= qword	ptr -18h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 104h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_104]
		mov	ecx, 41h ; 'A'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_30], 0
		mov	[ebp+var_3C], 0
		mov	eax, [ebp+arg_4]
		movzx	ecx, word ptr [eax+6]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_scanf_skip_leading_ws
		add	esp, 8
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ufile_fill_uchar_buffer_56
		add	esp, 4
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+10h]
		sub	edx, [ecx+0Ch]
		sar	edx, 1
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_FDA
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		cmp	ecx, [eax]
		jge	short loc_FC6
		mov	edx, [ebp+var_8]
		mov	[ebp+var_104], edx
		jmp	short loc_FD1
; ---------------------------------------------------------------------------

loc_FC6:				; CODE XREF: _u_scanf_percent_handler+6Dj
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		mov	[ebp+var_104], ecx

loc_FD1:				; CODE XREF: _u_scanf_percent_handler+78j
		mov	edx, [ebp+var_104]
		mov	[ebp+var_8], edx

loc_FDA:				; CODE XREF: _u_scanf_percent_handler+63j
		push	3
		mov	eax, [ebp+arg_0]
		add	eax, 18h
		push	eax
		call	_u_locbund_getNumberFormat_56
		add	esp, 8
		mov	[ebp+var_24], eax
		cmp	[ebp+var_24], 0
		jnz	short loc_FF8
		xor	eax, eax
		jmp	short loc_106B
; ---------------------------------------------------------------------------

loc_FF8:				; CODE XREF: _u_scanf_percent_handler+A6j
		lea	eax, [ebp+var_3C]
		push	eax
		mov	ecx, [ebp+var_24]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_scanf_skip_leading_positive_sign
		add	esp, 0Ch
		lea	eax, [ebp+var_3C]
		push	eax
		lea	ecx, [ebp+var_30]
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		push	ecx
		mov	edx, [ebp+var_24]
		push	edx
		call	_unum_parseDouble_56
		add	esp, 14h
		fstp	[ebp+var_18]
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		test	ecx, ecx
		jnz	short loc_1043
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		fld	[ebp+var_18]
		fstp	qword ptr [ecx]

loc_1043:				; CODE XREF: _u_scanf_percent_handler+EBj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	edx, [ebp+var_30]
		lea	eax, [ecx+edx*2]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+0Ch], eax
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		neg	ecx
		sbb	ecx, ecx
		add	ecx, 1
		mov	edx, [ebp+arg_14]
		mov	[edx], ecx
		mov	eax, [ebp+var_30]

loc_106B:				; CODE XREF: _u_scanf_percent_handler+AAj
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN11_0
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 104h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_percent_handler endp

; ---------------------------------------------------------------------------
$LN11_0		dd 2			; DATA XREF: _u_scanf_percent_handler+123o
		dd offset $LN10_0
$LN10_0		dd 0FFFFFFD0h, 4	; DATA XREF: .text:00001094o
		dd offset $LN8_1	; "parsePos"
		dd 0FFFFFFC4h, 4
		dd offset $LN9_1	; "status"
$LN9_1		db 'status',0           ; DATA XREF: .text:000010ACo
$LN8_1		db 'parsePos',0         ; DATA XREF: .text:000010A0o
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10C0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_scanf_string_handler	proc near	; CODE XREF: _u_scanf_char_handler+4Ep
					; DATA XREF: .rdata:0000029Co

var_144		= byte ptr -144h
var_13D		= byte ptr -13Dh
var_71		= byte ptr -71h
var_68		= word ptr -68h
var_5C		= dword	ptr -5Ch
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 144h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_144]
		mov	ecx, 51h ; 'Q'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_13D], 0
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	[ebp+var_20], ecx
		mov	eax, [ebp+var_20]
		mov	[ebp+var_2C], eax
		mov	[ebp+var_44], 0
		mov	[ebp+var_5C], 0
		mov	[ebp+var_71], 0
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+0Dh]
		test	ecx, ecx
		jz	short loc_1127
		mov	eax, [ebp+arg_4]
		movzx	ecx, word ptr [eax+6]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_scanf_skip_leading_ws
		add	esp, 8
		mov	[ebp+var_5C], eax

loc_1127:				; CODE XREF: _u_scanf_string_handler+4Ej
		mov	[ebp+var_50], 0
		lea	eax, [ebp+var_44]
		push	eax
		call	_u_getDefaultConverter_56
		add	esp, 4
		mov	[ebp+var_14], eax
		cmp	[ebp+var_44], 0
		jle	short loc_114B
		or	eax, 0FFFFFFFFh
		jmp	loc_12FF
; ---------------------------------------------------------------------------

loc_114B:				; CODE XREF: _u_scanf_string_handler+81j
					; _u_scanf_string_handler+1B8j
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_1161
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_50]
		cmp	ecx, [eax]
		jge	loc_127D

loc_1161:				; CODE XREF: _u_scanf_string_handler+91j
		mov	[ebp+var_13D], 1
		lea	eax, [ebp+var_68]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ufile_getch_56
		add	esp, 8
		mov	[ebp+var_71], al
		movsx	edx, [ebp+var_71]
		test	edx, edx
		jz	loc_127D
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+0Dh]
		test	ecx, ecx
		jz	short loc_11E9
		cmp	[ebp+var_13D], 0
		jnz	short loc_11A8
		push	offset $LN18_1	; "c"
		call	__RTC_UninitUse
		add	esp, 4

loc_11A8:				; CODE XREF: _u_scanf_string_handler+D9j
		movzx	eax, [ebp+var_68]
		mov	ecx, [ebp+arg_4]
		movzx	edx, word ptr [ecx+6]
		cmp	eax, edx
		jz	loc_127D
		cmp	[ebp+var_13D], 0
		jnz	short loc_11D1
		push	offset $LN18_1	; "c"
		call	__RTC_UninitUse
		add	esp, 4

loc_11D1:				; CODE XREF: _u_scanf_string_handler+102j
		movzx	eax, [ebp+var_68]
		push	eax
		call	_u_isWhitespace_56
		add	esp, 4
		movsx	ecx, al
		test	ecx, ecx
		jnz	loc_127D

loc_11E9:				; CODE XREF: _u_scanf_string_handler+D0j
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		test	ecx, ecx
		jnz	short loc_126F
		mov	[ebp+var_13D], 1
		lea	eax, [ebp+var_68]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jle	short loc_1219
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_2C]
		add	ecx, [eax]
		sub	ecx, [ebp+var_50]
		mov	[ebp+var_38], ecx
		jmp	short loc_122E
; ---------------------------------------------------------------------------

loc_1219:				; CODE XREF: _u_scanf_string_handler+147j
		mov	eax, [ebp+var_14]
		push	eax
		call	_ucnv_getMaxCharSize_56
		add	esp, 4
		movsx	ecx, al
		add	ecx, [ebp+var_2C]
		mov	[ebp+var_38], ecx

loc_122E:				; CODE XREF: _u_scanf_string_handler+157j
		lea	eax, [ebp+var_44]
		push	eax
		push	1
		push	0
		mov	ecx, [ebp+var_8]
		add	ecx, 2
		push	ecx
		lea	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+var_38]
		push	eax
		lea	ecx, [ebp+var_2C]
		push	ecx
		mov	edx, [ebp+var_14]
		push	edx
		call	_ucnv_fromUnicode_56
		add	esp, 20h
		cmp	[ebp+var_44], 0
		jle	short loc_126F
		mov	eax, [ebp+var_14]
		push	eax
		call	_u_releaseDefaultConverter_56
		add	esp, 4
		or	eax, 0FFFFFFFFh
		jmp	loc_12FF
; ---------------------------------------------------------------------------

loc_126F:				; CODE XREF: _u_scanf_string_handler+132j
					; _u_scanf_string_handler+199j
		mov	eax, [ebp+var_50]
		add	eax, 1
		mov	[ebp+var_50], eax
		jmp	loc_114B
; ---------------------------------------------------------------------------

loc_127D:				; CODE XREF: _u_scanf_string_handler+9Bj
					; _u_scanf_string_handler+C1j ...
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		test	ecx, ecx
		jnz	short loc_12DA
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_129A
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_50]
		cmp	ecx, [eax]
		jge	short loc_12C9

loc_129A:				; CODE XREF: _u_scanf_string_handler+1CEj
		movsx	eax, [ebp+var_71]
		test	eax, eax
		jz	short loc_12C9
		cmp	[ebp+var_13D], 0
		jnz	short loc_12B8
		push	offset $LN18_1	; "c"
		call	__RTC_UninitUse
		add	esp, 4

loc_12B8:				; CODE XREF: _u_scanf_string_handler+1E9j
		mov	eax, [ebp+arg_0]
		push	eax
		movzx	ecx, [ebp+var_68]
		push	ecx
		call	_u_fungetc_56
		add	esp, 8

loc_12C9:				; CODE XREF: _u_scanf_string_handler+1D8j
					; _u_scanf_string_handler+1E0j
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+0Dh]
		test	ecx, ecx
		jz	short loc_12DA
		mov	eax, [ebp+var_2C]
		mov	byte ptr [eax],	0

loc_12DA:				; CODE XREF: _u_scanf_string_handler+1C6j
					; _u_scanf_string_handler+212j
		mov	eax, [ebp+var_14]
		push	eax
		call	_u_releaseDefaultConverter_56
		add	esp, 4
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		neg	ecx
		sbb	ecx, ecx
		add	ecx, 1
		mov	edx, [ebp+arg_14]
		mov	[edx], ecx
		mov	eax, [ebp+var_50]
		add	eax, [ebp+var_5C]

loc_12FF:				; CODE XREF: _u_scanf_string_handler+86j
					; _u_scanf_string_handler+1AAj
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN25
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 144h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_string_handler	endp

; ---------------------------------------------------------------------------
$LN25		dd 4			; DATA XREF: _u_scanf_string_handler+243o
		dd offset $LN24
$LN24		dd 0FFFFFF98h, 2	; DATA XREF: .text:00001328o
		dd offset $LN18_1	; "c"
		dd 0FFFFFFF8h, 4
		dd offset $LN21		; "source"
		dd 0FFFFFFD4h, 4
		dd offset $LN22		; "alias"
		dd 0FFFFFFBCh, 4
		dd offset $LN23		; "status"
$LN23		db 'status',0           ; DATA XREF: .text:00001358o
$LN22		db 'alias',0            ; DATA XREF: .text:0000134Co
$LN21		db 'source',0           ; DATA XREF: .text:00001340o
$LN18_1		db 'c',0                ; DATA XREF: _u_scanf_string_handler+DBo
					; _u_scanf_string_handler+104o	...
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1374h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_scanf_char_handler proc near		; DATA XREF: .rdata:0000021Co

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jge	short loc_13A3
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 1

loc_13A3:				; CODE XREF: _u_scanf_char_handler+24j
		mov	eax, [ebp+arg_4]
		mov	byte ptr [eax+0Dh], 0
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_scanf_string_handler
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_char_handler endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 13E0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_scanf_ustring_handler proc near	; CODE XREF: _u_scanf_uchar_handler+4Ep
					; DATA XREF: .rdata:0000019Co

var_114		= byte ptr -114h
var_10D		= byte ptr -10Dh
var_41		= byte ptr -41h
var_38		= word ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 114h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_114]
		mov	ecx, 45h ; 'E'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_10D], 0
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	[ebp+var_14], eax
		mov	[ebp+var_2C], 0
		mov	[ebp+var_41], 0
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+0Dh]
		test	ecx, ecx
		jz	short loc_1440
		mov	eax, [ebp+arg_4]
		movzx	ecx, word ptr [eax+6]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_scanf_skip_leading_ws
		add	esp, 8
		mov	[ebp+var_2C], eax

loc_1440:				; CODE XREF: _u_scanf_ustring_handler+47j
		mov	[ebp+var_20], 0

loc_1447:				; CODE XREF: _u_scanf_ustring_handler+13Aj
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_145D
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_20]
		cmp	ecx, [eax]
		jge	loc_151F

loc_145D:				; CODE XREF: _u_scanf_ustring_handler+6Dj
		mov	[ebp+var_10D], 1
		lea	eax, [ebp+var_38]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ufile_getch_56
		add	esp, 8
		mov	[ebp+var_41], al
		movsx	edx, [ebp+var_41]
		test	edx, edx
		jz	loc_151F
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+0Dh]
		test	ecx, ecx
		jz	short loc_14DD
		cmp	[ebp+var_10D], 0
		jnz	short loc_14A4
		push	offset $LN14_2
		call	__RTC_UninitUse
		add	esp, 4

loc_14A4:				; CODE XREF: _u_scanf_ustring_handler+B5j
		movzx	eax, [ebp+var_38]
		mov	ecx, [ebp+arg_4]
		movzx	edx, word ptr [ecx+6]
		cmp	eax, edx
		jz	short loc_151F
		cmp	[ebp+var_10D], 0
		jnz	short loc_14C9
		push	offset $LN14_2
		call	__RTC_UninitUse
		add	esp, 4

loc_14C9:				; CODE XREF: _u_scanf_ustring_handler+DAj
		movzx	eax, [ebp+var_38]
		push	eax
		call	_u_isWhitespace_56
		add	esp, 4
		movsx	ecx, al
		test	ecx, ecx
		jnz	short loc_151F

loc_14DD:				; CODE XREF: _u_scanf_ustring_handler+ACj
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		test	ecx, ecx
		jnz	short loc_1511
		cmp	[ebp+var_10D], 0
		jnz	short loc_14FE
		push	offset $LN14_2
		call	__RTC_UninitUse
		add	esp, 4

loc_14FE:				; CODE XREF: _u_scanf_ustring_handler+10Fj
		mov	eax, [ebp+var_14]
		mov	cx, [ebp+var_38]
		mov	[eax], cx
		mov	edx, [ebp+var_14]
		add	edx, 2
		mov	[ebp+var_14], edx

loc_1511:				; CODE XREF: _u_scanf_ustring_handler+106j
		mov	eax, [ebp+var_20]
		add	eax, 1
		mov	[ebp+var_20], eax
		jmp	loc_1447
; ---------------------------------------------------------------------------

loc_151F:				; CODE XREF: _u_scanf_ustring_handler+77j
					; _u_scanf_ustring_handler+9Dj	...
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		test	ecx, ecx
		jnz	short loc_157E
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_153C
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_20]
		cmp	ecx, [eax]
		jge	short loc_156B

loc_153C:				; CODE XREF: _u_scanf_ustring_handler+150j
		movsx	eax, [ebp+var_41]
		test	eax, eax
		jz	short loc_156B
		cmp	[ebp+var_10D], 0
		jnz	short loc_155A
		push	offset $LN14_2
		call	__RTC_UninitUse
		add	esp, 4

loc_155A:				; CODE XREF: _u_scanf_ustring_handler+16Bj
		mov	eax, [ebp+arg_0]
		push	eax
		movzx	ecx, [ebp+var_38]
		push	ecx
		call	_u_fungetc_56
		add	esp, 8

loc_156B:				; CODE XREF: _u_scanf_ustring_handler+15Aj
					; _u_scanf_ustring_handler+162j
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+0Dh]
		test	ecx, ecx
		jz	short loc_157E
		xor	eax, eax
		mov	ecx, [ebp+var_14]
		mov	[ecx], ax

loc_157E:				; CODE XREF: _u_scanf_ustring_handler+148j
					; _u_scanf_ustring_handler+194j
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		neg	ecx
		sbb	ecx, ecx
		add	ecx, 1
		mov	edx, [ebp+arg_14]
		mov	[edx], ecx
		mov	eax, [ebp+var_20]
		add	eax, [ebp+var_2C]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN19_1
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 114h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_ustring_handler endp

; ---------------------------------------------------------------------------
$LN19_1		dd 1			; DATA XREF: _u_scanf_ustring_handler+1BBo
		dd offset $LN18_2
$LN18_2		dd 0FFFFFFC8h, 2	; DATA XREF: .text:000015C0o
		dd offset $LN14_2
$LN14_2		db 63h,	0		; DATA XREF: _u_scanf_ustring_handler+B7o
					; _u_scanf_ustring_handler+DCo	...
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 15D4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_scanf_uchar_handler proc near	; DATA XREF: .rdata:0000011Co

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jge	short loc_1603
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 1

loc_1603:				; CODE XREF: _u_scanf_uchar_handler+24j
		mov	eax, [ebp+arg_4]
		mov	byte ptr [eax+0Dh], 0
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_scanf_ustring_handler
		add	esp, 18h
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_uchar_handler endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1640h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_scanf_spellout_handler proc near	; DATA XREF: .rdata:000001B4o

var_110		= dword	ptr -110h
var_48		= dword	ptr -48h
var_3C		= dword	ptr -3Ch
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_18		= qword	ptr -18h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 110h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_110]
		mov	ecx, 44h ; 'D'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_30], 0
		mov	[ebp+var_48], 0
		mov	eax, [ebp+arg_4]
		movzx	ecx, word ptr [eax+6]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_scanf_skip_leading_ws
		add	esp, 8
		mov	[ebp+var_3C], eax
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ufile_fill_uchar_buffer_56
		add	esp, 4
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+10h]
		sub	edx, [ecx+0Ch]
		sar	edx, 1
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_16D1
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		cmp	ecx, [eax]
		jge	short loc_16BD
		mov	edx, [ebp+var_8]
		mov	[ebp+var_110], edx
		jmp	short loc_16C8
; ---------------------------------------------------------------------------

loc_16BD:				; CODE XREF: _u_scanf_spellout_handler+70j
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		mov	[ebp+var_110], ecx

loc_16C8:				; CODE XREF: _u_scanf_spellout_handler+7Bj
		mov	edx, [ebp+var_110]
		mov	[ebp+var_8], edx

loc_16D1:				; CODE XREF: _u_scanf_spellout_handler+66j
		push	5
		mov	eax, [ebp+arg_0]
		add	eax, 18h
		push	eax
		call	_u_locbund_getNumberFormat_56
		add	esp, 8
		mov	[ebp+var_24], eax
		cmp	[ebp+var_24], 0
		jnz	short loc_16EF
		xor	eax, eax
		jmp	short loc_1751
; ---------------------------------------------------------------------------

loc_16EF:				; CODE XREF: _u_scanf_spellout_handler+A9j
		lea	eax, [ebp+var_48]
		push	eax
		lea	ecx, [ebp+var_30]
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		push	ecx
		mov	edx, [ebp+var_24]
		push	edx
		call	_unum_parseDouble_56
		add	esp, 14h
		fstp	[ebp+var_18]
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		test	ecx, ecx
		jnz	short loc_1726
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		fld	[ebp+var_18]
		fstp	qword ptr [ecx]

loc_1726:				; CODE XREF: _u_scanf_spellout_handler+DAj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	edx, [ebp+var_30]
		lea	eax, [ecx+edx*2]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+0Ch], eax
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		neg	ecx
		sbb	ecx, ecx
		add	ecx, 1
		mov	edx, [ebp+arg_14]
		mov	[edx], ecx
		mov	eax, [ebp+var_30]
		add	eax, [ebp+var_3C]

loc_1751:				; CODE XREF: _u_scanf_spellout_handler+ADj
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN11_1
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 110h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_spellout_handler endp

; ---------------------------------------------------------------------------
		align 4
$LN11_1		dd 2			; DATA XREF: _u_scanf_spellout_handler+115o
		dd offset $LN10_1
$LN10_1		dd 0FFFFFFD0h, 4	; DATA XREF: .text:0000177Co
		dd offset $LN8_2	; "parsePos"
		dd 0FFFFFFB8h, 4
		dd offset $LN9_2	; "status"
$LN9_2		db 'status',0           ; DATA XREF: .text:00001794o
$LN8_2		db 'parsePos',0         ; DATA XREF: .text:00001788o
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 17A8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_scanf_hex_handler proc near		; DATA XREF: .rdata:000001C4o
					; .rdata:000002C4o

var_F8		= dword	ptr -0F8h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0F8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_F8]
		mov	ecx, 3Eh ; '>'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	[ebp+var_20], ecx
		mov	eax, [ebp+arg_4]
		movzx	ecx, word ptr [eax+6]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_scanf_skip_leading_ws
		add	esp, 8
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ufile_fill_uchar_buffer_56
		add	esp, 4
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+10h]
		sub	edx, [ecx+0Ch]
		sar	edx, 1
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_1833
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		cmp	ecx, [eax]
		jge	short loc_181F
		mov	edx, [ebp+var_8]
		mov	[ebp+var_F8], edx
		jmp	short loc_182A
; ---------------------------------------------------------------------------

loc_181F:				; CODE XREF: _u_scanf_hex_handler+6Aj
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		mov	[ebp+var_F8], ecx

loc_182A:				; CODE XREF: _u_scanf_hex_handler+75j
		mov	edx, [ebp+var_F8]
		mov	[ebp+var_8], edx

loc_1833:				; CODE XREF: _u_scanf_hex_handler+60j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		movzx	edx, word ptr [ecx]
		cmp	edx, 30h ; '0'
		jnz	short loc_1877
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		movzx	edx, word ptr [ecx+2]
		cmp	edx, 78h ; 'x'
		jz	short loc_185F
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		movzx	edx, word ptr [ecx+2]
		cmp	edx, 58h ; 'X'
		jnz	short loc_1877

loc_185F:				; CODE XREF: _u_scanf_hex_handler+A6j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		add	ecx, 4
		mov	edx, [ebp+arg_0]
		mov	[edx+0Ch], ecx
		mov	eax, [ebp+var_8]
		sub	eax, 2
		mov	[ebp+var_8], eax

loc_1877:				; CODE XREF: _u_scanf_hex_handler+97j
					; _u_scanf_hex_handler+B5j
		push	10h
		lea	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		push	edx
		call	_ufmt_uto64_56
		add	esp, 0Ch
		mov	[ebp+var_30], eax
		mov	[ebp+var_2C], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	edx, [ebp+var_8]
		lea	eax, [ecx+edx*2]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+0Ch], eax
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		test	ecx, ecx
		jnz	short loc_18F9
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+0Ah]
		test	ecx, ecx
		jz	short loc_18D0
		mov	eax, [ebp+var_30]
		and	eax, 0FFFFh
		mov	ecx, [ebp+var_2C]
		and	ecx, 0
		mov	edx, [ebp+var_20]
		mov	[edx], ax
		jmp	short loc_18F9
; ---------------------------------------------------------------------------

loc_18D0:				; CODE XREF: _u_scanf_hex_handler+110j
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+0Ch]
		test	ecx, ecx
		jz	short loc_18EB
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_30]
		mov	[eax], ecx
		mov	edx, [ebp+var_2C]
		mov	[eax+4], edx
		jmp	short loc_18F9
; ---------------------------------------------------------------------------

loc_18EB:				; CODE XREF: _u_scanf_hex_handler+131j
		mov	eax, [ebp+var_30]
		mov	ecx, [ebp+var_2C]
		and	ecx, 0
		mov	edx, [ebp+var_20]
		mov	[edx], eax

loc_18F9:				; CODE XREF: _u_scanf_hex_handler+105j
					; _u_scanf_hex_handler+126j ...
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		neg	ecx
		sbb	ecx, ecx
		add	ecx, 1
		mov	edx, [ebp+arg_14]
		mov	[edx], ecx
		mov	eax, [ebp+var_8]
		add	eax, [ebp+var_14]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN15_3
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0F8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_hex_handler endp

; ---------------------------------------------------------------------------
		align 4
$LN15_3		dd 1			; DATA XREF: _u_scanf_hex_handler+16Eo
		dd offset $LN14_3
$LN14_3		dd 0FFFFFFF8h, 4	; DATA XREF: .text:0000193Co
		dd offset $LN13_1
$LN13_1		dd 6E656Ch		; DATA XREF: .text:00001948o
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1950h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_scanf_octal_handler proc near	; DATA XREF: .rdata:0000027Co

var_F8		= dword	ptr -0F8h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0F8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_F8]
		mov	ecx, 3Eh ; '>'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	[ebp+var_20], ecx
		mov	eax, [ebp+arg_4]
		movzx	ecx, word ptr [eax+6]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_scanf_skip_leading_ws
		add	esp, 8
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ufile_fill_uchar_buffer_56
		add	esp, 4
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+10h]
		sub	edx, [ecx+0Ch]
		sar	edx, 1
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_19DB
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		cmp	ecx, [eax]
		jge	short loc_19C7
		mov	edx, [ebp+var_8]
		mov	[ebp+var_F8], edx
		jmp	short loc_19D2
; ---------------------------------------------------------------------------

loc_19C7:				; CODE XREF: _u_scanf_octal_handler+6Aj
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		mov	[ebp+var_F8], ecx

loc_19D2:				; CODE XREF: _u_scanf_octal_handler+75j
		mov	edx, [ebp+var_F8]
		mov	[ebp+var_8], edx

loc_19DB:				; CODE XREF: _u_scanf_octal_handler+60j
		push	8
		lea	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		push	edx
		call	_ufmt_uto64_56
		add	esp, 0Ch
		mov	[ebp+var_30], eax
		mov	[ebp+var_2C], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	edx, [ebp+var_8]
		lea	eax, [ecx+edx*2]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+0Ch], eax
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		test	ecx, ecx
		jnz	short loc_1A5D
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+0Ah]
		test	ecx, ecx
		jz	short loc_1A34
		mov	eax, [ebp+var_30]
		and	eax, 0FFFFh
		mov	ecx, [ebp+var_2C]
		and	ecx, 0
		mov	edx, [ebp+var_20]
		mov	[edx], ax
		jmp	short loc_1A5D
; ---------------------------------------------------------------------------

loc_1A34:				; CODE XREF: _u_scanf_octal_handler+CCj
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+0Ch]
		test	ecx, ecx
		jz	short loc_1A4F
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_30]
		mov	[eax], ecx
		mov	edx, [ebp+var_2C]
		mov	[eax+4], edx
		jmp	short loc_1A5D
; ---------------------------------------------------------------------------

loc_1A4F:				; CODE XREF: _u_scanf_octal_handler+EDj
		mov	eax, [ebp+var_30]
		mov	ecx, [ebp+var_2C]
		and	ecx, 0
		mov	edx, [ebp+var_20]
		mov	[edx], eax

loc_1A5D:				; CODE XREF: _u_scanf_octal_handler+C1j
					; _u_scanf_octal_handler+E2j ...
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		neg	ecx
		sbb	ecx, ecx
		add	ecx, 1
		mov	edx, [ebp+arg_14]
		mov	[edx], ecx
		mov	eax, [ebp+var_8]
		add	eax, [ebp+var_14]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN13_2
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0F8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_octal_handler endp

; ---------------------------------------------------------------------------
		align 4
$LN13_2		dd 1			; DATA XREF: _u_scanf_octal_handler+12Ao
		dd offset $LN12_2
$LN12_2		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00001AA0o
		dd offset $LN11_2
$LN11_2		dd 6E656Ch		; DATA XREF: .text:00001AACo
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1AB4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_scanf_pointer_handler proc near	; DATA XREF: .rdata:00000284o

var_F4		= dword	ptr -0F4h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0F4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_F4]
		mov	ecx, 3Dh ; '='
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	[ebp+var_2C], ecx
		mov	eax, [ebp+arg_4]
		movzx	ecx, word ptr [eax+6]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_u_scanf_skip_leading_ws
		add	esp, 8
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ufile_fill_uchar_buffer_56
		add	esp, 4
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+10h]
		sub	edx, [ecx+0Ch]
		sar	edx, 1
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0FFFFFFFFh
		jz	short loc_1B3F
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_8]
		cmp	ecx, [eax]
		jge	short loc_1B2B
		mov	edx, [ebp+var_8]
		mov	[ebp+var_F4], edx
		jmp	short loc_1B36
; ---------------------------------------------------------------------------

loc_1B2B:				; CODE XREF: _u_scanf_pointer_handler+6Aj
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		mov	[ebp+var_F4], ecx

loc_1B36:				; CODE XREF: _u_scanf_pointer_handler+75j
		mov	edx, [ebp+var_F4]
		mov	[ebp+var_8], edx

loc_1B3F:				; CODE XREF: _u_scanf_pointer_handler+60j
		cmp	[ebp+var_8], 8
		jle	short loc_1B4C
		mov	[ebp+var_8], 8

loc_1B4C:				; CODE XREF: _u_scanf_pointer_handler+8Fj
		lea	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		push	edx
		call	_ufmt_utop_56
		add	esp, 8
		mov	[ebp+var_20], eax
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		test	ecx, ecx
		jnz	short loc_1B75
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+var_20]
		mov	[eax], ecx

loc_1B75:				; CODE XREF: _u_scanf_pointer_handler+B7j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	edx, [ebp+var_8]
		lea	eax, [ecx+edx*2]
		mov	ecx, [ebp+arg_0]
		mov	[ecx+0Ch], eax
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		neg	ecx
		sbb	ecx, ecx
		add	ecx, 1
		mov	edx, [ebp+arg_14]
		mov	[edx], ecx
		mov	eax, [ebp+var_8]
		add	eax, [ebp+var_14]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN10_2
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0F4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_pointer_handler endp

; ---------------------------------------------------------------------------
		align 4
$LN10_2		dd 1			; DATA XREF: _u_scanf_pointer_handler+F0o
		dd offset $LN9_3
$LN9_3		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00001BCCo
		dd offset $LN8_3
$LN8_3		dd 6E656Ch		; DATA XREF: .text:00001BD8o
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1BE0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_scanf_scanset_handler proc near	; DATA XREF: .rdata:000001DCo

var_130		= dword	ptr -130h
var_65		= byte ptr -65h
var_5C		= dword	ptr -5Ch
var_4D		= byte ptr -4Dh
var_41		= byte ptr -41h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 130h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_130]
		mov	ecx, 4Ch ; 'L'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_14], 0
		mov	[ebp+var_20], 7FFFFFFFh
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		mov	[ebp+var_38], ecx
		mov	[ebp+var_41], 0
		mov	[ebp+var_4D], 0
		push	0FFFFFFFFh
		push	0
		call	_uset_open_56
		add	esp, 8
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_C]
		sub	eax, 2
		mov	[ebp+arg_C], eax
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jl	short loc_1C44
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		mov	[ebp+var_20], ecx

loc_1C44:				; CODE XREF: _u_scanf_scanset_handler+5Aj
		lea	eax, [ebp+var_14]
		push	eax
		push	0
		push	0FFFFFFFFh
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+var_8]
		push	edx
		call	_uset_applyPattern_56
		add	esp, 14h
		mov	ecx, [ebp+arg_10]
		mov	[ecx], eax
		cmp	[ebp+var_14], 0
		jg	loc_1DA7
		mov	[ebp+var_2C], 0

loc_1C72:				; CODE XREF: _u_scanf_scanset_handler:loc_1D84j
		cmp	[ebp+var_20], 0
		jle	loc_1D89
		lea	eax, [ebp+var_2C]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ufile_getch32_56
		add	esp, 8
		mov	[ebp+var_41], al
		movsx	edx, [ebp+var_41]
		test	edx, edx
		jz	loc_1D82
		mov	eax, [ebp+var_2C]
		push	eax
		mov	ecx, [ebp+var_8]
		push	ecx
		call	_uset_contains_56
		add	esp, 8
		movsx	edx, al
		test	edx, edx
		jz	loc_1D82
		mov	[ebp+var_4D], 1
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		test	ecx, ecx
		jnz	loc_1D64
		mov	[ebp+var_5C], 0
		mov	[ebp+var_65], 0
		cmp	[ebp+var_2C], 0FFFFh
		ja	short loc_1CF6
		mov	eax, [ebp+var_5C]
		mov	ecx, [ebp+var_38]
		mov	dx, word ptr [ebp+var_2C]
		mov	[ecx+eax*2], dx
		mov	eax, [ebp+var_5C]
		add	eax, 1
		mov	[ebp+var_5C], eax
		jmp	short loc_1D4E
; ---------------------------------------------------------------------------

loc_1CF6:				; CODE XREF: _u_scanf_scanset_handler+FBj
		cmp	[ebp+var_2C], 10FFFFh
		ja	short loc_1D4A
		mov	eax, [ebp+var_5C]
		add	eax, 1
		cmp	eax, [ebp+var_20]
		jge	short loc_1D4A
		mov	eax, [ebp+var_2C]
		sar	eax, 0Ah
		add	eax, 0D7C0h
		mov	ecx, [ebp+var_5C]
		mov	edx, [ebp+var_38]
		mov	[edx+ecx*2], ax
		mov	eax, [ebp+var_5C]
		add	eax, 1
		mov	[ebp+var_5C], eax
		mov	eax, [ebp+var_2C]
		and	eax, 3FFh
		or	eax, 0DC00h
		mov	ecx, [ebp+var_5C]
		mov	edx, [ebp+var_38]
		mov	[edx+ecx*2], ax
		mov	eax, [ebp+var_5C]
		add	eax, 1
		mov	[ebp+var_5C], eax
		jmp	short loc_1D4E
; ---------------------------------------------------------------------------

loc_1D4A:				; CODE XREF: _u_scanf_scanset_handler+11Dj
					; _u_scanf_scanset_handler+128j
		mov	[ebp+var_65], 1

loc_1D4E:				; CODE XREF: _u_scanf_scanset_handler+114j
					; _u_scanf_scanset_handler+168j
		movsx	eax, [ebp+var_65]
		test	eax, eax
		jz	short loc_1D58
		jmp	short loc_1D89
; ---------------------------------------------------------------------------

loc_1D58:				; CODE XREF: _u_scanf_scanset_handler+174j
		mov	eax, [ebp+var_5C]
		mov	ecx, [ebp+var_38]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_38], edx

loc_1D64:				; CODE XREF: _u_scanf_scanset_handler+E3j
		mov	eax, [ebp+var_2C]
		sub	eax, 10000h
		mov	ecx, 0FFFFFh
		cmp	ecx, eax
		sbb	edx, edx
		add	edx, 2
		mov	eax, [ebp+var_20]
		sub	eax, edx
		mov	[ebp+var_20], eax
		jmp	short loc_1D84
; ---------------------------------------------------------------------------

loc_1D82:				; CODE XREF: _u_scanf_scanset_handler+B5j
					; _u_scanf_scanset_handler+D0j
		jmp	short loc_1D89
; ---------------------------------------------------------------------------

loc_1D84:				; CODE XREF: _u_scanf_scanset_handler+1A0j
		jmp	loc_1C72
; ---------------------------------------------------------------------------

loc_1D89:				; CODE XREF: _u_scanf_scanset_handler+96j
					; _u_scanf_scanset_handler+176j ...
		movsx	eax, [ebp+var_41]
		test	eax, eax
		jz	short loc_1DA7
		cmp	[ebp+var_20], 0
		jle	short loc_1DA7
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_2C]
		push	ecx
		call	_u_fungetc_56
		add	esp, 8

loc_1DA7:				; CODE XREF: _u_scanf_scanset_handler+85j
					; _u_scanf_scanset_handler+1AFj ...
		mov	eax, [ebp+var_8]
		push	eax
		call	_uset_close_56
		add	esp, 4
		movsx	eax, [ebp+var_4D]
		test	eax, eax
		jnz	short loc_1DC2
		or	eax, 0FFFFFFFFh
		jmp	short loc_1E10
; ---------------------------------------------------------------------------
		jmp	short loc_1DD5
; ---------------------------------------------------------------------------

loc_1DC2:				; CODE XREF: _u_scanf_scanset_handler+1D9j
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		test	ecx, ecx
		jnz	short loc_1DD5
		xor	eax, eax
		mov	ecx, [ebp+var_38]
		mov	[ecx], ax

loc_1DD5:				; CODE XREF: _u_scanf_scanset_handler+1E0j
					; _u_scanf_scanset_handler+1EBj
		mov	eax, [ebp+arg_4]
		movsx	ecx, byte ptr [eax+8]
		neg	ecx
		sbb	ecx, ecx
		add	ecx, 1
		mov	edx, [ebp+arg_14]
		mov	[edx], ecx
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jl	short loc_1DFD
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		mov	[ebp+var_130], edx
		jmp	short loc_1E07
; ---------------------------------------------------------------------------

loc_1DFD:				; CODE XREF: _u_scanf_scanset_handler+20Ej
		mov	[ebp+var_130], 7FFFFFFFh

loc_1E07:				; CODE XREF: _u_scanf_scanset_handler+21Bj
		mov	eax, [ebp+var_130]
		sub	eax, [ebp+var_20]

loc_1E10:				; CODE XREF: _u_scanf_scanset_handler+1DEj
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN24_0
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 130h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_scanset_handler endp

; ---------------------------------------------------------------------------
		align 4
$LN24_0		dd 2			; DATA XREF: _u_scanf_scanset_handler+234o
		dd offset $LN23_0
$LN23_0		dd 0FFFFFFECh, 4	; DATA XREF: .text:00001E3Co
		dd offset $LN21_0	; "status"
		dd 0FFFFFFD4h, 4
		dd offset $LN22_0
$LN22_0		db 63h,	0		; DATA XREF: .text:00001E54o
$LN21_0		db 'status',0           ; DATA XREF: .text:00001E48o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1E64h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _u_scanf_parse_56
_u_scanf_parse_56 proc near

var_154		= dword	ptr -154h
var_8C		= dword	ptr -8Ch
var_80		= dword	ptr -80h
var_74		= dword	ptr -74h
var_70		= word ptr -70h
var_6C		= byte ptr -6Ch
var_58		= dword	ptr -58h
var_48		= word ptr -48h
var_3C		= dword	ptr -3Ch
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_18		= dword	ptr -18h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 154h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_154]
		mov	ecx, 55h ; 'U'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_C], eax
		mov	[ebp+var_30], 0
		mov	[ebp+var_24], 0
		mov	[ebp+var_3C], 0

loc_1EA7:				; CODE XREF: _u_scanf_parse_56+7Aj
					; _u_scanf_parse_56:loc_202Dj
		mov	eax, [ebp+var_C]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 25h ; '%'
		jz	short loc_1EE0
		mov	eax, [ebp+var_C]
		movzx	ecx, word ptr [eax]
		test	ecx, ecx
		jz	short loc_1EE0
		mov	eax, [ebp+arg_0]
		push	eax
		call	_u_fgetc_56
		add	esp, 4
		movzx	ecx, ax
		mov	edx, [ebp+var_C]
		movzx	eax, word ptr [edx]
		cmp	ecx, eax
		jnz	short loc_1EE0
		mov	eax, [ebp+var_C]
		add	eax, 2
		mov	[ebp+var_C], eax
		jmp	short loc_1EA7
; ---------------------------------------------------------------------------

loc_1EE0:				; CODE XREF: _u_scanf_parse_56+4Cj
					; _u_scanf_parse_56+56j ...
		mov	eax, [ebp+var_C]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 25h ; '%'
		jnz	short loc_1EF5
		mov	eax, [ebp+var_C]
		movzx	ecx, word ptr [eax]
		test	ecx, ecx
		jnz	short loc_1EFA

loc_1EF5:				; CODE XREF: _u_scanf_parse_56+85j
		jmp	loc_2032
; ---------------------------------------------------------------------------

loc_1EFA:				; CODE XREF: _u_scanf_parse_56+8Fj
		lea	eax, [ebp+var_74]
		push	eax
		mov	ecx, [ebp+var_C]
		push	ecx
		call	_u_scanf_parse_spec
		add	esp, 8
		mov	[ebp+var_18], eax
		mov	eax, [ebp+var_18]
		mov	ecx, [ebp+var_C]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_C], edx
		movzx	eax, [ebp+var_70]
		sub	eax, 20h ; ' '
		mov	[ebp+var_48], ax
		movzx	eax, [ebp+var_48]
		cmp	eax, 6Ch ; 'l'
		jge	loc_202D
		movzx	eax, [ebp+var_48]
		mov	ecx, _g_u_scanf_infos[eax*8]
		mov	[ebp+var_80], ecx
		cmp	[ebp+var_80], 2
		jz	short loc_1F5F
		mov	eax, [ebp+arg_0]
		push	eax
		call	_u_feof_56
		add	esp, 4
		movsx	ecx, al
		test	ecx, ecx
		jz	short loc_1F5F
		jmp	loc_2032
; ---------------------------------------------------------------------------
		jmp	short loc_1FB7
; ---------------------------------------------------------------------------

loc_1F5F:				; CODE XREF: _u_scanf_parse_56+DFj
					; _u_scanf_parse_56+F2j
		movsx	eax, [ebp+var_6C]
		test	eax, eax
		jz	short loc_1F70
		mov	[ebp+var_58], 0
		jmp	short loc_1FB7
; ---------------------------------------------------------------------------

loc_1F70:				; CODE XREF: _u_scanf_parse_56+101j
		mov	eax, [ebp+var_80]
		mov	[ebp+var_154], eax
		cmp	[ebp+var_154], 2
		jz	short loc_1F96
		cmp	[ebp+var_154], 2
		jle	short loc_1FB0
		cmp	[ebp+var_154], 0Ah
		jle	short loc_1F9C
		jmp	short loc_1FB0
; ---------------------------------------------------------------------------

loc_1F96:				; CODE XREF: _u_scanf_parse_56+11Cj
		mov	eax, [ebp+var_3C]
		mov	[ebp+var_74], eax

loc_1F9C:				; CODE XREF: _u_scanf_parse_56+12Ej
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	[ebp+arg_8], eax
		mov	ecx, [ebp+arg_8]
		mov	edx, [ecx-4]
		mov	[ebp+var_58], edx
		jmp	short loc_1FB7
; ---------------------------------------------------------------------------

loc_1FB0:				; CODE XREF: _u_scanf_parse_56+125j
					; _u_scanf_parse_56+130j
		mov	[ebp+var_58], 0

loc_1FB7:				; CODE XREF: _u_scanf_parse_56+F9j
					; _u_scanf_parse_56+10Aj ...
		movzx	eax, [ebp+var_48]
		mov	ecx, dword_4[eax*8]
		mov	[ebp+var_8C], ecx
		cmp	[ebp+var_8C], 0
		jz	short loc_202D
		mov	[ebp+var_18], 1
		mov	esi, esp
		lea	eax, [ebp+var_30]
		push	eax
		lea	ecx, [ebp+var_18]
		push	ecx
		mov	edx, [ebp+var_C]
		push	edx
		lea	eax, [ebp+var_58]
		push	eax
		lea	ecx, [ebp+var_74]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	[ebp+var_8C]
		add	esp, 18h
		cmp	esi, esp
		call	__RTC_CheckEsp
		add	eax, [ebp+var_3C]
		mov	[ebp+var_3C], eax
		cmp	[ebp+var_30], 0
		jge	short loc_2017
		mov	[ebp+var_24], 0FFFFFFFFh
		jmp	short loc_2032
; ---------------------------------------------------------------------------

loc_2017:				; CODE XREF: _u_scanf_parse_56+1A8j
		mov	eax, [ebp+var_24]
		add	eax, [ebp+var_30]
		mov	[ebp+var_24], eax
		mov	eax, [ebp+var_18]
		mov	ecx, [ebp+var_C]
		lea	edx, [ecx+eax*2-2]
		mov	[ebp+var_C], edx

loc_202D:				; CODE XREF: _u_scanf_parse_56+C7j
					; _u_scanf_parse_56+16Bj
		jmp	loc_1EA7
; ---------------------------------------------------------------------------

loc_2032:				; CODE XREF: _u_scanf_parse_56:loc_1EF5j
					; _u_scanf_parse_56+F4j ...
		mov	eax, [ebp+var_24]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN26
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4
		add	esp, 154h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_parse_56 endp

; ---------------------------------------------------------------------------
$LN26		dd 4			; DATA XREF: _u_scanf_parse_56+1D5o
		dd offset $LN25_0
$LN25_0		dd 0FFFFFFE8h, 4	; DATA XREF: .text:00002068o
		dd offset $LN21_1	; "count"
		dd 0FFFFFFD0h, 4
		dd offset $LN22_1	; "argConsumed"
		dd 0FFFFFFA8h, 8
		dd offset $LN23_1	; "args"
		dd 0FFFFFF8Ch, 14h
		dd offset $LN24_1	; "spec"
$LN24_1		db 'spec',0             ; DATA XREF: .text:00002098o
$LN23_1		db 'args',0             ; DATA XREF: .text:0000208Co
$LN22_1		db 'argConsumed',0      ; DATA XREF: .text:00002080o
$LN21_1		db 'count',0            ; DATA XREF: .text:00002074o
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 20B8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_u_scanf_parse_spec proc near		; CODE XREF: _u_scanf_parse_56+9Ep

var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0ECh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_EC]
		mov	ecx, 3Bh ; ';'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_20], eax
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax+10h], 0FFFFFFFFh
		mov	eax, [ebp+var_20]
		mov	dword ptr [eax], 0FFFFFFFFh
		xor	eax, eax
		mov	ecx, [ebp+var_20]
		mov	[ecx+4], ax
		mov	eax, 20h ; ' '
		mov	ecx, [ebp+var_20]
		mov	[ecx+6], ax
		mov	eax, [ebp+var_20]
		mov	byte ptr [eax+8], 0
		mov	eax, [ebp+var_20]
		mov	byte ptr [eax+9], 0
		mov	eax, [ebp+var_20]
		mov	byte ptr [eax+0Ah], 0
		mov	eax, [ebp+var_20]
		mov	byte ptr [eax+0Bh], 0
		mov	eax, [ebp+var_20]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [ebp+var_20]
		mov	byte ptr [eax+0Dh], 1
		mov	eax, [ebp+var_8]
		add	eax, 2
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_21AF
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_21AF
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_21AF
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_21AF
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_21AF
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_21AF
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_21AF
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_21AF
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_21AF
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	loc_2306

loc_21AF:				; CODE XREF: _u_scanf_parse_spec+8Ej
					; _u_scanf_parse_spec+99j ...
		mov	eax, [ebp+var_8]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_2227
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_2227
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_2227
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_2227
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_2227
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_2227
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_2227
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_2227
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_2227
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	loc_22E0

loc_2227:				; CODE XREF: _u_scanf_parse_spec+106j
					; _u_scanf_parse_spec+111j ...
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		sub	ecx, 30h ; '0'
		mov	edx, [ebp+arg_4]
		mov	[edx+10h], ecx
		mov	eax, [ebp+var_8]
		add	eax, 2
		mov	[ebp+var_8], eax

loc_223F:				; CODE XREF: _u_scanf_parse_spec+223j
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_22AD
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_22AD
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_22AD
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_22AD
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_22AD
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_22AD
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_22AD
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_22AD
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_22AD
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	short loc_22E0

loc_22AD:				; CODE XREF: _u_scanf_parse_spec+190j
					; _u_scanf_parse_spec+19Bj ...
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+10h]
		imul	ecx, 0Ah
		mov	edx, [ebp+arg_4]
		mov	[edx+10h], ecx
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+10h]
		lea	ecx, [ecx+eax-30h]
		mov	edx, [ebp+arg_4]
		mov	[edx+10h], ecx
		mov	eax, [ebp+var_8]
		add	eax, 2
		mov	[ebp+var_8], eax
		jmp	loc_223F
; ---------------------------------------------------------------------------

loc_22E0:				; CODE XREF: _u_scanf_parse_spec+169j
					; _u_scanf_parse_spec+1F3j
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 24h ; '$'
		jz	short loc_22FD
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax+10h], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	[ebp+var_8], eax
		jmp	short loc_2306
; ---------------------------------------------------------------------------

loc_22FD:				; CODE XREF: _u_scanf_parse_spec+231j
		mov	eax, [ebp+var_8]
		add	eax, 2
		mov	[ebp+var_8], eax

loc_2306:				; CODE XREF: _u_scanf_parse_spec+F1j
					; _u_scanf_parse_spec+243j ...
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 2Ah ; '*'
		jz	short loc_2320
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 28h ; '('
		jnz	loc_244A

loc_2320:				; CODE XREF: _u_scanf_parse_spec+257j
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		mov	[ebp+var_E8], ecx
		mov	edx, [ebp+var_8]
		add	edx, 2
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_E8]
		mov	[ebp+var_EC], eax
		cmp	[ebp+var_EC], 28h ; '('
		jz	short loc_2364
		cmp	[ebp+var_EC], 2Ah ; '*'
		jz	short loc_2358
		jmp	loc_2445
; ---------------------------------------------------------------------------

loc_2358:				; CODE XREF: _u_scanf_parse_spec+299j
		mov	eax, [ebp+var_20]
		mov	byte ptr [eax+8], 1
		jmp	loc_2445
; ---------------------------------------------------------------------------

loc_2364:				; CODE XREF: _u_scanf_parse_spec+290j
		mov	eax, [ebp+var_8]
		mov	cx, [eax]
		mov	word ptr [ebp+var_E8+2], cx
		mov	edx, [ebp+var_8]
		add	edx, 2
		mov	[ebp+var_8], edx
		movzx	eax, word ptr [ebp+var_E8+2]
		push	eax
		call	_ufmt_digitvalue_56
		add	esp, 4
		mov	ecx, [ebp+var_20]
		mov	[ecx+6], ax
		mov	eax, [ebp+var_8]
		mov	cx, [eax]
		mov	word ptr [ebp+var_E8+2], cx
		mov	edx, [ebp+var_8]
		add	edx, 2
		mov	[ebp+var_8], edx
		movzx	eax, word ptr [ebp+var_E8+2]
		push	eax
		call	_ufmt_digitvalue_56
		add	esp, 4
		mov	ecx, [ebp+var_20]
		movzx	edx, word ptr [ecx+6]
		shl	edx, 4
		add	edx, eax
		mov	eax, [ebp+var_20]
		mov	[eax+6], dx
		mov	eax, [ebp+var_8]
		mov	cx, [eax]
		mov	word ptr [ebp+var_E8+2], cx
		mov	edx, [ebp+var_8]
		add	edx, 2
		mov	[ebp+var_8], edx
		movzx	eax, word ptr [ebp+var_E8+2]
		push	eax
		call	_ufmt_digitvalue_56
		add	esp, 4
		mov	ecx, [ebp+var_20]
		movzx	edx, word ptr [ecx+6]
		shl	edx, 4
		add	edx, eax
		mov	eax, [ebp+var_20]
		mov	[eax+6], dx
		mov	eax, [ebp+var_8]
		mov	cx, [eax]
		mov	word ptr [ebp+var_E8+2], cx
		mov	edx, [ebp+var_8]
		add	edx, 2
		mov	[ebp+var_8], edx
		movzx	eax, word ptr [ebp+var_E8+2]
		push	eax
		call	_ufmt_digitvalue_56
		add	esp, 4
		mov	ecx, [ebp+var_20]
		movzx	edx, word ptr [ecx+6]
		shl	edx, 4
		add	edx, eax
		mov	eax, [ebp+var_20]
		mov	[eax+6], dx
		mov	eax, [ebp+var_8]
		add	eax, 2
		mov	[ebp+var_8], eax

loc_2445:				; CODE XREF: _u_scanf_parse_spec+29Bj
					; _u_scanf_parse_spec+2A7j
		jmp	loc_2306
; ---------------------------------------------------------------------------

loc_244A:				; CODE XREF: _u_scanf_parse_spec+262j
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_24BC
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_24BC
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_24BC
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_24BC
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_24BC
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_24BC
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_24BC
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_24BC
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_24BC
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	loc_2570

loc_24BC:				; CODE XREF: _u_scanf_parse_spec+39Bj
					; _u_scanf_parse_spec+3A6j ...
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		sub	ecx, 30h ; '0'
		mov	edx, [ebp+var_20]
		mov	[edx], ecx
		mov	eax, [ebp+var_8]
		add	eax, 2
		mov	[ebp+var_8], eax

loc_24D3:				; CODE XREF: _u_scanf_parse_spec+4B3j
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 30h ; '0'
		jz	short loc_2541
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 31h ; '1'
		jz	short loc_2541
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 32h ; '2'
		jz	short loc_2541
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 33h ; '3'
		jz	short loc_2541
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 34h ; '4'
		jz	short loc_2541
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 35h ; '5'
		jz	short loc_2541
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 36h ; '6'
		jz	short loc_2541
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 37h ; '7'
		jz	short loc_2541
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 38h ; '8'
		jz	short loc_2541
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 39h ; '9'
		jnz	short loc_2570

loc_2541:				; CODE XREF: _u_scanf_parse_spec+424j
					; _u_scanf_parse_spec+42Fj ...
		mov	eax, [ebp+var_20]
		mov	ecx, [eax]
		imul	ecx, 0Ah
		mov	edx, [ebp+var_20]
		mov	[edx], ecx
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		mov	edx, [ebp+var_20]
		mov	eax, [edx]
		lea	ecx, [ecx+eax-30h]
		mov	edx, [ebp+var_20]
		mov	[edx], ecx
		mov	eax, [ebp+var_8]
		add	eax, 2
		mov	[ebp+var_8], eax
		jmp	loc_24D3
; ---------------------------------------------------------------------------

loc_2570:				; CODE XREF: _u_scanf_parse_spec+3FEj
					; _u_scanf_parse_spec+487j
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 68h ; 'h'
		jz	short loc_2591
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 6Ch ; 'l'
		jz	short loc_2591
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 4Ch ; 'L'
		jnz	short loc_2605

loc_2591:				; CODE XREF: _u_scanf_parse_spec+4C1j
					; _u_scanf_parse_spec+4CCj
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		mov	[ebp+var_E8], ecx
		mov	edx, [ebp+var_8]
		add	edx, 2
		mov	[ebp+var_8], edx
		mov	eax, [ebp+var_E8]
		mov	[ebp+var_EC], eax
		cmp	[ebp+var_EC], 4Ch ; 'L'
		jz	short loc_25FE
		cmp	[ebp+var_EC], 68h ; 'h'
		jz	short loc_25CF
		cmp	[ebp+var_EC], 6Ch ; 'l'
		jz	short loc_25D8
		jmp	short loc_2605
; ---------------------------------------------------------------------------

loc_25CF:				; CODE XREF: _u_scanf_parse_spec+50Aj
		mov	eax, [ebp+var_20]
		mov	byte ptr [eax+0Ah], 1
		jmp	short loc_2605
; ---------------------------------------------------------------------------

loc_25D8:				; CODE XREF: _u_scanf_parse_spec+513j
		mov	eax, [ebp+var_8]
		movzx	ecx, word ptr [eax]
		cmp	ecx, 6Ch ; 'l'
		jnz	short loc_25F5
		mov	eax, [ebp+var_20]
		mov	byte ptr [eax+0Ch], 1
		mov	eax, [ebp+var_8]
		add	eax, 2
		mov	[ebp+var_8], eax
		jmp	short loc_25FC
; ---------------------------------------------------------------------------

loc_25F5:				; CODE XREF: _u_scanf_parse_spec+529j
		mov	eax, [ebp+var_20]
		mov	byte ptr [eax+0Bh], 1

loc_25FC:				; CODE XREF: _u_scanf_parse_spec+53Bj
		jmp	short loc_2605
; ---------------------------------------------------------------------------

loc_25FE:				; CODE XREF: _u_scanf_parse_spec+501j
		mov	eax, [ebp+var_20]
		mov	byte ptr [eax+9], 1

loc_2605:				; CODE XREF: _u_scanf_parse_spec+4D7j
					; _u_scanf_parse_spec+515j ...
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_8]
		mov	dx, [ecx]
		mov	[eax+4], dx
		mov	eax, [ebp+var_8]
		add	eax, 2
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		sub	eax, [ebp+arg_0]
		sar	eax, 1
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0ECh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_u_scanf_parse_spec endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _u_fgetc_56:near	; CODE XREF: _u_scanf_simple_percent_handler+2Bp
					; _u_scanf_parse_56+5Cp
		extrn __RTC_CheckEsp:near ; CODE XREF: _u_scanf_simple_percent_handler+54p
					; _u_scanf_double_handler+184p	...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn _unum_parseDouble_56:near	; CODE XREF: _u_scanf_double_handler+E3p
					; _u_scanf_scientific_handler+181p ...
		extrn _u_locbund_getNumberFormat_56:near
					; CODE XREF: _u_scanf_double_handler+9Ap
					; _u_scanf_scientific_handler+A4p ...
		extrn _ufile_fill_uchar_buffer_56:near
					; CODE XREF: _u_scanf_double_handler+47p
					; _u_scanf_scientific_handler+51p ...
		extrn __fltused:near
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _u_scanf_double_handler+172p
					; _u_scanf_skip_leading_ws+91p	...
		extrn _u_fungetc_56:near ; CODE	XREF: _u_scanf_skip_leading_ws+7Cp
					; _u_scanf_skip_leading_positive_sign+AEp ...
		extrn _u_isWhitespace_56:near ;	CODE XREF: _u_scanf_skip_leading_ws+51p
					; _u_scanf_string_handler+116p	...
		extrn _ufile_getch_56:near ; CODE XREF:	_u_scanf_skip_leading_ws+2Dp
					; _u_scanf_skip_leading_positive_sign+67p ...
		extrn _unum_getSymbol_56:near
					; CODE XREF: _u_scanf_skip_leading_positive_sign+4Ep
					; _u_scanf_scientific_handler+CCp
		extrn ___security_cookie:near
					; DATA XREF: _u_scanf_skip_leading_positive_sign+1Er
					; _u_scanf_scientific_handler+1Er ...
		extrn @__security_check_cookie@4:near
					; CODE XREF: _u_scanf_skip_leading_positive_sign+D2p
					; _u_scanf_scientific_handler+21Fp ...
		extrn _unum_setSymbol_56:near ;	CODE XREF: _u_scanf_scientific_handler+148p
		extrn _u_strToUpper_56:near ; CODE XREF: _u_scanf_scientific_handler+128p
		extrn _u_strToLower_56:near ; CODE XREF: _u_scanf_scientific_handler+FFp
		extrn _unum_parseInt64_56:near ; CODE XREF: _u_scanf_integer_handler+EBp
		extrn _u_releaseDefaultConverter_56:near
					; CODE XREF: _u_scanf_string_handler+19Fp
					; _u_scanf_string_handler+21Ep
		extrn _ucnv_fromUnicode_56:near	; CODE XREF: _u_scanf_string_handler+18Dp
		extrn _ucnv_getMaxCharSize_56:near ; CODE XREF:	_u_scanf_string_handler+15Dp
		extrn _u_getDefaultConverter_56:near
					; CODE XREF: _u_scanf_string_handler+72p
		extrn __RTC_UninitUse:near ; CODE XREF:	_u_scanf_string_handler+E0p
					; _u_scanf_string_handler+109p	...
		extrn _ufmt_uto64_56:near ; CODE XREF: _u_scanf_hex_handler+DCp
					; _u_scanf_octal_handler+98p
		extrn _ufmt_utop_56:near ; CODE	XREF: _u_scanf_pointer_handler+A3p
		extrn _uset_close_56:near ; CODE XREF: _u_scanf_scanset_handler+1CBp
		extrn _uset_contains_56:near ; CODE XREF: _u_scanf_scanset_handler+C3p
		extrn _ufile_getch32_56:near ; CODE XREF: _u_scanf_scanset_handler+A4p
		extrn _uset_applyPattern_56:near ; CODE	XREF: _u_scanf_scanset_handler+74p
		extrn _uset_open_56:near ; CODE	XREF: _u_scanf_scanset_handler+40p
		extrn _u_feof_56:near	; CODE XREF: _u_scanf_parse_56+E5p
		extrn _ufmt_digitvalue_56:near ; CODE XREF: _u_scanf_parse_spec+2CAp
					; _u_scanf_parse_spec+2F7p ...


		end
