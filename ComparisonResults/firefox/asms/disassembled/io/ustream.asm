;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	91FD5EF237C892D82795F3872C6976D4
; Input	CRC32 :	FE12A461

; File Name   :	D:\compspace\objfiles\firefox\io\ustream.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		public ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
; public: static bool const std::tr1::integral_constant<bool, 0>::value
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	db 0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 4
		public ?value@?$integral_constant@_N$00@tr1@std@@2_NB
; public: static bool const std::tr1::integral_constant<bool, 1>::value
?value@?$integral_constant@_N$00@tr1@std@@2_NB db 1
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8
		public ?value@?$integral_constant@I$0A@@tr1@std@@2IB
; public: static unsigned int const std::tr1::integral_constant<unsigned int, 0>::value
?value@?$integral_constant@I$0A@@tr1@std@@2IB dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0Ch
		public ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
; public: static int const std::_Arithmetic_traits<bool>::_Rank
?_Rank@?$_Arithmetic_traits@_N@std@@2HB	dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10h
		public ?_Rank@?$_Arithmetic_traits@D@std@@2HB
; public: static int const std::_Arithmetic_traits<char>::_Rank
?_Rank@?$_Arithmetic_traits@D@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14h
		public ?_Rank@?$_Arithmetic_traits@C@std@@2HB
; public: static int const std::_Arithmetic_traits<signed char>::_Rank
?_Rank@?$_Arithmetic_traits@C@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18h
		public ?_Rank@?$_Arithmetic_traits@E@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned char>::_Rank
?_Rank@?$_Arithmetic_traits@E@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1Ch
		public ?_Rank@?$_Arithmetic_traits@F@std@@2HB
; public: static int const std::_Arithmetic_traits<short>::_Rank
?_Rank@?$_Arithmetic_traits@F@std@@2HB dd 3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 20h
		public ?_Rank@?$_Arithmetic_traits@G@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned short>::_Rank
?_Rank@?$_Arithmetic_traits@G@std@@2HB dd 3
					; DATA XREF: .rdata:int	const std::_Locbase<int>::messageso
					; .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::showposo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 24h
		public ?_Rank@?$_Arithmetic_traits@H@std@@2HB
; public: static int const std::_Arithmetic_traits<int>::_Rank
?_Rank@?$_Arithmetic_traits@H@std@@2HB dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 28h
		public ?_Rank@?$_Arithmetic_traits@I@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned int>::_Rank
?_Rank@?$_Arithmetic_traits@I@std@@2HB dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2Ch
		public ?_Rank@?$_Arithmetic_traits@J@std@@2HB
; public: static int const std::_Arithmetic_traits<long>::_Rank
?_Rank@?$_Arithmetic_traits@J@std@@2HB dd 5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 30h
		public ?_Rank@?$_Arithmetic_traits@K@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned long>::_Rank
?_Rank@?$_Arithmetic_traits@K@std@@2HB dd 5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 34h
		public ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
; public: static int const std::_Arithmetic_traits<__int64>::_Rank
?_Rank@?$_Arithmetic_traits@_J@std@@2HB	dd 6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 38h
		public ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned __int64>::_Rank
?_Rank@?$_Arithmetic_traits@_K@std@@2HB	dd 6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3Ch
		public ?_Rank@?$_Arithmetic_traits@M@std@@2HB
; public: static int const std::_Arithmetic_traits<float>::_Rank
?_Rank@?$_Arithmetic_traits@M@std@@2HB dd 7
					; DATA XREF: .rdata:int	const std::_Locbase<int>::allo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 40h
		public ?_Rank@?$_Arithmetic_traits@N@std@@2HB
; public: static int const std::_Arithmetic_traits<double>::_Rank
?_Rank@?$_Arithmetic_traits@N@std@@2HB dd 8
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::lefto
					; .rdata:std::_Iosb<int>::_Openmode const std::_Iosb<int>::_Nocreateo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 44h
		public ?_Rank@?$_Arithmetic_traits@O@std@@2HB
; public: static int const std::_Arithmetic_traits<long	double>::_Rank
?_Rank@?$_Arithmetic_traits@O@std@@2HB dd 9
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 48h
		public ?collate@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::collate
?collate@?$_Locbase@H@std@@2HB dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4Ch
		public ?ctype@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::ctype
?ctype@?$_Locbase@H@std@@2HB dd	2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 50h
		public ?monetary@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::monetary
?monetary@?$_Locbase@H@std@@2HB	dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 54h
		public ?numeric@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::numeric
?numeric@?$_Locbase@H@std@@2HB dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 58h
		public ?time@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::time
?time@?$_Locbase@H@std@@2HB dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5Ch
		public ?messages@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::messages
?messages@?$_Locbase@H@std@@2HB	dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 60h
		public ?all@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::all
?all@?$_Locbase@H@std@@2HB dd offset ?_Rank@?$_Arithmetic_traits@M@std@@2HB+3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 64h
		public ?none@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::none
?none@?$_Locbase@H@std@@2HB dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 68h
		public ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::skipws
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6Ch
		public ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::unitbuf
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 70h
		public ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::uppercase
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 74h
		public ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showbase
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 78h
		public ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showpoint
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7Ch
		public ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showpos
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 80h
		public ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::left
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::righto
					; .rdata:std::_Iosb<int>::_Openmode const std::_Iosb<int>::_Noreplaceo
_rdata		ends			; int const std::_Arithmetic_traits<double>::_Rank

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 84h
		public ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::right
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B	dd offset ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B ; std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::left
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 88h
		public ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::internal
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset loc_FB+5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8Ch
		public ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::dec
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_1FF+1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 90h
		public ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::oct
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_3FF+1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 94h
		public ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::hex
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_7FC+4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 98h
		public ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::scientific
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd	offset loc_FFB+5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9Ch
		public ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::fixed
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B	dd 2000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A0h
		public ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::hexfloat
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 3000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A4h
		public ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::boolalpha
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 4000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A8h
		public ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::_Stdio
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 8000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ACh
		public ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::adjustfield
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_1BF+1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B0h
		public ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::basefield
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset loc_DFC+4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B4h
		public ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::floatfield
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd	3000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B8h
		public ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::goodbit
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BCh
		public ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::eofbit
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B	dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C0h
		public ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::failbit
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C4h
		public ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::badbit
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B	dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C8h
		public ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::_Hardfail
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CCh
		public ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::in
?in@?$_Iosb@H@std@@2W4_Openmode@12@B dd	1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D0h
		public ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::out
?out@?$_Iosb@H@std@@2W4_Openmode@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D4h
		public ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::ate
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D8h
		public ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::app
?app@?$_Iosb@H@std@@2W4_Openmode@12@B dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0DCh
		public ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::trunc
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B	dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E0h
		public ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::_Nocreate
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E4h
		public ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::_Noreplace
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B dd	offset ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B ;	std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::left
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E8h
		public ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::binary
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int	const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ECh
		public ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::beg
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F0h
		public ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::cur
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F4h
		public ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::end
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	2
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0F8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int)
		public ??2@YAPAXI@Z
??2@YAPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp

loc_FB:					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::internalo
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??2@YAPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 130h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 134h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 138h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX@Z
??3@YAXPAX@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??3@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 16Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl icu_56::operator<<(int, icu_56::UnicodeString *)
		public ??6icu_56@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVUnicodeString@0@@Z
??6icu_56@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVUnicodeString@0@@Z proc near

var_1DC		= byte ptr -1DCh
var_118		= dword	ptr -118h
var_10C		= dword	ptr -10Ch
var_100		= dword	ptr -100h
var_F4		= dword	ptr -0F4h
var_E8		= dword	ptr -0E8h
var_DC		= dword	ptr -0DCh
Str		= byte ptr -0D0h
var_9		= byte ptr -9
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 1DCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_1DC]
		mov	ecx, 77h ; 'w'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_4] ; this
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jle	loc_2BD
		mov	[ebp+var_E8], 0
		lea	eax, [ebp+var_E8]
		push	eax

loc_1BF:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::adjustfieldo
		call	_u_getDefaultConverter_56
		add	esp, 4
		mov	[ebp+var_DC], eax
		mov	eax, [ebp+var_E8]
		push	eax
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	ecx, al
		test	ecx, ecx
		jz	loc_2BD
		mov	esi, esp
		mov	ecx, [ebp+arg_4] ; this
		call	dword ptr ds:__imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ ;	icu_56::UnicodeString::getBuffer(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_F4], eax

loc_1FF:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::deco
		mov	esi, esp
		mov	ecx, [ebp+arg_4] ; this
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_F4]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_100], edx
		lea	eax, [ebp+var_9]
		mov	[ebp+var_118], eax

loc_229:				; CODE XREF: icu_56::operator<<(std::basic_ostream<char,std::char_traits<char>>	&,icu_56::UnicodeString	const &)+13Cj
		mov	[ebp+var_E8], 0
		lea	eax, [ebp+Str]
		mov	[ebp+var_10C], eax
		lea	eax, [ebp+var_E8]
		push	eax
		push	0
		push	0
		mov	ecx, [ebp+var_100]
		push	ecx
		lea	edx, [ebp+var_F4]
		push	edx
		mov	eax, [ebp+var_118]
		push	eax
		lea	ecx, [ebp+var_10C]
		push	ecx
		mov	edx, [ebp+var_DC]
		push	edx
		call	_ucnv_fromUnicode_56
		add	esp, 20h
		mov	eax, [ebp+var_10C]
		mov	byte ptr [eax],	0
		mov	eax, [ebp+var_10C]
		lea	ecx, [ebp+Str]
		cmp	eax, ecx
		jbe	short loc_2A1
		lea	eax, [ebp+Str]
		push	eax		; Str
		mov	ecx, [ebp+arg_0]
		push	ecx		; int
		call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
		add	esp, 8

loc_2A1:				; CODE XREF: icu_56::operator<<(std::basic_ostream<char,std::char_traits<char>>	&,icu_56::UnicodeString	const &)+120j
		cmp	[ebp+var_E8], 0Fh
		jz	loc_229
		mov	eax, [ebp+var_DC]
		push	eax
		call	_u_releaseDefaultConverter_56
		add	esp, 4

loc_2BD:				; CODE XREF: icu_56::operator<<(std::basic_ostream<char,std::char_traits<char>>	&,icu_56::UnicodeString	const &)+3Cj
					; icu_56::operator<<(std::basic_ostream<char,std::char_traits<char>> &,icu_56::UnicodeString const &)+75j
		mov	eax, [ebp+arg_0]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN14
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1DCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??6icu_56@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVUnicodeString@0@@Z endp

; ---------------------------------------------------------------------------
		align 10h
$LN14		dd 4			; DATA XREF: icu_56::operator<<(std::basic_ostream<char,std::char_traits<char>>	&,icu_56::UnicodeString	const &)+158o
		dd offset $LN13
$LN13		dd 0FFFFFF30h, 0C8h	; DATA XREF: .text:000002F4o
		dd offset $LN9		; "buffer"
		dd 0FFFFFF18h, 4
		dd offset $LN10		; "errorCode"
		dd 0FFFFFF0Ch, 4
		dd offset $LN11
		dd 0FFFFFEF4h, 4
		dd offset $LN12
$LN12		db 73h,	0		; DATA XREF: .text:00000324o
$LN11		dw 7375h		; DATA XREF: .text:00000318o
		db 0
$LN10		db 'errorCode',0        ; DATA XREF: .text:0000030Co
$LN9		db 'buffer',0           ; DATA XREF: .text:00000300o
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 340h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl U_SUCCESS(enum  UErrorCode)
?U_SUCCESS@@YACW4UErrorCode@@@Z	proc near
					; CODE XREF: icu_56::operator<<(std::basic_ostream<char,std::char_traits<char>>	&,icu_56::UnicodeString	const &)+68p
					; icu_56::operator>>(std::basic_istream<char,std::char_traits<char>> &,icu_56::UnicodeString &)+74p

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		setle	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?U_SUCCESS@@YACW4UErrorCode@@@Z	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 36Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl icu_56::operator>>(int, icu_56::UnicodeString *)
		public ??5icu_56@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVUnicodeString@0@@Z
??5icu_56@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVUnicodeString@0@@Z proc near

var_1AC		= byte ptr -1ACh
var_E8		= word ptr -0E8h
var_DC		= dword	ptr -0DCh
var_D0		= dword	ptr -0D0h
var_C1		= byte ptr -0C1h
var_B5		= byte ptr -0B5h
var_AC		= word ptr -0ACh
var_9D		= byte ptr -9Dh
var_94		= dword	ptr -94h
var_88		= dword	ptr -88h
var_7C		= dword	ptr -7Ch
var_70		= dword	ptr -70h
var_64		= dword	ptr -64h
var_58		= dword	ptr -58h
var_4C		= dword	ptr -4Ch
var_40		= byte ptr -40h
var_28		= word ptr -28h
var_8		= byte ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 1ACh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_1AC]
		mov	ecx, 6Bh ; 'k'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx	; this
		call	dword ptr ds:__imp_?fail@ios_base@std@@QBE_NXZ ; std::ios_base::fail(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		movzx	eax, al
		test	eax, eax
		jz	short loc_3BF
		mov	eax, [ebp+arg_0]
		jmp	loc_6DE
; ---------------------------------------------------------------------------

loc_3BF:				; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+49j
		mov	[ebp+var_4C], 0
		mov	[ebp+var_64], 0
		lea	eax, [ebp+var_64]
		push	eax
		call	_u_getDefaultConverter_56
		add	esp, 4
		mov	[ebp+var_58], eax
		mov	eax, [ebp+var_64]
		push	eax
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	ecx, al
		test	ecx, ecx
		jz	loc_6DB
		lea	eax, [ebp+var_28]
		mov	[ebp+var_70], eax
		lea	eax, [ebp+var_8]
		mov	[ebp+var_7C], eax

loc_3FF:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::octo
		mov	[ebp+var_B5], 1
		mov	[ebp+var_C1], 1

loc_40D:				; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&):loc_6CAj
		movsx	eax, [ebp+var_C1]
		test	eax, eax
		jz	$STOP_READING$35851
		mov	esi, esp
		mov	ecx, [ebp+arg_0]
		call	dword ptr ds:__imp_?get@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_istream<char,std::char_traits<char>>::get(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_9D], al
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx	; this
		call	dword ptr ds:__imp_?eof@ios_base@std@@QBE_NXZ ;	std::ios_base::eof(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		movzx	eax, al
		test	eax, eax
		jz	short loc_489
		movsx	eax, [ebp+var_B5]
		test	eax, eax
		jnz	short loc_482
		mov	esi, esp
		push	0
		push	1
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	ecx, edx
		call	dword ptr ds:__imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::clear(int,bool)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_482:				; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+F4j
		mov	[ebp+var_C1], 0

loc_489:				; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+E9j
		movsx	eax, [ebp+var_C1]
		lea	ecx, [ebp+eax+var_9D]
		mov	[ebp+var_94], ecx
		lea	eax, [ebp+var_28]
		mov	[ebp+var_70], eax
		lea	eax, [ebp+var_9D]
		mov	[ebp+var_88], eax
		mov	[ebp+var_64], 0
		lea	eax, [ebp+var_64]
		push	eax
		movsx	ecx, [ebp+var_C1]
		test	ecx, ecx
		setz	dl
		movzx	eax, dl
		push	eax
		push	0
		mov	ecx, [ebp+var_94]
		push	ecx
		lea	edx, [ebp+var_88]
		push	edx
		mov	eax, [ebp+var_7C]
		push	eax
		lea	ecx, [ebp+var_70]
		push	ecx
		mov	edx, [ebp+var_58]
		push	edx
		call	_ucnv_toUnicode_56
		add	esp, 20h
		mov	eax, [ebp+var_64]
		push	eax
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	ecx, al
		test	ecx, ecx
		jz	short loc_52B
		mov	esi, esp
		push	0
		push	2
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	ecx, edx
		call	dword ptr ds:__imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::clear(int,bool)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	$STOP_READING$35851
; ---------------------------------------------------------------------------
		jmp	$STOP_READING$35851
; ---------------------------------------------------------------------------

loc_52B:				; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+193j
		mov	eax, [ebp+var_70]
		lea	ecx, [ebp+var_28]
		cmp	eax, ecx
		jz	loc_6B4
		mov	eax, [ebp+var_70]
		lea	ecx, [ebp+var_28]
		sub	eax, ecx
		sar	eax, 1
		mov	[ebp+var_D0], eax
		mov	[ebp+var_DC], 0

loc_553:				; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&):loc_6A6j
		mov	eax, [ebp+var_DC]
		cmp	eax, [ebp+var_D0]
		jge	loc_6AB
		mov	eax, [ebp+var_DC]
		mov	cx, [ebp+eax*2+var_28]
		mov	[ebp+var_AC], cx
		mov	edx, [ebp+var_DC]
		add	edx, 1
		mov	[ebp+var_DC], edx
		movzx	eax, [ebp+var_AC]
		and	eax, 0FFFFFC00h
		cmp	eax, 0D800h
		jnz	short loc_5FC
		mov	eax, [ebp+var_DC]
		cmp	eax, [ebp+var_D0]
		jz	short loc_5FC
		mov	eax, [ebp+var_DC]
		mov	cx, [ebp+eax*2+var_28]
		mov	[ebp+var_E8], cx
		movzx	edx, [ebp+var_E8]
		and	edx, 0FFFFFC00h
		cmp	edx, 0DC00h
		jnz	short loc_5FC
		mov	eax, [ebp+var_DC]
		add	eax, 1
		mov	[ebp+var_DC], eax
		movzx	eax, [ebp+var_AC]
		shl	eax, 0Ah
		movzx	ecx, [ebp+var_E8]
		lea	edx, [eax+ecx-35FDC00h]
		mov	[ebp+var_AC], dx

loc_5FC:				; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+22Bj
					; icu_56::operator>>(std::basic_istream<char,std::char_traits<char>> &,icu_56::UnicodeString &)+239j ...
		movzx	eax, [ebp+var_AC]
		push	eax
		call	_u_isWhitespace_56
		add	esp, 4
		movsx	ecx, al
		test	ecx, ecx
		jz	short loc_666
		movsx	eax, [ebp+var_B5]
		test	eax, eax
		jnz	short loc_664
		mov	eax, [ebp+var_4C]
		mov	cl, [ebp+var_9D]
		mov	[ebp+eax+var_40], cl
		mov	edx, [ebp+var_4C]
		add	edx, 1
		mov	[ebp+var_4C], edx

loc_634:				; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+2F2j
		cmp	[ebp+var_4C], 0
		jle	short loc_660
		mov	eax, [ebp+var_4C]
		sub	eax, 1
		mov	[ebp+var_4C], eax
		mov	esi, esp
		mov	ecx, [ebp+var_4C]
		movzx	edx, [ebp+ecx+var_40]
		push	edx
		mov	ecx, [ebp+arg_0]
		call	dword ptr ds:__imp_?putback@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z ;	std::basic_istream<char,std::char_traits<char>>::putback(char)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_634
; ---------------------------------------------------------------------------

loc_660:				; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+2CCj
		jmp	short $STOP_READING$35851
; ---------------------------------------------------------------------------
		jmp	short $STOP_READING$35851
; ---------------------------------------------------------------------------

loc_664:				; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+2B0j
		jmp	short loc_6A6
; ---------------------------------------------------------------------------

loc_666:				; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+2A5j
		movsx	eax, [ebp+var_B5]
		test	eax, eax
		jz	short loc_68C
		mov	esi, esp
		push	0		; int
		mov	ecx, [ebp+arg_4] ; this
		call	dword ptr ds:__imp_?truncate@UnicodeString@icu_56@@QAECH@Z ; icu_56::UnicodeString::truncate(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_B5], 0

loc_68C:				; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+303j
		mov	esi, esp
		movzx	eax, [ebp+var_AC]
		push	eax		; wchar_t
		mov	ecx, [ebp+arg_4] ; this
		call	dword ptr ds:__imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z ; icu_56::UnicodeString::append(wchar_t)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_6A6:				; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&):loc_664j
		jmp	loc_553
; ---------------------------------------------------------------------------

loc_6AB:				; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+1F3j
		mov	[ebp+var_4C], 0
		jmp	short loc_6CA
; ---------------------------------------------------------------------------

loc_6B4:				; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+1C7j
		mov	eax, [ebp+var_4C]
		mov	cl, [ebp+var_9D]
		mov	[ebp+eax+var_40], cl
		mov	edx, [ebp+var_4C]
		add	edx, 1
		mov	[ebp+var_4C], edx

loc_6CA:				; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+346j
		jmp	loc_40D
; ---------------------------------------------------------------------------

$STOP_READING$35851:			; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+AAj
					; icu_56::operator>>(std::basic_istream<char,std::char_traits<char>> &,icu_56::UnicodeString &)+1B5j ...
		mov	eax, [ebp+var_58]
		push	eax
		call	_u_releaseDefaultConverter_56
		add	esp, 4

loc_6DB:				; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+81j
		mov	eax, [ebp+arg_0]

loc_6DE:				; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+4Ej
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN31
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1ACh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??5icu_56@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV12@AAVUnicodeString@0@@Z endp

; ---------------------------------------------------------------------------
		align 10h
$LN31		dd 6			; DATA XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+376o
		dd offset $LN30
$LN30		dd 0FFFFFFD8h, 20h	; DATA XREF: .text:00000714o
		dd offset $LN24		; "uBuffer"
		dd 0FFFFFFC0h, 10h
		dd offset $LN25		; "buffer"
		dd 0FFFFFF9Ch, 4
		dd offset $LN26		; "errorCode"
		db 90h
		db 3 dup(0FFh)
		dd 4
		dd offset $LN27
		dd 0FFFFFF78h, 4
		dd offset $LN28
		dd 0FFFFFF63h, 1
		dd offset $LN29
$LN29		db 63h,	68h, 0		; DATA XREF: .text:0000075Co
$LN28		db 73h			; DATA XREF: .text:00000750o
		db 0
$LN27		db 75h,	73h, 0		; DATA XREF: .text:00000744o
$LN26		db 'errorCode',0        ; DATA XREF: .text:00000738o
$LN25		db 'buffer',0           ; DATA XREF: .text:0000072Co
$LN24		db 'uBuffer',0          ; DATA XREF: .text:00000720o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 784h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl U_FAILURE(enum  UErrorCode)
?U_FAILURE@@YACW4UErrorCode@@@Z	proc near
					; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+186p

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		setnle	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?U_FAILURE@@YACW4UErrorCode@@@Z	endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 7B0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl std::operator<<<std::char_traits<char>>(int, char	*Str)
		public ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z proc near
					; CODE XREF: icu_56::operator<<(std::basic_ostream<char,std::char_traits<char>>	&,icu_56::UnicodeString	const &)+12Dp

var_160		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_144		= dword	ptr -144h
var_138		= dword	ptr -138h
var_12C		= dword	ptr -12Ch
var_120		= dword	ptr -120h
var_114		= dword	ptr -114h
var_48		= byte ptr -48h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch

; FUNCTION CHUNK AT 00000BE7 SIZE 00000075 BYTES

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
		mov	eax, large fs:0
		push	eax
		push	ecx
		sub	esp, 150h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_160]
		mov	ecx, 54h ; 'T'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_18], 0
		mov	eax, [ebp+Str]
		push	eax		; Str

loc_7FC:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::hexo
		call	?length@?$char_traits@D@std@@SAIPBD@Z ;	std::char_traits<char>::length(char const *)
		add	esp, 4
		xor	ecx, ecx
		mov	[ebp+var_28], eax
		mov	[ebp+var_24], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx	; this
		call	dword ptr ds:__imp_?width@ios_base@std@@QBE_JXZ	; std::ios_base::width(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_150], eax
		mov	[ebp+var_14C], edx
		cmp	[ebp+var_14C], 0
		jl	short loc_8B6
		jg	short loc_848
		cmp	[ebp+var_150], 0
		jbe	short loc_8B6

loc_848:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+8Dj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx	; this
		call	dword ptr ds:__imp_?width@ios_base@std@@QBE_JXZ	; std::ios_base::width(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_158], eax
		mov	[ebp+var_154], edx
		mov	eax, [ebp+var_154]
		cmp	eax, [ebp+var_24]
		jl	short loc_8B6
		jg	short loc_888
		mov	ecx, [ebp+var_158]
		cmp	ecx, [ebp+var_28]
		jbe	short loc_8B6

loc_888:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+CBj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	ecx, [ebp+arg_0]
		add	ecx, [eax+4]	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?width@ios_base@std@@QBE_JXZ	; std::ios_base::width(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		sub	eax, [ebp+var_28]
		sbb	edx, [ebp+var_24]
		mov	[ebp+var_160], eax
		mov	[ebp+var_15C], edx
		jmp	short loc_8CA
; ---------------------------------------------------------------------------

loc_8B6:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+8Bj
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+96j ...
		mov	[ebp+var_160], 0
		mov	[ebp+var_15C], 0

loc_8CA:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+104j
		mov	ecx, [ebp+var_160]
		mov	[ebp+var_38], ecx
		mov	edx, [ebp+var_15C]
		mov	[ebp+var_34], edx
		mov	eax, [ebp+arg_0]
		push	eax
		lea	ecx, [ebp+var_48]
		call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)
		mov	[ebp+var_4], 0
		lea	ecx, [ebp+var_48]
		call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ; std::basic_ostream<char,std::char_traits<char>>::sentry::operator int std::_Bool_struct::*(void)
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_90A
		mov	eax, [ebp+var_18]
		or	eax, 4
		mov	[ebp+var_18], eax
		jmp	$LN13_0
; ---------------------------------------------------------------------------

loc_90A:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+14Aj
		mov	byte ptr [ebp+var_4], 1
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx	; this
		call	dword ptr ds:__imp_?flags@ios_base@std@@QBEHXZ ; std::ios_base::flags(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14C], eax
		mov	eax, [ebp+var_14C]
		and	eax, 1C0h
		cmp	eax, 40h ; '@'
		jz	loc_A2F
		jmp	short loc_958
; ---------------------------------------------------------------------------

loc_946:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *):loc_A2Aj
		mov	eax, [ebp+var_38]
		sub	eax, 1
		mov	ecx, [ebp+var_34]
		sbb	ecx, 0
		mov	[ebp+var_38], eax
		mov	[ebp+var_34], ecx

loc_958:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+194j
		cmp	[ebp+var_34], 0
		jl	loc_A2F
		jg	short loc_96E
		cmp	[ebp+var_38], 0
		jbe	loc_A2F

loc_96E:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1B2j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx
		call	dword ptr ds:__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char>>::fill(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	byte ptr [ebp+var_14C+3], al
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_150], eax
		mov	esi, esp
		movzx	eax, byte ptr [ebp+var_14C+3]
		push	eax
		mov	ecx, [ebp+var_150]
		call	dword ptr ds:__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_154], eax
		mov	ecx, [ebp+var_154]
		mov	[ebp+var_144], ecx
		call	?eof@?$char_traits@D@std@@SAHXZ	; std::char_traits<char>::eof(void)
		mov	[ebp+var_158], eax
		mov	edx, [ebp+var_158]
		mov	[ebp+var_138], edx
		lea	eax, [ebp+var_144]
		push	eax
		lea	ecx, [ebp+var_138]
		push	ecx
		call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type(int const &,int const &)
		add	esp, 8
		mov	byte ptr [ebp+var_15C+3], al
		movzx	edx, byte ptr [ebp+var_15C+3]
		test	edx, edx
		jz	short loc_A2A
		mov	eax, [ebp+var_18]
		or	eax, 4
		mov	[ebp+var_18], eax
		jmp	short loc_A2F
; ---------------------------------------------------------------------------

loc_A2A:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+26Dj
		jmp	loc_946
; ---------------------------------------------------------------------------

loc_A2F:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+18Ej
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1ACj	...
		cmp	[ebp+var_18], 0
		jnz	short loc_AA3
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14C], eax
		mov	esi, esp
		mov	eax, [ebp+var_24]
		push	eax
		mov	ecx, [ebp+var_28]
		push	ecx
		mov	edx, [ebp+Str]
		push	edx
		mov	ecx, [ebp+var_14C]
		call	dword ptr ds:__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ;	std::basic_streambuf<char,std::char_traits<char>>::sputn(char const *,__int64)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_154], eax
		mov	[ebp+var_150], edx
		mov	eax, [ebp+var_154]
		cmp	eax, [ebp+var_28]
		jnz	short loc_A9A
		mov	ecx, [ebp+var_150]
		cmp	ecx, [ebp+var_24]
		jz	short loc_AA3

loc_A9A:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+2DDj
		mov	eax, [ebp+var_18]
		or	eax, 4
		mov	[ebp+var_18], eax

loc_AA3:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+283j
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+2E8j
		cmp	[ebp+var_18], 0
		jnz	loc_B98
		jmp	short loc_AC1
; ---------------------------------------------------------------------------

loc_AAF:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *):loc_B93j
		mov	eax, [ebp+var_38]
		sub	eax, 1
		mov	ecx, [ebp+var_34]
		sbb	ecx, 0
		mov	[ebp+var_38], eax
		mov	[ebp+var_34], ecx

loc_AC1:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+2FDj
		cmp	[ebp+var_34], 0
		jl	loc_B98
		jg	short loc_AD7
		cmp	[ebp+var_38], 0
		jbe	loc_B98

loc_AD7:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+31Bj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx
		call	dword ptr ds:__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char>>::fill(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	byte ptr [ebp+var_14C+3], al
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_150], eax
		mov	esi, esp
		movzx	eax, byte ptr [ebp+var_14C+3]
		push	eax
		mov	ecx, [ebp+var_150]
		call	dword ptr ds:__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_154], eax
		mov	ecx, [ebp+var_154]
		mov	[ebp+var_12C], ecx
		call	?eof@?$char_traits@D@std@@SAHXZ	; std::char_traits<char>::eof(void)
		mov	[ebp+var_158], eax
		mov	edx, [ebp+var_158]
		mov	[ebp+var_120], edx
		lea	eax, [ebp+var_12C]
		push	eax
		lea	ecx, [ebp+var_120]
		push	ecx
		call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type(int const &,int const &)
		add	esp, 8
		mov	byte ptr [ebp+var_15C+3], al
		movzx	edx, byte ptr [ebp+var_15C+3]
		test	edx, edx
		jz	short loc_B93
		mov	eax, [ebp+var_18]
		or	eax, 4
		mov	[ebp+var_18], eax
		jmp	short loc_B98
; ---------------------------------------------------------------------------

loc_B93:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+3D6j
		jmp	loc_AAF
; ---------------------------------------------------------------------------

loc_B98:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+2F7j
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+315j	...
		mov	esi, esp
		push	0
		push	0		; __int64
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	ecx, edx	; this
		call	dword ptr ds:__imp_?width@ios_base@std@@QAE_J_J@Z ; std::ios_base::width(__int64)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_BE7
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z endp


; =============== S U B	R O U T	I N E =======================================


__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0 proc near
					; DATA XREF: .xdata$x:00000CA8o
		mov	esi, esp
		push	1
		push	4
		mov	eax, [ebp+8]
		mov	ecx, [eax]
		mov	edx, [ebp+8]
		add	edx, [ecx+4]
		mov	ecx, edx
		call	dword ptr ds:__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z	; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	dword ptr [ebp-4], 0
		mov	eax, offset $LN13_0
		retn
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0 endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z

loc_BE7:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+408j
		mov	[ebp+var_4], 0

$LN13_0:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+155j
					; DATA XREF: __catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0+27o
		mov	esi, esp
		push	0
		mov	eax, [ebp+var_18]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	ecx, [ebp+arg_0]
		add	ecx, [edx+4]
		call	dword ptr ds:__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z	; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_114], eax
		mov	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_48]
		call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ;	std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)
		mov	eax, [ebp+var_114]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN33
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 160h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
; END OF FUNCTION CHUNK	FOR ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
; ---------------------------------------------------------------------------
$LN33		dd 1			; DATA XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+480o
		dd offset $LN32
$LN32		dd 0FFFFFFB8h, 8	; DATA XREF: .text:00000C60o
		dd offset $LN30_0
$LN30_0		dd 6B4F5Fh		; DATA XREF: .text:00000C6Co
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 0C74h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2 proc near
					; DATA XREF: .xdata$x:00000CC4o
		lea	ecx, [ebp-48h]
		jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ;	std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z	proc near
					; DATA XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-164h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
		jmp	___CxxFrameHandler3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 0C9Ch
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB
					; DATA XREF: .xdata$x:00000CBCo
					; int const std::_Arithmetic_traits<double>::_Rank
		dd 2 dup(0)
		dd offset __catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z dd 2 dup(1), 2, 1
					; DATA XREF: .xdata$x:00000CE8o
		dd offset __catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00000CE0o
		dd offset __unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
		dd 4 dup(0)
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z dd 19930522h, 3
					; DATA XREF: __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z+14o
		dd offset __unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
		dd 1
		dd offset __tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
		dd 3 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0CFCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl std::char_traits<char>::length(char *Str)
		public ?length@?$char_traits@D@std@@SAIPBD@Z
?length@?$char_traits@D@std@@SAIPBD@Z proc near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *):loc_7FCp

var_C0		= byte ptr -0C0h
Str		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?length@?$char_traits@D@std@@SAIPBD@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0D3Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static bool __cdecl std::char_traits<char>::eq_int_type(int const &, int const &)
		public ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z proc near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+256p
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+3BFp

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	edx, [eax]
		xor	eax, eax
		cmp	edx, [ecx]
		setz	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0D70h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static int __cdecl std::char_traits<char>::eof(void)
		public ?eof@?$char_traits@D@std@@SAHXZ
?eof@?$char_traits@D@std@@SAHXZ	proc near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+231p
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+39Ap

var_C0		= byte ptr -0C0h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		or	eax, 0FFFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?eof@?$char_traits@D@std@@SAHXZ	endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0D98h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::sentry::sentry(class std::basic_ostream<char, struct std::char_traits<char>> &)
		public ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z proc near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+133p

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_14]
		call	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::_Sentry_base(std::basic_ostream<char,std::char_traits<char>>	&)
		mov	[ebp+var_4], 0
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx	; this

loc_DFC:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::basefieldo
		call	dword ptr ds:__imp_?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		movzx	eax, al
		test	eax, eax
		jz	short loc_E5D
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx
		call	dword ptr ds:__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::tie(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_E5D
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx
		call	dword ptr ds:__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::tie(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	ecx, eax
		call	dword ptr ds:__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char>>::flush(void)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_E5D:				; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+76j
					; std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+96j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx	; this
		call	dword ptr ds:__imp_?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		mov	[ecx+4], al
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 0EACh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0 proc near
					; DATA XREF: .xdata$x:00000ED8o
		mov	ecx, [ebp-14h]
		jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::~_Sentry_base(void)
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z	proc near
					; DATA XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0DCh]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 0ED4h
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00000EE4o
		dd offset __unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z+14o
		dd offset __unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0F00h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::sentry::~sentry(void)
		public ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ proc near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+471p
					; __unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2+3j

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
		mov	eax, large fs:0
		push	eax
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	[ebp+var_4], 0
		mov	esi, esp
		call	dword ptr ds:__imp_?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		movzx	eax, al
		test	eax, eax
		jnz	short loc_F73
		mov	esi, esp
		mov	eax, [ebp+var_14]
		mov	ecx, [eax]
		call	dword ptr ds:__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ;	std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_F73:				; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+5Dj
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, [ebp+var_14]
		call	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::~_Sentry_base(void)
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 0FA4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0	proc near
					; DATA XREF: .xdata$x:00000FD0o
		mov	ecx, [ebp-14h]
		jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::~_Sentry_base(void)
__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0	endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ proc near
					; DATA XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0DCh]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 0FCCh
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00000FDCo
		dd offset __unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ dd 19930522h, 1
					; DATA XREF: __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ+14o
		dd offset __unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0FF8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::sentry::operator int std::_Bool_struct::*(void)const
		public ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ proc near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+142p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp

loc_FFB:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::scientifico
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		movzx	eax, byte ptr [eax+4]
		neg	eax
		sbb	eax, eax
		neg	eax
		sub	eax, 1
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1034h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::_Sentry_base::_Sentry_base(class std::basic_ostream<char,	struct std::char_traits<char>> &)
		public ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z proc near
					; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+49p

var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax]
		mov	edx, [ecx]
		mov	eax, [ebp+var_8]
		mov	ecx, [eax]
		add	ecx, [edx+4]
		mov	esi, esp
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_10C1
		mov	eax, [ebp+var_8]
		mov	ecx, [eax]
		mov	edx, [ecx]
		mov	eax, [ebp+var_8]
		mov	ecx, [eax]
		add	ecx, [edx+4]
		mov	esi, esp
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_D0], eax
		mov	ecx, [ebp+var_D0]
		mov	edx, [ecx]
		mov	esi, esp
		mov	ecx, [ebp+var_D0]
		mov	eax, [edx+4]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_10C1:				; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::_Sentry_base(std::basic_ostream<char,std::char_traits<char>> &)+4Bj
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10DCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::_Sentry_base::~_Sentry_base(void)
		public ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ proc near
					; CODE XREF: __unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0+3j
					; std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+7Dp ...

var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax]
		mov	edx, [ecx]
		mov	eax, [ebp+var_8]
		mov	ecx, [eax]
		add	ecx, [edx+4]
		mov	esi, esp
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_1161
		mov	eax, [ebp+var_8]
		mov	ecx, [eax]
		mov	edx, [ecx]
		mov	eax, [ebp+var_8]
		mov	ecx, [eax]
		add	ecx, [edx+4]
		mov	esi, esp
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_D0], eax
		mov	ecx, [ebp+var_D0]
		mov	edx, [ecx]
		mov	esi, esp
		mov	ecx, [ebp+var_D0]
		mov	eax, [edx+8]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1161:				; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::~_Sentry_base(void)+43j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn _u_releaseDefaultConverter_56:near
					; CODE XREF: icu_56::operator<<(std::basic_ostream<char,std::char_traits<char>>	&,icu_56::UnicodeString	const &)+149p
					; icu_56::operator>>(std::basic_istream<char,std::char_traits<char>> &,icu_56::UnicodeString &)+367p
		extrn _ucnv_fromUnicode_56:near
					; CODE XREF: icu_56::operator<<(std::basic_ostream<char,std::char_traits<char>>	&,icu_56::UnicodeString	const &)+101p
; const	wchar_t	*__thiscall icu_56::UnicodeString::getBuffer(icu_56::UnicodeString *__hidden this)
		extrn __imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ:near
					; CODE XREF: icu_56::operator<<(std::basic_ostream<char,std::char_traits<char>>	&,icu_56::UnicodeString	const &)+80p
					; DATA XREF: icu_56::operator<<(std::basic_ostream<char,std::char_traits<char>>	&,icu_56::UnicodeString	const &)+80r
		extrn _u_getDefaultConverter_56:near
					; CODE XREF: icu_56::operator<<(std::basic_ostream<char,std::char_traits<char>>	&,icu_56::UnicodeString	const &):loc_1BFp
					; icu_56::operator>>(std::basic_istream<char,std::char_traits<char>> &,icu_56::UnicodeString &)+65p
; int __thiscall icu_56::UnicodeString::length(icu_56::UnicodeString *__hidden this)
		extrn __imp_?length@UnicodeString@icu_56@@QBEHXZ:near
					; CODE XREF: icu_56::operator<<(std::basic_ostream<char,std::char_traits<char>>	&,icu_56::UnicodeString	const &)+2Dp
					; icu_56::operator<<(std::basic_ostream<char,std::char_traits<char>> &,icu_56::UnicodeString const &)+98p
					; DATA XREF: ...
		extrn ___security_cookie:near
					; DATA XREF: icu_56::operator<<(std::basic_ostream<char,std::char_traits<char>>	&,icu_56::UnicodeString	const &)+1Er
					; icu_56::operator>>(std::basic_istream<char,std::char_traits<char>> &,icu_56::UnicodeString &)+1Er ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: icu_56::operator<<(std::basic_ostream<char,std::char_traits<char>>	&,icu_56::UnicodeString	const &)+16Dp
					; icu_56::operator>>(std::basic_istream<char,std::char_traits<char>> &,icu_56::UnicodeString &)+38Bp ...
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near
					; CODE XREF: icu_56::operator<<(std::basic_ostream<char,std::char_traits<char>>	&,icu_56::UnicodeString	const &)+15Ep
					; icu_56::operator>>(std::basic_istream<char,std::char_traits<char>> &,icu_56::UnicodeString &)+37Cp ...
		extrn __RTC_CheckEsp:near
					; CODE XREF: icu_56::operator<<(std::basic_ostream<char,std::char_traits<char>>	&,icu_56::UnicodeString	const &)+35p
					; icu_56::operator<<(std::basic_ostream<char,std::char_traits<char>> &,icu_56::UnicodeString const &)+88p ...
; struct icu_56::UnicodeString *__thiscall icu_56::UnicodeString::append(icu_56::UnicodeString *__hidden this, wchar_t)
		extrn __imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z:near
					; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+32Dp
					; DATA XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+32Dr
; signed __int8	__thiscall icu_56::UnicodeString::truncate(icu_56::UnicodeString *__hidden this, int)
		extrn __imp_?truncate@UnicodeString@icu_56@@QAECH@Z:near
					; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+30Cp
					; DATA XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+30Cr
; __declspec(dllimport)	public:	class std::basic_istream<char, struct std::char_traits<char>> &	__thiscall std::basic_istream<char, struct std::char_traits<char>>::putback(char)
		extrn __imp_?putback@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:near
					; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+2E5p
					; DATA XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+2E5r
		extrn _u_isWhitespace_56:near
					; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+298p
		extrn _ucnv_toUnicode_56:near
					; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+17Ap
; __declspec(dllimport)	public:	void __thiscall	std::basic_ios<char, struct std::char_traits<char>>::clear(int,	bool)
		extrn __imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:near
					; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+109p
					; icu_56::operator>>(std::basic_istream<char,std::char_traits<char>> &,icu_56::UnicodeString &)+1A8p
					; DATA XREF: ...
; bool __thiscall std::ios_base::eof(std::ios_base *__hidden this)
		extrn __imp_?eof@ios_base@std@@QBE_NXZ:near
					; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+D7p
					; DATA XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+D7r
; __declspec(dllimport)	public:	int __thiscall std::basic_istream<char,	struct std::char_traits<char>>::get(void)
		extrn __imp_?get@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ:near
					; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+B5p
					; DATA XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+B5r
; bool __thiscall std::ios_base::fail(std::ios_base *__hidden this)
		extrn __imp_?fail@ios_base@std@@QBE_NXZ:near
					; CODE XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+37p
					; DATA XREF: icu_56::operator>>(std::basic_istream<char,std::char_traits<char>>	&,icu_56::UnicodeString	&)+37r
; __declspec(dllimport)	public:	void __thiscall	std::basic_ios<char, struct std::char_traits<char>>::setstate(int, bool)
		extrn __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:near
					; CODE XREF: __catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0+13p
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+451p
					; DATA XREF: ...
; __int64 __thiscall std::ios_base::width(std::ios_base	*__hidden this,	__int64)
		extrn __imp_?width@ios_base@std@@QAE_J_J@Z:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+3FBp
					; DATA XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+3FBr
; __declspec(dllimport)	public:	__int64	__thiscall std::basic_streambuf<char, struct std::char_traits<char>>::sputn(char const *, __int64)
		extrn __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+2BBp
					; DATA XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+2BBr
; __declspec(dllimport)	public:	int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::sputc(char)
		extrn __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+212p
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+37Bp
					; DATA XREF: ...
; __declspec(dllimport)	public:	class std::basic_streambuf<char, struct	std::char_traits<char>>	* __thiscall std::basic_ios<char, struct std::char_traits<char>>::rdbuf(void)const
		extrn __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1EFp
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+294p	...
; __declspec(dllimport)	public:	char __thiscall	std::basic_ios<char, struct std::char_traits<char>>::fill(void)const
		extrn __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1CDp
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+336p
					; DATA XREF: ...
; int __thiscall std::ios_base::flags(std::ios_base *__hidden this)
		extrn __imp_?flags@ios_base@std@@QBEHXZ:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+16Dp
					; DATA XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+16Dr
; __int64 __thiscall std::ios_base::width(std::ios_base	*__hidden this)
		extrn __imp_?width@ios_base@std@@QBE_JXZ:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+6Bp
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+A7p ...
		extrn ___CxxFrameHandler3:near
					; CODE XREF: __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z+19j
					; __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z+19j ...
; size_t __cdecl strlen(const char *Str)
		extrn _strlen:near	; CODE XREF: std::char_traits<char>::length(char const *)+22p
; __declspec(dllimport)	public:	class std::basic_ostream<char, struct std::char_traits<char>> &	__thiscall std::basic_ostream<char, struct std::char_traits<char>>::flush(void)
		extrn __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:near
					; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+B8p
					; DATA XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+B8r
; __declspec(dllimport)	public:	class std::basic_ostream<char, struct std::char_traits<char>> *	__thiscall std::basic_ios<char,	struct std::char_traits<char>>::tie(void)const
		extrn __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:near
					; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+87p
					; std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+A7p
					; DATA XREF: ...
; bool __thiscall std::ios_base::good(std::ios_base *__hidden this)
		extrn __imp_?good@ios_base@std@@QBE_NXZ:near
					; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &):loc_DFCp
					; std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+D4p
					; DATA XREF: ...
; __declspec(dllimport)	public:	void __thiscall	std::basic_ostream<char, struct	std::char_traits<char>>::_Osfx(void)
		extrn __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:near
					; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+66p
					; DATA XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+66r
; bool __cdecl std::uncaught_exception()
		extrn __imp_?uncaught_exception@std@@YA_NXZ:near
					; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+4Bp
					; DATA XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+4Br


		end
