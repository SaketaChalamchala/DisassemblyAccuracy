;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	7570A8788274733D094F98D8DA8116C2
; Input	CRC32 :	D53E25F3

; File Name   :	D:\compspace\objfiles\firefox\i18n\utrans.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		public ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
; public: static bool const std::tr1::integral_constant<bool, 0>::value
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	db 0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 4
		public ?value@?$integral_constant@_N$00@tr1@std@@2_NB
; public: static bool const std::tr1::integral_constant<bool, 1>::value
?value@?$integral_constant@_N$00@tr1@std@@2_NB db 1
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8
		public ?value@?$integral_constant@I$0A@@tr1@std@@2IB
; public: static unsigned int const std::tr1::integral_constant<unsigned int, 0>::value
?value@?$integral_constant@I$0A@@tr1@std@@2IB dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0Ch
		public ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
; public: static int const std::_Arithmetic_traits<bool>::_Rank
?_Rank@?$_Arithmetic_traits@_N@std@@2HB	dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10h
		public ?_Rank@?$_Arithmetic_traits@D@std@@2HB
; public: static int const std::_Arithmetic_traits<char>::_Rank
?_Rank@?$_Arithmetic_traits@D@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14h
		public ?_Rank@?$_Arithmetic_traits@C@std@@2HB
; public: static int const std::_Arithmetic_traits<signed char>::_Rank
?_Rank@?$_Arithmetic_traits@C@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18h
		public ?_Rank@?$_Arithmetic_traits@E@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned char>::_Rank
?_Rank@?$_Arithmetic_traits@E@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1Ch
		public ?_Rank@?$_Arithmetic_traits@F@std@@2HB
; public: static int const std::_Arithmetic_traits<short>::_Rank
?_Rank@?$_Arithmetic_traits@F@std@@2HB dd 3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 20h
		public ?_Rank@?$_Arithmetic_traits@G@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned short>::_Rank
?_Rank@?$_Arithmetic_traits@G@std@@2HB dd 3
					; DATA XREF: .rdata:int	const std::_Locbase<int>::messageso
					; .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::showposo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 24h
		public ?_Rank@?$_Arithmetic_traits@H@std@@2HB
; public: static int const std::_Arithmetic_traits<int>::_Rank
?_Rank@?$_Arithmetic_traits@H@std@@2HB dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 28h
		public ?_Rank@?$_Arithmetic_traits@I@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned int>::_Rank
?_Rank@?$_Arithmetic_traits@I@std@@2HB dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2Ch
		public ?_Rank@?$_Arithmetic_traits@J@std@@2HB
; public: static int const std::_Arithmetic_traits<long>::_Rank
?_Rank@?$_Arithmetic_traits@J@std@@2HB dd 5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 30h
		public ?_Rank@?$_Arithmetic_traits@K@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned long>::_Rank
?_Rank@?$_Arithmetic_traits@K@std@@2HB dd 5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 34h
		public ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
; public: static int const std::_Arithmetic_traits<__int64>::_Rank
?_Rank@?$_Arithmetic_traits@_J@std@@2HB	dd 6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 38h
		public ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned __int64>::_Rank
?_Rank@?$_Arithmetic_traits@_K@std@@2HB	dd 6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3Ch
		public ?_Rank@?$_Arithmetic_traits@M@std@@2HB
; public: static int const std::_Arithmetic_traits<float>::_Rank
?_Rank@?$_Arithmetic_traits@M@std@@2HB dd 7
					; DATA XREF: .rdata:int	const std::_Locbase<int>::allo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 40h
		public ?_Rank@?$_Arithmetic_traits@N@std@@2HB
; public: static int const std::_Arithmetic_traits<double>::_Rank
?_Rank@?$_Arithmetic_traits@N@std@@2HB dd 8
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::lefto
					; .rdata:std::_Iosb<int>::_Openmode const std::_Iosb<int>::_Nocreateo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 44h
		public ?_Rank@?$_Arithmetic_traits@O@std@@2HB
; public: static int const std::_Arithmetic_traits<long	double>::_Rank
?_Rank@?$_Arithmetic_traits@O@std@@2HB dd 9
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 48h
		public ?collate@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::collate
?collate@?$_Locbase@H@std@@2HB dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4Ch
		public ?ctype@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::ctype
?ctype@?$_Locbase@H@std@@2HB dd	2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 50h
		public ?monetary@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::monetary
?monetary@?$_Locbase@H@std@@2HB	dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 54h
		public ?numeric@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::numeric
?numeric@?$_Locbase@H@std@@2HB dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 58h
		public ?time@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::time
?time@?$_Locbase@H@std@@2HB dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5Ch
		public ?messages@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::messages
?messages@?$_Locbase@H@std@@2HB	dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 60h
		public ?all@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::all
?all@?$_Locbase@H@std@@2HB dd offset ?_Rank@?$_Arithmetic_traits@M@std@@2HB+3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 64h
		public ?none@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::none
?none@?$_Locbase@H@std@@2HB dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 68h
		public ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::skipws
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6Ch
		public ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::unitbuf
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 70h
		public ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::uppercase
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 74h
		public ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showbase
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 78h
		public ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showpoint
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7Ch
		public ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showpos
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 80h
		public ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::left
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::righto
					; .rdata:std::_Iosb<int>::_Openmode const std::_Iosb<int>::_Noreplaceo
_rdata		ends			; int const std::_Arithmetic_traits<double>::_Rank

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 84h
		public ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::right
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B	dd offset ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B ; std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::left
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 88h
		public ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::internal
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset dword_100
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8Ch
		public ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::dec
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_1FF+1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 90h
		public ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::oct
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	off_400
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 94h
		public ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::hex
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_800
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 98h
		public ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::scientific
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd	offset off_1000
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9Ch
		public ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::fixed
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B	dd offset ?getRangeStart@UnicodeSet@icu_56@@UBEHH@Z ; icu_56::UnicodeSet::getRangeStart(int)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A0h
		public ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::hexfloat
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 3000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A4h
		public ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::boolalpha
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 4000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A8h
		public ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::_Stdio
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 8000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ACh
		public ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::adjustfield
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_1BF+1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B0h
		public ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::basefield
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset loc_DFD+3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B4h
		public ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::floatfield
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd	3000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B8h
		public ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::goodbit
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BCh
		public ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::eofbit
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B	dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C0h
		public ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::failbit
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C4h
		public ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::badbit
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B	dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C8h
		public ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::_Hardfail
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CCh
		public ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::in
?in@?$_Iosb@H@std@@2W4_Openmode@12@B dd	1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D0h
		public ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::out
?out@?$_Iosb@H@std@@2W4_Openmode@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D4h
		public ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::ate
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D8h
		public ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::app
?app@?$_Iosb@H@std@@2W4_Openmode@12@B dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0DCh
		public ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::trunc
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B	dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E0h
		public ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::_Nocreate
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E4h
		public ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::_Noreplace
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B dd	offset ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B ;	std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::left
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E8h
		public ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::binary
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int	const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ECh
		public ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::beg
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F0h
		public ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::cur
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F4h
		public ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::end
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	2
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
		assume cs:_bss
		;org 0F8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
; char `public:	static void * __cdecl icu_56::ReplaceableGlue::getStaticClassID(void)'::`2'::classID
?classID@?1??getStaticClassID@ReplaceableGlue@icu_56@@SAPAXXZ@4DA db ?
					; DATA XREF: icu_56::ReplaceableGlue::getStaticClassID(void)+1Eo
		align 4
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FCh
_utransEnumeration dd 0			; DATA XREF: _utrans_openIDs_56+62o
dword_100	dd 0			; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::internalo
		dd offset _utrans_enum_close
		dd offset _utrans_enum_count
		dd offset _utrans_enum_unext
		dd offset _uenum_nextDefault_56
		dd offset _utrans_enum_reset
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 118h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int)
		public ??2@YAPAXI@Z
??2@YAPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??2@YAPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 150h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 154h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 158h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX@Z
??3@YAXPAX@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??3@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 18Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::Transliterator::getMaximumContextLength(icu_56::Transliterator	*__hidden this)
		public ?getMaximumContextLength@Transliterator@icu_56@@QBEHXZ
?getMaximumContextLength@Transliterator@icu_56@@QBEHXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+48h]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getMaximumContextLength@Transliterator@icu_56@@QBEHXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1BCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::Transliterator::setID(icu_56::Transliterator *this, const struct icu_56::UnicodeString *)
		public ?setID@Transliterator@icu_56@@IAEXABVUnicodeString@2@@Z
?setID@Transliterator@icu_56@@IAEXABVUnicodeString@2@@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp

loc_1BF:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::adjustfieldo
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		add	ecx, 4
		call	dword ptr ds:__imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z ;	icu_56::UnicodeString::operator=(icu_56::UnicodeString const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	0		; wchar_t
		mov	ecx, [ebp+var_8]

loc_1FF:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::deco
		add	ecx, 4		; this
		call	dword ptr ds:__imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z ; icu_56::UnicodeString::append(wchar_t)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_8]
		add	ecx, 4		; this
		mov	esi, esp
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		sub	eax, 1
		mov	esi, esp
		push	eax		; int
		mov	ecx, [ebp+var_8]
		add	ecx, 4		; this
		call	dword ptr ds:__imp_?truncate@UnicodeString@icu_56@@QAECH@Z ; icu_56::UnicodeString::truncate(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?setID@Transliterator@icu_56@@IAEXABVUnicodeString@2@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 254h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static union icu_56::Transliterator::Token __cdecl icu_56::Transliterator::integerToken(int)
		public ?integerToken@Transliterator@icu_56@@SA?ATToken@12@H@Z
?integerToken@Transliterator@icu_56@@SA?ATToken@12@H@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?integerToken@Transliterator@icu_56@@SA?ATToken@12@H@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN5		dd 1			; DATA XREF: icu_56::Transliterator::integerToken(int)+2Bo
		dd offset $LN4
$LN4		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00000298o
		dd offset $LN3
$LN3		db 74h,	0		; DATA XREF: .text:000002A4o
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2ACh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static union icu_56::Transliterator::Token __cdecl icu_56::Transliterator::pointerToken(void *)
		public ?pointerToken@Transliterator@icu_56@@SA?ATToken@12@PAX@Z
?pointerToken@Transliterator@icu_56@@SA?ATToken@12@PAX@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?pointerToken@Transliterator@icu_56@@SA?ATToken@12@PAX@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN5_0		dd 1			; DATA XREF: icu_56::Transliterator::pointerToken(void *)+2Bo
		dd offset $LN4_0
$LN4_0		dd 0FFFFFFF8h, 4	; DATA XREF: .text:000002F0o
		dd offset $LN3_0
$LN3_0		db 74h,	0		; DATA XREF: .text:000002FCo
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 304h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	icu_56::ReplaceableGlue::getStaticClassID()
		public ?getStaticClassID@ReplaceableGlue@icu_56@@SAPAXXZ
?getStaticClassID@ReplaceableGlue@icu_56@@SAPAXXZ proc near
					; CODE XREF: icu_56::ReplaceableGlue::getDynamicClassID(void)+23p

var_C0		= byte ptr -0C0h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, offset ?classID@?1??getStaticClassID@ReplaceableGlue@icu_56@@SAPAXXZ@4DA ;	char `icu_56::ReplaceableGlue::getStaticClassID(void)'::`2'::classID
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getStaticClassID@ReplaceableGlue@icu_56@@SAPAXXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 330h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__thiscall icu_56::ReplaceableGlue::getDynamicClassID(icu_56::ReplaceableGlue *__hidden	this)
		public ?getDynamicClassID@ReplaceableGlue@icu_56@@UBEPAXXZ
?getDynamicClassID@ReplaceableGlue@icu_56@@UBEPAXXZ proc near ;	DATA XREF: .rdata:000003E0o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		call	?getStaticClassID@ReplaceableGlue@icu_56@@SAPAXXZ ; icu_56::ReplaceableGlue::getStaticClassID(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?getDynamicClassID@ReplaceableGlue@icu_56@@UBEPAXXZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 36Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::ReplaceableGlue::ReplaceableGlue(icu_56::ReplaceableGlue *this, void **, struct UReplaceableCallbacks *)
		public ??0ReplaceableGlue@icu_56@@QAE@PAPAXPAUUReplaceableCallbacks@@@Z
??0ReplaceableGlue@icu_56@@QAE@PAPAXPAUUReplaceableCallbacks@@@Z proc near
					; CODE XREF: _utrans_trans_56+69p
					; _utrans_transIncremental_56+69p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0Replaceable@icu_56@@IAE@XZ ; icu_56::Replaceable::Replaceable(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7ReplaceableGlue@icu_56@@6B@	; const	icu_56::ReplaceableGlue::`vftable'
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+4], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_4]
		mov	[eax+8], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??0ReplaceableGlue@icu_56@@QAE@PAPAXPAUUReplaceableCallbacks@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3D8h
		dd offset ??_R4ReplaceableGlue@icu_56@@6B@ ; const icu_56::ReplaceableGlue::`RTTI Complete Object Locator'
		public ??_7ReplaceableGlue@icu_56@@6B@
; const	icu_56::ReplaceableGlue::`vftable'
??_7ReplaceableGlue@icu_56@@6B@	dd offset ??_EReplaceableGlue@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::ReplaceableGlue::ReplaceableGlue(void * *,UReplaceableCallbacks *)+38o
					; icu_56::ReplaceableGlue::~ReplaceableGlue(void)+26o
					; icu_56::ReplaceableGlue::`vector deleting destructor'(uint)
		dd offset ?getDynamicClassID@ReplaceableGlue@icu_56@@UBEPAXXZ ;	icu_56::ReplaceableGlue::getDynamicClassID(void)
		dd offset ?extractBetween@ReplaceableGlue@icu_56@@UBEXHHAAVUnicodeString@2@@Z ;	icu_56::ReplaceableGlue::extractBetween(int,int,icu_56::UnicodeString &)
		dd offset ?handleReplaceBetween@ReplaceableGlue@icu_56@@UAEXHHABVUnicodeString@2@@Z ; icu_56::ReplaceableGlue::handleReplaceBetween(int,int,icu_56::UnicodeString const	&)
		dd offset ?copy@ReplaceableGlue@icu_56@@UAEXHHH@Z ; icu_56::ReplaceableGlue::copy(int,int,int)
		dd offset ?hasMetaData@Replaceable@icu_56@@UBECXZ ; icu_56::Replaceable::hasMetaData(void)
		dd offset ?clone@Replaceable@icu_56@@UBEPAV12@XZ ; icu_56::Replaceable::clone(void)
		dd offset ?getLength@ReplaceableGlue@icu_56@@MBEHXZ ; icu_56::ReplaceableGlue::getLength(void)
		dd offset ?getCharAt@ReplaceableGlue@icu_56@@MBE_WH@Z ;	icu_56::ReplaceableGlue::getCharAt(int)
off_400		dd offset ?getChar32At@ReplaceableGlue@icu_56@@MBEHH@Z
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::octo
_rdata		ends			; icu_56::ReplaceableGlue::getChar32At(int)

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 404h
		public ??_R4ReplaceableGlue@icu_56@@6B@
; const	icu_56::ReplaceableGlue::`RTTI Complete	Object Locator'
??_R4ReplaceableGlue@icu_56@@6B@ dd 3 dup(0) ; DATA XREF: .rdata:000003D8o
		dd offset ??_R0?AVReplaceableGlue@icu_56@@@8 ; icu_56::ReplaceableGlue `RTTI Type Descriptor'
		dd offset ??_R3ReplaceableGlue@icu_56@@8 ; icu_56::ReplaceableGlue::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 418h
		public ??_R0?AVReplaceableGlue@icu_56@@@8
; class	icu_56::ReplaceableGlue	`RTTI Type Descriptor'
??_R0?AVReplaceableGlue@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00000410o
					; .rdata$r:icu_56::ReplaceableGlue::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avreplaceabl	db '.?AVReplaceableGlue@icu_56@@',0
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 440h
		public ??_R3ReplaceableGlue@icu_56@@8
; icu_56::ReplaceableGlue::`RTTI Class Hierarchy Descriptor'
??_R3ReplaceableGlue@icu_56@@8 dd 2 dup(0) ; DATA XREF:	.rdata$r:00000414o
					; .rdata$r:0000047Co
		dd 4
		dd offset ??_R2ReplaceableGlue@icu_56@@8 ; icu_56::ReplaceableGlue::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 450h
		public ??_R2ReplaceableGlue@icu_56@@8
; icu_56::ReplaceableGlue::`RTTI Base Class Array'
??_R2ReplaceableGlue@icu_56@@8 dd offset ??_R1A@?0A@EA@ReplaceableGlue@icu_56@@8
					; DATA XREF: .rdata$r:0000044Co
					; icu_56::ReplaceableGlue::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@Replaceable@icu_56@@8 ;	icu_56::Replaceable::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 464h
		public ??_R1A@?0A@EA@ReplaceableGlue@icu_56@@8
; icu_56::ReplaceableGlue::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@ReplaceableGlue@icu_56@@8	dd offset ??_R0?AVReplaceableGlue@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::ReplaceableGlue::`RTTI Base Class	Array'o
					; icu_56::ReplaceableGlue `RTTI	Type Descriptor'
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3ReplaceableGlue@icu_56@@8 ; icu_56::ReplaceableGlue::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 480h
		public ??_R1A@?0A@EA@Replaceable@icu_56@@8
; icu_56::Replaceable::`RTTI Base Class	Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@Replaceable@icu_56@@8 dd offset ??_R0?AVReplaceable@icu_56@@@8
					; DATA XREF: .rdata$r:00000454o
					; .rdata$r:icu_56::Replaceable::`RTTI Base Class Array'o
					; icu_56::Replaceable `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3Replaceable@icu_56@@8 ; icu_56::Replaceable::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 49Ch
		public ??_R0?AVReplaceable@icu_56@@@8
; class	icu_56::Replaceable `RTTI Type Descriptor'
??_R0?AVReplaceable@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::Replaceable::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avreplacea_0	db '.?AVReplaceable@icu_56@@',0
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 4C0h
		public ??_R3Replaceable@icu_56@@8
; icu_56::Replaceable::`RTTI Class Hierarchy Descriptor'
??_R3Replaceable@icu_56@@8 dd 2	dup(0)	; DATA XREF: .rdata$r:00000498o
		dd 3
		dd offset ??_R2Replaceable@icu_56@@8 ; icu_56::Replaceable::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 4D0h
		public ??_R2Replaceable@icu_56@@8
; icu_56::Replaceable::`RTTI Base Class	Array'
??_R2Replaceable@icu_56@@8 dd offset ??_R1A@?0A@EA@Replaceable@icu_56@@8
					; DATA XREF: .rdata$r:000004CCo
					; icu_56::Replaceable::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 4E0h
		public ??_R1A@?0A@EA@UObject@icu_56@@8
; icu_56::UObject::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UObject@icu_56@@8	dd offset ??_R0?AVUObject@icu_56@@@8
					; DATA XREF: .rdata$r:00000458o
					; .rdata$r:000004D4o ...
					; icu_56::UObject `RTTI	Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UObject@icu_56@@8 ; icu_56::UObject::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 4FCh
		public ??_R0?AVUObject@icu_56@@@8
; class	icu_56::UObject	`RTTI Type Descriptor'
??_R0?AVUObject@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UObject::`RTTI Base Class	Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avuobject@ic	db '.?AVUObject@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 51Ch
		public ??_R3UObject@icu_56@@8
; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
??_R3UObject@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:000004F8o
		dd 2
		dd offset ??_R2UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 52Ch
		public ??_R2UObject@icu_56@@8
; icu_56::UObject::`RTTI Base Class Array'
??_R2UObject@icu_56@@8 dd offset ??_R1A@?0A@EA@UObject@icu_56@@8
					; DATA XREF: .rdata$r:00000528o
					; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 538h
		public ??_R13?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@UMemory@icu_56@@8 dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:0000045Co
					; .rdata$r:000004D8o ...
					; icu_56::UMemory `RTTI	Type Descriptor'
		align 10h
		dd 4, 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 554h
		public ??_R0?AVUMemory@icu_56@@@8
; class	icu_56::UMemory	`RTTI Type Descriptor'
??_R0?AVUMemory@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Descriptor at (4,-1,0,64)'o
					; .rdata$r:icu_56::UMemory::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avumemory@ic	db '.?AVUMemory@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 574h
		public ??_R3UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
??_R3UMemory@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00000550o
					; .rdata$r:000005A4o
		dd 1
		dd offset ??_R2UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 584h
		public ??_R2UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Array'
??_R2UMemory@icu_56@@8 dd offset ??_R1A@?0A@EA@UMemory@icu_56@@8
					; DATA XREF: .rdata$r:00000580o
					; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 58Ch
		public ??_R1A@?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UMemory@icu_56@@8	dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Array'o
					; icu_56::UMemory `RTTI	Type Descriptor'
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 5A8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::ReplaceableGlue::`scalar deleting destructor'(unsigned int)
		public ??_GReplaceableGlue@icu_56@@UAEPAXI@Z
??_GReplaceableGlue@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1ReplaceableGlue@icu_56@@UAE@XZ ; icu_56::ReplaceableGlue::~ReplaceableGlue(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_5F1
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_5F1:				; CODE XREF: icu_56::ReplaceableGlue::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GReplaceableGlue@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 60Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::ReplaceableGlue::~ReplaceableGlue(icu_56::ReplaceableGlue *__hidden	this)
		public ??1ReplaceableGlue@icu_56@@UAE@XZ
??1ReplaceableGlue@icu_56@@UAE@XZ proc near
					; CODE XREF: icu_56::ReplaceableGlue::`scalar deleting destructor'(uint)+26p
					; _utrans_trans_56+9Ap	...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7ReplaceableGlue@icu_56@@6B@	; const	icu_56::ReplaceableGlue::`vftable'
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??1Replaceable@icu_56@@UAE@XZ ; icu_56::Replaceable::~Replaceable(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1ReplaceableGlue@icu_56@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 660h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::ReplaceableGlue::getLength(icu_56::ReplaceableGlue *__hidden this)
		public ?getLength@ReplaceableGlue@icu_56@@MBEHXZ
?getLength@ReplaceableGlue@icu_56@@MBEHXZ proc near ; DATA XREF: .rdata:000003F8o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx+8]
		mov	ecx, [eax]
		call	ecx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?getLength@ReplaceableGlue@icu_56@@MBEHXZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 6B4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; wchar_t __thiscall icu_56::ReplaceableGlue::getCharAt(icu_56::ReplaceableGlue	*this, int)
		public ?getCharAt@ReplaceableGlue@icu_56@@MBE_WH@Z
?getCharAt@ReplaceableGlue@icu_56@@MBE_WH@Z proc near ;	DATA XREF: .rdata:000003FCo

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		push	edx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+8]
		mov	edx, [ecx+4]
		call	edx
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?getCharAt@ReplaceableGlue@icu_56@@MBE_WH@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 710h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::ReplaceableGlue::getChar32At(icu_56::ReplaceableGlue *this, int)
		public ?getChar32At@ReplaceableGlue@icu_56@@MBEHH@Z
?getChar32At@ReplaceableGlue@icu_56@@MBEHH@Z proc near ; DATA XREF: .rdata:off_400o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		push	edx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+8]
		mov	edx, [ecx+8]
		call	edx
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?getChar32At@ReplaceableGlue@icu_56@@MBEHH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 76Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::ReplaceableGlue::handleReplaceBetween(icu_56::ReplaceableGlue	*this, int, int, const struct icu_56::UnicodeString *)
		public ?handleReplaceBetween@ReplaceableGlue@icu_56@@UAEXHHABVUnicodeString@2@@Z
?handleReplaceBetween@ReplaceableGlue@icu_56@@UAEXHHABVUnicodeString@2@@Z proc near
					; DATA XREF: .rdata:000003E8o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+arg_8] ; this
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	eax
		mov	edi, esp
		mov	ecx, [ebp+arg_8] ; this
		call	dword ptr ds:__imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ ;	icu_56::UnicodeString::getBuffer(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		push	eax
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx+4]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+8]
		mov	eax, [edx+0Ch]
		call	eax
		add	esp, 14h
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?handleReplaceBetween@ReplaceableGlue@icu_56@@UAEXHHABVUnicodeString@2@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 7F4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::ReplaceableGlue::extractBetween(icu_56::ReplaceableGlue *this, int, int, struct icu_56::UnicodeString	*)
		public ?extractBetween@ReplaceableGlue@icu_56@@UBEXHHAAVUnicodeString@2@@Z
?extractBetween@ReplaceableGlue@icu_56@@UBEXHHAAVUnicodeString@2@@Z proc near
					; DATA XREF: .rdata:000003E4o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi

loc_800:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::hexo
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_4]
		sub	eax, [ebp+arg_0]
		mov	esi, esp
		push	eax		; int
		mov	ecx, [ebp+arg_8] ; this
		call	dword ptr ds:__imp_?getBuffer@UnicodeString@icu_56@@QAEPA_WH@Z ; icu_56::UnicodeString::getBuffer(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx+8]
		mov	ecx, [eax+10h]
		call	ecx
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_4]
		sub	eax, [ebp+arg_0]
		mov	esi, esp
		push	eax		; int
		mov	ecx, [ebp+arg_8] ; this
		call	dword ptr ds:__imp_?releaseBuffer@UnicodeString@icu_56@@QAEXH@Z	; icu_56::UnicodeString::releaseBuffer(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?extractBetween@ReplaceableGlue@icu_56@@UBEXHHAAVUnicodeString@2@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 888h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::ReplaceableGlue::copy(icu_56::ReplaceableGlue	*this, int, int, int)
		public ?copy@ReplaceableGlue@icu_56@@UAEXHHH@Z
?copy@ReplaceableGlue@icu_56@@UAEXHHH@Z	proc near ; DATA XREF: .rdata:000003ECo

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx+8]
		mov	ecx, [eax+14h]
		call	ecx
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?copy@ReplaceableGlue@icu_56@@UAEXHHH@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 8ECh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl utrans_openU_56(wchar_t *, int, int, wchar_t *, int, int,	int)
		public _utrans_openU_56
_utrans_openU_56 proc near		; CODE XREF: _utrans_open_56+7Cp

var_1EC		= byte ptr -1ECh
var_1E8		= dword	ptr -1E8h
var_1DC		= dword	ptr -1DCh
var_1D0		= dword	ptr -1D0h
var_1C4		= dword	ptr -1C4h
var_F8		= dword	ptr -0F8h
var_EC		= byte ptr -0ECh
var_A4		= dword	ptr -0A4h
var_98		= byte ptr -98h
var_50		= byte ptr -50h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		sub	esp, 1ECh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_1EC]
		mov	ecx, 7Bh ; '{'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		cmp	[ebp+arg_18], 0
		jz	short loc_92F
		mov	eax, [ebp+arg_18]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_936

loc_92F:				; CODE XREF: _utrans_openU_56+2Cj
		xor	eax, eax
		jmp	loc_B23
; ---------------------------------------------------------------------------

loc_936:				; CODE XREF: _utrans_openU_56+41j
		cmp	[ebp+arg_0], 0
		jnz	short loc_94C
		mov	eax, [ebp+arg_18]
		mov	dword ptr [eax], 1
		xor	eax, eax
		jmp	loc_B23
; ---------------------------------------------------------------------------

loc_94C:				; CODE XREF: _utrans_openU_56+4Ej
		cmp	[ebp+arg_14], 0
		jnz	short loc_958
		lea	eax, [ebp+var_50]
		mov	[ebp+arg_14], eax

loc_958:				; CODE XREF: _utrans_openU_56+64j
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax		; int
		mov	ecx, [ebp+arg_0]
		push	ecx		; wchar_t *
		cmp	[ebp+arg_4], 0
		setl	dl
		movzx	eax, dl
		push	eax		; signed __int8
		lea	ecx, [ebp+var_98] ; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@CPB_WH@Z ; icu_56::UnicodeString::UnicodeString(signed char,wchar_t const *,int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	[ebp+arg_C], 0
		jnz	loc_A25
		mov	[ebp+var_A4], 0
		mov	eax, [ebp+arg_18]
		push	eax
		mov	ecx, [ebp+arg_14]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		lea	eax, [ebp+var_98]
		push	eax
		call	?createInstance@Transliterator@icu_56@@SAPAV12@ABVUnicodeString@2@W4UTransDirection@@AAUUParseError@@AAW4UErrorCode@@@Z	; icu_56::Transliterator::createInstance(icu_56::UnicodeString const &,UTransDirection,UParseError &,UErrorCode	&)
		add	esp, 10h
		mov	[ebp+var_A4], eax
		mov	eax, [ebp+arg_18]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_9F4
		mov	[ebp+var_1E8], 0
		mov	esi, esp
		lea	ecx, [ebp+var_98] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_1E8]
		jmp	loc_B23
; ---------------------------------------------------------------------------

loc_9F4:				; CODE XREF: _utrans_openU_56+DCj
		mov	eax, [ebp+var_A4]
		mov	[ebp+var_1DC], eax
		mov	esi, esp
		lea	ecx, [ebp+var_98] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_1DC]
		jmp	loc_B23
; ---------------------------------------------------------------------------
		jmp	loc_B0E
; ---------------------------------------------------------------------------

loc_A25:				; CODE XREF: _utrans_openU_56+98j
		mov	esi, esp
		mov	eax, [ebp+arg_10]
		push	eax		; int
		mov	ecx, [ebp+arg_C]
		push	ecx		; wchar_t *
		cmp	[ebp+arg_10], 0
		setl	dl
		movzx	eax, dl
		push	eax		; signed __int8
		lea	ecx, [ebp+var_EC] ; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@CPB_WH@Z ; icu_56::UnicodeString::UnicodeString(signed char,wchar_t const *,int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_F8], 0
		mov	eax, [ebp+arg_18]
		push	eax
		mov	ecx, [ebp+arg_14]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		lea	eax, [ebp+var_EC]
		push	eax
		lea	ecx, [ebp+var_98]
		push	ecx
		call	?createFromRules@Transliterator@icu_56@@SAPAV12@ABVUnicodeString@2@0W4UTransDirection@@AAUUParseError@@AAW4UErrorCode@@@Z ; icu_56::Transliterator::createFromRules(icu_56::UnicodeString const	&,icu_56::UnicodeString	const &,UTransDirection,UParseError &,UErrorCode &)
		add	esp, 14h
		mov	[ebp+var_F8], eax
		mov	eax, [ebp+arg_18]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_AD0
		mov	[ebp+var_1D0], 0
		mov	esi, esp
		lea	ecx, [ebp+var_EC] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		lea	ecx, [ebp+var_98] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_1D0]
		jmp	short loc_B23
; ---------------------------------------------------------------------------

loc_AD0:				; CODE XREF: _utrans_openU_56+1A6j
		mov	eax, [ebp+var_F8]
		mov	[ebp+var_1C4], eax
		mov	esi, esp
		lea	ecx, [ebp+var_EC] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		lea	ecx, [ebp+var_98] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_1C4]
		jmp	short loc_B23
; ---------------------------------------------------------------------------

loc_B0E:				; CODE XREF: _utrans_openU_56+134j
		mov	esi, esp
		lea	ecx, [ebp+var_98] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_B23:				; CODE XREF: _utrans_openU_56+45j
					; _utrans_openU_56+5Bj	...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN15
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1ECh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_openU_56 endp

; ---------------------------------------------------------------------------
		align 4
$LN15		dd 3			; DATA XREF: _utrans_openU_56+23Bo
		dd offset $LN14
$LN14		dd 0FFFFFFB0h, 48h	; DATA XREF: .text:00000B58o
		dd offset $LN11		; "temp"
		dd 0FFFFFF68h, 40h
		dd offset $LN12		; "ID"
		dd 0FFFFFF14h, 40h
		dd offset $LN13		; "ruleStr"
$LN13		db 'ruleStr',0          ; DATA XREF: .text:00000B7Co
$LN12		db 'ID',0               ; DATA XREF: .text:00000B70o
$LN11		db 'temp',0             ; DATA XREF: .text:00000B64o
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0B90h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl U_FAILURE(enum  UErrorCode)
?U_FAILURE@@YACW4UErrorCode@@@Z	proc near ; CODE XREF: _utrans_openU_56+34p
					; _utrans_openU_56+CFp	...

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		setnle	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?U_FAILURE@@YACW4UErrorCode@@@Z	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0BBCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl utrans_open_56(int, int, int, wchar_t *, int, int)
		public _utrans_open_56
_utrans_open_56	proc near

var_118		= byte ptr -118h
var_114		= dword	ptr -114h
var_48		= byte ptr -48h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 118h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_118]
		mov	ecx, 46h ; 'F'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	esi, esp
		push	0		; int
		push	0FFFFFFFFh
		mov	eax, [ebp+arg_0]
		push	eax
		lea	ecx, [ebp+var_48]
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@PBDHW4EInvariant@01@@Z ; icu_56::UnicodeString::UnicodeString(char const *,int,icu_56::UnicodeString::EInvariant)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_14]
		push	eax		; int
		mov	ecx, [ebp+arg_10]
		push	ecx		; int
		mov	edx, [ebp+arg_C]
		push	edx		; wchar_t *
		mov	eax, [ebp+arg_8]
		push	eax		; int
		mov	ecx, [ebp+arg_4]
		push	ecx		; int
		mov	esi, esp
		lea	ecx, [ebp+var_48] ; this
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax
		mov	esi, esp
		lea	ecx, [ebp+var_48] ; this
		call	dword ptr ds:__imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ ;	icu_56::UnicodeString::getBuffer(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax		; wchar_t *
		call	_utrans_openU_56
		add	esp, 1Ch
		mov	[ebp+var_114], eax
		mov	esi, esp
		lea	ecx, [ebp+var_48] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_114]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_1
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 118h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_open_56	endp

; ---------------------------------------------------------------------------
		align 10h
$LN5_1		dd 1			; DATA XREF: _utrans_open_56+A6o
		dd offset $LN4_1
$LN4_1		dd 0FFFFFFB8h, 40h	; DATA XREF: .text:00000C94o
		dd offset $LN3_1
; ---------------------------------------------------------------------------

$LN3_1:					; DATA XREF: .text:00000CA0o
		dec	ecx
		inc	esp
		add	bh, bh
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0CA8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl utrans_openInverse_56(icu_56::Transliterator *, enum UErrorCode *)
		public _utrans_openInverse_56
_utrans_openInverse_56 proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_4], 0
		jz	short loc_CE1
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_CE5

loc_CE1:				; CODE XREF: _utrans_openInverse_56+22j
		xor	eax, eax
		jmp	short loc_CF7
; ---------------------------------------------------------------------------

loc_CE5:				; CODE XREF: _utrans_openInverse_56+37j
		mov	eax, [ebp+arg_4]
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+arg_0] ; this
		call	?createInverse@Transliterator@icu_56@@QBEPAV12@AAW4UErrorCode@@@Z ; icu_56::Transliterator::createInverse(UErrorCode &)
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]

loc_CF7:				; CODE XREF: _utrans_openInverse_56+3Bj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_openInverse_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0D0Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utrans_clone_56
_utrans_clone_56 proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_4], 0
		jz	short loc_D45
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_D49

loc_D45:				; CODE XREF: _utrans_clone_56+22j
		xor	eax, eax
		jmp	short loc_D87
; ---------------------------------------------------------------------------

loc_D49:				; CODE XREF: _utrans_clone_56+37j
		cmp	[ebp+arg_0], 0
		jnz	short loc_D5C
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 1
		xor	eax, eax
		jmp	short loc_D87
; ---------------------------------------------------------------------------

loc_D5C:				; CODE XREF: _utrans_clone_56+41j
		mov	eax, [ebp+arg_0]
		mov	edx, [eax]
		mov	esi, esp
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+8]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jnz	short loc_D84
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 7

loc_D84:				; CODE XREF: _utrans_clone_56+6Dj
		mov	eax, [ebp+var_8]

loc_D87:				; CODE XREF: _utrans_clone_56+3Bj
					; _utrans_clone_56+4Ej
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_clone_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0D9Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utrans_close_56
_utrans_close_56 proc near

var_DC		= dword	ptr -0DCh
var_D4		= dword	ptr -0D4h
var_C8		= dword	ptr -0C8h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0DCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_DC]
		mov	ecx, 37h ; '7'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_C8], eax
		mov	ecx, [ebp+var_C8]
		mov	[ebp+var_D4], ecx
		cmp	[ebp+var_D4], 0
		jz	short loc_DFD
		mov	esi, esp
		push	1
		mov	edx, [ebp+var_D4]
		mov	eax, [edx]
		mov	ecx, [ebp+var_D4]
		mov	edx, [eax]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_DC], eax
		jmp	short loc_E07
; ---------------------------------------------------------------------------

loc_DFD:				; CODE XREF: _utrans_close_56+3Aj
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::basefieldo
		mov	[ebp+var_DC], 0

loc_E07:				; CODE XREF: _utrans_close_56+5Fj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0DCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_close_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0E1Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utrans_getUnicodeID_56
_utrans_getUnicodeID_56	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	edx, [eax]
		mov	esi, esp
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+30h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_8], eax
		cmp	[ebp+arg_4], 0
		jz	short loc_E70
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+arg_4]
		mov	[ecx], eax

loc_E70:				; CODE XREF: _utrans_getUnicodeID_56+3Bj
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ ;	icu_56::UnicodeString::getBuffer(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_getUnicodeID_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0E98h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utrans_getID_56
_utrans_getID_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	esi, esp
		push	0
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		push	7FFFFFFFh
		push	0
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	edi, esp
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+30h]
		call	edx
		cmp	edi, esp
		call	__RTC_CheckEsp
		mov	ecx, eax
		call	dword ptr ds:__imp_?extract@UnicodeString@icu_56@@QBEHHHPADHW4EInvariant@12@@Z ; icu_56::UnicodeString::extract(int,int,char *,int,icu_56::UnicodeString::EInvariant)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_getID_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0F04h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl utrans_register_56(struct	icu_56::Transliterator *, int)
		public _utrans_register_56
_utrans_register_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_4], 0
		jz	short loc_F3D
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_F3F

loc_F3D:				; CODE XREF: _utrans_register_56+22j
		jmp	short loc_F4B
; ---------------------------------------------------------------------------

loc_F3F:				; CODE XREF: _utrans_register_56+37j
		mov	eax, [ebp+arg_0]
		push	eax		; struct icu_56::Transliterator	*
		call	?registerInstance@Transliterator@icu_56@@SAXPAV12@@Z ; icu_56::Transliterator::registerInstance(icu_56::Transliterator *)
		add	esp, 4

loc_F4B:				; CODE XREF: _utrans_register_56:loc_F3Dj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_register_56 endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0F60h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl utrans_unregisterID_56(wchar_t *,	int)
		public _utrans_unregisterID_56
_utrans_unregisterID_56	proc near

var_10C		= byte ptr -10Ch
var_48		= byte ptr -48h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10Ch
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_10C]
		mov	ecx, 43h ; 'C'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax		; int
		mov	ecx, [ebp+arg_0]
		push	ecx		; wchar_t *
		cmp	[ebp+arg_4], 0
		setl	dl
		movzx	eax, dl
		push	eax		; signed __int8
		lea	ecx, [ebp+var_48] ; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@CPB_WH@Z ; icu_56::UnicodeString::UnicodeString(signed char,wchar_t const *,int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		lea	eax, [ebp+var_48]
		push	eax		; struct icu_56::UnicodeString *
		call	?unregister@Transliterator@icu_56@@SAXABVUnicodeString@2@@Z ; icu_56::Transliterator::unregister(icu_56::UnicodeString const &)
		add	esp, 4
		mov	esi, esp
		lea	ecx, [ebp+var_48] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_2
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 10Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_unregisterID_56	endp

; ---------------------------------------------------------------------------
		align 4
$LN5_2		dd 1			; DATA XREF: _utrans_unregisterID_56+6Fo
off_1000	dd offset $LN4_2	; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::scientifico
$LN4_2		dd 0FFFFFFB8h, 40h	; DATA XREF: .text:off_1000o
		dd offset $LN3_2
; ---------------------------------------------------------------------------

$LN3_2:					; DATA XREF: .text:0000100Co
		dec	ecx
		inc	esp
		add	bh, bh
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1014h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utrans_unregister_56
_utrans_unregister_56 proc near

var_10C		= byte ptr -10Ch
var_48		= byte ptr -48h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10Ch
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_10C]
		mov	ecx, 43h ; 'C'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	esi, esp
		push	0
		push	0FFFFFFFFh
		mov	eax, [ebp+arg_0]
		push	eax
		lea	ecx, [ebp+var_48]
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@PBDHW4EInvariant@01@@Z ; icu_56::UnicodeString::UnicodeString(char const *,int,icu_56::UnicodeString::EInvariant)
		cmp	esi, esp
		call	__RTC_CheckEsp
		lea	eax, [ebp+var_48]
		push	eax		; struct icu_56::UnicodeString *
		call	?unregister@Transliterator@icu_56@@SAXABVUnicodeString@2@@Z ; icu_56::Transliterator::unregister(icu_56::UnicodeString const &)
		add	esp, 4
		mov	esi, esp
		lea	ecx, [ebp+var_48] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_3
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 10Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_unregister_56 endp

; ---------------------------------------------------------------------------
		align 4
$LN5_3		dd 1			; DATA XREF: _utrans_unregister_56+64o
		dd offset $LN4_3
$LN4_3		dd 0FFFFFFB8h, 40h	; DATA XREF: .text:000010A8o
		dd offset $LN3_3
; ---------------------------------------------------------------------------

$LN3_3:					; DATA XREF: .text:000010B4o
		dec	ecx
		inc	esp
		add	bh, bh
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10BCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl utrans_setFilter_56(icu_56::Transliterator *, wchar_t *, int, enum UErrorCode *)
		public _utrans_setFilter_56
_utrans_setFilter_56 proc near

var_14C		= dword	ptr -14Ch
var_144		= dword	ptr -144h
var_138		= dword	ptr -138h
var_12C		= dword	ptr -12Ch
var_120		= dword	ptr -120h
var_54		= byte ptr -54h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 14Ch
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_14C]
		mov	ecx, 53h ; 'S'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		cmp	[ebp+arg_C], 0
		jz	short loc_10FF
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_1104

loc_10FF:				; CODE XREF: _utrans_setFilter_56+2Cj
		jmp	loc_127B
; ---------------------------------------------------------------------------

loc_1104:				; CODE XREF: _utrans_setFilter_56+41j
		mov	[ebp+var_C], 0
		cmp	[ebp+arg_4], 0
		jz	loc_126F
		mov	eax, [ebp+arg_4]
		movzx	ecx, word ptr [eax]
		test	ecx, ecx
		jz	loc_126F
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax		; int
		mov	ecx, [ebp+arg_4]
		push	ecx		; wchar_t *
		cmp	[ebp+arg_8], 0
		setl	dl
		movzx	eax, dl
		push	eax		; signed __int8
		lea	ecx, [ebp+var_54] ; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@CPB_WH@Z ; icu_56::UnicodeString::UnicodeString(signed char,wchar_t const *,int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	34h ; '4'       ; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_138], eax
		cmp	[ebp+var_138], 0
		jz	short loc_11AF
		mov	esi, esp
		mov	eax, [ebp+arg_C]
		push	eax		; enum UErrorCode *
		lea	ecx, [ebp+var_54]
		push	ecx		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_138] ; this
		call	dword ptr ds:__imp_??0UnicodeSet@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z ; icu_56::UnicodeSet::UnicodeSet(icu_56::UnicodeString const	&,UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+var_138]
		mov	dword ptr [edx], offset	??_SUnicodeSet@icu_56@@6BUnicodeFunctor@1@@ ; const icu_56::UnicodeSet::`local vftable'{for `icu_56::UnicodeFunctor'}
		mov	eax, [ebp+var_138]
		mov	dword ptr [eax+4], offset ??_SUnicodeSet@icu_56@@6BUnicodeMatcher@1@@ ;	const icu_56::UnicodeSet::`local vftable'{for `icu_56::UnicodeMatcher'}
		mov	ecx, [ebp+var_138]
		mov	[ebp+var_14C], ecx
		jmp	short loc_11B9
; ---------------------------------------------------------------------------

loc_11AF:				; CODE XREF: _utrans_setFilter_56+ADj
		mov	[ebp+var_14C], 0

loc_11B9:				; CODE XREF: _utrans_setFilter_56+F1j
		mov	edx, [ebp+var_14C]
		mov	[ebp+var_144], edx
		mov	eax, [ebp+var_144]
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_11F4
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 7
		mov	esi, esp
		lea	ecx, [ebp+var_54] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	loc_127B
; ---------------------------------------------------------------------------

loc_11F4:				; CODE XREF: _utrans_setFilter_56+116j
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_125D
		mov	eax, [ebp+var_C]
		mov	[ebp+var_120], eax
		mov	ecx, [ebp+var_120]
		mov	[ebp+var_12C], ecx
		cmp	[ebp+var_12C], 0
		jz	short loc_124C
		mov	esi, esp
		push	1
		mov	edx, [ebp+var_12C]
		mov	eax, [edx]
		mov	ecx, [ebp+var_12C]
		mov	edx, [eax]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14C], eax
		jmp	short loc_1256
; ---------------------------------------------------------------------------

loc_124C:				; CODE XREF: _utrans_setFilter_56+169j
		mov	[ebp+var_14C], 0

loc_1256:				; CODE XREF: _utrans_setFilter_56+18Ej
		mov	[ebp+var_C], 0

loc_125D:				; CODE XREF: _utrans_setFilter_56+14Bj
		mov	esi, esp
		lea	ecx, [ebp+var_54] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_126F:				; CODE XREF: _utrans_setFilter_56+53j
					; _utrans_setFilter_56+61j
		mov	eax, [ebp+var_C]
		push	eax		; struct icu_56::UnicodeFilter *
		mov	ecx, [ebp+arg_0] ; this
		call	?adoptFilter@Transliterator@icu_56@@QAEXPAVUnicodeFilter@2@@Z ;	icu_56::Transliterator::adoptFilter(icu_56::UnicodeFilter *)

loc_127B:				; CODE XREF: _utrans_setFilter_56:loc_10FFj
					; _utrans_setFilter_56+133j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN14_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 14Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_setFilter_56 endp

; ---------------------------------------------------------------------------
		align 4
$LN14_0		dd 1			; DATA XREF: _utrans_setFilter_56+1C3o
		dd offset $LN13_0
$LN13_0		dd 0FFFFFFACh, 40h	; DATA XREF: .text:000012B0o
		dd offset $LN12_0
$LN12_0		dd 746170h		; DATA XREF: .text:000012BCo
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 12C4h
		dd offset ??_R4UnicodeSet@icu_56@@6BUnicodeMatcher@1@@ ; const icu_56::UnicodeSet::`RTTI Complete Object Locator'{for `icu_56::UnicodeMatcher'}
		public ??_SUnicodeSet@icu_56@@6BUnicodeMatcher@1@@
; const	icu_56::UnicodeSet::`local vftable'{for `icu_56::UnicodeMatcher'}
??_SUnicodeSet@icu_56@@6BUnicodeMatcher@1@@ dd offset ??_EUnicodeSet@icu_56@@W3AEPAXI@Z
					; DATA XREF: _utrans_setFilter_56+DEo
					; [thunk]:icu_56::UnicodeSet::`vector deleting destructor'`adjustor{4}' (uint)
		dd offset ?matches@UnicodeSet@icu_56@@UAE?AW4UMatchDegree@2@ABVReplaceable@2@AAHHC@Z ; icu_56::UnicodeSet::matches(icu_56::Replaceable const &,int &,int,signed	char)
		dd offset ?toPattern@UnicodeSet@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z	; icu_56::UnicodeSet::toPattern(icu_56::UnicodeString &,signed char)
		dd offset ?matchesIndexValue@UnicodeSet@icu_56@@EBECE@Z	; icu_56::UnicodeSet::matchesIndexValue(uchar)
		dd offset ?addMatchSetTo@UnicodeSet@icu_56@@UBEXAAV12@@Z ; icu_56::UnicodeSet::addMatchSetTo(icu_56::UnicodeSet	&)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 12DCh
		dd offset ??_R4UnicodeSet@icu_56@@6BUnicodeFunctor@1@@ ; const icu_56::UnicodeSet::`RTTI Complete Object Locator'{for `icu_56::UnicodeFunctor'}
		public ??_SUnicodeSet@icu_56@@6BUnicodeFunctor@1@@
; const	icu_56::UnicodeSet::`local vftable'{for `icu_56::UnicodeFunctor'}
??_SUnicodeSet@icu_56@@6BUnicodeFunctor@1@@ dd offset ??_EUnicodeSet@icu_56@@UAEPAXI@Z
					; DATA XREF: _utrans_setFilter_56+D2o
					; icu_56::UnicodeSet::`vector deleting destructor'(uint)
		dd offset ?getDynamicClassID@UnicodeSet@icu_56@@UBEPAXXZ ; icu_56::UnicodeSet::getDynamicClassID(void)
		dd offset ?clone@UnicodeSet@icu_56@@UBEPAVUnicodeFunctor@2@XZ ;	icu_56::UnicodeSet::clone(void)
		dd offset ?toMatcher@UnicodeFilter@icu_56@@UBEPAVUnicodeMatcher@2@XZ ; icu_56::UnicodeFilter::toMatcher(void)
		dd offset ?toReplacer@UnicodeFunctor@icu_56@@UBEPAVUnicodeReplacer@2@XZ	; icu_56::UnicodeFunctor::toReplacer(void)
		dd offset ?setData@UnicodeFilter@icu_56@@UAEXPBVTransliterationRuleData@2@@Z ; icu_56::UnicodeFilter::setData(icu_56::TransliterationRuleData const *)
		dd offset ?contains@UnicodeSet@icu_56@@UBECH@Z ; icu_56::UnicodeSet::contains(int)
		dd offset ??8UnicodeSet@icu_56@@UBECABV01@@Z ; icu_56::UnicodeSet::operator==(icu_56::UnicodeSet const &)
		dd offset ?hashCode@UnicodeSet@icu_56@@UBEHXZ ;	icu_56::UnicodeSet::hashCode(void)
		dd offset ?size@UnicodeSet@icu_56@@UBEHXZ ; icu_56::UnicodeSet::size(void)
		dd offset ?isEmpty@UnicodeSet@icu_56@@UBECXZ ; icu_56::UnicodeSet::isEmpty(void)
		dd offset ?contains@UnicodeSet@icu_56@@UBECHH@Z	; icu_56::UnicodeSet::contains(int,int)
		dd offset ?containsAll@UnicodeSet@icu_56@@UBECABV12@@Z ; icu_56::UnicodeSet::containsAll(icu_56::UnicodeSet const &)
		dd offset ?add@UnicodeSet@icu_56@@UAEAAV12@HH@Z	; icu_56::UnicodeSet::add(int,int)
		dd offset ?addAll@UnicodeSet@icu_56@@UAEAAV12@ABV12@@Z ; icu_56::UnicodeSet::addAll(icu_56::UnicodeSet const &)
		dd offset ?retainAll@UnicodeSet@icu_56@@UAEAAV12@ABV12@@Z ; icu_56::UnicodeSet::retainAll(icu_56::UnicodeSet const &)
		dd offset ?complementAll@UnicodeSet@icu_56@@UAEAAV12@ABV12@@Z ;	icu_56::UnicodeSet::complementAll(icu_56::UnicodeSet const &)
		dd offset ?removeAll@UnicodeSet@icu_56@@UAEAAV12@ABV12@@Z ; icu_56::UnicodeSet::removeAll(icu_56::UnicodeSet const &)
		dd offset ?retain@UnicodeSet@icu_56@@UAEAAV12@HH@Z ; icu_56::UnicodeSet::retain(int,int)
		dd offset ?remove@UnicodeSet@icu_56@@UAEAAV12@HH@Z ; icu_56::UnicodeSet::remove(int,int)
		dd offset ?complement@UnicodeSet@icu_56@@UAEAAV12@HH@Z ; icu_56::UnicodeSet::complement(int,int)
		dd offset ?complement@UnicodeSet@icu_56@@UAEAAV12@XZ ; icu_56::UnicodeSet::complement(void)
		dd offset ?clear@UnicodeSet@icu_56@@UAEAAV12@XZ	; icu_56::UnicodeSet::clear(void)
		dd offset ?removeAllStrings@UnicodeSet@icu_56@@UAEAAV12@XZ ; icu_56::UnicodeSet::removeAllStrings(void)
		dd offset ?getRangeCount@UnicodeSet@icu_56@@UBEHXZ ; icu_56::UnicodeSet::getRangeCount(void)
		dd offset ?getRangeStart@UnicodeSet@icu_56@@UBEHH@Z ; icu_56::UnicodeSet::getRangeStart(int)
		dd offset ?getRangeEnd@UnicodeSet@icu_56@@UBEHH@Z ; icu_56::UnicodeSet::getRangeEnd(int)
		dd offset ?compact@UnicodeSet@icu_56@@UAEAAV12@XZ ; icu_56::UnicodeSet::compact(void)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1350h
		public ??_R4UnicodeSet@icu_56@@6BUnicodeFunctor@1@@
; const	icu_56::UnicodeSet::`RTTI Complete Object Locator'{for `icu_56::UnicodeFunctor'}
??_R4UnicodeSet@icu_56@@6BUnicodeFunctor@1@@ dd	3 dup(0) ; DATA	XREF: .rdata:000012DCo
		dd offset ??_R0?AVUnicodeSet@icu_56@@@8	; icu_56::UnicodeSet `RTTI Type	Descriptor'
		dd offset ??_R3UnicodeSet@icu_56@@8 ; icu_56::UnicodeSet::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 1364h
		public ??_R0?AVUnicodeSet@icu_56@@@8
; class	icu_56::UnicodeSet `RTTI Type Descriptor'
??_R0?AVUnicodeSet@icu_56@@@8 dd offset	??_7type_info@@6B@ ; DATA XREF:	.rdata$r:0000135Co
					; .rdata$r:icu_56::UnicodeSet::`RTTI Base Class	Descriptor at (0,-1,0,64)'o ...
					; const	type_info::`vftable'
		dd 0
a_?avunicodeset	db '.?AVUnicodeSet@icu_56@@',0
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1384h
		public ??_R3UnicodeSet@icu_56@@8
; icu_56::UnicodeSet::`RTTI Class Hierarchy Descriptor'
??_R3UnicodeSet@icu_56@@8 dd 0		; DATA XREF: .rdata$r:00001360o
					; .rdata$r:000013C8o ...
		dd 1, 6
		dd offset ??_R2UnicodeSet@icu_56@@8 ; icu_56::UnicodeSet::`RTTI	Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1394h
		public ??_R2UnicodeSet@icu_56@@8
; icu_56::UnicodeSet::`RTTI Base Class Array'
??_R2UnicodeSet@icu_56@@8 dd offset ??_R1A@?0A@EA@UnicodeSet@icu_56@@8
					; DATA XREF: .rdata$r:00001390o
					; icu_56::UnicodeSet::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UnicodeFilter@icu_56@@8	; icu_56::UnicodeFilter::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UnicodeFunctor@icu_56@@8 ; icu_56::UnicodeFunctor::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		dd offset ??_R13?0A@EA@UnicodeMatcher@icu_56@@8	; icu_56::UnicodeMatcher::`RTTI	Base Class Descriptor at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 13B0h
		public ??_R1A@?0A@EA@UnicodeSet@icu_56@@8
; icu_56::UnicodeSet::`RTTI Base Class Descriptor at (0, -1, 0,	64)'
??_R1A@?0A@EA@UnicodeSet@icu_56@@8 dd offset ??_R0?AVUnicodeSet@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UnicodeSet::`RTTI	Base Class Array'o
					; icu_56::UnicodeSet `RTTI Type	Descriptor'
		dd 5, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UnicodeSet@icu_56@@8 ; icu_56::UnicodeSet::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 13CCh
		public ??_R1A@?0A@EA@UnicodeFilter@icu_56@@8
; icu_56::UnicodeFilter::`RTTI Base Class Descriptor at	(0, -1,	0, 64)'
??_R1A@?0A@EA@UnicodeFilter@icu_56@@8 dd offset	??_R0?AVUnicodeFilter@icu_56@@@8
					; DATA XREF: .rdata$r:00001398o
					; .rdata$r:icu_56::UnicodeFilter::`RTTI	Base Class Array'o
					; icu_56::UnicodeFilter	`RTTI Type Descriptor'
		dd 4, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UnicodeFilter@icu_56@@8 ; icu_56::UnicodeFilter::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 13E8h
		public ??_R0?AVUnicodeFilter@icu_56@@@8
; class	icu_56::UnicodeFilter `RTTI Type Descriptor'
??_R0?AVUnicodeFilter@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UnicodeFilter::`RTTI Base	Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avunicodefil	db '.?AVUnicodeFilter@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 140Ch
		public ??_R3UnicodeFilter@icu_56@@8
; icu_56::UnicodeFilter::`RTTI Class Hierarchy Descriptor'
??_R3UnicodeFilter@icu_56@@8 dd	0	; DATA XREF: .rdata$r:000013E4o
		dd 1, 5
		dd offset ??_R2UnicodeFilter@icu_56@@8 ; icu_56::UnicodeFilter::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 141Ch
		public ??_R2UnicodeFilter@icu_56@@8
; icu_56::UnicodeFilter::`RTTI Base Class Array'
??_R2UnicodeFilter@icu_56@@8 dd	offset ??_R1A@?0A@EA@UnicodeFilter@icu_56@@8
					; DATA XREF: .rdata$r:00001418o
					; icu_56::UnicodeFilter::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UnicodeFunctor@icu_56@@8 ; icu_56::UnicodeFunctor::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		dd offset ??_R13?0A@EA@UnicodeMatcher@icu_56@@8	; icu_56::UnicodeMatcher::`RTTI	Base Class Descriptor at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1434h
		public ??_R1A@?0A@EA@UnicodeFunctor@icu_56@@8
; icu_56::UnicodeFunctor::`RTTI	Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UnicodeFunctor@icu_56@@8 dd offset ??_R0?AVUnicodeFunctor@icu_56@@@8
					; DATA XREF: .rdata$r:0000139Co
					; .rdata$r:00001420o ...
					; icu_56::UnicodeFunctor `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UnicodeFunctor@icu_56@@8	; icu_56::UnicodeFunctor::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 1450h
		public ??_R0?AVUnicodeFunctor@icu_56@@@8
; class	icu_56::UnicodeFunctor `RTTI Type Descriptor'
??_R0?AVUnicodeFunctor@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UnicodeFunctor::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?avunicodefun	db '.?AVUnicodeFunctor@icu_56@@',0
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1474h
		public ??_R3UnicodeFunctor@icu_56@@8
; icu_56::UnicodeFunctor::`RTTI	Class Hierarchy	Descriptor'
??_R3UnicodeFunctor@icu_56@@8 dd 2 dup(0) ; DATA XREF: .rdata$r:0000144Co
		dd 3
		dd offset ??_R2UnicodeFunctor@icu_56@@8	; icu_56::UnicodeFunctor::`RTTI	Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1484h
		public ??_R2UnicodeFunctor@icu_56@@8
; icu_56::UnicodeFunctor::`RTTI	Base Class Array'
??_R2UnicodeFunctor@icu_56@@8 dd offset	??_R1A@?0A@EA@UnicodeFunctor@icu_56@@8
					; DATA XREF: .rdata$r:00001480o
					; icu_56::UnicodeFunctor::`RTTI	Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1494h
		public ??_R13?0A@EA@UnicodeMatcher@icu_56@@8
; icu_56::UnicodeMatcher::`RTTI	Base Class Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@UnicodeMatcher@icu_56@@8 dd offset	??_R0?AVUnicodeMatcher@icu_56@@@8
					; DATA XREF: .rdata$r:000013A8o
					; .rdata$r:0000142Co
					; icu_56::UnicodeMatcher `RTTI Type Descriptor'
		dd 0
		dd 4, 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UnicodeMatcher@icu_56@@8	; icu_56::UnicodeMatcher::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 14B0h
		public ??_R0?AVUnicodeMatcher@icu_56@@@8
; class	icu_56::UnicodeMatcher `RTTI Type Descriptor'
??_R0?AVUnicodeMatcher@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UnicodeMatcher::`RTTI Base Class Descriptor at (4,-1,0,64)'o
					; .rdata$r:icu_56::UnicodeMatcher::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?avunicodemat	db '.?AVUnicodeMatcher@icu_56@@',0
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 14D4h
		public ??_R3UnicodeMatcher@icu_56@@8
; icu_56::UnicodeMatcher::`RTTI	Class Hierarchy	Descriptor'
??_R3UnicodeMatcher@icu_56@@8 dd 2 dup(0) ; DATA XREF: .rdata$r:000014ACo
					; .rdata$r:00001504o
		dd 1
		dd offset ??_R2UnicodeMatcher@icu_56@@8	; icu_56::UnicodeMatcher::`RTTI	Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 14E4h
		public ??_R2UnicodeMatcher@icu_56@@8
; icu_56::UnicodeMatcher::`RTTI	Base Class Array'
??_R2UnicodeMatcher@icu_56@@8 dd offset	??_R1A@?0A@EA@UnicodeMatcher@icu_56@@8
					; DATA XREF: .rdata$r:000014E0o
					; icu_56::UnicodeMatcher::`RTTI	Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 14ECh
		public ??_R1A@?0A@EA@UnicodeMatcher@icu_56@@8
; icu_56::UnicodeMatcher::`RTTI	Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UnicodeMatcher@icu_56@@8 dd offset ??_R0?AVUnicodeMatcher@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UnicodeMatcher::`RTTI Base Class Array'o
					; icu_56::UnicodeMatcher `RTTI Type Descriptor'
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UnicodeMatcher@icu_56@@8	; icu_56::UnicodeMatcher::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1508h
		public ??_R4UnicodeSet@icu_56@@6BUnicodeMatcher@1@@
; const	icu_56::UnicodeSet::`RTTI Complete Object Locator'{for `icu_56::UnicodeMatcher'}
??_R4UnicodeSet@icu_56@@6BUnicodeMatcher@1@@ dd	0 ; DATA XREF: .rdata:000012C4o
		dd 4, 0
		dd offset ??_R0?AVUnicodeSet@icu_56@@@8	; icu_56::UnicodeSet `RTTI Type	Descriptor'
		dd offset ??_R3UnicodeSet@icu_56@@8 ; icu_56::UnicodeSet::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 151Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::UnicodeSet::`scalar	deleting destructor'(unsigned int)
		public ??_GUnicodeSet@icu_56@@UAEPAXI@Z
??_GUnicodeSet@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??1UnicodeSet@icu_56@@UAE@XZ	; icu_56::UnicodeSet::~UnicodeSet(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_156F
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_156F:				; CODE XREF: icu_56::UnicodeSet::`scalar deleting destructor'(uint)+3Bj
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GUnicodeSet@icu_56@@UAEPAXI@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1588h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utrans_countAvailableIDs_56
_utrans_countAvailableIDs_56 proc near

var_C0		= byte ptr -0C0h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		call	?countAvailableIDs@Transliterator@icu_56@@SAHXZ	; icu_56::Transliterator::countAvailableIDs(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_countAvailableIDs_56 endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 15C0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utrans_getAvailableID_56
_utrans_getAvailableID_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	esi, esp
		push	0
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		push	7FFFFFFFh
		push	0
		mov	edx, [ebp+arg_0]
		push	edx		; int
		call	?getAvailableID@Transliterator@icu_56@@SAABVUnicodeString@2@H@Z	; icu_56::Transliterator::getAvailableID(int)
		add	esp, 4
		mov	ecx, eax
		call	dword ptr ds:__imp_?extract@UnicodeString@icu_56@@QBEHHHPADHW4EInvariant@12@@Z ; icu_56::UnicodeString::extract(int,int,char *,int,icu_56::UnicodeString::EInvariant)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_getAvailableID_56 endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1620h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_utrans_enum_count proc	near		; DATA XREF: .rdata:00000108o

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_4], 0
		jz	short loc_1659
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_165D

loc_1659:				; CODE XREF: _utrans_enum_count+22j
		xor	eax, eax
		jmp	short loc_1663
; ---------------------------------------------------------------------------

loc_165D:				; CODE XREF: _utrans_enum_count+37j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+20h]

loc_1663:				; CODE XREF: _utrans_enum_count+3Bj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_enum_count endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1678h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_utrans_enum_unext proc	near		; DATA XREF: .rdata:0000010Co

var_E4		= byte ptr -0E4h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_8], 0
		jz	short loc_16B1
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_16B5

loc_16B1:				; CODE XREF: _utrans_enum_unext+22j
		xor	eax, eax
		jmp	short loc_172C
; ---------------------------------------------------------------------------

loc_16B5:				; CODE XREF: _utrans_enum_unext+37j
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+1Ch]
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_14]
		cmp	ecx, [eax+20h]
		jge	short loc_171B
		mov	eax, [ebp+var_14]
		push	eax		; int
		call	?getAvailableID@Transliterator@icu_56@@SAABVUnicodeString@2@H@Z	; icu_56::Transliterator::getAvailableID(int)
		add	esp, 4
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	ecx, [ebp+var_8]
		mov	[ecx+1Ch], eax
		cmp	[ebp+arg_4], 0
		jz	short loc_1707
		mov	esi, esp
		mov	ecx, [ebp+var_20] ; this
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+arg_4]
		mov	[ecx], eax

loc_1707:				; CODE XREF: _utrans_enum_unext+76j
		mov	esi, esp
		mov	ecx, [ebp+var_20] ; this
		call	dword ptr ds:__imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ ;	icu_56::UnicodeString::getBuffer(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_172C
; ---------------------------------------------------------------------------

loc_171B:				; CODE XREF: _utrans_enum_unext+55j
		cmp	[ebp+arg_4], 0
		jz	short loc_172A
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0

loc_172A:				; CODE XREF: _utrans_enum_unext+A7j
		xor	eax, eax

loc_172C:				; CODE XREF: _utrans_enum_unext+3Bj
					; _utrans_enum_unext+A1j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_enum_unext endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1740h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_utrans_enum_reset proc	near		; DATA XREF: .rdata:00000114o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_4], 0
		jz	short loc_1779
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_177B

loc_1779:				; CODE XREF: _utrans_enum_reset+22j
		jmp	short loc_1796
; ---------------------------------------------------------------------------

loc_177B:				; CODE XREF: _utrans_enum_reset+37j
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+1Ch], 0
		call	?countAvailableIDs@Transliterator@icu_56@@SAHXZ	; icu_56::Transliterator::countAvailableIDs(void)
		mov	ecx, [ebp+var_8]
		mov	[ecx+20h], eax

loc_1796:				; CODE XREF: _utrans_enum_reset:loc_1779j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_enum_reset endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 17ACh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_utrans_enum_close proc	near		; DATA XREF: .rdata:00000104o

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_free_56
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_enum_close endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 17ECh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utrans_openIDs_56
_utrans_openIDs_56 proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jz	short loc_1825
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_1829

loc_1825:				; CODE XREF: _utrans_openIDs_56+22j
		xor	eax, eax
		jmp	short loc_1870
; ---------------------------------------------------------------------------

loc_1829:				; CODE XREF: _utrans_openIDs_56+37j
		push	24h ; '$'
		call	_uprv_malloc_56
		add	esp, 4
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jnz	short loc_1849
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 7
		xor	eax, eax
		jmp	short loc_1870
; ---------------------------------------------------------------------------

loc_1849:				; CODE XREF: _utrans_openIDs_56+4Ej
		mov	ecx, 7
		mov	esi, offset _utransEnumeration
		mov	edi, [ebp+var_8]
		rep movsd
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+1Ch], 0
		call	?countAvailableIDs@Transliterator@icu_56@@SAHXZ	; icu_56::Transliterator::countAvailableIDs(void)
		mov	ecx, [ebp+var_8]
		mov	[ecx+20h], eax
		mov	eax, [ebp+var_8]

loc_1870:				; CODE XREF: _utrans_openIDs_56+3Bj
					; _utrans_openIDs_56+5Bj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_openIDs_56 endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1884h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl utrans_trans_56(int, void	**, struct UReplaceableCallbacks *, int, int, int)
		public _utrans_trans_56
_utrans_trans_56 proc near

var_D4		= byte ptr -0D4h
var_10		= byte ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D4]
		mov	ecx, 35h ; '5'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_14], 0
		jz	short loc_18BD
		mov	eax, [ebp+arg_14]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_18BF

loc_18BD:				; CODE XREF: _utrans_trans_56+22j
		jmp	short loc_1923
; ---------------------------------------------------------------------------

loc_18BF:				; CODE XREF: _utrans_trans_56+37j
		cmp	[ebp+arg_0], 0
		jz	short loc_18D7
		cmp	[ebp+arg_4], 0
		jz	short loc_18D7
		cmp	[ebp+arg_8], 0
		jz	short loc_18D7
		cmp	[ebp+arg_10], 0
		jnz	short loc_18E2

loc_18D7:				; CODE XREF: _utrans_trans_56+3Fj
					; _utrans_trans_56+45j	...
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 1
		jmp	short loc_1923
; ---------------------------------------------------------------------------

loc_18E2:				; CODE XREF: _utrans_trans_56+51j
		mov	eax, [ebp+arg_8]
		push	eax		; struct UReplaceableCallbacks *
		mov	ecx, [ebp+arg_4]
		push	ecx		; void **
		lea	ecx, [ebp+var_10] ; this
		call	??0ReplaceableGlue@icu_56@@QAE@PAPAXPAUUReplaceableCallbacks@@@Z ; icu_56::ReplaceableGlue::ReplaceableGlue(void * *,UReplaceableCallbacks *)
		mov	esi, esp
		mov	eax, [ebp+arg_10]
		mov	ecx, [eax]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		lea	eax, [ebp+var_10]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+1Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+arg_10]
		mov	[ecx], eax
		lea	ecx, [ebp+var_10] ; this
		call	??1ReplaceableGlue@icu_56@@UAE@XZ ; icu_56::ReplaceableGlue::~ReplaceableGlue(void)

loc_1923:				; CODE XREF: _utrans_trans_56:loc_18BDj
					; _utrans_trans_56+5Cj
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN9
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_trans_56 endp

; ---------------------------------------------------------------------------
$LN9		dd 1			; DATA XREF: _utrans_trans_56+A3o
		dd offset $LN8
$LN8		dd 0FFFFFFF0h, 0Ch	; DATA XREF: .text:0000194Co
		dd offset $LN7
$LN7		db 72h,	0		; DATA XREF: .text:00001958o
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1960h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl utrans_transIncremental_56(int, void **, struct UReplaceableCallbacks *, int, int)
		public _utrans_transIncremental_56
_utrans_transIncremental_56 proc near

var_D4		= byte ptr -0D4h
var_10		= byte ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D4]
		mov	ecx, 35h ; '5'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_10], 0
		jz	short loc_1999
		mov	eax, [ebp+arg_10]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_199B

loc_1999:				; CODE XREF: _utrans_transIncremental_56+22j
		jmp	short loc_19F8
; ---------------------------------------------------------------------------

loc_199B:				; CODE XREF: _utrans_transIncremental_56+37j
		cmp	[ebp+arg_0], 0
		jz	short loc_19B3
		cmp	[ebp+arg_4], 0
		jz	short loc_19B3
		cmp	[ebp+arg_8], 0
		jz	short loc_19B3
		cmp	[ebp+arg_C], 0
		jnz	short loc_19BE

loc_19B3:				; CODE XREF: _utrans_transIncremental_56+3Fj
					; _utrans_transIncremental_56+45j ...
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 1
		jmp	short loc_19F8
; ---------------------------------------------------------------------------

loc_19BE:				; CODE XREF: _utrans_transIncremental_56+51j
		mov	eax, [ebp+arg_8]
		push	eax		; struct UReplaceableCallbacks *
		mov	ecx, [ebp+arg_4]
		push	ecx		; void **
		lea	ecx, [ebp+var_10] ; this
		call	??0ReplaceableGlue@icu_56@@QAE@PAPAXPAUUReplaceableCallbacks@@@Z ; icu_56::ReplaceableGlue::ReplaceableGlue(void * *,UReplaceableCallbacks *)
		mov	esi, esp
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+arg_C]
		push	ecx
		lea	edx, [ebp+var_10]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	edx, [eax]
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+0Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		lea	ecx, [ebp+var_10] ; this
		call	??1ReplaceableGlue@icu_56@@UAE@XZ ; icu_56::ReplaceableGlue::~ReplaceableGlue(void)

loc_19F8:				; CODE XREF: _utrans_transIncremental_56:loc_1999j
					; _utrans_transIncremental_56+5Cj
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN9_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_transIncremental_56 endp

; ---------------------------------------------------------------------------
		align 10h
$LN9_0		dd 1			; DATA XREF: _utrans_transIncremental_56+9Co
		dd offset $LN8_0
$LN8_0		dd 0FFFFFFF0h, 0Ch	; DATA XREF: .text:00001A24o
		dd offset $LN7_0
$LN7_0		db 72h,	0		; DATA XREF: .text:00001A30o
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1A38h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl utrans_transUChars_56(int, wchar_t *, int, int, int, int,	enum UErrorCode	*)
		public _utrans_transUChars_56
_utrans_transUChars_56 proc near

var_11C		= dword	ptr -11Ch
var_54		= byte ptr -54h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		sub	esp, 11Ch
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_11C]
		mov	ecx, 47h ; 'G'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		cmp	[ebp+arg_18], 0
		jz	short loc_1A7B
		mov	eax, [ebp+arg_18]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_1A80

loc_1A7B:				; CODE XREF: _utrans_transUChars_56+2Cj
		jmp	loc_1B5E
; ---------------------------------------------------------------------------

loc_1A80:				; CODE XREF: _utrans_transUChars_56+41j
		cmp	[ebp+arg_0], 0
		jz	short loc_1A92
		cmp	[ebp+arg_4], 0
		jz	short loc_1A92
		cmp	[ebp+arg_14], 0
		jnz	short loc_1AA0

loc_1A92:				; CODE XREF: _utrans_transUChars_56+4Cj
					; _utrans_transUChars_56+52j
		mov	eax, [ebp+arg_18]
		mov	dword ptr [eax], 1
		jmp	loc_1B5E
; ---------------------------------------------------------------------------

loc_1AA0:				; CODE XREF: _utrans_transUChars_56+58j
		cmp	[ebp+arg_8], 0
		jz	short loc_1ABB
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0
		jl	short loc_1ABB
		mov	ecx, [ebp+arg_8]
		mov	edx, [ecx]
		mov	[ebp+var_11C], edx
		jmp	short loc_1ACD
; ---------------------------------------------------------------------------

loc_1ABB:				; CODE XREF: _utrans_transUChars_56+6Cj
					; _utrans_transUChars_56+74j
		mov	eax, [ebp+arg_4]
		push	eax
		call	_u_strlen_56
		add	esp, 4
		mov	[ebp+var_11C], eax

loc_1ACD:				; CODE XREF: _utrans_transUChars_56+81j
		mov	ecx, [ebp+var_11C]
		mov	[ebp+var_C], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_C]
		push	eax		; int
		mov	ecx, [ebp+var_C]
		push	ecx		; int
		mov	edx, [ebp+arg_4]
		push	edx		; wchar_t *
		lea	ecx, [ebp+var_54] ; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@PA_WHH@Z ; icu_56::UnicodeString::UnicodeString(wchar_t	*,int,int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+arg_14]
		mov	ecx, [eax]
		push	ecx
		mov	edx, [ebp+arg_10]
		push	edx
		lea	eax, [ebp+var_54]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+1Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+arg_14]
		mov	[ecx], eax
		mov	esi, esp
		mov	eax, [ebp+arg_18]
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+arg_C]
		push	ecx		; int
		mov	edx, [ebp+arg_4]
		push	edx		; wchar_t *
		lea	ecx, [ebp+var_54] ; this
		call	dword ptr ds:__imp_?extract@UnicodeString@icu_56@@QBEHPA_WHAAW4UErrorCode@@@Z ;	icu_56::UnicodeString::extract(wchar_t *,int,UErrorCode	&)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_C], eax
		cmp	[ebp+arg_8], 0
		jz	short loc_1B4C
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+var_C]
		mov	[eax], ecx

loc_1B4C:				; CODE XREF: _utrans_transUChars_56+10Aj
		mov	esi, esp
		lea	ecx, [ebp+var_54] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1B5E:				; CODE XREF: _utrans_transUChars_56:loc_1A7Bj
					; _utrans_transUChars_56+63j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN12_1
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 11Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_transUChars_56 endp

; ---------------------------------------------------------------------------
		align 10h
$LN12_1		dd 1			; DATA XREF: _utrans_transUChars_56+12Ao
		dd offset $LN11_0
$LN11_0		dd 0FFFFFFACh, 40h	; DATA XREF: .text:00001B94o
		dd offset $LN10
$LN10		dd 727473h		; DATA XREF: .text:00001BA0o
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1BA8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl utrans_transIncrementalUChars_56(int, wchar_t *, int, int, int, enum UErrorCode *)
		public _utrans_transIncrementalUChars_56
_utrans_transIncrementalUChars_56 proc near

var_11C		= dword	ptr -11Ch
var_54		= byte ptr -54h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 11Ch
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_11C]
		mov	ecx, 47h ; 'G'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		cmp	[ebp+arg_14], 0
		jz	short loc_1BEB
		mov	eax, [ebp+arg_14]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_1BF0

loc_1BEB:				; CODE XREF: _utrans_transIncrementalUChars_56+2Cj
		jmp	loc_1CC7
; ---------------------------------------------------------------------------

loc_1BF0:				; CODE XREF: _utrans_transIncrementalUChars_56+41j
		cmp	[ebp+arg_0], 0
		jz	short loc_1C02
		cmp	[ebp+arg_4], 0
		jz	short loc_1C02
		cmp	[ebp+arg_10], 0
		jnz	short loc_1C10

loc_1C02:				; CODE XREF: _utrans_transIncrementalUChars_56+4Cj
					; _utrans_transIncrementalUChars_56+52j
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 1
		jmp	loc_1CC7
; ---------------------------------------------------------------------------

loc_1C10:				; CODE XREF: _utrans_transIncrementalUChars_56+58j
		cmp	[ebp+arg_8], 0
		jz	short loc_1C2B
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0
		jl	short loc_1C2B
		mov	ecx, [ebp+arg_8]
		mov	edx, [ecx]
		mov	[ebp+var_11C], edx
		jmp	short loc_1C3D
; ---------------------------------------------------------------------------

loc_1C2B:				; CODE XREF: _utrans_transIncrementalUChars_56+6Cj
					; _utrans_transIncrementalUChars_56+74j
		mov	eax, [ebp+arg_4]
		push	eax
		call	_u_strlen_56
		add	esp, 4
		mov	[ebp+var_11C], eax

loc_1C3D:				; CODE XREF: _utrans_transIncrementalUChars_56+81j
		mov	ecx, [ebp+var_11C]
		mov	[ebp+var_C], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_C]
		push	eax		; int
		mov	ecx, [ebp+var_C]
		push	ecx		; int
		mov	edx, [ebp+arg_4]
		push	edx		; wchar_t *
		lea	ecx, [ebp+var_54] ; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@PA_WHH@Z ; icu_56::UnicodeString::UnicodeString(wchar_t	*,int,int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+arg_10]
		push	ecx
		lea	edx, [ebp+var_54]
		push	edx
		mov	eax, [ebp+arg_0]
		mov	edx, [eax]
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+0Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+arg_14]
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+arg_C]
		push	ecx		; int
		mov	edx, [ebp+arg_4]
		push	edx		; wchar_t *
		lea	ecx, [ebp+var_54] ; this
		call	dword ptr ds:__imp_?extract@UnicodeString@icu_56@@QBEHPA_WHAAW4UErrorCode@@@Z ;	icu_56::UnicodeString::extract(wchar_t *,int,UErrorCode	&)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_C], eax
		cmp	[ebp+arg_8], 0
		jz	short loc_1CB5
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+var_C]
		mov	[eax], ecx

loc_1CB5:				; CODE XREF: _utrans_transIncrementalUChars_56+103j
		mov	esi, esp
		lea	ecx, [ebp+var_54] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1CC7:				; CODE XREF: _utrans_transIncrementalUChars_56:loc_1BEBj
					; _utrans_transIncrementalUChars_56+63j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN12_2
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 11Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_transIncrementalUChars_56 endp

; ---------------------------------------------------------------------------
		align 4
$LN12_2		dd 1			; DATA XREF: _utrans_transIncrementalUChars_56+123o
		dd offset $LN11_1
$LN11_1		dd 0FFFFFFACh, 40h	; DATA XREF: .text:00001CFCo
		dd offset $LN10_0
$LN10_0		dd 727473h		; DATA XREF: .text:00001D08o
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1D10h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl utrans_toRules_56(int, char, wchar_t *, int, enum	UErrorCode *)
		public _utrans_toRules_56
_utrans_toRules_56 proc	near

var_11C		= dword	ptr -11Ch
var_114		= dword	ptr -114h
var_48		= byte ptr -48h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 11Ch
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_11C]
		mov	ecx, 47h ; 'G'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		cmp	[ebp+arg_10], 0
		jz	short loc_1D53
		mov	eax, [ebp+arg_10]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_1D5A

loc_1D53:				; CODE XREF: _utrans_toRules_56+2Cj
		xor	eax, eax
		jmp	loc_1E22
; ---------------------------------------------------------------------------

loc_1D5A:				; CODE XREF: _utrans_toRules_56+41j
		cmp	[ebp+arg_8], 0
		jnz	short loc_1D71
		xor	eax, eax
		cmp	[ebp+arg_C], 0
		setnz	al
		mov	[ebp+var_11C], eax
		jmp	short loc_1D80
; ---------------------------------------------------------------------------

loc_1D71:				; CODE XREF: _utrans_toRules_56+4Ej
		xor	ecx, ecx
		cmp	[ebp+arg_C], 0
		setl	cl
		mov	[ebp+var_11C], ecx

loc_1D80:				; CODE XREF: _utrans_toRules_56+5Fj
		cmp	[ebp+var_11C], 0
		jz	short loc_1D99
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 1
		xor	eax, eax
		jmp	loc_1E22
; ---------------------------------------------------------------------------

loc_1D99:				; CODE XREF: _utrans_toRules_56+77j
		mov	esi, esp
		lea	ecx, [ebp+var_48] ; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@XZ ; icu_56::UnicodeString::UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+arg_C]
		push	eax		; int
		push	0		; int
		mov	ecx, [ebp+arg_8]
		push	ecx		; wchar_t *
		lea	ecx, [ebp+var_48] ; this
		call	dword ptr ds:__imp_?setTo@UnicodeString@icu_56@@QAEAAV12@PA_WHH@Z ; icu_56::UnicodeString::setTo(wchar_t *,int,int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		movzx	eax, [ebp+arg_4]
		push	eax
		lea	ecx, [ebp+var_48]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+34h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+arg_10]
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+arg_C]
		push	ecx		; int
		mov	edx, [ebp+arg_8]
		push	edx		; wchar_t *
		lea	ecx, [ebp+var_48] ; this
		call	dword ptr ds:__imp_?extract@UnicodeString@icu_56@@QBEHPA_WHAAW4UErrorCode@@@Z ;	icu_56::UnicodeString::extract(wchar_t *,int,UErrorCode	&)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_114], eax
		mov	esi, esp
		lea	ecx, [ebp+var_48] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_114]

loc_1E22:				; CODE XREF: _utrans_toRules_56+45j
					; _utrans_toRules_56+84j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN10_1
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 11Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_toRules_56 endp

; ---------------------------------------------------------------------------
		align 4
$LN10_1		dd 1			; DATA XREF: _utrans_toRules_56+116o
		dd offset $LN9_1
$LN9_1		dd 0FFFFFFB8h, 40h	; DATA XREF: .text:00001E58o
		dd offset $LN8_1
$LN8_1		dd 736572h		; DATA XREF: .text:00001E64o
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1E6Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl utrans_getSourceSet_56(icu_56::Transliterator *, char, struct icu_56::UnicodeSet *, int)
		public _utrans_getSourceSet_56
_utrans_getSourceSet_56	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_C], 0
		jz	short loc_1EA5
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_1EAA

loc_1EA5:				; CODE XREF: _utrans_getSourceSet_56+22j
		mov	eax, [ebp+arg_8]
		jmp	short loc_1EEB
; ---------------------------------------------------------------------------

loc_1EAA:				; CODE XREF: _utrans_getSourceSet_56+37j
		cmp	[ebp+arg_8], 0
		jnz	short loc_1EB8
		call	_uset_openEmpty_56
		mov	[ebp+arg_8], eax

loc_1EB8:				; CODE XREF: _utrans_getSourceSet_56+42j
		movsx	eax, [ebp+arg_4]
		test	eax, eax
		jz	short loc_1EDC
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+38h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_1EE8
; ---------------------------------------------------------------------------

loc_1EDC:				; CODE XREF: _utrans_getSourceSet_56+52j
		mov	eax, [ebp+arg_8]
		push	eax		; struct icu_56::UnicodeSet *
		mov	ecx, [ebp+arg_0] ; this
		call	?getSourceSet@Transliterator@icu_56@@QBEAAVUnicodeSet@2@AAV32@@Z ; icu_56::Transliterator::getSourceSet(icu_56::UnicodeSet &)

loc_1EE8:				; CODE XREF: _utrans_getSourceSet_56+6Ej
		mov	eax, [ebp+arg_8]

loc_1EEB:				; CODE XREF: _utrans_getSourceSet_56+3Cj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utrans_getSourceSet_56	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1F00h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; [thunk]:public: virtual void * __thiscall icu_56::UnicodeSet::`vector	deleting destructor'`adjustor{4}' (unsigned int)
		public ??_EUnicodeSet@icu_56@@W3AEPAXI@Z
??_EUnicodeSet@icu_56@@W3AEPAXI@Z proc near
					; DATA XREF: .rdata:const icu_56::UnicodeSet::`local vftable'{for `icu_56::UnicodeMatcher'}o
		sub	ecx, 4
		jmp	??_EUnicodeSet@icu_56@@UAEPAXI@Z ; icu_56::UnicodeSet::`vector deleting	destructor'(uint)
??_EUnicodeSet@icu_56@@W3AEPAXI@Z endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _uenum_nextDefault_56:near ; DATA	XREF: .rdata:00000110o
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; signed __int8	__thiscall icu_56::UnicodeString::truncate(icu_56::UnicodeString *__hidden this, int)
		extrn __imp_?truncate@UnicodeString@icu_56@@QAECH@Z:near
					; CODE XREF: icu_56::Transliterator::setID(icu_56::UnicodeString const &)+74p
					; DATA XREF: icu_56::Transliterator::setID(icu_56::UnicodeString const &)+74r
; int __thiscall icu_56::UnicodeString::length(icu_56::UnicodeString *__hidden this)
		extrn __imp_?length@UnicodeString@icu_56@@QBEHXZ:near
					; CODE XREF: icu_56::Transliterator::setID(icu_56::UnicodeString const &)+5Bp
					; icu_56::ReplaceableGlue::handleReplaceBetween(int,int,icu_56::UnicodeString const &)+28p ...
; struct icu_56::UnicodeString *__thiscall icu_56::UnicodeString::append(icu_56::UnicodeString *__hidden this, wchar_t)
		extrn __imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z:near
					; CODE XREF: icu_56::Transliterator::setID(icu_56::UnicodeString const &)+46p
					; DATA XREF: icu_56::Transliterator::setID(icu_56::UnicodeString const &)+46r
; __declspec(dllimport)	public:	class icu_56::UnicodeString & __thiscall icu_56::UnicodeString::operator=(class	icu_56::UnicodeString const &)
		extrn __imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z:near
					; CODE XREF: icu_56::Transliterator::setID(icu_56::UnicodeString const &)+2Fp
					; DATA XREF: icu_56::Transliterator::setID(icu_56::UnicodeString const &)+2Fr
		extrn __RTC_CheckEsp:near
					; CODE XREF: icu_56::Transliterator::setID(icu_56::UnicodeString const &)+37p
					; icu_56::Transliterator::setID(icu_56::UnicodeString const &)+4Ep ...
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near
					; CODE XREF: icu_56::Transliterator::integerToken(int)+31p
					; icu_56::Transliterator::pointerToken(void *)+31p ...
; _DWORD __thiscall icu_56::Replaceable::Replaceable(icu_56::Replaceable *__hidden this)
		extrn __imp_??0Replaceable@icu_56@@IAE@XZ:near
					; CODE XREF: icu_56::ReplaceableGlue::ReplaceableGlue(void * *,UReplaceableCallbacks *)+28p
					; DATA XREF: icu_56::ReplaceableGlue::ReplaceableGlue(void * *,UReplaceableCallbacks *)+28r
; const	type_info::`vftable'
		extrn ??_7type_info@@6B@:near
					; DATA XREF: .data:icu_56::ReplaceableGlue `RTTI Type Descriptor'o
					; .data:icu_56::Replaceable `RTTI Type Descriptor'o ...
; public: virtual void * __thiscall icu_56::ReplaceableGlue::`scalar deleting destructor'(unsigned int)
		extrn ??_GReplaceableGlue@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::ReplaceableGlue::`vector deleting destructor'(unsigned int)
		extrn ??_EReplaceableGlue@icu_56@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:const icu_56::ReplaceableGlue::`vftable'o
; public: virtual signed char __thiscall icu_56::Replaceable::hasMetaData(void)const
		extrn ?hasMetaData@Replaceable@icu_56@@UBECXZ:near
					; DATA XREF: .rdata:000003F0o
; public: virtual class	icu_56::Replaceable * __thiscall icu_56::Replaceable::clone(void)const
		extrn ?clone@Replaceable@icu_56@@UBEPAV12@XZ:near
					; DATA XREF: .rdata:000003F4o
; void __cdecl icu_56::UMemory::operator delete(void *)
		extrn __imp_??3UMemory@icu_56@@SAXPAX@Z:near
					; CODE XREF: icu_56::ReplaceableGlue::`scalar deleting destructor'(uint)+39p
					; icu_56::UnicodeSet::`scalar deleting destructor'(uint)+43p
					; DATA XREF: ...
; _DWORD __thiscall icu_56::Replaceable::~Replaceable(icu_56::Replaceable *__hidden this)
		extrn __imp_??1Replaceable@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::ReplaceableGlue::~ReplaceableGlue(void)+31p
					; DATA XREF: icu_56::ReplaceableGlue::~ReplaceableGlue(void)+31r
; const	wchar_t	*__thiscall icu_56::UnicodeString::getBuffer(icu_56::UnicodeString *__hidden this)
		extrn __imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ:near
					; CODE XREF: icu_56::ReplaceableGlue::handleReplaceBetween(int,int,icu_56::UnicodeString const &)+3Dp
					; _utrans_open_56+6Ep ...
; void __thiscall icu_56::UnicodeString::releaseBuffer(icu_56::UnicodeString *__hidden this, int)
		extrn __imp_?releaseBuffer@UnicodeString@icu_56@@QAEXH@Z:near
					; CODE XREF: icu_56::ReplaceableGlue::extractBetween(int,int,icu_56::UnicodeString &)+6Fp
					; DATA XREF: icu_56::ReplaceableGlue::extractBetween(int,int,icu_56::UnicodeString &)+6Fr
; wchar_t *__thiscall icu_56::UnicodeString::getBuffer(icu_56::UnicodeString *__hidden this, int)
		extrn __imp_?getBuffer@UnicodeString@icu_56@@QAEPA_WH@Z:near
					; CODE XREF: icu_56::ReplaceableGlue::extractBetween(int,int,icu_56::UnicodeString &)+2Fp
					; DATA XREF: icu_56::ReplaceableGlue::extractBetween(int,int,icu_56::UnicodeString &)+2Fr
; struct icu_56::Transliterator	*__cdecl __high	static icu_56::Transliterator::createFromRules(const struct icu_56::UnicodeString *, const struct icu_56::UnicodeString	*, enum	UTransDirection, struct	UParseError *, enum UErrorCode *)
		extrn ?createFromRules@Transliterator@icu_56@@SAPAV12@ABVUnicodeString@2@0W4UTransDirection@@AAUUParseError@@AAW4UErrorCode@@@Z:near
					; CODE XREF: _utrans_openU_56+185p
; _DWORD __thiscall icu_56::UnicodeString::~UnicodeString(icu_56::UnicodeString	*__hidden this)
		extrn __imp_??1UnicodeString@icu_56@@UAE@XZ:near
					; CODE XREF: _utrans_openU_56+F0p
					; _utrans_openU_56+11Cp ...
; struct icu_56::Transliterator	*__cdecl __high	static icu_56::Transliterator::createInstance(const struct icu_56::UnicodeString *, enum UTransDirection, struct UParseError *,	enum UErrorCode	*)
		extrn ?createInstance@Transliterator@icu_56@@SAPAV12@ABVUnicodeString@2@W4UTransDirection@@AAUUParseError@@AAW4UErrorCode@@@Z:near
					; CODE XREF: _utrans_openU_56+BBp
; _DWORD __thiscall icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString *__hidden this, signed __int8, const wchar_t *, int)
		extrn __imp_??0UnicodeString@icu_56@@QAE@CPB_WH@Z:near
					; CODE XREF: _utrans_openU_56+87p
					; _utrans_openU_56+154p ...
		extrn ___security_cookie:near ;	DATA XREF: _utrans_openU_56+1Er
					; _utrans_open_56+1Er ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _utrans_openU_56+250p
					; _utrans_open_56+BBp ...
; _DWORD __thiscall __high icu_56::UnicodeString::UnicodeString(const char *, int, enum	icu_56::UnicodeString::EInvariant)
		extrn __imp_??0UnicodeString@icu_56@@QAE@PBDHW4EInvariant@01@@Z:near
					; CODE XREF: _utrans_open_56+35p
					; _utrans_unregister_56+35p
					; DATA XREF: ...
; struct icu_56::Transliterator	*__thiscall icu_56::Transliterator::createInverse(icu_56::Transliterator *__hidden this, enum UErrorCode *)
		extrn ?createInverse@Transliterator@icu_56@@QBEPAV12@AAW4UErrorCode@@@Z:near
					; CODE XREF: _utrans_openInverse_56+44p
; int __thiscall __high	icu_56::UnicodeString::extract(int, int, char *, int, enum icu_56::UnicodeString::EInvariant)
		extrn __imp_?extract@UnicodeString@icu_56@@QBEHHHPADHW4EInvariant@12@@Z:near
					; CODE XREF: _utrans_getID_56+49p
					; _utrans_getAvailableID_56+3Fp
					; DATA XREF: ...
; void __cdecl static icu_56::Transliterator::registerInstance(struct icu_56::Transliterator *)
		extrn ?registerInstance@Transliterator@icu_56@@SAXPAV12@@Z:near
					; CODE XREF: _utrans_register_56+3Fp
; void __cdecl static icu_56::Transliterator::unregister(const struct icu_56::UnicodeString *)
		extrn ?unregister@Transliterator@icu_56@@SAXABVUnicodeString@2@@Z:near
					; CODE XREF: _utrans_unregisterID_56+51p
					; _utrans_unregister_56+46p
; void __thiscall icu_56::Transliterator::adoptFilter(icu_56::Transliterator *__hidden this, struct icu_56::UnicodeFilter *)
		extrn ?adoptFilter@Transliterator@icu_56@@QAEXPAVUnicodeFilter@2@@Z:near
					; CODE XREF: _utrans_setFilter_56+1BAp
; _DWORD __thiscall icu_56::UnicodeSet::UnicodeSet(icu_56::UnicodeSet *__hidden	this, const struct icu_56::UnicodeString *, enum UErrorCode *)
		extrn __imp_??0UnicodeSet@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z:near
					; CODE XREF: _utrans_setFilter_56+BFp
					; DATA XREF: _utrans_setFilter_56+BFr
; void *__cdecl	static icu_56::UMemory::operator new(unsigned int)
		extrn __imp_??2UMemory@icu_56@@SAPAXI@Z:near
					; CODE XREF: _utrans_setFilter_56+90p
					; DATA XREF: _utrans_setFilter_56+90r
; public: virtual void * __thiscall icu_56::UnicodeSet::`scalar	deleting destructor'(unsigned int)
		extrn ??_GUnicodeSet@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::UnicodeSet::`vector	deleting destructor'(unsigned int)
		extrn ??_EUnicodeSet@icu_56@@UAEPAXI@Z:near ; weak
					; CODE XREF: [thunk]:icu_56::UnicodeSet::`vector deleting destructor'`adjustor{4}' (uint)+3j
					; DATA XREF: .rdata:const icu_56::UnicodeSet::`local vftable'{for `icu_56::UnicodeFunctor'}o
; public: virtual void * __thiscall icu_56::UnicodeSet::getDynamicClassID(void)const
		extrn ?getDynamicClassID@UnicodeSet@icu_56@@UBEPAXXZ:near
					; DATA XREF: .rdata:000012E4o
; public: virtual class	icu_56::UnicodeFunctor * __thiscall icu_56::UnicodeSet::clone(void)const
		extrn ?clone@UnicodeSet@icu_56@@UBEPAVUnicodeFunctor@2@XZ:near
					; DATA XREF: .rdata:000012E8o
; public: virtual class	icu_56::UnicodeMatcher * __thiscall icu_56::UnicodeFilter::toMatcher(void)const
		extrn ?toMatcher@UnicodeFilter@icu_56@@UBEPAVUnicodeMatcher@2@XZ:near
					; DATA XREF: .rdata:000012ECo
; public: virtual class	icu_56::UnicodeReplacer	* __thiscall icu_56::UnicodeFunctor::toReplacer(void)const
		extrn ?toReplacer@UnicodeFunctor@icu_56@@UBEPAVUnicodeReplacer@2@XZ:near
					; DATA XREF: .rdata:000012F0o
; public: virtual void __thiscall icu_56::UnicodeFilter::setData(class icu_56::TransliterationRuleData const *)
		extrn ?setData@UnicodeFilter@icu_56@@UAEXPBVTransliterationRuleData@2@@Z:near
					; DATA XREF: .rdata:000012F4o
; public: virtual signed char __thiscall icu_56::UnicodeSet::contains(int)const
		extrn ?contains@UnicodeSet@icu_56@@UBECH@Z:near
					; DATA XREF: .rdata:000012F8o
; public: virtual signed char __thiscall icu_56::UnicodeSet::operator==(class icu_56::UnicodeSet const &)const
		extrn ??8UnicodeSet@icu_56@@UBECABV01@@Z:near ;	DATA XREF: .rdata:000012FCo
; public: virtual int __thiscall icu_56::UnicodeSet::hashCode(void)const
		extrn ?hashCode@UnicodeSet@icu_56@@UBEHXZ:near ; DATA XREF: .rdata:00001300o
; public: virtual int __thiscall icu_56::UnicodeSet::size(void)const
		extrn ?size@UnicodeSet@icu_56@@UBEHXZ:near ; DATA XREF:	.rdata:00001304o
; public: virtual signed char __thiscall icu_56::UnicodeSet::isEmpty(void)const
		extrn ?isEmpty@UnicodeSet@icu_56@@UBECXZ:near ;	DATA XREF: .rdata:00001308o
; public: virtual signed char __thiscall icu_56::UnicodeSet::contains(int, int)const
		extrn ?contains@UnicodeSet@icu_56@@UBECHH@Z:near
					; DATA XREF: .rdata:0000130Co
; public: virtual signed char __thiscall icu_56::UnicodeSet::containsAll(class icu_56::UnicodeSet const	&)const
		extrn ?containsAll@UnicodeSet@icu_56@@UBECABV12@@Z:near
					; DATA XREF: .rdata:00001310o
; public: virtual class	icu_56::UnicodeSet & __thiscall	icu_56::UnicodeSet::add(int, int)
		extrn ?add@UnicodeSet@icu_56@@UAEAAV12@HH@Z:near
					; DATA XREF: .rdata:00001314o
; public: virtual class	icu_56::UnicodeSet & __thiscall	icu_56::UnicodeSet::addAll(class icu_56::UnicodeSet const &)
		extrn ?addAll@UnicodeSet@icu_56@@UAEAAV12@ABV12@@Z:near
					; DATA XREF: .rdata:00001318o
; public: virtual class	icu_56::UnicodeSet & __thiscall	icu_56::UnicodeSet::retainAll(class icu_56::UnicodeSet const &)
		extrn ?retainAll@UnicodeSet@icu_56@@UAEAAV12@ABV12@@Z:near
					; DATA XREF: .rdata:0000131Co
; public: virtual class	icu_56::UnicodeSet & __thiscall	icu_56::UnicodeSet::complementAll(class	icu_56::UnicodeSet const &)
		extrn ?complementAll@UnicodeSet@icu_56@@UAEAAV12@ABV12@@Z:near
					; DATA XREF: .rdata:00001320o
; public: virtual class	icu_56::UnicodeSet & __thiscall	icu_56::UnicodeSet::removeAll(class icu_56::UnicodeSet const &)
		extrn ?removeAll@UnicodeSet@icu_56@@UAEAAV12@ABV12@@Z:near
					; DATA XREF: .rdata:00001324o
; public: virtual class	icu_56::UnicodeSet & __thiscall	icu_56::UnicodeSet::retain(int,	int)
		extrn ?retain@UnicodeSet@icu_56@@UAEAAV12@HH@Z:near
					; DATA XREF: .rdata:00001328o
; public: virtual class	icu_56::UnicodeSet & __thiscall	icu_56::UnicodeSet::remove(int,	int)
		extrn ?remove@UnicodeSet@icu_56@@UAEAAV12@HH@Z:near
					; DATA XREF: .rdata:0000132Co
; public: virtual class	icu_56::UnicodeSet & __thiscall	icu_56::UnicodeSet::complement(int, int)
		extrn ?complement@UnicodeSet@icu_56@@UAEAAV12@HH@Z:near
					; DATA XREF: .rdata:00001330o
; public: virtual class	icu_56::UnicodeSet & __thiscall	icu_56::UnicodeSet::complement(void)
		extrn ?complement@UnicodeSet@icu_56@@UAEAAV12@XZ:near
					; DATA XREF: .rdata:00001334o
; public: virtual class	icu_56::UnicodeSet & __thiscall	icu_56::UnicodeSet::clear(void)
		extrn ?clear@UnicodeSet@icu_56@@UAEAAV12@XZ:near
					; DATA XREF: .rdata:00001338o
; public: virtual class	icu_56::UnicodeSet & __thiscall	icu_56::UnicodeSet::removeAllStrings(void)
		extrn ?removeAllStrings@UnicodeSet@icu_56@@UAEAAV12@XZ:near
					; DATA XREF: .rdata:0000133Co
; public: virtual int __thiscall icu_56::UnicodeSet::getRangeCount(void)const
		extrn ?getRangeCount@UnicodeSet@icu_56@@UBEHXZ:near
					; DATA XREF: .rdata:00001340o
; public: virtual int __thiscall icu_56::UnicodeSet::getRangeStart(int)const
		extrn ?getRangeStart@UnicodeSet@icu_56@@UBEHH@Z:near
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::fixedo
					; .rdata:00001344o
; public: virtual int __thiscall icu_56::UnicodeSet::getRangeEnd(int)const
		extrn ?getRangeEnd@UnicodeSet@icu_56@@UBEHH@Z:near
					; DATA XREF: .rdata:00001348o
; public: virtual class	icu_56::UnicodeSet & __thiscall	icu_56::UnicodeSet::compact(void)
		extrn ?compact@UnicodeSet@icu_56@@UAEAAV12@XZ:near
					; DATA XREF: .rdata:0000134Co
; public: virtual enum	icu_56::UMatchDegree __thiscall	icu_56::UnicodeSet::matches(class icu_56::Replaceable const &, int &, int, signed char)
		extrn ?matches@UnicodeSet@icu_56@@UAE?AW4UMatchDegree@2@ABVReplaceable@2@AAHHC@Z:near
					; DATA XREF: .rdata:000012CCo
; public: virtual class	icu_56::UnicodeString &	__thiscall icu_56::UnicodeSet::toPattern(class icu_56::UnicodeString &,	signed char)const
		extrn ?toPattern@UnicodeSet@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z:near
					; DATA XREF: .rdata:000012D0o
; private: virtual signed char __thiscall icu_56::UnicodeSet::matchesIndexValue(unsigned char)const
		extrn ?matchesIndexValue@UnicodeSet@icu_56@@EBECE@Z:near
					; DATA XREF: .rdata:000012D4o
; public: virtual void __thiscall icu_56::UnicodeSet::addMatchSetTo(class icu_56::UnicodeSet &)const
		extrn ?addMatchSetTo@UnicodeSet@icu_56@@UBEXAAV12@@Z:near
					; DATA XREF: .rdata:000012D8o
; _DWORD __thiscall icu_56::UnicodeSet::~UnicodeSet(icu_56::UnicodeSet *__hidden this)
		extrn __imp_??1UnicodeSet@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::UnicodeSet::`scalar deleting destructor'(uint)+28p
					; DATA XREF: icu_56::UnicodeSet::`scalar deleting destructor'(uint)+28r
; int __cdecl static icu_56::Transliterator::countAvailableIDs()
		extrn ?countAvailableIDs@Transliterator@icu_56@@SAHXZ:near
					; CODE XREF: _utrans_countAvailableIDs_56+1Ep
					; _utrans_enum_reset+4Bp ...
; const	struct icu_56::UnicodeString *__cdecl static icu_56::Transliterator::getAvailableID(int)
		extrn ?getAvailableID@Transliterator@icu_56@@SAABVUnicodeString@2@H@Z:near
					; CODE XREF: _utrans_getAvailableID_56+35p
					; _utrans_enum_unext+5Bp
		extrn _uprv_free_56:near ; CODE	XREF: _utrans_enum_close+22p
		extrn _uprv_malloc_56:near ; CODE XREF:	_utrans_openIDs_56+3Fp
; int __thiscall icu_56::UnicodeString::extract(icu_56::UnicodeString *__hidden	this, wchar_t *, int, enum UErrorCode *)
		extrn __imp_?extract@UnicodeString@icu_56@@QBEHPA_WHAAW4UErrorCode@@@Z:near
					; CODE XREF: _utrans_transUChars_56+F6p
					; _utrans_transIncrementalUChars_56+EFp ...
; _DWORD __thiscall icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString *__hidden this, wchar_t *, int, int)
		extrn __imp_??0UnicodeString@icu_56@@QAE@PA_WHH@Z:near
					; CODE XREF: _utrans_transUChars_56+AFp
					; _utrans_transIncrementalUChars_56+AFp
					; DATA XREF: ...
		extrn _u_strlen_56:near	; CODE XREF: _utrans_transUChars_56+87p
					; _utrans_transIncrementalUChars_56+87p
; struct icu_56::UnicodeString *__thiscall icu_56::UnicodeString::setTo(icu_56::UnicodeString *__hidden	this, wchar_t *, int, int)
		extrn __imp_?setTo@UnicodeString@icu_56@@QAEAAV12@PA_WHH@Z:near
					; CODE XREF: _utrans_toRules_56+AAp
					; DATA XREF: _utrans_toRules_56+AAr
; _DWORD __thiscall icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString *__hidden this)
		extrn __imp_??0UnicodeString@icu_56@@QAE@XZ:near
					; CODE XREF: _utrans_toRules_56+8Ep
					; DATA XREF: _utrans_toRules_56+8Er
; struct icu_56::UnicodeSet *__thiscall	icu_56::Transliterator::getSourceSet(icu_56::Transliterator *__hidden this, struct icu_56::UnicodeSet *)
		extrn ?getSourceSet@Transliterator@icu_56@@QBEAAVUnicodeSet@2@AAV32@@Z:near
					; CODE XREF: _utrans_getSourceSet_56+77p
		extrn _uset_openEmpty_56:near ;	CODE XREF: _utrans_getSourceSet_56+44p


		end
