;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	B051A14BB5098D6FA1620FED0B96DF2C
; Input	CRC32 :	8DF2E94A

; File Name   :	D:\compspace\objfiles\firefox\i18n\choicfmt.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		public ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
; public: static bool const std::tr1::integral_constant<bool, 0>::value
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	db 0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 4
		public ?value@?$integral_constant@_N$00@tr1@std@@2_NB
; public: static bool const std::tr1::integral_constant<bool, 1>::value
?value@?$integral_constant@_N$00@tr1@std@@2_NB db 1
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8
		public ?value@?$integral_constant@I$0A@@tr1@std@@2IB
; public: static unsigned int const std::tr1::integral_constant<unsigned int, 0>::value
?value@?$integral_constant@I$0A@@tr1@std@@2IB dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0Ch
		public ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
; public: static int const std::_Arithmetic_traits<bool>::_Rank
?_Rank@?$_Arithmetic_traits@_N@std@@2HB	dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10h
		public ?_Rank@?$_Arithmetic_traits@D@std@@2HB
; public: static int const std::_Arithmetic_traits<char>::_Rank
?_Rank@?$_Arithmetic_traits@D@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14h
		public ?_Rank@?$_Arithmetic_traits@C@std@@2HB
; public: static int const std::_Arithmetic_traits<signed char>::_Rank
?_Rank@?$_Arithmetic_traits@C@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18h
		public ?_Rank@?$_Arithmetic_traits@E@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned char>::_Rank
?_Rank@?$_Arithmetic_traits@E@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1Ch
		public ?_Rank@?$_Arithmetic_traits@F@std@@2HB
; public: static int const std::_Arithmetic_traits<short>::_Rank
?_Rank@?$_Arithmetic_traits@F@std@@2HB dd 3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 20h
		public ?_Rank@?$_Arithmetic_traits@G@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned short>::_Rank
?_Rank@?$_Arithmetic_traits@G@std@@2HB dd 3
					; DATA XREF: .rdata:int	const std::_Locbase<int>::messageso
					; .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::showposo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 24h
		public ?_Rank@?$_Arithmetic_traits@H@std@@2HB
; public: static int const std::_Arithmetic_traits<int>::_Rank
?_Rank@?$_Arithmetic_traits@H@std@@2HB dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 28h
		public ?_Rank@?$_Arithmetic_traits@I@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned int>::_Rank
?_Rank@?$_Arithmetic_traits@I@std@@2HB dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2Ch
		public ?_Rank@?$_Arithmetic_traits@J@std@@2HB
; public: static int const std::_Arithmetic_traits<long>::_Rank
?_Rank@?$_Arithmetic_traits@J@std@@2HB dd 5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 30h
		public ?_Rank@?$_Arithmetic_traits@K@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned long>::_Rank
?_Rank@?$_Arithmetic_traits@K@std@@2HB dd 5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 34h
		public ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
; public: static int const std::_Arithmetic_traits<__int64>::_Rank
?_Rank@?$_Arithmetic_traits@_J@std@@2HB	dd 6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 38h
		public ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned __int64>::_Rank
?_Rank@?$_Arithmetic_traits@_K@std@@2HB	dd 6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3Ch
		public ?_Rank@?$_Arithmetic_traits@M@std@@2HB
; public: static int const std::_Arithmetic_traits<float>::_Rank
?_Rank@?$_Arithmetic_traits@M@std@@2HB dd 7
					; DATA XREF: .rdata:int	const std::_Locbase<int>::allo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 40h
		public ?_Rank@?$_Arithmetic_traits@N@std@@2HB
; public: static int const std::_Arithmetic_traits<double>::_Rank
?_Rank@?$_Arithmetic_traits@N@std@@2HB dd 8
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::lefto
					; .rdata:std::_Iosb<int>::_Openmode const std::_Iosb<int>::_Nocreateo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 44h
		public ?_Rank@?$_Arithmetic_traits@O@std@@2HB
; public: static int const std::_Arithmetic_traits<long	double>::_Rank
?_Rank@?$_Arithmetic_traits@O@std@@2HB dd 9
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 48h
		public ?collate@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::collate
?collate@?$_Locbase@H@std@@2HB dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4Ch
		public ?ctype@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::ctype
?ctype@?$_Locbase@H@std@@2HB dd	2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 50h
		public ?monetary@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::monetary
?monetary@?$_Locbase@H@std@@2HB	dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 54h
		public ?numeric@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::numeric
?numeric@?$_Locbase@H@std@@2HB dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 58h
		public ?time@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::time
?time@?$_Locbase@H@std@@2HB dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5Ch
		public ?messages@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::messages
?messages@?$_Locbase@H@std@@2HB	dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 60h
		public ?all@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::all
?all@?$_Locbase@H@std@@2HB dd offset ?_Rank@?$_Arithmetic_traits@M@std@@2HB+3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 64h
		public ?none@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::none
?none@?$_Locbase@H@std@@2HB dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 68h
		public ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::skipws
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6Ch
		public ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::unitbuf
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 70h
		public ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::uppercase
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 74h
		public ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showbase
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 78h
		public ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showpoint
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7Ch
		public ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showpos
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 80h
		public ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::left
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::righto
					; .rdata:std::_Iosb<int>::_Openmode const std::_Iosb<int>::_Noreplaceo
_rdata		ends			; int const std::_Arithmetic_traits<double>::_Rank

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 84h
		public ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::right
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B	dd offset ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B ; std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::left
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 88h
		public ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::internal
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ?classID@?1??getStaticClassID@ChoiceFormat@icu_56@@SAPAXXZ@4DA ; char `icu_56::ChoiceFormat::getStaticClassID(void)'::`2'::classID
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8Ch
		public ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::dec
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	dword_200
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 90h
		public ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::oct
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_3FF+1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 94h
		public ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::hex
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	?getLong@Formattable@icu_56@@QBEHXZ ; icu_56::Formattable::getLong(void)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 98h
		public ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::scientific
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd	offset loc_FFC+4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9Ch
		public ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::fixed
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B	dd offset loc_2000
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A0h
		public ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::hexfloat
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset loc_2FFF+1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A4h
		public ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::boolalpha
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 4000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A8h
		public ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::_Stdio
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 8000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ACh
		public ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::adjustfield
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_1C0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B0h
		public ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::basefield
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset off_E00
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B4h
		public ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::floatfield
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd	offset loc_2FFF+1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B8h
		public ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::goodbit
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BCh
		public ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::eofbit
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B	dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C0h
		public ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::failbit
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C4h
		public ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::badbit
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B	dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C8h
		public ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::_Hardfail
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CCh
		public ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::in
?in@?$_Iosb@H@std@@2W4_Openmode@12@B dd	1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D0h
		public ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::out
?out@?$_Iosb@H@std@@2W4_Openmode@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D4h
		public ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::ate
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D8h
		public ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::app
?app@?$_Iosb@H@std@@2W4_Openmode@12@B dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0DCh
		public ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::trunc
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B	dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E0h
		public ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::_Nocreate
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E4h
		public ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::_Noreplace
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B dd	offset ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B ;	std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::left
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E8h
		public ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::binary
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int	const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ECh
		public ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::beg
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F0h
		public ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::cur
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F4h
		public ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::end
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F8h
		public ?MAX_LENGTH@Part@MessagePattern@icu_56@@0HB
; private: static int const icu_56::MessagePattern::Part::MAX_LENGTH
?MAX_LENGTH@Part@MessagePattern@icu_56@@0HB dd 0FFFFh
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FCh
		public ?MAX_VALUE@Part@MessagePattern@icu_56@@0HB
; private: static int const icu_56::MessagePattern::Part::MAX_VALUE
?MAX_VALUE@Part@MessagePattern@icu_56@@0HB dd 7FFFh
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
		assume cs:_bss
		;org 100h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
; char `public:	static void * __cdecl icu_56::ChoiceFormat::getStaticClassID(void)'::`2'::classID
?classID@?1??getStaticClassID@ChoiceFormat@icu_56@@SAPAXXZ@4DA db ?
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::internalo
					; icu_56::ChoiceFormat::getStaticClassID(void)+1Eo
		align 4
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 104h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int)
		public ??2@YAPAXI@Z
??2@YAPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??2@YAPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 13Ch
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 140h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 144h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX@Z
??3@YAXPAX@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??3@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 178h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::FieldPosition::FieldPosition(icu_56::FieldPosition *__hidden this)
		public ??0FieldPosition@icu_56@@QAE@XZ
??0FieldPosition@icu_56@@QAE@XZ	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@XZ ; icu_56::UObject::UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7FieldPosition@icu_56@@6B@ ;	const icu_56::FieldPosition::`vftable'
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+4], 0FFFFFFFFh

loc_1C0:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::adjustfieldo
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+8], 0
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+0Ch], 0
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0FieldPosition@icu_56@@QAE@XZ	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1ECh
		dd offset ??_R4FieldPosition@icu_56@@6B@ ; const icu_56::FieldPosition::`RTTI Complete Object Locator'
;
; Exported entry
;
		public ??_7FieldPosition@icu_56@@6B@
; const	icu_56::FieldPosition::`vftable'
??_7FieldPosition@icu_56@@6B@ dd offset	??_EFieldPosition@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::FieldPosition::FieldPosition(void)+38o
					; icu_56::FieldPosition::FieldPosition(int)+38o ...
					; icu_56::FieldPosition::`vector deleting destructor'(uint)
		dd offset ?getDynamicClassID@FieldPosition@icu_56@@UBEPAXXZ ; icu_56::FieldPosition::getDynamicClassID(void)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1F8h
		public ??_R4FieldPosition@icu_56@@6B@
; const	icu_56::FieldPosition::`RTTI Complete Object Locator'
??_R4FieldPosition@icu_56@@6B@ dd 2 dup(0) ; DATA XREF:	.rdata:000001ECo
dword_200	dd 0			; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::deco
		dd offset ??_R0?AVFieldPosition@icu_56@@@8 ; icu_56::FieldPosition `RTTI Type Descriptor'
		dd offset ??_R3FieldPosition@icu_56@@8 ; icu_56::FieldPosition::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 20Ch
		public ??_R0?AVFieldPosition@icu_56@@@8
; class	icu_56::FieldPosition `RTTI Type Descriptor'
??_R0?AVFieldPosition@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00000204o
					; .rdata$r:icu_56::FieldPosition::`RTTI	Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avfieldposit	db '.?AVFieldPosition@icu_56@@',0
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 230h
		public ??_R3FieldPosition@icu_56@@8
; icu_56::FieldPosition::`RTTI Class Hierarchy Descriptor'
??_R3FieldPosition@icu_56@@8 dd	2 dup(0) ; DATA	XREF: .rdata$r:00000208o
					; .rdata$r:00000268o
		dd 3
		dd offset ??_R2FieldPosition@icu_56@@8 ; icu_56::FieldPosition::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 240h
		public ??_R2FieldPosition@icu_56@@8
; icu_56::FieldPosition::`RTTI Base Class Array'
??_R2FieldPosition@icu_56@@8 dd	offset ??_R1A@?0A@EA@FieldPosition@icu_56@@8
					; DATA XREF: .rdata$r:0000023Co
					; icu_56::FieldPosition::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 250h
		public ??_R1A@?0A@EA@FieldPosition@icu_56@@8
; icu_56::FieldPosition::`RTTI Base Class Descriptor at	(0, -1,	0, 64)'
??_R1A@?0A@EA@FieldPosition@icu_56@@8 dd offset	??_R0?AVFieldPosition@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::FieldPosition::`RTTI Base	Class Array'o
					; icu_56::FieldPosition	`RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3FieldPosition@icu_56@@8 ; icu_56::FieldPosition::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 26Ch
		public ??_R1A@?0A@EA@UObject@icu_56@@8
; icu_56::UObject::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UObject@icu_56@@8	dd offset ??_R0?AVUObject@icu_56@@@8
					; DATA XREF: .rdata$r:00000244o
					; .rdata$r:icu_56::UObject::`RTTI Base Class Array'o ...
					; icu_56::UObject `RTTI	Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UObject@icu_56@@8 ; icu_56::UObject::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 288h
		public ??_R0?AVUObject@icu_56@@@8
; class	icu_56::UObject	`RTTI Type Descriptor'
??_R0?AVUObject@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UObject::`RTTI Base Class	Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avuobject@ic	db '.?AVUObject@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 2A8h
		public ??_R3UObject@icu_56@@8
; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
??_R3UObject@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00000284o
		dd 2
		dd offset ??_R2UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 2B8h
		public ??_R2UObject@icu_56@@8
; icu_56::UObject::`RTTI Base Class Array'
??_R2UObject@icu_56@@8 dd offset ??_R1A@?0A@EA@UObject@icu_56@@8
					; DATA XREF: .rdata$r:000002B4o
					; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 2C4h
		public ??_R13?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@UMemory@icu_56@@8 dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:00000248o
					; .rdata$r:000002BCo ...
					; icu_56::UMemory `RTTI	Type Descriptor'
		dd 0
		dd 4, 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 2E0h
		public ??_R0?AVUMemory@icu_56@@@8
; class	icu_56::UMemory	`RTTI Type Descriptor'
??_R0?AVUMemory@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Descriptor at (4,-1,0,64)'o
					; .rdata$r:icu_56::UMemory::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?avumemory@ic	db '.?AVUMemory@icu_56@@',0
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 300h
		public ??_R3UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
??_R3UMemory@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:000002DCo
					; .rdata$r:00000330o
		dd 1
		dd offset ??_R2UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 310h
		public ??_R2UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Array'
??_R2UMemory@icu_56@@8 dd offset ??_R1A@?0A@EA@UMemory@icu_56@@8
					; DATA XREF: .rdata$r:0000030Co
					; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 318h
		public ??_R1A@?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UMemory@icu_56@@8	dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Array'o
					; icu_56::UMemory `RTTI	Type Descriptor'
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 334h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::FieldPosition::FieldPosition(icu_56::FieldPosition *this, int)
		public ??0FieldPosition@icu_56@@QAE@H@Z
??0FieldPosition@icu_56@@QAE@H@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@XZ ; icu_56::UObject::UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7FieldPosition@icu_56@@6B@ ;	const icu_56::FieldPosition::`vftable'
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+4], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+8], 0
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+0Ch], 0
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0FieldPosition@icu_56@@QAE@H@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3A8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::FieldPosition::FieldPosition(icu_56::FieldPosition *this, const struct icu_56::FieldPosition *)
		public ??0FieldPosition@icu_56@@QAE@ABV01@@Z
??0FieldPosition@icu_56@@QAE@ABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax		; struct icu_56::UObject *
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@ABV01@@Z ; icu_56::UObject::UObject(icu_56::UObject const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7FieldPosition@icu_56@@6B@ ;	const icu_56::FieldPosition::`vftable'
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]

loc_3FF:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::octo
		mov	[eax+8], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		mov	[eax+0Ch], edx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0FieldPosition@icu_56@@QAE@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 428h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::FieldPosition::getField(icu_56::FieldPosition *__hidden this)
		public ?getField@FieldPosition@icu_56@@QBEHXZ
?getField@FieldPosition@icu_56@@QBEHXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+4]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getField@FieldPosition@icu_56@@QBEHXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 458h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::FieldPosition::getBeginIndex(icu_56::FieldPosition *__hidden this)
		public ?getBeginIndex@FieldPosition@icu_56@@QBEHXZ
?getBeginIndex@FieldPosition@icu_56@@QBEHXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getBeginIndex@FieldPosition@icu_56@@QBEHXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 488h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::FieldPosition::getEndIndex(icu_56::FieldPosition *__hidden this)
		public ?getEndIndex@FieldPosition@icu_56@@QBEHXZ
?getEndIndex@FieldPosition@icu_56@@QBEHXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+0Ch]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getEndIndex@FieldPosition@icu_56@@QBEHXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4B8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::FieldPosition::setField(icu_56::FieldPosition	*this, int)
		public ?setField@FieldPosition@icu_56@@QAEXH@Z
?setField@FieldPosition@icu_56@@QAEXH@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+4], ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?setField@FieldPosition@icu_56@@QAEXH@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4F0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::FieldPosition::setBeginIndex(icu_56::FieldPosition *this, int)
		public ?setBeginIndex@FieldPosition@icu_56@@QAEXH@Z
?setBeginIndex@FieldPosition@icu_56@@QAEXH@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+8], ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?setBeginIndex@FieldPosition@icu_56@@QAEXH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 528h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::FieldPosition::setEndIndex(icu_56::FieldPosition *this, int)
		public ?setEndIndex@FieldPosition@icu_56@@QAEXH@Z
?setEndIndex@FieldPosition@icu_56@@QAEXH@Z proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+0Ch], ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?setEndIndex@FieldPosition@icu_56@@QAEXH@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 560h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::FieldPosition::`scalar deleting destructor'(unsigned int)
		public ??_GFieldPosition@icu_56@@UAEPAXI@Z
??_GFieldPosition@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1FieldPosition@icu_56@@UAE@XZ	; icu_56::FieldPosition::~FieldPosition(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_5A9
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_5A9:				; CODE XREF: icu_56::FieldPosition::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GFieldPosition@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 5C4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::FieldPosition::`vector deleting destructor'(unsigned int)
		public ??_EFieldPosition@icu_56@@UAEPAXI@Z
??_EFieldPosition@icu_56@@UAEPAXI@Z proc near
					; DATA XREF: .rdata:const icu_56::FieldPosition::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		and	eax, 2
		jz	short loc_62F
		push	offset ??1FieldPosition@icu_56@@UAE@XZ ; icu_56::FieldPosition::~FieldPosition(void)
		mov	eax, [ebp+var_8]
		mov	ecx, [eax-4]
		push	ecx
		push	10h
		mov	edx, [ebp+var_8]
		push	edx
		call	??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_627
		mov	eax, [ebp+var_8]
		sub	eax, 4
		mov	esi, esp
		push	eax		; void *
		call	dword ptr ds:__imp_??_VUMemory@icu_56@@SAXPAX@Z	; icu_56::UMemory::operator delete[](void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_627:				; CODE XREF: icu_56::FieldPosition::`vector deleting destructor'(uint)+48j
		mov	eax, [ebp+var_8]
		sub	eax, 4
		jmp	short loc_658
; ---------------------------------------------------------------------------

loc_62F:				; CODE XREF: icu_56::FieldPosition::`vector deleting destructor'(uint)+29j
		mov	ecx, [ebp+var_8] ; this
		call	??1FieldPosition@icu_56@@UAE@XZ	; icu_56::FieldPosition::~FieldPosition(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_655
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_655:				; CODE XREF: icu_56::FieldPosition::`vector deleting destructor'(uint)+79j
		mov	eax, [ebp+var_8]

loc_658:				; CODE XREF: icu_56::FieldPosition::`vector deleting destructor'(uint)+69j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_EFieldPosition@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 670h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::FieldPosition &	__thiscall icu_56::FieldPosition::operator=(class icu_56::FieldPosition	const &)
		public ??4FieldPosition@icu_56@@QAEAAV01@ABV01@@Z
??4FieldPosition@icu_56@@QAEAAV01@ABV01@@Z proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		mov	[eax+0Ch], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		mov	[eax+8], edx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??4FieldPosition@icu_56@@QAEAAV01@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 6C4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: signed char __thiscall icu_56::FieldPosition::operator==(class icu_56::FieldPosition const &)const
		public ??8FieldPosition@icu_56@@QBECABV01@@Z
??8FieldPosition@icu_56@@QBECABV01@@Z proc near
					; CODE XREF: icu_56::FieldPosition::operator!=(icu_56::FieldPosition const &)+2Ap

var_D0		= byte ptr -0D0h
var_CD		= byte ptr -0CDh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+4]
		cmp	edx, [ecx+4]
		jnz	short loc_71A
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+0Ch]
		cmp	edx, [ecx+0Ch]
		jnz	short loc_71A
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+8]
		cmp	edx, [ecx+8]
		jnz	short loc_71A
		mov	[ebp+var_CD], 1
		jmp	short loc_721
; ---------------------------------------------------------------------------

loc_71A:				; CODE XREF: icu_56::FieldPosition::operator==(icu_56::FieldPosition const &)+2Fj
					; icu_56::FieldPosition::operator==(icu_56::FieldPosition const	&)+3Dj	...
		mov	[ebp+var_CD], 0

loc_721:				; CODE XREF: icu_56::FieldPosition::operator==(icu_56::FieldPosition const &)+54j
		mov	al, [ebp+var_CD]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??8FieldPosition@icu_56@@QBECABV01@@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 730h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: signed char __thiscall icu_56::FieldPosition::operator!=(class icu_56::FieldPosition const &)const
		public ??9FieldPosition@icu_56@@QBECABV01@@Z
??9FieldPosition@icu_56@@QBECABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		call	??8FieldPosition@icu_56@@QBECABV01@@Z ;	icu_56::FieldPosition::operator==(icu_56::FieldPosition	const &)
		movsx	ecx, al
		test	ecx, ecx
		setz	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??9FieldPosition@icu_56@@QBECABV01@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 780h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: signed char __thiscall icu_56::Formattable::operator!=(class icu_56::Formattable const &)const
		public ??9Formattable@icu_56@@QBECABV01@@Z
??9Formattable@icu_56@@QBECABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		call	??8Formattable@icu_56@@QBECABV01@@Z ; icu_56::Formattable::operator==(icu_56::Formattable const	&)
		movsx	ecx, al
		test	ecx, ecx
		setz	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??9Formattable@icu_56@@QBECABV01@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 7D0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; double __thiscall icu_56::Formattable::getDouble(icu_56::Formattable *__hidden this)
		public ?getDouble@Formattable@icu_56@@QBENXZ
?getDouble@Formattable@icu_56@@QBENXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		fld	qword ptr [eax+8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getDouble@Formattable@icu_56@@QBENXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 800h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::Formattable::getLong(icu_56::Formattable *__hidden this)
		public ?getLong@Formattable@icu_56@@QBEHXZ
?getLong@Formattable@icu_56@@QBEHXZ proc near
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::hexo

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getLong@Formattable@icu_56@@QBEHXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 830h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; __int64 __thiscall icu_56::Formattable::getInt64(icu_56::Formattable *__hidden this)
		public ?getInt64@Formattable@icu_56@@QBE_JXZ
?getInt64@Formattable@icu_56@@QBE_JXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8]
		mov	eax, [ecx+8]
		mov	edx, [ecx+0Ch]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getInt64@Formattable@icu_56@@QBE_JXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 864h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; double __thiscall icu_56::Formattable::getDate(icu_56::Formattable *__hidden this)
		public ?getDate@Formattable@icu_56@@QBENXZ
?getDate@Formattable@icu_56@@QBENXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		fld	qword ptr [eax+8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getDate@Formattable@icu_56@@QBENXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 894h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::UnicodeString *__thiscall icu_56::Formattable::getString(icu_56::Formattable *this, struct icu_56::UnicodeString *)
		public ?getString@Formattable@icu_56@@QBEAAVUnicodeString@2@AAV32@@Z
?getString@Formattable@icu_56@@QBEAAVUnicodeString@2@AAV32@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+8]
		push	ecx
		mov	ecx, [ebp+arg_0]
		call	dword ptr ds:__imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z ;	icu_56::UnicodeString::operator=(icu_56::UnicodeString const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?getString@Formattable@icu_56@@QBEAAVUnicodeString@2@AAV32@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 8ECh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct icu_56::Formattable *__thiscall icu_56::Formattable::getArray(icu_56::Formattable *this,	int *)
		public ?getArray@Formattable@icu_56@@QBEPBV12@AAH@Z
?getArray@Formattable@icu_56@@QBEPBV12@AAH@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+0Ch]
		mov	[eax], edx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?getArray@Formattable@icu_56@@QBEPBV12@AAH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 92Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::Formattable & __thiscall icu_56::Formattable::operator[](int)
		public ??AFormattable@icu_56@@QAEAAV01@H@Z
??AFormattable@icu_56@@QAEAAV01@H@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		imul	eax, 0E0h
		mov	ecx, [ebp+var_8]
		add	eax, [ecx+8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??AFormattable@icu_56@@QAEAAV01@H@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 968h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::DigitList *__thiscall icu_56::Formattable::getDigitList(icu_56::Formattable *__hidden this)
		public ?getDigitList@Formattable@icu_56@@QBEPAVDigitList@2@XZ
?getDigitList@Formattable@icu_56@@QBEPAVDigitList@2@XZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+14h]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getDigitList@Formattable@icu_56@@QBEPAVDigitList@2@XZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 998h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; double __thiscall icu_56::Formattable::getDate(icu_56::Formattable *this, enum UErrorCode *)
		public ?getDate@Formattable@icu_56@@QBENAAW4UErrorCode@@@Z
?getDate@Formattable@icu_56@@QBENAAW4UErrorCode@@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+98h], 0
		jz	short loc_9E9
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_9E5
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 3

loc_9E5:				; CODE XREF: icu_56::Formattable::getDate(UErrorCode &)+42j
		fldz
		jmp	short loc_9EF
; ---------------------------------------------------------------------------

loc_9E9:				; CODE XREF: icu_56::Formattable::getDate(UErrorCode &)+2Dj
		mov	eax, [ebp+var_8]
		fld	qword ptr [eax+8]

loc_9EF:				; CODE XREF: icu_56::Formattable::getDate(UErrorCode &)+4Fj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?getDate@Formattable@icu_56@@QBENAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 0A08h
		public __real@0000000000000000
__real@0000000000000000	dd 2 dup(0)
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A10h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl U_SUCCESS(enum  UErrorCode)
?U_SUCCESS@@YACW4UErrorCode@@@Z	proc near
					; CODE XREF: icu_56::Formattable::getDate(UErrorCode &)+35p
					; icu_56::ChoiceFormat::format(icu_56::Formattable const *,int,icu_56::UnicodeString &,icu_56::FieldPosition &,UErrorCode &)+9Cp

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		setle	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?U_SUCCESS@@YACW4UErrorCode@@@Z	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A3Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct icu_56::UnicodeString *__thiscall icu_56::Formattable::getString(icu_56::Formattable *__hidden this)
		public ?getString@Formattable@icu_56@@QBEABVUnicodeString@2@XZ
?getString@Formattable@icu_56@@QBEABVUnicodeString@2@XZ	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getString@Formattable@icu_56@@QBEABVUnicodeString@2@XZ	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A6Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::UnicodeString *__thiscall icu_56::Formattable::getString(icu_56::Formattable *__hidden	this)
		public ?getString@Formattable@icu_56@@QAEAAVUnicodeString@2@XZ
?getString@Formattable@icu_56@@QAEAAVUnicodeString@2@XZ	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getString@Formattable@icu_56@@QAEAAVUnicodeString@2@XZ	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A9Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::Formattable::getLong(icu_56::Formattable *this, enum UErrorCode *)
		public ?getLong@Formattable@icu_56@@QBEHPAW4UErrorCode@@@Z
?getLong@Formattable@icu_56@@QBEHPAW4UErrorCode@@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+var_8] ; this
		call	?getLong@Formattable@icu_56@@QBEHAAW4UErrorCode@@@Z ; icu_56::Formattable::getLong(UErrorCode &)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?getLong@Formattable@icu_56@@QBEHPAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0AE4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void **__thiscall icu_56::Formattable::toUFormattable(icu_56::Formattable *__hidden this)
		public ?toUFormattable@Formattable@icu_56@@QAEPAPAXXZ
?toUFormattable@Formattable@icu_56@@QAEPAPAXXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?toUFormattable@Formattable@icu_56@@QAEPAPAXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0B14h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *const *__thiscall icu_56::Formattable::toUFormattable(icu_56::Formattable *__hidden this)
		public ?toUFormattable@Formattable@icu_56@@QBEPBQAXXZ
?toUFormattable@Formattable@icu_56@@QBEPBQAXXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?toUFormattable@Formattable@icu_56@@QBEPBQAXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0B44h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::Formattable *__cdecl icu_56::Formattable::fromUFormattable(void **)
		public ?fromUFormattable@Formattable@icu_56@@SAPAV12@PAPAX@Z
?fromUFormattable@Formattable@icu_56@@SAPAV12@PAPAX@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?fromUFormattable@Formattable@icu_56@@SAPAV12@PAPAX@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0B6Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct icu_56::Formattable *__cdecl icu_56::Formattable::fromUFormattable(void *const *)
		public ?fromUFormattable@Formattable@icu_56@@SAPBV12@PBQAX@Z
?fromUFormattable@Formattable@icu_56@@SAPBV12@PBQAX@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?fromUFormattable@Formattable@icu_56@@SAPBV12@PBQAX@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0B94h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: signed char __thiscall icu_56::FieldPositionIterator::operator!=(class icu_56::FieldPositionIterator const &)const
		public ??9FieldPositionIterator@icu_56@@QBECABV01@@Z
??9FieldPositionIterator@icu_56@@QBECABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		call	??8FieldPositionIterator@icu_56@@QBECABV01@@Z ;	icu_56::FieldPositionIterator::operator==(icu_56::FieldPositionIterator	const &)
		movsx	ecx, al
		test	ecx, ecx
		setz	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??9FieldPositionIterator@icu_56@@QBECABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0BE4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::FieldPositionIterator &	__thiscall icu_56::FieldPositionIterator::operator=(class icu_56::FieldPositionIterator	const &)
		public ??4FieldPositionIterator@icu_56@@QAEAAV01@ABV01@@Z
??4FieldPositionIterator@icu_56@@QAEAAV01@ABV01@@Z proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		call	dword ptr ds:__imp_??4UObject@icu_56@@QAEAAV01@ABV01@@Z	; icu_56::UObject::operator=(icu_56::UObject const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		mov	[eax+8], edx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??4FieldPositionIterator@icu_56@@QAEAAV01@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C50h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: signed char __thiscall icu_56::Format::operator!=(class icu_56::Format const &)const
		public ??9Format@icu_56@@QBECABV01@@Z
??9Format@icu_56@@QBECABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+8]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		movsx	ecx, al
		test	ecx, ecx
		setz	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??9Format@icu_56@@QBECABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0CACh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct icu_56::Formattable *__thiscall icu_56::Measure::getNumber(icu_56::Measure *__hidden this)
		public ?getNumber@Measure@icu_56@@QBEABVFormattable@2@XZ
?getNumber@Measure@icu_56@@QBEABVFormattable@2@XZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		add	eax, 8
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getNumber@Measure@icu_56@@QBEABVFormattable@2@XZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0CDCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct icu_56::MeasureUnit *__thiscall icu_56::Measure::getUnit(icu_56::Measure	*__hidden this)
		public ?getUnit@Measure@icu_56@@QBEABVMeasureUnit@2@XZ
?getUnit@Measure@icu_56@@QBEABVMeasureUnit@2@XZ	proc near
					; CODE XREF: icu_56::CurrencyAmount::getCurrency(void)+26p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+0E8h]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getUnit@Measure@icu_56@@QBEABVMeasureUnit@2@XZ	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0D10h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::MeasureUnit::MeasureUnit(icu_56::MeasureUnit *__hidden this)
		public ??0MeasureUnit@icu_56@@QAE@XZ
??0MeasureUnit@icu_56@@QAE@XZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@XZ ; icu_56::UObject::UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7MeasureUnit@icu_56@@6B@ ; const icu_56::MeasureUnit::`vftable'
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+4], 0
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0MeasureUnit@icu_56@@QAE@XZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D80h
		dd offset ??_R4MeasureUnit@icu_56@@6B@ ; const icu_56::MeasureUnit::`RTTI Complete Object Locator'
;
; Exported entry
;
		public ??_7MeasureUnit@icu_56@@6B@
; const	icu_56::MeasureUnit::`vftable'
??_7MeasureUnit@icu_56@@6B@ dd offset ??_EMeasureUnit@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::MeasureUnit::MeasureUnit(void)+38o
					; icu_56::MeasureUnit::MeasureUnit(int,int)+38o
					; icu_56::MeasureUnit::`vector deleting	destructor'(uint)
		dd offset ?getDynamicClassID@MeasureUnit@icu_56@@UBEPAXXZ ; icu_56::MeasureUnit::getDynamicClassID(void)
		dd offset ?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ	; icu_56::MeasureUnit::clone(void)
		dd offset ??8MeasureUnit@icu_56@@UBECABVUObject@1@@Z ; icu_56::MeasureUnit::operator==(icu_56::UObject const &)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0D94h
		public ??_R4MeasureUnit@icu_56@@6B@
; const	icu_56::MeasureUnit::`RTTI Complete Object Locator'
??_R4MeasureUnit@icu_56@@6B@ dd	3 dup(0) ; DATA	XREF: .rdata:00000D80o
		dd offset ??_R0?AVMeasureUnit@icu_56@@@8 ; icu_56::MeasureUnit `RTTI Type Descriptor'
		dd offset ??_R3MeasureUnit@icu_56@@8 ; icu_56::MeasureUnit::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 0DA8h
		public ??_R0?AVMeasureUnit@icu_56@@@8
; class	icu_56::MeasureUnit `RTTI Type Descriptor'
??_R0?AVMeasureUnit@icu_56@@@8 dd offset ??_7type_info@@6B@ ; DATA XREF: .rdata$r:00000DA0o
					; .rdata$r:icu_56::MeasureUnit::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avmeasureuni	db '.?AVMeasureUnit@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0DCCh
		public ??_R3MeasureUnit@icu_56@@8
; icu_56::MeasureUnit::`RTTI Class Hierarchy Descriptor'
??_R3MeasureUnit@icu_56@@8 dd 2	dup(0)	; DATA XREF: .rdata$r:00000DA4o
					; .rdata$r:00000E04o
		dd 3
		dd offset ??_R2MeasureUnit@icu_56@@8 ; icu_56::MeasureUnit::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0DDCh
		public ??_R2MeasureUnit@icu_56@@8
; icu_56::MeasureUnit::`RTTI Base Class	Array'
??_R2MeasureUnit@icu_56@@8 dd offset ??_R1A@?0A@EA@MeasureUnit@icu_56@@8
					; DATA XREF: .rdata$r:00000DD8o
					; icu_56::MeasureUnit::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0DECh
		public ??_R1A@?0A@EA@MeasureUnit@icu_56@@8
; icu_56::MeasureUnit::`RTTI Base Class	Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@MeasureUnit@icu_56@@8 dd offset ??_R0?AVMeasureUnit@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::MeasureUnit::`RTTI Base Class Array'o
					; icu_56::MeasureUnit `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
off_E00		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::basefieldo
					; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3MeasureUnit@icu_56@@8 ; icu_56::MeasureUnit::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0E08h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: signed char __thiscall icu_56::MeasureUnit::operator!=(class icu_56::UObject const &)const
		public ??9MeasureUnit@icu_56@@QBECABVUObject@1@@Z
??9MeasureUnit@icu_56@@QBECABVUObject@1@@Z proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+0Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		movsx	ecx, al
		test	ecx, ecx
		setz	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??9MeasureUnit@icu_56@@QBECABVUObject@1@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0E64h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::MeasureUnit::MeasureUnit(icu_56::MeasureUnit *this,	int, int)
		public ??0MeasureUnit@icu_56@@AAE@HH@Z
??0MeasureUnit@icu_56@@AAE@HH@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@XZ ; icu_56::UObject::UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7MeasureUnit@icu_56@@6B@ ; const icu_56::MeasureUnit::`vftable'
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+4], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_4]
		mov	[eax+8], ecx
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??0MeasureUnit@icu_56@@AAE@HH@Z	endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0ED4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::MeasureUnit::`scalar deleting destructor'(unsigned int)
		public ??_GMeasureUnit@icu_56@@UAEPAXI@Z
??_GMeasureUnit@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1MeasureUnit@icu_56@@UAE@XZ ;	icu_56::MeasureUnit::~MeasureUnit(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_F1D
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_F1D:				; CODE XREF: icu_56::MeasureUnit::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GMeasureUnit@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0F38h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::MeasureUnit::`vector deleting destructor'(unsigned int)
		public ??_EMeasureUnit@icu_56@@UAEPAXI@Z
??_EMeasureUnit@icu_56@@UAEPAXI@Z proc near
					; DATA XREF: .rdata:const icu_56::MeasureUnit::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		and	eax, 2
		jz	short loc_FA3
		push	offset ??1MeasureUnit@icu_56@@UAE@XZ ; icu_56::MeasureUnit::~MeasureUnit(void)
		mov	eax, [ebp+var_8]
		mov	ecx, [eax-4]
		push	ecx
		push	10h
		mov	edx, [ebp+var_8]
		push	edx
		call	??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_F9B
		mov	eax, [ebp+var_8]
		sub	eax, 4
		mov	esi, esp
		push	eax		; void *
		call	dword ptr ds:__imp_??_VUMemory@icu_56@@SAXPAX@Z	; icu_56::UMemory::operator delete[](void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_F9B:				; CODE XREF: icu_56::MeasureUnit::`vector deleting destructor'(uint)+48j
		mov	eax, [ebp+var_8]
		sub	eax, 4
		jmp	short loc_FCC
; ---------------------------------------------------------------------------

loc_FA3:				; CODE XREF: icu_56::MeasureUnit::`vector deleting destructor'(uint)+29j
		mov	ecx, [ebp+var_8] ; this
		call	??1MeasureUnit@icu_56@@UAE@XZ ;	icu_56::MeasureUnit::~MeasureUnit(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_FC9
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_FC9:				; CODE XREF: icu_56::MeasureUnit::`vector deleting destructor'(uint)+79j
		mov	eax, [ebp+var_8]

loc_FCC:				; CODE XREF: icu_56::MeasureUnit::`vector deleting destructor'(uint)+69j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_EMeasureUnit@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0FE4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	wchar_t	*__thiscall icu_56::CurrencyUnit::getISOCurrency(icu_56::CurrencyUnit *__hidden	this)
		public ?getISOCurrency@CurrencyUnit@icu_56@@QBEPB_WXZ
?getISOCurrency@CurrencyUnit@icu_56@@QBEPB_WXZ proc near
					; CODE XREF: icu_56::CurrencyAmount::getISOCurrency(void)+2Dp

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'

loc_FFC:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::scientifico
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		add	eax, 10h
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getISOCurrency@CurrencyUnit@icu_56@@QBEPB_WXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1014h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct icu_56::CurrencyUnit *__thiscall	icu_56::CurrencyAmount::getCurrency(icu_56::CurrencyAmount *__hidden this)
		public ?getCurrency@CurrencyAmount@icu_56@@QBEABVCurrencyUnit@2@XZ
?getCurrency@CurrencyAmount@icu_56@@QBEABVCurrencyUnit@2@XZ proc near
					; CODE XREF: icu_56::CurrencyAmount::getISOCurrency(void)+26p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	?getUnit@Measure@icu_56@@QBEABVMeasureUnit@2@XZ	; icu_56::Measure::getUnit(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?getCurrency@CurrencyAmount@icu_56@@QBEABVCurrencyUnit@2@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1054h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	wchar_t	*__thiscall icu_56::CurrencyAmount::getISOCurrency(icu_56::CurrencyAmount *__hidden this)
		public ?getISOCurrency@CurrencyAmount@icu_56@@QBEPB_WXZ
?getISOCurrency@CurrencyAmount@icu_56@@QBEPB_WXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	?getCurrency@CurrencyAmount@icu_56@@QBEABVCurrencyUnit@2@XZ ; icu_56::CurrencyAmount::getCurrency(void)
		mov	ecx, eax	; this
		call	?getISOCurrency@CurrencyUnit@icu_56@@QBEPB_WXZ ; icu_56::CurrencyUnit::getISOCurrency(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?getISOCurrency@CurrencyAmount@icu_56@@QBEPB_WXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 109Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::NumberFormatFactory::NumberFormatFactory(icu_56::NumberFormatFactory *__hidden this)
		public ??0NumberFormatFactory@icu_56@@QAE@XZ
??0NumberFormatFactory@icu_56@@QAE@XZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@XZ ; icu_56::UObject::UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7NumberFormatFactory@icu_56@@6B@ ; const icu_56::NumberFormatFactory::`vftable'
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0NumberFormatFactory@icu_56@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10F4h
		dd offset ??_R4NumberFormatFactory@icu_56@@6B@ ; const icu_56::NumberFormatFactory::`RTTI Complete Object Locator'
;
; Exported entry
;
		public ??_7NumberFormatFactory@icu_56@@6B@
; const	icu_56::NumberFormatFactory::`vftable'
??_7NumberFormatFactory@icu_56@@6B@ dd offset ??_ENumberFormatFactory@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::NumberFormatFactory::NumberFormatFactory(void)+38o
					; icu_56::NumberFormatFactory::NumberFormatFactory(icu_56::NumberFormatFactory const &)+3Co
					; icu_56::NumberFormatFactory::`vector deleting	destructor'(uint)
		dd offset ?getDynamicClassID@UObject@icu_56@@UBEPAXXZ ;	icu_56::UObject::getDynamicClassID(void)
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 110Ch
		public ??_R4NumberFormatFactory@icu_56@@6B@
; const	icu_56::NumberFormatFactory::`RTTI Complete Object Locator'
??_R4NumberFormatFactory@icu_56@@6B@ dd	3 dup(0) ; DATA	XREF: .rdata:000010F4o
		dd offset ??_R0?AVNumberFormatFactory@icu_56@@@8 ; icu_56::NumberFormatFactory `RTTI Type Descriptor'
		dd offset ??_R3NumberFormatFactory@icu_56@@8 ; icu_56::NumberFormatFactory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 1120h
		public ??_R0?AVNumberFormatFactory@icu_56@@@8
; class	icu_56::NumberFormatFactory `RTTI Type Descriptor'
??_R0?AVNumberFormatFactory@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00001118o
					; .rdata$r:icu_56::NumberFormatFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?avnumberform	db '.?AVNumberFormatFactory@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 114Ch
		public ??_R3NumberFormatFactory@icu_56@@8
; icu_56::NumberFormatFactory::`RTTI Class Hierarchy Descriptor'
??_R3NumberFormatFactory@icu_56@@8 dd 2	dup(0) ; DATA XREF: .rdata$r:0000111Co
					; .rdata$r:00001184o
		dd 3
		dd offset ??_R2NumberFormatFactory@icu_56@@8 ; icu_56::NumberFormatFactory::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 115Ch
		public ??_R2NumberFormatFactory@icu_56@@8
; icu_56::NumberFormatFactory::`RTTI Base Class	Array'
??_R2NumberFormatFactory@icu_56@@8 dd offset ??_R1A@?0A@EA@NumberFormatFactory@icu_56@@8
					; DATA XREF: .rdata$r:00001158o
					; icu_56::NumberFormatFactory::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 116Ch
		public ??_R1A@?0A@EA@NumberFormatFactory@icu_56@@8
; icu_56::NumberFormatFactory::`RTTI Base Class	Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@NumberFormatFactory@icu_56@@8 dd offset ??_R0?AVNumberFormatFactory@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::NumberFormatFactory::`RTTI Base Class Array'o
					; .rdata$r:000014C0o
					; icu_56::NumberFormatFactory `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3NumberFormatFactory@icu_56@@8 ; icu_56::NumberFormatFactory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1188h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::NumberFormatFactory::NumberFormatFactory(icu_56::NumberFormatFactory *this,	const struct icu_56::NumberFormatFactory *)
		public ??0NumberFormatFactory@icu_56@@QAE@ABV01@@Z
??0NumberFormatFactory@icu_56@@QAE@ABV01@@Z proc near
					; CODE XREF: icu_56::SimpleNumberFormatFactory::SimpleNumberFormatFactory(icu_56::SimpleNumberFormatFactory const &)+49p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax		; struct icu_56::UObject *
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@ABV01@@Z ; icu_56::UObject::UObject(icu_56::UObject const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7NumberFormatFactory@icu_56@@6B@ ; const icu_56::NumberFormatFactory::`vftable'
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0NumberFormatFactory@icu_56@@QAE@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 11E4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::NumberFormatFactory & __thiscall icu_56::NumberFormatFactory::operator=(class icu_56::NumberFormatFactory const	&)
		public ??4NumberFormatFactory@icu_56@@QAEAAV01@ABV01@@Z
??4NumberFormatFactory@icu_56@@QAEAAV01@ABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		call	dword ptr ds:__imp_??4UObject@icu_56@@QAEAAV01@ABV01@@Z	; icu_56::UObject::operator=(icu_56::UObject const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??4NumberFormatFactory@icu_56@@QAEAAV01@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1238h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::NumberFormatFactory::`scalar deleting destructor'(unsigned int)
		public ??_GNumberFormatFactory@icu_56@@UAEPAXI@Z
??_GNumberFormatFactory@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1NumberFormatFactory@icu_56@@UAE@XZ ;	icu_56::NumberFormatFactory::~NumberFormatFactory(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_1281
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1281:				; CODE XREF: icu_56::NumberFormatFactory::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GNumberFormatFactory@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 129Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::NumberFormatFactory::`vector deleting destructor'(unsigned int)
		public ??_ENumberFormatFactory@icu_56@@UAEPAXI@Z
??_ENumberFormatFactory@icu_56@@UAEPAXI@Z proc near
					; DATA XREF: .rdata:const icu_56::NumberFormatFactory::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		and	eax, 2
		jz	short loc_1307
		push	offset ??1NumberFormatFactory@icu_56@@UAE@XZ ; icu_56::NumberFormatFactory::~NumberFormatFactory(void)
		mov	eax, [ebp+var_8]
		mov	ecx, [eax-4]
		push	ecx
		push	4
		mov	edx, [ebp+var_8]
		push	edx
		call	??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_12FF
		mov	eax, [ebp+var_8]
		sub	eax, 4
		mov	esi, esp
		push	eax		; void *
		call	dword ptr ds:__imp_??_VUMemory@icu_56@@SAXPAX@Z	; icu_56::UMemory::operator delete[](void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_12FF:				; CODE XREF: icu_56::NumberFormatFactory::`vector deleting destructor'(uint)+48j
		mov	eax, [ebp+var_8]
		sub	eax, 4
		jmp	short loc_1330
; ---------------------------------------------------------------------------

loc_1307:				; CODE XREF: icu_56::NumberFormatFactory::`vector deleting destructor'(uint)+29j
		mov	ecx, [ebp+var_8] ; this
		call	??1NumberFormatFactory@icu_56@@UAE@XZ ;	icu_56::NumberFormatFactory::~NumberFormatFactory(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_132D
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_132D:				; CODE XREF: icu_56::NumberFormatFactory::`vector deleting destructor'(uint)+79j
		mov	eax, [ebp+var_8]

loc_1330:				; CODE XREF: icu_56::NumberFormatFactory::`vector deleting destructor'(uint)+69j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_ENumberFormatFactory@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1348h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::SimpleNumberFormatFactory::SimpleNumberFormatFactory(icu_56::SimpleNumberFormatFactory *this, const	struct icu_56::SimpleNumberFormatFactory *)
		public ??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z
??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; struct icu_56::NumberFormatFactory *
		mov	ecx, [ebp+var_14] ; this
		call	??0NumberFormatFactory@icu_56@@QAE@ABV01@@Z ; icu_56::NumberFormatFactory::NumberFormatFactory(icu_56::NumberFormatFactory const &)
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7SimpleNumberFormatFactory@icu_56@@6B@ ; const icu_56::SimpleNumberFormatFactory::`vftable'
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_0]
		mov	dl, [ecx+4]
		mov	[eax+4], dl
		mov	eax, [ebp+arg_0]
		add	eax, 8
		mov	esi, esp
		push	eax		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_14]
		add	ecx, 8		; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@ABV01@@Z ; icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 13FCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z$0 proc near
					; DATA XREF: .xdata$x:00001440o
		mov	ecx, [ebp-14h]	; this
		jmp	??1NumberFormatFactory@icu_56@@UAE@XZ ;	icu_56::NumberFormatFactory::~NumberFormatFactory(void)
__unwindfunclet$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z proc near
					; DATA XREF: icu_56::SimpleNumberFormatFactory::SimpleNumberFormatFactory(icu_56::SimpleNumberFormatFactory const &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0DCh]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1424h
		dd offset ??_R4SimpleNumberFormatFactory@icu_56@@6B@ ; const icu_56::SimpleNumberFormatFactory::`RTTI Complete Object Locator'
;
; Exported entry
;
		public ??_7SimpleNumberFormatFactory@icu_56@@6B@
; const	icu_56::SimpleNumberFormatFactory::`vftable'
??_7SimpleNumberFormatFactory@icu_56@@6B@ dd offset ??_ESimpleNumberFormatFactory@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::SimpleNumberFormatFactory::SimpleNumberFormatFactory(icu_56::SimpleNumberFormatFactory const &)+58o
					; icu_56::SimpleNumberFormatFactory::`vector deleting destructor'(uint)
		dd offset ?getDynamicClassID@UObject@icu_56@@UBEPAXXZ ;	icu_56::UObject::getDynamicClassID(void)
		dd offset ?visible@SimpleNumberFormatFactory@icu_56@@UBECXZ ; icu_56::SimpleNumberFormatFactory::visible(void)
		dd offset ?getSupportedIDs@SimpleNumberFormatFactory@icu_56@@UBEPBVUnicodeString@2@AAHAAW4UErrorCode@@@Z ; icu_56::SimpleNumberFormatFactory::getSupportedIDs(int &,UErrorCode &)
		dd offset __purecall
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 143Ch
__unwindtable$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:0000144Co
		dd offset __unwindfunclet$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z$0
__ehfuncinfo$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z+14o
		dd offset __unwindtable$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1468h
		public ??_R4SimpleNumberFormatFactory@icu_56@@6B@
; const	icu_56::SimpleNumberFormatFactory::`RTTI Complete Object Locator'
??_R4SimpleNumberFormatFactory@icu_56@@6B@ dd 3	dup(0) ; DATA XREF: .rdata:00001424o
		dd offset ??_R0?AVSimpleNumberFormatFactory@icu_56@@@8 ; icu_56::SimpleNumberFormatFactory `RTTI Type Descriptor'
		dd offset ??_R3SimpleNumberFormatFactory@icu_56@@8 ; icu_56::SimpleNumberFormatFactory::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 147Ch
		public ??_R0?AVSimpleNumberFormatFactory@icu_56@@@8
; class	icu_56::SimpleNumberFormatFactory `RTTI	Type Descriptor'
??_R0?AVSimpleNumberFormatFactory@icu_56@@@8 dd	offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00001474o
					; .rdata$r:icu_56::SimpleNumberFormatFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avsimplenumb	db '.?AVSimpleNumberFormatFactory@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 14ACh
		public ??_R3SimpleNumberFormatFactory@icu_56@@8
; icu_56::SimpleNumberFormatFactory::`RTTI Class Hierarchy Descriptor'
??_R3SimpleNumberFormatFactory@icu_56@@8 dd 2 dup(0) ; DATA XREF: .rdata$r:00001478o
					; .rdata$r:000014E8o
		dd 4
		dd offset ??_R2SimpleNumberFormatFactory@icu_56@@8 ; icu_56::SimpleNumberFormatFactory::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 14BCh
		public ??_R2SimpleNumberFormatFactory@icu_56@@8
; icu_56::SimpleNumberFormatFactory::`RTTI Base	Class Array'
??_R2SimpleNumberFormatFactory@icu_56@@8 dd offset ??_R1A@?0A@EA@SimpleNumberFormatFactory@icu_56@@8
					; DATA XREF: .rdata$r:000014B8o
					; icu_56::SimpleNumberFormatFactory::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@NumberFormatFactory@icu_56@@8 ;	icu_56::NumberFormatFactory::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 14D0h
		public ??_R1A@?0A@EA@SimpleNumberFormatFactory@icu_56@@8
; icu_56::SimpleNumberFormatFactory::`RTTI Base	Class Descriptor at (0,	-1, 0, 64)'
??_R1A@?0A@EA@SimpleNumberFormatFactory@icu_56@@8 dd offset ??_R0?AVSimpleNumberFormatFactory@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::SimpleNumberFormatFactory::`RTTI Base Class Array'o
					; icu_56::SimpleNumberFormatFactory `RTTI Type Descriptor'
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3SimpleNumberFormatFactory@icu_56@@8 ; icu_56::SimpleNumberFormatFactory::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 14ECh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::SimpleNumberFormatFactory::`scalar deleting	destructor'(unsigned int)
		public ??_GSimpleNumberFormatFactory@icu_56@@UAEPAXI@Z
??_GSimpleNumberFormatFactory@icu_56@@UAEPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1SimpleNumberFormatFactory@icu_56@@UAE@XZ ; icu_56::SimpleNumberFormatFactory::~SimpleNumberFormatFactory(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_1535
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1535:				; CODE XREF: icu_56::SimpleNumberFormatFactory::`scalar	deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GSimpleNumberFormatFactory@icu_56@@UAEPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1550h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::SimpleNumberFormatFactory::`vector deleting	destructor'(unsigned int)
		public ??_ESimpleNumberFormatFactory@icu_56@@UAEPAXI@Z
??_ESimpleNumberFormatFactory@icu_56@@UAEPAXI@Z	proc near
					; DATA XREF: .rdata:const icu_56::SimpleNumberFormatFactory::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		and	eax, 2
		jz	short loc_15BB
		push	offset ??1SimpleNumberFormatFactory@icu_56@@UAE@XZ ; icu_56::SimpleNumberFormatFactory::~SimpleNumberFormatFactory(void)
		mov	eax, [ebp+var_8]
		mov	ecx, [eax-4]
		push	ecx
		push	48h ; 'H'
		mov	edx, [ebp+var_8]
		push	edx
		call	??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_15B3
		mov	eax, [ebp+var_8]
		sub	eax, 4
		mov	esi, esp
		push	eax		; void *
		call	dword ptr ds:__imp_??_VUMemory@icu_56@@SAXPAX@Z	; icu_56::UMemory::operator delete[](void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_15B3:				; CODE XREF: icu_56::SimpleNumberFormatFactory::`vector	deleting destructor'(uint)+48j
		mov	eax, [ebp+var_8]
		sub	eax, 4
		jmp	short loc_15E4
; ---------------------------------------------------------------------------

loc_15BB:				; CODE XREF: icu_56::SimpleNumberFormatFactory::`vector	deleting destructor'(uint)+29j
		mov	ecx, [ebp+var_8] ; this
		call	??1SimpleNumberFormatFactory@icu_56@@UAE@XZ ; icu_56::SimpleNumberFormatFactory::~SimpleNumberFormatFactory(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_15E1
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_15E1:				; CODE XREF: icu_56::SimpleNumberFormatFactory::`vector	deleting destructor'(uint)+79j
		mov	eax, [ebp+var_8]

loc_15E4:				; CODE XREF: icu_56::SimpleNumberFormatFactory::`vector	deleting destructor'(uint)+69j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_ESimpleNumberFormatFactory@icu_56@@UAEPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 15FCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__thiscall icu_56::NumberFormat::isParseIntegerOnly(icu_56::NumberFormat *__hidden this)
		public ?isParseIntegerOnly@NumberFormat@icu_56@@QBECXZ
?isParseIntegerOnly@NumberFormat@icu_56@@QBECXZ	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	al, [eax+154h]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?isParseIntegerOnly@NumberFormat@icu_56@@QBECXZ	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1630h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__thiscall icu_56::NumberFormat::isLenient(icu_56::NumberFormat	*__hidden this)
		public ?isLenient@NumberFormat@icu_56@@UBECXZ
?isLenient@NumberFormat@icu_56@@UBECXZ proc near ; DATA	XREF: .rdata:00001948o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	al, [eax+155h]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?isLenient@NumberFormat@icu_56@@UBECXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1664h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::ChoiceFormat::`scalar deleting destructor'(unsigned int)
		public ??_GChoiceFormat@icu_56@@UAEPAXI@Z
??_GChoiceFormat@icu_56@@UAEPAXI@Z proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1ChoiceFormat@icu_56@@UAE@XZ ; icu_56::ChoiceFormat::~ChoiceFormat(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_16AD
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_16AD:				; CODE XREF: icu_56::ChoiceFormat::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GChoiceFormat@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 16C8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::ChoiceFormat::`vector deleting destructor'(unsigned int)
		public ??_EChoiceFormat@icu_56@@UAEPAXI@Z
??_EChoiceFormat@icu_56@@UAEPAXI@Z proc	near
					; DATA XREF: .rdata:const icu_56::ChoiceFormat::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		and	eax, 2
		jz	short loc_1736
		push	offset ??1ChoiceFormat@icu_56@@UAE@XZ ;	icu_56::ChoiceFormat::~ChoiceFormat(void)
		mov	eax, [ebp+var_8]
		mov	ecx, [eax-4]
		push	ecx
		push	1CCh
		mov	edx, [ebp+var_8]
		push	edx
		call	??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_172E
		mov	eax, [ebp+var_8]
		sub	eax, 4
		mov	esi, esp
		push	eax		; void *
		call	dword ptr ds:__imp_??_VUMemory@icu_56@@SAXPAX@Z	; icu_56::UMemory::operator delete[](void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_172E:				; CODE XREF: icu_56::ChoiceFormat::`vector deleting destructor'(uint)+4Bj
		mov	eax, [ebp+var_8]
		sub	eax, 4
		jmp	short loc_175F
; ---------------------------------------------------------------------------

loc_1736:				; CODE XREF: icu_56::ChoiceFormat::`vector deleting destructor'(uint)+29j
		mov	ecx, [ebp+var_8] ; this
		call	??1ChoiceFormat@icu_56@@UAE@XZ ; icu_56::ChoiceFormat::~ChoiceFormat(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_175C
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_175C:				; CODE XREF: icu_56::ChoiceFormat::`vector deleting destructor'(uint)+7Cj
		mov	eax, [ebp+var_8]

loc_175F:				; CODE XREF: icu_56::ChoiceFormat::`vector deleting destructor'(uint)+6Cj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_EChoiceFormat@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1778h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	icu_56::ChoiceFormat::getStaticClassID()
		public ?getStaticClassID@ChoiceFormat@icu_56@@SAPAXXZ
?getStaticClassID@ChoiceFormat@icu_56@@SAPAXXZ proc near
					; CODE XREF: icu_56::ChoiceFormat::getDynamicClassID(void)+23p

var_C0		= byte ptr -0C0h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, offset ?classID@?1??getStaticClassID@ChoiceFormat@icu_56@@SAPAXXZ@4DA ; char `icu_56::ChoiceFormat::getStaticClassID(void)'::`2'::classID
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getStaticClassID@ChoiceFormat@icu_56@@SAPAXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 17A4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__thiscall icu_56::ChoiceFormat::getDynamicClassID(icu_56::ChoiceFormat	*__hidden this)
		public ?getDynamicClassID@ChoiceFormat@icu_56@@UBEPAXXZ
?getDynamicClassID@ChoiceFormat@icu_56@@UBEPAXXZ proc near ; DATA XREF:	.rdata:000018ECo

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		call	?getStaticClassID@ChoiceFormat@icu_56@@SAPAXXZ ; icu_56::ChoiceFormat::getStaticClassID(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?getDynamicClassID@ChoiceFormat@icu_56@@UBEPAXXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 17E0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::ChoiceFormat::ChoiceFormat(icu_56::ChoiceFormat *this, const struct	icu_56::UnicodeString *, enum UErrorCode *)
		public ??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z
??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	ecx, [ebp+var_14] ; this
		call	??0NumberFormat@icu_56@@IAE@XZ ; icu_56::NumberFormat::NumberFormat(void)
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7ChoiceFormat@icu_56@@6B@ ; const icu_56::ChoiceFormat::`vftable'
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		mov	[eax+164h], edx
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+var_14]
		add	ecx, 168h	; this
		call	dword ptr ds:__imp_??0MessagePattern@icu_56@@QAE@AAW4UErrorCode@@@Z ; icu_56::MessagePattern::MessagePattern(UErrorCode	&)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	byte ptr [ebp+var_4], 1
		mov	eax, [ebp+arg_4]
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+arg_0]
		push	ecx		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_14] ; this
		call	?applyPattern@ChoiceFormat@icu_56@@UAEXABVUnicodeString@2@AAW4UErrorCode@@@Z ; icu_56::ChoiceFormat::applyPattern(icu_56::UnicodeString	const &,UErrorCode &)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 18A4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z$0 proc near
					; DATA XREF: .xdata$x:0000199Co
		mov	ecx, [ebp-14h]	; this
		jmp	??1NumberFormat@icu_56@@UAE@XZ ; icu_56::NumberFormat::~NumberFormat(void)
__unwindfunclet$??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z$1 proc near
					; DATA XREF: .xdata$x:000019A4o
		mov	ecx, [ebp-14h]
		add	ecx, 168h	; this
		mov	esi, esp
		call	dword ptr ds:__imp_??1MessagePattern@icu_56@@UAE@XZ ; icu_56::MessagePattern::~MessagePattern(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z proc near
					; DATA XREF: icu_56::ChoiceFormat::ChoiceFormat(icu_56::UnicodeString const &,UErrorCode &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0DCh]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 18E4h
		dd offset ??_R4ChoiceFormat@icu_56@@6B@	; const	icu_56::ChoiceFormat::`RTTI Complete Object Locator'
;
; Exported entry
;
		public ??_7ChoiceFormat@icu_56@@6B@
; const	icu_56::ChoiceFormat::`vftable'
??_7ChoiceFormat@icu_56@@6B@ dd	offset ??_EChoiceFormat@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::ChoiceFormat::ChoiceFormat(icu_56::UnicodeString const &,UErrorCode &)+54o
					; icu_56::ChoiceFormat::ChoiceFormat(double const *,icu_56::UnicodeString const	*,int)+54o ...
					; icu_56::ChoiceFormat::`vector	deleting destructor'(uint)
		dd offset ?getDynamicClassID@ChoiceFormat@icu_56@@UBEPAXXZ ; icu_56::ChoiceFormat::getDynamicClassID(void)
		dd offset ??8ChoiceFormat@icu_56@@UBECABVFormat@1@@Z ; icu_56::ChoiceFormat::operator==(icu_56::Format const &)
		dd offset ?clone@ChoiceFormat@icu_56@@UBEPAVFormat@2@XZ	; icu_56::ChoiceFormat::clone(void)
		dd offset ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@ABVFormattable@2@AAV32@PAVFieldPositionIterator@2@AAW4UErrorCode@@@Z ; icu_56::NumberFormat::format(icu_56::Formattable const &,icu_56::UnicodeString &,icu_56::FieldPositionIterator *,UErrorCode	&)
		dd offset ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@ABVFormattable@2@AAV32@AAVFieldPosition@2@AAW4UErrorCode@@@Z ; icu_56::NumberFormat::format(icu_56::Formattable const &,icu_56::UnicodeString &,icu_56::FieldPosition &,UErrorCode	&)
		dd offset ?parseObject@NumberFormat@icu_56@@UBEXABVUnicodeString@2@AAVFormattable@2@AAVParsePosition@2@@Z ; icu_56::NumberFormat::parseObject(icu_56::UnicodeString const &,icu_56::Formattable	&,icu_56::ParsePosition	&)
		dd offset ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@ABVDigitList@2@AAV32@AAVFieldPosition@2@AAW4UErrorCode@@@Z	; icu_56::NumberFormat::format(icu_56::DigitList const &,icu_56::UnicodeString &,icu_56::FieldPosition &,UErrorCode &)
		dd offset ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@ABVDigitList@2@AAV32@PAVFieldPositionIterator@2@AAW4UErrorCode@@@Z	; icu_56::NumberFormat::format(icu_56::DigitList const &,icu_56::UnicodeString &,icu_56::FieldPositionIterator *,UErrorCode &)
		dd offset ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@ABVStringPiece@2@AAV32@PAVFieldPositionIterator@2@AAW4UErrorCode@@@Z ; icu_56::NumberFormat::format(icu_56::StringPiece const &,icu_56::UnicodeString &,icu_56::FieldPositionIterator *,UErrorCode	&)
		dd offset ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@_JAAV32@PAVFieldPositionIterator@2@AAW4UErrorCode@@@Z ; icu_56::NumberFormat::format(__int64,icu_56::UnicodeString	&,icu_56::FieldPositionIterator	*,UErrorCode &)
		dd offset ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@_JAAV32@AAVFieldPosition@2@AAW4UErrorCode@@@Z ; icu_56::NumberFormat::format(__int64,icu_56::UnicodeString	&,icu_56::FieldPosition	&,UErrorCode &)
		dd offset ?format@ChoiceFormat@icu_56@@UBEAAVUnicodeString@2@_JAAV32@AAVFieldPosition@2@@Z ; icu_56::ChoiceFormat::format(__int64,icu_56::UnicodeString	&,icu_56::FieldPosition	&)
		dd offset ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@HAAV32@PAVFieldPositionIterator@2@AAW4UErrorCode@@@Z ; icu_56::NumberFormat::format(int,icu_56::UnicodeString &,icu_56::FieldPositionIterator *,UErrorCode	&)
		dd offset ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@HAAV32@AAVFieldPosition@2@AAW4UErrorCode@@@Z ; icu_56::NumberFormat::format(int,icu_56::UnicodeString &,icu_56::FieldPosition &,UErrorCode	&)
		dd offset ?format@ChoiceFormat@icu_56@@UBEAAVUnicodeString@2@HAAV32@AAVFieldPosition@2@@Z ; icu_56::ChoiceFormat::format(int,icu_56::UnicodeString &,icu_56::FieldPosition &)
		dd offset ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@NAAV32@PAVFieldPositionIterator@2@AAW4UErrorCode@@@Z ; icu_56::NumberFormat::format(double,icu_56::UnicodeString &,icu_56::FieldPositionIterator *,UErrorCode &)
		dd offset ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@NAAV32@AAVFieldPosition@2@AAW4UErrorCode@@@Z ; icu_56::NumberFormat::format(double,icu_56::UnicodeString &,icu_56::FieldPosition &,UErrorCode &)
		dd offset ?format@ChoiceFormat@icu_56@@UBEAAVUnicodeString@2@NAAV32@AAVFieldPosition@2@@Z ; icu_56::ChoiceFormat::format(double,icu_56::UnicodeString &,icu_56::FieldPosition &)
		dd offset ?parse@NumberFormat@icu_56@@UBEXABVUnicodeString@2@AAVFormattable@2@AAW4UErrorCode@@@Z ; icu_56::NumberFormat::parse(icu_56::UnicodeString const &,icu_56::Formattable &,UErrorCode &)
		dd offset ?parse@ChoiceFormat@icu_56@@UBEXABVUnicodeString@2@AAVFormattable@2@AAVParsePosition@2@@Z ; icu_56::ChoiceFormat::parse(icu_56::UnicodeString	const &,icu_56::Formattable &,icu_56::ParsePosition &)
		dd offset ?parseCurrency@NumberFormat@icu_56@@UBEPAVCurrencyAmount@2@ABVUnicodeString@2@AAVParsePosition@2@@Z ;	icu_56::NumberFormat::parseCurrency(icu_56::UnicodeString const	&,icu_56::ParsePosition	&)
		dd offset ?setParseIntegerOnly@NumberFormat@icu_56@@UAEXC@Z ; icu_56::NumberFormat::setParseIntegerOnly(signed char)
		dd offset ?setLenient@NumberFormat@icu_56@@UAEXC@Z ; icu_56::NumberFormat::setLenient(signed char)
		dd offset ?isLenient@NumberFormat@icu_56@@UBECXZ ; icu_56::NumberFormat::isLenient(void)
		dd offset ?setGroupingUsed@NumberFormat@icu_56@@UAEXC@Z	; icu_56::NumberFormat::setGroupingUsed(signed char)
		dd offset ?setMaximumIntegerDigits@NumberFormat@icu_56@@UAEXH@Z	; icu_56::NumberFormat::setMaximumIntegerDigits(int)
		dd offset ?setMinimumIntegerDigits@NumberFormat@icu_56@@UAEXH@Z	; icu_56::NumberFormat::setMinimumIntegerDigits(int)
		dd offset ?setMaximumFractionDigits@NumberFormat@icu_56@@UAEXH@Z ; icu_56::NumberFormat::setMaximumFractionDigits(int)
		dd offset ?setMinimumFractionDigits@NumberFormat@icu_56@@UAEXH@Z ; icu_56::NumberFormat::setMinimumFractionDigits(int)
		dd offset ?setCurrency@NumberFormat@icu_56@@UAEXPB_WAAW4UErrorCode@@@Z ; icu_56::NumberFormat::setCurrency(wchar_t const *,UErrorCode &)
		dd offset ?setContext@NumberFormat@icu_56@@UAEXW4UDisplayContext@@AAW4UErrorCode@@@Z ; icu_56::NumberFormat::setContext(UDisplayContext,UErrorCode &)
		dd offset ?getContext@NumberFormat@icu_56@@UBE?AW4UDisplayContext@@W4UDisplayContextType@@AAW4UErrorCode@@@Z ; icu_56::NumberFormat::getContext(UDisplayContextType,UErrorCode &)
		dd offset ?getEffectiveCurrency@NumberFormat@icu_56@@MBEXPA_WAAW4UErrorCode@@@Z	; icu_56::NumberFormat::getEffectiveCurrency(wchar_t *,UErrorCode &)
		dd offset ?applyPattern@ChoiceFormat@icu_56@@UAEXABVUnicodeString@2@AAUUParseError@@AAW4UErrorCode@@@Z ; icu_56::ChoiceFormat::applyPattern(icu_56::UnicodeString const	&,UParseError &,UErrorCode &)
		dd offset ?applyPattern@ChoiceFormat@icu_56@@UAEXABVUnicodeString@2@AAW4UErrorCode@@@Z ; icu_56::ChoiceFormat::applyPattern(icu_56::UnicodeString const	&,UErrorCode &)
		dd offset ?toPattern@ChoiceFormat@icu_56@@UBEAAVUnicodeString@2@AAV32@@Z ; icu_56::ChoiceFormat::toPattern(icu_56::UnicodeString &)
		dd offset ?setChoices@ChoiceFormat@icu_56@@EAEXPBNPBCPBVUnicodeString@2@HAAW4UErrorCode@@@Z ; icu_56::ChoiceFormat::setChoices(double const *,signed char const	*,icu_56::UnicodeString	const *,int,UErrorCode &)
		dd offset ?setChoices@ChoiceFormat@icu_56@@UAEXPBNPBCPBVUnicodeString@2@H@Z ; icu_56::ChoiceFormat::setChoices(double const *,signed char const	*,icu_56::UnicodeString	const *,int)
		dd offset ?setChoices@ChoiceFormat@icu_56@@UAEXPBNPBVUnicodeString@2@H@Z ; icu_56::ChoiceFormat::setChoices(double const *,icu_56::UnicodeString const *,int)
		dd offset ?getLimits@ChoiceFormat@icu_56@@UBEPBNAAH@Z ;	icu_56::ChoiceFormat::getLimits(int &)
		dd offset ?getClosures@ChoiceFormat@icu_56@@UBEPBCAAH@Z	; icu_56::ChoiceFormat::getClosures(int	&)
		dd offset ?getFormats@ChoiceFormat@icu_56@@UBEPBVUnicodeString@2@AAH@Z ; icu_56::ChoiceFormat::getFormats(int &)
		dd offset ?format@ChoiceFormat@icu_56@@UBEAAVUnicodeString@2@PBVFormattable@2@HAAV32@AAVFieldPosition@2@AAW4UErrorCode@@@Z ; icu_56::ChoiceFormat::format(icu_56::Formattable const *,int,icu_56::UnicodeString	&,icu_56::FieldPosition	&,UErrorCode &)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 1998h
__unwindtable$??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:000019B0o
		dd offset __unwindfunclet$??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z$0
		dd 0
		dd offset __unwindfunclet$??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z$1
__ehfuncinfo$??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z dd 19930522h, 2
					; DATA XREF: __ehhandler$??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z+14o
		dd offset __unwindtable$??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 19CCh
		public ??_R4ChoiceFormat@icu_56@@6B@
; const	icu_56::ChoiceFormat::`RTTI Complete Object Locator'
??_R4ChoiceFormat@icu_56@@6B@ dd 3 dup(0) ; DATA XREF: .rdata:000018E4o
		dd offset ??_R0?AVChoiceFormat@icu_56@@@8 ; icu_56::ChoiceFormat `RTTI Type Descriptor'
		dd offset ??_R3ChoiceFormat@icu_56@@8 ;	icu_56::ChoiceFormat::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 19E0h
		public ??_R0?AVChoiceFormat@icu_56@@@8
; class	icu_56::ChoiceFormat `RTTI Type	Descriptor'
??_R0?AVChoiceFormat@icu_56@@@8	dd offset ??_7type_info@@6B@ ; DATA XREF: .rdata$r:000019D8o
					; .rdata$r:icu_56::ChoiceFormat::`RTTI Base Class Descriptor at	(0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?avchoiceform	db '.?AVChoiceFormat@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1A04h
		public ??_R3ChoiceFormat@icu_56@@8
; icu_56::ChoiceFormat::`RTTI Class Hierarchy Descriptor'
??_R3ChoiceFormat@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:000019DCo
					; .rdata$r:00001A44o
		dd 5
		dd offset ??_R2ChoiceFormat@icu_56@@8 ;	icu_56::ChoiceFormat::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1A14h
		public ??_R2ChoiceFormat@icu_56@@8
; icu_56::ChoiceFormat::`RTTI Base Class Array'
??_R2ChoiceFormat@icu_56@@8 dd offset ??_R1A@?0A@EA@ChoiceFormat@icu_56@@8
					; DATA XREF: .rdata$r:00001A10o
					; icu_56::ChoiceFormat::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@NumberFormat@icu_56@@8 ; icu_56::NumberFormat::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@Format@icu_56@@8 ; icu_56::Format::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1A2Ch
		public ??_R1A@?0A@EA@ChoiceFormat@icu_56@@8
; icu_56::ChoiceFormat::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@ChoiceFormat@icu_56@@8 dd	offset ??_R0?AVChoiceFormat@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::ChoiceFormat::`RTTI Base Class Array'o
					; icu_56::ChoiceFormat `RTTI Type Descriptor'
		dd 4, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3ChoiceFormat@icu_56@@8 ;	icu_56::ChoiceFormat::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1A48h
		public ??_R1A@?0A@EA@NumberFormat@icu_56@@8
; icu_56::NumberFormat::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@NumberFormat@icu_56@@8 dd	offset ??_R0?AVNumberFormat@icu_56@@@8
					; DATA XREF: .rdata$r:00001A18o
					; .rdata$r:icu_56::NumberFormat::`RTTI Base Class Array'o
					; icu_56::NumberFormat `RTTI Type Descriptor'
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3NumberFormat@icu_56@@8 ;	icu_56::NumberFormat::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 1A64h
		public ??_R0?AVNumberFormat@icu_56@@@8
; class	icu_56::NumberFormat `RTTI Type	Descriptor'
??_R0?AVNumberFormat@icu_56@@@8	dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::NumberFormat::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avnumberfo_0	db '.?AVNumberFormat@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1A88h
		public ??_R3NumberFormat@icu_56@@8
; icu_56::NumberFormat::`RTTI Class Hierarchy Descriptor'
??_R3NumberFormat@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00001A60o
		dd 4
		dd offset ??_R2NumberFormat@icu_56@@8 ;	icu_56::NumberFormat::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1A98h
		public ??_R2NumberFormat@icu_56@@8
; icu_56::NumberFormat::`RTTI Base Class Array'
??_R2NumberFormat@icu_56@@8 dd offset ??_R1A@?0A@EA@NumberFormat@icu_56@@8
					; DATA XREF: .rdata$r:00001A94o
					; icu_56::NumberFormat::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@Format@icu_56@@8 ; icu_56::Format::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1AACh
		public ??_R1A@?0A@EA@Format@icu_56@@8
; icu_56::Format::`RTTI	Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@Format@icu_56@@8 dd offset ??_R0?AVFormat@icu_56@@@8
					; DATA XREF: .rdata$r:00001A1Co
					; .rdata$r:00001A9Co ...
					; icu_56::Format `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3Format@icu_56@@8	; icu_56::Format::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 1AC8h
		public ??_R0?AVFormat@icu_56@@@8
; class	icu_56::Format `RTTI Type Descriptor'
??_R0?AVFormat@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::Format::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avformat@icu	db '.?AVFormat@icu_56@@',0
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1AE4h
		public ??_R3Format@icu_56@@8
; icu_56::Format::`RTTI	Class Hierarchy	Descriptor'
??_R3Format@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00001AC4o
		dd 3
		dd offset ??_R2Format@icu_56@@8	; icu_56::Format::`RTTI	Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1AF4h
		public ??_R2Format@icu_56@@8
; icu_56::Format::`RTTI	Base Class Array'
??_R2Format@icu_56@@8 dd offset	??_R1A@?0A@EA@Format@icu_56@@8
					; DATA XREF: .rdata$r:00001AF0o
					; icu_56::Format::`RTTI	Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1B04h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::ChoiceFormat::ChoiceFormat(icu_56::ChoiceFormat *this, const double	*, const struct	icu_56::UnicodeString *, int)
		public ??0ChoiceFormat@icu_56@@QAE@PBNPBVUnicodeString@1@H@Z
??0ChoiceFormat@icu_56@@QAE@PBNPBVUnicodeString@1@H@Z proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0ChoiceFormat@icu_56@@QAE@PBNPBVUnicodeString@1@H@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	ecx, [ebp+var_14] ; this
		call	??0NumberFormat@icu_56@@IAE@XZ ; icu_56::NumberFormat::NumberFormat(void)
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7ChoiceFormat@icu_56@@6B@ ; const icu_56::ChoiceFormat::`vftable'
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax+164h], 0
		mov	eax, [ebp+var_14]
		add	eax, 164h
		mov	esi, esp
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+var_14]
		add	ecx, 168h	; this
		call	dword ptr ds:__imp_??0MessagePattern@icu_56@@QAE@AAW4UErrorCode@@@Z ; icu_56::MessagePattern::MessagePattern(UErrorCode	&)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	byte ptr [ebp+var_4], 1
		mov	eax, [ebp+var_14]
		add	eax, 164h
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+arg_8]
		push	ecx		; int
		mov	edx, [ebp+arg_4]
		push	edx		; struct icu_56::UnicodeString *
		push	0		; signed __int8	*
		mov	eax, [ebp+arg_0]
		push	eax		; double *
		mov	ecx, [ebp+var_14] ; this
		call	?setChoices@ChoiceFormat@icu_56@@EAEXPBNPBCPBVUnicodeString@2@HAAW4UErrorCode@@@Z ; icu_56::ChoiceFormat::setChoices(double const *,signed char	const *,icu_56::UnicodeString const *,int,UErrorCode &)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
??0ChoiceFormat@icu_56@@QAE@PBNPBVUnicodeString@1@H@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 1BDCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0ChoiceFormat@icu_56@@QAE@PBNPBVUnicodeString@1@H@Z$0	proc near
					; DATA XREF: .xdata$x:00001C20o
		mov	ecx, [ebp-14h]	; this
		jmp	??1NumberFormat@icu_56@@UAE@XZ ; icu_56::NumberFormat::~NumberFormat(void)
__unwindfunclet$??0ChoiceFormat@icu_56@@QAE@PBNPBVUnicodeString@1@H@Z$0	endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0ChoiceFormat@icu_56@@QAE@PBNPBVUnicodeString@1@H@Z$1	proc near
					; DATA XREF: .xdata$x:00001C28o
		mov	ecx, [ebp-14h]
		add	ecx, 168h	; this
		mov	esi, esp
		call	dword ptr ds:__imp_??1MessagePattern@icu_56@@UAE@XZ ; icu_56::MessagePattern::~MessagePattern(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0ChoiceFormat@icu_56@@QAE@PBNPBVUnicodeString@1@H@Z$1	endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0ChoiceFormat@icu_56@@QAE@PBNPBVUnicodeString@1@H@Z proc near
					; DATA XREF: icu_56::ChoiceFormat::ChoiceFormat(double const *,icu_56::UnicodeString const *,int)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0DCh]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0ChoiceFormat@icu_56@@QAE@PBNPBVUnicodeString@1@H@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0ChoiceFormat@icu_56@@QAE@PBNPBVUnicodeString@1@H@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 1C1Ch
__unwindtable$??0ChoiceFormat@icu_56@@QAE@PBNPBVUnicodeString@1@H@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00001C34o
		dd offset __unwindfunclet$??0ChoiceFormat@icu_56@@QAE@PBNPBVUnicodeString@1@H@Z$0
		align 8
		dd offset __unwindfunclet$??0ChoiceFormat@icu_56@@QAE@PBNPBVUnicodeString@1@H@Z$1
__ehfuncinfo$??0ChoiceFormat@icu_56@@QAE@PBNPBVUnicodeString@1@H@Z dd 19930522h, 2
					; DATA XREF: __ehhandler$??0ChoiceFormat@icu_56@@QAE@PBNPBVUnicodeString@1@H@Z+14o
		dd offset __unwindtable$??0ChoiceFormat@icu_56@@QAE@PBNPBVUnicodeString@1@H@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1C50h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::ChoiceFormat::ChoiceFormat(icu_56::ChoiceFormat *this, const double	*, const signed	__int8 *, const	struct icu_56::UnicodeString *,	int)
		public ??0ChoiceFormat@icu_56@@QAE@PBNPBCPBVUnicodeString@1@H@Z
??0ChoiceFormat@icu_56@@QAE@PBNPBCPBVUnicodeString@1@H@Z proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0ChoiceFormat@icu_56@@QAE@PBNPBCPBVUnicodeString@1@H@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	ecx, [ebp+var_14] ; this
		call	??0NumberFormat@icu_56@@IAE@XZ ; icu_56::NumberFormat::NumberFormat(void)
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7ChoiceFormat@icu_56@@6B@ ; const icu_56::ChoiceFormat::`vftable'
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax+164h], 0
		mov	eax, [ebp+var_14]
		add	eax, 164h
		mov	esi, esp
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+var_14]
		add	ecx, 168h	; this
		call	dword ptr ds:__imp_??0MessagePattern@icu_56@@QAE@AAW4UErrorCode@@@Z ; icu_56::MessagePattern::MessagePattern(UErrorCode	&)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	byte ptr [ebp+var_4], 1
		mov	eax, [ebp+var_14]
		add	eax, 164h
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+arg_C]
		push	ecx		; int
		mov	edx, [ebp+arg_8]
		push	edx		; struct icu_56::UnicodeString *
		mov	eax, [ebp+arg_4]
		push	eax		; signed __int8	*
		mov	ecx, [ebp+arg_0]
		push	ecx		; double *
		mov	ecx, [ebp+var_14] ; this
		call	?setChoices@ChoiceFormat@icu_56@@EAEXPBNPBCPBVUnicodeString@2@HAAW4UErrorCode@@@Z ; icu_56::ChoiceFormat::setChoices(double const *,signed char	const *,icu_56::UnicodeString const *,int,UErrorCode &)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	10h
??0ChoiceFormat@icu_56@@QAE@PBNPBCPBVUnicodeString@1@H@Z endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 1D28h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0ChoiceFormat@icu_56@@QAE@PBNPBCPBVUnicodeString@1@H@Z$0 proc	near
					; DATA XREF: .xdata$x:00001D6Co
		mov	ecx, [ebp-14h]	; this
		jmp	??1NumberFormat@icu_56@@UAE@XZ ; icu_56::NumberFormat::~NumberFormat(void)
__unwindfunclet$??0ChoiceFormat@icu_56@@QAE@PBNPBCPBVUnicodeString@1@H@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0ChoiceFormat@icu_56@@QAE@PBNPBCPBVUnicodeString@1@H@Z$1 proc	near
					; DATA XREF: .xdata$x:00001D74o
		mov	ecx, [ebp-14h]
		add	ecx, 168h	; this
		mov	esi, esp
		call	dword ptr ds:__imp_??1MessagePattern@icu_56@@UAE@XZ ; icu_56::MessagePattern::~MessagePattern(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0ChoiceFormat@icu_56@@QAE@PBNPBCPBVUnicodeString@1@H@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0ChoiceFormat@icu_56@@QAE@PBNPBCPBVUnicodeString@1@H@Z proc near
					; DATA XREF: icu_56::ChoiceFormat::ChoiceFormat(double const *,signed char const *,icu_56::UnicodeString const *,int)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0DCh]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0ChoiceFormat@icu_56@@QAE@PBNPBCPBVUnicodeString@1@H@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0ChoiceFormat@icu_56@@QAE@PBNPBCPBVUnicodeString@1@H@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 1D68h
__unwindtable$??0ChoiceFormat@icu_56@@QAE@PBNPBCPBVUnicodeString@1@H@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00001D80o
		dd offset __unwindfunclet$??0ChoiceFormat@icu_56@@QAE@PBNPBCPBVUnicodeString@1@H@Z$0
		dd 0
		dd offset __unwindfunclet$??0ChoiceFormat@icu_56@@QAE@PBNPBCPBVUnicodeString@1@H@Z$1
__ehfuncinfo$??0ChoiceFormat@icu_56@@QAE@PBNPBCPBVUnicodeString@1@H@Z dd 19930522h, 2
					; DATA XREF: __ehhandler$??0ChoiceFormat@icu_56@@QAE@PBNPBCPBVUnicodeString@1@H@Z+14o
		dd offset __unwindtable$??0ChoiceFormat@icu_56@@QAE@PBNPBCPBVUnicodeString@1@H@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1D9Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::ChoiceFormat::ChoiceFormat(icu_56::ChoiceFormat *this, const struct	icu_56::ChoiceFormat *)
		public ??0ChoiceFormat@icu_56@@QAE@ABV01@@Z
??0ChoiceFormat@icu_56@@QAE@ABV01@@Z proc near
					; CODE XREF: icu_56::ChoiceFormat::clone(void)+79p

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0ChoiceFormat@icu_56@@QAE@ABV01@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; struct icu_56::NumberFormat *
		mov	ecx, [ebp+var_14] ; this
		call	??0NumberFormat@icu_56@@IAE@ABV01@@Z ; icu_56::NumberFormat::NumberFormat(icu_56::NumberFormat const &)
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7ChoiceFormat@icu_56@@6B@ ; const icu_56::ChoiceFormat::`vftable'
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+164h]
		mov	[eax+164h], edx
		mov	eax, [ebp+arg_0]
		add	eax, 168h
		mov	esi, esp
		push	eax		; struct icu_56::MessagePattern	*
		mov	ecx, [ebp+var_14]
		add	ecx, 168h	; this
		call	dword ptr ds:__imp_??0MessagePattern@icu_56@@QAE@ABV01@@Z ; icu_56::MessagePattern::MessagePattern(icu_56::MessagePattern const	&)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0ChoiceFormat@icu_56@@QAE@ABV01@@Z endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 1E58h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0ChoiceFormat@icu_56@@QAE@ABV01@@Z$0 proc near
					; DATA XREF: .xdata$x:00001E84o
		mov	ecx, [ebp-14h]	; this
		jmp	??1NumberFormat@icu_56@@UAE@XZ ; icu_56::NumberFormat::~NumberFormat(void)
__unwindfunclet$??0ChoiceFormat@icu_56@@QAE@ABV01@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0ChoiceFormat@icu_56@@QAE@ABV01@@Z proc near
					; DATA XREF: icu_56::ChoiceFormat::ChoiceFormat(icu_56::ChoiceFormat const &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0DCh]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0ChoiceFormat@icu_56@@QAE@ABV01@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0ChoiceFormat@icu_56@@QAE@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 1E80h
__unwindtable$??0ChoiceFormat@icu_56@@QAE@ABV01@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00001E90o
		dd offset __unwindfunclet$??0ChoiceFormat@icu_56@@QAE@ABV01@@Z$0
__ehfuncinfo$??0ChoiceFormat@icu_56@@QAE@ABV01@@Z dd 19930522h,	1
					; DATA XREF: __ehhandler$??0ChoiceFormat@icu_56@@QAE@ABV01@@Z+14o
		dd offset __unwindtable$??0ChoiceFormat@icu_56@@QAE@ABV01@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1EACh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::ChoiceFormat::ChoiceFormat(icu_56::ChoiceFormat *this, const struct	icu_56::UnicodeString *, struct	UParseError *, enum UErrorCode *)
		public ??0ChoiceFormat@icu_56@@AAE@ABVUnicodeString@1@AAUUParseError@@AAW4UErrorCode@@@Z
??0ChoiceFormat@icu_56@@AAE@ABVUnicodeString@1@AAUUParseError@@AAW4UErrorCode@@@Z proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0ChoiceFormat@icu_56@@AAE@ABVUnicodeString@1@AAUUParseError@@AAW4UErrorCode@@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	ecx, [ebp+var_14] ; this
		call	??0NumberFormat@icu_56@@IAE@XZ ; icu_56::NumberFormat::NumberFormat(void)
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7ChoiceFormat@icu_56@@6B@ ; const icu_56::ChoiceFormat::`vftable'
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_8]
		mov	edx, [ecx]
		mov	[eax+164h], edx
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+var_14]
		add	ecx, 168h	; this
		call	dword ptr ds:__imp_??0MessagePattern@icu_56@@QAE@AAW4UErrorCode@@@Z ; icu_56::MessagePattern::MessagePattern(UErrorCode	&)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	byte ptr [ebp+var_4], 1
		mov	eax, [ebp+arg_8]
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+arg_4]
		push	ecx		; struct UParseError *
		mov	edx, [ebp+arg_0]
		push	edx		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_14] ; this
		call	?applyPattern@ChoiceFormat@icu_56@@UAEXABVUnicodeString@2@AAUUParseError@@AAW4UErrorCode@@@Z ; icu_56::ChoiceFormat::applyPattern(icu_56::UnicodeString	const &,UParseError &,UErrorCode &)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
??0ChoiceFormat@icu_56@@AAE@ABVUnicodeString@1@AAUUParseError@@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 1F74h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0ChoiceFormat@icu_56@@AAE@ABVUnicodeString@1@AAUUParseError@@AAW4UErrorCode@@@Z$0 proc near
					; DATA XREF: .xdata$x:00001FB8o
		mov	ecx, [ebp-14h]	; this
		jmp	??1NumberFormat@icu_56@@UAE@XZ ; icu_56::NumberFormat::~NumberFormat(void)
__unwindfunclet$??0ChoiceFormat@icu_56@@AAE@ABVUnicodeString@1@AAUUParseError@@AAW4UErrorCode@@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0ChoiceFormat@icu_56@@AAE@ABVUnicodeString@1@AAUUParseError@@AAW4UErrorCode@@@Z$1 proc near
					; DATA XREF: .xdata$x:00001FC0o
		mov	ecx, [ebp-14h]
		add	ecx, 168h	; this
		mov	esi, esp
		call	dword ptr ds:__imp_??1MessagePattern@icu_56@@UAE@XZ ; icu_56::MessagePattern::~MessagePattern(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0ChoiceFormat@icu_56@@AAE@ABVUnicodeString@1@AAUUParseError@@AAW4UErrorCode@@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0ChoiceFormat@icu_56@@AAE@ABVUnicodeString@1@AAUUParseError@@AAW4UErrorCode@@@Z proc near
					; DATA XREF: icu_56::ChoiceFormat::ChoiceFormat(icu_56::UnicodeString const &,UParseError &,UErrorCode &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0DCh]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0ChoiceFormat@icu_56@@AAE@ABVUnicodeString@1@AAUUParseError@@AAW4UErrorCode@@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0ChoiceFormat@icu_56@@AAE@ABVUnicodeString@1@AAUUParseError@@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 1FB4h
__unwindtable$??0ChoiceFormat@icu_56@@AAE@ABVUnicodeString@1@AAUUParseError@@AAW4UErrorCode@@@Z	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00001FCCo
		dd offset __unwindfunclet$??0ChoiceFormat@icu_56@@AAE@ABVUnicodeString@1@AAUUParseError@@AAW4UErrorCode@@@Z$0
		align 10h
		dd offset __unwindfunclet$??0ChoiceFormat@icu_56@@AAE@ABVUnicodeString@1@AAUUParseError@@AAW4UErrorCode@@@Z$1
__ehfuncinfo$??0ChoiceFormat@icu_56@@AAE@ABVUnicodeString@1@AAUUParseError@@AAW4UErrorCode@@@Z dd 19930522h, 2
					; DATA XREF: __ehhandler$??0ChoiceFormat@icu_56@@AAE@ABVUnicodeString@1@AAUUParseError@@AAW4UErrorCode@@@Z+14o
		dd offset __unwindtable$??0ChoiceFormat@icu_56@@AAE@ABVUnicodeString@1@AAUUParseError@@AAW4UErrorCode@@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1FE8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual signed char __thiscall icu_56::ChoiceFormat::operator==(class	icu_56::Format const &)const
		public ??8ChoiceFormat@icu_56@@UBECABVFormat@1@@Z
??8ChoiceFormat@icu_56@@UBECABVFormat@1@@Z proc	near ; DATA XREF: .rdata:000018F0o

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'

loc_2000:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::fixedo
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_0]
		jnz	short loc_2017
		mov	al, 1
		jmp	short loc_2055
; ---------------------------------------------------------------------------

loc_2017:				; CODE XREF: icu_56::ChoiceFormat::operator==(icu_56::Format const &)+29j
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		call	??8NumberFormat@icu_56@@UBECABVFormat@1@@Z ; icu_56::NumberFormat::operator==(icu_56::Format const &)
		movsx	ecx, al
		test	ecx, ecx
		jnz	short loc_202E
		xor	al, al
		jmp	short loc_2055
; ---------------------------------------------------------------------------

loc_202E:				; CODE XREF: icu_56::ChoiceFormat::operator==(icu_56::Format const &)+40j
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_14]
		add	eax, 168h
		mov	esi, esp
		push	eax
		mov	ecx, [ebp+var_8]
		add	ecx, 168h
		call	dword ptr ds:__imp_??8MessagePattern@icu_56@@QBECABV01@@Z ; icu_56::MessagePattern::operator==(icu_56::MessagePattern const &)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_2055:				; CODE XREF: icu_56::ChoiceFormat::operator==(icu_56::Format const &)+2Dj
					; icu_56::ChoiceFormat::operator==(icu_56::Format const	&)+44j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??8ChoiceFormat@icu_56@@UBECABVFormat@1@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 206Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::ChoiceFormat const & __thiscall	icu_56::ChoiceFormat::operator=(class icu_56::ChoiceFormat const &)
		public ??4ChoiceFormat@icu_56@@QAEABV01@ABV01@@Z
??4ChoiceFormat@icu_56@@QAEABV01@ABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_0]
		jz	short loc_20D6
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		call	??4NumberFormat@icu_56@@IAEAAV01@ABV01@@Z ; icu_56::NumberFormat::operator=(icu_56::NumberFormat const &)
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+164h]
		mov	[eax+164h], edx
		mov	eax, [ebp+arg_0]
		add	eax, 168h
		mov	esi, esp
		push	eax
		mov	ecx, [ebp+var_8]
		add	ecx, 168h
		call	dword ptr ds:__imp_??4MessagePattern@icu_56@@QAEAAV01@ABV01@@Z ; icu_56::MessagePattern::operator=(icu_56::MessagePattern const	&)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_20D6:				; CODE XREF: icu_56::ChoiceFormat::operator=(icu_56::ChoiceFormat const	&)+29j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??4ChoiceFormat@icu_56@@QAEABV01@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 20F0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::ChoiceFormat::~ChoiceFormat(icu_56::ChoiceFormat *__hidden this)
		public ??1ChoiceFormat@icu_56@@UAE@XZ
??1ChoiceFormat@icu_56@@UAE@XZ proc near
					; CODE XREF: icu_56::ChoiceFormat::`scalar deleting destructor'(uint)+26p
					; icu_56::ChoiceFormat::`vector	deleting destructor'(uint)+71p
					; DATA XREF: ...

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??1ChoiceFormat@icu_56@@UAE@XZ
		mov	eax, large fs:0
		push	eax
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7ChoiceFormat@icu_56@@6B@ ; const icu_56::ChoiceFormat::`vftable'
		mov	[ebp+var_4], 0
		mov	ecx, [ebp+var_14]
		add	ecx, 168h	; this
		mov	esi, esp
		call	dword ptr ds:__imp_??1MessagePattern@icu_56@@UAE@XZ ; icu_56::MessagePattern::~MessagePattern(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, [ebp+var_14] ; this
		call	??1NumberFormat@icu_56@@UAE@XZ ; icu_56::NumberFormat::~NumberFormat(void)
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1ChoiceFormat@icu_56@@UAE@XZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 2188h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??1ChoiceFormat@icu_56@@UAE@XZ$0 proc near ; DATA XREF:	.xdata$x:000021B4o
		mov	ecx, [ebp-14h]	; this
		jmp	??1NumberFormat@icu_56@@UAE@XZ ; icu_56::NumberFormat::~NumberFormat(void)
__unwindfunclet$??1ChoiceFormat@icu_56@@UAE@XZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??1ChoiceFormat@icu_56@@UAE@XZ proc	near
					; DATA XREF: icu_56::ChoiceFormat::~ChoiceFormat(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0DCh]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??1ChoiceFormat@icu_56@@UAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??1ChoiceFormat@icu_56@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 21B0h
__unwindtable$??1ChoiceFormat@icu_56@@UAE@XZ dd	0FFFFFFFFh ; DATA XREF:	.xdata$x:000021C0o
		dd offset __unwindfunclet$??1ChoiceFormat@icu_56@@UAE@XZ$0
__ehfuncinfo$??1ChoiceFormat@icu_56@@UAE@XZ dd 19930522h, 1
					; DATA XREF: __ehhandler$??1ChoiceFormat@icu_56@@UAE@XZ+14o
		dd offset __unwindtable$??1ChoiceFormat@icu_56@@UAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 21DCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::UnicodeString *__cdecl	icu_56::ChoiceFormat::dtos(double, struct icu_56::UnicodeString	*)
		public ?dtos@ChoiceFormat@icu_56@@CAAAVUnicodeString@2@NAAV32@@Z
?dtos@ChoiceFormat@icu_56@@CAAAVUnicodeString@2@NAAV32@@Z proc near
					; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+17Bp

var_178		= qword	ptr -178h
var_160		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
var_154		= byte ptr -154h
var_4C		= dword	ptr -4Ch
var_40		= dword	ptr -40h
Dest		= byte ptr -34h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= qword	ptr  8
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?dtos@ChoiceFormat@icu_56@@CAAAVUnicodeString@2@NAAV32@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 154h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_160]
		mov	ecx, 55h ; 'U'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		lea	eax, [ebp+Dest]
		mov	[ebp+var_40], eax
		mov	esi, esp
		sub	esp, 8
		fld	[ebp+arg_0]
		fstp	[esp+178h+var_178]
		push	0Fh
		push	offset ??_C@_04GPHHEOMN@?$CF?4?$CKg?$AA@ ; "%.*g"
		lea	eax, [ebp+Dest]
		push	eax		; Dest
		call	dword ptr ds:__imp__sprintf
		add	esp, 14h
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_2248:				; CODE XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+A7j
		mov	eax, [ebp+var_40]
		movsx	ecx, byte ptr [eax]
		test	ecx, ecx
		jz	short loc_2285
		mov	eax, [ebp+var_40]
		movsx	ecx, byte ptr [eax]
		cmp	ecx, 2Dh ; '-'
		jz	short loc_227A
		mov	eax, [ebp+var_40]
		movsx	ecx, byte ptr [eax]
		mov	esi, esp
		push	ecx		; C
		call	dword ptr ds:__imp__isdigit
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_2285

loc_227A:				; CODE XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+7Fj
		mov	eax, [ebp+var_40]
		add	eax, 1
		mov	[ebp+var_40], eax
		jmp	short loc_2248
; ---------------------------------------------------------------------------

loc_2285:				; CODE XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+74j
					; icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+9Cj
		mov	eax, [ebp+var_40]
		movsx	ecx, byte ptr [eax]
		test	ecx, ecx
		jz	short loc_22A9
		mov	eax, [ebp+var_40]
		movsx	ecx, byte ptr [eax]
		cmp	ecx, 65h ; 'e'
		jz	short loc_22A9
		mov	eax, [ebp+var_40]
		mov	byte ptr [eax],	2Eh ; '.'
		mov	eax, [ebp+var_40]
		add	eax, 1
		mov	[ebp+var_40], eax

loc_22A9:				; CODE XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+B1j
					; icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+BCj ...
		mov	eax, [ebp+var_40]
		movsx	ecx, byte ptr [eax]
		test	ecx, ecx
		jz	short loc_22C9
		mov	eax, [ebp+var_40]
		movsx	ecx, byte ptr [eax]
		cmp	ecx, 65h ; 'e'
		jz	short loc_22C9
		mov	eax, [ebp+var_40]
		add	eax, 1
		mov	[ebp+var_40], eax
		jmp	short loc_22A9
; ---------------------------------------------------------------------------

loc_22C9:				; CODE XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+D5j
					; icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+E0j
		mov	eax, [ebp+var_40]
		movsx	ecx, byte ptr [eax]
		cmp	ecx, 65h ; 'e'
		jnz	loc_235C
		mov	eax, [ebp+var_40]
		add	eax, 1
		mov	[ebp+var_40], eax
		mov	eax, [ebp+var_40]
		movsx	ecx, byte ptr [eax]
		cmp	ecx, 2Bh ; '+'
		jz	short loc_22F7
		mov	eax, [ebp+var_40]
		movsx	ecx, byte ptr [eax]
		cmp	ecx, 2Dh ; '-'
		jnz	short loc_2300

loc_22F7:				; CODE XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+10Ej
		mov	eax, [ebp+var_40]
		add	eax, 1
		mov	[ebp+var_40], eax

loc_2300:				; CODE XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+119j
		mov	eax, [ebp+var_40]
		mov	[ebp+var_4C], eax

loc_2306:				; CODE XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+13Ej
		mov	eax, [ebp+var_40]
		movsx	ecx, byte ptr [eax]
		cmp	ecx, 30h ; '0'
		jnz	short loc_231C
		mov	eax, [ebp+var_40]
		add	eax, 1
		mov	[ebp+var_40], eax
		jmp	short loc_2306
; ---------------------------------------------------------------------------

loc_231C:				; CODE XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+133j
		mov	eax, [ebp+var_40]
		movsx	ecx, byte ptr [eax]
		test	ecx, ecx
		jz	short loc_235C
		mov	eax, [ebp+var_4C]
		cmp	eax, [ebp+var_40]
		jz	short loc_235C

loc_232E:				; CODE XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+178j
		mov	eax, [ebp+var_40]
		movsx	ecx, byte ptr [eax]
		test	ecx, ecx
		jz	short loc_2356
		mov	eax, [ebp+var_4C]
		mov	ecx, [ebp+var_40]
		mov	dl, [ecx]
		mov	[eax], dl
		mov	eax, [ebp+var_4C]
		add	eax, 1
		mov	[ebp+var_4C], eax
		mov	ecx, [ebp+var_40]
		add	ecx, 1
		mov	[ebp+var_40], ecx
		jmp	short loc_232E
; ---------------------------------------------------------------------------

loc_2356:				; CODE XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+15Aj
		mov	eax, [ebp+var_4C]
		mov	byte ptr [eax],	0

loc_235C:				; CODE XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+F6j
					; icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+148j ...
		mov	esi, esp
		push	0
		push	0FFFFFFFFh
		lea	eax, [ebp+Dest]
		push	eax
		lea	ecx, [ebp+var_154]
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@PBDHW4EInvariant@01@@Z ; icu_56::UnicodeString::UnicodeString(char const *,int,icu_56::UnicodeString::EInvariant)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_15C], eax
		mov	ecx, [ebp+var_15C]
		mov	[ebp+var_160], ecx
		mov	[ebp+var_4], 0
		mov	esi, esp
		mov	edx, [ebp+var_160]
		push	edx
		mov	ecx, [ebp+arg_8]
		call	dword ptr ds:__imp_??4UnicodeString@icu_56@@QAEAAV01@$$QAV01@@Z	; icu_56::UnicodeString::operator=(icu_56::UnicodeString &&)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		lea	ecx, [ebp+var_154] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_8]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN21
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 160h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?dtos@ChoiceFormat@icu_56@@CAAAVUnicodeString@2@NAAV32@@Z endp ; sp-analysis failed

; ---------------------------------------------------------------------------
$LN21		dd 1			; DATA XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+1F2o
		dd offset $LN20
$LN20		db 0CCh			; DATA XREF: .text:00002408o
		db 3 dup(0FFh)
		dd 1Fh
		dd offset $LN18		; "temp"
$LN18		db 'temp',0             ; DATA XREF: .text:00002414o
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 2420h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?dtos@ChoiceFormat@icu_56@@CAAAVUnicodeString@2@NAAV32@@Z$0 proc near
					; DATA XREF: .xdata$x:0000246Co
		mov	esi, esp
		lea	ecx, [ebp-154h]	; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?dtos@ChoiceFormat@icu_56@@CAAAVUnicodeString@2@NAAV32@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?dtos@ChoiceFormat@icu_56@@CAAAVUnicodeString@2@NAAV32@@Z proc near
					; DATA XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-164h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?dtos@ChoiceFormat@icu_56@@CAAAVUnicodeString@2@NAAV32@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?dtos@ChoiceFormat@icu_56@@CAAAVUnicodeString@2@NAAV32@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2460h
		public ??_C@_04GPHHEOMN@?$CF?4?$CKg?$AA@
; char `string'[]
??_C@_04GPHHEOMN@?$CF?4?$CKg?$AA@ db '%.*g',0
					; DATA XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+53o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 2468h
__unwindtable$?dtos@ChoiceFormat@icu_56@@CAAAVUnicodeString@2@NAAV32@@Z	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00002478o
		dd offset __unwindfunclet$?dtos@ChoiceFormat@icu_56@@CAAAVUnicodeString@2@NAAV32@@Z$0
__ehfuncinfo$?dtos@ChoiceFormat@icu_56@@CAAAVUnicodeString@2@NAAV32@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$?dtos@ChoiceFormat@icu_56@@CAAAVUnicodeString@2@NAAV32@@Z+1Eo
		dd offset __unwindtable$?dtos@ChoiceFormat@icu_56@@CAAAVUnicodeString@2@NAAV32@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2494h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::ChoiceFormat::applyPattern(icu_56::ChoiceFormat *this, const struct icu_56::UnicodeString *, enum UErrorCode *)
		public ?applyPattern@ChoiceFormat@icu_56@@UAEXABVUnicodeString@2@AAW4UErrorCode@@@Z
?applyPattern@ChoiceFormat@icu_56@@UAEXABVUnicodeString@2@AAW4UErrorCode@@@Z proc near
					; CODE XREF: icu_56::ChoiceFormat::ChoiceFormat(icu_56::UnicodeString const &,UErrorCode &)+93p
					; DATA XREF: .rdata:00001974o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax		; enum UErrorCode *
		push	0		; struct UParseError *
		mov	ecx, [ebp+arg_0]
		push	ecx		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_8]
		add	ecx, 168h	; this
		call	dword ptr ds:__imp_?parseChoiceStyle@MessagePattern@icu_56@@QAEAAV12@ABVUnicodeString@2@PAUUParseError@@AAW4UErrorCode@@@Z ; icu_56::MessagePattern::parseChoiceStyle(icu_56::UnicodeString const &,UParseError	*,UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		mov	[eax+164h], edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?applyPattern@ChoiceFormat@icu_56@@UAEXABVUnicodeString@2@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2500h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::ChoiceFormat::applyPattern(icu_56::ChoiceFormat *this, const struct icu_56::UnicodeString *, struct UParseError *, enum UErrorCode *)
		public ?applyPattern@ChoiceFormat@icu_56@@UAEXABVUnicodeString@2@AAUUParseError@@AAW4UErrorCode@@@Z
?applyPattern@ChoiceFormat@icu_56@@UAEXABVUnicodeString@2@AAUUParseError@@AAW4UErrorCode@@@Z proc near
					; CODE XREF: icu_56::ChoiceFormat::ChoiceFormat(icu_56::UnicodeString const &,UParseError &,UErrorCode &)+97p
					; DATA XREF: .rdata:00001970o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+arg_4]
		push	ecx		; struct UParseError *
		mov	edx, [ebp+arg_0]
		push	edx		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_8]
		add	ecx, 168h	; this
		call	dword ptr ds:__imp_?parseChoiceStyle@MessagePattern@icu_56@@QAEAAV12@ABVUnicodeString@2@PAUUParseError@@AAW4UErrorCode@@@Z ; icu_56::MessagePattern::parseChoiceStyle(icu_56::UnicodeString const &,UParseError	*,UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_8]
		mov	edx, [ecx]
		mov	[eax+164h], edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?applyPattern@ChoiceFormat@icu_56@@UAEXABVUnicodeString@2@AAUUParseError@@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 256Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::UnicodeString *__thiscall icu_56::ChoiceFormat::toPattern(icu_56::ChoiceFormat	*this, struct icu_56::UnicodeString *)
		public ?toPattern@ChoiceFormat@icu_56@@UBEAAVUnicodeString@2@AAV32@@Z
?toPattern@ChoiceFormat@icu_56@@UBEAAVUnicodeString@2@AAV32@@Z proc near
					; DATA XREF: .rdata:00001978o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8]
		add	ecx, 168h	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?getPatternString@MessagePattern@icu_56@@QBEABVUnicodeString@2@XZ ; icu_56::MessagePattern::getPatternString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	eax
		mov	ecx, [ebp+arg_0]
		call	dword ptr ds:__imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z ;	icu_56::UnicodeString::operator=(icu_56::UnicodeString const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?toPattern@ChoiceFormat@icu_56@@UBEAAVUnicodeString@2@AAV32@@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 25D0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::ChoiceFormat::setChoices(icu_56::ChoiceFormat	*this, const double *, const struct icu_56::UnicodeString *, int)
		public ?setChoices@ChoiceFormat@icu_56@@UAEXPBNPBVUnicodeString@2@H@Z
?setChoices@ChoiceFormat@icu_56@@UAEXPBNPBVUnicodeString@2@H@Z proc near
					; DATA XREF: .rdata:00001984o

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	[ebp+var_14], 0
		mov	esi, esp
		lea	eax, [ebp+var_14]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		push	0
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+94h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?setChoices@ChoiceFormat@icu_56@@UAEXPBNPBVUnicodeString@2@H@Z endp

; ---------------------------------------------------------------------------
$LN5		dd 1			; DATA XREF: icu_56::ChoiceFormat::setChoices(double const *,icu_56::UnicodeString const *,int)+59o
		dd offset $LN4
$LN4		dd 0FFFFFFECh, 4	; DATA XREF: .text:00002650o
		dd offset $LN3		; "errorCode"
$LN3		db 'errorCode',0        ; DATA XREF: .text:0000265Co
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 266Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::ChoiceFormat::setChoices(icu_56::ChoiceFormat	*this, const double *, const signed __int8 *, const struct icu_56::UnicodeString *, int)
		public ?setChoices@ChoiceFormat@icu_56@@UAEXPBNPBCPBVUnicodeString@2@H@Z
?setChoices@ChoiceFormat@icu_56@@UAEXPBNPBCPBVUnicodeString@2@H@Z proc near
					; DATA XREF: .rdata:00001980o

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	[ebp+var_14], 0
		mov	esi, esp
		lea	eax, [ebp+var_14]
		push	eax
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax+94h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	10h
?setChoices@ChoiceFormat@icu_56@@UAEXPBNPBCPBVUnicodeString@2@H@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN5_0		dd 1			; DATA XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int)+5Bo
		dd offset $LN4_0
$LN4_0		dd 0FFFFFFECh, 4	; DATA XREF: .text:000026F0o
		dd offset $LN3_0	; "errorCode"
$LN3_0		db 'errorCode',0        ; DATA XREF: .text:000026FCo
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 270Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::ChoiceFormat::setChoices(icu_56::ChoiceFormat	*this, const double *, const signed __int8 *, const struct icu_56::UnicodeString *, int, enum UErrorCode *)
		public ?setChoices@ChoiceFormat@icu_56@@EAEXPBNPBCPBVUnicodeString@2@HAAW4UErrorCode@@@Z
?setChoices@ChoiceFormat@icu_56@@EAEXPBNPBCPBVUnicodeString@2@HAAW4UErrorCode@@@Z proc near
					; CODE XREF: icu_56::ChoiceFormat::ChoiceFormat(double const *,icu_56::UnicodeString const *,int)+A6p
					; icu_56::ChoiceFormat::ChoiceFormat(double const *,signed char	const *,icu_56::UnicodeString const *,int)+A8p
					; DATA XREF: ...

var_1C8		= qword	ptr -1C8h
var_1B4		= byte ptr -1B4h
var_F0		= word ptr -0F0h
var_E4		= dword	ptr -0E4h
var_D8		= dword	ptr -0D8h
var_CC		= dword	ptr -0CCh
var_C0		= dword	ptr -0C0h
var_B4		= byte ptr -0B4h
var_6C		= dword	ptr -6Ch
var_60		= byte ptr -60h
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?setChoices@ChoiceFormat@icu_56@@EAEXPBNPBCPBVUnicodeString@2@HAAW4UErrorCode@@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 1A8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_1B4]
		mov	ecx, 6Ah ; 'j'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_18], ecx
		mov	eax, [ebp+arg_10]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_276B
		jmp	loc_2AAB
; ---------------------------------------------------------------------------

loc_276B:				; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+58j
		cmp	[ebp+arg_0], 0
		jz	short loc_2777
		cmp	[ebp+arg_8], 0
		jnz	short loc_2785

loc_2777:				; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+63j
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 1
		jmp	loc_2AAB
; ---------------------------------------------------------------------------

loc_2785:				; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+69j
		mov	esi, esp
		lea	ecx, [ebp+var_60] ; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@XZ ; icu_56::UnicodeString::UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0
		mov	[ebp+var_6C], 0
		jmp	short loc_27B0
; ---------------------------------------------------------------------------

loc_27A7:				; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+360j
		mov	eax, [ebp+var_6C]
		add	eax, 1
		mov	[ebp+var_6C], eax

loc_27B0:				; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+99j
		mov	eax, [ebp+var_6C]
		cmp	eax, [ebp+arg_C]
		jge	loc_2A71
		cmp	[ebp+var_6C], 0
		jz	short loc_27D6
		mov	esi, esp
		push	7Ch ; '|'
		lea	ecx, [ebp+var_60]
		call	dword ptr ds:__imp_??YUnicodeString@icu_56@@QAEAAV01@_W@Z ; icu_56::UnicodeString::operator+=(wchar_t)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_27D6:				; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+B4j
		mov	esi, esp
		lea	ecx, [ebp+var_B4] ; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@XZ ; icu_56::UnicodeString::UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	byte ptr [ebp+var_4], 1
		mov	eax, [ebp+var_6C]
		mov	ecx, [ebp+arg_0]
		sub	esp, 8
		fld	qword ptr [ecx+eax*8]
		fstp	[esp+1C8h+var_1C8]
		call	_uprv_isPositiveInfinity_56
		add	esp, 8
		movsx	edx, al
		test	edx, edx
		jz	short loc_2826
		mov	esi, esp
		push	221Eh
		lea	ecx, [ebp+var_60]
		call	dword ptr ds:__imp_??YUnicodeString@icu_56@@QAEAAV01@_W@Z ; icu_56::UnicodeString::operator+=(wchar_t)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_28A2
; ---------------------------------------------------------------------------

loc_2826:				; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+FFj
		mov	eax, [ebp+var_6C]
		mov	ecx, [ebp+arg_0]
		sub	esp, 8
		fld	qword ptr [ecx+eax*8]
		fstp	[esp+1C8h+var_1C8]
		call	_uprv_isNegativeInfinity_56
		add	esp, 8
		movsx	edx, al
		test	edx, edx
		jz	short loc_2871
		mov	esi, esp
		push	2Dh ; '-'
		lea	ecx, [ebp+var_60]
		call	dword ptr ds:__imp_??YUnicodeString@icu_56@@QAEAAV01@_W@Z ; icu_56::UnicodeString::operator+=(wchar_t)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	221Eh
		lea	ecx, [ebp+var_60]
		call	dword ptr ds:__imp_??YUnicodeString@icu_56@@QAEAAV01@_W@Z ; icu_56::UnicodeString::operator+=(wchar_t)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_28A2
; ---------------------------------------------------------------------------

loc_2871:				; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+136j
		lea	eax, [ebp+var_B4]
		push	eax		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_6C]
		mov	edx, [ebp+arg_0]
		sub	esp, 8
		fld	qword ptr [edx+ecx*8]
		fstp	qword ptr [esp]	; double
		call	?dtos@ChoiceFormat@icu_56@@CAAAVUnicodeString@2@NAAV32@@Z ; icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)
		add	esp, 0Ch
		mov	esi, esp
		push	eax
		lea	ecx, [ebp+var_60]
		call	dword ptr ds:__imp_??YUnicodeString@icu_56@@QAEAAV01@ABV01@@Z ;	icu_56::UnicodeString::operator+=(icu_56::UnicodeString	const &)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_28A2:				; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+118j
					; icu_56::ChoiceFormat::setChoices(double const	*,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+163j
		cmp	[ebp+arg_4], 0
		jz	short loc_28CB
		mov	eax, [ebp+arg_4]
		add	eax, [ebp+var_6C]
		movsx	ecx, byte ptr [eax]
		test	ecx, ecx
		jz	short loc_28CB
		mov	esi, esp
		push	3Ch ; '<'
		lea	ecx, [ebp+var_60]
		call	dword ptr ds:__imp_??YUnicodeString@icu_56@@QAEAAV01@_W@Z ; icu_56::UnicodeString::operator+=(wchar_t)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_28DF
; ---------------------------------------------------------------------------

loc_28CB:				; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+19Aj
					; icu_56::ChoiceFormat::setChoices(double const	*,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+1A7j
		mov	esi, esp
		push	23h ; '#'
		lea	ecx, [ebp+var_60]
		call	dword ptr ds:__imp_??YUnicodeString@icu_56@@QAEAAV01@_W@Z ; icu_56::UnicodeString::operator+=(wchar_t)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_28DF:				; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+1BDj
		mov	eax, [ebp+var_6C]
		shl	eax, 6
		add	eax, [ebp+arg_8]
		mov	[ebp+var_C0], eax
		mov	esi, esp
		mov	ecx, [ebp+var_C0] ; this
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_CC], eax
		mov	[ebp+var_D8], 0
		mov	[ebp+var_E4], 0
		jmp	short loc_292E
; ---------------------------------------------------------------------------

loc_291F:				; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+2E0j
					; icu_56::ChoiceFormat::setChoices(double const	*,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+342j
		mov	eax, [ebp+var_E4]
		add	eax, 1
		mov	[ebp+var_E4], eax

loc_292E:				; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+211j
		mov	eax, [ebp+var_E4]
		cmp	eax, [ebp+var_CC]
		jge	loc_2A53
		mov	esi, esp
		mov	eax, [ebp+var_E4]
		push	eax
		mov	ecx, [ebp+var_C0]
		call	dword ptr ds:__imp_??AUnicodeString@icu_56@@QBE_WH@Z ; icu_56::UnicodeString::operator[](int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_F0], ax
		movzx	eax, [ebp+var_F0]
		cmp	eax, 27h ; '''
		jnz	short loc_2997
		cmp	[ebp+var_D8], 0
		jnz	short loc_2997
		mov	esi, esp
		movzx	eax, [ebp+var_F0]
		push	eax		; wchar_t
		lea	ecx, [ebp+var_60] ; this
		call	dword ptr ds:__imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z ; icu_56::UnicodeString::append(wchar_t)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	loc_2A34
; ---------------------------------------------------------------------------

loc_2997:				; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+261j
					; icu_56::ChoiceFormat::setChoices(double const	*,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+26Aj
		movzx	eax, [ebp+var_F0]
		cmp	eax, 7Ch ; '|'
		jnz	short loc_29F3
		cmp	[ebp+var_D8], 0
		jnz	short loc_29F3
		mov	esi, esp
		push	27h ; '''       ; wchar_t
		mov	edi, esp
		movzx	eax, [ebp+var_F0]
		push	eax		; wchar_t
		mov	ebx, esp
		push	27h ; '''       ; wchar_t
		lea	ecx, [ebp+var_60] ; this
		call	dword ptr ds:__imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z ; icu_56::UnicodeString::append(wchar_t)
		cmp	ebx, esp
		call	__RTC_CheckEsp
		mov	ecx, eax	; this
		call	dword ptr ds:__imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z ; icu_56::UnicodeString::append(wchar_t)
		cmp	edi, esp
		call	__RTC_CheckEsp
		mov	ecx, eax	; this
		call	dword ptr ds:__imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z ; icu_56::UnicodeString::append(wchar_t)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	loc_291F
; ---------------------------------------------------------------------------
		jmp	short loc_2A34
; ---------------------------------------------------------------------------

loc_29F3:				; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+295j
					; icu_56::ChoiceFormat::setChoices(double const	*,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+29Ej
		movzx	eax, [ebp+var_F0]
		cmp	eax, 7Bh ; '{'
		jnz	short loc_2A10
		mov	eax, [ebp+var_D8]
		add	eax, 1
		mov	[ebp+var_D8], eax
		jmp	short loc_2A34
; ---------------------------------------------------------------------------

loc_2A10:				; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+2F1j
		movzx	eax, [ebp+var_F0]
		cmp	eax, 7Dh ; '}'
		jnz	short loc_2A34
		cmp	[ebp+var_D8], 0
		jle	short loc_2A34
		mov	eax, [ebp+var_D8]
		sub	eax, 1
		mov	[ebp+var_D8], eax

loc_2A34:				; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+286j
					; icu_56::ChoiceFormat::setChoices(double const	*,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+2E5j ...
		mov	esi, esp
		movzx	eax, [ebp+var_F0]
		push	eax		; wchar_t
		lea	ecx, [ebp+var_60] ; this
		call	dword ptr ds:__imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z ; icu_56::UnicodeString::append(wchar_t)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	loc_291F
; ---------------------------------------------------------------------------

loc_2A53:				; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+22Ej
		mov	byte ptr [ebp+var_4], 0
		mov	esi, esp
		lea	ecx, [ebp+var_B4] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	loc_27A7
; ---------------------------------------------------------------------------

loc_2A71:				; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+AAj
		mov	esi, esp
		mov	eax, [ebp+arg_10]
		push	eax
		lea	ecx, [ebp+var_60]
		push	ecx
		mov	edx, [ebp+var_18]
		mov	eax, [edx]
		mov	ecx, [ebp+var_18]
		mov	edx, [eax+8Ch]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		lea	ecx, [ebp+var_60] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_2AAB:				; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+5Aj
					; icu_56::ChoiceFormat::setChoices(double const	*,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+74j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN32
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1B4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	14h
?setChoices@ChoiceFormat@icu_56@@EAEXPBNPBCPBVUnicodeString@2@HAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN32		dd 2			; DATA XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+3A3o
		dd offset $LN31
$LN31		dd 0FFFFFFA0h, 40h	; DATA XREF: .text:00002AECo
		dd offset $LN28		; "result"
		dd 0FFFFFF4Ch, 40h
		dd offset $LN29
$LN29		dd 667562h		; DATA XREF: .text:00002B04o
$LN28		db 'result',0           ; DATA XREF: .text:00002AF8o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 2B14h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?setChoices@ChoiceFormat@icu_56@@EAEXPBNPBCPBVUnicodeString@2@HAAW4UErrorCode@@@Z$0 proc near
					; DATA XREF: .xdata$x:00002B68o
		mov	esi, esp
		lea	ecx, [ebp-60h]	; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?setChoices@ChoiceFormat@icu_56@@EAEXPBNPBCPBVUnicodeString@2@HAAW4UErrorCode@@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?setChoices@ChoiceFormat@icu_56@@EAEXPBNPBCPBVUnicodeString@2@HAAW4UErrorCode@@@Z$1 proc near
					; DATA XREF: .xdata$x:00002B70o
		mov	esi, esp
		lea	ecx, [ebp-0B4h]	; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?setChoices@ChoiceFormat@icu_56@@EAEXPBNPBCPBVUnicodeString@2@HAAW4UErrorCode@@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?setChoices@ChoiceFormat@icu_56@@EAEXPBNPBCPBVUnicodeString@2@HAAW4UErrorCode@@@Z proc near
					; DATA XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-1B8h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?setChoices@ChoiceFormat@icu_56@@EAEXPBNPBCPBVUnicodeString@2@HAAW4UErrorCode@@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?setChoices@ChoiceFormat@icu_56@@EAEXPBNPBCPBVUnicodeString@2@HAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 2B64h
__unwindtable$?setChoices@ChoiceFormat@icu_56@@EAEXPBNPBCPBVUnicodeString@2@HAAW4UErrorCode@@@Z	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00002B7Co
		dd offset __unwindfunclet$?setChoices@ChoiceFormat@icu_56@@EAEXPBNPBCPBVUnicodeString@2@HAAW4UErrorCode@@@Z$0
		align 10h
		dd offset __unwindfunclet$?setChoices@ChoiceFormat@icu_56@@EAEXPBNPBCPBVUnicodeString@2@HAAW4UErrorCode@@@Z$1
__ehfuncinfo$?setChoices@ChoiceFormat@icu_56@@EAEXPBNPBCPBVUnicodeString@2@HAAW4UErrorCode@@@Z dd 19930522h, 2
					; DATA XREF: __ehhandler$?setChoices@ChoiceFormat@icu_56@@EAEXPBNPBCPBVUnicodeString@2@HAAW4UErrorCode@@@Z+1Eo
		dd offset __unwindtable$?setChoices@ChoiceFormat@icu_56@@EAEXPBNPBCPBVUnicodeString@2@HAAW4UErrorCode@@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2B98h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl U_FAILURE(enum  UErrorCode)
?U_FAILURE@@YACW4UErrorCode@@@Z	proc near
					; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+4Bp

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		setnle	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?U_FAILURE@@YACW4UErrorCode@@@Z	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2BC4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	double *__thiscall icu_56::ChoiceFormat::getLimits(icu_56::ChoiceFormat	*this, int *)
		public ?getLimits@ChoiceFormat@icu_56@@UBEPBNAAH@Z
?getLimits@ChoiceFormat@icu_56@@UBEPBNAAH@Z proc near ;	DATA XREF: .rdata:00001988o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?getLimits@ChoiceFormat@icu_56@@UBEPBNAAH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2BFCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	signed __int8 *__thiscall icu_56::ChoiceFormat::getClosures(icu_56::ChoiceFormat *this,	int *)
		public ?getClosures@ChoiceFormat@icu_56@@UBEPBCAAH@Z
?getClosures@ChoiceFormat@icu_56@@UBEPBCAAH@Z proc near	; DATA XREF: .rdata:0000198Co

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?getClosures@ChoiceFormat@icu_56@@UBEPBCAAH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2C34h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct icu_56::UnicodeString *__thiscall icu_56::ChoiceFormat::getFormats(icu_56::ChoiceFormat *this, int *)
		public ?getFormats@ChoiceFormat@icu_56@@UBEPBVUnicodeString@2@AAH@Z
?getFormats@ChoiceFormat@icu_56@@UBEPBVUnicodeString@2@AAH@Z proc near
					; DATA XREF: .rdata:00001990o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		xor	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?getFormats@ChoiceFormat@icu_56@@UBEPBVUnicodeString@2@AAH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2C6Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::UnicodeString *__thiscall icu_56::ChoiceFormat::format(icu_56::ChoiceFormat *this, __int64, struct icu_56::UnicodeString *, struct icu_56::FieldPosition *)
		public ?format@ChoiceFormat@icu_56@@UBEAAVUnicodeString@2@_JAAV32@AAVFieldPosition@2@@Z
?format@ChoiceFormat@icu_56@@UBEAAVUnicodeString@2@_JAAV32@AAVFieldPosition@2@@Z proc near
					; DATA XREF: .rdata:00001918o

var_E8		= qword	ptr -0E8h
var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= qword	ptr  8
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		fild	[ebp+arg_0]
		sub	esp, 8
		fstp	[esp+0E8h+var_E8]
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax+48h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	10h
?format@ChoiceFormat@icu_56@@UBEAAVUnicodeString@2@_JAAV32@AAVFieldPosition@2@@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2CCCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::UnicodeString *__thiscall icu_56::ChoiceFormat::format(icu_56::ChoiceFormat *this, int, struct	icu_56::UnicodeString *, struct	icu_56::FieldPosition *)
		public ?format@ChoiceFormat@icu_56@@UBEAAVUnicodeString@2@HAAV32@AAVFieldPosition@2@@Z
?format@ChoiceFormat@icu_56@@UBEAAVUnicodeString@2@HAAV32@AAVFieldPosition@2@@Z	proc near
					; DATA XREF: .rdata:00001924o

var_E8		= qword	ptr -0E8h
var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		fild	[ebp+arg_0]
		sub	esp, 8
		fstp	[esp+0E8h+var_E8]
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax+48h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?format@ChoiceFormat@icu_56@@UBEAAVUnicodeString@2@HAAV32@AAVFieldPosition@2@@Z	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2D2Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::UnicodeString *__thiscall icu_56::ChoiceFormat::format(icu_56::ChoiceFormat *__hidden this, double, struct icu_56::UnicodeString *, struct icu_56::FieldPosition *)
		public ?format@ChoiceFormat@icu_56@@UBEAAVUnicodeString@2@NAAV32@AAVFieldPosition@2@@Z
?format@ChoiceFormat@icu_56@@UBEAAVUnicodeString@2@NAAV32@AAVFieldPosition@2@@Z	proc near
					; DATA XREF: .rdata:00001930o

var_104		= qword	ptr -104h
var_F0		= byte ptr -0F0h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= qword	ptr  8
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0F0h
		push	ebx
		push	esi		; int
		push	edi		; int
		push	ecx
		lea	edi, [ebp+var_F0]
		mov	ecx, 3Ch ; '<'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8]
		add	ecx, 168h	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?countParts@MessagePattern@icu_56@@QBEHXZ ; icu_56::MessagePattern::countParts(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jnz	short loc_2D73
		mov	eax, [ebp+arg_8]
		jmp	loc_2E75
; ---------------------------------------------------------------------------

loc_2D73:				; CODE XREF: icu_56::ChoiceFormat::format(double,icu_56::UnicodeString &,icu_56::FieldPosition &)+3Dj
		sub	esp, 8
		fld	[ebp+arg_0]
		fstp	[esp+104h+var_104] ; double
		push	0		; int
		mov	eax, [ebp+var_8]
		add	eax, 168h
		push	eax		; struct icu_56::MessagePattern	*
		call	?findSubMessage@ChoiceFormat@icu_56@@CAHABVMessagePattern@2@HN@Z ; icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)
		add	esp, 10h
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_8]
		add	eax, 168h
		mov	esi, esp
		push	eax		; struct icu_56::MessagePattern	*
		call	dword ptr ds:__imp_?jdkAposMode@MessageImpl@icu_56@@SACABVMessagePattern@2@@Z ;	icu_56::MessageImpl::jdkAposMode(icu_56::MessagePattern	const &)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		movsx	ecx, al
		test	ecx, ecx
		jnz	loc_2E51
		mov	esi, esp
		mov	eax, [ebp+var_14]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		add	ecx, 168h	; this
		call	dword ptr ds:__imp_?getPart@MessagePattern@icu_56@@QBEABVPart@12@H@Z ; icu_56::MessagePattern::getPart(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, eax	; this
		call	?getLimit@Part@MessagePattern@icu_56@@QBEHXZ ; icu_56::MessagePattern::Part::getLimit(void)
		mov	[ebp+var_20], eax
		mov	esi, esp
		mov	eax, [ebp+var_14]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		add	ecx, 168h	; this
		call	dword ptr ds:__imp_?getLimitPartIndex@MessagePattern@icu_56@@QBEHH@Z ; icu_56::MessagePattern::getLimitPartIndex(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_2C], eax
		mov	esi, esp
		mov	eax, [ebp+var_2C]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		add	ecx, 168h	; this
		call	dword ptr ds:__imp_?getPatternIndex@MessagePattern@icu_56@@QBEHH@Z ; icu_56::MessagePattern::getPatternIndex(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		sub	eax, [ebp+var_20]
		mov	esi, esp
		push	eax		; int
		mov	ecx, [ebp+var_20]
		push	ecx		; int
		mov	ecx, [ebp+var_8]
		add	ecx, 168h	; this
		mov	edi, esp
		call	dword ptr ds:__imp_?getPatternString@MessagePattern@icu_56@@QBEABVUnicodeString@2@XZ ; icu_56::MessagePattern::getPatternString(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		push	eax		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+arg_8] ; this
		call	dword ptr ds:__imp_?append@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z ; icu_56::UnicodeString::append(icu_56::UnicodeString const &,int,int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_8]
		jmp	short loc_2E75
; ---------------------------------------------------------------------------

loc_2E51:				; CODE XREF: icu_56::ChoiceFormat::format(double,icu_56::UnicodeString &,icu_56::FieldPosition &)+86j
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_14]
		push	ecx		; int
		mov	edx, [ebp+var_8]
		add	edx, 168h
		push	edx		; struct icu_56::MessagePattern	*
		call	dword ptr ds:__imp_?appendSubMessageWithoutSkipSyntax@MessageImpl@icu_56@@SAAAVUnicodeString@2@ABVMessagePattern@2@HAAV32@@Z ; icu_56::MessageImpl::appendSubMessageWithoutSkipSyntax(icu_56::MessagePattern const &,int,icu_56::UnicodeString &)
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_2E75:				; CODE XREF: icu_56::ChoiceFormat::format(double,icu_56::UnicodeString &,icu_56::FieldPosition &)+42j
					; icu_56::ChoiceFormat::format(double,icu_56::UnicodeString &,icu_56::FieldPosition &)+123j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0F0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	10h
?format@ChoiceFormat@icu_56@@UBEAAVUnicodeString@2@NAAV32@AAVFieldPosition@2@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2E8Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::MessagePattern::Part::getLimit(icu_56::MessagePattern::Part *__hidden this)
		public ?getLimit@Part@MessagePattern@icu_56@@QBEHXZ
?getLimit@Part@MessagePattern@icu_56@@QBEHXZ proc near
					; CODE XREF: icu_56::ChoiceFormat::format(double,icu_56::UnicodeString &,icu_56::FieldPosition &)+AAp
					; icu_56::ChoiceFormat::matchStringUntilLimitPart(icu_56::MessagePattern const &,int,int,icu_56::UnicodeString const &,int)+52p ...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		movzx	eax, word ptr [eax+8]
		mov	ecx, [ebp+var_8]
		add	eax, [ecx+4]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getLimit@Part@MessagePattern@icu_56@@QBEHXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2EC4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl static icu_56::ChoiceFormat::findSubMessage(const	struct icu_56::MessagePattern *, int, double)
		public ?findSubMessage@ChoiceFormat@icu_56@@CAHABVMessagePattern@2@HN@Z
?findSubMessage@ChoiceFormat@icu_56@@CAHABVMessagePattern@2@HN@Z proc near
					; CODE XREF: icu_56::ChoiceFormat::format(double,icu_56::UnicodeString &,icu_56::FieldPosition &)+5Bp

var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_54		= word ptr -54h
var_48		= dword	ptr -48h
var_3C		= qword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= qword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 124h
		push	ebx
		push	esi
		push	edi		; int
		lea	edi, [ebp+var_124]
		mov	ecx, 49h ; 'I'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	esi, esp
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?countParts@MessagePattern@icu_56@@QBEHXZ ; icu_56::MessagePattern::countParts(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_4]
		add	eax, 2
		mov	[ebp+arg_4], eax

loc_2F00:				; CODE XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double):loc_3098j
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_14], eax
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax		; int
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?getLimitPartIndex@MessagePattern@icu_56@@QBEHH@Z ; icu_56::MessagePattern::getLimitPartIndex(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+arg_4], eax
		mov	eax, [ebp+arg_4]
		add	eax, 1
		mov	[ebp+arg_4], eax
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [ebp+var_8]
		jl	short loc_2F35
		jmp	loc_309D
; ---------------------------------------------------------------------------

loc_2F35:				; CODE XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+6Aj
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_11C], eax
		mov	ecx, [ebp+arg_4]
		add	ecx, 1
		mov	[ebp+arg_4], ecx
		mov	esi, esp
		mov	edx, [ebp+var_11C]
		push	edx		; int
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?getPart@MessagePattern@icu_56@@QBEABVPart@12@H@Z ; icu_56::MessagePattern::getPart(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_20], eax
		mov	ecx, [ebp+var_20]
		call	?getType@Part@MessagePattern@icu_56@@QBE?AW4UMessagePatternPartType@@XZ	; icu_56::MessagePattern::Part::getType(void)
		mov	[ebp+var_2C], eax
		cmp	[ebp+var_2C], 6
		jnz	short loc_2F79
		jmp	loc_309D
; ---------------------------------------------------------------------------

loc_2F79:				; CODE XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+AEj
		mov	eax, [ebp+var_2C]
		push	eax
		call	?hasNumericValue@Part@MessagePattern@icu_56@@SACW4UMessagePatternPartType@@@Z ;	icu_56::MessagePattern::Part::hasNumericValue(UMessagePatternPartType)
		add	esp, 4
		movsx	ecx, al
		test	ecx, ecx
		jnz	short loc_2FB2
		mov	edx, ds:?__LINE__Var@?1??findSubMessage@ChoiceFormat@icu_56@@CAHABVMessagePattern@3@HN@Z@4JA@6244cb07
		add	edx, 18h
		mov	esi, esp
		push	edx		; Line
		push	offset ??_C@_1FK@NOAKFLHL@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@ ; "d:\\mozilla\\intl\\icu\\source\\i18n\\c"...
		push	offset ??_C@_1FI@MEDMPICA@?$AAM?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?3?$AA?3?$AAP?$AAa?$AAr?$AAt?$AA?3?$AA?3?$AAh?$AAa?$AAs?$AAN?$AAu?$AAm?$AAe?$AAr?$AAi?$AAc@	; "MessagePattern::Part::hasNumericValue(t"...
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_2FB2:				; CODE XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+C6j
		mov	esi, esp
		mov	eax, [ebp+var_20]
		push	eax		; struct icu_56::MessagePattern::Part *
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?getNumericValue@MessagePattern@icu_56@@QBENABVPart@12@@Z ; icu_56::MessagePattern::getNumericValue(icu_56::MessagePattern::Part const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		fstp	[ebp+var_3C]
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_11C], eax
		mov	ecx, [ebp+arg_4]
		add	ecx, 1
		mov	[ebp+arg_4], ecx
		mov	esi, esp
		mov	edx, [ebp+var_11C]
		push	edx		; int
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?getPatternIndex@MessagePattern@icu_56@@QBEHH@Z ; icu_56::MessagePattern::getPatternIndex(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_48], eax
		mov	esi, esp
		mov	eax, [ebp+var_48]
		push	eax		; int

loc_2FFF:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::hexfloato
					; .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::floatfieldo
		mov	edi, esp
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?getPatternString@MessagePattern@icu_56@@QBEABVUnicodeString@2@XZ ; icu_56::MessagePattern::getPatternString(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		mov	ecx, eax	; this
		call	dword ptr ds:__imp_?charAt@UnicodeString@icu_56@@QBE_WH@Z ; icu_56::UnicodeString::charAt(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_54], ax
		movzx	eax, [ebp+var_54]
		cmp	eax, 3Ch ; '<'
		jnz	short loc_305E
		fld	[ebp+var_3C]
		fcomp	[ebp+arg_8]
		fnstsw	ax
		test	ah, 5
		jnp	short loc_3046
		mov	[ebp+var_11C], 1
		jmp	short loc_3050
; ---------------------------------------------------------------------------

loc_3046:				; CODE XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+174j
		mov	[ebp+var_11C], 0

loc_3050:				; CODE XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+180j
		mov	ecx, [ebp+var_11C]
		mov	[ebp+var_120], ecx
		jmp	short loc_308D
; ---------------------------------------------------------------------------

loc_305E:				; CODE XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+167j
		fld	[ebp+var_3C]
		fcomp	[ebp+arg_8]
		fnstsw	ax
		test	ah, 41h
		jnp	short loc_3077
		mov	[ebp+var_124], 1
		jmp	short loc_3081
; ---------------------------------------------------------------------------

loc_3077:				; CODE XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+1A5j
		mov	[ebp+var_124], 0

loc_3081:				; CODE XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+1B1j
		mov	edx, [ebp+var_124]
		mov	[ebp+var_120], edx

loc_308D:				; CODE XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+198j
		cmp	[ebp+var_120], 0
		jz	short loc_3098
		jmp	short loc_309D
; ---------------------------------------------------------------------------

loc_3098:				; CODE XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+1D0j
		jmp	loc_2F00
; ---------------------------------------------------------------------------

loc_309D:				; CODE XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+6Cj
					; icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+B0j ...
		mov	eax, [ebp+var_14]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 124h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?findSubMessage@ChoiceFormat@icu_56@@CAHABVMessagePattern@2@HN@Z endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 30B4h
		public ??_C@_1FI@MEDMPICA@?$AAM?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?3?$AA?3?$AAP?$AAa?$AAr?$AAt?$AA?3?$AA?3?$AAh?$AAa?$AAs?$AAN?$AAu?$AAm?$AAe?$AAr?$AAi?$AAc@
; wchar_t `string'
??_C@_1FI@MEDMPICA@?$AAM?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?3?$AA?3?$AAP?$AAa?$AAr?$AAt?$AA?3?$AA?3?$AAh?$AAa?$AAs?$AAN?$AAu?$AAm?$AAe?$AAr?$AAi?$AAc@:
					; DATA XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+D9o
		unicode	0, <MessagePattern::Part::hasNumericValue(type)>,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 310Ch
		public ??_C@_1FK@NOAKFLHL@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
; wchar_t `string'
??_C@_1FK@NOAKFLHL@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@:
					; DATA XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+D4o
		unicode	0, <d:\mozilla\intl\icu\source\i18n\choicfmt.cpp>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 3168h
		public ?__LINE__Var@?1??findSubMessage@ChoiceFormat@icu_56@@CAHABVMessagePattern@3@HN@Z@4JA@6244cb07
?__LINE__Var@?1??findSubMessage@ChoiceFormat@icu_56@@CAHABVMessagePattern@3@HN@Z@4JA@6244cb07 dd 1A7h
					; DATA XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+C8r
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 316Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: enum	UMessagePatternPartType	__thiscall icu_56::MessagePattern::Part::getType(void)const
		public ?getType@Part@MessagePattern@icu_56@@QBE?AW4UMessagePatternPartType@@XZ
?getType@Part@MessagePattern@icu_56@@QBE?AW4UMessagePatternPartType@@XZ	proc near
					; CODE XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+A2p
					; icu_56::ChoiceFormat::matchStringUntilLimitPart(icu_56::MessagePattern const &,int,int,icu_56::UnicodeString const &,int)+87p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getType@Part@MessagePattern@icu_56@@QBE?AW4UMessagePatternPartType@@XZ	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 319Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static signed	char __cdecl icu_56::MessagePattern::Part::hasNumericValue(enum	 UMessagePatternPartType)
		public ?hasNumericValue@Part@MessagePattern@icu_56@@SACW4UMessagePatternPartType@@@Z
?hasNumericValue@Part@MessagePattern@icu_56@@SACW4UMessagePatternPartType@@@Z proc near
					; CODE XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+B9p

var_C4		= byte ptr -0C4h
var_C1		= byte ptr -0C1h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C4]
		mov	ecx, 31h ; '1'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0Ch
		jz	short loc_31CF
		cmp	[ebp+arg_0], 0Dh
		jz	short loc_31CF
		mov	[ebp+var_C1], 0
		jmp	short loc_31D6
; ---------------------------------------------------------------------------

loc_31CF:				; CODE XREF: icu_56::MessagePattern::Part::hasNumericValue(UMessagePatternPartType)+22j
					; icu_56::MessagePattern::Part::hasNumericValue(UMessagePatternPartType)+28j
		mov	[ebp+var_C1], 1

loc_31D6:				; CODE XREF: icu_56::MessagePattern::Part::hasNumericValue(UMessagePatternPartType)+31j
		mov	al, [ebp+var_C1]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?hasNumericValue@Part@MessagePattern@icu_56@@SACW4UMessagePatternPartType@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 31E4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::UnicodeString *__thiscall icu_56::ChoiceFormat::format(icu_56::ChoiceFormat *this, const struct icu_56::Formattable *,	int, struct icu_56::UnicodeString *, struct icu_56::FieldPosition *, enum UErrorCode *)
		public ?format@ChoiceFormat@icu_56@@UBEAAVUnicodeString@2@PBVFormattable@2@HAAV32@AAVFieldPosition@2@AAW4UErrorCode@@@Z
?format@ChoiceFormat@icu_56@@UBEAAVUnicodeString@2@PBVFormattable@2@HAAV32@AAVFieldPosition@2@AAW4UErrorCode@@@Z proc near
					; DATA XREF: .rdata:00001994o

var_104		= qword	ptr -104h
var_E8		= byte ptr -0E8h
var_24		= qword	ptr -24h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_E8]
		mov	ecx, 3Ah ; ':'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		cmp	[ebp+arg_4], 0
		jge	short loc_321E
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 1
		mov	eax, [ebp+arg_8]
		jmp	loc_32BB
; ---------------------------------------------------------------------------

loc_321E:				; CODE XREF: icu_56::ChoiceFormat::format(icu_56::Formattable const *,int,icu_56::UnicodeString	&,icu_56::FieldPosition	&,UErrorCode &)+27j
		mov	ecx, [ebp+var_8]
		add	ecx, 168h	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?countParts@MessagePattern@icu_56@@QBEHXZ ; icu_56::MessagePattern::countParts(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jnz	short loc_3248
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 1Bh
		mov	eax, [ebp+arg_8]
		jmp	short loc_32BB
; ---------------------------------------------------------------------------

loc_3248:				; CODE XREF: icu_56::ChoiceFormat::format(icu_56::Formattable const *,int,icu_56::UnicodeString	&,icu_56::FieldPosition	&,UErrorCode &)+54j
		mov	[ebp+var_14], 0
		jmp	short loc_325A
; ---------------------------------------------------------------------------

loc_3251:				; CODE XREF: icu_56::ChoiceFormat::format(icu_56::Formattable const *,int,icu_56::UnicodeString	&,icu_56::FieldPosition	&,UErrorCode &):loc_32B6j
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax

loc_325A:				; CODE XREF: icu_56::ChoiceFormat::format(icu_56::Formattable const *,int,icu_56::UnicodeString	&,icu_56::FieldPosition	&,UErrorCode &)+6Bj
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+arg_4]
		jge	short loc_32B8
		mov	eax, [ebp+arg_10]
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+var_14]
		imul	ecx, 0E0h
		add	ecx, [ebp+arg_0] ; this
		call	?getDouble@Formattable@icu_56@@QBENAAW4UErrorCode@@@Z ;	icu_56::Formattable::getDouble(UErrorCode &)
		fstp	[ebp+var_24]
		mov	eax, [ebp+arg_10]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_32B6
		mov	esi, esp
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		sub	esp, 8
		fld	[ebp+var_24]
		fstp	[esp+104h+var_104]
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax+48h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_32B6:				; CODE XREF: icu_56::ChoiceFormat::format(icu_56::Formattable const *,int,icu_56::UnicodeString	&,icu_56::FieldPosition	&,UErrorCode &)+A9j
		jmp	short loc_3251
; ---------------------------------------------------------------------------

loc_32B8:				; CODE XREF: icu_56::ChoiceFormat::format(icu_56::Formattable const *,int,icu_56::UnicodeString	&,icu_56::FieldPosition	&,UErrorCode &)+7Cj
		mov	eax, [ebp+arg_8]

loc_32BB:				; CODE XREF: icu_56::ChoiceFormat::format(icu_56::Formattable const *,int,icu_56::UnicodeString	&,icu_56::FieldPosition	&,UErrorCode &)+35j
					; icu_56::ChoiceFormat::format(icu_56::Formattable const *,int,icu_56::UnicodeString &,icu_56::FieldPosition &,UErrorCode &)+62j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	14h
?format@ChoiceFormat@icu_56@@UBEAAVUnicodeString@2@PBVFormattable@2@HAAV32@AAVFieldPosition@2@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 32D4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::ChoiceFormat::parse(icu_56::ChoiceFormat *this, const	struct icu_56::UnicodeString *,	struct icu_56::Formattable *, struct icu_56::ParsePosition *)
		public ?parse@ChoiceFormat@icu_56@@UBEXABVUnicodeString@2@AAVFormattable@2@AAVParsePosition@2@@Z
?parse@ChoiceFormat@icu_56@@UBEXABVUnicodeString@2@AAVFormattable@2@AAVParsePosition@2@@Z proc near
					; DATA XREF: .rdata:00001938o

var_E0		= qword	ptr -0E0h
var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_8]
		push	eax		; struct icu_56::ParsePosition *
		mov	ecx, [ebp+arg_0]
		push	ecx		; struct icu_56::UnicodeString *
		push	0		; int
		mov	edx, [ebp+var_8]
		add	edx, 168h
		push	edx		; struct icu_56::MessagePattern	*
		call	?parseArgument@ChoiceFormat@icu_56@@CANABVMessagePattern@2@HABVUnicodeString@2@AAVParsePosition@2@@Z ; icu_56::ChoiceFormat::parseArgument(icu_56::MessagePattern const	&,int,icu_56::UnicodeString const &,icu_56::ParsePosition &)
		add	esp, 8
		fstp	[esp+0E0h+var_E0] ; double
		mov	ecx, [ebp+arg_4] ; this
		call	?setDouble@Formattable@icu_56@@QAEXN@Z ; icu_56::Formattable::setDouble(double)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?parse@ChoiceFormat@icu_56@@UBEXABVUnicodeString@2@AAVFormattable@2@AAVParsePosition@2@@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3334h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; double __cdecl icu_56::ChoiceFormat::parseArgument(const struct icu_56::MessagePattern *, int, const struct icu_56::UnicodeString *, struct icu_56::ParsePosition *)
		public ?parseArgument@ChoiceFormat@icu_56@@CANABVMessagePattern@2@HABVUnicodeString@2@AAVParsePosition@2@@Z
?parseArgument@ChoiceFormat@icu_56@@CANABVMessagePattern@2@HABVUnicodeString@2@AAVParsePosition@2@@Z proc near
					; CODE XREF: icu_56::ChoiceFormat::parse(icu_56::UnicodeString const &,icu_56::Formattable &,icu_56::ParsePosition &)+37p

var_128		= byte ptr -128h
var_64		= dword	ptr -64h
var_58		= dword	ptr -58h
var_4C		= dword	ptr -4Ch
var_40		= dword	ptr -40h
var_34		= qword	ptr -34h
var_24		= qword	ptr -24h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 128h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_128]
		mov	ecx, 4Ah ; 'J'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	esi, esp
		mov	ecx, [ebp+arg_C] ; this
		call	dword ptr ds:__imp_?getIndex@ParsePosition@icu_56@@QBEHXZ ; icu_56::ParsePosition::getIndex(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		mov	[ebp+var_14], eax
		call	_uprv_getNaN_56
		fstp	[ebp+var_24]
		fldz
		fstp	[ebp+var_34]
		mov	esi, esp
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?countParts@MessagePattern@icu_56@@QBEHXZ ; icu_56::MessagePattern::countParts(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_40], eax

loc_338F:				; CODE XREF: icu_56::ChoiceFormat::parseArgument(icu_56::MessagePattern	const &,int,icu_56::UnicodeString const	&,icu_56::ParsePosition	&)+138j
		mov	eax, [ebp+arg_4]
		cmp	eax, [ebp+var_40]
		jge	loc_3471
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		call	dword ptr ds:__imp_?getPartType@MessagePattern@icu_56@@QBE?AW4UMessagePatternPartType@@H@Z ; icu_56::MessagePattern::getPartType(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	eax, 6
		jz	loc_3471
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax		; int
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?getPart@MessagePattern@icu_56@@QBEABVPart@12@H@Z ; icu_56::MessagePattern::getPart(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	eax		; struct icu_56::MessagePattern::Part *
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?getNumericValue@MessagePattern@icu_56@@QBENABVPart@12@@Z ; icu_56::MessagePattern::getNumericValue(icu_56::MessagePattern::Part const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		fstp	[ebp+var_34]
		mov	eax, [ebp+arg_4]
		add	eax, 2
		mov	[ebp+arg_4], eax
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax		; int
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?getLimitPartIndex@MessagePattern@icu_56@@QBEHH@Z ; icu_56::MessagePattern::getLimitPartIndex(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4C], eax
		mov	eax, [ebp+var_8]
		push	eax		; int
		mov	ecx, [ebp+arg_8]
		push	ecx		; struct icu_56::UnicodeString *
		mov	edx, [ebp+var_4C]
		push	edx		; int
		mov	eax, [ebp+arg_4]
		push	eax		; int
		mov	ecx, [ebp+arg_0]
		push	ecx		; struct icu_56::MessagePattern	*
		call	?matchStringUntilLimitPart@ChoiceFormat@icu_56@@CAHABVMessagePattern@2@HHABVUnicodeString@2@H@Z	; icu_56::ChoiceFormat::matchStringUntilLimitPart(icu_56::MessagePattern const &,int,int,icu_56::UnicodeString const &,int)
		add	esp, 14h
		mov	[ebp+var_58], eax
		cmp	[ebp+var_58], 0
		jl	short loc_3463
		mov	eax, [ebp+var_8]
		add	eax, [ebp+var_58]
		mov	[ebp+var_64], eax
		mov	eax, [ebp+var_64]
		cmp	eax, [ebp+var_14]
		jle	short loc_3463
		mov	eax, [ebp+var_64]
		mov	[ebp+var_14], eax
		fld	[ebp+var_34]
		fstp	[ebp+var_24]
		mov	esi, esp
		mov	ecx, [ebp+arg_8] ; this
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	[ebp+var_14], eax
		jnz	short loc_3463
		jmp	short loc_3471
; ---------------------------------------------------------------------------

loc_3463:				; CODE XREF: icu_56::ChoiceFormat::parseArgument(icu_56::MessagePattern	const &,int,icu_56::UnicodeString const	&,icu_56::ParsePosition	&)+F7j
					; icu_56::ChoiceFormat::parseArgument(icu_56::MessagePattern const &,int,icu_56::UnicodeString const &,icu_56::ParsePosition &)+108j ...
		mov	eax, [ebp+var_4C]
		add	eax, 1
		mov	[ebp+arg_4], eax
		jmp	loc_338F
; ---------------------------------------------------------------------------

loc_3471:				; CODE XREF: icu_56::ChoiceFormat::parseArgument(icu_56::MessagePattern	const &,int,icu_56::UnicodeString const	&,icu_56::ParsePosition	&)+61j
					; icu_56::ChoiceFormat::parseArgument(icu_56::MessagePattern const &,int,icu_56::UnicodeString const &,icu_56::ParsePosition &)+80j ...
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_8]
		jnz	short loc_3491
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; int
		mov	ecx, [ebp+arg_C] ; this
		call	dword ptr ds:__imp_?setErrorIndex@ParsePosition@icu_56@@QAEXH@Z	; icu_56::ParsePosition::setErrorIndex(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_34A7
; ---------------------------------------------------------------------------

loc_3491:				; CODE XREF: icu_56::ChoiceFormat::parseArgument(icu_56::MessagePattern	const &,int,icu_56::UnicodeString const	&,icu_56::ParsePosition	&)+143j
		mov	esi, esp
		mov	eax, [ebp+var_14]
		push	eax		; int
		mov	ecx, [ebp+arg_C] ; this
		call	dword ptr ds:__imp_?setIndex@ParsePosition@icu_56@@QAEXH@Z ; icu_56::ParsePosition::setIndex(int)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_34A7:				; CODE XREF: icu_56::ChoiceFormat::parseArgument(icu_56::MessagePattern	const &,int,icu_56::UnicodeString const	&,icu_56::ParsePosition	&)+15Bj
		fld	[ebp+var_24]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 128h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?parseArgument@ChoiceFormat@icu_56@@CANABVMessagePattern@2@HABVUnicodeString@2@AAVParsePosition@2@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 34C0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl icu_56::ChoiceFormat::matchStringUntilLimitPart(const struct icu_56::MessagePattern *, int, int, const struct icu_56::UnicodeString *, int)
		public ?matchStringUntilLimitPart@ChoiceFormat@icu_56@@CAHABVMessagePattern@2@HHABVUnicodeString@2@H@Z
?matchStringUntilLimitPart@ChoiceFormat@icu_56@@CAHABVMessagePattern@2@HHABVUnicodeString@2@H@Z	proc near
					; CODE XREF: icu_56::ChoiceFormat::parseArgument(icu_56::MessagePattern	const &,int,icu_56::UnicodeString const	&,icu_56::ParsePosition	&)+E8p

var_108		= byte ptr -108h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_108]
		mov	ecx, 42h ; 'B'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	esi, esp
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?getPatternString@MessagePattern@icu_56@@QBEABVUnicodeString@2@XZ ; icu_56::MessagePattern::getPatternString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], eax
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax		; int
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?getPart@MessagePattern@icu_56@@QBEABVPart@12@H@Z ; icu_56::MessagePattern::getPart(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, eax	; this
		call	?getLimit@Part@MessagePattern@icu_56@@QBEHXZ ; icu_56::MessagePattern::Part::getLimit(void)
		mov	[ebp+var_20], eax

loc_351A:				; CODE XREF: icu_56::ChoiceFormat::matchStringUntilLimitPart(icu_56::MessagePattern const &,int,int,icu_56::UnicodeString const	&,int):loc_35BAj
		mov	eax, [ebp+arg_4]
		add	eax, 1
		mov	[ebp+arg_4], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_4]
		push	ecx		; int
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?getPart@MessagePattern@icu_56@@QBEABVPart@12@H@Z ; icu_56::MessagePattern::getPart(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+arg_4]
		cmp	eax, [ebp+arg_8]
		jz	short loc_3551
		mov	ecx, [ebp+var_2C]
		call	?getType@Part@MessagePattern@icu_56@@QBE?AW4UMessagePatternPartType@@XZ	; icu_56::MessagePattern::Part::getType(void)
		cmp	eax, 2
		jnz	short loc_35BA

loc_3551:				; CODE XREF: icu_56::ChoiceFormat::matchStringUntilLimitPart(icu_56::MessagePattern const &,int,int,icu_56::UnicodeString const	&,int)+82j
		mov	ecx, [ebp+var_2C] ; this
		call	?getIndex@Part@MessagePattern@icu_56@@QBEHXZ ; icu_56::MessagePattern::Part::getIndex(void)
		mov	[ebp+var_38], eax
		mov	eax, [ebp+var_38]
		sub	eax, [ebp+var_20]
		mov	[ebp+var_44], eax
		jz	short loc_3599
		mov	esi, esp
		mov	eax, [ebp+var_44]
		push	eax		; int
		mov	ecx, [ebp+var_20]
		push	ecx		; int
		mov	edx, [ebp+var_14]
		push	edx		; struct icu_56::UnicodeString *
		mov	eax, [ebp+var_44]
		push	eax		; int
		mov	ecx, [ebp+arg_10]
		push	ecx		; int
		mov	ecx, [ebp+arg_C] ; this
		call	dword ptr ds:__imp_?compare@UnicodeString@icu_56@@QBECHHABV12@HH@Z ; icu_56::UnicodeString::compare(int,int,icu_56::UnicodeString const	&,int,int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		movsx	edx, al
		test	edx, edx
		jz	short loc_3599
		or	eax, 0FFFFFFFFh
		jmp	short loc_35BF
; ---------------------------------------------------------------------------

loc_3599:				; CODE XREF: icu_56::ChoiceFormat::matchStringUntilLimitPart(icu_56::MessagePattern const &,int,int,icu_56::UnicodeString const	&,int)+A5j
					; icu_56::ChoiceFormat::matchStringUntilLimitPart(icu_56::MessagePattern const &,int,int,icu_56::UnicodeString const &,int)+D2j
		mov	eax, [ebp+var_8]
		add	eax, [ebp+var_44]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_4]
		cmp	eax, [ebp+arg_8]
		jnz	short loc_35AF
		mov	eax, [ebp+var_8]
		jmp	short loc_35BF
; ---------------------------------------------------------------------------

loc_35AF:				; CODE XREF: icu_56::ChoiceFormat::matchStringUntilLimitPart(icu_56::MessagePattern const &,int,int,icu_56::UnicodeString const	&,int)+E8j
		mov	ecx, [ebp+var_2C] ; this
		call	?getLimit@Part@MessagePattern@icu_56@@QBEHXZ ; icu_56::MessagePattern::Part::getLimit(void)
		mov	[ebp+var_20], eax

loc_35BA:				; CODE XREF: icu_56::ChoiceFormat::matchStringUntilLimitPart(icu_56::MessagePattern const &,int,int,icu_56::UnicodeString const	&,int)+8Fj
		jmp	loc_351A
; ---------------------------------------------------------------------------

loc_35BF:				; CODE XREF: icu_56::ChoiceFormat::matchStringUntilLimitPart(icu_56::MessagePattern const &,int,int,icu_56::UnicodeString const	&,int)+D7j
					; icu_56::ChoiceFormat::matchStringUntilLimitPart(icu_56::MessagePattern const &,int,int,icu_56::UnicodeString const &,int)+EDj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 108h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?matchStringUntilLimitPart@ChoiceFormat@icu_56@@CAHABVMessagePattern@2@HHABVUnicodeString@2@H@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 35D4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::MessagePattern::Part::getIndex(icu_56::MessagePattern::Part *__hidden this)
		public ?getIndex@Part@MessagePattern@icu_56@@QBEHXZ
?getIndex@Part@MessagePattern@icu_56@@QBEHXZ proc near
					; CODE XREF: icu_56::ChoiceFormat::matchStringUntilLimitPart(icu_56::MessagePattern const &,int,int,icu_56::UnicodeString const	&,int)+94p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+4]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getIndex@Part@MessagePattern@icu_56@@QBEHXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3604h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::Format	*__thiscall icu_56::ChoiceFormat::clone(icu_56::ChoiceFormat *__hidden this)
		public ?clone@ChoiceFormat@icu_56@@UBEPAVFormat@2@XZ
?clone@ChoiceFormat@icu_56@@UBEPAVFormat@2@XZ proc near	; DATA XREF: .rdata:000018F4o

var_100		= dword	ptr -100h
var_F8		= dword	ptr -0F8h
var_EC		= dword	ptr -0ECh
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?clone@ChoiceFormat@icu_56@@UBEPAVFormat@2@XZ
		mov	eax, large fs:0
		push	eax
		sub	esp, 0F4h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_100]
		mov	ecx, 3Dh ; '='
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	esi, esp
		push	1CCh		; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_EC], eax
		mov	[ebp+var_4], 0
		cmp	[ebp+var_EC], 0
		jz	short loc_368A
		mov	eax, [ebp+var_14]
		push	eax		; struct icu_56::ChoiceFormat *
		mov	ecx, [ebp+var_EC] ; this
		call	??0ChoiceFormat@icu_56@@QAE@ABV01@@Z ; icu_56::ChoiceFormat::ChoiceFormat(icu_56::ChoiceFormat const &)
		mov	[ebp+var_100], eax
		jmp	short loc_3694
; ---------------------------------------------------------------------------

loc_368A:				; CODE XREF: icu_56::ChoiceFormat::clone(void)+6Dj
		mov	[ebp+var_100], 0

loc_3694:				; CODE XREF: icu_56::ChoiceFormat::clone(void)+84j
		mov	ecx, [ebp+var_100]
		mov	[ebp+var_F8], ecx
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	edx, [ebp+var_F8]
		mov	[ebp+var_20], edx
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 100h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?clone@ChoiceFormat@icu_56@@UBEPAVFormat@2@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 36D4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?clone@ChoiceFormat@icu_56@@UBEPAVFormat@2@XZ$0	proc near
					; DATA XREF: .xdata$x:00003710o
		mov	esi, esp
		mov	eax, [ebp-0ECh]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?clone@ChoiceFormat@icu_56@@UBEPAVFormat@2@XZ$0	endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?clone@ChoiceFormat@icu_56@@UBEPAVFormat@2@XZ proc near
					; DATA XREF: icu_56::ChoiceFormat::clone(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-104h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?clone@ChoiceFormat@icu_56@@UBEPAVFormat@2@XZ
		jmp	___CxxFrameHandler3
__ehhandler$?clone@ChoiceFormat@icu_56@@UBEPAVFormat@2@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 370Ch
__unwindtable$?clone@ChoiceFormat@icu_56@@UBEPAVFormat@2@XZ dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:0000371Co
		dd offset __unwindfunclet$?clone@ChoiceFormat@icu_56@@UBEPAVFormat@2@XZ$0
__ehfuncinfo$?clone@ChoiceFormat@icu_56@@UBEPAVFormat@2@XZ dd 19930522h, 1
					; DATA XREF: __ehhandler$?clone@ChoiceFormat@icu_56@@UBEPAVFormat@2@XZ+14o
		dd offset __unwindtable$?clone@ChoiceFormat@icu_56@@UBEPAVFormat@2@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; _DWORD __thiscall icu_56::UObject::UObject(icu_56::UObject *__hidden this)
		extrn __imp_??0UObject@icu_56@@QAE@XZ:near
					; CODE XREF: icu_56::FieldPosition::FieldPosition(void)+28p
					; icu_56::FieldPosition::FieldPosition(int)+28p ...
		extrn __RTC_CheckEsp:near
					; CODE XREF: icu_56::FieldPosition::FieldPosition(void)+30p
					; icu_56::FieldPosition::FieldPosition(void)+6Ap ...
; const	type_info::`vftable'
		extrn ??_7type_info@@6B@:near
					; DATA XREF: .data:icu_56::FieldPosition `RTTI Type Descriptor'o
					; .data:icu_56::UObject	`RTTI Type Descriptor'o ...
; public: virtual void * __thiscall icu_56::FieldPosition::getDynamicClassID(void)const
		extrn ?getDynamicClassID@FieldPosition@icu_56@@UBEPAXXZ:near
					; DATA XREF: .rdata:000001F4o
; _DWORD __thiscall icu_56::UObject::UObject(icu_56::UObject *__hidden this, const struct icu_56::UObject *)
		extrn __imp_??0UObject@icu_56@@QAE@ABV01@@Z:near
					; CODE XREF: icu_56::FieldPosition::FieldPosition(icu_56::FieldPosition	const &)+2Cp
					; icu_56::NumberFormatFactory::NumberFormatFactory(icu_56::NumberFormatFactory const &)+2Cp
					; DATA XREF: ...
; void __cdecl icu_56::UMemory::operator delete(void *)
		extrn __imp_??3UMemory@icu_56@@SAXPAX@Z:near
					; CODE XREF: icu_56::FieldPosition::`scalar deleting destructor'(uint)+39p
					; icu_56::FieldPosition::`vector deleting destructor'(uint)+81p ...
; _DWORD __thiscall icu_56::FieldPosition::~FieldPosition(icu_56::FieldPosition	*__hidden this)
		extrn ??1FieldPosition@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::FieldPosition::`scalar deleting destructor'(uint)+26p
					; icu_56::FieldPosition::`vector deleting destructor'(uint)+6Ep
					; DATA XREF: ...
; void __cdecl icu_56::UMemory::operator delete[](void *)
		extrn __imp_??_VUMemory@icu_56@@SAXPAX@Z:near
					; CODE XREF: icu_56::FieldPosition::`vector deleting destructor'(uint)+53p
					; icu_56::MeasureUnit::`vector deleting	destructor'(uint)+53p ...
; void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *))
		extrn ??_M@YGXPAXIHP6EX0@Z@Z:near
					; CODE XREF: icu_56::FieldPosition::`vector deleting destructor'(uint)+3Dp
					; icu_56::MeasureUnit::`vector deleting	destructor'(uint)+3Dp ...
; public: signed char __thiscall icu_56::Formattable::operator==(class icu_56::Formattable const &)const
		extrn ??8Formattable@icu_56@@QBECABV01@@Z:near
					; CODE XREF: icu_56::Formattable::operator!=(icu_56::Formattable const &)+2Ap
		extrn __fltused:near
; __declspec(dllimport)	public:	class icu_56::UnicodeString & __thiscall icu_56::UnicodeString::operator=(class	icu_56::UnicodeString const &)
		extrn __imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z:near
					; CODE XREF: icu_56::Formattable::getString(icu_56::UnicodeString &)+2Fp
					; icu_56::ChoiceFormat::toPattern(icu_56::UnicodeString	&)+41p
					; DATA XREF: ...
; int __thiscall icu_56::Formattable::getLong(icu_56::Formattable *__hidden this, enum UErrorCode *)
		extrn ?getLong@Formattable@icu_56@@QBEHAAW4UErrorCode@@@Z:near
					; CODE XREF: icu_56::Formattable::getLong(UErrorCode *)+2Ap
; public: signed char __thiscall icu_56::FieldPositionIterator::operator==(class icu_56::FieldPositionIterator const &)const
		extrn ??8FieldPositionIterator@icu_56@@QBECABV01@@Z:near
					; CODE XREF: icu_56::FieldPositionIterator::operator!=(icu_56::FieldPositionIterator const &)+2Ap
; __declspec(dllimport)	public:	class icu_56::UObject &	__thiscall icu_56::UObject::operator=(class icu_56::UObject const &)
		extrn __imp_??4UObject@icu_56@@QAEAAV01@ABV01@@Z:near
					; CODE XREF: icu_56::FieldPositionIterator::operator=(icu_56::FieldPositionIterator const &)+2Cp
					; icu_56::NumberFormatFactory::operator=(icu_56::NumberFormatFactory const &)+2Cp
					; DATA XREF: ...
; public: virtual void * __thiscall icu_56::MeasureUnit::getDynamicClassID(void)const
		extrn ?getDynamicClassID@MeasureUnit@icu_56@@UBEPAXXZ:near
					; DATA XREF: .rdata:00000D88o
; public: virtual class	icu_56::UObject	* __thiscall icu_56::MeasureUnit::clone(void)const
		extrn ?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ:near
					; DATA XREF: .rdata:00000D8Co
; public: virtual signed char __thiscall icu_56::MeasureUnit::operator==(class icu_56::UObject const &)const
		extrn ??8MeasureUnit@icu_56@@UBECABVUObject@1@@Z:near
					; DATA XREF: .rdata:00000D90o
; _DWORD __thiscall icu_56::MeasureUnit::~MeasureUnit(icu_56::MeasureUnit *__hidden this)
		extrn ??1MeasureUnit@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::MeasureUnit::`scalar deleting destructor'(uint)+26p
					; icu_56::MeasureUnit::`vector deleting	destructor'(uint)+6Ep
					; DATA XREF: ...
; public: virtual void * __thiscall icu_56::UObject::getDynamicClassID(void)const
		extrn ?getDynamicClassID@UObject@icu_56@@UBEPAXXZ:near
					; DATA XREF: .rdata:000010FCo
					; .rdata:0000142Co
		extrn __purecall:near	; DATA XREF: .rdata:00001100o
					; .rdata:00001104o ...
; _DWORD __thiscall icu_56::NumberFormatFactory::~NumberFormatFactory(icu_56::NumberFormatFactory *__hidden this)
		extrn ??1NumberFormatFactory@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::NumberFormatFactory::`scalar deleting destructor'(uint)+26p
					; icu_56::NumberFormatFactory::`vector deleting	destructor'(uint)+6Ep ...
; _DWORD __thiscall icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString *__hidden this, const struct icu_56::UnicodeString *)
		extrn __imp_??0UnicodeString@icu_56@@QAE@ABV01@@Z:near
					; CODE XREF: icu_56::SimpleNumberFormatFactory::SimpleNumberFormatFactory(icu_56::SimpleNumberFormatFactory const &)+79p
					; DATA XREF: icu_56::SimpleNumberFormatFactory::SimpleNumberFormatFactory(icu_56::SimpleNumberFormatFactory const &)+79r
		extrn ___security_cookie:near
					; DATA XREF: icu_56::SimpleNumberFormatFactory::SimpleNumberFormatFactory(icu_56::SimpleNumberFormatFactory const &)+2Er
					; icu_56::ChoiceFormat::ChoiceFormat(icu_56::UnicodeString const &,UErrorCode &)+2Er ...
		extrn ___CxxFrameHandler3:near
					; CODE XREF: __ehhandler$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z+19j
					; __ehhandler$??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z+19j ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: __ehhandler$??0SimpleNumberFormatFactory@icu_56@@QAE@ABV01@@Z+Fp
					; __ehhandler$??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z+Fp ...
; public: virtual signed char __thiscall icu_56::SimpleNumberFormatFactory::visible(void)const
		extrn ?visible@SimpleNumberFormatFactory@icu_56@@UBECXZ:near
					; DATA XREF: .rdata:00001430o
; public: virtual class	icu_56::UnicodeString const * __thiscall icu_56::SimpleNumberFormatFactory::getSupportedIDs(int	&, enum	 UErrorCode &)const
		extrn ?getSupportedIDs@SimpleNumberFormatFactory@icu_56@@UBEPBVUnicodeString@2@AAHAAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:00001434o
; _DWORD __thiscall icu_56::SimpleNumberFormatFactory::~SimpleNumberFormatFactory(icu_56::SimpleNumberFormatFactory *__hidden this)
		extrn ??1SimpleNumberFormatFactory@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::SimpleNumberFormatFactory::`scalar	deleting destructor'(uint)+26p
					; icu_56::SimpleNumberFormatFactory::`vector deleting destructor'(uint)+6Ep
					; DATA XREF: ...
; _DWORD __thiscall icu_56::MessagePattern::~MessagePattern(icu_56::MessagePattern *__hidden this)
		extrn __imp_??1MessagePattern@icu_56@@UAE@XZ:near
					; CODE XREF: __unwindfunclet$??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z$1+Bp
					; __unwindfunclet$??0ChoiceFormat@icu_56@@QAE@PBNPBVUnicodeString@1@H@Z$1+Bp ...
; _DWORD __thiscall icu_56::NumberFormat::~NumberFormat(icu_56::NumberFormat *__hidden this)
		extrn ??1NumberFormat@icu_56@@UAE@XZ:near
					; CODE XREF: __unwindfunclet$??0ChoiceFormat@icu_56@@QAE@ABVUnicodeString@1@AAW4UErrorCode@@@Z$0+3j
					; __unwindfunclet$??0ChoiceFormat@icu_56@@QAE@PBNPBVUnicodeString@1@H@Z$0+3j ...
; _DWORD __thiscall icu_56::MessagePattern::MessagePattern(icu_56::MessagePattern *__hidden this, enum UErrorCode *)
		extrn __imp_??0MessagePattern@icu_56@@QAE@AAW4UErrorCode@@@Z:near
					; CODE XREF: icu_56::ChoiceFormat::ChoiceFormat(icu_56::UnicodeString const &,UErrorCode &)+77p
					; icu_56::ChoiceFormat::ChoiceFormat(double const *,icu_56::UnicodeString const	*,int)+7Bp ...
; _DWORD __thiscall icu_56::NumberFormat::NumberFormat(icu_56::NumberFormat *__hidden this)
		extrn ??0NumberFormat@icu_56@@IAE@XZ:near
					; CODE XREF: icu_56::ChoiceFormat::ChoiceFormat(icu_56::UnicodeString const &,UErrorCode &)+45p
					; icu_56::ChoiceFormat::ChoiceFormat(double const *,icu_56::UnicodeString const	*,int)+45p ...
; public: virtual class	icu_56::UnicodeString &	__thiscall icu_56::NumberFormat::format(class icu_56::Formattable const	&, class icu_56::UnicodeString &, class	icu_56::FieldPositionIterator *, enum  UErrorCode &)const
		extrn ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@ABVFormattable@2@AAV32@PAVFieldPositionIterator@2@AAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:000018F8o
; public: virtual class	icu_56::UnicodeString &	__thiscall icu_56::NumberFormat::format(class icu_56::Formattable const	&, class icu_56::UnicodeString &, class	icu_56::FieldPosition &, enum  UErrorCode &)const
		extrn ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@ABVFormattable@2@AAV32@AAVFieldPosition@2@AAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:000018FCo
; public: virtual void __thiscall icu_56::NumberFormat::parseObject(class icu_56::UnicodeString	const &, class icu_56::Formattable &, class icu_56::ParsePosition &)const
		extrn ?parseObject@NumberFormat@icu_56@@UBEXABVUnicodeString@2@AAVFormattable@2@AAVParsePosition@2@@Z:near
					; DATA XREF: .rdata:00001900o
; public: virtual class	icu_56::UnicodeString &	__thiscall icu_56::NumberFormat::format(class icu_56::DigitList	const &, class icu_56::UnicodeString &,	class icu_56::FieldPosition &, enum  UErrorCode	&)const
		extrn ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@ABVDigitList@2@AAV32@AAVFieldPosition@2@AAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:00001904o
; public: virtual class	icu_56::UnicodeString &	__thiscall icu_56::NumberFormat::format(class icu_56::DigitList	const &, class icu_56::UnicodeString &,	class icu_56::FieldPositionIterator *, enum  UErrorCode	&)const
		extrn ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@ABVDigitList@2@AAV32@PAVFieldPositionIterator@2@AAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:00001908o
; public: virtual class	icu_56::UnicodeString &	__thiscall icu_56::NumberFormat::format(class icu_56::StringPiece const	&, class icu_56::UnicodeString &, class	icu_56::FieldPositionIterator *, enum  UErrorCode &)const
		extrn ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@ABVStringPiece@2@AAV32@PAVFieldPositionIterator@2@AAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:0000190Co
; public: virtual class	icu_56::UnicodeString &	__thiscall icu_56::NumberFormat::format(__int64, class icu_56::UnicodeString &,	class icu_56::FieldPositionIterator *, enum  UErrorCode	&)const
		extrn ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@_JAAV32@PAVFieldPositionIterator@2@AAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:00001910o
; public: virtual class	icu_56::UnicodeString &	__thiscall icu_56::NumberFormat::format(__int64, class icu_56::UnicodeString &,	class icu_56::FieldPosition &, enum  UErrorCode	&)const
		extrn ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@_JAAV32@AAVFieldPosition@2@AAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:00001914o
; public: virtual class	icu_56::UnicodeString &	__thiscall icu_56::NumberFormat::format(int, class icu_56::UnicodeString &, class icu_56::FieldPositionIterator	*, enum	 UErrorCode &)const
		extrn ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@HAAV32@PAVFieldPositionIterator@2@AAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:0000191Co
; public: virtual class	icu_56::UnicodeString &	__thiscall icu_56::NumberFormat::format(int, class icu_56::UnicodeString &, class icu_56::FieldPosition	&, enum	 UErrorCode &)const
		extrn ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@HAAV32@AAVFieldPosition@2@AAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:00001920o
; public: virtual class	icu_56::UnicodeString &	__thiscall icu_56::NumberFormat::format(double,	class icu_56::UnicodeString &, class icu_56::FieldPositionIterator *, enum  UErrorCode &)const
		extrn ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@NAAV32@PAVFieldPositionIterator@2@AAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:00001928o
; public: virtual class	icu_56::UnicodeString &	__thiscall icu_56::NumberFormat::format(double,	class icu_56::UnicodeString &, class icu_56::FieldPosition &, enum  UErrorCode &)const
		extrn ?format@NumberFormat@icu_56@@UBEAAVUnicodeString@2@NAAV32@AAVFieldPosition@2@AAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:0000192Co
; public: virtual void __thiscall icu_56::NumberFormat::parse(class icu_56::UnicodeString const	&, class icu_56::Formattable &,	enum  UErrorCode &)const
		extrn ?parse@NumberFormat@icu_56@@UBEXABVUnicodeString@2@AAVFormattable@2@AAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:00001934o
; public: virtual class	icu_56::CurrencyAmount * __thiscall icu_56::NumberFormat::parseCurrency(class icu_56::UnicodeString const &, class icu_56::ParsePosition &)const
		extrn ?parseCurrency@NumberFormat@icu_56@@UBEPAVCurrencyAmount@2@ABVUnicodeString@2@AAVParsePosition@2@@Z:near
					; DATA XREF: .rdata:0000193Co
; public: virtual void __thiscall icu_56::NumberFormat::setParseIntegerOnly(signed char)
		extrn ?setParseIntegerOnly@NumberFormat@icu_56@@UAEXC@Z:near
					; DATA XREF: .rdata:00001940o
; public: virtual void __thiscall icu_56::NumberFormat::setLenient(signed char)
		extrn ?setLenient@NumberFormat@icu_56@@UAEXC@Z:near
					; DATA XREF: .rdata:00001944o
; public: virtual void __thiscall icu_56::NumberFormat::setGroupingUsed(signed char)
		extrn ?setGroupingUsed@NumberFormat@icu_56@@UAEXC@Z:near
					; DATA XREF: .rdata:0000194Co
; public: virtual void __thiscall icu_56::NumberFormat::setMaximumIntegerDigits(int)
		extrn ?setMaximumIntegerDigits@NumberFormat@icu_56@@UAEXH@Z:near
					; DATA XREF: .rdata:00001950o
; public: virtual void __thiscall icu_56::NumberFormat::setMinimumIntegerDigits(int)
		extrn ?setMinimumIntegerDigits@NumberFormat@icu_56@@UAEXH@Z:near
					; DATA XREF: .rdata:00001954o
; public: virtual void __thiscall icu_56::NumberFormat::setMaximumFractionDigits(int)
		extrn ?setMaximumFractionDigits@NumberFormat@icu_56@@UAEXH@Z:near
					; DATA XREF: .rdata:00001958o
; public: virtual void __thiscall icu_56::NumberFormat::setMinimumFractionDigits(int)
		extrn ?setMinimumFractionDigits@NumberFormat@icu_56@@UAEXH@Z:near
					; DATA XREF: .rdata:0000195Co
; public: virtual void __thiscall icu_56::NumberFormat::setCurrency(wchar_t const *, enum  UErrorCode &)
		extrn ?setCurrency@NumberFormat@icu_56@@UAEXPB_WAAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:00001960o
; public: virtual void __thiscall icu_56::NumberFormat::setContext(enum	 UDisplayContext, enum	UErrorCode &)
		extrn ?setContext@NumberFormat@icu_56@@UAEXW4UDisplayContext@@AAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:00001964o
; public: virtual enum	UDisplayContext	__thiscall icu_56::NumberFormat::getContext(enum  UDisplayContextType, enum  UErrorCode	&)const
		extrn ?getContext@NumberFormat@icu_56@@UBE?AW4UDisplayContext@@W4UDisplayContextType@@AAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:00001968o
; protected: virtual void __thiscall icu_56::NumberFormat::getEffectiveCurrency(wchar_t	*, enum	 UErrorCode &)const
		extrn ?getEffectiveCurrency@NumberFormat@icu_56@@MBEXPA_WAAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:0000196Co
; _DWORD __thiscall icu_56::MessagePattern::MessagePattern(icu_56::MessagePattern *__hidden this, const	struct icu_56::MessagePattern *)
		extrn __imp_??0MessagePattern@icu_56@@QAE@ABV01@@Z:near
					; CODE XREF: icu_56::ChoiceFormat::ChoiceFormat(icu_56::ChoiceFormat const &)+84p
					; DATA XREF: icu_56::ChoiceFormat::ChoiceFormat(icu_56::ChoiceFormat const &)+84r
; _DWORD __thiscall icu_56::NumberFormat::NumberFormat(icu_56::NumberFormat *__hidden this, const struct icu_56::NumberFormat *)
		extrn ??0NumberFormat@icu_56@@IAE@ABV01@@Z:near
					; CODE XREF: icu_56::ChoiceFormat::ChoiceFormat(icu_56::ChoiceFormat const &)+49p
; __declspec(dllimport)	public:	signed char __thiscall icu_56::MessagePattern::operator==(class	icu_56::MessagePattern const &)const
		extrn __imp_??8MessagePattern@icu_56@@QBECABV01@@Z:near
					; CODE XREF: icu_56::ChoiceFormat::operator==(icu_56::Format const &)+60p
					; DATA XREF: icu_56::ChoiceFormat::operator==(icu_56::Format const &)+60r
; public: virtual signed char __thiscall icu_56::NumberFormat::operator==(class	icu_56::Format const &)const
		extrn ??8NumberFormat@icu_56@@UBECABVFormat@1@@Z:near
					; CODE XREF: icu_56::ChoiceFormat::operator==(icu_56::Format const &)+36p
; __declspec(dllimport)	public:	class icu_56::MessagePattern & __thiscall icu_56::MessagePattern::operator=(class icu_56::MessagePattern const &)
		extrn __imp_??4MessagePattern@icu_56@@QAEAAV01@ABV01@@Z:near
					; CODE XREF: icu_56::ChoiceFormat::operator=(icu_56::ChoiceFormat const	&)+5Dp
					; DATA XREF: icu_56::ChoiceFormat::operator=(icu_56::ChoiceFormat const	&)+5Dr
; protected: class icu_56::NumberFormat	& __thiscall icu_56::NumberFormat::operator=(class icu_56::NumberFormat	const &)
		extrn ??4NumberFormat@icu_56@@IAEAAV01@ABV01@@Z:near
					; CODE XREF: icu_56::ChoiceFormat::operator=(icu_56::ChoiceFormat const	&)+32p
; _DWORD __thiscall icu_56::UnicodeString::~UnicodeString(icu_56::UnicodeString	*__hidden this)
		extrn __imp_??1UnicodeString@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+1DEp
					; __unwindfunclet$?dtos@ChoiceFormat@icu_56@@CAAAVUnicodeString@2@NAAV32@@Z$0+8p ...
; __declspec(dllimport)	public:	class icu_56::UnicodeString & __thiscall icu_56::UnicodeString::operator=(class	icu_56::UnicodeString &&)
		extrn __imp_??4UnicodeString@icu_56@@QAEAAV01@$$QAV01@@Z:near
					; CODE XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+1C2p
					; DATA XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+1C2r
; _DWORD __thiscall __high icu_56::UnicodeString::UnicodeString(const char *, int, enum	icu_56::UnicodeString::EInvariant)
		extrn __imp_??0UnicodeString@icu_56@@QAE@PBDHW4EInvariant@01@@Z:near
					; CODE XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+190p
					; DATA XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+190r
; int __cdecl _isdigit(int C)
		extrn __imp__isdigit:near
					; CODE XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+8Ap
					; DATA XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+8Ar
; int _sprintf(char *Dest, const char *Format, ...)
		extrn __imp__sprintf:near
					; CODE XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+5Cp
					; DATA XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+5Cr
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near
					; CODE XREF: icu_56::ChoiceFormat::dtos(double,icu_56::UnicodeString &)+1F8p
					; icu_56::ChoiceFormat::setChoices(double const	*,icu_56::UnicodeString	const *,int)+5Fp ...
; struct icu_56::MessagePattern	*__thiscall icu_56::MessagePattern::parseChoiceStyle(icu_56::MessagePattern *__hidden this, const struct icu_56::UnicodeString *, struct UParseError *,	enum UErrorCode	*)
		extrn __imp_?parseChoiceStyle@MessagePattern@icu_56@@QAEAAV12@ABVUnicodeString@2@PAUUParseError@@AAW4UErrorCode@@@Z:near
					; CODE XREF: icu_56::ChoiceFormat::applyPattern(icu_56::UnicodeString const &,UErrorCode &)+38p
					; icu_56::ChoiceFormat::applyPattern(icu_56::UnicodeString const &,UParseError &,UErrorCode &)+3Ap
					; DATA XREF: ...
; const	struct icu_56::UnicodeString *__thiscall icu_56::MessagePattern::getPatternString(icu_56::MessagePattern *__hidden this)
		extrn __imp_?getPatternString@MessagePattern@icu_56@@QBEABVUnicodeString@2@XZ:near
					; CODE XREF: icu_56::ChoiceFormat::toPattern(icu_56::UnicodeString &)+2Ep
					; icu_56::ChoiceFormat::format(double,icu_56::UnicodeString &,icu_56::FieldPosition &)+102p ...
; struct icu_56::UnicodeString *__thiscall icu_56::UnicodeString::append(icu_56::UnicodeString *__hidden this, wchar_t)
		extrn __imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z:near
					; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+279p
					; icu_56::ChoiceFormat::setChoices(double const	*,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+2B5p ...
; __declspec(dllimport)	public:	wchar_t	__thiscall icu_56::UnicodeString::operator[](int)const
		extrn __imp_??AUnicodeString@icu_56@@QBE_WH@Z:near
					; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+243p
					; DATA XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+243r
; int __thiscall icu_56::UnicodeString::length(icu_56::UnicodeString *__hidden this)
		extrn __imp_?length@UnicodeString@icu_56@@QBEHXZ:near
					; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+1EAp
					; icu_56::ChoiceFormat::parseArgument(icu_56::MessagePattern const &,int,icu_56::UnicodeString const &,icu_56::ParsePosition &)+11Bp
					; DATA XREF: ...
; __declspec(dllimport)	public:	class icu_56::UnicodeString & __thiscall icu_56::UnicodeString::operator+=(class icu_56::UnicodeString const &)
		extrn __imp_??YUnicodeString@icu_56@@QAEAAV01@ABV01@@Z:near
					; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+189p
					; DATA XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+189r
		extrn _uprv_isNegativeInfinity_56:near
					; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+129p
		extrn _uprv_isPositiveInfinity_56:near
					; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+F2p
; __declspec(dllimport)	public:	class icu_56::UnicodeString & __thiscall icu_56::UnicodeString::operator+=(wchar_t)
		extrn __imp_??YUnicodeString@icu_56@@QAEAAV01@_W@Z:near
					; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+BDp
					; icu_56::ChoiceFormat::setChoices(double const	*,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+10Bp ...
; _DWORD __thiscall icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString *__hidden this)
		extrn __imp_??0UnicodeString@icu_56@@QAE@XZ:near
					; CODE XREF: icu_56::ChoiceFormat::setChoices(double const *,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+7Ep
					; icu_56::ChoiceFormat::setChoices(double const	*,signed char const *,icu_56::UnicodeString const *,int,UErrorCode &)+D2p
					; DATA XREF: ...
; struct icu_56::UnicodeString *__cdecl	static icu_56::MessageImpl::appendSubMessageWithoutSkipSyntax(const struct icu_56::MessagePattern *, int, struct icu_56::UnicodeString *)
		extrn __imp_?appendSubMessageWithoutSkipSyntax@MessageImpl@icu_56@@SAAAVUnicodeString@2@ABVMessagePattern@2@HAAV32@@Z:near
					; CODE XREF: icu_56::ChoiceFormat::format(double,icu_56::UnicodeString &,icu_56::FieldPosition &)+139p
					; DATA XREF: icu_56::ChoiceFormat::format(double,icu_56::UnicodeString &,icu_56::FieldPosition &)+139r
; struct icu_56::UnicodeString *__thiscall icu_56::UnicodeString::append(icu_56::UnicodeString *__hidden this, const struct icu_56::UnicodeString *, int, int)
		extrn __imp_?append@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z:near
					; CODE XREF: icu_56::ChoiceFormat::format(double,icu_56::UnicodeString &,icu_56::FieldPosition &)+113p
					; DATA XREF: icu_56::ChoiceFormat::format(double,icu_56::UnicodeString &,icu_56::FieldPosition &)+113r
; int __thiscall icu_56::MessagePattern::getPatternIndex(icu_56::MessagePattern	*__hidden this,	int)
		extrn __imp_?getPatternIndex@MessagePattern@icu_56@@QBEHH@Z:near
					; CODE XREF: icu_56::ChoiceFormat::format(double,icu_56::UnicodeString &,icu_56::FieldPosition &)+E0p
					; icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+125p
					; DATA XREF: ...
; int __thiscall icu_56::MessagePattern::getLimitPartIndex(icu_56::MessagePattern *__hidden this, int)
		extrn __imp_?getLimitPartIndex@MessagePattern@icu_56@@QBEHH@Z:near
					; CODE XREF: icu_56::ChoiceFormat::format(double,icu_56::UnicodeString &,icu_56::FieldPosition &)+C1p
					; icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+4Bp ...
; const	struct icu_56::MessagePattern::Part *__thiscall	icu_56::MessagePattern::getPart(icu_56::MessagePattern *__hidden this, int)
		extrn __imp_?getPart@MessagePattern@icu_56@@QBEABVPart@12@H@Z:near
					; CODE XREF: icu_56::ChoiceFormat::format(double,icu_56::UnicodeString &,icu_56::FieldPosition &)+9Bp
					; icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+8Fp ...
; signed __int8	__cdecl	static icu_56::MessageImpl::jdkAposMode(const struct icu_56::MessagePattern *)
		extrn __imp_?jdkAposMode@MessageImpl@icu_56@@SACABVMessagePattern@2@@Z:near
					; CODE XREF: icu_56::ChoiceFormat::format(double,icu_56::UnicodeString &,icu_56::FieldPosition &)+71p
					; DATA XREF: icu_56::ChoiceFormat::format(double,icu_56::UnicodeString &,icu_56::FieldPosition &)+71r
; int __thiscall icu_56::MessagePattern::countParts(icu_56::MessagePattern *__hidden this)
		extrn __imp_?countParts@MessagePattern@icu_56@@QBEHXZ:near
					; CODE XREF: icu_56::ChoiceFormat::format(double,icu_56::UnicodeString &,icu_56::FieldPosition &)+2Ep
					; icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+23p ...
; wchar_t __thiscall icu_56::UnicodeString::charAt(icu_56::UnicodeString *__hidden this, int)
		extrn __imp_?charAt@UnicodeString@icu_56@@QBE_WH@Z:near
					; CODE XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+14Fp
					; DATA XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+14Fr
; double __thiscall icu_56::MessagePattern::getNumericValue(icu_56::MessagePattern *__hidden this, const struct	icu_56::MessagePattern::Part *)
		extrn __imp_?getNumericValue@MessagePattern@icu_56@@QBENABVPart@12@@Z:near
					; CODE XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+F7p
					; icu_56::ChoiceFormat::parseArgument(icu_56::MessagePattern const &,int,icu_56::UnicodeString const &,icu_56::ParsePosition &)+A2p
					; DATA XREF: ...
; void __cdecl __wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
		extrn __imp___wassert:near
					; CODE XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+DEp
					; DATA XREF: icu_56::ChoiceFormat::findSubMessage(icu_56::MessagePattern const &,int,double)+DEr
; double __thiscall icu_56::Formattable::getDouble(icu_56::Formattable *__hidden this, enum UErrorCode *)
		extrn ?getDouble@Formattable@icu_56@@QBENAAW4UErrorCode@@@Z:near
					; CODE XREF: icu_56::ChoiceFormat::format(icu_56::Formattable const *,int,icu_56::UnicodeString	&,icu_56::FieldPosition	&,UErrorCode &)+8Ep
; void __thiscall icu_56::Formattable::setDouble(icu_56::Formattable *__hidden this, double)
		extrn ?setDouble@Formattable@icu_56@@QAEXN@Z:near
					; CODE XREF: icu_56::ChoiceFormat::parse(icu_56::UnicodeString const &,icu_56::Formattable &,icu_56::ParsePosition &)+45p
; void __thiscall icu_56::ParsePosition::setIndex(icu_56::ParsePosition	*__hidden this,	int)
		extrn __imp_?setIndex@ParsePosition@icu_56@@QAEXH@Z:near
					; CODE XREF: icu_56::ChoiceFormat::parseArgument(icu_56::MessagePattern	const &,int,icu_56::UnicodeString const	&,icu_56::ParsePosition	&)+166p
					; DATA XREF: icu_56::ChoiceFormat::parseArgument(icu_56::MessagePattern	const &,int,icu_56::UnicodeString const	&,icu_56::ParsePosition	&)+166r
; void __thiscall icu_56::ParsePosition::setErrorIndex(icu_56::ParsePosition *__hidden this, int)
		extrn __imp_?setErrorIndex@ParsePosition@icu_56@@QAEXH@Z:near
					; CODE XREF: icu_56::ChoiceFormat::parseArgument(icu_56::MessagePattern	const &,int,icu_56::UnicodeString const	&,icu_56::ParsePosition	&)+14Ep
					; DATA XREF: icu_56::ChoiceFormat::parseArgument(icu_56::MessagePattern	const &,int,icu_56::UnicodeString const	&,icu_56::ParsePosition	&)+14Er
; enum UMessagePatternPartType __thiscall __high icu_56::MessagePattern::getPartType(int)
		extrn __imp_?getPartType@MessagePattern@icu_56@@QBE?AW4UMessagePatternPartType@@H@Z:near
					; CODE XREF: icu_56::ChoiceFormat::parseArgument(icu_56::MessagePattern	const &,int,icu_56::UnicodeString const	&,icu_56::ParsePosition	&)+70p
					; DATA XREF: icu_56::ChoiceFormat::parseArgument(icu_56::MessagePattern	const &,int,icu_56::UnicodeString const	&,icu_56::ParsePosition	&)+70r
		extrn _uprv_getNaN_56:near
					; CODE XREF: icu_56::ChoiceFormat::parseArgument(icu_56::MessagePattern	const &,int,icu_56::UnicodeString const	&,icu_56::ParsePosition	&)+39p
; int __thiscall icu_56::ParsePosition::getIndex(icu_56::ParsePosition *__hidden this)
		extrn __imp_?getIndex@ParsePosition@icu_56@@QBEHXZ:near
					; CODE XREF: icu_56::ChoiceFormat::parseArgument(icu_56::MessagePattern	const &,int,icu_56::UnicodeString const	&,icu_56::ParsePosition	&)+23p
					; DATA XREF: icu_56::ChoiceFormat::parseArgument(icu_56::MessagePattern	const &,int,icu_56::UnicodeString const	&,icu_56::ParsePosition	&)+23r
; signed __int8	__thiscall icu_56::UnicodeString::compare(icu_56::UnicodeString	*__hidden this,	int, int, const	struct icu_56::UnicodeString *,	int, int)
		extrn __imp_?compare@UnicodeString@icu_56@@QBECHHABV12@HH@Z:near
					; CODE XREF: icu_56::ChoiceFormat::matchStringUntilLimitPart(icu_56::MessagePattern const &,int,int,icu_56::UnicodeString const	&,int)+C0p
					; DATA XREF: icu_56::ChoiceFormat::matchStringUntilLimitPart(icu_56::MessagePattern const &,int,int,icu_56::UnicodeString const	&,int)+C0r
; void *__cdecl	static icu_56::UMemory::operator new(unsigned int)
		extrn __imp_??2UMemory@icu_56@@SAPAXI@Z:near
					; CODE XREF: icu_56::ChoiceFormat::clone(void)+49p
					; DATA XREF: icu_56::ChoiceFormat::clone(void)+49r


		end
