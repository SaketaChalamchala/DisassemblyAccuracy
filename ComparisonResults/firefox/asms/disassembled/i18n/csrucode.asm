;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	C3E22E673A6644BE3B73B30402EBDAE7
; Input	CRC32 :	C3D59CFD

; File Name   :	D:\compspace\objfiles\firefox\i18n\csrucode.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int)
		public ??2@YAPAXI@Z
??2@YAPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??2@YAPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 38h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 3Ch
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 40h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX@Z
??3@YAXPAX@Z	proc near		; DATA XREF: .rdata$r:00000144o
					; .rdata$r:00000160o ...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??3@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 74h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::CharsetRecog_Unicode::~CharsetRecog_Unicode(icu_56::CharsetRecog_Unicode *__hidden this)
		public ??1CharsetRecog_Unicode@icu_56@@UAE@XZ
??1CharsetRecog_Unicode@icu_56@@UAE@XZ proc near
					; CODE XREF: icu_56::CharsetRecog_Unicode::`scalar deleting destructor'(uint)+26p
					; icu_56::CharsetRecog_UTF_16_BE::~CharsetRecog_UTF_16_BE(void)+2Fp ...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7CharsetRecog_Unicode@icu_56@@6B@ ; const icu_56::CharsetRecog_Unicode::`vftable'
		mov	ecx, [ebp+var_8] ; this
		call	??1CharsetRecognizer@icu_56@@UAE@XZ ; icu_56::CharsetRecognizer::~CharsetRecognizer(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1CharsetRecog_Unicode@icu_56@@UAE@XZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BCh
		dd offset ??_R4CharsetRecog_Unicode@icu_56@@6B@	; const	icu_56::CharsetRecog_Unicode::`RTTI Complete Object Locator'
		public ??_7CharsetRecog_Unicode@icu_56@@6B@
; const	icu_56::CharsetRecog_Unicode::`vftable'
??_7CharsetRecog_Unicode@icu_56@@6B@ dd	offset __purecall
					; DATA XREF: icu_56::CharsetRecog_Unicode::~CharsetRecog_Unicode(void)+26o
		dd offset ?getLanguage@CharsetRecognizer@icu_56@@UBEPBDXZ ; icu_56::CharsetRecognizer::getLanguage(void)
		dd offset __purecall
		dd offset ??_ECharsetRecog_Unicode@icu_56@@UAEPAXI@Z ; icu_56::CharsetRecog_Unicode::`vector deleting destructor'(uint)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0D0h
		public ??_R4CharsetRecog_Unicode@icu_56@@6B@
; const	icu_56::CharsetRecog_Unicode::`RTTI Complete Object Locator'
??_R4CharsetRecog_Unicode@icu_56@@6B@ dd 3 dup(0) ; DATA XREF: .rdata:000000BCo
		dd offset ??_R0?AVCharsetRecog_Unicode@icu_56@@@8 ; icu_56::CharsetRecog_Unicode `RTTI Type Descriptor'
		dd offset ??_R3CharsetRecog_Unicode@icu_56@@8 ;	icu_56::CharsetRecog_Unicode::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 0E4h
		public ??_R0?AVCharsetRecog_Unicode@icu_56@@@8
; class	icu_56::CharsetRecog_Unicode `RTTI Type	Descriptor'
??_R0?AVCharsetRecog_Unicode@icu_56@@@8	dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:000000DCo
					; .rdata$r:icu_56::CharsetRecog_Unicode::`RTTI Base Class Descriptor at	(0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avcharsetrec	db '.?AVCharsetRecog_Unicode@icu_56@@',0
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 110h
		public ??_R3CharsetRecog_Unicode@icu_56@@8
; icu_56::CharsetRecog_Unicode::`RTTI Class Hierarchy Descriptor'
??_R3CharsetRecog_Unicode@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:000000E0o
					; .rdata$r:00000148o
		dd 3
		dd offset ??_R2CharsetRecog_Unicode@icu_56@@8 ;	icu_56::CharsetRecog_Unicode::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 120h
		public ??_R2CharsetRecog_Unicode@icu_56@@8
; icu_56::CharsetRecog_Unicode::`RTTI Base Class Array'
??_R2CharsetRecog_Unicode@icu_56@@8 dd offset ??_R1A@?0A@EA@CharsetRecog_Unicode@icu_56@@8
					; DATA XREF: .rdata$r:0000011Co
					; icu_56::CharsetRecog_Unicode::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@CharsetRecognizer@icu_56@@8 ; icu_56::CharsetRecognizer::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 130h
		public ??_R1A@?0A@EA@CharsetRecog_Unicode@icu_56@@8
; icu_56::CharsetRecog_Unicode::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@CharsetRecog_Unicode@icu_56@@8 dd	offset ??_R0?AVCharsetRecog_Unicode@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::CharsetRecog_Unicode::`RTTI Base Class Array'o
					; .rdata$r:00000330o ...
					; icu_56::CharsetRecog_Unicode `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ??3@YAXPAX@Z	; operator delete(void *)
		dd offset ??_R3CharsetRecog_Unicode@icu_56@@8 ;	icu_56::CharsetRecog_Unicode::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 14Ch
		public ??_R1A@?0A@EA@CharsetRecognizer@icu_56@@8
; icu_56::CharsetRecognizer::`RTTI Base	Class Descriptor at (0,	-1, 0, 64)'
??_R1A@?0A@EA@CharsetRecognizer@icu_56@@8 dd offset ??_R0?AVCharsetRecognizer@icu_56@@@8
					; DATA XREF: .rdata$r:00000124o
					; .rdata$r:icu_56::CharsetRecognizer::`RTTI Base Class Array'o ...
					; icu_56::CharsetRecognizer `RTTI Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset ??3@YAXPAX@Z	; operator delete(void *)
		dd offset ??_R3CharsetRecognizer@icu_56@@8 ; icu_56::CharsetRecognizer::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 168h
		public ??_R0?AVCharsetRecognizer@icu_56@@@8
; class	icu_56::CharsetRecognizer `RTTI	Type Descriptor'
??_R0?AVCharsetRecognizer@icu_56@@@8 dd	offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::CharsetRecognizer::`RTTI Base Class Descriptor at	(0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avcharsetr_0	db '.?AVCharsetRecognizer@icu_56@@',0
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 190h
		public ??_R3CharsetRecognizer@icu_56@@8
; icu_56::CharsetRecognizer::`RTTI Class Hierarchy Descriptor'
??_R3CharsetRecognizer@icu_56@@8 dd 2 dup(0) ; DATA XREF: .rdata$r:00000164o
		dd 2
		dd offset ??_R2CharsetRecognizer@icu_56@@8 ; icu_56::CharsetRecognizer::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1A0h
		public ??_R2CharsetRecognizer@icu_56@@8
; icu_56::CharsetRecognizer::`RTTI Base	Class Array'
??_R2CharsetRecognizer@icu_56@@8 dd offset ??_R1A@?0A@EA@CharsetRecognizer@icu_56@@8
					; DATA XREF: .rdata$r:0000019Co
					; icu_56::CharsetRecognizer::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1ACh
		public ??_R13?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@UMemory@icu_56@@8 dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:00000128o
					; .rdata$r:000001A4o ...
					; icu_56::UMemory `RTTI	Type Descriptor'
		dd 0
		dd 4, 0FFFFFFFFh, 0
		dd offset ??3@YAXPAX@Z	; operator delete(void *)
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 1C8h
		public ??_R0?AVUMemory@icu_56@@@8
; class	icu_56::UMemory	`RTTI Type Descriptor'
??_R0?AVUMemory@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Descriptor at (4,-1,0,64)'o
					; .rdata$r:icu_56::UMemory::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avumemory@ic	db '.?AVUMemory@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1E8h
		public ??_R3UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
??_R3UMemory@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:000001C4o
					; .rdata$r:00000218o
		dd 1
		dd offset ??_R2UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1F8h
		public ??_R2UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Array'
??_R2UMemory@icu_56@@8 dd offset ??_R1A@?0A@EA@UMemory@icu_56@@8
					; DATA XREF: .rdata$r:000001F4o
					; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 200h
		public ??_R1A@?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UMemory@icu_56@@8	dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Array'o
					; icu_56::UMemory `RTTI	Type Descriptor'
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd offset ??3@YAXPAX@Z	; operator delete(void *)
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 21Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::CharsetRecog_Unicode::`scalar deleting destructor'(unsigned int)
		public ??_GCharsetRecog_Unicode@icu_56@@UAEPAXI@Z
??_GCharsetRecog_Unicode@icu_56@@UAEPAXI@Z proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1CharsetRecog_Unicode@icu_56@@UAE@XZ ; icu_56::CharsetRecog_Unicode::~CharsetRecog_Unicode(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_265
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_265:				; CODE XREF: icu_56::CharsetRecog_Unicode::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GCharsetRecog_Unicode@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 280h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::CharsetRecog_UTF_16_BE::~CharsetRecog_UTF_16_BE(icu_56::CharsetRecog_UTF_16_BE *__hidden this)
		public ??1CharsetRecog_UTF_16_BE@icu_56@@UAE@XZ
??1CharsetRecog_UTF_16_BE@icu_56@@UAE@XZ proc near
					; CODE XREF: icu_56::CharsetRecog_UTF_16_BE::`scalar deleting destructor'(uint)+26p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7CharsetRecog_UTF_16_BE@icu_56@@6B@ ; const icu_56::CharsetRecog_UTF_16_BE::`vftable'
		mov	ecx, [ebp+var_8] ; this
		call	??1CharsetRecog_Unicode@icu_56@@UAE@XZ ; icu_56::CharsetRecog_Unicode::~CharsetRecog_Unicode(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1CharsetRecog_UTF_16_BE@icu_56@@UAE@XZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2C8h
		dd offset ??_R4CharsetRecog_UTF_16_BE@icu_56@@6B@ ; const icu_56::CharsetRecog_UTF_16_BE::`RTTI	Complete Object	Locator'
		public ??_7CharsetRecog_UTF_16_BE@icu_56@@6B@
; const	icu_56::CharsetRecog_UTF_16_BE::`vftable'
??_7CharsetRecog_UTF_16_BE@icu_56@@6B@ dd offset ?getName@CharsetRecog_UTF_16_BE@icu_56@@UBEPBDXZ
					; DATA XREF: icu_56::CharsetRecog_UTF_16_BE::~CharsetRecog_UTF_16_BE(void)+26o
					; icu_56::CharsetRecog_UTF_16_BE::getName(void)
		dd offset ?getLanguage@CharsetRecognizer@icu_56@@UBEPBDXZ ; icu_56::CharsetRecognizer::getLanguage(void)
		dd offset ?match@CharsetRecog_UTF_16_BE@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z	; icu_56::CharsetRecog_UTF_16_BE::match(icu_56::InputText *,icu_56::CharsetMatch *)
		dd offset ??_ECharsetRecog_UTF_16_BE@icu_56@@UAEPAXI@Z ; icu_56::CharsetRecog_UTF_16_BE::`vector deleting destructor'(uint)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 2DCh
		public ??_R4CharsetRecog_UTF_16_BE@icu_56@@6B@
; const	icu_56::CharsetRecog_UTF_16_BE::`RTTI Complete Object Locator'
??_R4CharsetRecog_UTF_16_BE@icu_56@@6B@	dd 3 dup(0) ; DATA XREF: .rdata:000002C8o
		dd offset ??_R0?AVCharsetRecog_UTF_16_BE@icu_56@@@8 ; icu_56::CharsetRecog_UTF_16_BE `RTTI Type	Descriptor'
		dd offset ??_R3CharsetRecog_UTF_16_BE@icu_56@@8	; icu_56::CharsetRecog_UTF_16_BE::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 2F0h
		public ??_R0?AVCharsetRecog_UTF_16_BE@icu_56@@@8
; class	icu_56::CharsetRecog_UTF_16_BE `RTTI Type Descriptor'
??_R0?AVCharsetRecog_UTF_16_BE@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:000002E8o
					; .rdata$r:icu_56::CharsetRecog_UTF_16_BE::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?avcharsetr_1	db '.?AVCharsetRecog_UTF_16_BE@icu_56@@',0
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 31Ch
		public ??_R3CharsetRecog_UTF_16_BE@icu_56@@8
; icu_56::CharsetRecog_UTF_16_BE::`RTTI	Class Hierarchy	Descriptor'
??_R3CharsetRecog_UTF_16_BE@icu_56@@8 dd 2 dup(0) ; DATA XREF: .rdata$r:000002ECo
					; .rdata$r:00000358o
		dd 4
		dd offset ??_R2CharsetRecog_UTF_16_BE@icu_56@@8	; icu_56::CharsetRecog_UTF_16_BE::`RTTI	Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 32Ch
		public ??_R2CharsetRecog_UTF_16_BE@icu_56@@8
; icu_56::CharsetRecog_UTF_16_BE::`RTTI	Base Class Array'
??_R2CharsetRecog_UTF_16_BE@icu_56@@8 dd offset	??_R1A@?0A@EA@CharsetRecog_UTF_16_BE@icu_56@@8
					; DATA XREF: .rdata$r:00000328o
					; icu_56::CharsetRecog_UTF_16_BE::`RTTI	Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@CharsetRecog_Unicode@icu_56@@8 ; icu_56::CharsetRecog_Unicode::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@CharsetRecognizer@icu_56@@8 ; icu_56::CharsetRecognizer::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 340h
		public ??_R1A@?0A@EA@CharsetRecog_UTF_16_BE@icu_56@@8
; icu_56::CharsetRecog_UTF_16_BE::`RTTI	Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@CharsetRecog_UTF_16_BE@icu_56@@8 dd offset ??_R0?AVCharsetRecog_UTF_16_BE@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::CharsetRecog_UTF_16_BE::`RTTI Base Class Array'o
					; icu_56::CharsetRecog_UTF_16_BE `RTTI Type Descriptor'
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd offset ??3@YAXPAX@Z	; operator delete(void *)
		dd offset ??_R3CharsetRecog_UTF_16_BE@icu_56@@8	; icu_56::CharsetRecog_UTF_16_BE::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 35Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::CharsetRecog_UTF_16_BE::`scalar deleting destructor'(unsigned int)
		public ??_GCharsetRecog_UTF_16_BE@icu_56@@UAEPAXI@Z
??_GCharsetRecog_UTF_16_BE@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1CharsetRecog_UTF_16_BE@icu_56@@UAE@XZ ; icu_56::CharsetRecog_UTF_16_BE::~CharsetRecog_UTF_16_BE(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_3A5
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_3A5:				; CODE XREF: icu_56::CharsetRecog_UTF_16_BE::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GCharsetRecog_UTF_16_BE@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3C0h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	char *__thiscall icu_56::CharsetRecog_UTF_16_BE::getName(icu_56::CharsetRecog_UTF_16_BE	*__hidden this)
		public ?getName@CharsetRecog_UTF_16_BE@icu_56@@UBEPBDXZ
?getName@CharsetRecog_UTF_16_BE@icu_56@@UBEPBDXZ proc near
					; DATA XREF: .rdata:const icu_56::CharsetRecog_UTF_16_BE::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, offset ??_C@_08NLKHJAFK@UTF?916BE?$AA@ ; "UTF-16BE"
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getName@CharsetRecog_UTF_16_BE@icu_56@@UBEPBDXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3F0h
		public ??_C@_08NLKHJAFK@UTF?916BE?$AA@
; `string'
??_C@_08NLKHJAFK@UTF?916BE?$AA@	db 'UTF-16BE',0
					; DATA XREF: icu_56::CharsetRecog_UTF_16_BE::getName(void)+23o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3FCh
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__thiscall icu_56::CharsetRecog_UTF_16_BE::match(icu_56::CharsetRecog_UTF_16_BE	*this, struct icu_56::InputText	*, struct icu_56::CharsetMatch *)
		public ?match@CharsetRecog_UTF_16_BE@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z
?match@CharsetRecog_UTF_16_BE@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z proc near
					; DATA XREF: .rdata:000002D4o

var_118		= dword	ptr -118h
var_50		= word ptr -50h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 118h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_118]
		mov	ecx, 46h ; 'F'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		mov	[ebp+var_14], ecx
		mov	[ebp+var_20], 0Ah
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+18h]
		mov	[ebp+var_2C], ecx
		cmp	[ebp+var_2C], 1Eh
		jle	short loc_44A
		mov	[ebp+var_118], 1Eh
		jmp	short loc_453
; ---------------------------------------------------------------------------

loc_44A:				; CODE XREF: icu_56::CharsetRecog_UTF_16_BE::match(icu_56::InputText *,icu_56::CharsetMatch *)+40j
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_118], eax

loc_453:				; CODE XREF: icu_56::CharsetRecog_UTF_16_BE::match(icu_56::InputText *,icu_56::CharsetMatch *)+4Cj
		mov	ecx, [ebp+var_118]
		mov	[ebp+var_38], ecx
		mov	[ebp+var_44], 0
		jmp	short loc_46E
; ---------------------------------------------------------------------------

loc_465:				; CODE XREF: icu_56::CharsetRecog_UTF_16_BE::match(icu_56::InputText *,icu_56::CharsetMatch *):loc_4D1j
		mov	eax, [ebp+var_44]
		add	eax, 2
		mov	[ebp+var_44], eax

loc_46E:				; CODE XREF: icu_56::CharsetRecog_UTF_16_BE::match(icu_56::InputText *,icu_56::CharsetMatch *)+67j
		mov	eax, [ebp+var_38]
		sub	eax, 1
		cmp	[ebp+var_44], eax
		jge	short loc_4D3
		mov	eax, [ebp+var_14]
		add	eax, [ebp+var_44]
		movzx	ecx, byte ptr [eax]
		shl	ecx, 8
		mov	edx, [ebp+var_14]
		add	edx, [ebp+var_44]
		movzx	eax, byte ptr [edx+1]
		or	ecx, eax
		mov	[ebp+var_50], cx
		cmp	[ebp+var_44], 0
		jnz	short loc_4AF
		movzx	eax, [ebp+var_50]
		cmp	eax, 0FEFFh
		jnz	short loc_4AF
		mov	[ebp+var_20], 64h ; 'd'
		jmp	short loc_4D3
; ---------------------------------------------------------------------------

loc_4AF:				; CODE XREF: icu_56::CharsetRecog_UTF_16_BE::match(icu_56::InputText *,icu_56::CharsetMatch *)+9Dj
					; icu_56::CharsetRecog_UTF_16_BE::match(icu_56::InputText *,icu_56::CharsetMatch *)+A8j
		mov	eax, [ebp+var_20]
		push	eax
		movzx	ecx, [ebp+var_50]
		push	ecx
		call	?adjustConfidence@icu_56@@YAH_WH@Z ; icu_56::adjustConfidence(wchar_t,int)
		add	esp, 8
		mov	[ebp+var_20], eax
		cmp	[ebp+var_20], 0
		jz	short loc_4CF
		cmp	[ebp+var_20], 64h ; 'd'
		jnz	short loc_4D1

loc_4CF:				; CODE XREF: icu_56::CharsetRecog_UTF_16_BE::match(icu_56::InputText *,icu_56::CharsetMatch *)+CBj
		jmp	short loc_4D3
; ---------------------------------------------------------------------------

loc_4D1:				; CODE XREF: icu_56::CharsetRecog_UTF_16_BE::match(icu_56::InputText *,icu_56::CharsetMatch *)+D1j
		jmp	short loc_465
; ---------------------------------------------------------------------------

loc_4D3:				; CODE XREF: icu_56::CharsetRecog_UTF_16_BE::match(icu_56::InputText *,icu_56::CharsetMatch *)+7Bj
					; icu_56::CharsetRecog_UTF_16_BE::match(icu_56::InputText *,icu_56::CharsetMatch *)+B1j ...
		cmp	[ebp+var_38], 4
		jge	short loc_4E6
		cmp	[ebp+var_20], 64h ; 'd'
		jge	short loc_4E6
		mov	[ebp+var_20], 0

loc_4E6:				; CODE XREF: icu_56::CharsetRecog_UTF_16_BE::match(icu_56::InputText *,icu_56::CharsetMatch *)+DBj
					; icu_56::CharsetRecog_UTF_16_BE::match(icu_56::InputText *,icu_56::CharsetMatch *)+E1j
		push	0		; char *
		push	0		; char *
		mov	eax, [ebp+var_20]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		push	ecx		; struct icu_56::CharsetRecognizer *
		mov	edx, [ebp+arg_0]
		push	edx		; struct icu_56::InputText *
		mov	ecx, [ebp+arg_4] ; this
		call	?set@CharsetMatch@icu_56@@QAEXPAVInputText@2@PBVCharsetRecognizer@2@HPBD2@Z ; icu_56::CharsetMatch::set(icu_56::InputText *,icu_56::CharsetRecognizer const *,int,char const *,char const *)
		cmp	[ebp+var_20], 0
		setnle	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 118h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?match@CharsetRecog_UTF_16_BE@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 51Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl icu_56::adjustConfidence(wchar_t,	int)
?adjustConfidence@icu_56@@YAH_WH@Z proc	near
					; CODE XREF: icu_56::CharsetRecog_UTF_16_BE::match(icu_56::InputText *,icu_56::CharsetMatch *)+BCp
					; icu_56::CharsetRecog_UTF_16_LE::match(icu_56::InputText *,icu_56::CharsetMatch *)+E3p

var_C0		= byte ptr -0C0h
arg_0		= word ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		movzx	eax, [ebp+arg_0]
		test	eax, eax
		jnz	short loc_54D
		mov	eax, [ebp+arg_4]
		sub	eax, 0Ah
		mov	[ebp+arg_4], eax
		jmp	short loc_573
; ---------------------------------------------------------------------------

loc_54D:				; CODE XREF: icu_56::adjustConfidence(wchar_t,int)+24j
		movzx	eax, [ebp+arg_0]
		cmp	eax, 20h ; ' '
		jl	short loc_561
		movzx	eax, [ebp+arg_0]
		cmp	eax, 0FFh
		jle	short loc_56A

loc_561:				; CODE XREF: icu_56::adjustConfidence(wchar_t,int)+38j
		movzx	eax, [ebp+arg_0]
		cmp	eax, 0Ah
		jnz	short loc_573

loc_56A:				; CODE XREF: icu_56::adjustConfidence(wchar_t,int)+43j
		mov	eax, [ebp+arg_4]
		add	eax, 0Ah
		mov	[ebp+arg_4], eax

loc_573:				; CODE XREF: icu_56::adjustConfidence(wchar_t,int)+2Fj
					; icu_56::adjustConfidence(wchar_t,int)+4Cj
		cmp	[ebp+arg_4], 0
		jge	short loc_582
		mov	[ebp+arg_4], 0
		jmp	short loc_58F
; ---------------------------------------------------------------------------

loc_582:				; CODE XREF: icu_56::adjustConfidence(wchar_t,int)+5Bj
		cmp	[ebp+arg_4], 64h ; 'd'
		jle	short loc_58F
		mov	[ebp+arg_4], 64h ; 'd'

loc_58F:				; CODE XREF: icu_56::adjustConfidence(wchar_t,int)+64j
					; icu_56::adjustConfidence(wchar_t,int)+6Aj
		mov	eax, [ebp+arg_4]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?adjustConfidence@icu_56@@YAH_WH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 59Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::CharsetRecog_UTF_16_LE::~CharsetRecog_UTF_16_LE(icu_56::CharsetRecog_UTF_16_LE *__hidden this)
		public ??1CharsetRecog_UTF_16_LE@icu_56@@UAE@XZ
??1CharsetRecog_UTF_16_LE@icu_56@@UAE@XZ proc near
					; CODE XREF: icu_56::CharsetRecog_UTF_16_LE::`scalar deleting destructor'(uint)+26p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7CharsetRecog_UTF_16_LE@icu_56@@6B@ ; const icu_56::CharsetRecog_UTF_16_LE::`vftable'
		mov	ecx, [ebp+var_8] ; this
		call	??1CharsetRecog_Unicode@icu_56@@UAE@XZ ; icu_56::CharsetRecog_Unicode::~CharsetRecog_Unicode(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1CharsetRecog_UTF_16_LE@icu_56@@UAE@XZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5E4h
		dd offset ??_R4CharsetRecog_UTF_16_LE@icu_56@@6B@ ; const icu_56::CharsetRecog_UTF_16_LE::`RTTI	Complete Object	Locator'
		public ??_7CharsetRecog_UTF_16_LE@icu_56@@6B@
; const	icu_56::CharsetRecog_UTF_16_LE::`vftable'
??_7CharsetRecog_UTF_16_LE@icu_56@@6B@ dd offset ?getName@CharsetRecog_UTF_16_LE@icu_56@@UBEPBDXZ
					; DATA XREF: icu_56::CharsetRecog_UTF_16_LE::~CharsetRecog_UTF_16_LE(void)+26o
					; icu_56::CharsetRecog_UTF_16_LE::getName(void)
		dd offset ?getLanguage@CharsetRecognizer@icu_56@@UBEPBDXZ ; icu_56::CharsetRecognizer::getLanguage(void)
		dd offset ?match@CharsetRecog_UTF_16_LE@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z	; icu_56::CharsetRecog_UTF_16_LE::match(icu_56::InputText *,icu_56::CharsetMatch *)
		dd offset ??_ECharsetRecog_UTF_16_LE@icu_56@@UAEPAXI@Z ; icu_56::CharsetRecog_UTF_16_LE::`vector deleting destructor'(uint)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 5F8h
		public ??_R4CharsetRecog_UTF_16_LE@icu_56@@6B@
; const	icu_56::CharsetRecog_UTF_16_LE::`RTTI Complete Object Locator'
??_R4CharsetRecog_UTF_16_LE@icu_56@@6B@	dd 3 dup(0) ; DATA XREF: .rdata:000005E4o
		dd offset ??_R0?AVCharsetRecog_UTF_16_LE@icu_56@@@8 ; icu_56::CharsetRecog_UTF_16_LE `RTTI Type	Descriptor'
		dd offset ??_R3CharsetRecog_UTF_16_LE@icu_56@@8	; icu_56::CharsetRecog_UTF_16_LE::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 60Ch
		public ??_R0?AVCharsetRecog_UTF_16_LE@icu_56@@@8
; class	icu_56::CharsetRecog_UTF_16_LE `RTTI Type Descriptor'
??_R0?AVCharsetRecog_UTF_16_LE@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00000604o
					; .rdata$r:icu_56::CharsetRecog_UTF_16_LE::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avcharsetr_2	db '.?AVCharsetRecog_UTF_16_LE@icu_56@@',0
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 638h
		public ??_R3CharsetRecog_UTF_16_LE@icu_56@@8
; icu_56::CharsetRecog_UTF_16_LE::`RTTI	Class Hierarchy	Descriptor'
??_R3CharsetRecog_UTF_16_LE@icu_56@@8 dd 2 dup(0) ; DATA XREF: .rdata$r:00000608o
					; .rdata$r:00000674o
		dd 4
		dd offset ??_R2CharsetRecog_UTF_16_LE@icu_56@@8	; icu_56::CharsetRecog_UTF_16_LE::`RTTI	Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 648h
		public ??_R2CharsetRecog_UTF_16_LE@icu_56@@8
; icu_56::CharsetRecog_UTF_16_LE::`RTTI	Base Class Array'
??_R2CharsetRecog_UTF_16_LE@icu_56@@8 dd offset	??_R1A@?0A@EA@CharsetRecog_UTF_16_LE@icu_56@@8
					; DATA XREF: .rdata$r:00000644o
					; icu_56::CharsetRecog_UTF_16_LE::`RTTI	Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@CharsetRecog_Unicode@icu_56@@8 ; icu_56::CharsetRecog_Unicode::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@CharsetRecognizer@icu_56@@8 ; icu_56::CharsetRecognizer::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 65Ch
		public ??_R1A@?0A@EA@CharsetRecog_UTF_16_LE@icu_56@@8
; icu_56::CharsetRecog_UTF_16_LE::`RTTI	Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@CharsetRecog_UTF_16_LE@icu_56@@8 dd offset ??_R0?AVCharsetRecog_UTF_16_LE@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::CharsetRecog_UTF_16_LE::`RTTI Base Class Array'o
					; icu_56::CharsetRecog_UTF_16_LE `RTTI Type Descriptor'
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd offset ??3@YAXPAX@Z	; operator delete(void *)
		dd offset ??_R3CharsetRecog_UTF_16_LE@icu_56@@8	; icu_56::CharsetRecog_UTF_16_LE::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 678h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::CharsetRecog_UTF_16_LE::`scalar deleting destructor'(unsigned int)
		public ??_GCharsetRecog_UTF_16_LE@icu_56@@UAEPAXI@Z
??_GCharsetRecog_UTF_16_LE@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1CharsetRecog_UTF_16_LE@icu_56@@UAE@XZ ; icu_56::CharsetRecog_UTF_16_LE::~CharsetRecog_UTF_16_LE(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_6C1
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_6C1:				; CODE XREF: icu_56::CharsetRecog_UTF_16_LE::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GCharsetRecog_UTF_16_LE@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 6DCh
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	char *__thiscall icu_56::CharsetRecog_UTF_16_LE::getName(icu_56::CharsetRecog_UTF_16_LE	*__hidden this)
		public ?getName@CharsetRecog_UTF_16_LE@icu_56@@UBEPBDXZ
?getName@CharsetRecog_UTF_16_LE@icu_56@@UBEPBDXZ proc near
					; DATA XREF: .rdata:const icu_56::CharsetRecog_UTF_16_LE::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, offset ??_C@_08NBDJLNFA@UTF?916LE?$AA@ ; "UTF-16LE"
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getName@CharsetRecog_UTF_16_LE@icu_56@@UBEPBDXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 70Ch
		public ??_C@_08NBDJLNFA@UTF?916LE?$AA@
; `string'
??_C@_08NBDJLNFA@UTF?916LE?$AA@	db 'UTF-16LE',0
					; DATA XREF: icu_56::CharsetRecog_UTF_16_LE::getName(void)+23o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 718h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__thiscall icu_56::CharsetRecog_UTF_16_LE::match(icu_56::CharsetRecog_UTF_16_LE	*this, struct icu_56::InputText	*, struct icu_56::CharsetMatch *)
		public ?match@CharsetRecog_UTF_16_LE@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z
?match@CharsetRecog_UTF_16_LE@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z proc near
					; DATA XREF: .rdata:000005F0o

var_118		= dword	ptr -118h
var_50		= word ptr -50h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 118h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_118]
		mov	ecx, 46h ; 'F'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		mov	[ebp+var_14], ecx
		mov	[ebp+var_20], 0Ah
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+18h]
		mov	[ebp+var_2C], ecx
		cmp	[ebp+var_2C], 1Eh
		jle	short loc_766
		mov	[ebp+var_118], 1Eh
		jmp	short loc_76F
; ---------------------------------------------------------------------------

loc_766:				; CODE XREF: icu_56::CharsetRecog_UTF_16_LE::match(icu_56::InputText *,icu_56::CharsetMatch *)+40j
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_118], eax

loc_76F:				; CODE XREF: icu_56::CharsetRecog_UTF_16_LE::match(icu_56::InputText *,icu_56::CharsetMatch *)+4Cj
		mov	ecx, [ebp+var_118]
		mov	[ebp+var_38], ecx
		mov	[ebp+var_44], 0
		jmp	short loc_78A
; ---------------------------------------------------------------------------

loc_781:				; CODE XREF: icu_56::CharsetRecog_UTF_16_LE::match(icu_56::InputText *,icu_56::CharsetMatch *):loc_814j
		mov	eax, [ebp+var_44]
		add	eax, 2
		mov	[ebp+var_44], eax

loc_78A:				; CODE XREF: icu_56::CharsetRecog_UTF_16_LE::match(icu_56::InputText *,icu_56::CharsetMatch *)+67j
		mov	eax, [ebp+var_38]
		sub	eax, 1
		cmp	[ebp+var_44], eax
		jge	loc_819
		mov	eax, [ebp+var_14]
		add	eax, [ebp+var_44]
		movzx	ecx, byte ptr [eax]
		mov	edx, [ebp+var_14]
		add	edx, [ebp+var_44]
		movzx	eax, byte ptr [edx+1]
		shl	eax, 8
		or	ecx, eax
		mov	[ebp+var_50], cx
		cmp	[ebp+var_44], 0
		jnz	short loc_7F2
		movzx	eax, [ebp+var_50]
		cmp	eax, 0FEFFh
		jnz	short loc_7F2
		mov	[ebp+var_20], 64h ; 'd'
		cmp	[ebp+var_2C], 4
		jl	short loc_7F0
		mov	eax, [ebp+var_14]
		movzx	ecx, byte ptr [eax+2]
		test	ecx, ecx
		jnz	short loc_7F0
		mov	eax, [ebp+var_14]
		movzx	ecx, byte ptr [eax+3]
		test	ecx, ecx
		jnz	short loc_7F0
		mov	[ebp+var_20], 0

loc_7F0:				; CODE XREF: icu_56::CharsetRecog_UTF_16_LE::match(icu_56::InputText *,icu_56::CharsetMatch *)+B9j
					; icu_56::CharsetRecog_UTF_16_LE::match(icu_56::InputText *,icu_56::CharsetMatch *)+C4j ...
		jmp	short loc_819
; ---------------------------------------------------------------------------

loc_7F2:				; CODE XREF: icu_56::CharsetRecog_UTF_16_LE::match(icu_56::InputText *,icu_56::CharsetMatch *)+A1j
					; icu_56::CharsetRecog_UTF_16_LE::match(icu_56::InputText *,icu_56::CharsetMatch *)+ACj
		mov	eax, [ebp+var_20]
		push	eax
		movzx	ecx, [ebp+var_50]
		push	ecx
		call	?adjustConfidence@icu_56@@YAH_WH@Z ; icu_56::adjustConfidence(wchar_t,int)
		add	esp, 8
		mov	[ebp+var_20], eax
		cmp	[ebp+var_20], 0
		jz	short loc_812
		cmp	[ebp+var_20], 64h ; 'd'
		jnz	short loc_814

loc_812:				; CODE XREF: icu_56::CharsetRecog_UTF_16_LE::match(icu_56::InputText *,icu_56::CharsetMatch *)+F2j
		jmp	short loc_819
; ---------------------------------------------------------------------------

loc_814:				; CODE XREF: icu_56::CharsetRecog_UTF_16_LE::match(icu_56::InputText *,icu_56::CharsetMatch *)+F8j
		jmp	loc_781
; ---------------------------------------------------------------------------

loc_819:				; CODE XREF: icu_56::CharsetRecog_UTF_16_LE::match(icu_56::InputText *,icu_56::CharsetMatch *)+7Bj
					; icu_56::CharsetRecog_UTF_16_LE::match(icu_56::InputText *,icu_56::CharsetMatch *):loc_7F0j ...
		cmp	[ebp+var_38], 4
		jge	short loc_82C
		cmp	[ebp+var_20], 64h ; 'd'
		jge	short loc_82C
		mov	[ebp+var_20], 0

loc_82C:				; CODE XREF: icu_56::CharsetRecog_UTF_16_LE::match(icu_56::InputText *,icu_56::CharsetMatch *)+105j
					; icu_56::CharsetRecog_UTF_16_LE::match(icu_56::InputText *,icu_56::CharsetMatch *)+10Bj
		push	0		; char *
		push	0		; char *
		mov	eax, [ebp+var_20]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		push	ecx		; struct icu_56::CharsetRecognizer *
		mov	edx, [ebp+arg_0]
		push	edx		; struct icu_56::InputText *
		mov	ecx, [ebp+arg_4] ; this
		call	?set@CharsetMatch@icu_56@@QAEXPAVInputText@2@PBVCharsetRecognizer@2@HPBD2@Z ; icu_56::CharsetMatch::set(icu_56::InputText *,icu_56::CharsetRecognizer const *,int,char const *,char const *)
		cmp	[ebp+var_20], 0
		setnle	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 118h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?match@CharsetRecog_UTF_16_LE@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 864h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::CharsetRecog_UTF_32::~CharsetRecog_UTF_32(icu_56::CharsetRecog_UTF_32 *__hidden this)
		public ??1CharsetRecog_UTF_32@icu_56@@UAE@XZ
??1CharsetRecog_UTF_32@icu_56@@UAE@XZ proc near
					; CODE XREF: icu_56::CharsetRecog_UTF_32::`scalar deleting destructor'(uint)+26p
					; icu_56::CharsetRecog_UTF_32_BE::~CharsetRecog_UTF_32_BE(void)+2Fp ...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7CharsetRecog_UTF_32@icu_56@@6B@ ; const icu_56::CharsetRecog_UTF_32::`vftable'
		mov	ecx, [ebp+var_8] ; this
		call	??1CharsetRecog_Unicode@icu_56@@UAE@XZ ; icu_56::CharsetRecog_Unicode::~CharsetRecog_Unicode(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1CharsetRecog_UTF_32@icu_56@@UAE@XZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8ACh
		dd offset ??_R4CharsetRecog_UTF_32@icu_56@@6B@ ; const icu_56::CharsetRecog_UTF_32::`RTTI Complete Object Locator'
		public ??_7CharsetRecog_UTF_32@icu_56@@6B@
; const	icu_56::CharsetRecog_UTF_32::`vftable'
??_7CharsetRecog_UTF_32@icu_56@@6B@ dd offset __purecall
					; DATA XREF: icu_56::CharsetRecog_UTF_32::~CharsetRecog_UTF_32(void)+26o
		dd offset ?getLanguage@CharsetRecognizer@icu_56@@UBEPBDXZ ; icu_56::CharsetRecognizer::getLanguage(void)
		dd offset ?match@CharsetRecog_UTF_32@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z ; icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)
		dd offset ??_ECharsetRecog_UTF_32@icu_56@@UAEPAXI@Z ; icu_56::CharsetRecog_UTF_32::`vector deleting destructor'(uint)
		dd offset __purecall
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 8C4h
		public ??_R4CharsetRecog_UTF_32@icu_56@@6B@
; const	icu_56::CharsetRecog_UTF_32::`RTTI Complete Object Locator'
??_R4CharsetRecog_UTF_32@icu_56@@6B@ dd	3 dup(0) ; DATA	XREF: .rdata:000008ACo
		dd offset ??_R0?AVCharsetRecog_UTF_32@icu_56@@@8 ; icu_56::CharsetRecog_UTF_32 `RTTI Type Descriptor'
		dd offset ??_R3CharsetRecog_UTF_32@icu_56@@8 ; icu_56::CharsetRecog_UTF_32::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 8D8h
		public ??_R0?AVCharsetRecog_UTF_32@icu_56@@@8
; class	icu_56::CharsetRecog_UTF_32 `RTTI Type Descriptor'
??_R0?AVCharsetRecog_UTF_32@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:000008D0o
					; .rdata$r:icu_56::CharsetRecog_UTF_32::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avcharsetr_3	db '.?AVCharsetRecog_UTF_32@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 904h
		public ??_R3CharsetRecog_UTF_32@icu_56@@8
; icu_56::CharsetRecog_UTF_32::`RTTI Class Hierarchy Descriptor'
??_R3CharsetRecog_UTF_32@icu_56@@8 dd 2	dup(0) ; DATA XREF: .rdata$r:000008D4o
					; .rdata$r:00000940o
		dd 4
		dd offset ??_R2CharsetRecog_UTF_32@icu_56@@8 ; icu_56::CharsetRecog_UTF_32::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 914h
		public ??_R2CharsetRecog_UTF_32@icu_56@@8
; icu_56::CharsetRecog_UTF_32::`RTTI Base Class	Array'
??_R2CharsetRecog_UTF_32@icu_56@@8 dd offset ??_R1A@?0A@EA@CharsetRecog_UTF_32@icu_56@@8
					; DATA XREF: .rdata$r:00000910o
					; icu_56::CharsetRecog_UTF_32::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@CharsetRecog_Unicode@icu_56@@8 ; icu_56::CharsetRecog_Unicode::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@CharsetRecognizer@icu_56@@8 ; icu_56::CharsetRecognizer::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 928h
		public ??_R1A@?0A@EA@CharsetRecog_UTF_32@icu_56@@8
; icu_56::CharsetRecog_UTF_32::`RTTI Base Class	Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@CharsetRecog_UTF_32@icu_56@@8 dd offset ??_R0?AVCharsetRecog_UTF_32@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::CharsetRecog_UTF_32::`RTTI Base Class Array'o
					; .rdata$r:00000BFCo ...
					; icu_56::CharsetRecog_UTF_32 `RTTI Type Descriptor'
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd offset ??3@YAXPAX@Z	; operator delete(void *)
		dd offset ??_R3CharsetRecog_UTF_32@icu_56@@8 ; icu_56::CharsetRecog_UTF_32::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 944h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::CharsetRecog_UTF_32::`scalar deleting destructor'(unsigned int)
		public ??_GCharsetRecog_UTF_32@icu_56@@UAEPAXI@Z
??_GCharsetRecog_UTF_32@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1CharsetRecog_UTF_32@icu_56@@UAE@XZ ;	icu_56::CharsetRecog_UTF_32::~CharsetRecog_UTF_32(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_98D
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_98D:				; CODE XREF: icu_56::CharsetRecog_UTF_32::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GCharsetRecog_UTF_32@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 9A8h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__thiscall icu_56::CharsetRecog_UTF_32::match(icu_56::CharsetRecog_UTF_32 *this, struct	icu_56::InputText *, struct icu_56::CharsetMatch *)
		public ?match@CharsetRecog_UTF_32@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z
?match@CharsetRecog_UTF_32@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z proc	near
					; DATA XREF: .rdata:000008B8o
					; .rdata:00000B9Co ...

var_12C		= byte ptr -12Ch
var_68		= dword	ptr -68h
var_5C		= dword	ptr -5Ch
var_50		= dword	ptr -50h
var_41		= byte ptr -41h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 12Ch
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_12C]
		mov	ecx, 4Bh ; 'K'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+18h]
		cdq
		and	edx, 3
		add	eax, edx
		sar	eax, 2
		shl	eax, 2
		mov	[ebp+var_20], eax
		mov	[ebp+var_2C], 0
		mov	[ebp+var_38], 0
		mov	[ebp+var_41], 0
		mov	[ebp+var_50], 0
		cmp	[ebp+var_20], 0
		jle	short loc_A2F
		mov	esi, esp
		push	0
		mov	eax, [ebp+var_14]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+10h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	eax, 0FEFFh
		jnz	short loc_A2F
		mov	[ebp+var_41], 1

loc_A2F:				; CODE XREF: icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)+5Ej
					; icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)+81j
		mov	[ebp+var_5C], 0
		jmp	short loc_A41
; ---------------------------------------------------------------------------

loc_A38:				; CODE XREF: icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *):loc_A9Fj
		mov	eax, [ebp+var_5C]
		add	eax, 4
		mov	[ebp+var_5C], eax

loc_A41:				; CODE XREF: icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)+8Ej
		mov	eax, [ebp+var_5C]
		cmp	eax, [ebp+var_20]
		jge	short loc_AA1
		mov	esi, esp
		mov	eax, [ebp+var_5C]
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax+10h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_68], eax
		cmp	[ebp+var_68], 0
		jl	short loc_A8B
		cmp	[ebp+var_68], 10FFFFh
		jge	short loc_A8B
		cmp	[ebp+var_68], 0D800h
		jl	short loc_A96
		cmp	[ebp+var_68], 0DFFFh
		jg	short loc_A96

loc_A8B:				; CODE XREF: icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)+C6j
					; icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)+CFj
		mov	eax, [ebp+var_38]
		add	eax, 1
		mov	[ebp+var_38], eax
		jmp	short loc_A9F
; ---------------------------------------------------------------------------

loc_A96:				; CODE XREF: icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)+D8j
					; icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)+E1j
		mov	eax, [ebp+var_2C]
		add	eax, 1
		mov	[ebp+var_2C], eax

loc_A9F:				; CODE XREF: icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)+ECj
		jmp	short loc_A38
; ---------------------------------------------------------------------------

loc_AA1:				; CODE XREF: icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)+9Fj
		movzx	eax, [ebp+var_41]
		test	eax, eax
		jz	short loc_AB8
		cmp	[ebp+var_38], 0
		jnz	short loc_AB8
		mov	[ebp+var_50], 64h ; 'd'
		jmp	short loc_B10
; ---------------------------------------------------------------------------

loc_AB8:				; CODE XREF: icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)+FFj
					; icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)+105j
		movzx	eax, [ebp+var_41]
		test	eax, eax
		jz	short loc_AD4
		mov	eax, [ebp+var_38]
		imul	eax, 0Ah
		cmp	[ebp+var_2C], eax
		jle	short loc_AD4
		mov	[ebp+var_50], 50h ; 'P'
		jmp	short loc_B10
; ---------------------------------------------------------------------------

loc_AD4:				; CODE XREF: icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)+116j
					; icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)+121j
		cmp	[ebp+var_2C], 3
		jle	short loc_AE9
		cmp	[ebp+var_38], 0
		jnz	short loc_AE9
		mov	[ebp+var_50], 64h ; 'd'
		jmp	short loc_B10
; ---------------------------------------------------------------------------

loc_AE9:				; CODE XREF: icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)+130j
					; icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)+136j
		cmp	[ebp+var_2C], 0
		jle	short loc_AFE
		cmp	[ebp+var_38], 0
		jnz	short loc_AFE
		mov	[ebp+var_50], 50h ; 'P'
		jmp	short loc_B10
; ---------------------------------------------------------------------------

loc_AFE:				; CODE XREF: icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)+145j
					; icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)+14Bj
		mov	eax, [ebp+var_38]
		imul	eax, 0Ah
		cmp	[ebp+var_2C], eax
		jle	short loc_B10
		mov	[ebp+var_50], 19h

loc_B10:				; CODE XREF: icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)+10Ej
					; icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)+12Aj ...
		push	0		; char *
		push	0		; char *
		mov	eax, [ebp+var_50]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		push	ecx		; struct icu_56::CharsetRecognizer *
		mov	edx, [ebp+arg_0]
		push	edx		; struct icu_56::InputText *
		mov	ecx, [ebp+arg_4] ; this
		call	?set@CharsetMatch@icu_56@@QAEXPAVInputText@2@PBVCharsetRecognizer@2@HPBD2@Z ; icu_56::CharsetMatch::set(icu_56::InputText *,icu_56::CharsetRecognizer const *,int,char const *,char const *)
		cmp	[ebp+var_50], 0
		setnle	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 12Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?match@CharsetRecog_UTF_32@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0B48h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::CharsetRecog_UTF_32_BE::~CharsetRecog_UTF_32_BE(icu_56::CharsetRecog_UTF_32_BE *__hidden this)
		public ??1CharsetRecog_UTF_32_BE@icu_56@@UAE@XZ
??1CharsetRecog_UTF_32_BE@icu_56@@UAE@XZ proc near
					; CODE XREF: icu_56::CharsetRecog_UTF_32_BE::`scalar deleting destructor'(uint)+26p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7CharsetRecog_UTF_32_BE@icu_56@@6B@ ; const icu_56::CharsetRecog_UTF_32_BE::`vftable'
		mov	ecx, [ebp+var_8] ; this
		call	??1CharsetRecog_UTF_32@icu_56@@UAE@XZ ;	icu_56::CharsetRecog_UTF_32::~CharsetRecog_UTF_32(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1CharsetRecog_UTF_32_BE@icu_56@@UAE@XZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B90h
		dd offset ??_R4CharsetRecog_UTF_32_BE@icu_56@@6B@ ; const icu_56::CharsetRecog_UTF_32_BE::`RTTI	Complete Object	Locator'
		public ??_7CharsetRecog_UTF_32_BE@icu_56@@6B@
; const	icu_56::CharsetRecog_UTF_32_BE::`vftable'
??_7CharsetRecog_UTF_32_BE@icu_56@@6B@ dd offset ?getName@CharsetRecog_UTF_32_BE@icu_56@@UBEPBDXZ
					; DATA XREF: icu_56::CharsetRecog_UTF_32_BE::~CharsetRecog_UTF_32_BE(void)+26o
					; icu_56::CharsetRecog_UTF_32_BE::getName(void)
		dd offset ?getLanguage@CharsetRecognizer@icu_56@@UBEPBDXZ ; icu_56::CharsetRecognizer::getLanguage(void)
		dd offset ?match@CharsetRecog_UTF_32@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z ; icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)
		dd offset ??_ECharsetRecog_UTF_32_BE@icu_56@@UAEPAXI@Z ; icu_56::CharsetRecog_UTF_32_BE::`vector deleting destructor'(uint)
		dd offset ?getChar@CharsetRecog_UTF_32_BE@icu_56@@MBEHPBEH@Z ; icu_56::CharsetRecog_UTF_32_BE::getChar(uchar const *,int)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0BA8h
		public ??_R4CharsetRecog_UTF_32_BE@icu_56@@6B@
; const	icu_56::CharsetRecog_UTF_32_BE::`RTTI Complete Object Locator'
??_R4CharsetRecog_UTF_32_BE@icu_56@@6B@	dd 3 dup(0) ; DATA XREF: .rdata:00000B90o
		dd offset ??_R0?AVCharsetRecog_UTF_32_BE@icu_56@@@8 ; icu_56::CharsetRecog_UTF_32_BE `RTTI Type	Descriptor'
		dd offset ??_R3CharsetRecog_UTF_32_BE@icu_56@@8	; icu_56::CharsetRecog_UTF_32_BE::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 0BBCh
		public ??_R0?AVCharsetRecog_UTF_32_BE@icu_56@@@8
; class	icu_56::CharsetRecog_UTF_32_BE `RTTI Type Descriptor'
??_R0?AVCharsetRecog_UTF_32_BE@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00000BB4o
					; .rdata$r:icu_56::CharsetRecog_UTF_32_BE::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avcharsetr_4	db '.?AVCharsetRecog_UTF_32_BE@icu_56@@',0
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0BE8h
		public ??_R3CharsetRecog_UTF_32_BE@icu_56@@8
; icu_56::CharsetRecog_UTF_32_BE::`RTTI	Class Hierarchy	Descriptor'
??_R3CharsetRecog_UTF_32_BE@icu_56@@8 dd 2 dup(0) ; DATA XREF: .rdata$r:00000BB8o
					; .rdata$r:00000C28o
		dd 5
		dd offset ??_R2CharsetRecog_UTF_32_BE@icu_56@@8	; icu_56::CharsetRecog_UTF_32_BE::`RTTI	Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0BF8h
		public ??_R2CharsetRecog_UTF_32_BE@icu_56@@8
; icu_56::CharsetRecog_UTF_32_BE::`RTTI	Base Class Array'
??_R2CharsetRecog_UTF_32_BE@icu_56@@8 dd offset	??_R1A@?0A@EA@CharsetRecog_UTF_32_BE@icu_56@@8
					; DATA XREF: .rdata$r:00000BF4o
					; icu_56::CharsetRecog_UTF_32_BE::`RTTI	Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@CharsetRecog_UTF_32@icu_56@@8 ;	icu_56::CharsetRecog_UTF_32::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@CharsetRecog_Unicode@icu_56@@8 ; icu_56::CharsetRecog_Unicode::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@CharsetRecognizer@icu_56@@8 ; icu_56::CharsetRecognizer::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0C10h
		public ??_R1A@?0A@EA@CharsetRecog_UTF_32_BE@icu_56@@8
; icu_56::CharsetRecog_UTF_32_BE::`RTTI	Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@CharsetRecog_UTF_32_BE@icu_56@@8 dd offset ??_R0?AVCharsetRecog_UTF_32_BE@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::CharsetRecog_UTF_32_BE::`RTTI Base Class Array'o
					; icu_56::CharsetRecog_UTF_32_BE `RTTI Type Descriptor'
		dd 4, 0
		dd 0FFFFFFFFh, 0
		dd offset ??3@YAXPAX@Z	; operator delete(void *)
		dd offset ??_R3CharsetRecog_UTF_32_BE@icu_56@@8	; icu_56::CharsetRecog_UTF_32_BE::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C2Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::CharsetRecog_UTF_32_BE::`scalar deleting destructor'(unsigned int)
		public ??_GCharsetRecog_UTF_32_BE@icu_56@@UAEPAXI@Z
??_GCharsetRecog_UTF_32_BE@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1CharsetRecog_UTF_32_BE@icu_56@@UAE@XZ ; icu_56::CharsetRecog_UTF_32_BE::~CharsetRecog_UTF_32_BE(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_C75
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_C75:				; CODE XREF: icu_56::CharsetRecog_UTF_32_BE::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GCharsetRecog_UTF_32_BE@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C90h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	char *__thiscall icu_56::CharsetRecog_UTF_32_BE::getName(icu_56::CharsetRecog_UTF_32_BE	*__hidden this)
		public ?getName@CharsetRecog_UTF_32_BE@icu_56@@UBEPBDXZ
?getName@CharsetRecog_UTF_32_BE@icu_56@@UBEPBDXZ proc near
					; DATA XREF: .rdata:const icu_56::CharsetRecog_UTF_32_BE::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, offset ??_C@_08COAFFEGN@UTF?932BE?$AA@ ; "UTF-32BE"
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getName@CharsetRecog_UTF_32_BE@icu_56@@UBEPBDXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CC0h
		public ??_C@_08COAFFEGN@UTF?932BE?$AA@
; `string'
??_C@_08COAFFEGN@UTF?932BE?$AA@	db 'UTF-32BE',0
					; DATA XREF: icu_56::CharsetRecog_UTF_32_BE::getName(void)+23o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0CCCh
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::CharsetRecog_UTF_32_BE::getChar(icu_56::CharsetRecog_UTF_32_BE	*this, const unsigned __int8 *,	int)
		public ?getChar@CharsetRecog_UTF_32_BE@icu_56@@MBEHPBEH@Z
?getChar@CharsetRecog_UTF_32_BE@icu_56@@MBEHPBEH@Z proc	near ; DATA XREF: .rdata:00000BA4o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+arg_4]
		movzx	eax, byte ptr [eax]
		shl	eax, 18h
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+arg_4]
		movzx	edx, byte ptr [ecx+1]
		shl	edx, 10h
		or	eax, edx
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+arg_4]
		movzx	edx, byte ptr [ecx+2]
		shl	edx, 8
		or	eax, edx
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+arg_4]
		movzx	edx, byte ptr [ecx+3]
		or	eax, edx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	8
?getChar@CharsetRecog_UTF_32_BE@icu_56@@MBEHPBEH@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0D30h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::CharsetRecog_UTF_32_LE::~CharsetRecog_UTF_32_LE(icu_56::CharsetRecog_UTF_32_LE *__hidden this)
		public ??1CharsetRecog_UTF_32_LE@icu_56@@UAE@XZ
??1CharsetRecog_UTF_32_LE@icu_56@@UAE@XZ proc near
					; CODE XREF: icu_56::CharsetRecog_UTF_32_LE::`scalar deleting destructor'(uint)+26p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7CharsetRecog_UTF_32_LE@icu_56@@6B@ ; const icu_56::CharsetRecog_UTF_32_LE::`vftable'
		mov	ecx, [ebp+var_8] ; this
		call	??1CharsetRecog_UTF_32@icu_56@@UAE@XZ ;	icu_56::CharsetRecog_UTF_32::~CharsetRecog_UTF_32(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1CharsetRecog_UTF_32_LE@icu_56@@UAE@XZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D78h
		dd offset ??_R4CharsetRecog_UTF_32_LE@icu_56@@6B@ ; const icu_56::CharsetRecog_UTF_32_LE::`RTTI	Complete Object	Locator'
		public ??_7CharsetRecog_UTF_32_LE@icu_56@@6B@
; const	icu_56::CharsetRecog_UTF_32_LE::`vftable'
??_7CharsetRecog_UTF_32_LE@icu_56@@6B@ dd offset ?getName@CharsetRecog_UTF_32_LE@icu_56@@UBEPBDXZ
					; DATA XREF: icu_56::CharsetRecog_UTF_32_LE::~CharsetRecog_UTF_32_LE(void)+26o
					; icu_56::CharsetRecog_UTF_32_LE::getName(void)
		dd offset ?getLanguage@CharsetRecognizer@icu_56@@UBEPBDXZ ; icu_56::CharsetRecognizer::getLanguage(void)
		dd offset ?match@CharsetRecog_UTF_32@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z ; icu_56::CharsetRecog_UTF_32::match(icu_56::InputText *,icu_56::CharsetMatch *)
		dd offset ??_ECharsetRecog_UTF_32_LE@icu_56@@UAEPAXI@Z ; icu_56::CharsetRecog_UTF_32_LE::`vector deleting destructor'(uint)
		dd offset ?getChar@CharsetRecog_UTF_32_LE@icu_56@@MBEHPBEH@Z ; icu_56::CharsetRecog_UTF_32_LE::getChar(uchar const *,int)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0D90h
		public ??_R4CharsetRecog_UTF_32_LE@icu_56@@6B@
; const	icu_56::CharsetRecog_UTF_32_LE::`RTTI Complete Object Locator'
??_R4CharsetRecog_UTF_32_LE@icu_56@@6B@	dd 3 dup(0) ; DATA XREF: .rdata:00000D78o
		dd offset ??_R0?AVCharsetRecog_UTF_32_LE@icu_56@@@8 ; icu_56::CharsetRecog_UTF_32_LE `RTTI Type	Descriptor'
		dd offset ??_R3CharsetRecog_UTF_32_LE@icu_56@@8	; icu_56::CharsetRecog_UTF_32_LE::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 0DA4h
		public ??_R0?AVCharsetRecog_UTF_32_LE@icu_56@@@8
; class	icu_56::CharsetRecog_UTF_32_LE `RTTI Type Descriptor'
??_R0?AVCharsetRecog_UTF_32_LE@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00000D9Co
					; .rdata$r:icu_56::CharsetRecog_UTF_32_LE::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avcharsetr_5	db '.?AVCharsetRecog_UTF_32_LE@icu_56@@',0
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0DD0h
		public ??_R3CharsetRecog_UTF_32_LE@icu_56@@8
; icu_56::CharsetRecog_UTF_32_LE::`RTTI	Class Hierarchy	Descriptor'
??_R3CharsetRecog_UTF_32_LE@icu_56@@8 dd 2 dup(0) ; DATA XREF: .rdata$r:00000DA0o
					; .rdata$r:00000E10o
		dd 5
		dd offset ??_R2CharsetRecog_UTF_32_LE@icu_56@@8	; icu_56::CharsetRecog_UTF_32_LE::`RTTI	Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0DE0h
		public ??_R2CharsetRecog_UTF_32_LE@icu_56@@8
; icu_56::CharsetRecog_UTF_32_LE::`RTTI	Base Class Array'
??_R2CharsetRecog_UTF_32_LE@icu_56@@8 dd offset	??_R1A@?0A@EA@CharsetRecog_UTF_32_LE@icu_56@@8
					; DATA XREF: .rdata$r:00000DDCo
					; icu_56::CharsetRecog_UTF_32_LE::`RTTI	Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@CharsetRecog_UTF_32@icu_56@@8 ;	icu_56::CharsetRecog_UTF_32::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@CharsetRecog_Unicode@icu_56@@8 ; icu_56::CharsetRecog_Unicode::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@CharsetRecognizer@icu_56@@8 ; icu_56::CharsetRecognizer::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0DF8h
		public ??_R1A@?0A@EA@CharsetRecog_UTF_32_LE@icu_56@@8
; icu_56::CharsetRecog_UTF_32_LE::`RTTI	Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@CharsetRecog_UTF_32_LE@icu_56@@8 dd offset ??_R0?AVCharsetRecog_UTF_32_LE@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::CharsetRecog_UTF_32_LE::`RTTI Base Class Array'o
					; icu_56::CharsetRecog_UTF_32_LE `RTTI Type Descriptor'
		dd 4, 0
		dd 0FFFFFFFFh, 0
		dd offset ??3@YAXPAX@Z	; operator delete(void *)
		dd offset ??_R3CharsetRecog_UTF_32_LE@icu_56@@8	; icu_56::CharsetRecog_UTF_32_LE::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0E14h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::CharsetRecog_UTF_32_LE::`scalar deleting destructor'(unsigned int)
		public ??_GCharsetRecog_UTF_32_LE@icu_56@@UAEPAXI@Z
??_GCharsetRecog_UTF_32_LE@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1CharsetRecog_UTF_32_LE@icu_56@@UAE@XZ ; icu_56::CharsetRecog_UTF_32_LE::~CharsetRecog_UTF_32_LE(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_E5D
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_E5D:				; CODE XREF: icu_56::CharsetRecog_UTF_32_LE::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GCharsetRecog_UTF_32_LE@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0E78h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	char *__thiscall icu_56::CharsetRecog_UTF_32_LE::getName(icu_56::CharsetRecog_UTF_32_LE	*__hidden this)
		public ?getName@CharsetRecog_UTF_32_LE@icu_56@@UBEPBDXZ
?getName@CharsetRecog_UTF_32_LE@icu_56@@UBEPBDXZ proc near
					; DATA XREF: .rdata:const icu_56::CharsetRecog_UTF_32_LE::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, offset ??_C@_08CEJLHJGH@UTF?932LE?$AA@ ; "UTF-32LE"
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getName@CharsetRecog_UTF_32_LE@icu_56@@UBEPBDXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0EA8h
		public ??_C@_08CEJLHJGH@UTF?932LE?$AA@
; `string'
??_C@_08CEJLHJGH@UTF?932LE?$AA@	db 'UTF-32LE',0
					; DATA XREF: icu_56::CharsetRecog_UTF_32_LE::getName(void)+23o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0EB4h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::CharsetRecog_UTF_32_LE::getChar(icu_56::CharsetRecog_UTF_32_LE	*this, const unsigned __int8 *,	int)
		public ?getChar@CharsetRecog_UTF_32_LE@icu_56@@MBEHPBEH@Z
?getChar@CharsetRecog_UTF_32_LE@icu_56@@MBEHPBEH@Z proc	near ; DATA XREF: .rdata:00000D8Co

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+arg_4]
		movzx	eax, byte ptr [eax+3]
		shl	eax, 18h
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+arg_4]
		movzx	edx, byte ptr [ecx+2]
		shl	edx, 10h
		or	eax, edx
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+arg_4]
		movzx	edx, byte ptr [ecx+1]
		shl	edx, 8
		or	eax, edx
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+arg_4]
		movzx	edx, byte ptr [ecx]
		or	eax, edx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	8
?getChar@CharsetRecog_UTF_32_LE@icu_56@@MBEHPBEH@Z endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; _DWORD __thiscall icu_56::CharsetRecognizer::~CharsetRecognizer(icu_56::CharsetRecognizer *__hidden this)
		extrn ??1CharsetRecognizer@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::CharsetRecog_Unicode::~CharsetRecog_Unicode(void)+2Fp
		extrn __RTC_CheckEsp:near
					; CODE XREF: icu_56::CharsetRecog_Unicode::~CharsetRecog_Unicode(void)+3Fp
					; icu_56::CharsetRecog_Unicode::`scalar	deleting destructor'(uint)+44p ...
; const	type_info::`vftable'
		extrn ??_7type_info@@6B@:near
					; DATA XREF: .data:icu_56::CharsetRecog_Unicode	`RTTI Type Descriptor'o
					; .data:icu_56::CharsetRecognizer `RTTI	Type Descriptor'o ...
		extrn __purecall:near	; DATA XREF: .rdata:const icu_56::CharsetRecog_Unicode::`vftable'o
					; .rdata:000000C8o ...
; public: virtual char const * __thiscall icu_56::CharsetRecognizer::getLanguage(void)const
		extrn ?getLanguage@CharsetRecognizer@icu_56@@UBEPBDXZ:near
					; DATA XREF: .rdata:000000C4o
					; .rdata:000002D0o ...
; public: virtual void * __thiscall icu_56::CharsetRecog_Unicode::`scalar deleting destructor'(unsigned int)
		extrn ??_GCharsetRecog_Unicode@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::CharsetRecog_Unicode::`vector deleting destructor'(unsigned int)
		extrn ??_ECharsetRecog_Unicode@icu_56@@UAEPAXI@Z:near ;	weak
					; DATA XREF: .rdata:000000CCo
; void __cdecl icu_56::UMemory::operator delete(void *)
		extrn __imp_??3UMemory@icu_56@@SAXPAX@Z:near
					; CODE XREF: icu_56::CharsetRecog_Unicode::`scalar deleting destructor'(uint)+39p
					; icu_56::CharsetRecog_UTF_16_BE::`scalar deleting destructor'(uint)+39p ...
; public: virtual void * __thiscall icu_56::CharsetRecog_UTF_16_BE::`scalar deleting destructor'(unsigned int)
		extrn ??_GCharsetRecog_UTF_16_BE@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::CharsetRecog_UTF_16_BE::`vector deleting destructor'(unsigned int)
		extrn ??_ECharsetRecog_UTF_16_BE@icu_56@@UAEPAXI@Z:near	; weak
					; DATA XREF: .rdata:000002D8o
; void __thiscall icu_56::CharsetMatch::set(icu_56::CharsetMatch *__hidden this, struct	icu_56::InputText *, const struct icu_56::CharsetRecognizer *, int, const char *, const	char *)
		extrn ?set@CharsetMatch@icu_56@@QAEXPAVInputText@2@PBVCharsetRecognizer@2@HPBD2@Z:near
					; CODE XREF: icu_56::CharsetRecog_UTF_16_BE::match(icu_56::InputText *,icu_56::CharsetMatch *)+FDp
					; icu_56::CharsetRecog_UTF_16_LE::match(icu_56::InputText *,icu_56::CharsetMatch *)+127p ...
; public: virtual void * __thiscall icu_56::CharsetRecog_UTF_16_LE::`scalar deleting destructor'(unsigned int)
		extrn ??_GCharsetRecog_UTF_16_LE@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::CharsetRecog_UTF_16_LE::`vector deleting destructor'(unsigned int)
		extrn ??_ECharsetRecog_UTF_16_LE@icu_56@@UAEPAXI@Z:near	; weak
					; DATA XREF: .rdata:000005F4o
; public: virtual void * __thiscall icu_56::CharsetRecog_UTF_32::`scalar deleting destructor'(unsigned int)
		extrn ??_GCharsetRecog_UTF_32@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::CharsetRecog_UTF_32::`vector deleting destructor'(unsigned int)
		extrn ??_ECharsetRecog_UTF_32@icu_56@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:000008BCo
; public: virtual void * __thiscall icu_56::CharsetRecog_UTF_32_BE::`scalar deleting destructor'(unsigned int)
		extrn ??_GCharsetRecog_UTF_32_BE@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::CharsetRecog_UTF_32_BE::`vector deleting destructor'(unsigned int)
		extrn ??_ECharsetRecog_UTF_32_BE@icu_56@@UAEPAXI@Z:near	; weak
					; DATA XREF: .rdata:00000BA0o
; public: virtual void * __thiscall icu_56::CharsetRecog_UTF_32_LE::`scalar deleting destructor'(unsigned int)
		extrn ??_GCharsetRecog_UTF_32_LE@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::CharsetRecog_UTF_32_LE::`vector deleting destructor'(unsigned int)
		extrn ??_ECharsetRecog_UTF_32_LE@icu_56@@UAEPAXI@Z:near	; weak
					; DATA XREF: .rdata:00000D88o


		end
