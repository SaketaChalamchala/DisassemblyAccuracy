;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	F250AE362DEC662629890369508858D7
; Input	CRC32 :	24E61248

; File Name   :	D:\compspace\objfiles\firefox\i18n\rbt_rule.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		public ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
; public: static bool const std::tr1::integral_constant<bool, 0>::value
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	db 0
; struct icu_56::UnicodeString unk_1
unk_1		db    ?	;		; DATA XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+2FCo
		db    ?	;
		db    ?	;
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 4
		public ?value@?$integral_constant@_N$00@tr1@std@@2_NB
; public: static bool const std::tr1::integral_constant<bool, 1>::value
?value@?$integral_constant@_N$00@tr1@std@@2_NB db 1
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8
		public ?value@?$integral_constant@I$0A@@tr1@std@@2IB
; public: static unsigned int const std::tr1::integral_constant<unsigned int, 0>::value
?value@?$integral_constant@I$0A@@tr1@std@@2IB dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0Ch
		public ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
; public: static int const std::_Arithmetic_traits<bool>::_Rank
?_Rank@?$_Arithmetic_traits@_N@std@@2HB	dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10h
		public ?_Rank@?$_Arithmetic_traits@D@std@@2HB
; public: static int const std::_Arithmetic_traits<char>::_Rank
?_Rank@?$_Arithmetic_traits@D@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14h
		public ?_Rank@?$_Arithmetic_traits@C@std@@2HB
; public: static int const std::_Arithmetic_traits<signed char>::_Rank
?_Rank@?$_Arithmetic_traits@C@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18h
		public ?_Rank@?$_Arithmetic_traits@E@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned char>::_Rank
?_Rank@?$_Arithmetic_traits@E@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1Ch
		public ?_Rank@?$_Arithmetic_traits@F@std@@2HB
; public: static int const std::_Arithmetic_traits<short>::_Rank
?_Rank@?$_Arithmetic_traits@F@std@@2HB dd 3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 20h
		public ?_Rank@?$_Arithmetic_traits@G@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned short>::_Rank
?_Rank@?$_Arithmetic_traits@G@std@@2HB dd 3
					; DATA XREF: .rdata:int	const std::_Locbase<int>::messageso
					; .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::showposo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 24h
		public ?_Rank@?$_Arithmetic_traits@H@std@@2HB
; public: static int const std::_Arithmetic_traits<int>::_Rank
?_Rank@?$_Arithmetic_traits@H@std@@2HB dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 28h
		public ?_Rank@?$_Arithmetic_traits@I@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned int>::_Rank
?_Rank@?$_Arithmetic_traits@I@std@@2HB dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2Ch
		public ?_Rank@?$_Arithmetic_traits@J@std@@2HB
; public: static int const std::_Arithmetic_traits<long>::_Rank
?_Rank@?$_Arithmetic_traits@J@std@@2HB dd 5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 30h
		public ?_Rank@?$_Arithmetic_traits@K@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned long>::_Rank
?_Rank@?$_Arithmetic_traits@K@std@@2HB dd 5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 34h
		public ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
; public: static int const std::_Arithmetic_traits<__int64>::_Rank
?_Rank@?$_Arithmetic_traits@_J@std@@2HB	dd 6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 38h
		public ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned __int64>::_Rank
?_Rank@?$_Arithmetic_traits@_K@std@@2HB	dd 6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3Ch
		public ?_Rank@?$_Arithmetic_traits@M@std@@2HB
; public: static int const std::_Arithmetic_traits<float>::_Rank
?_Rank@?$_Arithmetic_traits@M@std@@2HB dd 7
					; DATA XREF: .rdata:int	const std::_Locbase<int>::allo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 40h
		public ?_Rank@?$_Arithmetic_traits@N@std@@2HB
; public: static int const std::_Arithmetic_traits<double>::_Rank
?_Rank@?$_Arithmetic_traits@N@std@@2HB dd 8
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::lefto
					; .rdata:std::_Iosb<int>::_Openmode const std::_Iosb<int>::_Nocreateo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 44h
		public ?_Rank@?$_Arithmetic_traits@O@std@@2HB
; public: static int const std::_Arithmetic_traits<long	double>::_Rank
?_Rank@?$_Arithmetic_traits@O@std@@2HB dd 9
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 48h
		public ?collate@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::collate
?collate@?$_Locbase@H@std@@2HB dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4Ch
		public ?ctype@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::ctype
?ctype@?$_Locbase@H@std@@2HB dd	2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 50h
		public ?monetary@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::monetary
?monetary@?$_Locbase@H@std@@2HB	dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 54h
		public ?numeric@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::numeric
?numeric@?$_Locbase@H@std@@2HB dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 58h
		public ?time@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::time
?time@?$_Locbase@H@std@@2HB dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5Ch
		public ?messages@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::messages
?messages@?$_Locbase@H@std@@2HB	dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 60h
		public ?all@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::all
?all@?$_Locbase@H@std@@2HB dd offset ?_Rank@?$_Arithmetic_traits@M@std@@2HB+3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 64h
		public ?none@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::none
?none@?$_Locbase@H@std@@2HB dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 68h
		public ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::skipws
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6Ch
		public ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::unitbuf
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 70h
		public ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::uppercase
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 74h
		public ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showbase
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 78h
		public ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showpoint
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7Ch
		public ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showpos
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 80h
		public ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::left
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::righto
					; .rdata:std::_Iosb<int>::_Openmode const std::_Iosb<int>::_Noreplaceo
_rdata		ends			; int const std::_Arithmetic_traits<double>::_Rank

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 84h
		public ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::right
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B	dd offset ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B ; std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::left
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 88h
		public ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::internal
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ??2@YAPAXI@Z ; operator new(uint)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8Ch
		public ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::dec
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	dword_200
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 90h
		public ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::oct
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_3FE+2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 94h
		public ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::hex
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_7FE+2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 98h
		public ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::scientific
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd	offset loc_1000
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9Ch
		public ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::fixed
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B	dd 2000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A0h
		public ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::hexfloat
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 3000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A4h
		public ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::boolalpha
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 4000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A8h
		public ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::_Stdio
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 8000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ACh
		public ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::adjustfield
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	??_R4UnicodeReplacer@icu_56@@6B@ ; const icu_56::UnicodeReplacer::`RTTI	Complete Object	Locator'
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B0h
		public ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::basefield
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset loc_E00
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B4h
		public ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::floatfield
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd	3000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B8h
		public ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::goodbit
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BCh
		public ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::eofbit
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B	dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C0h
		public ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::failbit
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C4h
		public ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::badbit
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B	dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C8h
		public ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::_Hardfail
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CCh
		public ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::in
?in@?$_Iosb@H@std@@2W4_Openmode@12@B dd	1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D0h
		public ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::out
?out@?$_Iosb@H@std@@2W4_Openmode@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D4h
		public ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::ate
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D8h
		public ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::app
?app@?$_Iosb@H@std@@2W4_Openmode@12@B dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0DCh
		public ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::trunc
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B	dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E0h
		public ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::_Nocreate
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E4h
		public ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::_Noreplace
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B dd	offset ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B ;	std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::left
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E8h
		public ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::binary
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int	const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ECh
		public ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::beg
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F0h
		public ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::cur
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F4h
		public ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::end
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F8h
; wchar_t FORWARD_OP
_FORWARD_OP:				; DATA XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+266o
		unicode	0, < >
		dw 3Eh
		unicode	0, < >,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 100h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int)
		public ??2@YAPAXI@Z
??2@YAPAXI@Z	proc near		; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::internalo

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??2@YAPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 138h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 13Ch
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 140h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX@Z
??3@YAXPAX@Z	proc near		; CODE XREF: icu_56::UnicodeReplacer::`scalar deleting destructor'(uint)+37p
					; icu_56::UnicodeReplacer::`vector deleting destructor'(uint)+75p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??3@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 174h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::UnicodeReplacer::UnicodeReplacer(icu_56::UnicodeReplacer *__hidden this)
		public ??0UnicodeReplacer@icu_56@@QAE@XZ
??0UnicodeReplacer@icu_56@@QAE@XZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7UnicodeReplacer@icu_56@@6B@	; const	icu_56::UnicodeReplacer::`vftable'
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??0UnicodeReplacer@icu_56@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1ACh
		dd offset ??_R4UnicodeReplacer@icu_56@@6B@ ; const icu_56::UnicodeReplacer::`RTTI Complete Object Locator'
;
; Exported entry
;
		public ??_7UnicodeReplacer@icu_56@@6B@
; const	icu_56::UnicodeReplacer::`vftable'
??_7UnicodeReplacer@icu_56@@6B@	dd offset ??_EUnicodeReplacer@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::UnicodeReplacer::UnicodeReplacer(void)+26o
					; icu_56::UnicodeReplacer::UnicodeReplacer(icu_56::UnicodeReplacer const &)+26o
					; icu_56::UnicodeReplacer::`vector deleting destructor'(uint)
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1C0h
		public ??_R4UnicodeReplacer@icu_56@@6B@
; const	icu_56::UnicodeReplacer::`RTTI Complete	Object Locator'
??_R4UnicodeReplacer@icu_56@@6B@ dd 3 dup(0)
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::adjustfieldo
					; .rdata:000001ACo
		dd offset ??_R0?AVUnicodeReplacer@icu_56@@@8 ; icu_56::UnicodeReplacer `RTTI Type Descriptor'
		dd offset ??_R3UnicodeReplacer@icu_56@@8 ; icu_56::UnicodeReplacer::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 1D4h
		public ??_R0?AVUnicodeReplacer@icu_56@@@8
; class	icu_56::UnicodeReplacer	`RTTI Type Descriptor'
??_R0?AVUnicodeReplacer@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:000001CCo
					; .rdata$r:icu_56::UnicodeReplacer::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avunicoderep	db '.?AVUnicodeReplacer@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1FCh
		public ??_R3UnicodeReplacer@icu_56@@8
; icu_56::UnicodeReplacer::`RTTI Class Hierarchy Descriptor'
??_R3UnicodeReplacer@icu_56@@8 dd 0	; DATA XREF: .rdata$r:000001D0o
					; .rdata$r:0000022Co
dword_200	dd 0			; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::deco
		dd 1
		dd offset ??_R2UnicodeReplacer@icu_56@@8 ; icu_56::UnicodeReplacer::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 20Ch
		public ??_R2UnicodeReplacer@icu_56@@8
; icu_56::UnicodeReplacer::`RTTI Base Class Array'
??_R2UnicodeReplacer@icu_56@@8 dd offset ??_R1A@?0A@EA@UnicodeReplacer@icu_56@@8
					; DATA XREF: .rdata$r:00000208o
					; icu_56::UnicodeReplacer::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 214h
		public ??_R1A@?0A@EA@UnicodeReplacer@icu_56@@8
; icu_56::UnicodeReplacer::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UnicodeReplacer@icu_56@@8	dd offset ??_R0?AVUnicodeReplacer@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UnicodeReplacer::`RTTI Base Class	Array'o
					; icu_56::UnicodeReplacer `RTTI	Type Descriptor'
		align 10h
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UnicodeReplacer@icu_56@@8 ; icu_56::UnicodeReplacer::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 230h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::UnicodeReplacer::UnicodeReplacer(icu_56::UnicodeReplacer *this, const struct icu_56::UnicodeReplacer *)
		public ??0UnicodeReplacer@icu_56@@QAE@ABV01@@Z
??0UnicodeReplacer@icu_56@@QAE@ABV01@@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7UnicodeReplacer@icu_56@@6B@	; const	icu_56::UnicodeReplacer::`vftable'
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??0UnicodeReplacer@icu_56@@QAE@ABV01@@Z	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 268h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::UnicodeReplacer	& __thiscall icu_56::UnicodeReplacer::operator=(class icu_56::UnicodeReplacer const &)
		public ??4UnicodeReplacer@icu_56@@QAEAAV01@ABV01@@Z
??4UnicodeReplacer@icu_56@@QAEAAV01@ABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??4UnicodeReplacer@icu_56@@QAEAAV01@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 298h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::UnicodeReplacer::`scalar deleting destructor'(unsigned int)
		public ??_GUnicodeReplacer@icu_56@@UAEPAXI@Z
??_GUnicodeReplacer@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1UnicodeReplacer@icu_56@@UAE@XZ ; icu_56::UnicodeReplacer::~UnicodeReplacer(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_2D7
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_2D7:				; CODE XREF: icu_56::UnicodeReplacer::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GUnicodeReplacer@icu_56@@UAEPAXI@Z endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2F0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::UnicodeReplacer::`vector deleting destructor'(unsigned int)
		public ??_EUnicodeReplacer@icu_56@@UAEPAXI@Z
??_EUnicodeReplacer@icu_56@@UAEPAXI@Z proc near
					; DATA XREF: .rdata:const icu_56::UnicodeReplacer::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		and	eax, 2
		jz	short loc_351
		push	offset ??1UnicodeReplacer@icu_56@@UAE@XZ ; icu_56::UnicodeReplacer::~UnicodeReplacer(void)
		mov	eax, [ebp+var_8]
		mov	ecx, [eax-4]
		push	ecx
		push	4
		mov	edx, [ebp+var_8]
		push	edx
		call	??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_349
		mov	eax, [ebp+var_8]
		sub	eax, 4
		push	eax		; void *
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		add	esp, 4

loc_349:				; CODE XREF: icu_56::UnicodeReplacer::`vector deleting destructor'(uint)+48j
		mov	eax, [ebp+var_8]
		sub	eax, 4
		jmp	short loc_370
; ---------------------------------------------------------------------------

loc_351:				; CODE XREF: icu_56::UnicodeReplacer::`vector deleting destructor'(uint)+29j
		mov	ecx, [ebp+var_8] ; this
		call	??1UnicodeReplacer@icu_56@@UAE@XZ ; icu_56::UnicodeReplacer::~UnicodeReplacer(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_36D
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_36D:				; CODE XREF: icu_56::UnicodeReplacer::`vector deleting destructor'(uint)+6Fj
		mov	eax, [ebp+var_8]

loc_370:				; CODE XREF: icu_56::UnicodeReplacer::`vector deleting destructor'(uint)+5Fj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_EUnicodeReplacer@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 388h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete[](void *)
		public ??_V@YAXPAX@Z
??_V@YAXPAX@Z	proc near		; CODE XREF: icu_56::UnicodeReplacer::`vector deleting destructor'(uint)+51p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??_V@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3BCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::TransliterationRule::TransliterationRule(icu_56::TransliterationRule *__hidden this, const struct icu_56::UnicodeString *, int, int, const struct icu_56::UnicodeString *, int, int, struct	icu_56::UnicodeFunctor **, int,	signed __int8, signed __int8, const struct icu_56::TransliterationRuleData *, enum UErrorCode *)
		public ??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z
??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z proc near

var_148		= dword	ptr -148h
var_140		= dword	ptr -140h
var_134		= dword	ptr -134h
var_128		= dword	ptr -128h
var_11C		= dword	ptr -11Ch
var_110		= dword	ptr -110h
var_104		= dword	ptr -104h
var_F8		= dword	ptr -0F8h
var_EC		= dword	ptr -0ECh
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h
arg_20		= byte ptr  28h
arg_24		= byte ptr  2Ch
arg_28		= dword	ptr  30h
arg_2C		= dword	ptr  34h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 13Ch
		push	ebx
		push	esi
		push	edi		; struct icu_56::TransliterationRuleData *
		push	ecx
		lea	edi, [ebp+var_148]
		mov	ecx, 4Fh ; 'O'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax		; int
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx

loc_3FE:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::octo
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7TransliterationRule@icu_56@@6B@ ; const icu_56::TransliterationRule::`vftable'
		mov	ecx, [ebp+var_14]
		add	ecx, 14h	; this
		mov	esi, esp
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@XZ ; icu_56::UnicodeString::UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax+54h], 0
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_28]
		mov	[eax+68h], ecx
		mov	eax, [ebp+arg_2C]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_450
		jmp	loc_858
; ---------------------------------------------------------------------------

loc_450:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+8Dj
		cmp	[ebp+arg_4], 0
		jge	short loc_462
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax+5Ch], 0
		jmp	short loc_490
; ---------------------------------------------------------------------------

loc_462:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+98j
		mov	esi, esp
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	[ebp+arg_4], eax
		jle	short loc_487
		mov	eax, [ebp+arg_2C]
		mov	dword ptr [eax], 1
		jmp	loc_858
; ---------------------------------------------------------------------------

loc_487:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+BBj
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_4]
		mov	[eax+5Ch], ecx

loc_490:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+A4j
		cmp	[ebp+arg_8], 0
		jge	short loc_4B6
		mov	esi, esp
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		sub	eax, [ecx+5Ch]
		mov	edx, [ebp+var_14]
		mov	[edx+60h], eax
		jmp	short loc_4F5
; ---------------------------------------------------------------------------

loc_4B6:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+D8j
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_8]
		cmp	ecx, [eax+5Ch]
		jl	short loc_4D8
		mov	esi, esp
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	[ebp+arg_8], eax
		jle	short loc_4E6

loc_4D8:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+103j
		mov	eax, [ebp+arg_2C]
		mov	dword ptr [eax], 1
		jmp	loc_858
; ---------------------------------------------------------------------------

loc_4E6:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+11Aj
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_8]
		sub	ecx, [eax+5Ch]
		mov	edx, [ebp+var_14]
		mov	[edx+60h], ecx

loc_4F5:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+F8j
		cmp	[ebp+arg_10], 0
		jge	short loc_512
		mov	esi, esp
		mov	ecx, [ebp+arg_C] ; this
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+arg_10], eax
		jmp	short loc_537
; ---------------------------------------------------------------------------

loc_512:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+13Dj
		mov	esi, esp
		mov	ecx, [ebp+arg_C] ; this
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	[ebp+arg_10], eax
		jle	short loc_537
		mov	eax, [ebp+arg_2C]
		mov	dword ptr [eax], 1
		jmp	loc_858
; ---------------------------------------------------------------------------

loc_537:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+154j
					; icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const &,int,int,icu_56::UnicodeFunctor *	*,int,signed char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+16Bj
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_18]
		mov	[eax+54h], ecx
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_1C]
		mov	[eax+58h], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_14]
		add	ecx, 14h
		call	dword ptr ds:__imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z ;	icu_56::UnicodeString::operator=(icu_56::UnicodeString const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_14]
		mov	byte ptr [eax+64h], 0
		movsx	eax, [ebp+arg_20]
		test	eax, eax
		jz	short loc_581
		mov	eax, [ebp+var_14]
		movsx	ecx, byte ptr [eax+64h]
		or	ecx, 1
		mov	edx, [ebp+var_14]
		mov	[edx+64h], cl

loc_581:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+1B3j
		movsx	eax, [ebp+arg_24]
		test	eax, eax
		jz	short loc_599
		mov	eax, [ebp+var_14]
		movsx	ecx, byte ptr [eax+64h]
		or	ecx, 2
		mov	edx, [ebp+var_14]
		mov	[edx+64h], cl

loc_599:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+1CBj
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax+4], 0
		mov	eax, [ebp+var_14]
		cmp	dword ptr [eax+5Ch], 0
		jle	loc_640
		mov	esi, esp
		push	5Ch ; '\'       ; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_134], eax
		mov	byte ptr [ebp+var_4], 1
		cmp	[ebp+var_134], 0
		jz	short loc_603
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+68h]
		push	ecx		; struct icu_56::TransliterationRuleData *
		push	0		; int
		mov	edx, [ebp+var_14]
		mov	eax, [edx+5Ch]
		push	eax		; int
		push	0		; int
		mov	ecx, [ebp+var_14]
		add	ecx, 14h
		push	ecx		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_134] ; this
		call	??0StringMatcher@icu_56@@QAE@ABVUnicodeString@1@HHHABVTransliterationRuleData@1@@Z ; icu_56::StringMatcher::StringMatcher(icu_56::UnicodeString	const &,int,int,int,icu_56::TransliterationRuleData const &)
		mov	[ebp+var_148], eax
		jmp	short loc_60D
; ---------------------------------------------------------------------------

loc_603:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+219j
		mov	[ebp+var_148], 0

loc_60D:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+245j
		mov	edx, [ebp+var_148]
		mov	[ebp+var_140], edx
		mov	byte ptr [ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_140]
		mov	[eax+4], ecx
		mov	eax, [ebp+var_14]
		cmp	dword ptr [eax+4], 0
		jnz	short loc_640
		mov	eax, [ebp+arg_2C]
		mov	dword ptr [eax], 7
		jmp	loc_858
; ---------------------------------------------------------------------------

loc_640:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+1EEj
					; icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const &,int,int,icu_56::UnicodeFunctor *	*,int,signed char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+274j
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax+8], 0
		mov	eax, [ebp+var_14]
		cmp	dword ptr [eax+60h], 0
		jle	loc_6F2
		mov	esi, esp
		push	5Ch ; '\'       ; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_11C], eax
		mov	byte ptr [ebp+var_4], 2
		cmp	[ebp+var_11C], 0
		jz	short loc_6B5
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+68h]
		push	ecx		; struct icu_56::TransliterationRuleData *
		push	0		; int
		mov	edx, [ebp+var_14]
		mov	eax, [edx+5Ch]
		mov	ecx, [ebp+var_14]
		add	eax, [ecx+60h]
		push	eax		; int
		mov	edx, [ebp+var_14]
		mov	eax, [edx+5Ch]
		push	eax		; int
		mov	ecx, [ebp+var_14]
		add	ecx, 14h
		push	ecx		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_11C] ; this
		call	??0StringMatcher@icu_56@@QAE@ABVUnicodeString@1@HHHABVTransliterationRuleData@1@@Z ; icu_56::StringMatcher::StringMatcher(icu_56::UnicodeString	const &,int,int,int,icu_56::TransliterationRuleData const &)
		mov	[ebp+var_148], eax
		jmp	short loc_6BF
; ---------------------------------------------------------------------------

loc_6B5:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+2C0j
		mov	[ebp+var_148], 0

loc_6BF:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+2F7j
		mov	edx, [ebp+var_148]
		mov	[ebp+var_128], edx
		mov	byte ptr [ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_128]
		mov	[eax+8], ecx
		mov	eax, [ebp+var_14]
		cmp	dword ptr [eax+8], 0
		jnz	short loc_6F2
		mov	eax, [ebp+arg_2C]
		mov	dword ptr [eax], 7
		jmp	loc_858
; ---------------------------------------------------------------------------

loc_6F2:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+295j
					; icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const &,int,int,icu_56::UnicodeFunctor *	*,int,signed char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+326j
		mov	ecx, [ebp+var_14]
		add	ecx, 14h	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		sub	eax, [ecx+60h]
		mov	edx, [ebp+var_14]
		sub	eax, [edx+5Ch]
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax+0Ch], 0
		cmp	[ebp+var_20], 0
		jle	loc_7D4
		mov	esi, esp
		push	5Ch ; '\'       ; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_104], eax
		mov	byte ptr [ebp+var_4], 3
		cmp	[ebp+var_104], 0
		jz	short loc_797
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+68h]
		push	ecx		; struct icu_56::TransliterationRuleData *
		push	0		; int
		mov	ecx, [ebp+var_14]
		add	ecx, 14h	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax		; int
		mov	edx, [ebp+var_14]
		mov	eax, [edx+5Ch]
		mov	ecx, [ebp+var_14]
		add	eax, [ecx+60h]
		push	eax		; int
		mov	edx, [ebp+var_14]
		add	edx, 14h
		push	edx		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_104] ; this
		call	??0StringMatcher@icu_56@@QAE@ABVUnicodeString@1@HHHABVTransliterationRuleData@1@@Z ; icu_56::StringMatcher::StringMatcher(icu_56::UnicodeString	const &,int,int,int,icu_56::TransliterationRuleData const &)
		mov	[ebp+var_148], eax
		jmp	short loc_7A1
; ---------------------------------------------------------------------------

loc_797:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+393j
		mov	[ebp+var_148], 0

loc_7A1:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+3D9j
		mov	eax, [ebp+var_148]
		mov	[ebp+var_110], eax
		mov	byte ptr [ebp+var_4], 0
		mov	ecx, [ebp+var_14]
		mov	edx, [ebp+var_110]
		mov	[ecx+0Ch], edx
		mov	eax, [ebp+var_14]
		cmp	dword ptr [eax+0Ch], 0
		jnz	short loc_7D4
		mov	eax, [ebp+arg_2C]
		mov	dword ptr [eax], 7
		jmp	loc_858
; ---------------------------------------------------------------------------

loc_7D4:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+368j
					; icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const &,int,int,icu_56::UnicodeFunctor *	*,int,signed char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+408j
		mov	esi, esp
		push	54h ; 'T'       ; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_EC], eax
		mov	byte ptr [ebp+var_4], 4
		cmp	[ebp+var_EC], 0
		jz	short loc_820
		mov	eax, [ebp+var_14]

loc_7FE:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::hexo
		mov	ecx, [eax+68h]
		push	ecx		; struct icu_56::TransliterationRuleData *
		mov	edx, [ebp+arg_10]
		add	edx, [ebp+arg_14]
		push	edx		; int
		mov	eax, [ebp+arg_C]
		push	eax		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_EC] ; this
		call	??0StringReplacer@icu_56@@QAE@ABVUnicodeString@1@HPBVTransliterationRuleData@1@@Z ; icu_56::StringReplacer::StringReplacer(icu_56::UnicodeString const &,int,icu_56::TransliterationRuleData const *)
		mov	[ebp+var_148], eax
		jmp	short loc_82A
; ---------------------------------------------------------------------------

loc_820:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+43Dj
		mov	[ebp+var_148], 0

loc_82A:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+462j
		mov	ecx, [ebp+var_148]
		mov	[ebp+var_F8], ecx
		mov	byte ptr [ebp+var_4], 0
		mov	edx, [ebp+var_14]
		mov	eax, [ebp+var_F8]
		mov	[edx+10h], eax
		mov	eax, [ebp+var_14]
		cmp	dword ptr [eax+10h], 0
		jnz	short loc_858
		mov	eax, [ebp+arg_2C]
		mov	dword ptr [eax], 7

loc_858:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+8Fj
					; icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const &,int,int,icu_56::UnicodeFunctor *	*,int,signed char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+C6j ...
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 148h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	30h
??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 884h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$0 proc near
					; DATA XREF: .xdata$x:00000958o
		mov	ecx, [ebp-14h]
		add	ecx, 14h	; this
		mov	esi, esp
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$1 proc near
					; DATA XREF: .xdata$x:00000960o
		mov	esi, esp
		mov	eax, [ebp-134h]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$2 proc near
					; DATA XREF: .xdata$x:00000968o
		mov	esi, esp
		mov	eax, [ebp-11Ch]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$2 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$3 proc near
					; DATA XREF: .xdata$x:00000970o
		mov	esi, esp
		mov	eax, [ebp-104h]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$3 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$4 proc near
					; DATA XREF: .xdata$x:00000978o
		mov	esi, esp
		mov	eax, [ebp-0ECh]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$4 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z	proc near
					; DATA XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-14Ch]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 91Ch
		dd offset ??_R4TransliterationRule@icu_56@@6B@ ; const icu_56::TransliterationRule::`RTTI Complete Object Locator'
		public ??_7TransliterationRule@icu_56@@6B@
; const	icu_56::TransliterationRule::`vftable'
??_7TransliterationRule@icu_56@@6B@ dd offset ??_ETransliterationRule@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+45o
					; icu_56::TransliterationRule::TransliterationRule(icu_56::TransliterationRule &)+63o ...
					; icu_56::TransliterationRule::`vector deleting	destructor'(uint)
		dd offset ?getContextLength@TransliterationRule@icu_56@@UBEHXZ ; icu_56::TransliterationRule::getContextLength(void)
		dd offset ?masks@TransliterationRule@icu_56@@UBECABV12@@Z ; icu_56::TransliterationRule::masks(icu_56::TransliterationRule const &)
		dd offset ?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z ;	icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed char)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 930h
__ehfuncinfo$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z dd 19930522h, 5
					; DATA XREF: __ehhandler$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z+14o
		dd offset __unwindtable$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z
		dd 5 dup(0)
		dd 1
__unwindtable$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00000938o
		dd offset __unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$0
		align 10h
		dd offset __unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$1
		align 8
		dd offset __unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$2
		align 10h
		dd offset __unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$3
		align 8
		dd offset __unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$4
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 97Ch
		public ??_R4TransliterationRule@icu_56@@6B@
; const	icu_56::TransliterationRule::`RTTI Complete Object Locator'
??_R4TransliterationRule@icu_56@@6B@ dd	3 dup(0) ; DATA	XREF: .rdata:0000091Co
		dd offset ??_R0?AVTransliterationRule@icu_56@@@8 ; icu_56::TransliterationRule `RTTI Type Descriptor'
		dd offset ??_R3TransliterationRule@icu_56@@8 ; icu_56::TransliterationRule::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 990h
		public ??_R0?AVTransliterationRule@icu_56@@@8
; class	icu_56::TransliterationRule `RTTI Type Descriptor'
??_R0?AVTransliterationRule@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00000988o
					; .rdata$r:icu_56::TransliterationRule::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?avtransliter	db '.?AVTransliterationRule@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9BCh
		public ??_R3TransliterationRule@icu_56@@8
; icu_56::TransliterationRule::`RTTI Class Hierarchy Descriptor'
??_R3TransliterationRule@icu_56@@8 dd 2	dup(0) ; DATA XREF: .rdata$r:0000098Co
					; .rdata$r:000009F0o
		dd 2
		dd offset ??_R2TransliterationRule@icu_56@@8 ; icu_56::TransliterationRule::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9CCh
		public ??_R2TransliterationRule@icu_56@@8
; icu_56::TransliterationRule::`RTTI Base Class	Array'
??_R2TransliterationRule@icu_56@@8 dd offset ??_R1A@?0A@EA@TransliterationRule@icu_56@@8
					; DATA XREF: .rdata$r:000009C8o
					; icu_56::TransliterationRule::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9D8h
		public ??_R1A@?0A@EA@TransliterationRule@icu_56@@8
; icu_56::TransliterationRule::`RTTI Base Class	Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@TransliterationRule@icu_56@@8 dd offset ??_R0?AVTransliterationRule@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::TransliterationRule::`RTTI Base Class Array'o
					; icu_56::TransliterationRule `RTTI Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3TransliterationRule@icu_56@@8 ; icu_56::TransliterationRule::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9F4h
		public ??_R13?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@UMemory@icu_56@@8 dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:000009D0o
					; icu_56::UMemory `RTTI	Type Descriptor'
		dd 0
		dd 4, 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 0A10h
		public ??_R0?AVUMemory@icu_56@@@8
; class	icu_56::UMemory	`RTTI Type Descriptor'
??_R0?AVUMemory@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Descriptor at (4,-1,0,64)'o
					; .rdata$r:icu_56::UMemory::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?avumemory@ic	db '.?AVUMemory@icu_56@@',0
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0A30h
		public ??_R3UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
??_R3UMemory@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00000A0Co
					; .rdata$r:00000A60o
		dd 1
		dd offset ??_R2UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0A40h
		public ??_R2UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Array'
??_R2UMemory@icu_56@@8 dd offset ??_R1A@?0A@EA@UMemory@icu_56@@8
					; DATA XREF: .rdata$r:00000A3Co
					; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0A48h
		public ??_R1A@?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UMemory@icu_56@@8	dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Array'o
					; icu_56::UMemory `RTTI	Type Descriptor'
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A64h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl U_FAILURE(enum  UErrorCode)
?U_FAILURE@@YACW4UErrorCode@@@Z	proc near
					; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+80p

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		setnle	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?U_FAILURE@@YACW4UErrorCode@@@Z	endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A90h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::TransliterationRule::`scalar deleting destructor'(unsigned int)
		public ??_GTransliterationRule@icu_56@@UAEPAXI@Z
??_GTransliterationRule@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1TransliterationRule@icu_56@@UAE@XZ ;	icu_56::TransliterationRule::~TransliterationRule(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_AD9
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_AD9:				; CODE XREF: icu_56::TransliterationRule::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GTransliterationRule@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0AF4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::TransliterationRule::TransliterationRule(icu_56::TransliterationRule *this,	struct icu_56::TransliterationRule *)
		public ??0TransliterationRule@icu_56@@QAE@AAV01@@Z
??0TransliterationRule@icu_56@@QAE@AAV01@@Z proc near

var_DC		= dword	ptr -0DCh
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0TransliterationRule@icu_56@@QAE@AAV01@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_DC]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		cmp	[ebp+arg_0], 0
		jz	short loc_B4A
		mov	eax, [ebp+arg_0]
		add	eax, 4
		mov	[ebp+var_DC], eax
		jmp	short loc_B54
; ---------------------------------------------------------------------------

loc_B4A:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::TransliterationRule &)+46j
		mov	[ebp+var_DC], 0

loc_B54:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::TransliterationRule &)+54j
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7TransliterationRule@icu_56@@6B@ ; const icu_56::TransliterationRule::`vftable'
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax+4], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax+8], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax+0Ch], 0
		mov	eax, [ebp+arg_0]
		add	eax, 14h
		mov	esi, esp
		push	eax		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_14]
		add	ecx, 14h	; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@ABV01@@Z ; icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+5Ch]
		mov	[eax+5Ch], edx
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+60h]
		mov	[eax+60h], edx
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_0]
		mov	dl, [ecx+64h]
		mov	[eax+64h], dl
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+68h]
		mov	[eax+68h], edx
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax+54h], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax+58h], 0
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+58h], 0
		jle	short loc_C34
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+58h]
		shl	ecx, 2
		push	ecx
		call	_uprv_malloc_56
		add	esp, 4
		mov	edx, [ebp+var_14]
		mov	[edx+54h], eax
		push	1
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+54h]
		push	ecx
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+58h]
		shl	eax, 2
		push	eax		; Size
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+54h]
		push	edx		; Src
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+54h]
		push	ecx		; Dst
		call	_memcpy
		add	esp, 0Ch

loc_C34:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::TransliterationRule &)+F5j
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+4], 0
		jz	short loc_C61
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		mov	edx, [ecx]
		mov	esi, esp
		mov	ecx, eax
		mov	eax, [edx+8]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		mov	[ecx+4], eax

loc_C61:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::TransliterationRule &)+147j
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+8], 0
		jz	short loc_C8E
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	edx, [ecx]
		mov	esi, esp
		mov	ecx, eax
		mov	eax, [edx+8]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		mov	[ecx+8], eax

loc_C8E:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::TransliterationRule &)+174j
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+0Ch], 0
		jz	short loc_CBB
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+0Ch]
		mov	edx, [ecx]
		mov	esi, esp
		mov	ecx, eax
		mov	eax, [edx+8]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		mov	[ecx+0Ch], eax

loc_CBB:				; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::TransliterationRule &)+1A1j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+10h]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+10h]
		mov	edx, [ecx]
		mov	esi, esp
		mov	ecx, eax
		mov	eax, [edx+8]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		mov	[ecx+10h], eax
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0DCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0TransliterationRule@icu_56@@QAE@AAV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 0D0Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0TransliterationRule@icu_56@@QAE@AAV01@@Z$0 proc near
					; DATA XREF: .xdata$x:00000D44o
		mov	ecx, [ebp-14h]
		add	ecx, 14h	; this
		mov	esi, esp
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0TransliterationRule@icu_56@@QAE@AAV01@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0TransliterationRule@icu_56@@QAE@AAV01@@Z	proc near
					; DATA XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::TransliterationRule &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0E0h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0TransliterationRule@icu_56@@QAE@AAV01@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0TransliterationRule@icu_56@@QAE@AAV01@@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 0D40h
__unwindtable$??0TransliterationRule@icu_56@@QAE@AAV01@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00000D50o
		dd offset __unwindfunclet$??0TransliterationRule@icu_56@@QAE@AAV01@@Z$0
__ehfuncinfo$??0TransliterationRule@icu_56@@QAE@AAV01@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$??0TransliterationRule@icu_56@@QAE@AAV01@@Z+14o
		dd offset __unwindtable$??0TransliterationRule@icu_56@@QAE@AAV01@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0D6Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::TransliterationRule::~TransliterationRule(icu_56::TransliterationRule *__hidden this)
		public ??1TransliterationRule@icu_56@@UAE@XZ
??1TransliterationRule@icu_56@@UAE@XZ proc near
					; CODE XREF: icu_56::TransliterationRule::`scalar deleting destructor'(uint)+26p

var_13C		= dword	ptr -13Ch
var_134		= dword	ptr -134h
var_128		= dword	ptr -128h
var_11C		= dword	ptr -11Ch
var_110		= dword	ptr -110h
var_104		= dword	ptr -104h
var_F8		= dword	ptr -0F8h
var_EC		= dword	ptr -0ECh
var_E0		= dword	ptr -0E0h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??1TransliterationRule@icu_56@@UAE@XZ
		mov	eax, large fs:0
		push	eax
		sub	esp, 130h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_13C]
		mov	ecx, 4Ch ; 'L'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7TransliterationRule@icu_56@@6B@ ; const icu_56::TransliterationRule::`vftable'
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+54h]
		push	ecx
		call	_uprv_free_56
		add	esp, 4
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	[ebp+var_128], ecx
		mov	edx, [ebp+var_128]
		mov	[ebp+var_134], edx
		cmp	[ebp+var_134], 0
		jz	short loc_E13
		mov	esi, esp
		push	1
		mov	eax, [ebp+var_134]
		mov	edx, [eax]
		mov	ecx, [ebp+var_134]

loc_E00:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::basefieldo
		mov	eax, [edx]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_13C], eax
		jmp	short loc_E1D
; ---------------------------------------------------------------------------

loc_E13:				; CODE XREF: icu_56::TransliterationRule::~TransliterationRule(void)+80j
		mov	[ebp+var_13C], 0

loc_E1D:				; CODE XREF: icu_56::TransliterationRule::~TransliterationRule(void)+A5j
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+8]
		mov	[ebp+var_110], ecx
		mov	edx, [ebp+var_110]
		mov	[ebp+var_11C], edx
		cmp	[ebp+var_11C], 0
		jz	short loc_E63
		mov	esi, esp
		push	1
		mov	eax, [ebp+var_11C]
		mov	edx, [eax]
		mov	ecx, [ebp+var_11C]
		mov	eax, [edx]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_13C], eax
		jmp	short loc_E6D
; ---------------------------------------------------------------------------

loc_E63:				; CODE XREF: icu_56::TransliterationRule::~TransliterationRule(void)+D0j
		mov	[ebp+var_13C], 0

loc_E6D:				; CODE XREF: icu_56::TransliterationRule::~TransliterationRule(void)+F5j
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+0Ch]
		mov	[ebp+var_F8], ecx
		mov	edx, [ebp+var_F8]
		mov	[ebp+var_104], edx
		cmp	[ebp+var_104], 0
		jz	short loc_EB3
		mov	esi, esp
		push	1
		mov	eax, [ebp+var_104]
		mov	edx, [eax]
		mov	ecx, [ebp+var_104]
		mov	eax, [edx]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_13C], eax
		jmp	short loc_EBD
; ---------------------------------------------------------------------------

loc_EB3:				; CODE XREF: icu_56::TransliterationRule::~TransliterationRule(void)+120j
		mov	[ebp+var_13C], 0

loc_EBD:				; CODE XREF: icu_56::TransliterationRule::~TransliterationRule(void)+145j
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+10h]
		mov	[ebp+var_E0], ecx
		mov	edx, [ebp+var_E0]
		mov	[ebp+var_EC], edx
		cmp	[ebp+var_EC], 0
		jz	short loc_F03
		mov	esi, esp
		push	1
		mov	eax, [ebp+var_EC]
		mov	edx, [eax]
		mov	ecx, [ebp+var_EC]
		mov	eax, [edx]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_13C], eax
		jmp	short loc_F0D
; ---------------------------------------------------------------------------

loc_F03:				; CODE XREF: icu_56::TransliterationRule::~TransliterationRule(void)+170j
		mov	[ebp+var_13C], 0

loc_F0D:				; CODE XREF: icu_56::TransliterationRule::~TransliterationRule(void)+195j
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, [ebp+var_14]
		add	ecx, 14h	; this
		mov	esi, esp
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 13Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1TransliterationRule@icu_56@@UAE@XZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 0F48h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??1TransliterationRule@icu_56@@UAE@XZ$0	proc near
					; DATA XREF: .xdata$x:00000F80o
		mov	ecx, [ebp-14h]
		add	ecx, 14h	; this
		mov	esi, esp
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??1TransliterationRule@icu_56@@UAE@XZ$0	endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??1TransliterationRule@icu_56@@UAE@XZ proc near
					; DATA XREF: icu_56::TransliterationRule::~TransliterationRule(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-140h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??1TransliterationRule@icu_56@@UAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??1TransliterationRule@icu_56@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 0F7Ch
__unwindtable$??1TransliterationRule@icu_56@@UAE@XZ dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00000F8Co
		dd offset __unwindfunclet$??1TransliterationRule@icu_56@@UAE@XZ$0
__ehfuncinfo$??1TransliterationRule@icu_56@@UAE@XZ dd 19930522h, 1
					; DATA XREF: __ehhandler$??1TransliterationRule@icu_56@@UAE@XZ+14o
		dd offset __unwindtable$??1TransliterationRule@icu_56@@UAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0FA8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::TransliterationRule::getContextLength(icu_56::TransliterationRule *__hidden this)
		public ?getContextLength@TransliterationRule@icu_56@@UBEHXZ
?getContextLength@TransliterationRule@icu_56@@UBEHXZ proc near ; DATA XREF: .rdata:00000924o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		movsx	eax, byte ptr [eax+64h]
		and	eax, 1
		neg	eax
		sbb	eax, eax
		neg	eax
		mov	ecx, [ebp+var_8]
		add	eax, [ecx+5Ch]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getContextLength@TransliterationRule@icu_56@@UBEHXZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0FE8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; __int16 __thiscall icu_56::TransliterationRule::getIndexValue(icu_56::TransliterationRule *__hidden this)
		public ?getIndexValue@TransliterationRule@icu_56@@QBEFXZ
?getIndexValue@TransliterationRule@icu_56@@QBEFXZ proc near

var_DC		= dword	ptr -0DCh
var_14		= dword	ptr -14h
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0DCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_DC]
		mov	ecx, 37h ; '7'

loc_1000:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::scientifico
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8]
		add	ecx, 14h	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_8]
		cmp	[ecx+5Ch], eax
		jnz	short loc_102D
		or	eax, 0FFFFFFFFh
		jmp	short loc_1081
; ---------------------------------------------------------------------------

loc_102D:				; CODE XREF: icu_56::TransliterationRule::getIndexValue(void)+3Ej
		mov	esi, esp
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+5Ch]
		push	ecx		; int
		mov	ecx, [ebp+var_8]
		add	ecx, 14h	; this
		call	dword ptr ds:__imp_?char32At@UnicodeString@icu_56@@QBEHH@Z ; icu_56::UnicodeString::char32At(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_14]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		mov	ecx, [ecx+68h]	; this
		call	?lookupMatcher@TransliterationRuleData@icu_56@@QBEPAVUnicodeMatcher@2@H@Z ; icu_56::TransliterationRuleData::lookupMatcher(int)
		test	eax, eax
		jnz	short loc_1070
		mov	edx, [ebp+var_14]
		and	edx, 0FFh
		mov	[ebp+var_DC], edx
		jmp	short loc_107A
; ---------------------------------------------------------------------------

loc_1070:				; CODE XREF: icu_56::TransliterationRule::getIndexValue(void)+75j
		mov	[ebp+var_DC], 0FFFFFFFFh

loc_107A:				; CODE XREF: icu_56::TransliterationRule::getIndexValue(void)+86j
		mov	ax, word ptr [ebp+var_DC]

loc_1081:				; CODE XREF: icu_56::TransliterationRule::getIndexValue(void)+43j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0DCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?getIndexValue@TransliterationRule@icu_56@@QBEFXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1098h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__thiscall icu_56::TransliterationRule::matchesIndexValue(icu_56::TransliterationRule *this, unsigned __int8)
		public ?matchesIndexValue@TransliterationRule@icu_56@@QBECE@Z
?matchesIndexValue@TransliterationRule@icu_56@@QBECE@Z proc near

var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0E0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_E0]
		mov	ecx, 38h ; '8'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+8], 0
		jz	short loc_10D2
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+8]
		mov	[ebp+var_DC], edx
		jmp	short loc_10DE
; ---------------------------------------------------------------------------

loc_10D2:				; CODE XREF: icu_56::TransliterationRule::matchesIndexValue(uchar)+2Aj
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+0Ch]
		mov	[ebp+var_DC], ecx

loc_10DE:				; CODE XREF: icu_56::TransliterationRule::matchesIndexValue(uchar)+38j
		cmp	[ebp+var_DC], 0
		jz	short loc_10F8
		mov	edx, [ebp+var_DC]
		add	edx, 4
		mov	[ebp+var_E0], edx
		jmp	short loc_1102
; ---------------------------------------------------------------------------

loc_10F8:				; CODE XREF: icu_56::TransliterationRule::matchesIndexValue(uchar)+4Dj
		mov	[ebp+var_E0], 0

loc_1102:				; CODE XREF: icu_56::TransliterationRule::matchesIndexValue(uchar)+5Ej
		mov	eax, [ebp+var_E0]
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_1137
		mov	esi, esp
		movzx	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_14]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_14]
		mov	eax, [edx+0Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		movsx	ecx, al
		mov	[ebp+var_DC], ecx
		jmp	short loc_1141
; ---------------------------------------------------------------------------

loc_1137:				; CODE XREF: icu_56::TransliterationRule::matchesIndexValue(uchar)+77j
		mov	[ebp+var_DC], 1

loc_1141:				; CODE XREF: icu_56::TransliterationRule::matchesIndexValue(uchar)+9Dj
		mov	al, byte ptr [ebp+var_DC]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?matchesIndexValue@TransliterationRule@icu_56@@QBECE@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1160h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__thiscall icu_56::TransliterationRule::masks(icu_56::TransliterationRule *this, const struct icu_56::TransliterationRule *)
		public ?masks@TransliterationRule@icu_56@@UBECABV12@@Z
?masks@TransliterationRule@icu_56@@UBECABV12@@Z	proc near ; DATA XREF: .rdata:00000928o

var_118		= byte ptr -118h
var_115		= byte ptr -115h
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 118h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_118]
		mov	ecx, 46h ; 'F'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8]
		add	ecx, 14h	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+5Ch]
		mov	[ebp+var_20], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+5Ch]
		mov	[ebp+var_2C], ecx
		mov	eax, [ebp+var_14]
		sub	eax, [ebp+var_20]
		mov	[ebp+var_38], eax
		mov	ecx, [ebp+arg_0]
		add	ecx, 14h	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		sub	eax, [ebp+var_2C]
		mov	[ebp+var_44], eax
		mov	eax, [ebp+var_8]
		add	eax, 14h
		mov	esi, esp
		push	eax		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_14]
		push	ecx		; int
		mov	edx, [ebp+var_2C]
		sub	edx, [ebp+var_20]
		push	edx		; int
		mov	ecx, [ebp+arg_0]
		add	ecx, 14h	; this
		call	dword ptr ds:__imp_?compare@UnicodeString@icu_56@@QBECHHABV12@@Z ; icu_56::UnicodeString::compare(int,int,icu_56::UnicodeString	const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		movsx	eax, al
		mov	[ebp+var_50], eax
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+var_2C]
		jnz	short loc_127C
		mov	eax, [ebp+var_38]
		cmp	eax, [ebp+var_44]
		jnz	short loc_127C
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+60h]
		cmp	edx, [ecx+60h]
		jg	short loc_127C
		cmp	[ebp+var_50], 0
		jnz	short loc_127C
		mov	eax, [ebp+var_8]
		movsx	ecx, byte ptr [eax+64h]
		mov	edx, [ebp+arg_0]
		movsx	eax, byte ptr [edx+64h]
		cmp	ecx, eax
		jz	short loc_126D
		mov	ecx, [ebp+var_8]
		movsx	edx, byte ptr [ecx+64h]
		and	edx, 1
		jnz	short loc_124C
		mov	eax, [ebp+var_8]
		movsx	ecx, byte ptr [eax+64h]
		and	ecx, 2
		jz	short loc_126D

loc_124C:				; CODE XREF: icu_56::TransliterationRule::masks(icu_56::TransliterationRule const &)+DEj
		mov	edx, [ebp+arg_0]
		movsx	eax, byte ptr [edx+64h]
		and	eax, 1
		jz	short loc_1264
		mov	ecx, [ebp+arg_0]
		movsx	edx, byte ptr [ecx+64h]
		and	edx, 2
		jnz	short loc_126D

loc_1264:				; CODE XREF: icu_56::TransliterationRule::masks(icu_56::TransliterationRule const &)+F6j
		mov	[ebp+var_115], 0
		jmp	short loc_1274
; ---------------------------------------------------------------------------

loc_126D:				; CODE XREF: icu_56::TransliterationRule::masks(icu_56::TransliterationRule const &)+D2j
					; icu_56::TransliterationRule::masks(icu_56::TransliterationRule const &)+EAj ...
		mov	[ebp+var_115], 1

loc_1274:				; CODE XREF: icu_56::TransliterationRule::masks(icu_56::TransliterationRule const &)+10Bj
		mov	al, [ebp+var_115]
		jmp	short loc_12BE
; ---------------------------------------------------------------------------

loc_127C:				; CODE XREF: icu_56::TransliterationRule::masks(icu_56::TransliterationRule const &)+A4j
					; icu_56::TransliterationRule::masks(icu_56::TransliterationRule const &)+ACj ...
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+var_2C]
		jg	short loc_12B1
		mov	ecx, [ebp+var_38]
		cmp	ecx, [ebp+var_44]
		jl	short loc_12A2
		mov	edx, [ebp+var_38]
		cmp	edx, [ebp+var_44]
		jnz	short loc_12B1
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+60h]
		cmp	edx, [ecx+60h]
		jg	short loc_12B1

loc_12A2:				; CODE XREF: icu_56::TransliterationRule::masks(icu_56::TransliterationRule const &)+12Aj
		cmp	[ebp+var_50], 0
		jnz	short loc_12B1
		mov	[ebp+var_115], 1
		jmp	short loc_12B8
; ---------------------------------------------------------------------------

loc_12B1:				; CODE XREF: icu_56::TransliterationRule::masks(icu_56::TransliterationRule const &)+122j
					; icu_56::TransliterationRule::masks(icu_56::TransliterationRule const &)+132j	...
		mov	[ebp+var_115], 0

loc_12B8:				; CODE XREF: icu_56::TransliterationRule::masks(icu_56::TransliterationRule const &)+14Fj
		mov	al, [ebp+var_115]

loc_12BE:				; CODE XREF: icu_56::TransliterationRule::masks(icu_56::TransliterationRule const &)+11Aj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 118h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?masks@TransliterationRule@icu_56@@UBECABV12@@Z	endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 12D4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: enum	icu_56::UMatchDegree __thiscall	icu_56::TransliterationRule::matchAndReplace(class icu_56::Replaceable &, struct UTransPosition	&, signed char)const
		public ?matchAndReplace@TransliterationRule@icu_56@@QBE?AW4UMatchDegree@2@AAVReplaceable@2@AAUUTransPosition@@C@Z
?matchAndReplace@TransliterationRule@icu_56@@QBE?AW4UMatchDegree@2@AAVReplaceable@2@AAUUTransPosition@@C@Z proc	near

var_13C		= dword	ptr -13Ch
var_74		= dword	ptr -74h
var_68		= dword	ptr -68h
var_5C		= dword	ptr -5Ch
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 13Ch
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_13C]
		mov	ecx, 4Fh ; 'O'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+54h], 0
		jz	short loc_1330
		mov	[ebp+var_14], 0
		jmp	short loc_1312
; ---------------------------------------------------------------------------

loc_1309:				; CODE XREF: icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed	char)+5Aj
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax

loc_1312:				; CODE XREF: icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed	char)+33j
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_14]
		cmp	ecx, [eax+58h]
		jge	short loc_1330
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+54h]
		mov	edx, [ebp+var_14]
		mov	ecx, [ecx+edx*4] ; this
		call	?resetMatch@StringMatcher@icu_56@@QAEXXZ ; icu_56::StringMatcher::resetMatch(void)
		jmp	short loc_1309
; ---------------------------------------------------------------------------

loc_1330:				; CODE XREF: icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed	char)+2Aj
					; icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed char)+47j
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx		; int
		mov	edx, [ebp+arg_0]
		push	edx		; icu_56::Replaceable *
		call	?posBefore@icu_56@@YAHABVReplaceable@1@H@Z ; icu_56::posBefore(icu_56::Replaceable const &,int)
		add	esp, 8
		mov	[ebp+var_44], eax
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+8]
		push	ecx		; int
		mov	edx, [ebp+arg_0]
		push	edx		; icu_56::Replaceable *
		call	?posBefore@icu_56@@YAHABVReplaceable@1@H@Z ; icu_56::posBefore(icu_56::Replaceable const &,int)
		add	esp, 8
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+4], 0
		jz	short loc_13A4
		mov	esi, esp
		push	0
		mov	eax, [ebp+var_44]
		push	eax
		lea	ecx, [ebp+var_2C]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_8]
		mov	eax, [edx+4]
		add	eax, 4
		mov	edx, [ecx+4]
		mov	ecx, eax
		mov	eax, [edx+4]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_50], eax
		cmp	[ebp+var_50], 2
		jz	short loc_13A4
		xor	eax, eax
		jmp	loc_1590
; ---------------------------------------------------------------------------

loc_13A4:				; CODE XREF: icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed	char)+8Ej
					; icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed char)+C7j
		mov	eax, [ebp+var_2C]
		push	eax		; int
		mov	ecx, [ebp+arg_0]
		push	ecx		; icu_56::Replaceable *
		call	?posAfter@icu_56@@YAHABVReplaceable@1@H@Z ; icu_56::posAfter(icu_56::Replaceable const &,int)
		add	esp, 8
		mov	[ebp+var_38], eax
		mov	eax, [ebp+var_8]
		movsx	ecx, byte ptr [eax+64h]
		and	ecx, 1
		jz	short loc_13D2
		mov	eax, [ebp+var_2C]
		cmp	eax, [ebp+var_44]
		jz	short loc_13D2
		xor	eax, eax
		jmp	loc_1590
; ---------------------------------------------------------------------------

loc_13D2:				; CODE XREF: icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed	char)+EDj
					; icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed char)+F5j
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+8]
		mov	[ebp+var_2C], ecx
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+8], 0
		jz	short loc_1429
		mov	esi, esp
		movzx	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+0Ch]
		push	edx
		lea	eax, [ebp+var_2C]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx+8]
		mov	ecx, [ebp+var_8]
		mov	ecx, [ecx+8]
		add	ecx, 4
		mov	edx, [eax+4]
		mov	eax, [edx+4]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_50], eax
		cmp	[ebp+var_50], 2
		jz	short loc_1429
		mov	eax, [ebp+var_50]
		jmp	loc_1590
; ---------------------------------------------------------------------------

loc_1429:				; CODE XREF: icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed	char)+10Ej
					; icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed char)+14Bj
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+0Ch], 0
		jz	short loc_149A
		movsx	eax, [ebp+arg_8]
		test	eax, eax
		jz	short loc_1455
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_20]
		cmp	ecx, [eax+0Ch]
		jnz	short loc_1455
		mov	eax, 1
		jmp	loc_1590
; ---------------------------------------------------------------------------

loc_1455:				; CODE XREF: icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed	char)+16Aj
					; icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed char)+175j
		mov	esi, esp
		movzx	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+4]
		push	edx
		lea	eax, [ebp+var_2C]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx+0Ch]
		mov	ecx, [ebp+var_8]
		mov	ecx, [ecx+0Ch]
		add	ecx, 4
		mov	edx, [eax+4]
		mov	eax, [edx+4]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_50], eax
		cmp	[ebp+var_50], 2
		jz	short loc_149A
		mov	eax, [ebp+var_50]
		jmp	loc_1590
; ---------------------------------------------------------------------------

loc_149A:				; CODE XREF: icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed	char)+162j
					; icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed char)+1BCj
		mov	eax, [ebp+var_8]
		movsx	ecx, byte ptr [eax+64h]
		and	ecx, 2
		jz	short loc_14CA
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_2C]
		cmp	ecx, [eax+4]
		jz	short loc_14B8
		xor	eax, eax
		jmp	loc_1590
; ---------------------------------------------------------------------------

loc_14B8:				; CODE XREF: icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed	char)+1DBj
		movsx	eax, [ebp+arg_8]
		test	eax, eax
		jz	short loc_14CA
		mov	eax, 1
		jmp	loc_1590
; ---------------------------------------------------------------------------

loc_14CA:				; CODE XREF: icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed	char)+1D0j
					; icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed char)+1EAj
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+10h]
		mov	edx, [ebp+var_8]
		mov	eax, [edx+10h]
		mov	edx, [ecx]
		mov	esi, esp
		mov	ecx, eax
		mov	eax, [edx+10h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_13C], eax
		mov	esi, esp
		lea	ecx, [ebp+var_5C]
		push	ecx
		mov	edx, [ebp+var_20]
		push	edx
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+8]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_13C]
		mov	edx, [eax]
		mov	ecx, [ebp+var_13C]
		mov	eax, [edx+4]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_68], eax
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_20]
		sub	ecx, [eax+8]
		mov	edx, [ebp+var_68]
		sub	edx, ecx
		mov	[ebp+var_74], edx
		mov	eax, [ebp+var_2C]
		add	eax, [ebp+var_74]
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+0Ch]
		add	ecx, [ebp+var_74]
		mov	edx, [ebp+arg_4]
		mov	[edx+0Ch], ecx
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+4]
		add	ecx, [ebp+var_74]
		mov	edx, [ebp+arg_4]
		mov	[edx+4], ecx
		mov	eax, [ebp+var_5C]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+0Ch]
		push	edx
		mov	eax, [ebp+var_2C]
		push	eax
		call	_uprv_min_56
		add	esp, 8
		push	eax
		call	_uprv_min_56
		add	esp, 8
		push	eax
		mov	ecx, [ebp+var_38]
		push	ecx
		call	_uprv_max_56
		add	esp, 8
		mov	edx, [ebp+arg_4]
		mov	[edx+8], eax
		mov	eax, 2

loc_1590:				; CODE XREF: icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed	char)+CBj
					; icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed char)+F9j	...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN21
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 13Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?matchAndReplace@TransliterationRule@icu_56@@QBE?AW4UMatchDegree@2@AAVReplaceable@2@AAUUTransPosition@@C@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN21		dd 2			; DATA XREF: icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed	char)+2C0o
		dd offset $LN20
$LN20		dd 0FFFFFFD4h, 4	; DATA XREF: .text:000015BCo
		dd offset $LN18		; "oText"
		dd 0FFFFFFA4h, 4
		dd offset $LN19		; "newStart"
$LN19		db 'newStart',0         ; DATA XREF: .text:000015D4o
$LN18		db 'oText',0            ; DATA XREF: .text:000015C8o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 15E8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl icu_56::posBefore(icu_56::Replaceable *, int)
?posBefore@icu_56@@YAHABVReplaceable@1@H@Z proc	near
					; CODE XREF: icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed	char)+66p
					; icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed char)+7Cp

var_C4		= dword	ptr -0C4h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C4]
		mov	ecx, 31h ; '1'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_4], 0
		jle	short loc_1640
		mov	eax, [ebp+arg_4]
		sub	eax, 1
		mov	esi, esp
		push	eax		; int
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?char32At@Replaceable@icu_56@@QBEHH@Z ; icu_56::Replaceable::char32At(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, 0FFFFh
		cmp	ecx, eax
		sbb	edx, edx
		neg	edx
		add	edx, 1
		mov	eax, [ebp+arg_4]
		sub	eax, edx
		mov	[ebp+var_C4], eax
		jmp	short loc_164C
; ---------------------------------------------------------------------------

loc_1640:				; CODE XREF: icu_56::posBefore(icu_56::Replaceable const &,int)+22j
		mov	ecx, [ebp+arg_4]
		sub	ecx, 1
		mov	[ebp+var_C4], ecx

loc_164C:				; CODE XREF: icu_56::posBefore(icu_56::Replaceable const &,int)+56j
		mov	eax, [ebp+var_C4]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?posBefore@icu_56@@YAHABVReplaceable@1@H@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1668h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl icu_56::posAfter(icu_56::Replaceable *, int)
?posAfter@icu_56@@YAHABVReplaceable@1@H@Z proc near
					; CODE XREF: icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed	char)+D8p

var_C4		= dword	ptr -0C4h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C4]
		mov	ecx, 31h ; '1'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_4], 0
		jl	short loc_16D2
		mov	esi, esp
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?length@Replaceable@icu_56@@QBEHXZ ;	icu_56::Replaceable::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	[ebp+arg_4], eax
		jge	short loc_16D2
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax		; int
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?char32At@Replaceable@icu_56@@QBEHH@Z ; icu_56::Replaceable::char32At(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, 0FFFFh
		cmp	ecx, eax
		sbb	edx, edx
		neg	edx
		add	edx, 1
		add	edx, [ebp+arg_4]
		mov	[ebp+var_C4], edx
		jmp	short loc_16DE
; ---------------------------------------------------------------------------

loc_16D2:				; CODE XREF: icu_56::posAfter(icu_56::Replaceable const	&,int)+22j
					; icu_56::posAfter(icu_56::Replaceable const &,int)+39j
		mov	eax, [ebp+arg_4]
		add	eax, 1
		mov	[ebp+var_C4], eax

loc_16DE:				; CODE XREF: icu_56::posAfter(icu_56::Replaceable const	&,int)+68j
		mov	eax, [ebp+var_C4]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?posAfter@icu_56@@YAHABVReplaceable@1@H@Z endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 16F8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::UnicodeString *__thiscall icu_56::TransliterationRule::toRule(icu_56::TransliterationRule *__hidden this, struct icu_56::UnicodeString	*, signed __int8)
		public ?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z
?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z proc near
					; DATA XREF: .rdata:0000092Co

var_1D4		= dword	ptr -1D4h
var_1CD		= byte ptr -1CDh
var_1C8		= dword	ptr -1C8h
var_1BC		= byte ptr -1BCh
var_B1		= byte ptr -0B1h
var_A8		= byte ptr -0A8h
var_60		= byte ptr -60h
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 1C8h
		push	ebx
		push	esi
		push	edi		; struct icu_56::UnicodeString *
		push	ecx
		lea	edi, [ebp+var_1D4]
		mov	ecx, 72h ; 'r'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_18], ecx
		mov	esi, esp
		lea	ecx, [ebp+var_60] ; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@XZ ; icu_56::UnicodeString::UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0
		mov	esi, esp
		lea	ecx, [ebp+var_A8] ; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@XZ ; icu_56::UnicodeString::UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	byte ptr [ebp+var_4], 1
		mov	eax, [ebp+var_18]
		cmp	dword ptr [eax+4], 0
		jnz	short loc_178A
		mov	ecx, [ebp+var_18]
		cmp	dword ptr [ecx+0Ch], 0
		jnz	short loc_178A
		mov	[ebp+var_1CD], 0
		jmp	short loc_1791
; ---------------------------------------------------------------------------

loc_178A:				; CODE XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+7Ej
					; icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed char)+87j
		mov	[ebp+var_1CD], 1

loc_1791:				; CODE XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+90j
		mov	dl, [ebp+var_1CD]
		mov	[ebp+var_B1], dl
		mov	eax, [ebp+var_18]
		movsx	ecx, byte ptr [eax+64h]
		and	ecx, 1
		jz	short loc_17BD
		mov	esi, esp
		push	5Eh ; '^'       ; wchar_t
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z ; icu_56::UnicodeString::append(wchar_t)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_17BD:				; CODE XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+AFj
		mov	eax, [ebp+var_18]
		mov	ecx, [eax+4]
		mov	[ebp-1D0h], ecx
		cmp	dword ptr [ebp-1D0h], 0
		jz	short loc_17E3
		mov	edx, [ebp-1D0h]
		add	edx, 4
		mov	[ebp+var_1D4], edx
		jmp	short loc_17ED
; ---------------------------------------------------------------------------

loc_17E3:				; CODE XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+D8j
		mov	[ebp+var_1D4], 0

loc_17ED:				; CODE XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+E9j
		mov	esi, esp
		lea	eax, [ebp+var_A8]
		push	eax		; struct icu_56::UnicodeString *
		movzx	ecx, [ebp+arg_4]
		push	ecx		; signed __int8
		mov	edx, [ebp+var_1D4]
		push	edx		; struct icu_56::UnicodeMatcher	*
		mov	eax, [ebp+arg_0]
		push	eax		; struct icu_56::UnicodeString *
		call	dword ptr ds:__imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@PBVUnicodeMatcher@2@C0@Z ; icu_56::ICU_Utility::appendToRule(icu_56::UnicodeString &,icu_56::UnicodeMatcher const *,signed char,icu_56::UnicodeString &)
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		movsx	eax, [ebp+var_B1]
		test	eax, eax
		jz	short loc_1847
		mov	esi, esp
		lea	eax, [ebp+var_A8]
		push	eax		; struct icu_56::UnicodeString *
		movzx	ecx, [ebp+arg_4]
		push	ecx		; signed __int8
		push	1		; signed __int8
		push	7Bh ; '{'       ; int
		mov	edx, [ebp+arg_0]
		push	edx		; struct icu_56::UnicodeString *
		call	dword ptr ds:__imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@HCC0@Z ; icu_56::ICU_Utility::appendToRule(icu_56::UnicodeString &,int,signed char,signed char,icu_56::UnicodeString	&)
		add	esp, 14h
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1847:				; CODE XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+127j
		mov	eax, [ebp+var_18]
		mov	ecx, [eax+8]
		mov	[ebp-1D0h], ecx
		cmp	dword ptr [ebp-1D0h], 0
		jz	short loc_186D
		mov	edx, [ebp-1D0h]
		add	edx, 4
		mov	[ebp+var_1D4], edx
		jmp	short loc_1877
; ---------------------------------------------------------------------------

loc_186D:				; CODE XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+162j
		mov	[ebp+var_1D4], 0

loc_1877:				; CODE XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+173j
		mov	esi, esp
		lea	eax, [ebp+var_A8]
		push	eax		; struct icu_56::UnicodeString *
		movzx	ecx, [ebp+arg_4]
		push	ecx		; signed __int8
		mov	edx, [ebp+var_1D4]
		push	edx		; struct icu_56::UnicodeMatcher	*
		mov	eax, [ebp+arg_0]
		push	eax		; struct icu_56::UnicodeString *
		call	dword ptr ds:__imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@PBVUnicodeMatcher@2@C0@Z ; icu_56::ICU_Utility::appendToRule(icu_56::UnicodeString &,icu_56::UnicodeMatcher const *,signed char,icu_56::UnicodeString &)
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		movsx	eax, [ebp+var_B1]
		test	eax, eax
		jz	short loc_18D1
		mov	esi, esp
		lea	eax, [ebp+var_A8]
		push	eax		; struct icu_56::UnicodeString *
		movzx	ecx, [ebp+arg_4]
		push	ecx		; signed __int8
		push	1		; signed __int8
		push	7Dh ; '}'       ; int
		mov	edx, [ebp+arg_0]
		push	edx		; struct icu_56::UnicodeString *
		call	dword ptr ds:__imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@HCC0@Z ; icu_56::ICU_Utility::appendToRule(icu_56::UnicodeString &,int,signed char,signed char,icu_56::UnicodeString	&)
		add	esp, 14h
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_18D1:				; CODE XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+1B1j
		mov	eax, [ebp+var_18]
		mov	ecx, [eax+0Ch]
		mov	[ebp-1D0h], ecx
		cmp	dword ptr [ebp-1D0h], 0
		jz	short loc_18F7
		mov	edx, [ebp-1D0h]
		add	edx, 4
		mov	[ebp+var_1D4], edx
		jmp	short loc_1901
; ---------------------------------------------------------------------------

loc_18F7:				; CODE XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+1ECj
		mov	[ebp+var_1D4], 0

loc_1901:				; CODE XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+1FDj
		mov	esi, esp
		lea	eax, [ebp+var_A8]
		push	eax		; struct icu_56::UnicodeString *
		movzx	ecx, [ebp+arg_4]
		push	ecx		; signed __int8
		mov	edx, [ebp+var_1D4]
		push	edx		; struct icu_56::UnicodeMatcher	*
		mov	eax, [ebp+arg_0]
		push	eax		; struct icu_56::UnicodeString *
		call	dword ptr ds:__imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@PBVUnicodeMatcher@2@C0@Z ; icu_56::ICU_Utility::appendToRule(icu_56::UnicodeString &,icu_56::UnicodeMatcher const *,signed char,icu_56::UnicodeString &)
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_18]
		movsx	ecx, byte ptr [eax+64h]
		and	ecx, 2
		jz	short loc_194A
		mov	esi, esp
		push	24h ; '$'       ; wchar_t
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z ; icu_56::UnicodeString::append(wchar_t)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_194A:				; CODE XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+23Cj
		mov	esi, esp
		lea	eax, [ebp+var_A8]
		push	eax		; struct icu_56::UnicodeString *
		movzx	ecx, [ebp+arg_4]
		push	ecx		; signed __int8
		push	1		; signed __int8
		mov	edi, esp
		push	3		; int
		push	offset _FORWARD_OP ; " > "
		push	1		; signed __int8
		lea	ecx, [ebp+var_1BC] ; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@CPB_WH@Z ; icu_56::UnicodeString::UnicodeString(signed char,wchar_t const *,int)
		cmp	edi, esp
		call	__RTC_CheckEsp
		mov	[ebp-1D0h], eax
		mov	edx, [ebp-1D0h]
		mov	[ebp+var_1D4], edx
		mov	byte ptr [ebp+var_4], 2
		mov	eax, [ebp+var_1D4]
		push	eax		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+arg_0]
		push	ecx		; struct icu_56::UnicodeString *
		call	dword ptr ds:__imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@ABV32@CC0@Z ; icu_56::ICU_Utility::appendToRule(icu_56::UnicodeString &,icu_56::UnicodeString const &,signed	char,signed char,icu_56::UnicodeString &)
		add	esp, 14h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	byte ptr [ebp+var_4], 1
		mov	esi, esp
		lea	ecx, [ebp+var_1BC] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_18]
		mov	ecx, [eax+10h]
		mov	edx, [ebp+var_18]
		mov	eax, [edx+10h]
		mov	edx, [ecx]
		mov	esi, esp
		mov	ecx, eax
		mov	eax, [edx+10h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp-1D0h], eax
		mov	esi, esp
		lea	ecx, [ebp+var_A8]
		push	ecx
		movzx	edx, [ebp+arg_4]
		push	edx
		push	offset unk_1	; struct icu_56::UnicodeString *
		mov	edi, esp
		movzx	eax, [ebp+arg_4]
		push	eax		; signed __int8
		lea	ecx, [ebp+var_60]
		push	ecx		; signed __int8
		mov	edx, [ebp-1D0h]
		mov	eax, [edx]
		mov	ecx, [ebp-1D0h]
		mov	edx, [eax+8]
		call	edx
		cmp	edi, esp
		call	__RTC_CheckEsp
		push	eax		; struct icu_56::UnicodeString *
		mov	eax, [ebp+arg_0]
		push	eax		; struct icu_56::UnicodeString *
		call	dword ptr ds:__imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@ABV32@CC0@Z ; icu_56::ICU_Utility::appendToRule(icu_56::UnicodeString &,icu_56::UnicodeString const &,signed	char,signed char,icu_56::UnicodeString &)
		add	esp, 14h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		lea	eax, [ebp+var_A8]
		push	eax		; struct icu_56::UnicodeString *
		movzx	ecx, [ebp+arg_4]
		push	ecx		; signed __int8
		push	1		; signed __int8
		push	3Bh ; ';'       ; int
		mov	edx, [ebp+arg_0]
		push	edx		; struct icu_56::UnicodeString *
		call	dword ptr ds:__imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@HCC0@Z ; icu_56::ICU_Utility::appendToRule(icu_56::UnicodeString &,int,signed char,signed char,icu_56::UnicodeString	&)
		add	esp, 14h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_1C8], eax
		mov	byte ptr [ebp+var_4], 0
		mov	esi, esp
		lea	ecx, [ebp+var_A8] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		lea	ecx, [ebp+var_60] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_1C8]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN22
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1D4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN22		dd 2			; DATA XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+3A3o
		dd offset $LN21_0
$LN21_0		dd 0FFFFFFA0h, 40h	; DATA XREF: .text:00001AD8o
		dd offset $LN18_0	; "str"
		dd 0FFFFFF58h, 40h
		dd offset $LN19_0	; "quoteBuf"
$LN19_0		db 'quoteBuf',0         ; DATA XREF: .text:00001AF0o
$LN18_0		db 'str',0              ; DATA XREF: .text:00001AE4o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 1B04h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z$0 proc near
					; DATA XREF: .xdata$x:00001B6Co
		mov	esi, esp
		lea	ecx, [ebp-60h]	; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z$1 proc near
					; DATA XREF: .xdata$x:00001B74o
		mov	esi, esp
		lea	ecx, [ebp-0A8h]	; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z$2 proc near
					; DATA XREF: .xdata$x:00001B7Co
		mov	esi, esp
		lea	ecx, [ebp-1BCh]	; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z$2 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z	proc near
					; DATA XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-1D8h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z
		jmp	___CxxFrameHandler3
__ehhandler$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z	endp

_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 1B68h
__unwindtable$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00001B88o
		dd offset __unwindfunclet$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z$0
		dd 0
		dd offset __unwindfunclet$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z$1
		dd 1
		dd offset __unwindfunclet$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z$2
__ehfuncinfo$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z dd 19930522h, 3
					; DATA XREF: __ehhandler$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z+1Eo
		dd offset __unwindtable$?toRule@TransliterationRule@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z
		align 20h
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1BA4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::TransliterationRule::setData(icu_56::TransliterationRule *this, const	struct icu_56::TransliterationRuleData *)
		public ?setData@TransliterationRule@icu_56@@QAEXPBVTransliterationRuleData@2@@Z
?setData@TransliterationRule@icu_56@@QAEXPBVTransliterationRuleData@2@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+68h], ecx
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+4], 0
		jz	short loc_1BF9
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	edx, [edx]
		mov	eax, [edx+14h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1BF9:				; CODE XREF: icu_56::TransliterationRule::setData(icu_56::TransliterationRuleData const	*)+33j
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+0Ch], 0
		jz	short loc_1C22
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+0Ch]
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+0Ch]
		mov	edx, [edx]
		mov	eax, [edx+14h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1C22:				; CODE XREF: icu_56::TransliterationRule::setData(icu_56::TransliterationRuleData const	*)+5Cj
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+8], 0
		jz	short loc_1C4B
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+8]
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+8]
		mov	edx, [edx]
		mov	eax, [edx+14h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1C4B:				; CODE XREF: icu_56::TransliterationRule::setData(icu_56::TransliterationRuleData const	*)+85j
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+10h]
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+10h]
		mov	edx, [edx]
		mov	eax, [edx+14h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?setData@TransliterationRule@icu_56@@QAEXPBVTransliterationRuleData@2@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1C84h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::TransliterationRule::addSourceSetTo(icu_56::TransliterationRule *this, struct	icu_56::UnicodeSet *)
		public ?addSourceSetTo@TransliterationRule@icu_56@@QBEXAAVUnicodeSet@2@@Z
?addSourceSetTo@TransliterationRule@icu_56@@QBEXAAVUnicodeSet@2@@Z proc	near

var_FC		= byte ptr -0FCh
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0FCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_FC]
		mov	ecx, 3Fh ; '?'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+5Ch]
		mov	edx, [ebp+var_8]
		add	ecx, [edx+60h]
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+5Ch]
		mov	[ebp+var_20], ecx

loc_1CBF:				; CODE XREF: icu_56::TransliterationRule::addSourceSetTo(icu_56::UnicodeSet &):loc_1D46j
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+var_14]
		jge	loc_1D4B
		mov	esi, esp
		mov	eax, [ebp+var_20]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		add	ecx, 14h	; this
		call	dword ptr ds:__imp_?char32At@UnicodeString@icu_56@@QBEHH@Z ; icu_56::UnicodeString::char32At(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_2C], eax
		mov	eax, 0FFFFh
		cmp	eax, [ebp+var_2C]
		sbb	ecx, ecx
		neg	ecx
		add	ecx, 1
		add	ecx, [ebp+var_20]
		mov	[ebp+var_20], ecx
		mov	eax, [ebp+var_2C]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		mov	ecx, [ecx+68h]	; this
		call	?lookupMatcher@TransliterationRuleData@icu_56@@QBEPAVUnicodeMatcher@2@H@Z ; icu_56::TransliterationRuleData::lookupMatcher(int)
		mov	[ebp+var_38], eax
		cmp	[ebp+var_38], 0
		jnz	short loc_1D2C
		mov	esi, esp
		mov	eax, [ebp+var_2C]
		push	eax		; int
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?add@UnicodeSet@icu_56@@QAEAAV12@H@Z	; icu_56::UnicodeSet::add(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_1D46
; ---------------------------------------------------------------------------

loc_1D2C:				; CODE XREF: icu_56::TransliterationRule::addSourceSetTo(icu_56::UnicodeSet &)+8Ej
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_38]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_38]
		mov	eax, [edx+10h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1D46:				; CODE XREF: icu_56::TransliterationRule::addSourceSetTo(icu_56::UnicodeSet &)+A6j
		jmp	loc_1CBF
; ---------------------------------------------------------------------------

loc_1D4B:				; CODE XREF: icu_56::TransliterationRule::addSourceSetTo(icu_56::UnicodeSet &)+41j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0FCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?addSourceSetTo@TransliterationRule@icu_56@@QBEXAAVUnicodeSet@2@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1D64h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::TransliterationRule::addTargetSetTo(icu_56::TransliterationRule *this, struct	icu_56::UnicodeSet *)
		public ?addTargetSetTo@TransliterationRule@icu_56@@QBEXAAVUnicodeSet@2@@Z
?addTargetSetTo@TransliterationRule@icu_56@@QBEXAAVUnicodeSet@2@@Z proc	near

var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+10h]
		mov	edx, [ebp+var_8]
		mov	eax, [edx+10h]
		mov	edx, [ecx]
		mov	esi, esp
		mov	ecx, eax
		mov	eax, [edx+10h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_D0], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_D0]
		mov	eax, [edx]
		mov	ecx, [ebp+var_D0]
		mov	edx, [eax+0Ch]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?addTargetSetTo@TransliterationRule@icu_56@@QBEXAAVUnicodeSet@2@@Z endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; const	type_info::`vftable'
		extrn ??_7type_info@@6B@:near
					; DATA XREF: .data:icu_56::UnicodeReplacer `RTTI Type Descriptor'o
					; .data:icu_56::TransliterationRule `RTTI Type Descriptor'o ...
		extrn __purecall:near	; DATA XREF: .rdata:000001B4o
					; .rdata:000001B8o ...
; _DWORD __thiscall icu_56::UnicodeReplacer::~UnicodeReplacer(icu_56::UnicodeReplacer *__hidden	this)
		extrn ??1UnicodeReplacer@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::UnicodeReplacer::`scalar deleting destructor'(uint)+26p
					; icu_56::UnicodeReplacer::`vector deleting destructor'(uint)+64p
					; DATA XREF: ...
		extrn __RTC_CheckEsp:near
					; CODE XREF: icu_56::UnicodeReplacer::`scalar deleting destructor'(uint)+4Dp
					; icu_56::UnicodeReplacer::`vector deleting destructor'(uint)+8Bp ...
; void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *))
		extrn ??_M@YGXPAXIHP6EX0@Z@Z:near
					; CODE XREF: icu_56::UnicodeReplacer::`vector deleting destructor'(uint)+3Dp
; void __cdecl icu_56::UMemory::operator delete(void *)
		extrn __imp_??3UMemory@icu_56@@SAXPAX@Z:near
					; CODE XREF: __unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$1+9p
					; __unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$2+9p ...
; _DWORD __thiscall icu_56::UnicodeString::~UnicodeString(icu_56::UnicodeString	*__hidden this)
		extrn __imp_??1UnicodeString@icu_56@@UAE@XZ:near
					; CODE XREF: __unwindfunclet$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z$0+8p
					; __unwindfunclet$??0TransliterationRule@icu_56@@QAE@AAV01@@Z$0+8p ...
; _DWORD __thiscall icu_56::StringReplacer::StringReplacer(icu_56::StringReplacer *__hidden this, const	struct icu_56::UnicodeString *,	int, const struct icu_56::TransliterationRuleData *)
		extrn ??0StringReplacer@icu_56@@QAE@ABVUnicodeString@1@HPBVTransliterationRuleData@1@@Z:near
					; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+457p
; _DWORD __thiscall icu_56::StringMatcher::StringMatcher(icu_56::StringMatcher *__hidden this, const struct icu_56::UnicodeString *, int, int, int, const struct icu_56::TransliterationRuleData *)
		extrn ??0StringMatcher@icu_56@@QAE@ABVUnicodeString@1@HHHABVTransliterationRuleData@1@@Z:near
					; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+23Ap
					; icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const &,int,int,icu_56::UnicodeFunctor *	*,int,signed char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+2ECp ...
; void *__cdecl	static icu_56::UMemory::operator new(unsigned int)
		extrn __imp_??2UMemory@icu_56@@SAPAXI@Z:near
					; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+1F8p
					; icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const &,int,int,icu_56::UnicodeFunctor *	*,int,signed char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+29Fp ...
; __declspec(dllimport)	public:	class icu_56::UnicodeString & __thiscall icu_56::UnicodeString::operator=(class	icu_56::UnicodeString const &)
		extrn __imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z:near
					; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+199p
					; DATA XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+199r
; int __thiscall icu_56::UnicodeString::length(icu_56::UnicodeString *__hidden this)
		extrn __imp_?length@UnicodeString@icu_56@@QBEHXZ:near
					; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+ABp
					; icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const &,int,int,icu_56::UnicodeFunctor *	*,int,signed char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+DFp ...
; _DWORD __thiscall icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString *__hidden this)
		extrn __imp_??0UnicodeString@icu_56@@QAE@XZ:near
					; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+53p
					; icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed char)+4Ap	...
		extrn ___security_cookie:near
					; DATA XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::UnicodeString const &,int,int,icu_56::UnicodeString const	&,int,int,icu_56::UnicodeFunctor * *,int,signed	char,signed char,icu_56::TransliterationRuleData const *,UErrorCode &)+2Er
					; icu_56::TransliterationRule::TransliterationRule(icu_56::TransliterationRule &)+2Er ...
		extrn ___CxxFrameHandler3:near
					; CODE XREF: __ehhandler$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z+19j
					; __ehhandler$??0TransliterationRule@icu_56@@QAE@AAV01@@Z+19j ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: __ehhandler$??0TransliterationRule@icu_56@@QAE@ABVUnicodeString@1@HH0HHPAPAVUnicodeFunctor@1@HCCPBVTransliterationRuleData@1@AAW4UErrorCode@@@Z+Fp
					; __ehhandler$??0TransliterationRule@icu_56@@QAE@AAV01@@Z+Fp ...
; public: virtual void * __thiscall icu_56::TransliterationRule::`scalar deleting destructor'(unsigned int)
		extrn ??_GTransliterationRule@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::TransliterationRule::`vector deleting destructor'(unsigned int)
		extrn ??_ETransliterationRule@icu_56@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:const icu_56::TransliterationRule::`vftable'o
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::TransliterationRule &)+138p
		extrn _uprv_checkValidMemory:near
					; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::TransliterationRule &)+118p
		extrn _uprv_malloc_56:near
					; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::TransliterationRule &)+101p
; _DWORD __thiscall icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString *__hidden this, const struct icu_56::UnicodeString *)
		extrn __imp_??0UnicodeString@icu_56@@QAE@ABV01@@Z:near
					; CODE XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::TransliterationRule &)+96p
					; DATA XREF: icu_56::TransliterationRule::TransliterationRule(icu_56::TransliterationRule &)+96r
		extrn _uprv_free_56:near
					; CODE XREF: icu_56::TransliterationRule::~TransliterationRule(void)+59p
; struct icu_56::UnicodeMatcher	*__thiscall icu_56::TransliterationRuleData::lookupMatcher(icu_56::TransliterationRuleData *__hidden this, int)
		extrn ?lookupMatcher@TransliterationRuleData@icu_56@@QBEPAVUnicodeMatcher@2@H@Z:near
					; CODE XREF: icu_56::TransliterationRule::getIndexValue(void)+6Ep
					; icu_56::TransliterationRule::addSourceSetTo(icu_56::UnicodeSet &)+82p
; int __thiscall icu_56::UnicodeString::char32At(icu_56::UnicodeString *__hidden this, int)
		extrn __imp_?char32At@UnicodeString@icu_56@@QBEHH@Z:near
					; CODE XREF: icu_56::TransliterationRule::getIndexValue(void)+54p
					; icu_56::TransliterationRule::addSourceSetTo(icu_56::UnicodeSet &)+53p
					; DATA XREF: ...
; signed __int8	__thiscall icu_56::UnicodeString::compare(icu_56::UnicodeString	*__hidden this,	int, int, const	struct icu_56::UnicodeString *)
		extrn __imp_?compare@UnicodeString@icu_56@@QBECHHABV12@@Z:near
					; CODE XREF: icu_56::TransliterationRule::masks(icu_56::TransliterationRule const &)+8Bp
					; DATA XREF: icu_56::TransliterationRule::masks(icu_56::TransliterationRule const &)+8Br
		extrn _uprv_max_56:near	; CODE XREF: icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed	char)+2A9p
		extrn _uprv_min_56:near	; CODE XREF: icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed	char)+293p
					; icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed char)+29Cp
; void __thiscall icu_56::StringMatcher::resetMatch(icu_56::StringMatcher *__hidden this)
		extrn ?resetMatch@StringMatcher@icu_56@@QAEXXZ:near
					; CODE XREF: icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed	char)+55p
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near
					; CODE XREF: icu_56::TransliterationRule::matchAndReplace(icu_56::Replaceable &,UTransPosition &,signed	char)+2C6p
					; icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed char)+3A9p
; int __thiscall icu_56::Replaceable::char32At(icu_56::Replaceable *__hidden this, int)
		extrn __imp_?char32At@Replaceable@icu_56@@QBEHH@Z:near
					; CODE XREF: icu_56::posBefore(icu_56::Replaceable const &,int)+30p
					; icu_56::posAfter(icu_56::Replaceable const &,int)+44p
					; DATA XREF: ...
; int __thiscall icu_56::Replaceable::length(icu_56::Replaceable *__hidden this)
		extrn __imp_?length@Replaceable@icu_56@@QBEHXZ:near
					; CODE XREF: icu_56::posAfter(icu_56::Replaceable const	&,int)+29p
					; DATA XREF: icu_56::posAfter(icu_56::Replaceable const	&,int)+29r
; void __cdecl static icu_56::ICU_Utility::appendToRule(struct icu_56::UnicodeString *,	const struct icu_56::UnicodeString *, signed __int8, signed __int8, struct icu_56::UnicodeString *)
		extrn __imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@ABV32@CC0@Z:near
					; CODE XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+2A1p
					; icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed char)+328p
					; DATA XREF: ...
; _DWORD __thiscall icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString *__hidden this, signed __int8, const wchar_t *, int)
		extrn __imp_??0UnicodeString@icu_56@@QAE@CPB_WH@Z:near
					; CODE XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+273p
					; DATA XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+273r
; void __cdecl static icu_56::ICU_Utility::appendToRule(struct icu_56::UnicodeString *,	int, signed __int8, signed __int8, struct icu_56::UnicodeString	*)
		extrn __imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@HCC0@Z:near
					; CODE XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+13Fp
					; icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed char)+1C9p ...
; void __cdecl static icu_56::ICU_Utility::appendToRule(struct icu_56::UnicodeString *,	const struct icu_56::UnicodeMatcher *, signed __int8, struct icu_56::UnicodeString *)
		extrn __imp_?appendToRule@ICU_Utility@icu_56@@SAXAAVUnicodeString@2@PBVUnicodeMatcher@2@C0@Z:near
					; CODE XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+10Ep
					; icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed char)+198p ...
; struct icu_56::UnicodeString *__thiscall icu_56::UnicodeString::append(icu_56::UnicodeString *__hidden this, wchar_t)
		extrn __imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z:near
					; CODE XREF: icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed	char)+B8p
					; icu_56::TransliterationRule::toRule(icu_56::UnicodeString &,signed char)+245p
					; DATA XREF: ...
; struct icu_56::UnicodeSet *__thiscall	icu_56::UnicodeSet::add(icu_56::UnicodeSet *__hidden this, int)
		extrn __imp_?add@UnicodeSet@icu_56@@QAEAAV12@H@Z:near
					; CODE XREF: icu_56::TransliterationRule::addSourceSetTo(icu_56::UnicodeSet &)+99p
					; DATA XREF: icu_56::TransliterationRule::addSourceSetTo(icu_56::UnicodeSet &)+99r


		end
