;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	3ADD19C2785F8DEA2E9B1055CFE3B417
; Input	CRC32 :	F600A63B

; File Name   :	D:\compspace\objfiles\firefox\i18n\decContext.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"
;
; Exported entry
;

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_decContextClearStatus_56
_uprv_decContextClearStatus_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		not	eax
		mov	ecx, [ebp+arg_0]
		and	eax, [ecx+14h]
		mov	edx, [ebp+arg_0]
		mov	[edx+14h], eax
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uprv_decContextClearStatus_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 3Ch
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 40h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 44h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_decContextDefault_56
_uprv_decContextDefault_56 proc	near

var_C4		= dword	ptr -0C4h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C4]
		mov	ecx, 31h ; '1'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 9
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+4], 3B9AC9FFh
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+8], 0C4653601h
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+0Ch], 2
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+10h], 22DFh
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+14h], 0
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+18h], 0
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_C4], eax
		cmp	[ebp+var_C4], 80h ; '€' ; switch 129 cases
		ja	$LN1		; jumptable 000000CA default case
		mov	ecx, [ebp+var_C4]
		movzx	edx, ds:$LN10[ecx]
		jmp	ds:$LN11[edx*4]	; switch jump
; ---------------------------------------------------------------------------

$LN5:					; CODE XREF: _uprv_decContextDefault_56+86j
					; DATA XREF: .text:$LN11o
		jmp	loc_198		; jumptable 000000CA case 0
; ---------------------------------------------------------------------------

$LN4:					; CODE XREF: _uprv_decContextDefault_56+86j
					; DATA XREF: .text:$LN11o
		mov	eax, [ebp+arg_0] ; jumptable 000000CA case 32
		mov	dword ptr [eax], 7
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+4], 60h ; '`'
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+8], 0FFFFFFA1h
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+0Ch], 3
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+10h], 0
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+18h], 1
		jmp	loc_198
; ---------------------------------------------------------------------------

$LN3:					; CODE XREF: _uprv_decContextDefault_56+86j
					; DATA XREF: .text:$LN11o
		mov	eax, [ebp+arg_0] ; jumptable 000000CA case 64
		mov	dword ptr [eax], 10h
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+4], 180h
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+8], 0FFFFFE81h
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+0Ch], 3
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+10h], 0
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+18h], 1
		jmp	short loc_198
; ---------------------------------------------------------------------------

$LN2:					; CODE XREF: _uprv_decContextDefault_56+86j
					; DATA XREF: .text:$LN11o
		mov	eax, [ebp+arg_0] ; jumptable 000000CA case 128
		mov	dword ptr [eax], 22h ; '"'
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+4], 1800h
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+8], 0FFFFE801h
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+0Ch], 3
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+10h], 0
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+18h], 1
		jmp	short loc_198
; ---------------------------------------------------------------------------

$LN1:					; CODE XREF: _uprv_decContextDefault_56+73j
					; _uprv_decContextDefault_56+86j
					; DATA XREF: ...
		push	80h ; '€'       ; jumptable 000000CA default case
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatus_56
		add	esp, 8

loc_198:				; CODE XREF: _uprv_decContextDefault_56:$LN5j
					; _uprv_decContextDefault_56+CAj ...
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uprv_decContextDefault_56 endp

; ---------------------------------------------------------------------------
		align 10h
$LN11		dd offset $LN5,	offset $LN4, offset $LN3, offset $LN2
					; DATA XREF: _uprv_decContextDefault_56+86r
		dd offset $LN1		; jump table for switch	statement
$LN10		db	0,     4,     4,     4 ; DATA XREF: _uprv_decContextDefault_56+7Fr
		db	4,     4,     4,     4 ; indirect table	for switch statement
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	1,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	2,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	3
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 248h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_decContextGetRounding_56
_uprv_decContextGetRounding_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uprv_decContextGetRounding_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 274h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_decContextGetStatus_56
_uprv_decContextGetStatus_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+14h]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uprv_decContextGetStatus_56 endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2A0h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_decContextRestoreStatus_56
_uprv_decContextRestoreStatus_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		not	eax
		mov	ecx, [ebp+arg_0]
		and	eax, [ecx+14h]
		mov	edx, [ebp+arg_0]
		mov	[edx+14h], eax
		mov	eax, [ebp+arg_8]
		and	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		or	eax, [ecx+14h]
		mov	edx, [ebp+arg_0]
		mov	[edx+14h], eax
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uprv_decContextRestoreStatus_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2ECh
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_decContextSaveStatus_56
_uprv_decContextSaveStatus_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+14h]
		and	eax, [ebp+arg_4]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uprv_decContextSaveStatus_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 31Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_decContextSetRounding_56
_uprv_decContextSetRounding_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	[eax+0Ch], ecx
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uprv_decContextSetRounding_56 endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 350h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_decContextSetStatus_56
_uprv_decContextSetStatus_56 proc near	; CODE XREF: _uprv_decContextDefault_56+14Cp
					; _uprv_decContextSetStatusFromString_56+39p ...

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		or	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_0]
		mov	[edx+14h], ecx
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uprv_decContextSetStatus_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 388h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl uprv_decContextSetStatusFromString_56(int, char *Str1)
		public _uprv_decContextSetStatusFromString_56
_uprv_decContextSetStatusFromString_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
Str1		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		push	offset ??_C@_0BC@DKEMACAH@Conversion?5syntax?$AA@ ; "Conversion	syntax"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_3CE
		push	1
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatus_56
		add	esp, 8
		jmp	loc_5D3
; ---------------------------------------------------------------------------

loc_3CE:				; CODE XREF: _uprv_decContextSetStatusFromString_56+31j
		push	offset ??_C@_0BB@CAGHCAFL@Division?5by?5zero?$AA@ ; "Division by zero"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_3F6
		push	2
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatus_56
		add	esp, 8
		jmp	loc_5D3
; ---------------------------------------------------------------------------

loc_3F6:				; CODE XREF: _uprv_decContextSetStatusFromString_56+59j
		push	offset ??_C@_0BE@OFKMNEBI@Division?5impossible?$AA@ ; "Division	impossible"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_41E
		push	4
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatus_56
		add	esp, 8
		jmp	loc_5D3
; ---------------------------------------------------------------------------

loc_41E:				; CODE XREF: _uprv_decContextSetStatusFromString_56+81j
		push	offset ??_C@_0BD@DFCGAFBJ@Division?5undefined?$AA@ ; "Division undefined"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_446
		push	8
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatus_56
		add	esp, 8
		jmp	loc_5D3
; ---------------------------------------------------------------------------

loc_446:				; CODE XREF: _uprv_decContextSetStatusFromString_56+A9j
		push	offset ??_C@_07GEEFKCOC@Inexact?$AA@ ; "Inexact"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_46E
		push	20h ; ' '
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatus_56
		add	esp, 8
		jmp	loc_5D3
; ---------------------------------------------------------------------------

loc_46E:				; CODE XREF: _uprv_decContextSetStatusFromString_56+D1j
		push	offset ??_C@_0BF@JKJDAHKH@Insufficient?5storage?$AA@ ; "Insufficient storage"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_496
		push	10h
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatus_56
		add	esp, 8
		jmp	loc_5D3
; ---------------------------------------------------------------------------

loc_496:				; CODE XREF: _uprv_decContextSetStatusFromString_56+F9j
		push	offset ??_C@_0BA@NCIHHEPH@Invalid?5context?$AA@	; "Invalid context"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_4BE
		push	40h ; '@'
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatus_56
		add	esp, 8
		jmp	loc_5D3
; ---------------------------------------------------------------------------

loc_4BE:				; CODE XREF: _uprv_decContextSetStatusFromString_56+121j
		push	offset ??_C@_0BC@BPINLOPL@Invalid?5operation?$AA@ ; "Invalid operation"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_4E9
		push	80h ; '€'
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatus_56
		add	esp, 8
		jmp	loc_5D3
; ---------------------------------------------------------------------------

loc_4E9:				; CODE XREF: _uprv_decContextSetStatusFromString_56+149j
		push	offset ??_C@_08KJPBNJGC@Overflow?$AA@ ;	"Overflow"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_514
		push	200h
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatus_56
		add	esp, 8
		jmp	loc_5D3
; ---------------------------------------------------------------------------

loc_514:				; CODE XREF: _uprv_decContextSetStatusFromString_56+174j
		push	offset ??_C@_07PHGBKLPO@Clamped?$AA@ ; "Clamped"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_53F
		push	400h
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatus_56
		add	esp, 8
		jmp	loc_5D3
; ---------------------------------------------------------------------------

loc_53F:				; CODE XREF: _uprv_decContextSetStatusFromString_56+19Fj
		push	offset ??_C@_07HGAEHKED@Rounded?$AA@ ; "Rounded"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_567
		push	800h
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatus_56
		add	esp, 8
		jmp	short loc_5D3
; ---------------------------------------------------------------------------

loc_567:				; CODE XREF: _uprv_decContextSetStatusFromString_56+1CAj
		push	offset ??_C@_09IOIEBIGE@Subnormal?$AA@ ; "Subnormal"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_58F
		push	1000h
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatus_56
		add	esp, 8
		jmp	short loc_5D3
; ---------------------------------------------------------------------------

loc_58F:				; CODE XREF: _uprv_decContextSetStatusFromString_56+1F2j
		push	offset ??_C@_09FIFLEIAA@Underflow?$AA@ ; "Underflow"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_5B7
		push	2000h
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatus_56
		add	esp, 8
		jmp	short loc_5D3
; ---------------------------------------------------------------------------

loc_5B7:				; CODE XREF: _uprv_decContextSetStatusFromString_56+21Aj
		push	offset ??_C@_09LNLOOAGA@No?5status?$AA@	; "No status"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_5D1
		mov	eax, [ebp+arg_0]
		jmp	short loc_5D3
; ---------------------------------------------------------------------------

loc_5D1:				; CODE XREF: _uprv_decContextSetStatusFromString_56+242j
		xor	eax, eax

loc_5D3:				; CODE XREF: _uprv_decContextSetStatusFromString_56+41j
					; _uprv_decContextSetStatusFromString_56+69j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uprv_decContextSetStatusFromString_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5E8h
		public ??_C@_09LNLOOAGA@No?5status?$AA@
; char `string'[]
??_C@_09LNLOOAGA@No?5status?$AA@ db 'No status',0
					; DATA XREF: _uprv_decContextSetStatusFromString_56:loc_5B7o
					; _uprv_decContextSetStatusFromStringQuiet_56:loc_8EBo	...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5F4h
		public ??_C@_09FIFLEIAA@Underflow?$AA@
; char `string'[]
??_C@_09FIFLEIAA@Underflow?$AA@	db 'Underflow',0
					; DATA XREF: _uprv_decContextSetStatusFromString_56:loc_58Fo
					; _uprv_decContextSetStatusFromStringQuiet_56:loc_8C3o	...
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 600h
		public ??_C@_09IOIEBIGE@Subnormal?$AA@
; char `string'[]
??_C@_09IOIEBIGE@Subnormal?$AA@	db 'Subnormal',0
					; DATA XREF: _uprv_decContextSetStatusFromString_56:loc_567o
					; _uprv_decContextSetStatusFromStringQuiet_56:loc_89Bo	...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 60Ch
		public ??_C@_07HGAEHKED@Rounded?$AA@
; char `string'[]
??_C@_07HGAEHKED@Rounded?$AA@ db 'Rounded',0
					; DATA XREF: _uprv_decContextSetStatusFromString_56:loc_53Fo
					; _uprv_decContextSetStatusFromStringQuiet_56:loc_873o	...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 614h
		public ??_C@_07PHGBKLPO@Clamped?$AA@
; char `string'[]
??_C@_07PHGBKLPO@Clamped?$AA@ db 'Clamped',0
					; DATA XREF: _uprv_decContextSetStatusFromString_56:loc_514o
					; _uprv_decContextSetStatusFromStringQuiet_56:loc_848o	...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 61Ch
		public ??_C@_08KJPBNJGC@Overflow?$AA@
; char `string'[]
??_C@_08KJPBNJGC@Overflow?$AA@ db 'Overflow',0
					; DATA XREF: _uprv_decContextSetStatusFromString_56:loc_4E9o
					; _uprv_decContextSetStatusFromStringQuiet_56:loc_81Do	...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 628h
		public ??_C@_0BC@BPINLOPL@Invalid?5operation?$AA@
; char `string'[]
??_C@_0BC@BPINLOPL@Invalid?5operation?$AA@ db 'Invalid operation',0
					; DATA XREF: _uprv_decContextSetStatusFromString_56:loc_4BEo
					; _uprv_decContextSetStatusFromStringQuiet_56:loc_7F2o	...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 63Ch
		public ??_C@_0BA@NCIHHEPH@Invalid?5context?$AA@
; char `string'[]
??_C@_0BA@NCIHHEPH@Invalid?5context?$AA@ db 'Invalid context',0
					; DATA XREF: _uprv_decContextSetStatusFromString_56:loc_496o
					; _uprv_decContextSetStatusFromStringQuiet_56:loc_7CAo	...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 64Ch
		public ??_C@_0BF@JKJDAHKH@Insufficient?5storage?$AA@
; char `string'[]
??_C@_0BF@JKJDAHKH@Insufficient?5storage?$AA@ db 'Insufficient storage',0
					; DATA XREF: _uprv_decContextSetStatusFromString_56:loc_46Eo
					; _uprv_decContextSetStatusFromStringQuiet_56:loc_7A2o	...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 664h
		public ??_C@_07GEEFKCOC@Inexact?$AA@
; char `string'[]
??_C@_07GEEFKCOC@Inexact?$AA@ db 'Inexact',0
					; DATA XREF: _uprv_decContextSetStatusFromString_56:loc_446o
					; _uprv_decContextSetStatusFromStringQuiet_56:loc_77Ao	...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 66Ch
		public ??_C@_0BD@DFCGAFBJ@Division?5undefined?$AA@
; char `string'[]
??_C@_0BD@DFCGAFBJ@Division?5undefined?$AA@ db 'Division undefined',0
					; DATA XREF: _uprv_decContextSetStatusFromString_56:loc_41Eo
					; _uprv_decContextSetStatusFromStringQuiet_56:loc_752o	...
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 680h
		public ??_C@_0BE@OFKMNEBI@Division?5impossible?$AA@
; char `string'[]
??_C@_0BE@OFKMNEBI@Division?5impossible?$AA@ db	'Division impossible',0
					; DATA XREF: _uprv_decContextSetStatusFromString_56:loc_3F6o
					; _uprv_decContextSetStatusFromStringQuiet_56:loc_72Ao	...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 694h
		public ??_C@_0BB@CAGHCAFL@Division?5by?5zero?$AA@
; char `string'[]
??_C@_0BB@CAGHCAFL@Division?5by?5zero?$AA@ db 'Division by zero',0
					; DATA XREF: _uprv_decContextSetStatusFromString_56:loc_3CEo
					; _uprv_decContextSetStatusFromStringQuiet_56:loc_702o	...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6A8h
		public ??_C@_0BC@DKEMACAH@Conversion?5syntax?$AA@
; char `string'[]
??_C@_0BC@DKEMACAH@Conversion?5syntax?$AA@ db 'Conversion syntax',0
					; DATA XREF: _uprv_decContextSetStatusFromString_56+1Eo
					; _uprv_decContextSetStatusFromStringQuiet_56+1Eo ...
		align 4
_rdata		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 6BCh
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl uprv_decContextSetStatusFromStringQuiet_56(int, char *Str1)
		public _uprv_decContextSetStatusFromStringQuiet_56
_uprv_decContextSetStatusFromStringQuiet_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
Str1		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		push	offset ??_C@_0BC@DKEMACAH@Conversion?5syntax?$AA@ ; "Conversion	syntax"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_702
		push	1
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatusQuiet_56
		add	esp, 8
		jmp	loc_907
; ---------------------------------------------------------------------------

loc_702:				; CODE XREF: _uprv_decContextSetStatusFromStringQuiet_56+31j
		push	offset ??_C@_0BB@CAGHCAFL@Division?5by?5zero?$AA@ ; "Division by zero"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_72A
		push	2
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatusQuiet_56
		add	esp, 8
		jmp	loc_907
; ---------------------------------------------------------------------------

loc_72A:				; CODE XREF: _uprv_decContextSetStatusFromStringQuiet_56+59j
		push	offset ??_C@_0BE@OFKMNEBI@Division?5impossible?$AA@ ; "Division	impossible"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_752
		push	4
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatusQuiet_56
		add	esp, 8
		jmp	loc_907
; ---------------------------------------------------------------------------

loc_752:				; CODE XREF: _uprv_decContextSetStatusFromStringQuiet_56+81j
		push	offset ??_C@_0BD@DFCGAFBJ@Division?5undefined?$AA@ ; "Division undefined"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_77A
		push	8
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatusQuiet_56
		add	esp, 8
		jmp	loc_907
; ---------------------------------------------------------------------------

loc_77A:				; CODE XREF: _uprv_decContextSetStatusFromStringQuiet_56+A9j
		push	offset ??_C@_07GEEFKCOC@Inexact?$AA@ ; "Inexact"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_7A2
		push	20h ; ' '
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatusQuiet_56
		add	esp, 8
		jmp	loc_907
; ---------------------------------------------------------------------------

loc_7A2:				; CODE XREF: _uprv_decContextSetStatusFromStringQuiet_56+D1j
		push	offset ??_C@_0BF@JKJDAHKH@Insufficient?5storage?$AA@ ; "Insufficient storage"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_7CA
		push	10h
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatusQuiet_56
		add	esp, 8
		jmp	loc_907
; ---------------------------------------------------------------------------

loc_7CA:				; CODE XREF: _uprv_decContextSetStatusFromStringQuiet_56+F9j
		push	offset ??_C@_0BA@NCIHHEPH@Invalid?5context?$AA@	; "Invalid context"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_7F2
		push	40h ; '@'
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatusQuiet_56
		add	esp, 8
		jmp	loc_907
; ---------------------------------------------------------------------------

loc_7F2:				; CODE XREF: _uprv_decContextSetStatusFromStringQuiet_56+121j
		push	offset ??_C@_0BC@BPINLOPL@Invalid?5operation?$AA@ ; "Invalid operation"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_81D
		push	80h ; '€'
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatusQuiet_56
		add	esp, 8
		jmp	loc_907
; ---------------------------------------------------------------------------

loc_81D:				; CODE XREF: _uprv_decContextSetStatusFromStringQuiet_56+149j
		push	offset ??_C@_08KJPBNJGC@Overflow?$AA@ ;	"Overflow"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_848
		push	200h
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatusQuiet_56
		add	esp, 8
		jmp	loc_907
; ---------------------------------------------------------------------------

loc_848:				; CODE XREF: _uprv_decContextSetStatusFromStringQuiet_56+174j
		push	offset ??_C@_07PHGBKLPO@Clamped?$AA@ ; "Clamped"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_873
		push	400h
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatusQuiet_56
		add	esp, 8
		jmp	loc_907
; ---------------------------------------------------------------------------

loc_873:				; CODE XREF: _uprv_decContextSetStatusFromStringQuiet_56+19Fj
		push	offset ??_C@_07HGAEHKED@Rounded?$AA@ ; "Rounded"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_89B
		push	800h
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatusQuiet_56
		add	esp, 8
		jmp	short loc_907
; ---------------------------------------------------------------------------

loc_89B:				; CODE XREF: _uprv_decContextSetStatusFromStringQuiet_56+1CAj
		push	offset ??_C@_09IOIEBIGE@Subnormal?$AA@ ; "Subnormal"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_8C3
		push	1000h
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatusQuiet_56
		add	esp, 8
		jmp	short loc_907
; ---------------------------------------------------------------------------

loc_8C3:				; CODE XREF: _uprv_decContextSetStatusFromStringQuiet_56+1F2j
		push	offset ??_C@_09FIFLEIAA@Underflow?$AA@ ; "Underflow"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_8EB
		push	2000h
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_decContextSetStatusQuiet_56
		add	esp, 8
		jmp	short loc_907
; ---------------------------------------------------------------------------

loc_8EB:				; CODE XREF: _uprv_decContextSetStatusFromStringQuiet_56+21Aj
		push	offset ??_C@_09LNLOOAGA@No?5status?$AA@	; "No status"
		mov	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_905
		mov	eax, [ebp+arg_0]
		jmp	short loc_907
; ---------------------------------------------------------------------------

loc_905:				; CODE XREF: _uprv_decContextSetStatusFromStringQuiet_56+242j
		xor	eax, eax

loc_907:				; CODE XREF: _uprv_decContextSetStatusFromStringQuiet_56+41j
					; _uprv_decContextSetStatusFromStringQuiet_56+69j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_uprv_decContextSetStatusFromStringQuiet_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 91Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_decContextSetStatusQuiet_56
_uprv_decContextSetStatusQuiet_56 proc near
					; CODE XREF: _uprv_decContextSetStatusFromStringQuiet_56+39p
					; _uprv_decContextSetStatusFromStringQuiet_56+61p ...

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		or	ecx, [ebp+arg_4]
		mov	edx, [ebp+arg_0]
		mov	[edx+14h], ecx
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uprv_decContextSetStatusQuiet_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 954h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_decContextStatusToString_56
_uprv_decContextStatusToString_56 proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+14h]
		mov	[ebp+var_8], ecx
		cmp	[ebp+var_8], 80h ; '€'
		jnz	short loc_98E
		mov	eax, offset ??_C@_0BC@BPINLOPL@Invalid?5operation?$AA@ ; "Invalid operation"
		jmp	loc_A57
; ---------------------------------------------------------------------------

loc_98E:				; CODE XREF: _uprv_decContextStatusToString_56+2Ej
		cmp	[ebp+var_8], 2
		jnz	short loc_99E
		mov	eax, offset ??_C@_0BB@CAGHCAFL@Division?5by?5zero?$AA@ ; "Division by zero"
		jmp	loc_A57
; ---------------------------------------------------------------------------

loc_99E:				; CODE XREF: _uprv_decContextStatusToString_56+3Ej
		cmp	[ebp+var_8], 200h
		jnz	short loc_9B1
		mov	eax, offset ??_C@_08KJPBNJGC@Overflow?$AA@ ; "Overflow"
		jmp	loc_A57
; ---------------------------------------------------------------------------

loc_9B1:				; CODE XREF: _uprv_decContextStatusToString_56+51j
		cmp	[ebp+var_8], 2000h
		jnz	short loc_9C4
		mov	eax, offset ??_C@_09FIFLEIAA@Underflow?$AA@ ; "Underflow"
		jmp	loc_A57
; ---------------------------------------------------------------------------

loc_9C4:				; CODE XREF: _uprv_decContextStatusToString_56+64j
		cmp	[ebp+var_8], 20h ; ' '
		jnz	short loc_9D4
		mov	eax, offset ??_C@_07GEEFKCOC@Inexact?$AA@ ; "Inexact"
		jmp	loc_A57
; ---------------------------------------------------------------------------

loc_9D4:				; CODE XREF: _uprv_decContextStatusToString_56+74j
		cmp	[ebp+var_8], 4
		jnz	short loc_9E1
		mov	eax, offset ??_C@_0BE@OFKMNEBI@Division?5impossible?$AA@ ; "Division impossible"
		jmp	short loc_A57
; ---------------------------------------------------------------------------

loc_9E1:				; CODE XREF: _uprv_decContextStatusToString_56+84j
		cmp	[ebp+var_8], 8
		jnz	short loc_9EE
		mov	eax, offset ??_C@_0BD@DFCGAFBJ@Division?5undefined?$AA@	; "Division undefined"
		jmp	short loc_A57
; ---------------------------------------------------------------------------

loc_9EE:				; CODE XREF: _uprv_decContextStatusToString_56+91j
		cmp	[ebp+var_8], 800h
		jnz	short loc_9FE
		mov	eax, offset ??_C@_07HGAEHKED@Rounded?$AA@ ; "Rounded"
		jmp	short loc_A57
; ---------------------------------------------------------------------------

loc_9FE:				; CODE XREF: _uprv_decContextStatusToString_56+A1j
		cmp	[ebp+var_8], 400h
		jnz	short loc_A0E
		mov	eax, offset ??_C@_07PHGBKLPO@Clamped?$AA@ ; "Clamped"
		jmp	short loc_A57
; ---------------------------------------------------------------------------

loc_A0E:				; CODE XREF: _uprv_decContextStatusToString_56+B1j
		cmp	[ebp+var_8], 1000h
		jnz	short loc_A1E
		mov	eax, offset ??_C@_09IOIEBIGE@Subnormal?$AA@ ; "Subnormal"
		jmp	short loc_A57
; ---------------------------------------------------------------------------

loc_A1E:				; CODE XREF: _uprv_decContextStatusToString_56+C1j
		cmp	[ebp+var_8], 1
		jnz	short loc_A2B
		mov	eax, offset ??_C@_0BC@DKEMACAH@Conversion?5syntax?$AA@ ; "Conversion syntax"
		jmp	short loc_A57
; ---------------------------------------------------------------------------

loc_A2B:				; CODE XREF: _uprv_decContextStatusToString_56+CEj
		cmp	[ebp+var_8], 10h
		jnz	short loc_A38
		mov	eax, offset ??_C@_0BF@JKJDAHKH@Insufficient?5storage?$AA@ ; "Insufficient storage"
		jmp	short loc_A57
; ---------------------------------------------------------------------------

loc_A38:				; CODE XREF: _uprv_decContextStatusToString_56+DBj
		cmp	[ebp+var_8], 40h ; '@'
		jnz	short loc_A45
		mov	eax, offset ??_C@_0BA@NCIHHEPH@Invalid?5context?$AA@ ; "Invalid	context"
		jmp	short loc_A57
; ---------------------------------------------------------------------------

loc_A45:				; CODE XREF: _uprv_decContextStatusToString_56+E8j
		cmp	[ebp+var_8], 0
		jnz	short loc_A52
		mov	eax, offset ??_C@_09LNLOOAGA@No?5status?$AA@ ; "No status"
		jmp	short loc_A57
; ---------------------------------------------------------------------------

loc_A52:				; CODE XREF: _uprv_decContextStatusToString_56+F5j
		mov	eax, offset ??_C@_0BA@OJFKEGMI@Multiple?5status?$AA@ ; "Multiple status"

loc_A57:				; CODE XREF: _uprv_decContextStatusToString_56+35j
					; _uprv_decContextStatusToString_56+45j ...
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uprv_decContextStatusToString_56 endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A60h
		public ??_C@_0BA@OJFKEGMI@Multiple?5status?$AA@
; `string'
??_C@_0BA@OJFKEGMI@Multiple?5status?$AA@ db 'Multiple status',0
					; DATA XREF: _uprv_decContextStatusToString_56:loc_A52o
_rdata		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A70h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_decContextTestSavedStatus_56
_uprv_decContextTestSavedStatus_56 proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		and	eax, [ebp+arg_4]
		neg	eax
		sbb	eax, eax
		neg	eax
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uprv_decContextTestSavedStatus_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0AA4h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_decContextTestStatus_56
_uprv_decContextTestStatus_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+14h]
		and	eax, [ebp+arg_4]
		neg	eax
		sbb	eax, eax
		neg	eax
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uprv_decContextTestStatus_56 endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0AD8h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _uprv_decContextZeroStatus_56
_uprv_decContextZeroStatus_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+14h], 0
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_uprv_decContextZeroStatus_56 endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_CheckEsp:near ; CODE XREF: _uprv_decContextDefault_56+162p
					; _uprv_decContextSetStatusFromString_56+256p ...
; int __cdecl strcmp(const char	*Str1, const char *Str2)
		extrn _strcmp:near	; CODE XREF: _uprv_decContextSetStatusFromString_56+27p
					; _uprv_decContextSetStatusFromString_56+4Fp ...


		end
