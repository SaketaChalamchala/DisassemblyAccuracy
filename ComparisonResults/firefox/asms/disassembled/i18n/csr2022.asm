;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	9D099DFFA8451EC86FC338A4CA24760A
; Input	CRC32 :	4C39A5C8

; File Name   :	D:\compspace\objfiles\firefox\i18n\csr2022.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
; unsigned __int8 escapeSequences_2022JP[5]
_escapeSequences_2022JP	db 1Bh,'$(C',0  ; DATA XREF: icu_56::CharsetRecog_2022JP::match(icu_56::InputText *,icu_56::CharsetMatch *)+25o
aD		db 1Bh,'$(D',0
a@		db 1Bh,'$@',0
		dw 1B00h
		dd 4124h, 42241Bh, 40261B00h, 281B0000h, 1B000042h, 4828h
		dd 49281Bh, 4A281B00h, 2E1B0000h, 1B000041h, 462Eh
; unsigned __int8 escapeSequences_2022KR[5]
_escapeSequences_2022KR	db 1Bh,'$)C',0  ; DATA XREF: icu_56::CharsetRecog_2022KR::match(icu_56::InputText *,icu_56::CharsetMatch *)+25o
					; .rdata$r:00000364o ...
		align 4
; unsigned __int8 escapeSequences_2022CN[5]
_escapeSequences_2022CN	db 1Bh,'$)A',0  ; DATA XREF: icu_56::CharsetRecog_2022CN::match(icu_56::InputText *,icu_56::CharsetMatch *)+25o
aG		db 1Bh,'$)G',0
		db 1Bh,'$*H',0
aE		db 1Bh,'$)E',0
aI		db 1Bh,'$+I',0
aJ		db 1Bh,'$+J',0
aK		db 1Bh,'$+K',0
		db 1Bh,'$+L',0
aM		db 1Bh,'$+M',0
aN		db 1Bh,'N',0
		dd 4F1B0000h
		db 3 dup(0)
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 7Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int)
		public ??2@YAPAXI@Z
??2@YAPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??2@YAPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 0B4h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 0B8h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0BCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX@Z
??3@YAXPAX@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??3@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0F0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::CharsetRecog_2022::match_2022(icu_56::CharsetRecog_2022 *this,	const unsigned __int8 *, int, const unsigned __int8 (*const )[5], int)
		public ?match_2022@CharsetRecog_2022@icu_56@@IBEHPBEHQAY04$$CBEH@Z
?match_2022@CharsetRecog_2022@icu_56@@IBEHPBEHQAY04$$CBEH@Z proc near
					; CODE XREF: icu_56::CharsetRecog_2022JP::match(icu_56::InputText *,icu_56::CharsetMatch *)+3Ap
					; icu_56::CharsetRecog_2022KR::match(icu_56::InputText *,icu_56::CharsetMatch *)+3Ap ...

var_138		= byte ptr -138h
var_74		= dword	ptr -74h
Str		= dword	ptr -68h
var_5C		= dword	ptr -5Ch
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 138h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_138]
		mov	ecx, 4Eh ; 'N'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	[ebp+var_38], 0
		mov	[ebp+var_44], 0
		mov	[ebp+var_50], 0
		mov	[ebp+var_14], 0

loc_12F:				; CODE XREF: icu_56::CharsetRecog_2022::match_2022(uchar const *,int,uchar const (* const)[5],int)+12Dj
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+arg_4]
		jge	loc_222
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+var_14]
		movzx	ecx, byte ptr [eax]
		cmp	ecx, 1Bh
		jnz	loc_1EF
		mov	[ebp+var_2C], 0

loc_154:				; CODE XREF: icu_56::CharsetRecog_2022::match_2022(uchar const *,int,uchar const (* const)[5],int)+F1j
		mov	eax, [ebp+var_2C]
		cmp	eax, [ebp+arg_C]
		jge	loc_1E6
		mov	eax, [ebp+var_2C]
		imul	eax, 5
		add	eax, [ebp+arg_8]
		mov	[ebp+Str], eax
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		mov	[ebp+var_74], eax
		mov	eax, [ebp+arg_4]
		sub	eax, [ebp+var_14]
		cmp	eax, [ebp+var_74]
		jl	short $checkEscapes$8859
		mov	[ebp+var_20], 1

loc_18D:				; CODE XREF: icu_56::CharsetRecog_2022::match_2022(uchar const *,int,uchar const (* const)[5],int)+CCj
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+var_74]
		jge	short loc_1BE
		mov	eax, [ebp+Str]
		add	eax, [ebp+var_20]
		movzx	ecx, byte ptr [eax]
		mov	edx, [ebp+var_14]
		add	edx, [ebp+var_20]
		mov	eax, [ebp+arg_0]
		movzx	edx, byte ptr [eax+edx]
		cmp	ecx, edx
		jz	short loc_1B3
		jmp	short $checkEscapes$8859
; ---------------------------------------------------------------------------
		jmp	short $checkEscapes$8859
; ---------------------------------------------------------------------------

loc_1B3:				; CODE XREF: icu_56::CharsetRecog_2022::match_2022(uchar const *,int,uchar const (* const)[5],int)+BDj
		mov	eax, [ebp+var_20]
		add	eax, 1
		mov	[ebp+var_20], eax
		jmp	short loc_18D
; ---------------------------------------------------------------------------

loc_1BE:				; CODE XREF: icu_56::CharsetRecog_2022::match_2022(uchar const *,int,uchar const (* const)[5],int)+A3j
		mov	eax, [ebp+var_38]
		add	eax, 1
		mov	[ebp+var_38], eax
		mov	eax, [ebp+var_74]
		mov	ecx, [ebp+var_14]
		lea	edx, [ecx+eax-1]
		mov	[ebp+var_14], edx
		jmp	short $scanInput$8861
; ---------------------------------------------------------------------------
		jmp	short $scanInput$8861
; ---------------------------------------------------------------------------

$checkEscapes$8859:			; CODE XREF: icu_56::CharsetRecog_2022::match_2022(uchar const *,int,uchar const (* const)[5],int)+94j
					; icu_56::CharsetRecog_2022::match_2022(uchar const *,int,uchar	const (* const)[5],int)+BFj ...
		mov	eax, [ebp+var_2C]
		add	eax, 1
		mov	[ebp+var_2C], eax
		jmp	loc_154
; ---------------------------------------------------------------------------

loc_1E6:				; CODE XREF: icu_56::CharsetRecog_2022::match_2022(uchar const *,int,uchar const (* const)[5],int)+6Aj
		mov	eax, [ebp+var_44]
		add	eax, 1
		mov	[ebp+var_44], eax

loc_1EF:				; CODE XREF: icu_56::CharsetRecog_2022::match_2022(uchar const *,int,uchar const (* const)[5],int)+57j
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+var_14]
		movzx	ecx, byte ptr [eax]
		cmp	ecx, 0Eh
		jz	short loc_20B
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+var_14]
		movzx	ecx, byte ptr [eax]
		cmp	ecx, 0Fh
		jnz	short $scanInput$8861

loc_20B:				; CODE XREF: icu_56::CharsetRecog_2022::match_2022(uchar const *,int,uchar const (* const)[5],int)+10Bj
		mov	eax, [ebp+var_50]
		add	eax, 1
		mov	[ebp+var_50], eax

$scanInput$8861:			; CODE XREF: icu_56::CharsetRecog_2022::match_2022(uchar const *,int,uchar const (* const)[5],int)+E4j
					; icu_56::CharsetRecog_2022::match_2022(uchar const *,int,uchar	const (* const)[5],int)+E6j ...
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		jmp	loc_12F
; ---------------------------------------------------------------------------

loc_222:				; CODE XREF: icu_56::CharsetRecog_2022::match_2022(uchar const *,int,uchar const (* const)[5],int)+45j
		cmp	[ebp+var_38], 0
		jnz	short loc_22C
		xor	eax, eax
		jmp	short loc_279
; ---------------------------------------------------------------------------

loc_22C:				; CODE XREF: icu_56::CharsetRecog_2022::match_2022(uchar const *,int,uchar const (* const)[5],int)+136j
		mov	eax, [ebp+var_38]
		imul	eax, 64h
		mov	ecx, [ebp+var_44]
		imul	ecx, 64h
		sub	eax, ecx
		mov	ecx, [ebp+var_38]
		add	ecx, [ebp+var_44]
		cdq
		idiv	ecx
		mov	[ebp+var_5C], eax
		mov	eax, [ebp+var_38]
		add	eax, [ebp+var_50]
		cmp	eax, 5
		jge	short loc_269
		mov	eax, [ebp+var_38]
		add	eax, [ebp+var_50]
		mov	ecx, 5
		sub	ecx, eax
		imul	ecx, 0Ah
		mov	edx, [ebp+var_5C]
		sub	edx, ecx
		mov	[ebp+var_5C], edx

loc_269:				; CODE XREF: icu_56::CharsetRecog_2022::match_2022(uchar const *,int,uchar const (* const)[5],int)+15Fj
		cmp	[ebp+var_5C], 0
		jge	short loc_276
		mov	[ebp+var_5C], 0

loc_276:				; CODE XREF: icu_56::CharsetRecog_2022::match_2022(uchar const *,int,uchar const (* const)[5],int)+17Dj
		mov	eax, [ebp+var_5C]

loc_279:				; CODE XREF: icu_56::CharsetRecog_2022::match_2022(uchar const *,int,uchar const (* const)[5],int)+13Aj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 138h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	10h
?match_2022@CharsetRecog_2022@icu_56@@IBEHPBEHQAY04$$CBEH@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 290h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::CharsetRecog_2022JP::~CharsetRecog_2022JP(icu_56::CharsetRecog_2022JP *__hidden this)
		public ??1CharsetRecog_2022JP@icu_56@@UAE@XZ
??1CharsetRecog_2022JP@icu_56@@UAE@XZ proc near
					; CODE XREF: icu_56::CharsetRecog_2022JP::`scalar deleting destructor'(uint)+26p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7CharsetRecog_2022JP@icu_56@@6B@ ; const icu_56::CharsetRecog_2022JP::`vftable'
		mov	ecx, [ebp+var_8] ; this
		call	??1CharsetRecog_2022@icu_56@@UAE@XZ ; icu_56::CharsetRecog_2022::~CharsetRecog_2022(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1CharsetRecog_2022JP@icu_56@@UAE@XZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2D8h
		dd offset ??_R4CharsetRecog_2022JP@icu_56@@6B@ ; const icu_56::CharsetRecog_2022JP::`RTTI Complete Object Locator'
		public ??_7CharsetRecog_2022JP@icu_56@@6B@
; const	icu_56::CharsetRecog_2022JP::`vftable'
??_7CharsetRecog_2022JP@icu_56@@6B@ dd offset ?getName@CharsetRecog_2022JP@icu_56@@UBEPBDXZ
					; DATA XREF: icu_56::CharsetRecog_2022JP::~CharsetRecog_2022JP(void)+26o
					; icu_56::CharsetRecog_2022JP::getName(void)
		dd offset ?getLanguage@CharsetRecognizer@icu_56@@UBEPBDXZ ; icu_56::CharsetRecognizer::getLanguage(void)
		dd offset ?match@CharsetRecog_2022JP@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z ; icu_56::CharsetRecog_2022JP::match(icu_56::InputText *,icu_56::CharsetMatch *)
		dd offset ??_ECharsetRecog_2022JP@icu_56@@UAEPAXI@Z ; icu_56::CharsetRecog_2022JP::`vector deleting destructor'(uint)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 2ECh
		public ??_R4CharsetRecog_2022JP@icu_56@@6B@
; const	icu_56::CharsetRecog_2022JP::`RTTI Complete Object Locator'
??_R4CharsetRecog_2022JP@icu_56@@6B@ dd	3 dup(0) ; DATA	XREF: .rdata:000002D8o
		dd offset ??_R0?AVCharsetRecog_2022JP@icu_56@@@8 ; icu_56::CharsetRecog_2022JP `RTTI Type Descriptor'
		dd offset ??_R3CharsetRecog_2022JP@icu_56@@8 ; icu_56::CharsetRecog_2022JP::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 300h
		public ??_R0?AVCharsetRecog_2022JP@icu_56@@@8
; class	icu_56::CharsetRecog_2022JP `RTTI Type Descriptor'
??_R0?AVCharsetRecog_2022JP@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:000002F8o
					; .rdata$r:icu_56::CharsetRecog_2022JP::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?avcharsetrec	db '.?AVCharsetRecog_2022JP@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 32Ch
		public ??_R3CharsetRecog_2022JP@icu_56@@8
; icu_56::CharsetRecog_2022JP::`RTTI Class Hierarchy Descriptor'
??_R3CharsetRecog_2022JP@icu_56@@8 dd 2	dup(0) ; DATA XREF: .rdata$r:000002FCo
					; .rdata$r:00000368o
		dd 4
		dd offset ??_R2CharsetRecog_2022JP@icu_56@@8 ; icu_56::CharsetRecog_2022JP::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 33Ch
		public ??_R2CharsetRecog_2022JP@icu_56@@8
; icu_56::CharsetRecog_2022JP::`RTTI Base Class	Array'
??_R2CharsetRecog_2022JP@icu_56@@8 dd offset ??_R1A@?0A@EA@CharsetRecog_2022JP@icu_56@@8
					; DATA XREF: .rdata$r:00000338o
					; icu_56::CharsetRecog_2022JP::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@CharsetRecog_2022@icu_56@@8 ; icu_56::CharsetRecog_2022::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@CharsetRecognizer@icu_56@@8 ; icu_56::CharsetRecognizer::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 350h
		public ??_R1A@?0A@EA@CharsetRecog_2022JP@icu_56@@8
; icu_56::CharsetRecog_2022JP::`RTTI Base Class	Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@CharsetRecog_2022JP@icu_56@@8 dd offset ??_R0?AVCharsetRecog_2022JP@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::CharsetRecog_2022JP::`RTTI Base Class Array'o
					; icu_56::CharsetRecog_2022JP `RTTI Type Descriptor'
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd offset _escapeSequences_2022KR+4 ; ""
		dd offset ??_R3CharsetRecog_2022JP@icu_56@@8 ; icu_56::CharsetRecog_2022JP::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 36Ch
		public ??_R1A@?0A@EA@CharsetRecog_2022@icu_56@@8
; icu_56::CharsetRecog_2022::`RTTI Base	Class Descriptor at (0,	-1, 0, 64)'
??_R1A@?0A@EA@CharsetRecog_2022@icu_56@@8 dd offset ??_R0?AVCharsetRecog_2022@icu_56@@@8
					; DATA XREF: .rdata$r:00000340o
					; .rdata$r:icu_56::CharsetRecog_2022::`RTTI Base Class Array'o ...
					; icu_56::CharsetRecog_2022 `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset _escapeSequences_2022KR+4 ; ""
		dd offset ??_R3CharsetRecog_2022@icu_56@@8 ; icu_56::CharsetRecog_2022::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 388h
		public ??_R0?AVCharsetRecog_2022@icu_56@@@8
; class	icu_56::CharsetRecog_2022 `RTTI	Type Descriptor'
??_R0?AVCharsetRecog_2022@icu_56@@@8 dd	offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::CharsetRecog_2022::`RTTI Base Class Descriptor at	(0,-1,0,64)'o
					; .rdata$r:00000A08o
					; const	type_info::`vftable'
		align 10h
a_?avcharsetr_0	db '.?AVCharsetRecog_2022@icu_56@@',0
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 3B0h
		public ??_R3CharsetRecog_2022@icu_56@@8
; icu_56::CharsetRecog_2022::`RTTI Class Hierarchy Descriptor'
??_R3CharsetRecog_2022@icu_56@@8 dd 2 dup(0) ; DATA XREF: .rdata$r:00000384o
					; .rdata$r:00000A0Co
		dd 3
		dd offset ??_R2CharsetRecog_2022@icu_56@@8 ; icu_56::CharsetRecog_2022::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 3C0h
		public ??_R2CharsetRecog_2022@icu_56@@8
; icu_56::CharsetRecog_2022::`RTTI Base	Class Array'
??_R2CharsetRecog_2022@icu_56@@8 dd offset ??_R1A@?0A@EA@CharsetRecog_2022@icu_56@@8
					; DATA XREF: .rdata$r:000003BCo
					; icu_56::CharsetRecog_2022::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@CharsetRecognizer@icu_56@@8 ; icu_56::CharsetRecognizer::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 3D0h
		public ??_R1A@?0A@EA@CharsetRecognizer@icu_56@@8
; icu_56::CharsetRecognizer::`RTTI Base	Class Descriptor at (0,	-1, 0, 64)'
??_R1A@?0A@EA@CharsetRecognizer@icu_56@@8 dd offset ??_R0?AVCharsetRecognizer@icu_56@@@8
					; DATA XREF: .rdata$r:00000344o
					; .rdata$r:000003C4o ...
					; icu_56::CharsetRecognizer `RTTI Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset _escapeSequences_2022KR+4 ; ""
		dd offset ??_R3CharsetRecognizer@icu_56@@8 ; icu_56::CharsetRecognizer::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 3ECh
		public ??_R0?AVCharsetRecognizer@icu_56@@@8
; class	icu_56::CharsetRecognizer `RTTI	Type Descriptor'
??_R0?AVCharsetRecognizer@icu_56@@@8 dd	offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::CharsetRecognizer::`RTTI Base Class Descriptor at	(0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avcharsetr_1	db '.?AVCharsetRecognizer@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 414h
		public ??_R3CharsetRecognizer@icu_56@@8
; icu_56::CharsetRecognizer::`RTTI Class Hierarchy Descriptor'
??_R3CharsetRecognizer@icu_56@@8 dd 2 dup(0) ; DATA XREF: .rdata$r:000003E8o
		dd 2
		dd offset ??_R2CharsetRecognizer@icu_56@@8 ; icu_56::CharsetRecognizer::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 424h
		public ??_R2CharsetRecognizer@icu_56@@8
; icu_56::CharsetRecognizer::`RTTI Base	Class Array'
??_R2CharsetRecognizer@icu_56@@8 dd offset ??_R1A@?0A@EA@CharsetRecognizer@icu_56@@8
					; DATA XREF: .rdata$r:00000420o
					; icu_56::CharsetRecognizer::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 430h
		public ??_R13?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@UMemory@icu_56@@8 dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:00000348o
					; .rdata$r:000003C8o ...
					; icu_56::UMemory `RTTI	Type Descriptor'
		align 8
		dd 4, 0FFFFFFFFh, 0
		dd offset _escapeSequences_2022KR+4 ; ""
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 44Ch
		public ??_R0?AVUMemory@icu_56@@@8
; class	icu_56::UMemory	`RTTI Type Descriptor'
??_R0?AVUMemory@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Descriptor at (4,-1,0,64)'o
					; .rdata$r:icu_56::UMemory::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avumemory@ic	db '.?AVUMemory@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 46Ch
		public ??_R3UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
??_R3UMemory@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00000448o
					; .rdata$r:0000049Co
		dd 1
		dd offset ??_R2UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 47Ch
		public ??_R2UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Array'
??_R2UMemory@icu_56@@8 dd offset ??_R1A@?0A@EA@UMemory@icu_56@@8
					; DATA XREF: .rdata$r:00000478o
					; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 484h
		public ??_R1A@?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UMemory@icu_56@@8	dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Array'o
					; icu_56::UMemory `RTTI	Type Descriptor'
		align 10h
		dd 0FFFFFFFFh, 0
		dd offset _escapeSequences_2022KR+4 ; ""
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4A0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::CharsetRecog_2022JP::`scalar deleting destructor'(unsigned int)
		public ??_GCharsetRecog_2022JP@icu_56@@UAEPAXI@Z
??_GCharsetRecog_2022JP@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1CharsetRecog_2022JP@icu_56@@UAE@XZ ;	icu_56::CharsetRecog_2022JP::~CharsetRecog_2022JP(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_4E9
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_4E9:				; CODE XREF: icu_56::CharsetRecog_2022JP::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GCharsetRecog_2022JP@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 504h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	char *__thiscall icu_56::CharsetRecog_2022JP::getName(icu_56::CharsetRecog_2022JP *__hidden this)
		public ?getName@CharsetRecog_2022JP@icu_56@@UBEPBDXZ
?getName@CharsetRecog_2022JP@icu_56@@UBEPBDXZ proc near
					; DATA XREF: .rdata:const icu_56::CharsetRecog_2022JP::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, offset ??_C@_0M@LMIFKILO@ISO?92022?9JP?$AA@ ; "ISO-2022-JP"
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getName@CharsetRecog_2022JP@icu_56@@UBEPBDXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 534h
		public ??_C@_0M@LMIFKILO@ISO?92022?9JP?$AA@
; `string'
??_C@_0M@LMIFKILO@ISO?92022?9JP?$AA@ db	'ISO-2022-JP',0
					; DATA XREF: icu_56::CharsetRecog_2022JP::getName(void)+23o
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 540h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__thiscall icu_56::CharsetRecog_2022JP::match(icu_56::CharsetRecog_2022JP *this, struct	icu_56::InputText *, struct icu_56::CharsetMatch *)
		public ?match@CharsetRecog_2022JP@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z
?match@CharsetRecog_2022JP@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z proc	near
					; DATA XREF: .rdata:000002E4o

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		push	0Ch		; int
		push	offset _escapeSequences_2022JP ; "\x1B$(C"
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		push	ecx		; int
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		push	eax		; unsigned __int8 *
		mov	ecx, [ebp+var_8] ; this
		call	?match_2022@CharsetRecog_2022@icu_56@@IBEHPBEHQAY04$$CBEH@Z ; icu_56::CharsetRecog_2022::match_2022(uchar const	*,int,uchar const (* const)[5],int)
		mov	[ebp+var_14], eax
		push	0		; char *
		push	0		; char *
		mov	eax, [ebp+var_14]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		push	ecx		; struct icu_56::CharsetRecognizer *
		mov	edx, [ebp+arg_0]
		push	edx		; struct icu_56::InputText *
		mov	ecx, [ebp+arg_4] ; this
		call	?set@CharsetMatch@icu_56@@QAEXPAVInputText@2@PBVCharsetRecognizer@2@HPBD2@Z ; icu_56::CharsetMatch::set(icu_56::InputText *,icu_56::CharsetRecognizer const *,int,char const *,char const *)
		cmp	[ebp+var_14], 0
		setnle	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?match@CharsetRecog_2022JP@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 5B8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::CharsetRecog_2022KR::~CharsetRecog_2022KR(icu_56::CharsetRecog_2022KR *__hidden this)
		public ??1CharsetRecog_2022KR@icu_56@@UAE@XZ
??1CharsetRecog_2022KR@icu_56@@UAE@XZ proc near
					; CODE XREF: icu_56::CharsetRecog_2022KR::`scalar deleting destructor'(uint)+26p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7CharsetRecog_2022KR@icu_56@@6B@ ; const icu_56::CharsetRecog_2022KR::`vftable'
		mov	ecx, [ebp+var_8] ; this
		call	??1CharsetRecog_2022@icu_56@@UAE@XZ ; icu_56::CharsetRecog_2022::~CharsetRecog_2022(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1CharsetRecog_2022KR@icu_56@@UAE@XZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 600h
		dd offset ??_R4CharsetRecog_2022KR@icu_56@@6B@ ; const icu_56::CharsetRecog_2022KR::`RTTI Complete Object Locator'
		public ??_7CharsetRecog_2022KR@icu_56@@6B@
; const	icu_56::CharsetRecog_2022KR::`vftable'
??_7CharsetRecog_2022KR@icu_56@@6B@ dd offset ?getName@CharsetRecog_2022KR@icu_56@@UBEPBDXZ
					; DATA XREF: icu_56::CharsetRecog_2022KR::~CharsetRecog_2022KR(void)+26o
					; icu_56::CharsetRecog_2022KR::getName(void)
		dd offset ?getLanguage@CharsetRecognizer@icu_56@@UBEPBDXZ ; icu_56::CharsetRecognizer::getLanguage(void)
		dd offset ?match@CharsetRecog_2022KR@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z ; icu_56::CharsetRecog_2022KR::match(icu_56::InputText *,icu_56::CharsetMatch *)
		dd offset ??_ECharsetRecog_2022KR@icu_56@@UAEPAXI@Z ; icu_56::CharsetRecog_2022KR::`vector deleting destructor'(uint)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 614h
		public ??_R4CharsetRecog_2022KR@icu_56@@6B@
; const	icu_56::CharsetRecog_2022KR::`RTTI Complete Object Locator'
??_R4CharsetRecog_2022KR@icu_56@@6B@ dd	3 dup(0) ; DATA	XREF: .rdata:00000600o
		dd offset ??_R0?AVCharsetRecog_2022KR@icu_56@@@8 ; icu_56::CharsetRecog_2022KR `RTTI Type Descriptor'
		dd offset ??_R3CharsetRecog_2022KR@icu_56@@8 ; icu_56::CharsetRecog_2022KR::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 628h
		public ??_R0?AVCharsetRecog_2022KR@icu_56@@@8
; class	icu_56::CharsetRecog_2022KR `RTTI Type Descriptor'
??_R0?AVCharsetRecog_2022KR@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00000620o
					; .rdata$r:icu_56::CharsetRecog_2022KR::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avcharsetr_2	db '.?AVCharsetRecog_2022KR@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 654h
		public ??_R3CharsetRecog_2022KR@icu_56@@8
; icu_56::CharsetRecog_2022KR::`RTTI Class Hierarchy Descriptor'
??_R3CharsetRecog_2022KR@icu_56@@8 dd 2	dup(0) ; DATA XREF: .rdata$r:00000624o
					; .rdata$r:00000690o
		dd 4
		dd offset ??_R2CharsetRecog_2022KR@icu_56@@8 ; icu_56::CharsetRecog_2022KR::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 664h
		public ??_R2CharsetRecog_2022KR@icu_56@@8
; icu_56::CharsetRecog_2022KR::`RTTI Base Class	Array'
??_R2CharsetRecog_2022KR@icu_56@@8 dd offset ??_R1A@?0A@EA@CharsetRecog_2022KR@icu_56@@8
					; DATA XREF: .rdata$r:00000660o
					; icu_56::CharsetRecog_2022KR::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@CharsetRecog_2022@icu_56@@8 ; icu_56::CharsetRecog_2022::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@CharsetRecognizer@icu_56@@8 ; icu_56::CharsetRecognizer::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 678h
		public ??_R1A@?0A@EA@CharsetRecog_2022KR@icu_56@@8
; icu_56::CharsetRecog_2022KR::`RTTI Base Class	Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@CharsetRecog_2022KR@icu_56@@8 dd offset ??_R0?AVCharsetRecog_2022KR@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::CharsetRecog_2022KR::`RTTI Base Class Array'o
					; icu_56::CharsetRecog_2022KR `RTTI Type Descriptor'
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd offset _escapeSequences_2022KR+4 ; ""
		dd offset ??_R3CharsetRecog_2022KR@icu_56@@8 ; icu_56::CharsetRecog_2022KR::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 694h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::CharsetRecog_2022KR::`scalar deleting destructor'(unsigned int)
		public ??_GCharsetRecog_2022KR@icu_56@@UAEPAXI@Z
??_GCharsetRecog_2022KR@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1CharsetRecog_2022KR@icu_56@@UAE@XZ ;	icu_56::CharsetRecog_2022KR::~CharsetRecog_2022KR(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_6DD
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_6DD:				; CODE XREF: icu_56::CharsetRecog_2022KR::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GCharsetRecog_2022KR@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 6F8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	char *__thiscall icu_56::CharsetRecog_2022KR::getName(icu_56::CharsetRecog_2022KR *__hidden this)
		public ?getName@CharsetRecog_2022KR@icu_56@@UBEPBDXZ
?getName@CharsetRecog_2022KR@icu_56@@UBEPBDXZ proc near
					; DATA XREF: .rdata:const icu_56::CharsetRecog_2022KR::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, offset ??_C@_0M@IPHBKAAL@ISO?92022?9KR?$AA@ ; "ISO-2022-KR"
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getName@CharsetRecog_2022KR@icu_56@@UBEPBDXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 728h
		public ??_C@_0M@IPHBKAAL@ISO?92022?9KR?$AA@
; `string'
??_C@_0M@IPHBKAAL@ISO?92022?9KR?$AA@ db	'ISO-2022-KR',0
					; DATA XREF: icu_56::CharsetRecog_2022KR::getName(void)+23o
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 734h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__thiscall icu_56::CharsetRecog_2022KR::match(icu_56::CharsetRecog_2022KR *this, struct	icu_56::InputText *, struct icu_56::CharsetMatch *)
		public ?match@CharsetRecog_2022KR@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z
?match@CharsetRecog_2022KR@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z proc	near
					; DATA XREF: .rdata:0000060Co

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		push	1		; int
		push	offset _escapeSequences_2022KR ; "\x1B$)C"
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		push	ecx		; int
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		push	eax		; unsigned __int8 *
		mov	ecx, [ebp+var_8] ; this
		call	?match_2022@CharsetRecog_2022@icu_56@@IBEHPBEHQAY04$$CBEH@Z ; icu_56::CharsetRecog_2022::match_2022(uchar const	*,int,uchar const (* const)[5],int)
		mov	[ebp+var_14], eax
		push	0		; char *
		push	0		; char *
		mov	eax, [ebp+var_14]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		push	ecx		; struct icu_56::CharsetRecognizer *
		mov	edx, [ebp+arg_0]
		push	edx		; struct icu_56::InputText *
		mov	ecx, [ebp+arg_4] ; this
		call	?set@CharsetMatch@icu_56@@QAEXPAVInputText@2@PBVCharsetRecognizer@2@HPBD2@Z ; icu_56::CharsetMatch::set(icu_56::InputText *,icu_56::CharsetRecognizer const *,int,char const *,char const *)
		cmp	[ebp+var_14], 0
		setnle	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?match@CharsetRecog_2022KR@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 7ACh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::CharsetRecog_2022CN::~CharsetRecog_2022CN(icu_56::CharsetRecog_2022CN *__hidden this)
		public ??1CharsetRecog_2022CN@icu_56@@UAE@XZ
??1CharsetRecog_2022CN@icu_56@@UAE@XZ proc near
					; CODE XREF: icu_56::CharsetRecog_2022CN::`scalar deleting destructor'(uint)+26p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7CharsetRecog_2022CN@icu_56@@6B@ ; const icu_56::CharsetRecog_2022CN::`vftable'
		mov	ecx, [ebp+var_8] ; this
		call	??1CharsetRecog_2022@icu_56@@UAE@XZ ; icu_56::CharsetRecog_2022::~CharsetRecog_2022(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1CharsetRecog_2022CN@icu_56@@UAE@XZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7F4h
		dd offset ??_R4CharsetRecog_2022CN@icu_56@@6B@ ; const icu_56::CharsetRecog_2022CN::`RTTI Complete Object Locator'
		public ??_7CharsetRecog_2022CN@icu_56@@6B@
; const	icu_56::CharsetRecog_2022CN::`vftable'
??_7CharsetRecog_2022CN@icu_56@@6B@ dd offset ?getName@CharsetRecog_2022CN@icu_56@@UBEPBDXZ
					; DATA XREF: icu_56::CharsetRecog_2022CN::~CharsetRecog_2022CN(void)+26o
					; icu_56::CharsetRecog_2022CN::getName(void)
		dd offset ?getLanguage@CharsetRecognizer@icu_56@@UBEPBDXZ ; icu_56::CharsetRecognizer::getLanguage(void)
		dd offset ?match@CharsetRecog_2022CN@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z ; icu_56::CharsetRecog_2022CN::match(icu_56::InputText *,icu_56::CharsetMatch *)
		dd offset ??_ECharsetRecog_2022CN@icu_56@@UAEPAXI@Z ; icu_56::CharsetRecog_2022CN::`vector deleting destructor'(uint)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 808h
		public ??_R4CharsetRecog_2022CN@icu_56@@6B@
; const	icu_56::CharsetRecog_2022CN::`RTTI Complete Object Locator'
??_R4CharsetRecog_2022CN@icu_56@@6B@ dd	3 dup(0) ; DATA	XREF: .rdata:000007F4o
		dd offset ??_R0?AVCharsetRecog_2022CN@icu_56@@@8 ; icu_56::CharsetRecog_2022CN `RTTI Type Descriptor'
		dd offset ??_R3CharsetRecog_2022CN@icu_56@@8 ; icu_56::CharsetRecog_2022CN::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 81Ch
		public ??_R0?AVCharsetRecog_2022CN@icu_56@@@8
; class	icu_56::CharsetRecog_2022CN `RTTI Type Descriptor'
??_R0?AVCharsetRecog_2022CN@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00000814o
					; .rdata$r:icu_56::CharsetRecog_2022CN::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avcharsetr_3	db '.?AVCharsetRecog_2022CN@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 848h
		public ??_R3CharsetRecog_2022CN@icu_56@@8
; icu_56::CharsetRecog_2022CN::`RTTI Class Hierarchy Descriptor'
??_R3CharsetRecog_2022CN@icu_56@@8 dd 2	dup(0) ; DATA XREF: .rdata$r:00000818o
					; .rdata$r:00000884o
		dd 4
		dd offset ??_R2CharsetRecog_2022CN@icu_56@@8 ; icu_56::CharsetRecog_2022CN::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 858h
		public ??_R2CharsetRecog_2022CN@icu_56@@8
; icu_56::CharsetRecog_2022CN::`RTTI Base Class	Array'
??_R2CharsetRecog_2022CN@icu_56@@8 dd offset ??_R1A@?0A@EA@CharsetRecog_2022CN@icu_56@@8
					; DATA XREF: .rdata$r:00000854o
					; icu_56::CharsetRecog_2022CN::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@CharsetRecog_2022@icu_56@@8 ; icu_56::CharsetRecog_2022::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@CharsetRecognizer@icu_56@@8 ; icu_56::CharsetRecognizer::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 86Ch
		public ??_R1A@?0A@EA@CharsetRecog_2022CN@icu_56@@8
; icu_56::CharsetRecog_2022CN::`RTTI Base Class	Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@CharsetRecog_2022CN@icu_56@@8 dd offset ??_R0?AVCharsetRecog_2022CN@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::CharsetRecog_2022CN::`RTTI Base Class Array'o
					; icu_56::CharsetRecog_2022CN `RTTI Type Descriptor'
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd offset _escapeSequences_2022KR+4 ; ""
		dd offset ??_R3CharsetRecog_2022CN@icu_56@@8 ; icu_56::CharsetRecog_2022CN::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 888h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::CharsetRecog_2022CN::`scalar deleting destructor'(unsigned int)
		public ??_GCharsetRecog_2022CN@icu_56@@UAEPAXI@Z
??_GCharsetRecog_2022CN@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1CharsetRecog_2022CN@icu_56@@UAE@XZ ;	icu_56::CharsetRecog_2022CN::~CharsetRecog_2022CN(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_8D1
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_8D1:				; CODE XREF: icu_56::CharsetRecog_2022CN::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GCharsetRecog_2022CN@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 8ECh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	char *__thiscall icu_56::CharsetRecog_2022CN::getName(icu_56::CharsetRecog_2022CN *__hidden this)
		public ?getName@CharsetRecog_2022CN@icu_56@@UBEPBDXZ
?getName@CharsetRecog_2022CN@icu_56@@UBEPBDXZ proc near
					; DATA XREF: .rdata:const icu_56::CharsetRecog_2022CN::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, offset ??_C@_0M@GHBFKMOO@ISO?92022?9CN?$AA@ ; "ISO-2022-CN"
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getName@CharsetRecog_2022CN@icu_56@@UBEPBDXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 91Ch
		public ??_C@_0M@GHBFKMOO@ISO?92022?9CN?$AA@
; `string'
??_C@_0M@GHBFKMOO@ISO?92022?9CN?$AA@ db	'ISO-2022-CN',0
					; DATA XREF: icu_56::CharsetRecog_2022CN::getName(void)+23o
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 928h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__thiscall icu_56::CharsetRecog_2022CN::match(icu_56::CharsetRecog_2022CN *this, struct	icu_56::InputText *, struct icu_56::CharsetMatch *)
		public ?match@CharsetRecog_2022CN@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z
?match@CharsetRecog_2022CN@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z proc	near
					; DATA XREF: .rdata:00000800o

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		push	0Bh		; int
		push	offset _escapeSequences_2022CN ; "\x1B$)A"
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		push	ecx		; int
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		push	eax		; unsigned __int8 *
		mov	ecx, [ebp+var_8] ; this
		call	?match_2022@CharsetRecog_2022@icu_56@@IBEHPBEHQAY04$$CBEH@Z ; icu_56::CharsetRecog_2022::match_2022(uchar const	*,int,uchar const (* const)[5],int)
		mov	[ebp+var_14], eax
		push	0		; char *
		push	0		; char *
		mov	eax, [ebp+var_14]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		push	ecx		; struct icu_56::CharsetRecognizer *
		mov	edx, [ebp+arg_0]
		push	edx		; struct icu_56::InputText *
		mov	ecx, [ebp+arg_4] ; this
		call	?set@CharsetMatch@icu_56@@QAEXPAVInputText@2@PBVCharsetRecognizer@2@HPBD2@Z ; icu_56::CharsetMatch::set(icu_56::InputText *,icu_56::CharsetRecognizer const *,int,char const *,char const *)
		cmp	[ebp+var_14], 0
		setnle	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?match@CharsetRecog_2022CN@icu_56@@UBECPAVInputText@2@PAVCharsetMatch@2@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 9A0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::CharsetRecog_2022::~CharsetRecog_2022(icu_56::CharsetRecog_2022 *__hidden this)
		public ??1CharsetRecog_2022@icu_56@@UAE@XZ
??1CharsetRecog_2022@icu_56@@UAE@XZ proc near
					; CODE XREF: icu_56::CharsetRecog_2022JP::~CharsetRecog_2022JP(void)+2Fp
					; icu_56::CharsetRecog_2022KR::~CharsetRecog_2022KR(void)+2Fp ...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7CharsetRecog_2022@icu_56@@6B@ ; const icu_56::CharsetRecog_2022::`vftable'
		mov	ecx, [ebp+var_8] ; this
		call	??1CharsetRecognizer@icu_56@@UAE@XZ ; icu_56::CharsetRecognizer::~CharsetRecognizer(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1CharsetRecog_2022@icu_56@@UAE@XZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9E8h
		dd offset ??_R4CharsetRecog_2022@icu_56@@6B@ ; const icu_56::CharsetRecog_2022::`RTTI Complete Object Locator'
		public ??_7CharsetRecog_2022@icu_56@@6B@
; const	icu_56::CharsetRecog_2022::`vftable'
??_7CharsetRecog_2022@icu_56@@6B@ dd offset __purecall
					; DATA XREF: icu_56::CharsetRecog_2022::~CharsetRecog_2022(void)+26o
		dd offset ?getLanguage@CharsetRecognizer@icu_56@@UBEPBDXZ ; icu_56::CharsetRecognizer::getLanguage(void)
		dd offset __purecall
		dd offset __purecall
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9FCh
		public ??_R4CharsetRecog_2022@icu_56@@6B@
; const	icu_56::CharsetRecog_2022::`RTTI Complete Object Locator'
??_R4CharsetRecog_2022@icu_56@@6B@ dd 3	dup(0) ; DATA XREF: .rdata:000009E8o
		dd offset ??_R0?AVCharsetRecog_2022@icu_56@@@8 ; icu_56::CharsetRecog_2022 `RTTI Type Descriptor'
		dd offset ??_R3CharsetRecog_2022@icu_56@@8 ; icu_56::CharsetRecog_2022::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; size_t __cdecl strlen(const char *Str)
		extrn _strlen:near	; CODE XREF: icu_56::CharsetRecog_2022::match_2022(uchar const *,int,uchar const (* const)[5],int)+80p
		extrn __RTC_CheckEsp:near
					; CODE XREF: icu_56::CharsetRecog_2022::match_2022(uchar const *,int,uchar const (* const)[5],int)+194p
					; icu_56::CharsetRecog_2022JP::~CharsetRecog_2022JP(void)+3Fp ...
; const	type_info::`vftable'
		extrn ??_7type_info@@6B@:near
					; DATA XREF: .data:icu_56::CharsetRecog_2022JP `RTTI Type Descriptor'o
					; .data:icu_56::CharsetRecog_2022 `RTTI	Type Descriptor'o ...
; public: virtual char const * __thiscall icu_56::CharsetRecognizer::getLanguage(void)const
		extrn ?getLanguage@CharsetRecognizer@icu_56@@UBEPBDXZ:near
					; DATA XREF: .rdata:000002E0o
					; .rdata:00000608o ...
; public: virtual void * __thiscall icu_56::CharsetRecog_2022JP::`scalar deleting destructor'(unsigned int)
		extrn ??_GCharsetRecog_2022JP@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::CharsetRecog_2022JP::`vector deleting destructor'(unsigned int)
		extrn ??_ECharsetRecog_2022JP@icu_56@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:000002E8o
; void __cdecl icu_56::UMemory::operator delete(void *)
		extrn __imp_??3UMemory@icu_56@@SAXPAX@Z:near
					; CODE XREF: icu_56::CharsetRecog_2022JP::`scalar deleting destructor'(uint)+39p
					; icu_56::CharsetRecog_2022KR::`scalar deleting	destructor'(uint)+39p ...
; void __thiscall icu_56::CharsetMatch::set(icu_56::CharsetMatch *__hidden this, struct	icu_56::InputText *, const struct icu_56::CharsetRecognizer *, int, const char *, const	char *)
		extrn ?set@CharsetMatch@icu_56@@QAEXPAVInputText@2@PBVCharsetRecognizer@2@HPBD2@Z:near
					; CODE XREF: icu_56::CharsetRecog_2022JP::match(icu_56::InputText *,icu_56::CharsetMatch *)+55p
					; icu_56::CharsetRecog_2022KR::match(icu_56::InputText *,icu_56::CharsetMatch *)+55p ...
; public: virtual void * __thiscall icu_56::CharsetRecog_2022KR::`scalar deleting destructor'(unsigned int)
		extrn ??_GCharsetRecog_2022KR@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::CharsetRecog_2022KR::`vector deleting destructor'(unsigned int)
		extrn ??_ECharsetRecog_2022KR@icu_56@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:00000610o
; public: virtual void * __thiscall icu_56::CharsetRecog_2022CN::`scalar deleting destructor'(unsigned int)
		extrn ??_GCharsetRecog_2022CN@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::CharsetRecog_2022CN::`vector deleting destructor'(unsigned int)
		extrn ??_ECharsetRecog_2022CN@icu_56@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:00000804o
; _DWORD __thiscall icu_56::CharsetRecognizer::~CharsetRecognizer(icu_56::CharsetRecognizer *__hidden this)
		extrn ??1CharsetRecognizer@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::CharsetRecog_2022::~CharsetRecog_2022(void)+2Fp
		extrn __purecall:near	; DATA XREF: .rdata:const icu_56::CharsetRecog_2022::`vftable'o
					; .rdata:000009F4o ...


		end
