;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	0A09B3108DA4FE0F7DF5409EF85C0647
; Input	CRC32 :	F80B9214

; File Name   :	D:\compspace\objfiles\firefox\i18n\digitgrouping.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int)
		public ??2@YAPAXI@Z
??2@YAPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??2@YAPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 38h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 3Ch
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 40h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX@Z
??3@YAXPAX@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??3@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 74h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::DigitGrouping::DigitGrouping(icu_56::DigitGrouping *__hidden this)
		public ??0DigitGrouping@icu_56@@QAE@XZ
??0DigitGrouping@icu_56@@QAE@XZ	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+4], 0
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+8], 0
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??0DigitGrouping@icu_56@@QAE@XZ	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C0h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__thiscall icu_56::DigitGrouping::equals(icu_56::DigitGrouping *this, const struct icu_56::DigitGrouping *)
		public ?equals@DigitGrouping@icu_56@@QBECABV12@@Z
?equals@DigitGrouping@icu_56@@QBECABV12@@Z proc	near

var_D0		= byte ptr -0D0h
var_CD		= byte ptr -0CDh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax]
		cmp	edx, [ecx]
		jnz	short loc_114
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+4]
		cmp	edx, [ecx+4]
		jnz	short loc_114
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+8]
		cmp	edx, [ecx+8]
		jnz	short loc_114
		mov	[ebp+var_CD], 1
		jmp	short loc_11B
; ---------------------------------------------------------------------------

loc_114:				; CODE XREF: icu_56::DigitGrouping::equals(icu_56::DigitGrouping const &)+2Dj
					; icu_56::DigitGrouping::equals(icu_56::DigitGrouping const &)+3Bj ...
		mov	[ebp+var_CD], 0

loc_11B:				; CODE XREF: icu_56::DigitGrouping::equals(icu_56::DigitGrouping const &)+52j
		mov	al, [ebp+var_CD]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?equals@DigitGrouping@icu_56@@QBECABV12@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 12Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__thiscall icu_56::DigitGrouping::isGroupingUsed(icu_56::DigitGrouping *__hidden this)
		public ?isGroupingUsed@DigitGrouping@icu_56@@QBECXZ
?isGroupingUsed@DigitGrouping@icu_56@@QBECXZ proc near
					; CODE XREF: icu_56::DigitGrouping::isGroupingEnabled(int)+26p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax], 0
		setnle	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?isGroupingUsed@DigitGrouping@icu_56@@QBECXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 160h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::DigitGrouping &	__thiscall icu_56::DigitGrouping::operator=(class icu_56::DigitGrouping	const &)
		public ??4DigitGrouping@icu_56@@QAEAAV01@ABV01@@Z
??4DigitGrouping@icu_56@@QAEAAV01@ABV01@@Z proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax]
		mov	[ecx], edx
		mov	edx, [eax+4]
		mov	[ecx+4], edx
		mov	eax, [eax+8]
		mov	[ecx+8], eax
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??4DigitGrouping@icu_56@@QAEAAV01@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1A8h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::IntDigitCountRange::IntDigitCountRange(icu_56::IntDigitCountRange *__hidden	this)
		public ??0IntDigitCountRange@icu_56@@QAE@XZ
??0IntDigitCountRange@icu_56@@QAE@XZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+4], 7FFFFFFFh
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??0IntDigitCountRange@icu_56@@QAE@XZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1E8h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::IntDigitCountRange::getMax(icu_56::IntDigitCountRange *__hidden this)
		public ?getMax@IntDigitCountRange@icu_56@@QBEHXZ
?getMax@IntDigitCountRange@icu_56@@QBEHXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+4]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getMax@IntDigitCountRange@icu_56@@QBEHXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 218h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::IntDigitCountRange::getMin(icu_56::IntDigitCountRange *__hidden this)
		public ?getMin@IntDigitCountRange@icu_56@@QBEHXZ
?getMin@IntDigitCountRange@icu_56@@QBEHXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getMin@IntDigitCountRange@icu_56@@QBEHXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 248h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::IntDigitCountRange & __thiscall	icu_56::IntDigitCountRange::operator=(class icu_56::IntDigitCountRange const &)
		public ??4IntDigitCountRange@icu_56@@QAEAAV01@ABV01@@Z
??4IntDigitCountRange@icu_56@@QAEAAV01@ABV01@@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [eax+4]
		mov	eax, [ebp+var_8]
		mov	[eax], ecx
		mov	[eax+4], edx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??4IntDigitCountRange@icu_56@@QAEAAV01@ABV01@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 288h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::SmallIntFormatter & __thiscall icu_56::SmallIntFormatter::operator=(class icu_56::SmallIntFormatter const &)
		public ??4SmallIntFormatter@icu_56@@QAEAAV01@ABV01@@Z
??4SmallIntFormatter@icu_56@@QAEAAV01@ABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??4SmallIntFormatter@icu_56@@QAEAAV01@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2B8h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__thiscall icu_56::DigitGrouping::isSeparatorAt(icu_56::DigitGrouping *this, int, int)
		public ?isSeparatorAt@DigitGrouping@icu_56@@QBECHH@Z
?isSeparatorAt@DigitGrouping@icu_56@@QBECHH@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; int
		mov	ecx, [ebp+var_8] ; this
		call	?isGroupingEnabled@DigitGrouping@icu_56@@ABECH@Z ; icu_56::DigitGrouping::isGroupingEnabled(int)
		movsx	ecx, al
		test	ecx, ecx
		jz	short loc_2F8
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [eax]
		jge	short loc_2FC

loc_2F8:				; CODE XREF: icu_56::DigitGrouping::isSeparatorAt(int,int)+34j
		xor	al, al
		jmp	short loc_318
; ---------------------------------------------------------------------------

loc_2FC:				; CODE XREF: icu_56::DigitGrouping::isSeparatorAt(int,int)+3Ej
		mov	eax, [ebp+var_8]
		mov	esi, [ebp+arg_4]
		sub	esi, [eax]
		mov	ecx, [ebp+var_8] ; this
		call	?getGrouping2@DigitGrouping@icu_56@@ABEHXZ ; icu_56::DigitGrouping::getGrouping2(void)
		mov	ecx, eax
		mov	eax, esi
		cdq
		idiv	ecx
		test	edx, edx
		setz	al

loc_318:				; CODE XREF: icu_56::DigitGrouping::isSeparatorAt(int,int)+42j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?isSeparatorAt@DigitGrouping@icu_56@@QBECHH@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 330h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::DigitGrouping::getSeparatorCount(icu_56::DigitGrouping	*this, int)
		public ?getSeparatorCount@DigitGrouping@icu_56@@QBEHH@Z
?getSeparatorCount@DigitGrouping@icu_56@@QBEHH@Z proc near
					; CODE XREF: icu_56::DigitGrouping::isNoGrouping(int,icu_56::IntDigitCountRange	const &)+37p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; int
		mov	ecx, [ebp+var_8] ; this
		call	?isGroupingEnabled@DigitGrouping@icu_56@@ABECH@Z ; icu_56::DigitGrouping::isGroupingEnabled(int)
		movsx	ecx, al
		test	ecx, ecx
		jnz	short loc_36A
		xor	eax, eax
		jmp	short loc_387
; ---------------------------------------------------------------------------

loc_36A:				; CODE XREF: icu_56::DigitGrouping::getSeparatorCount(int)+34j
		mov	esi, [ebp+arg_0]
		sub	esi, 1
		mov	eax, [ebp+var_8]
		sub	esi, [eax]
		mov	ecx, [ebp+var_8] ; this
		call	?getGrouping2@DigitGrouping@icu_56@@ABEHXZ ; icu_56::DigitGrouping::getGrouping2(void)
		mov	ecx, eax
		mov	eax, esi
		cdq
		idiv	ecx
		add	eax, 1

loc_387:				; CODE XREF: icu_56::DigitGrouping::getSeparatorCount(int)+38j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?getSeparatorCount@DigitGrouping@icu_56@@QBEHH@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3A0h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__thiscall icu_56::DigitGrouping::isGroupingEnabled(icu_56::DigitGrouping *this, int)
		public ?isGroupingEnabled@DigitGrouping@icu_56@@ABECH@Z
?isGroupingEnabled@DigitGrouping@icu_56@@ABECH@Z proc near
					; CODE XREF: icu_56::DigitGrouping::isSeparatorAt(int,int)+2Ap
					; icu_56::DigitGrouping::getSeparatorCount(int)+2Ap

var_D0		= byte ptr -0D0h
var_CD		= byte ptr -0CDh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	?isGroupingUsed@DigitGrouping@icu_56@@QBECXZ ; icu_56::DigitGrouping::isGroupingUsed(void)
		movsx	eax, al
		test	eax, eax
		jz	short loc_3ED
		mov	ecx, [ebp+var_8] ; this
		call	?getMinGrouping@DigitGrouping@icu_56@@ABEHXZ ; icu_56::DigitGrouping::getMinGrouping(void)
		mov	ecx, [ebp+var_8]
		add	eax, [ecx]
		cmp	[ebp+arg_0], eax
		jl	short loc_3ED
		mov	[ebp+var_CD], 1
		jmp	short loc_3F4
; ---------------------------------------------------------------------------

loc_3ED:				; CODE XREF: icu_56::DigitGrouping::isGroupingEnabled(int)+30j
					; icu_56::DigitGrouping::isGroupingEnabled(int)+42j
		mov	[ebp+var_CD], 0

loc_3F4:				; CODE XREF: icu_56::DigitGrouping::isGroupingEnabled(int)+4Bj
		mov	al, [ebp+var_CD]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?isGroupingEnabled@DigitGrouping@icu_56@@ABECH@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 410h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__thiscall icu_56::DigitGrouping::isNoGrouping(icu_56::DigitGrouping *this, int, const struct icu_56::IntDigitCountRange *)
		public ?isNoGrouping@DigitGrouping@icu_56@@QBECHABVIntDigitCountRange@2@@Z
?isNoGrouping@DigitGrouping@icu_56@@QBECHABVIntDigitCountRange@2@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_4]
		push	eax		; struct icu_56::IntDigitCountRange *
		mov	ecx, [ebp+arg_0]
		push	ecx		; int
		call	?estimateDigitCount@SmallIntFormatter@icu_56@@SAHHABVIntDigitCountRange@2@@Z ; icu_56::SmallIntFormatter::estimateDigitCount(int,icu_56::IntDigitCountRange const &)
		add	esp, 8
		push	eax		; int
		mov	ecx, [ebp+var_8] ; this
		call	?getSeparatorCount@DigitGrouping@icu_56@@QBEHH@Z ; icu_56::DigitGrouping::getSeparatorCount(int)
		test	eax, eax
		setz	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?isNoGrouping@DigitGrouping@icu_56@@QBECHABVIntDigitCountRange@2@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 468h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::DigitGrouping::getGrouping2(icu_56::DigitGrouping *__hidden this)
		public ?getGrouping2@DigitGrouping@icu_56@@ABEHXZ
?getGrouping2@DigitGrouping@icu_56@@ABEHXZ proc	near
					; CODE XREF: icu_56::DigitGrouping::isSeparatorAt(int,int)+4Fp
					; icu_56::DigitGrouping::getSeparatorCount(int)+48p

var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+4], 0
		jle	short loc_4A2
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		mov	[ebp+var_D0], edx
		jmp	short loc_4AD
; ---------------------------------------------------------------------------

loc_4A2:				; CODE XREF: icu_56::DigitGrouping::getGrouping2(void)+2Aj
		mov	eax, [ebp+var_8]
		mov	ecx, [eax]
		mov	[ebp+var_D0], ecx

loc_4AD:				; CODE XREF: icu_56::DigitGrouping::getGrouping2(void)+38j
		mov	eax, [ebp+var_D0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getGrouping2@DigitGrouping@icu_56@@ABEHXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4BCh
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::DigitGrouping::getMinGrouping(icu_56::DigitGrouping *__hidden this)
		public ?getMinGrouping@DigitGrouping@icu_56@@ABEHXZ
?getMinGrouping@DigitGrouping@icu_56@@ABEHXZ proc near
					; CODE XREF: icu_56::DigitGrouping::isGroupingEnabled(int)+35p

var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+8], 0
		jle	short loc_4F6
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+8]
		mov	[ebp+var_D0], edx
		jmp	short loc_500
; ---------------------------------------------------------------------------

loc_4F6:				; CODE XREF: icu_56::DigitGrouping::getMinGrouping(void)+2Aj
		mov	[ebp+var_D0], 1

loc_500:				; CODE XREF: icu_56::DigitGrouping::getMinGrouping(void)+38j
		mov	eax, [ebp+var_D0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getMinGrouping@DigitGrouping@icu_56@@ABEHXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 510h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::DigitGrouping::clear(icu_56::DigitGrouping *__hidden this)
		public ?clear@DigitGrouping@icu_56@@QAEXXZ
?clear@DigitGrouping@icu_56@@QAEXXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+8], 0
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+4], 0
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?clear@DigitGrouping@icu_56@@QAEXXZ endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_CheckEsp:near
					; CODE XREF: icu_56::DigitGrouping::isSeparatorAt(int,int)+6Bp
					; icu_56::DigitGrouping::getSeparatorCount(int)+62p ...
; int __cdecl static icu_56::SmallIntFormatter::estimateDigitCount(int,	const struct icu_56::IntDigitCountRange	*)
		extrn ?estimateDigitCount@SmallIntFormatter@icu_56@@SAHHABVIntDigitCountRange@2@@Z:near
					; CODE XREF: icu_56::DigitGrouping::isNoGrouping(int,icu_56::IntDigitCountRange	const &)+2Bp


		end
