;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	4EF274DE008B15145CA54AEF3528AEE5
; Input	CRC32 :	725CE02B

; File Name   :	D:\compspace\objfiles\firefox\i18n\ucln_in.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
_copyright	dd 706F4320h, 67697279h, 28207468h, 32202943h, 2C353130h
		dd 746E4920h, 616E7265h, 6E6F6974h, 42206C61h, 6E697375h
		dd 20737365h, 6863614Dh
		db 69h,	6Eh
aEsCorporationA	db 'es Corporation and others. All Rights Reserved. ',0
					; DATA XREF: .data:long	`ucln_i18n_registerCleanup_56'::`2'::__LINE__Varo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 64h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int)
		public ??2@YAPAXI@Z
??2@YAPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??2@YAPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 9Ch
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 0A0h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX@Z
??3@YAXPAX@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??3@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0D8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ucln_i18n_registerCleanup_56
_ucln_i18n_registerCleanup_56 proc near

var_CC		= byte ptr -0CCh
var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0FFFFFFFFh
		jle	short loc_102
		cmp	[ebp+arg_0], 1Ch
		jl	short loc_127

loc_102:				; CODE XREF: _ucln_i18n_registerCleanup_56+22j
		mov	eax, ds:?__LINE__Var@?1??ucln_i18n_registerCleanup_56@@9@4JA ; long `ucln_i18n_registerCleanup_56'::`2'::__LINE__Var
		add	eax, 1
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FI@OFOBAOL@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@ ; "d:\\mozilla\\intl\\icu\\source\\i18n\\u"...
		push	offset ??_C@_1GC@HOLKACOC@?$AAU?$AAC?$AAL?$AAN?$AA_?$AAI?$AA1?$AA8?$AAN?$AA_?$AAS?$AAT?$AAA?$AAR?$AAT?$AA?5?$AA?$DM?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DM@ ; "UCLN_I18N_START	< type && type < UCLN_I"...
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_127:				; CODE XREF: _ucln_i18n_registerCleanup_56+28j
		mov	esi, esp
		push	0		; struct UMutex	*
		lea	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0Mutex@icu_56@@QAE@PAUUMutex@@@Z ;	icu_56::Mutex::Mutex(UMutex *)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	offset ?i18n_cleanup@@YACXZ ; i18n_cleanup(void)
		push	7
		call	_ucln_registerCleanup_56
		add	esp, 8
		cmp	[ebp+arg_0], 0FFFFFFFFh
		jle	short loc_163
		cmp	[ebp+arg_0], 1Ch
		jge	short loc_163
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	ds:_gCleanupFunctions[eax*4], ecx

loc_163:				; CODE XREF: _ucln_i18n_registerCleanup_56+76j
					; _ucln_i18n_registerCleanup_56+7Cj
		mov	esi, esp
		lea	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??1Mutex@icu_56@@QAE@XZ ; icu_56::Mutex::~Mutex(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN8
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ucln_i18n_registerCleanup_56 endp

; ---------------------------------------------------------------------------
		align 4
$LN8		dd 1			; DATA XREF: _ucln_i18n_registerCleanup_56+A1o
		dd offset $LN7
$LN7		dd 0FFFFFFF8h, 4	; DATA XREF: .text:000001A0o
		dd offset $LN6
$LN6		db 6Dh,	0		; DATA XREF: .text:000001ACo
		align 4
_text		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 1B4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
_gCleanupFunctions dd ?			; DATA XREF: _ucln_i18n_registerCleanup_56+84w
					; i18n_cleanup(void)+37r ...
		dd 1Bh dup(?)
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 224h
		public ??_C@_1GC@HOLKACOC@?$AAU?$AAC?$AAL?$AAN?$AA_?$AAI?$AA1?$AA8?$AAN?$AA_?$AAS?$AAT?$AAA?$AAR?$AAT?$AA?5?$AA?$DM?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DM@
; wchar_t `string'
??_C@_1GC@HOLKACOC@?$AAU?$AAC?$AAL?$AAN?$AA_?$AAI?$AA1?$AA8?$AAN?$AA_?$AAS?$AAT?$AAA?$AAR?$AAT?$AA?5?$AA?$DM?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DM@:
					; DATA XREF: _ucln_i18n_registerCleanup_56+3Ao
		unicode	0, <UCLN_I18N_START >
		dw 3Ch
		unicode	0, < type && type >
		dw 3Ch
		unicode	0, < UCLN_I18N_COUNT>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 288h
		public ??_C@_1FI@OFOBAOL@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
; wchar_t `string'
??_C@_1FI@OFOBAOL@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@:
					; DATA XREF: _ucln_i18n_registerCleanup_56+35o
		unicode	0, <d:\mozilla\intl\icu\source\i18n\ucln_in.cpp>,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 2E0h
		public ?__LINE__Var@?1??ucln_i18n_registerCleanup_56@@9@4JA
; long `ucln_i18n_registerCleanup_56'::`2'::__LINE__Var
?__LINE__Var@?1??ucln_i18n_registerCleanup_56@@9@4JA dd	offset aEsCorporationA
					; DATA XREF: _ucln_i18n_registerCleanup_56:loc_102r
_data		ends			; "es Corporation and others. All Rights R"...

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2E4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl i18n_cleanup(void)
?i18n_cleanup@@YACXZ proc near		; DATA XREF: _ucln_i18n_registerCleanup_56+63o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0FFFFFFFFh

loc_309:				; CODE XREF: i18n_cleanup(void):loc_348j
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 1Ch
		jge	short loc_34A
		mov	eax, [ebp+var_8]
		cmp	ds:_gCleanupFunctions[eax*4], 0
		jz	short loc_348
		mov	eax, [ebp+var_8]
		mov	esi, esp
		mov	ecx, ds:_gCleanupFunctions[eax*4]
		call	ecx ; _gCleanupFunctions
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	ds:_gCleanupFunctions[eax*4], 0

loc_348:				; CODE XREF: i18n_cleanup(void)+3Fj
		jmp	short loc_309
; ---------------------------------------------------------------------------

loc_34A:				; CODE XREF: i18n_cleanup(void)+32j
		mov	al, 1
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?i18n_cleanup@@YACXZ endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; _DWORD __thiscall icu_56::Mutex::~Mutex(icu_56::Mutex	*__hidden this)
		extrn __imp_??1Mutex@icu_56@@QAE@XZ:near
					; CODE XREF: _ucln_i18n_registerCleanup_56+90p
					; DATA XREF: _ucln_i18n_registerCleanup_56+90r
		extrn _ucln_registerCleanup_56:near
					; CODE XREF: _ucln_i18n_registerCleanup_56+6Ap
; _DWORD __thiscall icu_56::Mutex::Mutex(icu_56::Mutex *__hidden this, struct UMutex *)
		extrn __imp_??0Mutex@icu_56@@QAE@PAUUMutex@@@Z:near
					; CODE XREF: _ucln_i18n_registerCleanup_56+56p
					; DATA XREF: _ucln_i18n_registerCleanup_56+56r
; void __cdecl __wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
		extrn __imp___wassert:near ; CODE XREF:	_ucln_i18n_registerCleanup_56+3Fp
					; DATA XREF: _ucln_i18n_registerCleanup_56+3Fr
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near
					; CODE XREF: _ucln_i18n_registerCleanup_56+A7p
		extrn __RTC_CheckEsp:near ; CODE XREF: _ucln_i18n_registerCleanup_56+4Ap
					; _ucln_i18n_registerCleanup_56+5Ep ...


		end
