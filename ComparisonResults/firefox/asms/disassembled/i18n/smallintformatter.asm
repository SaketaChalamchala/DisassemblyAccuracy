;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	B4A51B48D0E4A279A53F6AD9BED4159A
; Input	CRC32 :	B336720B

; File Name   :	D:\compspace\objfiles\firefox\i18n\smallintformatter.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		public ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
; public: static bool const std::tr1::integral_constant<bool, 0>::value
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	db 0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 4
		public ?value@?$integral_constant@_N$00@tr1@std@@2_NB
; public: static bool const std::tr1::integral_constant<bool, 1>::value
?value@?$integral_constant@_N$00@tr1@std@@2_NB db 1
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8
		public ?value@?$integral_constant@I$0A@@tr1@std@@2IB
; public: static unsigned int const std::tr1::integral_constant<unsigned int, 0>::value
?value@?$integral_constant@I$0A@@tr1@std@@2IB dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0Ch
		public ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
; public: static int const std::_Arithmetic_traits<bool>::_Rank
?_Rank@?$_Arithmetic_traits@_N@std@@2HB	dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10h
		public ?_Rank@?$_Arithmetic_traits@D@std@@2HB
; public: static int const std::_Arithmetic_traits<char>::_Rank
?_Rank@?$_Arithmetic_traits@D@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14h
		public ?_Rank@?$_Arithmetic_traits@C@std@@2HB
; public: static int const std::_Arithmetic_traits<signed char>::_Rank
?_Rank@?$_Arithmetic_traits@C@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18h
		public ?_Rank@?$_Arithmetic_traits@E@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned char>::_Rank
?_Rank@?$_Arithmetic_traits@E@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1Ch
		public ?_Rank@?$_Arithmetic_traits@F@std@@2HB
; public: static int const std::_Arithmetic_traits<short>::_Rank
?_Rank@?$_Arithmetic_traits@F@std@@2HB dd 3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 20h
		public ?_Rank@?$_Arithmetic_traits@G@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned short>::_Rank
?_Rank@?$_Arithmetic_traits@G@std@@2HB dd 3
					; DATA XREF: .rdata:int	const std::_Locbase<int>::messageso
					; .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::showposo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 24h
		public ?_Rank@?$_Arithmetic_traits@H@std@@2HB
; public: static int const std::_Arithmetic_traits<int>::_Rank
?_Rank@?$_Arithmetic_traits@H@std@@2HB dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 28h
		public ?_Rank@?$_Arithmetic_traits@I@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned int>::_Rank
?_Rank@?$_Arithmetic_traits@I@std@@2HB dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2Ch
		public ?_Rank@?$_Arithmetic_traits@J@std@@2HB
; public: static int const std::_Arithmetic_traits<long>::_Rank
?_Rank@?$_Arithmetic_traits@J@std@@2HB dd 5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 30h
		public ?_Rank@?$_Arithmetic_traits@K@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned long>::_Rank
?_Rank@?$_Arithmetic_traits@K@std@@2HB dd 5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 34h
		public ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
; public: static int const std::_Arithmetic_traits<__int64>::_Rank
?_Rank@?$_Arithmetic_traits@_J@std@@2HB	dd 6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 38h
		public ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned __int64>::_Rank
?_Rank@?$_Arithmetic_traits@_K@std@@2HB	dd 6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3Ch
		public ?_Rank@?$_Arithmetic_traits@M@std@@2HB
; public: static int const std::_Arithmetic_traits<float>::_Rank
?_Rank@?$_Arithmetic_traits@M@std@@2HB dd 7
					; DATA XREF: .rdata:int	const std::_Locbase<int>::allo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 40h
		public ?_Rank@?$_Arithmetic_traits@N@std@@2HB
; public: static int const std::_Arithmetic_traits<double>::_Rank
?_Rank@?$_Arithmetic_traits@N@std@@2HB dd 8
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::lefto
					; .rdata:std::_Iosb<int>::_Openmode const std::_Iosb<int>::_Nocreateo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 44h
		public ?_Rank@?$_Arithmetic_traits@O@std@@2HB
; public: static int const std::_Arithmetic_traits<long	double>::_Rank
?_Rank@?$_Arithmetic_traits@O@std@@2HB dd 9
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 48h
		public ?collate@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::collate
?collate@?$_Locbase@H@std@@2HB dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4Ch
		public ?ctype@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::ctype
?ctype@?$_Locbase@H@std@@2HB dd	2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 50h
		public ?monetary@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::monetary
?monetary@?$_Locbase@H@std@@2HB	dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 54h
		public ?numeric@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::numeric
?numeric@?$_Locbase@H@std@@2HB dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 58h
		public ?time@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::time
?time@?$_Locbase@H@std@@2HB dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5Ch
		public ?messages@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::messages
?messages@?$_Locbase@H@std@@2HB	dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 60h
		public ?all@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::all
?all@?$_Locbase@H@std@@2HB dd offset ?_Rank@?$_Arithmetic_traits@M@std@@2HB+3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 64h
		public ?none@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::none
?none@?$_Locbase@H@std@@2HB dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 68h
		public ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::skipws
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6Ch
		public ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::unitbuf
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 70h
		public ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::uppercase
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 74h
		public ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showbase
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 78h
		public ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showpoint
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7Ch
		public ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showpos
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 80h
		public ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::left
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::righto
					; .rdata:std::_Iosb<int>::_Openmode const std::_Iosb<int>::_Noreplaceo
_rdata		ends			; int const std::_Arithmetic_traits<double>::_Rank

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 84h
		public ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::right
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B	dd offset ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B ; std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::left
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 88h
		public ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::internal
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset _gDigits+8	; "000100020003000400050006000700080009001"...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8Ch
		public ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::dec
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	_gDigits+108h ;	"003300340035003600370038003900400041004"...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 90h
		public ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::oct
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	_gDigits+308h ;	"009700980099010001010102010301040105010"...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 94h
		public ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::hex
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	_gDigits+708h ;	"022502260227022802290230023102320233023"...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 98h
		public ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::scientific
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd	offset _gDigits+0F08h ;	"048104820483048404850486048704880489049"...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9Ch
		public ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::fixed
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B	dd offset _gDigits+1F08h ; "099309940995099609970998099910001001100"...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A0h
		public ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::hexfloat
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset _gDigits+2F08h ; "150515061507150815091510151115121513151"...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A4h
		public ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::boolalpha
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset _gDigits+3F08h ; "201720182019202020212022202320242025202"...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A8h
		public ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::_Stdio
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset _gDigits+7F08h ; "406540664067406840694070407140724073407"...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ACh
		public ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::adjustfield
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	_gDigits+0C8h ;	"002500260027002800290030003100320033003"...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B0h
		public ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::basefield
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset _gDigits+0D08h ; "041704180419042004210422042304240425042"...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B4h
		public ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::floatfield
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd	offset _gDigits+2F08h ;	"150515061507150815091510151115121513151"...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B8h
		public ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::goodbit
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BCh
		public ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::eofbit
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B	dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C0h
		public ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::failbit
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C4h
		public ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::badbit
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B	dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C8h
		public ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::_Hardfail
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CCh
		public ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::in
?in@?$_Iosb@H@std@@2W4_Openmode@12@B dd	1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D0h
		public ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::out
?out@?$_Iosb@H@std@@2W4_Openmode@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D4h
		public ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::ate
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D8h
		public ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::app
?app@?$_Iosb@H@std@@2W4_Openmode@12@B dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0DCh
		public ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::trunc
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B	dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E0h
		public ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::_Nocreate
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E4h
		public ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::_Noreplace
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B dd	offset ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B ;	std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::left
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E8h
		public ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::binary
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int	const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ECh
		public ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::beg
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F0h
		public ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::cur
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F4h
		public ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::end
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 0F8h
; wchar_t gDigits
_gDigits:				; DATA XREF: icu_56::SmallIntFormatter::format(int,icu_56::IntDigitCountRange const &,icu_56::UnicodeString &)+64o
					; .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::internalo
		unicode	0, <000000010002000300040005000600070008000900100011001200130>
		unicode	0, <014001500160017001800190020002100220023002400250026002700>
		unicode	0, <280029003000310032003300340035003600370038003900400041004>
		unicode	0, <200430044004500460047004800490050005100520053005400550056>
		unicode	0, <005700580059006000610062006300640065006600670068006900700>
		unicode	0, <071007200730074007500760077007800790080008100820083008400>
		unicode	0, <850086008700880089009000910092009300940095009600970098009>
		unicode	0, <901000101010201030104010501060107010801090110011101120113>
		unicode	0, <011401150116011701180119012001210122012301240125012601270>
		unicode	0, <128012901300131013201330134013501360137013801390140014101>
		unicode	0, <420143014401450146014701480149015001510152015301540155015>
		unicode	0, <601570158015901600161016201630164016501660167016801690170>
		unicode	0, <017101720173017401750176017701780179018001810182018301840>
		unicode	0, <185018601870188018901900191019201930194019501960197019801>
		unicode	0, <990200020102020203020402050206020702080209021002110212021>
		unicode	0, <302140215021602170218021902200221022202230224022502260227>
		unicode	0, <022802290230023102320233023402350236023702380239024002410>
		unicode	0, <242024302440245024602470248024902500251025202530254025502>
		unicode	0, <560257025802590260026102620263026402650266026702680269027>
		unicode	0, <002710272027302740275027602770278027902800281028202830284>
		unicode	0, <028502860287028802890290029102920293029402950296029702980>
		unicode	0, <299030003010302030303040305030603070308030903100311031203>
		unicode	0, <130314031503160317031803190320032103220323032403250326032>
		unicode	0, <703280329033003310332033303340335033603370338033903400341>
		unicode	0, <034203430344034503460347034803490350035103520353035403550>
		unicode	0, <356035703580359036003610362036303640365036603670368036903>
		unicode	0, <700371037203730374037503760377037803790380038103820383038>
		unicode	0, <403850386038703880389039003910392039303940395039603970398>
		unicode	0, <039904000401040204030404040504060407040804090410041104120>
		unicode	0, <413041404150416041704180419042004210422042304240425042604>
		unicode	0, <270428042904300431043204330434043504360437043804390440044>
		unicode	0, <104420443044404450446044704480449045004510452045304540455>
		unicode	0, <045604570458045904600461046204630464046504660467046804690>
		unicode	0, <470047104720473047404750476047704780479048004810482048304>
		unicode	0, <840485048604870488048904900491049204930494049504960497049>
		unicode	0, <804990500050105020503050405050506050705080509051005110512>
		unicode	0, <051305140515051605170518051905200521052205230524052505260>
		unicode	0, <527052805290530053105320533053405350536053705380539054005>
		unicode	0, <410542054305440545054605470548054905500551055205530554055>
		unicode	0, <505560557055805590560056105620563056405650566056705680569>
		unicode	0, <057005710572057305740575057605770578057905800581058205830>
		unicode	0, <584058505860587058805890590059105920593059405950596059705>
		unicode	0, <980599060006010602060306040605060606070608060906100611061>
		unicode	0, <206130614061506160617061806190620062106220623062406250626>
		unicode	0, <062706280629063006310632063306340635063606370638063906400>
		unicode	0, <641064206430644064506460647064806490650065106520653065406>
		unicode	0, <550656065706580659066006610662066306640665066606670668066>
		unicode	0, <906700671067206730674067506760677067806790680068106820683>
		unicode	0, <068406850686068706880689069006910692069306940695069606970>
		unicode	0, <698069907000701070207030704070507060707070807090710071107>
		unicode	0, <120713071407150716071707180719072007210722072307240725072>
		unicode	0, <607270728072907300731073207330734073507360737073807390740>
		unicode	0, <074107420743074407450746074707480749075007510752075307540>
		unicode	0, <755075607570758075907600761076207630764076507660767076807>
		unicode	0, <690770077107720773077407750776077707780779078007810782078>
		unicode	0, <307840785078607870788078907900791079207930794079507960797>
		unicode	0, <079807990800080108020803080408050806080708080809081008110>
		unicode	0, <812081308140815081608170818081908200821082208230824082508>
		unicode	0, <260827082808290830083108320833083408350836083708380839084>
		unicode	0, <008410842084308440845084608470848084908500851085208530854>
		unicode	0, <085508560857085808590860086108620863086408650866086708680>
		unicode	0, <869087008710872087308740875087608770878087908800881088208>
		unicode	0, <830884088508860887088808890890089108920893089408950896089>
		unicode	0, <708980899090009010902090309040905090609070908090909100911>
		unicode	0, <091209130914091509160917091809190920092109220923092409250>
		unicode	0, <926092709280929093009310932093309340935093609370938093909>
		unicode	0, <400941094209430944094509460947094809490950095109520953095>
		unicode	0, <409550956095709580959096009610962096309640965096609670968>
		unicode	0, <096909700971097209730974097509760977097809790980098109820>
		unicode	0, <983098409850986098709880989099009910992099309940995099609>
		unicode	0, <970998099910001001100210031004100510061007100810091010101>
		unicode	0, <110121013101410151016101710181019102010211022102310241025>
		unicode	0, <102610271028102910301031103210331034103510361037103810391>
		unicode	0, <040104110421043104410451046104710481049105010511052105310>
		unicode	0, <541055105610571058105910601061106210631064106510661067106>
		unicode	0, <810691070107110721073107410751076107710781079108010811082>
		unicode	0, <108310841085108610871088108910901091109210931094109510961>
		unicode	0, <097109810991100110111021103110411051106110711081109111011>
		unicode	0, <111112111311141115111611171118111911201121112211231124112>
		unicode	0, <511261127112811291130113111321133113411351136113711381139>
		unicode	0, <114011411142114311441145114611471148114911501151115211531>
		unicode	0, <154115511561157115811591160116111621163116411651166116711>
		unicode	0, <681169117011711172117311741175117611771178117911801181118>
		unicode	0, <211831184118511861187118811891190119111921193119411951196>
		unicode	0, <119711981199120012011202120312041205120612071208120912101>
		unicode	0, <211121212131214121512161217121812191220122112221223122412>
		unicode	0, <251226122712281229123012311232123312341235123612371238123>
		unicode	0, <912401241124212431244124512461247124812491250125112521253>
		unicode	0, <125412551256125712581259126012611262126312641265126612671>
		unicode	0, <268126912701271127212731274127512761277127812791280128112>
		unicode	0, <821283128412851286128712881289129012911292129312941295129>
		unicode	0, <612971298129913001301130213031304130513061307130813091310>
		unicode	0, <131113121313131413151316131713181319132013211322132313241>
		unicode	0, <325132613271328132913301331133213331334133513361337133813>
		unicode	0, <391340134113421343134413451346134713481349135013511352135>
		unicode	0, <313541355135613571358135913601361136213631364136513661367>
		unicode	0, <136813691370137113721373137413751376137713781379138013811>
		unicode	0, <382138313841385138613871388138913901391139213931394139513>
		unicode	0, <961397139813991400140114021403140414051406140714081409141>
		unicode	0, <014111412141314141415141614171418141914201421142214231424>
		unicode	0, <142514261427142814291430143114321433143414351436143714381>
		unicode	0, <439144014411442144314441445144614471448144914501451145214>
		unicode	0, <531454145514561457145814591460146114621463146414651466146>
		unicode	0, <714681469147014711472147314741475147614771478147914801481>
		unicode	0, <148214831484148514861487148814891490149114921493149414951>
		unicode	0, <496149714981499150015011502150315041505150615071508150915>
		unicode	0, <101511151215131514151515161517151815191520152115221523152>
		unicode	0, <415251526152715281529153015311532153315341535153615371538>
		unicode	0, <153915401541154215431544154515461547154815491550155115521>
		unicode	0, <553155415551556155715581559156015611562156315641565156615>
		unicode	0, <671568156915701571157215731574157515761577157815791580158>
		unicode	0, <115821583158415851586158715881589159015911592159315941595>
		unicode	0, <159615971598159916001601160216031604160516061607160816091>
		unicode	0, <610161116121613161416151616161716181619162016211622162316>
		unicode	0, <241625162616271628162916301631163216331634163516361637163>
		unicode	0, <816391640164116421643164416451646164716481649165016511652>
		unicode	0, <165316541655165616571658165916601661166216631664166516661>
		unicode	0, <667166816691670167116721673167416751676167716781679168016>
		unicode	0, <811682168316841685168616871688168916901691169216931694169>
		unicode	0, <516961697169816991700170117021703170417051706170717081709>
		unicode	0, <171017111712171317141715171617171718171917201721172217231>
		unicode	0, <724172517261727172817291730173117321733173417351736173717>
		unicode	0, <381739174017411742174317441745174617471748174917501751175>
		unicode	0, <217531754175517561757175817591760176117621763176417651766>
		unicode	0, <176717681769177017711772177317741775177617771778177917801>
		unicode	0, <781178217831784178517861787178817891790179117921793179417>
		unicode	0, <951796179717981799180018011802180318041805180618071808180>
		unicode	0, <918101811181218131814181518161817181818191820182118221823>
		unicode	0, <182418251826182718281829183018311832183318341835183618371>
		unicode	0, <838183918401841184218431844184518461847184818491850185118>
		unicode	0, <521853185418551856185718581859186018611862186318641865186>
		unicode	0, <618671868186918701871187218731874187518761877187818791880>
		unicode	0, <188118821883188418851886188718881889189018911892189318941>
		unicode	0, <895189618971898189919001901190219031904190519061907190819>
		unicode	0, <091910191119121913191419151916191719181919192019211922192>
		unicode	0, <319241925192619271928192919301931193219331934193519361937>
		unicode	0, <193819391940194119421943194419451946194719481949195019511>
		unicode	0, <952195319541955195619571958195919601961196219631964196519>
		unicode	0, <661967196819691970197119721973197419751976197719781979198>
		unicode	0, <019811982198319841985198619871988198919901991199219931994>
		unicode	0, <199519961997199819992000200120022003200420052006200720082>
		unicode	0, <009201020112012201320142015201620172018201920202021202220>
		unicode	0, <232024202520262027202820292030203120322033203420352036203>
		unicode	0, <720382039204020412042204320442045204620472048204920502051>
		unicode	0, <205220532054205520562057205820592060206120622063206420652>
		unicode	0, <066206720682069207020712072207320742075207620772078207920>
		unicode	0, <802081208220832084208520862087208820892090209120922093209>
		unicode	0, <420952096209720982099210021012102210321042105210621072108>
		unicode	0, <210921102111211221132114211521162117211821192120212121222>
		unicode	0, <123212421252126212721282129213021312132213321342135213621>
		unicode	0, <372138213921402141214221432144214521462147214821492150215>
		unicode	0, <121522153215421552156215721582159216021612162216321642165>
		unicode	0, <216621672168216921702171217221732174217521762177217821792>
		unicode	0, <180218121822183218421852186218721882189219021912192219321>
		unicode	0, <942195219621972198219922002201220222032204220522062207220>
		unicode	0, <822092210221122122213221422152216221722182219222022212222>
		unicode	0, <222322242225222622272228222922302231223222332234223522362>
		unicode	0, <237223822392240224122422243224422452246224722482249225022>
		unicode	0, <512252225322542255225622572258225922602261226222632264226>
		unicode	0, <522662267226822692270227122722273227422752276227722782279>
		unicode	0, <228022812282228322842285228622872288228922902291229222932>
		unicode	0, <294229522962297229822992300230123022303230423052306230723>
		unicode	0, <082309231023112312231323142315231623172318231923202321232>
		unicode	0, <223232324232523262327232823292330233123322333233423352336>
		unicode	0, <233723382339234023412342234323442345234623472348234923502>
		unicode	0, <351235223532354235523562357235823592360236123622363236423>
		unicode	0, <652366236723682369237023712372237323742375237623772378237>
		unicode	0, <923802381238223832384238523862387238823892390239123922393>
		unicode	0, <239423952396239723982399240024012402240324042405240624072>
		unicode	0, <408240924102411241224132414241524162417241824192420242124>
		unicode	0, <222423242424252426242724282429243024312432243324342435243>
		unicode	0, <624372438243924402441244224432444244524462447244824492450>
		unicode	0, <245124522453245424552456245724582459246024612462246324642>
		unicode	0, <465246624672468246924702471247224732474247524762477247824>
		unicode	0, <792480248124822483248424852486248724882489249024912492249>
		unicode	0, <324942495249624972498249925002501250225032504250525062507>
		unicode	0, <250825092510251125122513251425152516251725182519252025212>
		unicode	0, <522252325242525252625272528252925302531253225332534253525>
		unicode	0, <362537253825392540254125422543254425452546254725482549255>
		unicode	0, <025512552255325542555255625572558255925602561256225632564>
		unicode	0, <256525662567256825692570257125722573257425752576257725782>
		unicode	0, <579258025812582258325842585258625872588258925902591259225>
		unicode	0, <932594259525962597259825992600260126022603260426052606260>
		unicode	0, <726082609261026112612261326142615261626172618261926202621>
		unicode	0, <262226232624262526262627262826292630263126322633263426352>
		unicode	0, <636263726382639264026412642264326442645264626472648264926>
		unicode	0, <502651265226532654265526562657265826592660266126622663266>
		unicode	0, <426652666266726682669267026712672267326742675267626772678>
		unicode	0, <267926802681268226832684268526862687268826892690269126922>
		unicode	0, <693269426952696269726982699270027012702270327042705270627>
		unicode	0, <072708270927102711271227132714271527162717271827192720272>
		unicode	0, <127222723272427252726272727282729273027312732273327342735>
		unicode	0, <273627372738273927402741274227432744274527462747274827492>
		unicode	0, <750275127522753275427552756275727582759276027612762276327>
		unicode	0, <642765276627672768276927702771277227732774277527762777277>
		unicode	0, <827792780278127822783278427852786278727882789279027912792>
		unicode	0, <279327942795279627972798279928002801280228032804280528062>
		unicode	0, <807280828092810281128122813281428152816281728182819282028>
		unicode	0, <212822282328242825282628272828282928302831283228332834283>
		unicode	0, <528362837283828392840284128422843284428452846284728482849>
		unicode	0, <285028512852285328542855285628572858285928602861286228632>
		unicode	0, <864286528662867286828692870287128722873287428752876287728>
		unicode	0, <782879288028812882288328842885288628872888288928902891289>
		unicode	0, <228932894289528962897289828992900290129022903290429052906>
		unicode	0, <290729082909291029112912291329142915291629172918291929202>
		unicode	0, <921292229232924292529262927292829292930293129322933293429>
		unicode	0, <352936293729382939294029412942294329442945294629472948294>
		unicode	0, <929502951295229532954295529562957295829592960296129622963>
		unicode	0, <296429652966296729682969297029712972297329742975297629772>
		unicode	0, <978297929802981298229832984298529862987298829892990299129>
		unicode	0, <922993299429952996299729982999300030013002300330043005300>
		unicode	0, <630073008300930103011301230133014301530163017301830193020>
		unicode	0, <302130223023302430253026302730283029303030313032303330343>
		unicode	0, <035303630373038303930403041304230433044304530463047304830>
		unicode	0, <493050305130523053305430553056305730583059306030613062306>
		unicode	0, <330643065306630673068306930703071307230733074307530763077>
		unicode	0, <307830793080308130823083308430853086308730883089309030913>
		unicode	0, <092309330943095309630973098309931003101310231033104310531>
		unicode	0, <063107310831093110311131123113311431153116311731183119312>
		unicode	0, <031213122312331243125312631273128312931303131313231333134>
		unicode	0, <313531363137313831393140314131423143314431453146314731483>
		unicode	0, <149315031513152315331543155315631573158315931603161316231>
		unicode	0, <633164316531663167316831693170317131723173317431753176317>
		unicode	0, <731783179318031813182318331843185318631873188318931903191>
		unicode	0, <319231933194319531963197319831993200320132023203320432053>
		unicode	0, <206320732083209321032113212321332143215321632173218321932>
		unicode	0, <203221322232233224322532263227322832293230323132323233323>
		unicode	0, <432353236323732383239324032413242324332443245324632473248>
		unicode	0, <324932503251325232533254325532563257325832593260326132623>
		unicode	0, <263326432653266326732683269327032713272327332743275327632>
		unicode	0, <773278327932803281328232833284328532863287328832893290329>
		unicode	0, <132923293329432953296329732983299330033013302330333043305>
		unicode	0, <330633073308330933103311331233133314331533163317331833193>
		unicode	0, <320332133223323332433253326332733283329333033313332333333>
		unicode	0, <343335333633373338333933403341334233433344334533463347334>
		unicode	0, <833493350335133523353335433553356335733583359336033613362>
		unicode	0, <336333643365336633673368336933703371337233733374337533763>
		unicode	0, <377337833793380338133823383338433853386338733883389339033>
		unicode	0, <913392339333943395339633973398339934003401340234033404340>
		unicode	0, <534063407340834093410341134123413341434153416341734183419>
		unicode	0, <342034213422342334243425342634273428342934303431343234333>
		unicode	0, <434343534363437343834393440344134423443344434453446344734>
		unicode	0, <483449345034513452345334543455345634573458345934603461346>
		unicode	0, <234633464346534663467346834693470347134723473347434753476>
		unicode	0, <347734783479348034813482348334843485348634873488348934903>
		unicode	0, <491349234933494349534963497349834993500350135023503350435>
		unicode	0, <053506350735083509351035113512351335143515351635173518351>
		unicode	0, <935203521352235233524352535263527352835293530353135323533>
		unicode	0, <353435353536353735383539354035413542354335443545354635473>
		unicode	0, <548354935503551355235533554355535563557355835593560356135>
		unicode	0, <623563356435653566356735683569357035713572357335743575357>
		unicode	0, <635773578357935803581358235833584358535863587358835893590>
		unicode	0, <359135923593359435953596359735983599360036013602360336043>
		unicode	0, <605360636073608360936103611361236133614361536163617361836>
		unicode	0, <193620362136223623362436253626362736283629363036313632363>
		unicode	0, <336343635363636373638363936403641364236433644364536463647>
		unicode	0, <364836493650365136523653365436553656365736583659366036613>
		unicode	0, <662366336643665366636673668366936703671367236733674367536>
		unicode	0, <763677367836793680368136823683368436853686368736883689369>
		unicode	0, <036913692369336943695369636973698369937003701370237033704>
		unicode	0, <370537063707370837093710371137123713371437153716371737183>
		unicode	0, <719372037213722372337243725372637273728372937303731373237>
		unicode	0, <333734373537363737373837393740374137423743374437453746374>
		unicode	0, <737483749375037513752375337543755375637573758375937603761>
		unicode	0, <376237633764376537663767376837693770377137723773377437753>
		unicode	0, <776377737783779378037813782378337843785378637873788378937>
		unicode	0, <903791379237933794379537963797379837993800380138023803380>
		unicode	0, <438053806380738083809381038113812381338143815381638173818>
		unicode	0, <381938203821382238233824382538263827382838293830383138323>
		unicode	0, <833383438353836383738383839384038413842384338443845384638>
		unicode	0, <473848384938503851385238533854385538563857385838593860386>
		unicode	0, <138623863386438653866386738683869387038713872387338743875>
		unicode	0, <387638773878387938803881388238833884388538863887388838893>
		unicode	0, <890389138923893389438953896389738983899390039013902390339>
		unicode	0, <043905390639073908390939103911391239133914391539163917391>
		unicode	0, <839193920392139223923392439253926392739283929393039313932>
		unicode	0, <393339343935393639373938393939403941394239433944394539463>
		unicode	0, <947394839493950395139523953395439553956395739583959396039>
		unicode	0, <613962396339643965396639673968396939703971397239733974397>
		unicode	0, <539763977397839793980398139823983398439853986398739883989>
		unicode	0, <399039913992399339943995399639973998399940004001400240034>
		unicode	0, <004400540064007400840094010401140124013401440154016401740>
		unicode	0, <184019402040214022402340244025402640274028402940304031403>
		unicode	0, <240334034403540364037403840394040404140424043404440454046>
		unicode	0, <404740484049405040514052405340544055405640574058405940604>
		unicode	0, <061406240634064406540664067406840694070407140724073407440>
		unicode	0, <754076407740784079408040814082408340844085408640874088408>
		unicode	0, <9409040914092409340944095>
; int gDigitCount
_gDigitCount	dd 1			; DATA XREF: icu_56::SmallIntFormatter::estimateDigitCount(int,icu_56::IntDigitCountRange const	&)+34r
					; icu_56::SmallIntFormatter::format(int,icu_56::IntDigitCountRange const &,icu_56::UnicodeString &)+21r
		dd 9 dup(1), 5Ah dup(2), 384h dup(3), 0C18h dup(4)
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C0F8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int)
		public ??2@YAPAXI@Z
??2@YAPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??2@YAPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 0C130h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 0C134h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C138h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX@Z
??3@YAXPAX@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??3@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C16Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::IntDigitCountRange::IntDigitCountRange(icu_56::IntDigitCountRange *__hidden	this)
		public ??0IntDigitCountRange@icu_56@@QAE@XZ
??0IntDigitCountRange@icu_56@@QAE@XZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+4], 7FFFFFFFh
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??0IntDigitCountRange@icu_56@@QAE@XZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C1ACh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::IntDigitCountRange::getMax(icu_56::IntDigitCountRange *__hidden this)
		public ?getMax@IntDigitCountRange@icu_56@@QBEHXZ
?getMax@IntDigitCountRange@icu_56@@QBEHXZ proc near
					; CODE XREF: icu_56::SmallIntFormatter::estimateDigitCount(int,icu_56::IntDigitCountRange const	&)+2Ap

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+4]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getMax@IntDigitCountRange@icu_56@@QBEHXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C1DCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::IntDigitCountRange::getMin(icu_56::IntDigitCountRange *__hidden this)
		public ?getMin@IntDigitCountRange@icu_56@@QBEHXZ
?getMin@IntDigitCountRange@icu_56@@QBEHXZ proc near
					; CODE XREF: icu_56::SmallIntFormatter::canFormat(int,icu_56::IntDigitCountRange const &)+2Ap

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getMin@IntDigitCountRange@icu_56@@QBEHXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C20Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::IntDigitCountRange & __thiscall	icu_56::IntDigitCountRange::operator=(class icu_56::IntDigitCountRange const &)
		public ??4IntDigitCountRange@icu_56@@QAEAAV01@ABV01@@Z
??4IntDigitCountRange@icu_56@@QAEAAV01@ABV01@@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [eax+4]
		mov	eax, [ebp+var_8]
		mov	[eax], ecx
		mov	[eax+4], edx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??4IntDigitCountRange@icu_56@@QAEAAV01@ABV01@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C24Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::SmallIntFormatter & __thiscall icu_56::SmallIntFormatter::operator=(class icu_56::SmallIntFormatter const &)
		public ??4SmallIntFormatter@icu_56@@QAEAAV01@ABV01@@Z
??4SmallIntFormatter@icu_56@@QAEAAV01@ABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??4SmallIntFormatter@icu_56@@QAEAAV01@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C27Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::IntDigitCountRange::IntDigitCountRange(icu_56::IntDigitCountRange *this, int, int)
		public ??0IntDigitCountRange@icu_56@@QAE@HH@Z
??0IntDigitCountRange@icu_56@@QAE@HH@Z proc near

var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		xor	eax, eax
		cmp	[ebp+arg_0], 0
		setl	al
		sub	eax, 1
		and	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		mov	[ecx], eax
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [eax]
		jge	short loc_C2CA
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	[ebp+var_D0], eax
		jmp	short loc_C2D3
; ---------------------------------------------------------------------------

loc_C2CA:				; CODE XREF: icu_56::IntDigitCountRange::IntDigitCountRange(int,int)+3Fj
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_D0], ecx

loc_C2D3:				; CODE XREF: icu_56::IntDigitCountRange::IntDigitCountRange(int,int)+4Cj
		mov	edx, [ebp+var_8]
		mov	eax, [ebp+var_D0]
		mov	[edx+4], eax
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	8
??0IntDigitCountRange@icu_56@@QAE@HH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C2ECh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::IntDigitCountRange::pin(icu_56::IntDigitCountRange *this, int)
		public ?pin@IntDigitCountRange@icu_56@@QBEHH@Z
?pin@IntDigitCountRange@icu_56@@QBEHH@Z	proc near
					; CODE XREF: icu_56::SmallIntFormatter::estimateDigitCount(int,icu_56::IntDigitCountRange const	&)+3Fp
					; icu_56::SmallIntFormatter::format(int,icu_56::IntDigitCountRange const &,icu_56::UnicodeString &)+2Cp

var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D4h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D4]
		mov	ecx, 35h ; '5'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		cmp	ecx, [eax]
		jge	short loc_C326
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	[ebp+var_D0], eax
		jmp	short loc_C354
; ---------------------------------------------------------------------------

loc_C326:				; CODE XREF: icu_56::IntDigitCountRange::pin(int)+2Bj
		mov	ecx, [ebp+var_8]
		mov	edx, [ebp+arg_0]
		cmp	edx, [ecx+4]
		jge	short loc_C33C
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_D4], eax
		jmp	short loc_C348
; ---------------------------------------------------------------------------

loc_C33C:				; CODE XREF: icu_56::IntDigitCountRange::pin(int)+43j
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		mov	[ebp+var_D4], edx

loc_C348:				; CODE XREF: icu_56::IntDigitCountRange::pin(int)+4Ej
		mov	eax, [ebp+var_D4]
		mov	[ebp+var_D0], eax

loc_C354:				; CODE XREF: icu_56::IntDigitCountRange::pin(int)+38j
		mov	eax, [ebp+var_D0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?pin@IntDigitCountRange@icu_56@@QBEHH@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C364h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl icu_56::SmallIntFormatter::estimateDigitCount(int, const struct icu_56::IntDigitCountRange *)
		public ?estimateDigitCount@SmallIntFormatter@icu_56@@SAHHABVIntDigitCountRange@2@@Z
?estimateDigitCount@SmallIntFormatter@icu_56@@SAHHABVIntDigitCountRange@2@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 1000h
		jl	short loc_C395
		mov	ecx, [ebp+arg_4] ; this
		call	?getMax@IntDigitCountRange@icu_56@@QBEHXZ ; icu_56::IntDigitCountRange::getMax(void)
		jmp	short loc_C3A8
; ---------------------------------------------------------------------------

loc_C395:				; CODE XREF: icu_56::SmallIntFormatter::estimateDigitCount(int,icu_56::IntDigitCountRange const	&)+25j
		mov	eax, [ebp+arg_0]
		mov	ecx, ds:_gDigitCount[eax*4]
		push	ecx		; int
		mov	ecx, [ebp+arg_4] ; this
		call	?pin@IntDigitCountRange@icu_56@@QBEHH@Z	; icu_56::IntDigitCountRange::pin(int)

loc_C3A8:				; CODE XREF: icu_56::SmallIntFormatter::estimateDigitCount(int,icu_56::IntDigitCountRange const	&)+2Fj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?estimateDigitCount@SmallIntFormatter@icu_56@@SAHHABVIntDigitCountRange@2@@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C3BCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__cdecl	icu_56::SmallIntFormatter::canFormat(int, const	struct icu_56::IntDigitCountRange *)
		public ?canFormat@SmallIntFormatter@icu_56@@SACHABVIntDigitCountRange@2@@Z
?canFormat@SmallIntFormatter@icu_56@@SACHABVIntDigitCountRange@2@@Z proc near

var_C4		= byte ptr -0C4h
var_C1		= byte ptr -0C1h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C4]
		mov	ecx, 31h ; '1'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 1000h
		jge	short loc_C3F9
		mov	ecx, [ebp+arg_4] ; this
		call	?getMin@IntDigitCountRange@icu_56@@QBEHXZ ; icu_56::IntDigitCountRange::getMin(void)
		cmp	eax, 4
		jg	short loc_C3F9
		mov	[ebp+var_C1], 1
		jmp	short loc_C400
; ---------------------------------------------------------------------------

loc_C3F9:				; CODE XREF: icu_56::SmallIntFormatter::canFormat(int,icu_56::IntDigitCountRange const &)+25j
					; icu_56::SmallIntFormatter::canFormat(int,icu_56::IntDigitCountRange const &)+32j
		mov	[ebp+var_C1], 0

loc_C400:				; CODE XREF: icu_56::SmallIntFormatter::canFormat(int,icu_56::IntDigitCountRange const &)+3Bj
		mov	al, [ebp+var_C1]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?canFormat@SmallIntFormatter@icu_56@@SACHABVIntDigitCountRange@2@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C41Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::UnicodeString *__cdecl	icu_56::SmallIntFormatter::format(int, const struct icu_56::IntDigitCountRange *, struct icu_56::UnicodeString *)
		public ?format@SmallIntFormatter@icu_56@@SAAAVUnicodeString@2@HABVIntDigitCountRange@2@AAV32@@Z
?format@SmallIntFormatter@icu_56@@SAAAVUnicodeString@2@HABVIntDigitCountRange@2@AAV32@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, ds:_gDigitCount[eax*4]
		push	ecx		; int
		mov	ecx, [ebp+arg_4] ; this
		call	?pin@IntDigitCountRange@icu_56@@QBEHH@Z	; icu_56::IntDigitCountRange::pin(int)
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jnz	short loc_C46C
		mov	esi, esp
		push	30h ; '0'       ; wchar_t
		mov	ecx, [ebp+arg_8] ; this
		call	dword ptr ds:__imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z ; icu_56::UnicodeString::append(wchar_t)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_C495
; ---------------------------------------------------------------------------

loc_C46C:				; CODE XREF: icu_56::SmallIntFormatter::format(int,icu_56::IntDigitCountRange const &,icu_56::UnicodeString &)+38j
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; int
		mov	ecx, [ebp+arg_0]
		lea	edx, ds:4[ecx*4]
		sub	edx, [ebp+var_8]
		push	edx		; int
		push	offset _gDigits	; "000000010002000300040005000600070008000"...
		mov	ecx, [ebp+arg_8] ; this
		call	dword ptr ds:__imp_?append@UnicodeString@icu_56@@QAEAAV12@PB_WHH@Z ; icu_56::UnicodeString::append(wchar_t const *,int,int)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_C495:				; CODE XREF: icu_56::SmallIntFormatter::format(int,icu_56::IntDigitCountRange const &,icu_56::UnicodeString &)+4Ej
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?format@SmallIntFormatter@icu_56@@SAAAVUnicodeString@2@HABVIntDigitCountRange@2@AAV32@@Z endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_CheckEsp:near
					; CODE XREF: icu_56::SmallIntFormatter::estimateDigitCount(int,icu_56::IntDigitCountRange const	&)+4Fp
					; icu_56::SmallIntFormatter::canFormat(int,icu_56::IntDigitCountRange const &)+55p ...
; struct icu_56::UnicodeString *__thiscall icu_56::UnicodeString::append(icu_56::UnicodeString *__hidden this, const wchar_t *,	int, int)
		extrn __imp_?append@UnicodeString@icu_56@@QAEAAV12@PB_WHH@Z:near
					; CODE XREF: icu_56::SmallIntFormatter::format(int,icu_56::IntDigitCountRange const &,icu_56::UnicodeString &)+6Cp
					; DATA XREF: icu_56::SmallIntFormatter::format(int,icu_56::IntDigitCountRange const &,icu_56::UnicodeString &)+6Cr
; struct icu_56::UnicodeString *__thiscall icu_56::UnicodeString::append(icu_56::UnicodeString *__hidden this, wchar_t)
		extrn __imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z:near
					; CODE XREF: icu_56::SmallIntFormatter::format(int,icu_56::IntDigitCountRange const &,icu_56::UnicodeString &)+41p
					; DATA XREF: icu_56::SmallIntFormatter::format(int,icu_56::IntDigitCountRange const &,icu_56::UnicodeString &)+41r


		end
