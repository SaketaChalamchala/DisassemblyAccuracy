;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	2275D6BC09581A354BD7D640B6F84C37
; Input	CRC32 :	EEBCE3E8

; File Name   :	D:\compspace\objfiles\firefox\i18n\ztrans.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int)
		public ??2@YAPAXI@Z
??2@YAPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??2@YAPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 38h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 3Ch
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 40h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX@Z
??3@YAXPAX@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??3@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 74h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ztrans_open_56(double, struct icu_56::TimeZoneRule *, struct icu_56::TimeZoneRule	*)
		public _ztrans_open_56
_ztrans_open_56	proc near

var_F8		= qword	ptr -0F8h
var_DC		= dword	ptr -0DCh
var_D4		= dword	ptr -0D4h
var_C8		= dword	ptr -0C8h
arg_0		= qword	ptr  8
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0DCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_DC]
		mov	ecx, 37h ; '7'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	esi, esp
		push	18h		; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_C8], eax
		cmp	[ebp+var_C8], 0
		jz	short loc_D9
		mov	eax, [ebp+arg_C]
		push	eax		; struct icu_56::TimeZoneRule *
		mov	ecx, [ebp+arg_8]
		push	ecx		; struct icu_56::TimeZoneRule *
		sub	esp, 8
		fld	[ebp+arg_0]
		fstp	[esp+0F8h+var_F8] ; double
		mov	ecx, [ebp+var_C8] ; this
		call	??0TimeZoneTransition@icu_56@@QAE@NABVTimeZoneRule@1@0@Z ; icu_56::TimeZoneTransition::TimeZoneTransition(double,icu_56::TimeZoneRule const &,icu_56::TimeZoneRule const &)
		mov	[ebp+var_DC], eax
		jmp	short loc_E3
; ---------------------------------------------------------------------------

loc_D9:					; CODE XREF: _ztrans_open_56+3Fj
		mov	[ebp+var_DC], 0

loc_E3:					; CODE XREF: _ztrans_open_56+63j
		mov	edx, [ebp+var_DC]
		mov	[ebp+var_D4], edx
		mov	eax, [ebp+var_D4]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0DCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ztrans_open_56	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ztrans_openEmpty_56
_ztrans_openEmpty_56 proc near

var_DC		= dword	ptr -0DCh
var_D4		= dword	ptr -0D4h
var_C8		= dword	ptr -0C8h

		push	ebp
		mov	ebp, esp
		sub	esp, 0DCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_DC]
		mov	ecx, 37h ; '7'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	esi, esp
		push	18h		; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_C8], eax
		cmp	[ebp+var_C8], 0
		jz	short loc_160
		mov	ecx, [ebp+var_C8] ; this
		call	??0TimeZoneTransition@icu_56@@QAE@XZ ; icu_56::TimeZoneTransition::TimeZoneTransition(void)
		mov	[ebp+var_DC], eax
		jmp	short loc_16A
; ---------------------------------------------------------------------------

loc_160:				; CODE XREF: _ztrans_openEmpty_56+3Fj
		mov	[ebp+var_DC], 0

loc_16A:				; CODE XREF: _ztrans_openEmpty_56+52j
		mov	eax, [ebp+var_DC]
		mov	[ebp+var_D4], eax
		mov	eax, [ebp+var_D4]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0DCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ztrans_openEmpty_56 endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 190h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ztrans_close_56
_ztrans_close_56 proc near

var_DC		= dword	ptr -0DCh
var_D4		= dword	ptr -0D4h
var_C8		= dword	ptr -0C8h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0DCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_DC]
		mov	ecx, 37h ; '7'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_C8], eax
		mov	ecx, [ebp+var_C8]
		mov	[ebp+var_D4], ecx
		cmp	[ebp+var_D4], 0
		jz	short loc_1F1
		mov	esi, esp
		push	1
		mov	edx, [ebp+var_D4]
		mov	eax, [edx]
		mov	ecx, [ebp+var_D4]
		mov	edx, [eax]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_DC], eax
		jmp	short loc_1FB
; ---------------------------------------------------------------------------

loc_1F1:				; CODE XREF: _ztrans_close_56+3Aj
		mov	[ebp+var_DC], 0

loc_1FB:				; CODE XREF: _ztrans_close_56+5Fj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0DCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ztrans_close_56 endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 210h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ztrans_clone_56(icu_56::TimeZoneTransition *)
		public _ztrans_clone_56
_ztrans_clone_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	ecx, [ebp+arg_0] ; this
		call	?clone@TimeZoneTransition@icu_56@@QBEPAV12@XZ ;	icu_56::TimeZoneTransition::clone(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ztrans_clone_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 24Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ztrans_equals_56
_ztrans_equals_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		call	??8TimeZoneTransition@icu_56@@QBECABV01@@Z ; icu_56::TimeZoneTransition::operator==(icu_56::TimeZoneTransition const &)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ztrans_equals_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 28Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ztrans_getTime_56(icu_56::TimeZoneTransition *)
		public _ztrans_getTime_56
_ztrans_getTime_56 proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	ecx, [ebp+arg_0] ; this
		call	?getTime@TimeZoneTransition@icu_56@@QBENXZ ; icu_56::TimeZoneTransition::getTime(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ztrans_getTime_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2C8h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ztrans_setTime_56(icu_56::TimeZoneTransition *, double)
		public _ztrans_setTime_56
_ztrans_setTime_56 proc	near

var_D4		= qword	ptr -0D4h
var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= qword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		sub	esp, 8
		fld	[ebp+arg_4]
		fstp	[esp+0D4h+var_D4] ; double
		mov	ecx, [ebp+arg_0] ; this
		call	?setTime@TimeZoneTransition@icu_56@@QAEXN@Z ; icu_56::TimeZoneTransition::setTime(double)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ztrans_setTime_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 30Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ztrans_getFrom_56
_ztrans_getFrom_56 proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]	; this
		call	?getFrom@TimeZoneTransition@icu_56@@QBEPBVTimeZoneRule@2@XZ ; icu_56::TimeZoneTransition::getFrom(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ztrans_getFrom_56 endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 348h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ztrans_setFrom_56(icu_56::TimeZoneTransition *, struct icu_56::TimeZoneRule *)
		public _ztrans_setFrom_56
_ztrans_setFrom_56 proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		push	eax		; struct icu_56::TimeZoneRule *
		mov	ecx, [ebp+arg_0] ; this
		call	?setFrom@TimeZoneTransition@icu_56@@QAEXABVTimeZoneRule@2@@Z ; icu_56::TimeZoneTransition::setFrom(icu_56::TimeZoneRule	const &)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ztrans_setFrom_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 388h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ztrans_adoptFrom_56(icu_56::TimeZoneTransition *,	struct icu_56::TimeZoneRule *)
		public _ztrans_adoptFrom_56
_ztrans_adoptFrom_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		push	eax		; struct icu_56::TimeZoneRule *
		mov	ecx, [ebp+arg_0] ; this
		call	?adoptFrom@TimeZoneTransition@icu_56@@QAEXPAVTimeZoneRule@2@@Z ; icu_56::TimeZoneTransition::adoptFrom(icu_56::TimeZoneRule *)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ztrans_adoptFrom_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3C8h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ztrans_getTo_56(icu_56::TimeZoneTransition *)
		public _ztrans_getTo_56
_ztrans_getTo_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	ecx, [ebp+arg_0] ; this
		call	?getTo@TimeZoneTransition@icu_56@@QBEPBVTimeZoneRule@2@XZ ; icu_56::TimeZoneTransition::getTo(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ztrans_getTo_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 404h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ztrans_setTo_56(icu_56::TimeZoneTransition *, struct icu_56::TimeZoneRule	*)
		public _ztrans_setTo_56
_ztrans_setTo_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		push	eax		; struct icu_56::TimeZoneRule *
		mov	ecx, [ebp+arg_0] ; this
		call	?setTo@TimeZoneTransition@icu_56@@QAEXABVTimeZoneRule@2@@Z ; icu_56::TimeZoneTransition::setTo(icu_56::TimeZoneRule const &)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ztrans_setTo_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 444h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ztrans_adoptTo_56(icu_56::TimeZoneTransition *, struct icu_56::TimeZoneRule *)
		public _ztrans_adoptTo_56
_ztrans_adoptTo_56 proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		push	eax		; struct icu_56::TimeZoneRule *
		mov	ecx, [ebp+arg_0] ; this
		call	?adoptTo@TimeZoneTransition@icu_56@@QAEXPAVTimeZoneRule@2@@Z ; icu_56::TimeZoneTransition::adoptTo(icu_56::TimeZoneRule	*)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ztrans_adoptTo_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 484h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ztrans_getStaticClassID_56
_ztrans_getStaticClassID_56 proc near

var_C0		= byte ptr -0C0h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		call	?getStaticClassID@TimeZoneTransition@icu_56@@SAPAXXZ ; icu_56::TimeZoneTransition::getStaticClassID(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ztrans_getStaticClassID_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4BCh
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ztrans_getDynamicClassID_56(icu_56::TimeZoneTransition *)
		public _ztrans_getDynamicClassID_56
_ztrans_getDynamicClassID_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	ecx, [ebp+arg_0] ; this
		call	?getDynamicClassID@TimeZoneTransition@icu_56@@UBEPAXXZ ; icu_56::TimeZoneTransition::getDynamicClassID(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ztrans_getDynamicClassID_56 endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; _DWORD __thiscall icu_56::TimeZoneTransition::TimeZoneTransition(icu_56::TimeZoneTransition *__hidden	this, double, const struct icu_56::TimeZoneRule	*, const struct	icu_56::TimeZoneRule *)
		extrn ??0TimeZoneTransition@icu_56@@QAE@NABVTimeZoneRule@1@0@Z:near
					; CODE XREF: _ztrans_open_56+58p
; void *__cdecl	static icu_56::UMemory::operator new(unsigned int)
		extrn __imp_??2UMemory@icu_56@@SAPAXI@Z:near
					; CODE XREF: _ztrans_open_56+22p
					; _ztrans_openEmpty_56+22p
					; DATA XREF: ...
		extrn __fltused:near
		extrn __RTC_CheckEsp:near ; CODE XREF: _ztrans_open_56+2Dp
					; _ztrans_open_56+8Cp ...
; _DWORD __thiscall icu_56::TimeZoneTransition::TimeZoneTransition(icu_56::TimeZoneTransition *__hidden	this)
		extrn ??0TimeZoneTransition@icu_56@@QAE@XZ:near
					; CODE XREF: _ztrans_openEmpty_56+47p
; struct icu_56::TimeZoneTransition *__thiscall	icu_56::TimeZoneTransition::clone(icu_56::TimeZoneTransition *__hidden this)
		extrn ?clone@TimeZoneTransition@icu_56@@QBEPAV12@XZ:near
					; CODE XREF: _ztrans_clone_56+21p
; public: signed char __thiscall icu_56::TimeZoneTransition::operator==(class icu_56::TimeZoneTransition const &)const
		extrn ??8TimeZoneTransition@icu_56@@QBECABV01@@Z:near
					; CODE XREF: _ztrans_equals_56+25p
; double __thiscall icu_56::TimeZoneTransition::getTime(icu_56::TimeZoneTransition *__hidden this)
		extrn ?getTime@TimeZoneTransition@icu_56@@QBENXZ:near
					; CODE XREF: _ztrans_getTime_56+21p
; void __thiscall icu_56::TimeZoneTransition::setTime(icu_56::TimeZoneTransition *__hidden this, double)
		extrn ?setTime@TimeZoneTransition@icu_56@@QAEXN@Z:near
					; CODE XREF: _ztrans_setTime_56+2Ap
; const	struct icu_56::TimeZoneRule *__thiscall	icu_56::TimeZoneTransition::getFrom(icu_56::TimeZoneTransition *__hidden this)
		extrn ?getFrom@TimeZoneTransition@icu_56@@QBEPBVTimeZoneRule@2@XZ:near
					; CODE XREF: _ztrans_getFrom_56+23p
; void __thiscall icu_56::TimeZoneTransition::setFrom(icu_56::TimeZoneTransition *__hidden this, const struct icu_56::TimeZoneRule *)
		extrn ?setFrom@TimeZoneTransition@icu_56@@QAEXABVTimeZoneRule@2@@Z:near
					; CODE XREF: _ztrans_setFrom_56+25p
; void __thiscall icu_56::TimeZoneTransition::adoptFrom(icu_56::TimeZoneTransition *__hidden this, struct icu_56::TimeZoneRule *)
		extrn ?adoptFrom@TimeZoneTransition@icu_56@@QAEXPAVTimeZoneRule@2@@Z:near
					; CODE XREF: _ztrans_adoptFrom_56+25p
; const	struct icu_56::TimeZoneRule *__thiscall	icu_56::TimeZoneTransition::getTo(icu_56::TimeZoneTransition *__hidden this)
		extrn ?getTo@TimeZoneTransition@icu_56@@QBEPBVTimeZoneRule@2@XZ:near
					; CODE XREF: _ztrans_getTo_56+21p
; void __thiscall icu_56::TimeZoneTransition::setTo(icu_56::TimeZoneTransition *__hidden this, const struct icu_56::TimeZoneRule *)
		extrn ?setTo@TimeZoneTransition@icu_56@@QAEXABVTimeZoneRule@2@@Z:near
					; CODE XREF: _ztrans_setTo_56+25p
; void __thiscall icu_56::TimeZoneTransition::adoptTo(icu_56::TimeZoneTransition *__hidden this, struct	icu_56::TimeZoneRule *)
		extrn ?adoptTo@TimeZoneTransition@icu_56@@QAEXPAVTimeZoneRule@2@@Z:near
					; CODE XREF: _ztrans_adoptTo_56+25p
; void *__cdecl	static icu_56::TimeZoneTransition::getStaticClassID()
		extrn ?getStaticClassID@TimeZoneTransition@icu_56@@SAPAXXZ:near
					; CODE XREF: _ztrans_getStaticClassID_56+1Ep
; void *__thiscall icu_56::TimeZoneTransition::getDynamicClassID(icu_56::TimeZoneTransition *__hidden this)
		extrn ?getDynamicClassID@TimeZoneTransition@icu_56@@UBEPAXXZ:near
					; CODE XREF: _ztrans_getDynamicClassID_56+21p


		end
