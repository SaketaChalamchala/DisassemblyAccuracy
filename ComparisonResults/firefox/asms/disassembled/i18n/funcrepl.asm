;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	746082A4F916E5CDED83F1F255B52600
; Input	CRC32 :	6F4FDAFD

; File Name   :	D:\compspace\objfiles\firefox\i18n\funcrepl.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		public ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
; public: static bool const std::tr1::integral_constant<bool, 0>::value
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	db 0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 4
		public ?value@?$integral_constant@_N$00@tr1@std@@2_NB
; public: static bool const std::tr1::integral_constant<bool, 1>::value
?value@?$integral_constant@_N$00@tr1@std@@2_NB db 1
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8
		public ?value@?$integral_constant@I$0A@@tr1@std@@2IB
; public: static unsigned int const std::tr1::integral_constant<unsigned int, 0>::value
?value@?$integral_constant@I$0A@@tr1@std@@2IB dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0Ch
		public ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
; public: static int const std::_Arithmetic_traits<bool>::_Rank
?_Rank@?$_Arithmetic_traits@_N@std@@2HB	dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10h
		public ?_Rank@?$_Arithmetic_traits@D@std@@2HB
; public: static int const std::_Arithmetic_traits<char>::_Rank
?_Rank@?$_Arithmetic_traits@D@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14h
		public ?_Rank@?$_Arithmetic_traits@C@std@@2HB
; public: static int const std::_Arithmetic_traits<signed char>::_Rank
?_Rank@?$_Arithmetic_traits@C@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18h
		public ?_Rank@?$_Arithmetic_traits@E@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned char>::_Rank
?_Rank@?$_Arithmetic_traits@E@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1Ch
		public ?_Rank@?$_Arithmetic_traits@F@std@@2HB
; public: static int const std::_Arithmetic_traits<short>::_Rank
?_Rank@?$_Arithmetic_traits@F@std@@2HB dd 3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 20h
		public ?_Rank@?$_Arithmetic_traits@G@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned short>::_Rank
?_Rank@?$_Arithmetic_traits@G@std@@2HB dd 3
					; DATA XREF: .rdata:int	const std::_Locbase<int>::messageso
					; .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::showposo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 24h
		public ?_Rank@?$_Arithmetic_traits@H@std@@2HB
; public: static int const std::_Arithmetic_traits<int>::_Rank
?_Rank@?$_Arithmetic_traits@H@std@@2HB dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 28h
		public ?_Rank@?$_Arithmetic_traits@I@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned int>::_Rank
?_Rank@?$_Arithmetic_traits@I@std@@2HB dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2Ch
		public ?_Rank@?$_Arithmetic_traits@J@std@@2HB
; public: static int const std::_Arithmetic_traits<long>::_Rank
?_Rank@?$_Arithmetic_traits@J@std@@2HB dd 5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 30h
		public ?_Rank@?$_Arithmetic_traits@K@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned long>::_Rank
?_Rank@?$_Arithmetic_traits@K@std@@2HB dd 5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 34h
		public ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
; public: static int const std::_Arithmetic_traits<__int64>::_Rank
?_Rank@?$_Arithmetic_traits@_J@std@@2HB	dd 6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 38h
		public ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned __int64>::_Rank
?_Rank@?$_Arithmetic_traits@_K@std@@2HB	dd 6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3Ch
		public ?_Rank@?$_Arithmetic_traits@M@std@@2HB
; public: static int const std::_Arithmetic_traits<float>::_Rank
?_Rank@?$_Arithmetic_traits@M@std@@2HB dd 7
					; DATA XREF: .rdata:int	const std::_Locbase<int>::allo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 40h
		public ?_Rank@?$_Arithmetic_traits@N@std@@2HB
; public: static int const std::_Arithmetic_traits<double>::_Rank
?_Rank@?$_Arithmetic_traits@N@std@@2HB dd 8
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::lefto
					; .rdata:std::_Iosb<int>::_Openmode const std::_Iosb<int>::_Nocreateo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 44h
		public ?_Rank@?$_Arithmetic_traits@O@std@@2HB
; public: static int const std::_Arithmetic_traits<long	double>::_Rank
?_Rank@?$_Arithmetic_traits@O@std@@2HB dd 9
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 48h
		public ?collate@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::collate
?collate@?$_Locbase@H@std@@2HB dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4Ch
		public ?ctype@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::ctype
?ctype@?$_Locbase@H@std@@2HB dd	2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 50h
		public ?monetary@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::monetary
?monetary@?$_Locbase@H@std@@2HB	dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 54h
		public ?numeric@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::numeric
?numeric@?$_Locbase@H@std@@2HB dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 58h
		public ?time@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::time
?time@?$_Locbase@H@std@@2HB dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5Ch
		public ?messages@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::messages
?messages@?$_Locbase@H@std@@2HB	dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 60h
		public ?all@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::all
?all@?$_Locbase@H@std@@2HB dd offset ?_Rank@?$_Arithmetic_traits@M@std@@2HB+3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 64h
		public ?none@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::none
?none@?$_Locbase@H@std@@2HB dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 68h
		public ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::skipws
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6Ch
		public ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::unitbuf
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 70h
		public ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::uppercase
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 74h
		public ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showbase
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 78h
		public ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showpoint
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7Ch
		public ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showpos
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 80h
		public ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::left
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::righto
					; .rdata:std::_Iosb<int>::_Openmode const std::_Iosb<int>::_Noreplaceo
_rdata		ends			; int const std::_Arithmetic_traits<double>::_Rank

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 84h
		public ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::right
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B	dd offset ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B ; std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::left
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 88h
		public ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::internal
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset _CLOSE ; "	)"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8Ch
		public ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::dec
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_1FE+2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 90h
		public ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::oct
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_3FF+1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 94h
		public ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::hex
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	??_R13?0A@EA@UnicodeReplacer@icu_56@@8 ; icu_56::UnicodeReplacer::`RTTI	Base Class Descriptor at (4,-1,0,64)'
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 98h
		public ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::scientific
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd	offset loc_FFE+2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9Ch
		public ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::fixed
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B	dd 2000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A0h
		public ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::hexfloat
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 3000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A4h
		public ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::boolalpha
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 4000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A8h
		public ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::_Stdio
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 8000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ACh
		public ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::adjustfield
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_1BD+3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B0h
		public ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::basefield
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset loc_E00
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B4h
		public ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::floatfield
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd	3000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B8h
		public ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::goodbit
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BCh
		public ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::eofbit
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B	dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C0h
		public ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::failbit
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C4h
		public ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::badbit
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B	dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C8h
		public ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::_Hardfail
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CCh
		public ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::in
?in@?$_Iosb@H@std@@2W4_Openmode@12@B dd	1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D0h
		public ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::out
?out@?$_Iosb@H@std@@2W4_Openmode@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D4h
		public ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::ate
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D8h
		public ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::app
?app@?$_Iosb@H@std@@2W4_Openmode@12@B dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0DCh
		public ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::trunc
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B	dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E0h
		public ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::_Nocreate
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E4h
		public ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::_Noreplace
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B dd	offset ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B ;	std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::left
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E8h
		public ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::binary
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int	const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ECh
		public ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::beg
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F0h
		public ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::cur
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F4h
		public ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::end
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F8h
; wchar_t OPEN
_OPEN:					; DATA XREF: icu_56::FunctionReplacer::toReplacerPattern(icu_56::UnicodeString &,signed	char)+BBo
		unicode	0, <( >,0
		align 10h
; wchar_t CLOSE
_CLOSE:					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::internalo
					; icu_56::FunctionReplacer::toReplacerPattern(icu_56::UnicodeString &,signed char)+130o
		unicode	0, < )>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
		assume cs:_bss
		;org 108h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
; char `public:	static void * __cdecl icu_56::FunctionReplacer::getStaticClassID(void)'::`2'::classID
?classID@?1??getStaticClassID@FunctionReplacer@icu_56@@SAPAXXZ@4DA db ?
					; DATA XREF: icu_56::FunctionReplacer::getStaticClassID(void)+1Eo
		align 4
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int)
		public ??2@YAPAXI@Z
??2@YAPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??2@YAPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 144h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 148h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 14Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX@Z
??3@YAXPAX@Z	proc near		; CODE XREF: icu_56::UnicodeReplacer::`scalar deleting destructor'(uint)+37p
					; icu_56::UnicodeReplacer::`vector deleting destructor'(uint)+75p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??3@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 180h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::Transliterator::getMaximumContextLength(icu_56::Transliterator	*__hidden this)
		public ?getMaximumContextLength@Transliterator@icu_56@@QBEHXZ
?getMaximumContextLength@Transliterator@icu_56@@QBEHXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+48h]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getMaximumContextLength@Transliterator@icu_56@@QBEHXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1B0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::Transliterator::setID(icu_56::Transliterator *this, const struct icu_56::UnicodeString *)
		public ?setID@Transliterator@icu_56@@IAEXABVUnicodeString@2@@Z
?setID@Transliterator@icu_56@@IAEXABVUnicodeString@2@@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx

loc_1BD:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::adjustfieldo
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		add	ecx, 4
		call	dword ptr ds:__imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z ;	icu_56::UnicodeString::operator=(icu_56::UnicodeString const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	0		; wchar_t
		mov	ecx, [ebp+var_8]
		add	ecx, 4		; this
		call	dword ptr ds:__imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z ; icu_56::UnicodeString::append(wchar_t)
		cmp	esi, esp

loc_1FE:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::deco
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_8]
		add	ecx, 4		; this
		mov	esi, esp
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		sub	eax, 1
		mov	esi, esp
		push	eax		; int
		mov	ecx, [ebp+var_8]
		add	ecx, 4		; this
		call	dword ptr ds:__imp_?truncate@UnicodeString@icu_56@@QAECH@Z ; icu_56::UnicodeString::truncate(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?setID@Transliterator@icu_56@@IAEXABVUnicodeString@2@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 248h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static union icu_56::Transliterator::Token __cdecl icu_56::Transliterator::integerToken(int)
		public ?integerToken@Transliterator@icu_56@@SA?ATToken@12@H@Z
?integerToken@Transliterator@icu_56@@SA?ATToken@12@H@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?integerToken@Transliterator@icu_56@@SA?ATToken@12@H@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN5		dd 1			; DATA XREF: icu_56::Transliterator::integerToken(int)+2Bo
		dd offset $LN4
$LN4		dd 0FFFFFFF8h, 4	; DATA XREF: .text:0000028Co
		dd offset $LN3
$LN3		db 74h,	0		; DATA XREF: .text:00000298o
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2A0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static union icu_56::Transliterator::Token __cdecl icu_56::Transliterator::pointerToken(void *)
		public ?pointerToken@Transliterator@icu_56@@SA?ATToken@12@PAX@Z
?pointerToken@Transliterator@icu_56@@SA?ATToken@12@PAX@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?pointerToken@Transliterator@icu_56@@SA?ATToken@12@PAX@Z endp

; ---------------------------------------------------------------------------
		align 10h
$LN5_0		dd 1			; DATA XREF: icu_56::Transliterator::pointerToken(void *)+2Bo
		dd offset $LN4_0
$LN4_0		dd 0FFFFFFF8h, 4	; DATA XREF: .text:000002E4o
		dd offset $LN3_0
$LN3_0		db 74h,	0		; DATA XREF: .text:000002F0o
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2F8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::UnicodeReplacer::UnicodeReplacer(icu_56::UnicodeReplacer *__hidden this)
		public ??0UnicodeReplacer@icu_56@@QAE@XZ
??0UnicodeReplacer@icu_56@@QAE@XZ proc near
					; CODE XREF: icu_56::FunctionReplacer::FunctionReplacer(icu_56::Transliterator *,icu_56::UnicodeFunctor	*)+3Bp

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7UnicodeReplacer@icu_56@@6B@	; const	icu_56::UnicodeReplacer::`vftable'
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??0UnicodeReplacer@icu_56@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 330h
		dd offset ??_R4UnicodeReplacer@icu_56@@6B@ ; const icu_56::UnicodeReplacer::`RTTI Complete Object Locator'
;
; Exported entry
;
		public ??_7UnicodeReplacer@icu_56@@6B@
; const	icu_56::UnicodeReplacer::`vftable'
??_7UnicodeReplacer@icu_56@@6B@	dd offset ??_EUnicodeReplacer@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::UnicodeReplacer::UnicodeReplacer(void)+26o
					; icu_56::UnicodeReplacer::UnicodeReplacer(icu_56::UnicodeReplacer const &)+26o
					; icu_56::UnicodeReplacer::`vector deleting destructor'(uint)
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 344h
		public ??_R4UnicodeReplacer@icu_56@@6B@
; const	icu_56::UnicodeReplacer::`RTTI Complete	Object Locator'
??_R4UnicodeReplacer@icu_56@@6B@ dd 3 dup(0) ; DATA XREF: .rdata:00000330o
		dd offset ??_R0?AVUnicodeReplacer@icu_56@@@8 ; icu_56::UnicodeReplacer `RTTI Type Descriptor'
		dd offset ??_R3UnicodeReplacer@icu_56@@8 ; icu_56::UnicodeReplacer::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 358h
		public ??_R0?AVUnicodeReplacer@icu_56@@@8
; class	icu_56::UnicodeReplacer	`RTTI Type Descriptor'
??_R0?AVUnicodeReplacer@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00000350o
					; .rdata$r:icu_56::UnicodeReplacer::`RTTI Base Class Descriptor	at (0,-1,0,64)'o ...
					; const	type_info::`vftable'
		align 10h
a_?avunicoderep	db '.?AVUnicodeReplacer@icu_56@@',0
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 380h
		public ??_R3UnicodeReplacer@icu_56@@8
; icu_56::UnicodeReplacer::`RTTI Class Hierarchy Descriptor'
??_R3UnicodeReplacer@icu_56@@8 dd 2 dup(0) ; DATA XREF:	.rdata$r:00000354o
					; .rdata$r:000003B0o ...
		dd 1
		dd offset ??_R2UnicodeReplacer@icu_56@@8 ; icu_56::UnicodeReplacer::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 390h
		public ??_R2UnicodeReplacer@icu_56@@8
; icu_56::UnicodeReplacer::`RTTI Base Class Array'
??_R2UnicodeReplacer@icu_56@@8 dd offset ??_R1A@?0A@EA@UnicodeReplacer@icu_56@@8
					; DATA XREF: .rdata$r:0000038Co
					; icu_56::UnicodeReplacer::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 398h
		public ??_R1A@?0A@EA@UnicodeReplacer@icu_56@@8
; icu_56::UnicodeReplacer::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UnicodeReplacer@icu_56@@8	dd offset ??_R0?AVUnicodeReplacer@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UnicodeReplacer::`RTTI Base Class	Array'o
					; icu_56::UnicodeReplacer `RTTI	Type Descriptor'
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UnicodeReplacer@icu_56@@8 ; icu_56::UnicodeReplacer::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3B4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::UnicodeReplacer::UnicodeReplacer(icu_56::UnicodeReplacer *this, const struct icu_56::UnicodeReplacer *)
		public ??0UnicodeReplacer@icu_56@@QAE@ABV01@@Z
??0UnicodeReplacer@icu_56@@QAE@ABV01@@Z	proc near
					; CODE XREF: icu_56::FunctionReplacer::FunctionReplacer(icu_56::FunctionReplacer const &)+8Ap

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7UnicodeReplacer@icu_56@@6B@	; const	icu_56::UnicodeReplacer::`vftable'
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??0UnicodeReplacer@icu_56@@QAE@ABV01@@Z	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3ECh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::UnicodeReplacer	& __thiscall icu_56::UnicodeReplacer::operator=(class icu_56::UnicodeReplacer const &)
		public ??4UnicodeReplacer@icu_56@@QAEAAV01@ABV01@@Z
??4UnicodeReplacer@icu_56@@QAEAAV01@ABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]

loc_3FF:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::octo
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??4UnicodeReplacer@icu_56@@QAEAAV01@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 41Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::UnicodeReplacer::`scalar deleting destructor'(unsigned int)
		public ??_GUnicodeReplacer@icu_56@@UAEPAXI@Z
??_GUnicodeReplacer@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1UnicodeReplacer@icu_56@@UAE@XZ ; icu_56::UnicodeReplacer::~UnicodeReplacer(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_45B
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_45B:				; CODE XREF: icu_56::UnicodeReplacer::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GUnicodeReplacer@icu_56@@UAEPAXI@Z endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 474h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::UnicodeReplacer::`vector deleting destructor'(unsigned int)
		public ??_EUnicodeReplacer@icu_56@@UAEPAXI@Z
??_EUnicodeReplacer@icu_56@@UAEPAXI@Z proc near
					; DATA XREF: .rdata:const icu_56::UnicodeReplacer::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		and	eax, 2
		jz	short loc_4D5
		push	offset ??1UnicodeReplacer@icu_56@@UAE@XZ ; icu_56::UnicodeReplacer::~UnicodeReplacer(void)
		mov	eax, [ebp+var_8]
		mov	ecx, [eax-4]
		push	ecx
		push	4
		mov	edx, [ebp+var_8]
		push	edx
		call	??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_4CD
		mov	eax, [ebp+var_8]
		sub	eax, 4
		push	eax		; void *
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		add	esp, 4

loc_4CD:				; CODE XREF: icu_56::UnicodeReplacer::`vector deleting destructor'(uint)+48j
		mov	eax, [ebp+var_8]
		sub	eax, 4
		jmp	short loc_4F4
; ---------------------------------------------------------------------------

loc_4D5:				; CODE XREF: icu_56::UnicodeReplacer::`vector deleting destructor'(uint)+29j
		mov	ecx, [ebp+var_8] ; this
		call	??1UnicodeReplacer@icu_56@@UAE@XZ ; icu_56::UnicodeReplacer::~UnicodeReplacer(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_4F1
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_4F1:				; CODE XREF: icu_56::UnicodeReplacer::`vector deleting destructor'(uint)+6Fj
		mov	eax, [ebp+var_8]

loc_4F4:				; CODE XREF: icu_56::UnicodeReplacer::`vector deleting destructor'(uint)+5Fj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_EUnicodeReplacer@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 50Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete[](void *)
		public ??_V@YAXPAX@Z
??_V@YAXPAX@Z	proc near		; CODE XREF: icu_56::UnicodeReplacer::`vector deleting destructor'(uint)+51p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??_V@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 540h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	icu_56::FunctionReplacer::getStaticClassID()
		public ?getStaticClassID@FunctionReplacer@icu_56@@SAPAXXZ
?getStaticClassID@FunctionReplacer@icu_56@@SAPAXXZ proc	near
					; CODE XREF: icu_56::FunctionReplacer::getDynamicClassID(void)+23p

var_C0		= byte ptr -0C0h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, offset ?classID@?1??getStaticClassID@FunctionReplacer@icu_56@@SAPAXXZ@4DA ; char `icu_56::FunctionReplacer::getStaticClassID(void)'::`2'::classID
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getStaticClassID@FunctionReplacer@icu_56@@SAPAXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 56Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__thiscall icu_56::FunctionReplacer::getDynamicClassID(icu_56::FunctionReplacer	*__hidden this)
		public ?getDynamicClassID@FunctionReplacer@icu_56@@UBEPAXXZ
?getDynamicClassID@FunctionReplacer@icu_56@@UBEPAXXZ proc near ; DATA XREF: .rdata:00000644o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		call	?getStaticClassID@FunctionReplacer@icu_56@@SAPAXXZ ; icu_56::FunctionReplacer::getStaticClassID(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?getDynamicClassID@FunctionReplacer@icu_56@@UBEPAXXZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 5A8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::FunctionReplacer::FunctionReplacer(icu_56::FunctionReplacer	*this, struct icu_56::Transliterator *,	struct icu_56::UnicodeFunctor *)
		public ??0FunctionReplacer@icu_56@@QAE@PAVTransliterator@1@PAVUnicodeFunctor@1@@Z
??0FunctionReplacer@icu_56@@QAE@PAVTransliterator@1@PAVUnicodeFunctor@1@@Z proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0UnicodeFunctor@icu_56@@QAE@XZ ; icu_56::UnicodeFunctor::UnicodeFunctor(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_8]
		add	ecx, 4		; this
		call	??0UnicodeReplacer@icu_56@@QAE@XZ ; icu_56::UnicodeReplacer::UnicodeReplacer(void)
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7FunctionReplacer@icu_56@@6BUnicodeFunctor@1@@ ; const icu_56::FunctionReplacer::`vftable'{for `icu_56::UnicodeFunctor'}
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+4], offset ??_7FunctionReplacer@icu_56@@6BUnicodeReplacer@1@@ ; const icu_56::FunctionReplacer::`vftable'{for `icu_56::UnicodeReplacer'}
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_4]
		mov	[eax+0Ch], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??0FunctionReplacer@icu_56@@QAE@PAVTransliterator@1@PAVUnicodeFunctor@1@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 628h
		dd offset ??_R4FunctionReplacer@icu_56@@6BUnicodeReplacer@1@@ ;	const icu_56::FunctionReplacer::`RTTI Complete Object Locator'{for `icu_56::UnicodeReplacer'}
		public ??_7FunctionReplacer@icu_56@@6BUnicodeReplacer@1@@
; const	icu_56::FunctionReplacer::`vftable'{for `icu_56::UnicodeReplacer'}
??_7FunctionReplacer@icu_56@@6BUnicodeReplacer@1@@ dd offset ??_EFunctionReplacer@icu_56@@W3AEPAXI@Z
					; DATA XREF: icu_56::FunctionReplacer::FunctionReplacer(icu_56::Transliterator *,icu_56::UnicodeFunctor	*)+4Co
					; icu_56::FunctionReplacer::FunctionReplacer(icu_56::FunctionReplacer const &)+9Fo ...
					; [thunk]:icu_56::FunctionReplacer::`vector deleting destructor'`adjustor{4}' (uint)
		dd offset ?replace@FunctionReplacer@icu_56@@UAEHAAVReplaceable@2@HHAAH@Z ; icu_56::FunctionReplacer::replace(icu_56::Replaceable &,int,int,int &)
		dd offset ?toReplacerPattern@FunctionReplacer@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z ;	icu_56::FunctionReplacer::toReplacerPattern(icu_56::UnicodeString &,signed char)
		dd offset ?addReplacementSetTo@FunctionReplacer@icu_56@@UBEXAAVUnicodeSet@2@@Z ; icu_56::FunctionReplacer::addReplacementSetTo(icu_56::UnicodeSet &)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 63Ch
		dd offset ??_R4FunctionReplacer@icu_56@@6BUnicodeFunctor@1@@ ; const icu_56::FunctionReplacer::`RTTI Complete Object Locator'{for `icu_56::UnicodeFunctor'}
		public ??_7FunctionReplacer@icu_56@@6BUnicodeFunctor@1@@
; const	icu_56::FunctionReplacer::`vftable'{for `icu_56::UnicodeFunctor'}
??_7FunctionReplacer@icu_56@@6BUnicodeFunctor@1@@ dd offset ??_EFunctionReplacer@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::FunctionReplacer::FunctionReplacer(icu_56::Transliterator *,icu_56::UnicodeFunctor	*)+43o
					; icu_56::FunctionReplacer::FunctionReplacer(icu_56::FunctionReplacer const &)+96o ...
					; icu_56::FunctionReplacer::`vector deleting destructor'(uint)
		dd offset ?getDynamicClassID@FunctionReplacer@icu_56@@UBEPAXXZ ; icu_56::FunctionReplacer::getDynamicClassID(void)
		dd offset ?clone@FunctionReplacer@icu_56@@UBEPAVUnicodeFunctor@2@XZ ; icu_56::FunctionReplacer::clone(void)
		dd offset ?toMatcher@UnicodeFunctor@icu_56@@UBEPAVUnicodeMatcher@2@XZ ;	icu_56::UnicodeFunctor::toMatcher(void)
		dd offset ?toReplacer@FunctionReplacer@icu_56@@UBEPAVUnicodeReplacer@2@XZ ; icu_56::FunctionReplacer::toReplacer(void)
		dd offset ?setData@FunctionReplacer@icu_56@@UAEXPBVTransliterationRuleData@2@@Z	; icu_56::FunctionReplacer::setData(icu_56::TransliterationRuleData const *)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 658h
		public ??_R4FunctionReplacer@icu_56@@6BUnicodeFunctor@1@@
; const	icu_56::FunctionReplacer::`RTTI	Complete Object	Locator'{for `icu_56::UnicodeFunctor'}
??_R4FunctionReplacer@icu_56@@6BUnicodeFunctor@1@@ dd 3	dup(0) ; DATA XREF: .rdata:0000063Co
		dd offset ??_R0?AVFunctionReplacer@icu_56@@@8 ;	icu_56::FunctionReplacer `RTTI Type Descriptor'
		dd offset ??_R3FunctionReplacer@icu_56@@8 ; icu_56::FunctionReplacer::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 66Ch
		public ??_R0?AVFunctionReplacer@icu_56@@@8
; class	icu_56::FunctionReplacer `RTTI Type Descriptor'
??_R0?AVFunctionReplacer@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00000664o
					; .rdata$r:icu_56::FunctionReplacer::`RTTI Base	Class Descriptor at (0,-1,0,64)'o ...
					; const	type_info::`vftable'
		dd 0
a_?avfunctionre	db '.?AVFunctionReplacer@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 694h
		public ??_R3FunctionReplacer@icu_56@@8
; icu_56::FunctionReplacer::`RTTI Class	Hierarchy Descriptor'
??_R3FunctionReplacer@icu_56@@8	dd 0	; DATA XREF: .rdata$r:00000668o
					; .rdata$r:000006D4o ...
		dd 1, 5
		dd offset ??_R2FunctionReplacer@icu_56@@8 ; icu_56::FunctionReplacer::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 6A4h
		public ??_R2FunctionReplacer@icu_56@@8
; icu_56::FunctionReplacer::`RTTI Base Class Array'
??_R2FunctionReplacer@icu_56@@8	dd offset ??_R1A@?0A@EA@FunctionReplacer@icu_56@@8
					; DATA XREF: .rdata$r:000006A0o
					; icu_56::FunctionReplacer::`RTTI Base Class Descriptor	at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UnicodeFunctor@icu_56@@8 ; icu_56::UnicodeFunctor::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		dd offset ??_R13?0A@EA@UnicodeReplacer@icu_56@@8 ; icu_56::UnicodeReplacer::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 6BCh
		public ??_R1A@?0A@EA@FunctionReplacer@icu_56@@8
; icu_56::FunctionReplacer::`RTTI Base Class Descriptor	at (0, -1, 0, 64)'
??_R1A@?0A@EA@FunctionReplacer@icu_56@@8 dd offset ??_R0?AVFunctionReplacer@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::FunctionReplacer::`RTTI Base Class Array'o
					; icu_56::FunctionReplacer `RTTI Type Descriptor'
		dd 4, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3FunctionReplacer@icu_56@@8 ; icu_56::FunctionReplacer::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 6D8h
		public ??_R1A@?0A@EA@UnicodeFunctor@icu_56@@8
; icu_56::UnicodeFunctor::`RTTI	Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UnicodeFunctor@icu_56@@8 dd offset ??_R0?AVUnicodeFunctor@icu_56@@@8
					; DATA XREF: .rdata$r:000006A8o
					; .rdata$r:icu_56::UnicodeFunctor::`RTTI Base Class Array'o
					; icu_56::UnicodeFunctor `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UnicodeFunctor@icu_56@@8	; icu_56::UnicodeFunctor::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 6F4h
		public ??_R0?AVUnicodeFunctor@icu_56@@@8
; class	icu_56::UnicodeFunctor `RTTI Type Descriptor'
??_R0?AVUnicodeFunctor@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UnicodeFunctor::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avunicodefun	db '.?AVUnicodeFunctor@icu_56@@',0
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 718h
		public ??_R3UnicodeFunctor@icu_56@@8
; icu_56::UnicodeFunctor::`RTTI	Class Hierarchy	Descriptor'
??_R3UnicodeFunctor@icu_56@@8 dd 2 dup(0) ; DATA XREF: .rdata$r:000006F0o
		dd 3
		dd offset ??_R2UnicodeFunctor@icu_56@@8	; icu_56::UnicodeFunctor::`RTTI	Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 728h
		public ??_R2UnicodeFunctor@icu_56@@8
; icu_56::UnicodeFunctor::`RTTI	Base Class Array'
??_R2UnicodeFunctor@icu_56@@8 dd offset	??_R1A@?0A@EA@UnicodeFunctor@icu_56@@8
					; DATA XREF: .rdata$r:00000724o
					; icu_56::UnicodeFunctor::`RTTI	Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 738h
		public ??_R1A@?0A@EA@UObject@icu_56@@8
; icu_56::UObject::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UObject@icu_56@@8	dd offset ??_R0?AVUObject@icu_56@@@8
					; DATA XREF: .rdata$r:000006ACo
					; .rdata$r:0000072Co ...
					; icu_56::UObject `RTTI	Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UObject@icu_56@@8 ; icu_56::UObject::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 754h
		public ??_R0?AVUObject@icu_56@@@8
; class	icu_56::UObject	`RTTI Type Descriptor'
??_R0?AVUObject@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UObject::`RTTI Base Class	Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avuobject@ic	db '.?AVUObject@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 774h
		public ??_R3UObject@icu_56@@8
; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
??_R3UObject@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00000750o
		dd 2
		dd offset ??_R2UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 784h
		public ??_R2UObject@icu_56@@8
; icu_56::UObject::`RTTI Base Class Array'
??_R2UObject@icu_56@@8 dd offset ??_R1A@?0A@EA@UObject@icu_56@@8
					; DATA XREF: .rdata$r:00000780o
					; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 790h
		public ??_R13?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@UMemory@icu_56@@8 dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:000006B0o
					; .rdata$r:00000730o ...
					; icu_56::UMemory `RTTI	Type Descriptor'
		align 8
		dd 4, 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 7ACh
		public ??_R0?AVUMemory@icu_56@@@8
; class	icu_56::UMemory	`RTTI Type Descriptor'
??_R0?AVUMemory@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Descriptor at (4,-1,0,64)'o
					; .rdata$r:icu_56::UMemory::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avumemory@ic	db '.?AVUMemory@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 7CCh
		public ??_R3UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
??_R3UMemory@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:000007A8o
					; .rdata$r:000007FCo
		dd 1
		dd offset ??_R2UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 7DCh
		public ??_R2UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Array'
??_R2UMemory@icu_56@@8 dd offset ??_R1A@?0A@EA@UMemory@icu_56@@8
					; DATA XREF: .rdata$r:000007D8o
					; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 7E4h
		public ??_R1A@?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UMemory@icu_56@@8	dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Array'o
					; icu_56::UMemory `RTTI	Type Descriptor'
		align 10h
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 800h
		public ??_R13?0A@EA@UnicodeReplacer@icu_56@@8
; icu_56::UnicodeReplacer::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@UnicodeReplacer@icu_56@@8 dd offset ??_R0?AVUnicodeReplacer@icu_56@@@8
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::hexo
					; .rdata$r:000006B4o
					; icu_56::UnicodeReplacer `RTTI	Type Descriptor'
		align 8
		dd 4, 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UnicodeReplacer@icu_56@@8 ; icu_56::UnicodeReplacer::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 81Ch
		public ??_R4FunctionReplacer@icu_56@@6BUnicodeReplacer@1@@
; const	icu_56::FunctionReplacer::`RTTI	Complete Object	Locator'{for `icu_56::UnicodeReplacer'}
??_R4FunctionReplacer@icu_56@@6BUnicodeReplacer@1@@ dd 0 ; DATA	XREF: .rdata:00000628o
		dd 4, 0
		dd offset ??_R0?AVFunctionReplacer@icu_56@@@8 ;	icu_56::FunctionReplacer `RTTI Type Descriptor'
		dd offset ??_R3FunctionReplacer@icu_56@@8 ; icu_56::FunctionReplacer::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 830h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::FunctionReplacer::`scalar deleting destructor'(unsigned int)
		public ??_GFunctionReplacer@icu_56@@UAEPAXI@Z
??_GFunctionReplacer@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1FunctionReplacer@icu_56@@UAE@XZ ; icu_56::FunctionReplacer::~FunctionReplacer(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_879
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_879:				; CODE XREF: icu_56::FunctionReplacer::`scalar deleting	destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GFunctionReplacer@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 894h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::FunctionReplacer::FunctionReplacer(icu_56::FunctionReplacer	*this, const struct icu_56::FunctionReplacer *)
		public ??0FunctionReplacer@icu_56@@QAE@ABV01@@Z
??0FunctionReplacer@icu_56@@QAE@ABV01@@Z proc near
					; CODE XREF: icu_56::FunctionReplacer::clone(void)+76p

var_DC		= dword	ptr -0DCh
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0FunctionReplacer@icu_56@@QAE@ABV01@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_DC]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax		; struct icu_56::UnicodeFunctor	*
		mov	ecx, [ebp+var_14] ; this
		call	dword ptr ds:__imp_??0UnicodeFunctor@icu_56@@QAE@ABV01@@Z ; icu_56::UnicodeFunctor::UnicodeFunctor(icu_56::UnicodeFunctor const	&)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0
		cmp	[ebp+arg_0], 0
		jz	short loc_907
		mov	eax, [ebp+arg_0]
		add	eax, 4
		mov	[ebp+var_DC], eax
		jmp	short loc_911
; ---------------------------------------------------------------------------

loc_907:				; CODE XREF: icu_56::FunctionReplacer::FunctionReplacer(icu_56::FunctionReplacer const &)+63j
		mov	[ebp+var_DC], 0

loc_911:				; CODE XREF: icu_56::FunctionReplacer::FunctionReplacer(icu_56::FunctionReplacer const &)+71j
		mov	ecx, [ebp+var_DC]
		push	ecx		; struct icu_56::UnicodeReplacer *
		mov	ecx, [ebp+var_14]
		add	ecx, 4		; this
		call	??0UnicodeReplacer@icu_56@@QAE@ABV01@@Z	; icu_56::UnicodeReplacer::UnicodeReplacer(icu_56::UnicodeReplacer const &)
		mov	byte ptr [ebp+var_4], 1
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7FunctionReplacer@icu_56@@6BUnicodeFunctor@1@@ ; const icu_56::FunctionReplacer::`vftable'{for `icu_56::UnicodeFunctor'}
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax+4], offset ??_7FunctionReplacer@icu_56@@6BUnicodeReplacer@1@@ ; const icu_56::FunctionReplacer::`vftable'{for `icu_56::UnicodeReplacer'}
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+8]
		mov	edx, [ecx]
		mov	esi, esp
		mov	ecx, eax
		mov	eax, [edx+8]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		mov	[ecx+8], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+0Ch]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+0Ch]
		mov	edx, [ecx]
		mov	esi, esp
		mov	ecx, eax
		mov	eax, [edx+8]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		mov	[ecx+0Ch], eax
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0DCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0FunctionReplacer@icu_56@@QAE@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 9B0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0FunctionReplacer@icu_56@@QAE@ABV01@@Z$0 proc	near
					; DATA XREF: .xdata$x:000009F0o
		mov	esi, esp
		mov	ecx, [ebp-14h]	; this
		call	dword ptr ds:__imp_??1UnicodeFunctor@icu_56@@UAE@XZ ; icu_56::UnicodeFunctor::~UnicodeFunctor(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0FunctionReplacer@icu_56@@QAE@ABV01@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0FunctionReplacer@icu_56@@QAE@ABV01@@Z$1 proc	near
					; DATA XREF: .xdata$x:000009F8o
		mov	ecx, [ebp-14h]
		add	ecx, 4		; this
		jmp	??1UnicodeReplacer@icu_56@@UAE@XZ ; icu_56::UnicodeReplacer::~UnicodeReplacer(void)
__unwindfunclet$??0FunctionReplacer@icu_56@@QAE@ABV01@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0FunctionReplacer@icu_56@@QAE@ABV01@@Z proc near
					; DATA XREF: icu_56::FunctionReplacer::FunctionReplacer(icu_56::FunctionReplacer const &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0E0h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0FunctionReplacer@icu_56@@QAE@ABV01@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0FunctionReplacer@icu_56@@QAE@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 9ECh
__unwindtable$??0FunctionReplacer@icu_56@@QAE@ABV01@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00000A04o
		dd offset __unwindfunclet$??0FunctionReplacer@icu_56@@QAE@ABV01@@Z$0
		align 8
		dd offset __unwindfunclet$??0FunctionReplacer@icu_56@@QAE@ABV01@@Z$1
__ehfuncinfo$??0FunctionReplacer@icu_56@@QAE@ABV01@@Z dd 19930522h, 2
					; DATA XREF: __ehhandler$??0FunctionReplacer@icu_56@@QAE@ABV01@@Z+14o
		dd offset __unwindtable$??0FunctionReplacer@icu_56@@QAE@ABV01@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A20h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::FunctionReplacer::~FunctionReplacer(icu_56::FunctionReplacer *__hidden this)
		public ??1FunctionReplacer@icu_56@@UAE@XZ
??1FunctionReplacer@icu_56@@UAE@XZ proc	near
					; CODE XREF: icu_56::FunctionReplacer::`scalar deleting	destructor'(uint)+26p

var_10C		= dword	ptr -10Ch
var_104		= dword	ptr -104h
var_F8		= dword	ptr -0F8h
var_EC		= dword	ptr -0ECh
var_E0		= dword	ptr -0E0h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??1FunctionReplacer@icu_56@@UAE@XZ
		mov	eax, large fs:0
		push	eax
		sub	esp, 100h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_10C]
		mov	ecx, 40h ; '@'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7FunctionReplacer@icu_56@@6BUnicodeFunctor@1@@ ; const icu_56::FunctionReplacer::`vftable'{for `icu_56::UnicodeFunctor'}
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax+4], offset ??_7FunctionReplacer@icu_56@@6BUnicodeReplacer@1@@ ; const icu_56::FunctionReplacer::`vftable'{for `icu_56::UnicodeReplacer'}
		mov	[ebp+var_4], 1
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+8]
		mov	[ebp+var_F8], ecx
		mov	edx, [ebp+var_F8]
		mov	[ebp+var_104], edx
		cmp	[ebp+var_104], 0
		jz	short loc_AC2
		mov	esi, esp
		push	1
		mov	eax, [ebp+var_104]
		mov	edx, [eax]
		mov	ecx, [ebp+var_104]
		mov	eax, [edx]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_10C], eax
		jmp	short loc_ACC
; ---------------------------------------------------------------------------

loc_AC2:				; CODE XREF: icu_56::FunctionReplacer::~FunctionReplacer(void)+7Bj
		mov	[ebp+var_10C], 0

loc_ACC:				; CODE XREF: icu_56::FunctionReplacer::~FunctionReplacer(void)+A0j
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+0Ch]
		mov	[ebp+var_E0], ecx
		mov	edx, [ebp+var_E0]
		mov	[ebp+var_EC], edx
		cmp	[ebp+var_EC], 0
		jz	short loc_B12
		mov	esi, esp
		push	1
		mov	eax, [ebp+var_EC]
		mov	edx, [eax]
		mov	ecx, [ebp+var_EC]
		mov	eax, [edx]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_10C], eax
		jmp	short loc_B1C
; ---------------------------------------------------------------------------

loc_B12:				; CODE XREF: icu_56::FunctionReplacer::~FunctionReplacer(void)+CBj
		mov	[ebp+var_10C], 0

loc_B1C:				; CODE XREF: icu_56::FunctionReplacer::~FunctionReplacer(void)+F0j
		mov	byte ptr [ebp+var_4], 0
		mov	ecx, [ebp+var_14]
		add	ecx, 4		; this
		call	??1UnicodeReplacer@icu_56@@UAE@XZ ; icu_56::UnicodeReplacer::~UnicodeReplacer(void)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		mov	ecx, [ebp+var_14] ; this
		call	dword ptr ds:__imp_??1UnicodeFunctor@icu_56@@UAE@XZ ; icu_56::UnicodeFunctor::~UnicodeFunctor(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 10Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1FunctionReplacer@icu_56@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 0B64h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??1FunctionReplacer@icu_56@@UAE@XZ$0 proc near
					; DATA XREF: .xdata$x:00000BA4o
		mov	esi, esp
		mov	ecx, [ebp-14h]	; this
		call	dword ptr ds:__imp_??1UnicodeFunctor@icu_56@@UAE@XZ ; icu_56::UnicodeFunctor::~UnicodeFunctor(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??1FunctionReplacer@icu_56@@UAE@XZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??1FunctionReplacer@icu_56@@UAE@XZ$1 proc near
					; DATA XREF: .xdata$x:00000BACo
		mov	ecx, [ebp-14h]
		add	ecx, 4		; this
		jmp	??1UnicodeReplacer@icu_56@@UAE@XZ ; icu_56::UnicodeReplacer::~UnicodeReplacer(void)
__unwindfunclet$??1FunctionReplacer@icu_56@@UAE@XZ$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??1FunctionReplacer@icu_56@@UAE@XZ proc near
					; DATA XREF: icu_56::FunctionReplacer::~FunctionReplacer(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-110h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??1FunctionReplacer@icu_56@@UAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??1FunctionReplacer@icu_56@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 0BA0h
__unwindtable$??1FunctionReplacer@icu_56@@UAE@XZ dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00000BB8o
		dd offset __unwindfunclet$??1FunctionReplacer@icu_56@@UAE@XZ$0
		dd 0
		dd offset __unwindfunclet$??1FunctionReplacer@icu_56@@UAE@XZ$1
__ehfuncinfo$??1FunctionReplacer@icu_56@@UAE@XZ	dd 19930522h, 2
					; DATA XREF: __ehhandler$??1FunctionReplacer@icu_56@@UAE@XZ+14o
		dd offset __unwindtable$??1FunctionReplacer@icu_56@@UAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0BD4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::UnicodeFunctor	*__thiscall icu_56::FunctionReplacer::clone(icu_56::FunctionReplacer *__hidden this)
		public ?clone@FunctionReplacer@icu_56@@UBEPAVUnicodeFunctor@2@XZ
?clone@FunctionReplacer@icu_56@@UBEPAVUnicodeFunctor@2@XZ proc near
					; DATA XREF: .rdata:00000648o

var_F4		= dword	ptr -0F4h
var_EC		= dword	ptr -0ECh
var_E0		= dword	ptr -0E0h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?clone@FunctionReplacer@icu_56@@UBEPAVUnicodeFunctor@2@XZ
		mov	eax, large fs:0
		push	eax
		sub	esp, 0E8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_F4]
		mov	ecx, 3Ah ; ':'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	esi, esp
		push	10h		; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_E0], eax
		mov	[ebp+var_4], 0
		cmp	[ebp+var_E0], 0
		jz	short loc_C57
		mov	eax, [ebp+var_14]
		push	eax		; struct icu_56::FunctionReplacer *
		mov	ecx, [ebp+var_E0] ; this
		call	??0FunctionReplacer@icu_56@@QAE@ABV01@@Z ; icu_56::FunctionReplacer::FunctionReplacer(icu_56::FunctionReplacer const &)
		mov	[ebp+var_F4], eax
		jmp	short loc_C61
; ---------------------------------------------------------------------------

loc_C57:				; CODE XREF: icu_56::FunctionReplacer::clone(void)+6Aj
		mov	[ebp+var_F4], 0

loc_C61:				; CODE XREF: icu_56::FunctionReplacer::clone(void)+81j
		mov	ecx, [ebp+var_F4]
		mov	[ebp+var_EC], ecx
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_EC]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0F4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?clone@FunctionReplacer@icu_56@@UBEPAVUnicodeFunctor@2@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 0C9Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?clone@FunctionReplacer@icu_56@@UBEPAVUnicodeFunctor@2@XZ$0 proc near
					; DATA XREF: .xdata$x:00000CD8o
		mov	esi, esp
		mov	eax, [ebp-0E0h]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?clone@FunctionReplacer@icu_56@@UBEPAVUnicodeFunctor@2@XZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?clone@FunctionReplacer@icu_56@@UBEPAVUnicodeFunctor@2@XZ proc near
					; DATA XREF: icu_56::FunctionReplacer::clone(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0F8h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?clone@FunctionReplacer@icu_56@@UBEPAVUnicodeFunctor@2@XZ
		jmp	___CxxFrameHandler3
__ehhandler$?clone@FunctionReplacer@icu_56@@UBEPAVUnicodeFunctor@2@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 0CD4h
__unwindtable$?clone@FunctionReplacer@icu_56@@UBEPAVUnicodeFunctor@2@XZ	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00000CE4o
		dd offset __unwindfunclet$?clone@FunctionReplacer@icu_56@@UBEPAVUnicodeFunctor@2@XZ$0
__ehfuncinfo$?clone@FunctionReplacer@icu_56@@UBEPAVUnicodeFunctor@2@XZ dd 19930522h, 1
					; DATA XREF: __ehhandler$?clone@FunctionReplacer@icu_56@@UBEPAVUnicodeFunctor@2@XZ+14o
		dd offset __unwindtable$?clone@FunctionReplacer@icu_56@@UBEPAVUnicodeFunctor@2@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0D00h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::UnicodeReplacer *__thiscall icu_56::FunctionReplacer::toReplacer(icu_56::FunctionReplacer *__hidden this)
		public ?toReplacer@FunctionReplacer@icu_56@@UBEPAVUnicodeReplacer@2@XZ
?toReplacer@FunctionReplacer@icu_56@@UBEPAVUnicodeReplacer@2@XZ	proc near
					; DATA XREF: .rdata:00000650o

var_E8		= dword	ptr -0E8h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0E8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_E8]
		mov	ecx, 3Ah ; ':'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_D3D
		mov	eax, [ebp+var_14]
		add	eax, 4
		mov	[ebp+var_E8], eax
		jmp	short loc_D47
; ---------------------------------------------------------------------------

loc_D3D:				; CODE XREF: icu_56::FunctionReplacer::toReplacer(void)+2Dj
		mov	[ebp+var_E8], 0

loc_D47:				; CODE XREF: icu_56::FunctionReplacer::toReplacer(void)+3Bj
		mov	ecx, [ebp+var_E8]
		mov	[ebp+var_20], ecx
		mov	eax, [ebp+var_20]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?toReplacer@FunctionReplacer@icu_56@@UBEPAVUnicodeReplacer@2@XZ	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0D5Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::FunctionReplacer::replace(icu_56::FunctionReplacer *this, struct icu_56::Replaceable *, int, int, int *)
		public ?replace@FunctionReplacer@icu_56@@UAEHAAVReplaceable@2@HHAAH@Z
?replace@FunctionReplacer@icu_56@@UAEHAAVReplaceable@2@HHAAH@Z proc near
					; DATA XREF: .rdata:00000630o

var_DC		= dword	ptr -0DCh
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0DCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_DC]
		mov	ecx, 37h ; '7'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+8]
		mov	edx, [ebp+var_8]
		mov	eax, [edx+8]
		mov	edx, [ecx]
		mov	esi, esp
		mov	ecx, eax
		mov	eax, [edx+10h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_DC], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_DC]
		mov	eax, [edx]
		mov	ecx, [ebp+var_DC]
		mov	edx, [eax+4]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_4]
		add	eax, [ebp+var_14]
		mov	[ebp+arg_8], eax
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_8]
		mov	eax, [edx+4]
		mov	edx, [ecx]
		mov	ecx, eax
		mov	eax, [edx+1Ch]
		call	eax
		cmp	esi, esp

loc_E00:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::basefieldo
		call	__RTC_CheckEsp
		mov	[ebp+arg_8], eax
		mov	eax, [ebp+arg_8]
		sub	eax, [ebp+arg_4]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0DCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	10h
?replace@FunctionReplacer@icu_56@@UAEHAAVReplaceable@2@HHAAH@Z endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0E24h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::UnicodeString *__thiscall icu_56::FunctionReplacer::toReplacerPattern(icu_56::FunctionReplacer	*this, struct icu_56::UnicodeString *, signed __int8)
		public ?toReplacerPattern@FunctionReplacer@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z
?toReplacerPattern@FunctionReplacer@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z proc near
					; DATA XREF: .rdata:00000634o

var_134		= dword	ptr -134h
var_12C		= dword	ptr -12Ch
var_60		= byte ptr -60h
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?toReplacerPattern@FunctionReplacer@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 128h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_134]
		mov	ecx, 4Ah ; 'J'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_18], ecx
		mov	esi, esp
		lea	ecx, [ebp+var_60] ; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@XZ ; icu_56::UnicodeString::UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0
		mov	esi, esp
		push	0		; int
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?truncate@UnicodeString@icu_56@@QAECH@Z ; icu_56::UnicodeString::truncate(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	26h ; '&'       ; wchar_t
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z ; icu_56::UnicodeString::append(wchar_t)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_18]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_18]
		mov	eax, [edx+4]
		mov	edx, [ecx]
		mov	esi, esp
		mov	ecx, eax
		mov	eax, [edx+30h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	eax		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?append@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z ; icu_56::UnicodeString::append(icu_56::UnicodeString const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	2		; int
		push	offset _OPEN	; "( "
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?append@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z ; icu_56::UnicodeString::append(wchar_t const	*,int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_18]
		mov	ecx, [eax+8]
		mov	edx, [ebp+var_18]
		mov	eax, [edx+8]
		mov	edx, [ecx]
		mov	esi, esp
		mov	ecx, eax
		mov	eax, [edx+10h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_134], eax
		mov	esi, esp
		movzx	ecx, [ebp+arg_4]
		push	ecx
		lea	edx, [ebp+var_60]
		push	edx
		mov	eax, [ebp+var_134]
		mov	edx, [eax]
		mov	ecx, [ebp+var_134]
		mov	eax, [edx+8]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	eax		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?append@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z ; icu_56::UnicodeString::append(icu_56::UnicodeString const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	2		; int
		push	offset _CLOSE	; " )"
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?append@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z ; icu_56::UnicodeString::append(wchar_t const	*,int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_12C], eax
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		lea	ecx, [ebp+var_60] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_12C]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 134h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?toReplacerPattern@FunctionReplacer@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z endp

; ---------------------------------------------------------------------------
		align 10h
$LN7		dd 1			; DATA XREF: icu_56::FunctionReplacer::toReplacerPattern(icu_56::UnicodeString &,signed	char)+171o
		dd offset $LN6
$LN6		dd 0FFFFFFA0h, 40h	; DATA XREF: .text:00000FD4o
		dd offset $LN4_1
; ---------------------------------------------------------------------------

$LN4_1:					; DATA XREF: .text:00000FE0o
		jnb	short loc_105A
		jb	short $+2
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 0FE8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?toReplacerPattern@FunctionReplacer@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z$0 proc near
					; CODE XREF: .text:00000FE6j
					; DATA XREF: .xdata$x:00001028o
		mov	esi, esp
		lea	ecx, [ebp-60h]	; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?toReplacerPattern@FunctionReplacer@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?toReplacerPattern@FunctionReplacer@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z	proc near
					; DATA XREF: icu_56::FunctionReplacer::toReplacerPattern(icu_56::UnicodeString &,signed	char)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]

loc_FFE:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::scientifico
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-138h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?toReplacerPattern@FunctionReplacer@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z
		jmp	___CxxFrameHandler3
__ehhandler$?toReplacerPattern@FunctionReplacer@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 1024h
__unwindtable$?toReplacerPattern@FunctionReplacer@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00001034o
		dd offset __unwindfunclet$?toReplacerPattern@FunctionReplacer@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z$0
__ehfuncinfo$?toReplacerPattern@FunctionReplacer@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$?toReplacerPattern@FunctionReplacer@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z+1Eo
		dd offset __unwindtable$?toReplacerPattern@FunctionReplacer@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1050h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::FunctionReplacer::addReplacementSetTo(icu_56::FunctionReplacer *this,	struct icu_56::UnicodeSet *)
		public ?addReplacementSetTo@FunctionReplacer@icu_56@@UBEXAAVUnicodeSet@2@@Z
?addReplacementSetTo@FunctionReplacer@icu_56@@UBEXAAVUnicodeSet@2@@Z proc near
					; DATA XREF: .rdata:00000638o

var_114		= byte ptr -114h
var_50		= byte ptr -50h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?addReplacementSetTo@FunctionReplacer@icu_56@@UBEXAAVUnicodeSet@2@@Z

loc_105A:				; CODE XREF: .text:$LN4_1j
		mov	eax, large fs:0
		push	eax
		sub	esp, 108h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_114]
		mov	ecx, 42h ; 'B'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	esi, esp
		lea	ecx, [ebp+var_50] ; this
		call	dword ptr ds:__imp_??0UnicodeSet@icu_56@@QAE@XZ	; icu_56::UnicodeSet::UnicodeSet(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0
		mov	esi, esp
		lea	eax, [ebp+var_50]
		push	eax
		mov	ecx, [ebp+var_14]
		mov	edx, [ecx+4]
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	edx, [edx]
		mov	eax, [edx+3Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+38h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		lea	ecx, [ebp+var_50] ; this
		call	dword ptr ds:__imp_??1UnicodeSet@icu_56@@UAE@XZ	; icu_56::UnicodeSet::~UnicodeSet(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 114h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?addReplacementSetTo@FunctionReplacer@icu_56@@UBEXAAVUnicodeSet@2@@Z endp

; ---------------------------------------------------------------------------
		align 10h
$LN7_0		dd 1			; DATA XREF: icu_56::FunctionReplacer::addReplacementSetTo(icu_56::UnicodeSet &)+AFo
		dd offset $LN6_0
$LN6_0		dd 0FFFFFFB0h, 34h	; DATA XREF: .text:00001134o
		dd offset $LN4_2
$LN4_2		dd 746573h		; DATA XREF: .text:00001140o
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 1148h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?addReplacementSetTo@FunctionReplacer@icu_56@@UBEXAAVUnicodeSet@2@@Z$0 proc near
					; DATA XREF: .xdata$x:0000117Co
		mov	esi, esp
		lea	ecx, [ebp-50h]	; this
		call	dword ptr ds:__imp_??1UnicodeSet@icu_56@@UAE@XZ	; icu_56::UnicodeSet::~UnicodeSet(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?addReplacementSetTo@FunctionReplacer@icu_56@@UBEXAAVUnicodeSet@2@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?addReplacementSetTo@FunctionReplacer@icu_56@@UBEXAAVUnicodeSet@2@@Z proc near
					; DATA XREF: icu_56::FunctionReplacer::addReplacementSetTo(icu_56::UnicodeSet &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-118h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?addReplacementSetTo@FunctionReplacer@icu_56@@UBEXAAVUnicodeSet@2@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?addReplacementSetTo@FunctionReplacer@icu_56@@UBEXAAVUnicodeSet@2@@Z endp

_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 1178h
__unwindtable$?addReplacementSetTo@FunctionReplacer@icu_56@@UBEXAAVUnicodeSet@2@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00001188o
		dd offset __unwindfunclet$?addReplacementSetTo@FunctionReplacer@icu_56@@UBEXAAVUnicodeSet@2@@Z$0
__ehfuncinfo$?addReplacementSetTo@FunctionReplacer@icu_56@@UBEXAAVUnicodeSet@2@@Z dd 19930522h,	1
					; DATA XREF: __ehhandler$?addReplacementSetTo@FunctionReplacer@icu_56@@UBEXAAVUnicodeSet@2@@Z+14o
		dd offset __unwindtable$?addReplacementSetTo@FunctionReplacer@icu_56@@UBEXAAVUnicodeSet@2@@Z
		align 20h
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 11A4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::FunctionReplacer::setData(icu_56::FunctionReplacer *this, const struct icu_56::TransliterationRuleData *)
		public ?setData@FunctionReplacer@icu_56@@UAEXPBVTransliterationRuleData@2@@Z
?setData@FunctionReplacer@icu_56@@UAEXPBVTransliterationRuleData@2@@Z proc near
					; DATA XREF: .rdata:00000654o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+0Ch]
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+0Ch]
		mov	edx, [edx]
		mov	eax, [edx+14h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?setData@FunctionReplacer@icu_56@@UAEXPBVTransliterationRuleData@2@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1200h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; [thunk]:public: virtual void * __thiscall icu_56::FunctionReplacer::`vector deleting destructor'`adjustor{4}' (unsigned int)
		public ??_EFunctionReplacer@icu_56@@W3AEPAXI@Z
??_EFunctionReplacer@icu_56@@W3AEPAXI@Z	proc near
					; DATA XREF: .rdata:const icu_56::FunctionReplacer::`vftable'{for `icu_56::UnicodeReplacer'}o
		sub	ecx, 4
		jmp	??_EFunctionReplacer@icu_56@@UAEPAXI@Z ; icu_56::FunctionReplacer::`vector deleting destructor'(uint)
??_EFunctionReplacer@icu_56@@W3AEPAXI@Z	endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; signed __int8	__thiscall icu_56::UnicodeString::truncate(icu_56::UnicodeString *__hidden this, int)
		extrn __imp_?truncate@UnicodeString@icu_56@@QAECH@Z:near
					; CODE XREF: icu_56::Transliterator::setID(icu_56::UnicodeString const &)+74p
					; icu_56::FunctionReplacer::toReplacerPattern(icu_56::UnicodeString &,signed char)+65p
					; DATA XREF: ...
; int __thiscall icu_56::UnicodeString::length(icu_56::UnicodeString *__hidden this)
		extrn __imp_?length@UnicodeString@icu_56@@QBEHXZ:near
					; CODE XREF: icu_56::Transliterator::setID(icu_56::UnicodeString const &)+5Bp
					; DATA XREF: icu_56::Transliterator::setID(icu_56::UnicodeString const &)+5Br
; struct icu_56::UnicodeString *__thiscall icu_56::UnicodeString::append(icu_56::UnicodeString *__hidden this, wchar_t)
		extrn __imp_?append@UnicodeString@icu_56@@QAEAAV12@_W@Z:near
					; CODE XREF: icu_56::Transliterator::setID(icu_56::UnicodeString const &)+46p
					; icu_56::FunctionReplacer::toReplacerPattern(icu_56::UnicodeString &,signed char)+79p
					; DATA XREF: ...
; __declspec(dllimport)	public:	class icu_56::UnicodeString & __thiscall icu_56::UnicodeString::operator=(class	icu_56::UnicodeString const &)
		extrn __imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z:near
					; CODE XREF: icu_56::Transliterator::setID(icu_56::UnicodeString const &)+2Fp
					; DATA XREF: icu_56::Transliterator::setID(icu_56::UnicodeString const &)+2Fr
		extrn __RTC_CheckEsp:near
					; CODE XREF: icu_56::Transliterator::setID(icu_56::UnicodeString const &)+37p
					; icu_56::Transliterator::setID(icu_56::UnicodeString const &):loc_1FEp ...
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near
					; CODE XREF: icu_56::Transliterator::integerToken(int)+31p
					; icu_56::Transliterator::pointerToken(void *)+31p ...
; const	type_info::`vftable'
		extrn ??_7type_info@@6B@:near
					; DATA XREF: .data:icu_56::UnicodeReplacer `RTTI Type Descriptor'o
					; .data:icu_56::FunctionReplacer `RTTI Type Descriptor'o ...
		extrn __purecall:near	; DATA XREF: .rdata:00000338o
					; .rdata:0000033Co ...
; _DWORD __thiscall icu_56::UnicodeReplacer::~UnicodeReplacer(icu_56::UnicodeReplacer *__hidden	this)
		extrn ??1UnicodeReplacer@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::UnicodeReplacer::`scalar deleting destructor'(uint)+26p
					; icu_56::UnicodeReplacer::`vector deleting destructor'(uint)+64p ...
; void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *))
		extrn ??_M@YGXPAXIHP6EX0@Z@Z:near
					; CODE XREF: icu_56::UnicodeReplacer::`vector deleting destructor'(uint)+3Dp
; _DWORD __thiscall icu_56::UnicodeFunctor::UnicodeFunctor(icu_56::UnicodeFunctor *__hidden this)
		extrn __imp_??0UnicodeFunctor@icu_56@@QAE@XZ:near
					; CODE XREF: icu_56::FunctionReplacer::FunctionReplacer(icu_56::Transliterator *,icu_56::UnicodeFunctor	*)+28p
					; DATA XREF: icu_56::FunctionReplacer::FunctionReplacer(icu_56::Transliterator *,icu_56::UnicodeFunctor	*)+28r
; public: virtual void * __thiscall icu_56::FunctionReplacer::`scalar deleting destructor'(unsigned int)
		extrn ??_GFunctionReplacer@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::FunctionReplacer::`vector deleting destructor'(unsigned int)
		extrn ??_EFunctionReplacer@icu_56@@UAEPAXI@Z:near ; weak
					; CODE XREF: [thunk]:icu_56::FunctionReplacer::`vector deleting	destructor'`adjustor{4}' (uint)+3j
					; DATA XREF: .rdata:const icu_56::FunctionReplacer::`vftable'{for `icu_56::UnicodeFunctor'}o
; public: virtual class	icu_56::UnicodeMatcher * __thiscall icu_56::UnicodeFunctor::toMatcher(void)const
		extrn ?toMatcher@UnicodeFunctor@icu_56@@UBEPAVUnicodeMatcher@2@XZ:near
					; DATA XREF: .rdata:0000064Co
; void __cdecl icu_56::UMemory::operator delete(void *)
		extrn __imp_??3UMemory@icu_56@@SAXPAX@Z:near
					; CODE XREF: icu_56::FunctionReplacer::`scalar deleting	destructor'(uint)+39p
					; __unwindfunclet$?clone@FunctionReplacer@icu_56@@UBEPAVUnicodeFunctor@2@XZ$0+9p
					; DATA XREF: ...
; _DWORD __thiscall icu_56::UnicodeFunctor::~UnicodeFunctor(icu_56::UnicodeFunctor *__hidden this)
		extrn __imp_??1UnicodeFunctor@icu_56@@UAE@XZ:near
					; CODE XREF: __unwindfunclet$??0FunctionReplacer@icu_56@@QAE@ABV01@@Z$0+5p
					; icu_56::FunctionReplacer::~FunctionReplacer(void)+117p ...
; _DWORD __thiscall icu_56::UnicodeFunctor::UnicodeFunctor(icu_56::UnicodeFunctor *__hidden this, const	struct icu_56::UnicodeFunctor *)
		extrn __imp_??0UnicodeFunctor@icu_56@@QAE@ABV01@@Z:near
					; CODE XREF: icu_56::FunctionReplacer::FunctionReplacer(icu_56::FunctionReplacer const &)+4Bp
					; DATA XREF: icu_56::FunctionReplacer::FunctionReplacer(icu_56::FunctionReplacer const &)+4Br
		extrn ___security_cookie:near
					; DATA XREF: icu_56::FunctionReplacer::FunctionReplacer(icu_56::FunctionReplacer const &)+2Er
					; icu_56::FunctionReplacer::~FunctionReplacer(void)+2Er ...
		extrn ___CxxFrameHandler3:near
					; CODE XREF: __ehhandler$??0FunctionReplacer@icu_56@@QAE@ABV01@@Z+19j
					; __ehhandler$??1FunctionReplacer@icu_56@@UAE@XZ+19j ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: __ehhandler$??0FunctionReplacer@icu_56@@QAE@ABV01@@Z+Fp
					; __ehhandler$??1FunctionReplacer@icu_56@@UAE@XZ+Fp ...
; void *__cdecl	static icu_56::UMemory::operator new(unsigned int)
		extrn __imp_??2UMemory@icu_56@@SAPAXI@Z:near
					; CODE XREF: icu_56::FunctionReplacer::clone(void)+46p
					; DATA XREF: icu_56::FunctionReplacer::clone(void)+46r
; _DWORD __thiscall icu_56::UnicodeString::~UnicodeString(icu_56::UnicodeString	*__hidden this)
		extrn __imp_??1UnicodeString@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::FunctionReplacer::toReplacerPattern(icu_56::UnicodeString &,signed	char)+15Ap
					; __unwindfunclet$?toReplacerPattern@FunctionReplacer@icu_56@@UBEAAVUnicodeString@2@AAV32@C@Z$0+5p
					; DATA XREF: ...
; struct icu_56::UnicodeString *__thiscall icu_56::UnicodeString::append(icu_56::UnicodeString *__hidden this, const wchar_t *,	int)
		extrn __imp_?append@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z:near
					; CODE XREF: icu_56::FunctionReplacer::toReplacerPattern(icu_56::UnicodeString &,signed	char)+C3p
					; icu_56::FunctionReplacer::toReplacerPattern(icu_56::UnicodeString &,signed char)+138p
					; DATA XREF: ...
; struct icu_56::UnicodeString *__thiscall icu_56::UnicodeString::append(icu_56::UnicodeString *__hidden this, const struct icu_56::UnicodeString *)
		extrn __imp_?append@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z:near
					; CODE XREF: icu_56::FunctionReplacer::toReplacerPattern(icu_56::UnicodeString &,signed	char)+AAp
					; icu_56::FunctionReplacer::toReplacerPattern(icu_56::UnicodeString &,signed char)+11Fp
					; DATA XREF: ...
; _DWORD __thiscall icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString *__hidden this)
		extrn __imp_??0UnicodeString@icu_56@@QAE@XZ:near
					; CODE XREF: icu_56::FunctionReplacer::toReplacerPattern(icu_56::UnicodeString &,signed	char)+4Ap
					; DATA XREF: icu_56::FunctionReplacer::toReplacerPattern(icu_56::UnicodeString &,signed	char)+4Ar
; _DWORD __thiscall icu_56::UnicodeSet::~UnicodeSet(icu_56::UnicodeSet *__hidden this)
		extrn __imp_??1UnicodeSet@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::FunctionReplacer::addReplacementSetTo(icu_56::UnicodeSet &)+9Ep
					; __unwindfunclet$?addReplacementSetTo@FunctionReplacer@icu_56@@UBEXAAVUnicodeSet@2@@Z$0+5p
					; DATA XREF: ...
; _DWORD __thiscall icu_56::UnicodeSet::UnicodeSet(icu_56::UnicodeSet *__hidden	this)
		extrn __imp_??0UnicodeSet@icu_56@@QAE@XZ:near
					; CODE XREF: icu_56::FunctionReplacer::addReplacementSetTo(icu_56::UnicodeSet &)+47p
					; DATA XREF: icu_56::FunctionReplacer::addReplacementSetTo(icu_56::UnicodeSet &)+47r


		end
