;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	00D4B43527BFBC9097B86A26C9892B5F
; Input	CRC32 :	81B79DF6

; File Name   :	D:\compspace\objfiles\firefox\i18n\utmscale.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
_timeScaleTable	dd 2710h		; DATA XREF: _utmscale_getTimeScaleValue_56+62r
					; _utmscale_fromInt64_56+59o ...
dword_4		dd 0			; DATA XREF: _utmscale_getTimeScaleValue_56+69r
		dd 122CD800h, 3883h, 906F9F9Bh,	0FFFC80A0h, 4B36B065h
		dd 30E59h, 329h, 80000000h, 0FFFFFCD7h,	7FFFFFFFh, 122CD801h
		dd 3883h, 122CD7FFh, 3883h, 1388h, 0
		dd 1388h, 80000000h, 0FFFFEC77h, 7FFFFFFFh, 989680h, 0
		dd 7791F700h, 0Eh, 0C8D9331Bh, 0FFFFFF1Ah, 4802DEE5h, 0C8h
		dd 0
		dd 80000000h, 0FFFFFFFFh, 7FFFFFFFh, 7791F701h,	0Eh, 7791F6FFh
		dd 0Eh,	4C4B40h, 0
		dd 4C4B40h, 80000000h, 0FFB3B4BFh, 7FFFFFFFh, 2710h, 0
		dd 122CD800h, 3883h, 906F9F9Bh,	0FFFC80A0h, 4B36B065h
		dd 30E59h, 329h, 80000000h, 0FFFFFCD7h,	7FFFFFFFh, 122CD801h
		dd 3883h, 122CD7FFh, 3883h, 1388h, 0
		dd 1388h, 80000000h, 0FFFFEC77h, 7FFFFFFFh, 1, 0
		dd 22770000h, 701CE17h,	0
		dd 80000000h, 0DD88FFFFh, 78FE31E8h, 22770000h,	8701CE17h
		dd 0FFFFFFFFh, 7FFFFFFFh, 22770000h, 701CE17h, 22770000h
		dd 701CE17h, 3 dup(0)
		dd 80000000h, 0FFFFFFFFh, 7FFFFFFFh, 1,	4 dup(0)
		dd 80000000h, 0FFFFFFFFh, 7FFFFFFFh, 0
		dd 80000000h, 0FFFFFFFFh, 7FFFFFFFh, 7 dup(0)
		dd 80000000h, 0FFFFFFFFh, 7FFFFFFFh, 989680h, 0
		dd 0FB6C4680h, 0Dh, 44FEE39Bh, 0FFFFFF1Bh, 0C4288F65h
		dd 0C8h, 0
		dd 80000000h, 0FFFFFFFFh, 7FFFFFFFh, 0FB6C4681h, 0Dh, 0FB6C467Fh
		dd 0Dh,	4C4B40h, 0
		dd 4C4B40h, 80000000h, 0FFB3B4BFh, 7FFFFFFFh, 989680h
		dd 0
		dd 0B1E1BF80h, 0Eh, 8E896A9Bh, 0FFFFFF1Ah, 0DB31665h, 0C8h
		dd 0
		dd 80000000h, 0FFFFFFFFh, 7FFFFFFFh, 0B1E1BF81h, 0Eh, 0B1E1BF7Fh
		dd 0Eh,	4C4B40h, 0
		dd 4C4B40h, 80000000h, 0FFB3B4BFh, 7FFFFFFFh, 2A69C000h
		dd 0C9h, 0A955Ah, 0
		dd 0FF5286A7h, 0FFFFFFFFh, 984EA5h, 2 dup(0)
		dd 80000000h, 0FFFFFFFFh, 7FFFFFFFh, 0A955Bh, 0
		dd 0A9559h, 0
		dd 9534E000h, 64h, 9534E000h, 80000064h, 6ACB1FFFh, 7FFFFF9Bh
		dd 2A69C000h, 0C9h, 0A955Ah, 0
		dd 0FF5286A7h, 0FFFFFFFFh, 984EA5h, 2 dup(0)
		dd 80000000h, 0FFFFFFFFh, 7FFFFFFFh, 0A955Bh, 0
		dd 0A9559h, 0
		dd 9534E000h, 64h, 9534E000h, 80000064h, 6ACB1FFFh, 7FFFFF9Bh
		dd 0Ah,	0
		dd 0FF2BC000h, 0DCBFFEh, 34077334h, 0F2567334h,	0CDA10CCCh
		dd 0BF00CCDh, 4, 80000000h, 0FFFFFFFCh,	7FFFFFFFh, 0FF2BC001h
		dd 0DCBFFEh, 0FF2BBFFFh, 0DCBFFEh, 5, 0
		dd 5, 80000000h, 0FFFFFFFAh, 7FFFFFFFh
_rdata		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 370h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utmscale_getTimeScaleValue_56
_utmscale_getTimeScaleValue_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_8], 0
		jz	short loc_39C
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0
		jle	short loc_3A2

loc_39C:				; CODE XREF: _utmscale_getTimeScaleValue_56+22j
		xor	eax, eax
		xor	edx, edx
		jmp	short loc_3E0
; ---------------------------------------------------------------------------

loc_3A2:				; CODE XREF: _utmscale_getTimeScaleValue_56+2Aj
		cmp	[ebp+arg_0], 0
		jl	short loc_3BA
		cmp	[ebp+arg_0], 0Ah
		jge	short loc_3BA
		cmp	[ebp+arg_4], 0
		jl	short loc_3BA
		cmp	[ebp+arg_4], 0Bh
		jl	short loc_3C9

loc_3BA:				; CODE XREF: _utmscale_getTimeScaleValue_56+36j
					; _utmscale_getTimeScaleValue_56+3Cj ...
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 1
		xor	eax, eax
		xor	edx, edx
		jmp	short loc_3E0
; ---------------------------------------------------------------------------

loc_3C9:				; CODE XREF: _utmscale_getTimeScaleValue_56+48j
		mov	ecx, [ebp+arg_0]
		imul	ecx, 58h
		mov	edx, [ebp+arg_4]
		mov	eax, _timeScaleTable[ecx+edx*8]
		mov	edx, dword_4[ecx+edx*8]

loc_3E0:				; CODE XREF: _utmscale_getTimeScaleValue_56+30j
					; _utmscale_getTimeScaleValue_56+57j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_utmscale_getTimeScaleValue_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 3E8h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 3ECh
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3F0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utmscale_fromInt64_56
_utmscale_fromInt64_56 proc near

var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_C], 0
		jz	short loc_41C
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jle	short loc_425

loc_41C:				; CODE XREF: _utmscale_fromInt64_56+22j
		xor	eax, eax
		xor	edx, edx
		jmp	loc_4CE
; ---------------------------------------------------------------------------

loc_425:				; CODE XREF: _utmscale_fromInt64_56+2Aj
		cmp	[ebp+arg_8], 0
		jl	short loc_431
		cmp	[ebp+arg_8], 0Ah
		jl	short loc_443

loc_431:				; CODE XREF: _utmscale_fromInt64_56+39j
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 1
		xor	eax, eax
		xor	edx, edx
		jmp	loc_4CE
; ---------------------------------------------------------------------------

loc_443:				; CODE XREF: _utmscale_fromInt64_56+3Fj
		mov	eax, [ebp+arg_8]
		imul	eax, 58h
		add	eax, offset _timeScaleTable
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		mov	[ebp+var_D0], eax
		mov	ecx, [ebp+var_D0]
		mov	edx, [ebp+arg_4]
		cmp	edx, [ecx+14h]
		jl	short loc_49F
		jg	short loc_478
		mov	eax, [ebp+var_D0]
		mov	ecx, [ebp+arg_0]
		cmp	ecx, [eax+10h]
		jb	short loc_49F

loc_478:				; CODE XREF: _utmscale_fromInt64_56+78j
		mov	eax, [ebp+var_8]
		mov	[ebp+var_D0], eax
		mov	ecx, [ebp+var_D0]
		mov	edx, [ebp+arg_4]
		cmp	edx, [ecx+1Ch]
		jl	short loc_4AE
		jg	short loc_49F
		mov	eax, [ebp+var_D0]
		mov	ecx, [ebp+arg_0]
		cmp	ecx, [eax+18h]
		jbe	short loc_4AE

loc_49F:				; CODE XREF: _utmscale_fromInt64_56+76j
					; _utmscale_fromInt64_56+86j ...
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 1
		xor	eax, eax
		xor	edx, edx
		jmp	short loc_4CE
; ---------------------------------------------------------------------------

loc_4AE:				; CODE XREF: _utmscale_fromInt64_56+9Dj
					; _utmscale_fromInt64_56+ADj
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		add	ecx, [eax+8]
		mov	edx, [ebp+arg_4]
		adc	edx, [eax+0Ch]
		mov	eax, [ebp+var_8]
		mov	esi, [eax+4]
		push	esi
		mov	eax, [eax]
		push	eax
		push	edx
		push	ecx
		call	__allmul

loc_4CE:				; CODE XREF: _utmscale_fromInt64_56+30j
					; _utmscale_fromInt64_56+4Ej ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utmscale_fromInt64_56 endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4E4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _utmscale_toInt64_56
_utmscale_toInt64_56 proc near

var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_C], 0
		jz	short loc_510
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jle	short loc_519

loc_510:				; CODE XREF: _utmscale_toInt64_56+22j
		xor	eax, eax
		xor	edx, edx
		jmp	loc_6B6
; ---------------------------------------------------------------------------

loc_519:				; CODE XREF: _utmscale_toInt64_56+2Aj
		cmp	[ebp+arg_8], 0
		jl	short loc_525
		cmp	[ebp+arg_8], 0Ah
		jl	short loc_537

loc_525:				; CODE XREF: _utmscale_toInt64_56+39j
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 1
		xor	eax, eax
		xor	edx, edx
		jmp	loc_6B6
; ---------------------------------------------------------------------------

loc_537:				; CODE XREF: _utmscale_toInt64_56+3Fj
		mov	eax, [ebp+arg_8]
		imul	eax, 58h
		add	eax, offset _timeScaleTable
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		mov	[ebp+var_D0], eax
		mov	ecx, [ebp+var_D0]
		mov	edx, [ebp+arg_4]
		cmp	edx, [ecx+24h]
		jl	short loc_593
		jg	short loc_56C
		mov	eax, [ebp+var_D0]
		mov	ecx, [ebp+arg_0]
		cmp	ecx, [eax+20h]
		jb	short loc_593

loc_56C:				; CODE XREF: _utmscale_toInt64_56+78j
		mov	eax, [ebp+var_8]
		mov	[ebp+var_D0], eax
		mov	ecx, [ebp+var_D0]
		mov	edx, [ebp+arg_4]
		cmp	edx, [ecx+2Ch]
		jl	short loc_5A5
		jg	short loc_593
		mov	eax, [ebp+var_D0]
		mov	ecx, [ebp+arg_0]
		cmp	ecx, [eax+28h]
		jbe	short loc_5A5

loc_593:				; CODE XREF: _utmscale_toInt64_56+76j
					; _utmscale_toInt64_56+86j ...
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 1
		xor	eax, eax
		xor	edx, edx
		jmp	loc_6B6
; ---------------------------------------------------------------------------

loc_5A5:				; CODE XREF: _utmscale_toInt64_56+9Dj
					; _utmscale_toInt64_56+ADj
		cmp	[ebp+arg_4], 0
		jg	loc_63B
		jl	short loc_5BB
		cmp	[ebp+arg_0], 0
		jnb	loc_63B

loc_5BB:				; CODE XREF: _utmscale_toInt64_56+CBj
		mov	eax, [ebp+var_8]
		mov	[ebp+var_D0], eax
		mov	ecx, [ebp+var_D0]
		mov	edx, [ebp+arg_4]
		cmp	edx, [ecx+4Ch]
		jg	short loc_610
		jl	short loc_5E2
		mov	eax, [ebp+var_D0]
		mov	ecx, [ebp+arg_0]
		cmp	ecx, [eax+48h]
		jnb	short loc_610

loc_5E2:				; CODE XREF: _utmscale_toInt64_56+EEj
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		add	ecx, [eax+40h]
		mov	edx, [ebp+arg_4]
		adc	edx, [eax+44h]
		mov	eax, [ebp+var_8]
		mov	esi, [eax+4]
		push	esi
		mov	eax, [eax]
		push	eax
		push	edx
		push	ecx
		call	__alldiv
		mov	ecx, [ebp+var_8]
		sub	eax, [ecx+30h]
		sbb	edx, [ecx+34h]
		jmp	loc_6B6
; ---------------------------------------------------------------------------

loc_610:				; CODE XREF: _utmscale_toInt64_56+ECj
					; _utmscale_toInt64_56+FCj
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		sub	ecx, [eax+40h]
		mov	edx, [ebp+arg_4]
		sbb	edx, [eax+44h]
		mov	eax, [ebp+var_8]
		mov	esi, [eax+4]
		push	esi
		mov	eax, [eax]
		push	eax
		push	edx
		push	ecx
		call	__alldiv
		mov	ecx, [ebp+var_8]
		sub	eax, [ecx+8]
		sbb	edx, [ecx+0Ch]
		jmp	short loc_6B6
; ---------------------------------------------------------------------------

loc_63B:				; CODE XREF: _utmscale_toInt64_56+C5j
					; _utmscale_toInt64_56+D1j
		mov	eax, [ebp+var_8]
		mov	[ebp+var_D0], eax
		mov	ecx, [ebp+var_D0]
		mov	edx, [ebp+arg_4]
		cmp	edx, [ecx+54h]
		jl	short loc_68D
		jg	short loc_662
		mov	eax, [ebp+var_D0]
		mov	ecx, [ebp+arg_0]
		cmp	ecx, [eax+50h]
		jbe	short loc_68D

loc_662:				; CODE XREF: _utmscale_toInt64_56+16Ej
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		sub	ecx, [eax+40h]
		mov	edx, [ebp+arg_4]
		sbb	edx, [eax+44h]
		mov	eax, [ebp+var_8]
		mov	esi, [eax+4]
		push	esi
		mov	eax, [eax]
		push	eax
		push	edx
		push	ecx
		call	__alldiv
		mov	ecx, [ebp+var_8]
		sub	eax, [ecx+38h]
		sbb	edx, [ecx+3Ch]
		jmp	short loc_6B6
; ---------------------------------------------------------------------------

loc_68D:				; CODE XREF: _utmscale_toInt64_56+16Cj
					; _utmscale_toInt64_56+17Cj
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		add	ecx, [eax+40h]
		mov	edx, [ebp+arg_4]
		adc	edx, [eax+44h]
		mov	eax, [ebp+var_8]
		mov	esi, [eax+4]
		push	esi
		mov	eax, [eax]
		push	eax
		push	edx
		push	ecx
		call	__alldiv
		mov	ecx, [ebp+var_8]
		sub	eax, [ecx+8]
		sbb	edx, [ecx+0Ch]

loc_6B6:				; CODE XREF: _utmscale_toInt64_56+30j
					; _utmscale_toInt64_56+4Ej ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_utmscale_toInt64_56 endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_CheckEsp:near ; CODE XREF: _utmscale_fromInt64_56+E9p
					; _utmscale_toInt64_56+1DDp
		extrn __allmul:near	; CODE XREF: _utmscale_fromInt64_56+D9p
		extrn __alldiv:near	; CODE XREF: _utmscale_toInt64_56+119p
					; _utmscale_toInt64_56+147p ...


		end
