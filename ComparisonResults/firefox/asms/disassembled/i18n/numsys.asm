;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	13920EA2E16D8AA57FED942AA078ABAC
; Input	CRC32 :	233758F3

; File Name   :	D:\compspace\objfiles\firefox\i18n\numsys.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		public ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
; public: static bool const std::tr1::integral_constant<bool, 0>::value
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	db 0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 4
		public ?value@?$integral_constant@_N$00@tr1@std@@2_NB
; public: static bool const std::tr1::integral_constant<bool, 1>::value
?value@?$integral_constant@_N$00@tr1@std@@2_NB db 1
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8
		public ?value@?$integral_constant@I$0A@@tr1@std@@2IB
; public: static unsigned int const std::tr1::integral_constant<unsigned int, 0>::value
?value@?$integral_constant@I$0A@@tr1@std@@2IB dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0Ch
		public ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
; public: static int const std::_Arithmetic_traits<bool>::_Rank
?_Rank@?$_Arithmetic_traits@_N@std@@2HB	dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10h
		public ?_Rank@?$_Arithmetic_traits@D@std@@2HB
; public: static int const std::_Arithmetic_traits<char>::_Rank
?_Rank@?$_Arithmetic_traits@D@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14h
		public ?_Rank@?$_Arithmetic_traits@C@std@@2HB
; public: static int const std::_Arithmetic_traits<signed char>::_Rank
?_Rank@?$_Arithmetic_traits@C@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18h
		public ?_Rank@?$_Arithmetic_traits@E@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned char>::_Rank
?_Rank@?$_Arithmetic_traits@E@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1Ch
		public ?_Rank@?$_Arithmetic_traits@F@std@@2HB
; public: static int const std::_Arithmetic_traits<short>::_Rank
?_Rank@?$_Arithmetic_traits@F@std@@2HB dd 3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 20h
		public ?_Rank@?$_Arithmetic_traits@G@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned short>::_Rank
?_Rank@?$_Arithmetic_traits@G@std@@2HB dd 3
					; DATA XREF: .rdata:int	const std::_Locbase<int>::messageso
					; .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::showposo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 24h
		public ?_Rank@?$_Arithmetic_traits@H@std@@2HB
; public: static int const std::_Arithmetic_traits<int>::_Rank
?_Rank@?$_Arithmetic_traits@H@std@@2HB dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 28h
		public ?_Rank@?$_Arithmetic_traits@I@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned int>::_Rank
?_Rank@?$_Arithmetic_traits@I@std@@2HB dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2Ch
		public ?_Rank@?$_Arithmetic_traits@J@std@@2HB
; public: static int const std::_Arithmetic_traits<long>::_Rank
?_Rank@?$_Arithmetic_traits@J@std@@2HB dd 5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 30h
		public ?_Rank@?$_Arithmetic_traits@K@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned long>::_Rank
?_Rank@?$_Arithmetic_traits@K@std@@2HB dd 5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 34h
		public ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
; public: static int const std::_Arithmetic_traits<__int64>::_Rank
?_Rank@?$_Arithmetic_traits@_J@std@@2HB	dd 6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 38h
		public ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned __int64>::_Rank
?_Rank@?$_Arithmetic_traits@_K@std@@2HB	dd 6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3Ch
		public ?_Rank@?$_Arithmetic_traits@M@std@@2HB
; public: static int const std::_Arithmetic_traits<float>::_Rank
?_Rank@?$_Arithmetic_traits@M@std@@2HB dd 7
					; DATA XREF: .rdata:int	const std::_Locbase<int>::allo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 40h
		public ?_Rank@?$_Arithmetic_traits@N@std@@2HB
; public: static int const std::_Arithmetic_traits<double>::_Rank
?_Rank@?$_Arithmetic_traits@N@std@@2HB dd 8
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::lefto
					; .rdata:std::_Iosb<int>::_Openmode const std::_Iosb<int>::_Nocreateo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 44h
		public ?_Rank@?$_Arithmetic_traits@O@std@@2HB
; public: static int const std::_Arithmetic_traits<long	double>::_Rank
?_Rank@?$_Arithmetic_traits@O@std@@2HB dd 9
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 48h
		public ?collate@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::collate
?collate@?$_Locbase@H@std@@2HB dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4Ch
		public ?ctype@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::ctype
?ctype@?$_Locbase@H@std@@2HB dd	2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 50h
		public ?monetary@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::monetary
?monetary@?$_Locbase@H@std@@2HB	dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 54h
		public ?numeric@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::numeric
?numeric@?$_Locbase@H@std@@2HB dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 58h
		public ?time@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::time
?time@?$_Locbase@H@std@@2HB dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5Ch
		public ?messages@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::messages
?messages@?$_Locbase@H@std@@2HB	dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 60h
		public ?all@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::all
?all@?$_Locbase@H@std@@2HB dd offset ?_Rank@?$_Arithmetic_traits@M@std@@2HB+3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 64h
		public ?none@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::none
?none@?$_Locbase@H@std@@2HB dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 68h
		public ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::skipws
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6Ch
		public ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::unitbuf
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 70h
		public ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::uppercase
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 74h
		public ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showbase
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 78h
		public ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showpoint
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7Ch
		public ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showpos
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 80h
		public ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::left
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::righto
					; .rdata:std::_Iosb<int>::_Openmode const std::_Iosb<int>::_Noreplaceo
_rdata		ends			; int const std::_Arithmetic_traits<double>::_Rank

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 84h
		public ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::right
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B	dd offset ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B ; std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::left
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 88h
		public ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::internal
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset _gNumberingSystems+8 ; "gSystems"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8Ch
		public ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::dec
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_200
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 90h
		public ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::oct
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_3FB+5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 94h
		public ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::hex
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_7FA+6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 98h
		public ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::scientific
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd	offset loc_FFF+1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9Ch
		public ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::fixed
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B	dd offset loc_1FFE+2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A0h
		public ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::hexfloat
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset loc_2FFD+3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A4h
		public ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::boolalpha
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 4000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A8h
		public ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::_Stdio
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 8000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ACh
		public ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::adjustfield
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_1BE+2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B0h
		public ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::basefield
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset loc_E00
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B4h
		public ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::floatfield
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd	offset loc_2FFD+3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B8h
		public ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::goodbit
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BCh
		public ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::eofbit
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B	dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C0h
		public ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::failbit
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C4h
		public ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::badbit
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B	dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C8h
		public ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::_Hardfail
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CCh
		public ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::in
?in@?$_Iosb@H@std@@2W4_Openmode@12@B dd	1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D0h
		public ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::out
?out@?$_Iosb@H@std@@2W4_Openmode@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D4h
		public ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::ate
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D8h
		public ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::app
?app@?$_Iosb@H@std@@2W4_Openmode@12@B dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0DCh
		public ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::trunc
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B	dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E0h
		public ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::_Nocreate
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E4h
		public ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::_Noreplace
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B dd	offset ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B ;	std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::left
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E8h
		public ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::binary
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int	const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ECh
		public ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::beg
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F0h
		public ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::cur
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F4h
		public ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::end
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F8h
_gNumberingSystems db 'numberingSystems',0
					; DATA XREF: icu_56::NumberingSystem::createInstanceByName(char	const *,UErrorCode &)+59o
					; icu_56::NumberingSystem::createInstanceByName(char const *,UErrorCode	&)+71o	...
		align 4
_gNumberElements db 'NumberElements',0  ; DATA XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+16Co
		align 4
; char gDefault[]
_gDefault	db 'default',0          ; DATA XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+A5o
					; icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &):loc_168Fo ...
; char gNative[]
_gNative	db 'native',0           ; DATA XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+BDo
					; icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+219o ...
		align 4
; char gTraditional[]
_gTraditional	db 'traditional',0      ; DATA XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+D5o
					; icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &):loc_17E3o
; char gFinance[]
_gFinance	db 'finance',0          ; DATA XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+EDo
					; icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+231o
_gDesc		db 'desc',0             ; DATA XREF: icu_56::NumberingSystem::createInstanceByName(char const *,UErrorCode &)+A2o
		align 4
_gRadix		db 'radix',0            ; DATA XREF: icu_56::NumberingSystem::createInstanceByName(char const *,UErrorCode &)+C9o
		align 10h
_gAlgorithmic	db 'algorithmic',0      ; DATA XREF: icu_56::NumberingSystem::createInstanceByName(char const *,UErrorCode &)+F5o
; char gLatn[]
_gLatn		db 'latn',0             ; DATA XREF: icu_56::NumberingSystem::NumberingSystem(void)+C9o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 164h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
; char `public:	static void * __cdecl icu_56::NumberingSystem::getStaticClassID(void)'::`2'::classID
?classID@?1??getStaticClassID@NumberingSystem@icu_56@@SAPAXXZ@4DA db ?
					; DATA XREF: icu_56::NumberingSystem::getStaticClassID(void)+1Eo
; char `public:	static void * __cdecl icu_56::NumsysNameEnumeration::getStaticClassID(void)'::`2'::classID
?classID@?1??getStaticClassID@NumsysNameEnumeration@icu_56@@SAPAXXZ@4DA	db 3 dup(?)
					; DATA XREF: icu_56::NumsysNameEnumeration::getStaticClassID(void)+1Eo
; class	icu_56::StringEnumeration * `public: static class icu_56::StringEnumeration * __cdecl icu_56::NumberingSystem::getAvailableNames(enum  UErrorCode &)'::`2'::availableNames
?availableNames@?1??getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@3@AAW4UErrorCode@@@Z@4PAV43@A dd ?
					; DATA XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &):loc_21F9r
					; icu_56::NumberingSystem::getAvailableNames(UErrorCode	&)+353w ...
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 16Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int)
		public ??2@YAPAXI@Z
??2@YAPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??2@YAPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 1A4h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 1A8h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1ACh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX@Z
??3@YAXPAX@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]

loc_1BE:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::adjustfieldo
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??3@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1E0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: signed char __thiscall icu_56::Formattable::operator!=(class icu_56::Formattable const &)const
		public ??9Formattable@icu_56@@QBECABV01@@Z
??9Formattable@icu_56@@QBECABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx

loc_200:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::deco
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		call	??8Formattable@icu_56@@QBECABV01@@Z ; icu_56::Formattable::operator==(icu_56::Formattable const	&)
		movsx	ecx, al
		test	ecx, ecx
		setz	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??9Formattable@icu_56@@QBECABV01@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 230h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; double __thiscall icu_56::Formattable::getDouble(icu_56::Formattable *__hidden this)
		public ?getDouble@Formattable@icu_56@@QBENXZ
?getDouble@Formattable@icu_56@@QBENXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		fld	qword ptr [eax+8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getDouble@Formattable@icu_56@@QBENXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 260h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::Formattable::getLong(icu_56::Formattable *__hidden this)
		public ?getLong@Formattable@icu_56@@QBEHXZ
?getLong@Formattable@icu_56@@QBEHXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getLong@Formattable@icu_56@@QBEHXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 290h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; __int64 __thiscall icu_56::Formattable::getInt64(icu_56::Formattable *__hidden this)
		public ?getInt64@Formattable@icu_56@@QBE_JXZ
?getInt64@Formattable@icu_56@@QBE_JXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8]
		mov	eax, [ecx+8]
		mov	edx, [ecx+0Ch]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getInt64@Formattable@icu_56@@QBE_JXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2C4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; double __thiscall icu_56::Formattable::getDate(icu_56::Formattable *__hidden this)
		public ?getDate@Formattable@icu_56@@QBENXZ
?getDate@Formattable@icu_56@@QBENXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		fld	qword ptr [eax+8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getDate@Formattable@icu_56@@QBENXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2F4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::UnicodeString *__thiscall icu_56::Formattable::getString(icu_56::Formattable *this, struct icu_56::UnicodeString *)
		public ?getString@Formattable@icu_56@@QBEAAVUnicodeString@2@AAV32@@Z
?getString@Formattable@icu_56@@QBEAAVUnicodeString@2@AAV32@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+8]
		push	ecx
		mov	ecx, [ebp+arg_0]
		call	dword ptr ds:__imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z ;	icu_56::UnicodeString::operator=(icu_56::UnicodeString const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?getString@Formattable@icu_56@@QBEAAVUnicodeString@2@AAV32@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 34Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct icu_56::Formattable *__thiscall icu_56::Formattable::getArray(icu_56::Formattable *this,	int *)
		public ?getArray@Formattable@icu_56@@QBEPBV12@AAH@Z
?getArray@Formattable@icu_56@@QBEPBV12@AAH@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+0Ch]
		mov	[eax], edx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?getArray@Formattable@icu_56@@QBEPBV12@AAH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 38Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::Formattable & __thiscall icu_56::Formattable::operator[](int)
		public ??AFormattable@icu_56@@QAEAAV01@H@Z
??AFormattable@icu_56@@QAEAAV01@H@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		imul	eax, 0E0h
		mov	ecx, [ebp+var_8]
		add	eax, [ecx+8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??AFormattable@icu_56@@QAEAAV01@H@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3C8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::DigitList *__thiscall icu_56::Formattable::getDigitList(icu_56::Formattable *__hidden this)
		public ?getDigitList@Formattable@icu_56@@QBEPAVDigitList@2@XZ
?getDigitList@Formattable@icu_56@@QBEPAVDigitList@2@XZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+14h]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getDigitList@Formattable@icu_56@@QBEPAVDigitList@2@XZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3F8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; double __thiscall icu_56::Formattable::getDate(icu_56::Formattable *this, enum UErrorCode *)
		public ?getDate@Formattable@icu_56@@QBENAAW4UErrorCode@@@Z
?getDate@Formattable@icu_56@@QBENAAW4UErrorCode@@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp

loc_3FB:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::octo
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+98h], 0
		jz	short loc_449
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_445
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 3

loc_445:				; CODE XREF: icu_56::Formattable::getDate(UErrorCode &)+42j
		fldz
		jmp	short loc_44F
; ---------------------------------------------------------------------------

loc_449:				; CODE XREF: icu_56::Formattable::getDate(UErrorCode &)+2Dj
		mov	eax, [ebp+var_8]
		fld	qword ptr [eax+8]

loc_44F:				; CODE XREF: icu_56::Formattable::getDate(UErrorCode &)+4Fj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?getDate@Formattable@icu_56@@QBENAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 468h
		public __real@0000000000000000
__real@0000000000000000	dd 2 dup(0)
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 470h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl U_SUCCESS(enum  UErrorCode)
?U_SUCCESS@@YACW4UErrorCode@@@Z	proc near
					; CODE XREF: icu_56::Formattable::getDate(UErrorCode &)+35p
					; icu_56::NumsysNameEnumeration::snext(UErrorCode &)+29p ...

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		setle	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?U_SUCCESS@@YACW4UErrorCode@@@Z	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 49Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct icu_56::UnicodeString *__thiscall icu_56::Formattable::getString(icu_56::Formattable *__hidden this)
		public ?getString@Formattable@icu_56@@QBEABVUnicodeString@2@XZ
?getString@Formattable@icu_56@@QBEABVUnicodeString@2@XZ	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getString@Formattable@icu_56@@QBEABVUnicodeString@2@XZ	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4CCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::UnicodeString *__thiscall icu_56::Formattable::getString(icu_56::Formattable *__hidden	this)
		public ?getString@Formattable@icu_56@@QAEAAVUnicodeString@2@XZ
?getString@Formattable@icu_56@@QAEAAVUnicodeString@2@XZ	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getString@Formattable@icu_56@@QAEAAVUnicodeString@2@XZ	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4FCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::Formattable::getLong(icu_56::Formattable *this, enum UErrorCode *)
		public ?getLong@Formattable@icu_56@@QBEHPAW4UErrorCode@@@Z
?getLong@Formattable@icu_56@@QBEHPAW4UErrorCode@@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+var_8] ; this
		call	?getLong@Formattable@icu_56@@QBEHAAW4UErrorCode@@@Z ; icu_56::Formattable::getLong(UErrorCode &)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?getLong@Formattable@icu_56@@QBEHPAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 544h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void **__thiscall icu_56::Formattable::toUFormattable(icu_56::Formattable *__hidden this)
		public ?toUFormattable@Formattable@icu_56@@QAEPAPAXXZ
?toUFormattable@Formattable@icu_56@@QAEPAPAXXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?toUFormattable@Formattable@icu_56@@QAEPAPAXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 574h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *const *__thiscall icu_56::Formattable::toUFormattable(icu_56::Formattable *__hidden this)
		public ?toUFormattable@Formattable@icu_56@@QBEPBQAXXZ
?toUFormattable@Formattable@icu_56@@QBEPBQAXXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?toUFormattable@Formattable@icu_56@@QBEPBQAXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 5A4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::Formattable *__cdecl icu_56::Formattable::fromUFormattable(void **)
		public ?fromUFormattable@Formattable@icu_56@@SAPAV12@PAPAX@Z
?fromUFormattable@Formattable@icu_56@@SAPAV12@PAPAX@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?fromUFormattable@Formattable@icu_56@@SAPAV12@PAPAX@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 5CCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct icu_56::Formattable *__cdecl icu_56::Formattable::fromUFormattable(void *const *)
		public ?fromUFormattable@Formattable@icu_56@@SAPBV12@PBQAX@Z
?fromUFormattable@Formattable@icu_56@@SAPBV12@PBQAX@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?fromUFormattable@Formattable@icu_56@@SAPBV12@PBQAX@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 5F4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::FieldPosition::FieldPosition(icu_56::FieldPosition *__hidden this)
		public ??0FieldPosition@icu_56@@QAE@XZ
??0FieldPosition@icu_56@@QAE@XZ	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@XZ ; icu_56::UObject::UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7FieldPosition@icu_56@@6B@ ;	const icu_56::FieldPosition::`vftable'
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+4], 0FFFFFFFFh
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+8], 0
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+0Ch], 0
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0FieldPosition@icu_56@@QAE@XZ	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 668h
		dd offset ??_R4FieldPosition@icu_56@@6B@ ; const icu_56::FieldPosition::`RTTI Complete Object Locator'
;
; Exported entry
;
		public ??_7FieldPosition@icu_56@@6B@
; const	icu_56::FieldPosition::`vftable'
??_7FieldPosition@icu_56@@6B@ dd offset	??_EFieldPosition@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::FieldPosition::FieldPosition(void)+38o
					; icu_56::FieldPosition::FieldPosition(int)+38o ...
					; icu_56::FieldPosition::`vector deleting destructor'(uint)
		dd offset ?getDynamicClassID@FieldPosition@icu_56@@UBEPAXXZ ; icu_56::FieldPosition::getDynamicClassID(void)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 674h
		public ??_R4FieldPosition@icu_56@@6B@
; const	icu_56::FieldPosition::`RTTI Complete Object Locator'
??_R4FieldPosition@icu_56@@6B@ dd 3 dup(0) ; DATA XREF:	.rdata:00000668o
		dd offset ??_R0?AVFieldPosition@icu_56@@@8 ; icu_56::FieldPosition `RTTI Type Descriptor'
		dd offset ??_R3FieldPosition@icu_56@@8 ; icu_56::FieldPosition::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 688h
		public ??_R0?AVFieldPosition@icu_56@@@8
; class	icu_56::FieldPosition `RTTI Type Descriptor'
??_R0?AVFieldPosition@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00000680o
					; .rdata$r:icu_56::FieldPosition::`RTTI	Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avfieldposit	db '.?AVFieldPosition@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 6ACh
		public ??_R3FieldPosition@icu_56@@8
; icu_56::FieldPosition::`RTTI Class Hierarchy Descriptor'
??_R3FieldPosition@icu_56@@8 dd	2 dup(0) ; DATA	XREF: .rdata$r:00000684o
					; .rdata$r:000006E4o
		dd 3
		dd offset ??_R2FieldPosition@icu_56@@8 ; icu_56::FieldPosition::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 6BCh
		public ??_R2FieldPosition@icu_56@@8
; icu_56::FieldPosition::`RTTI Base Class Array'
??_R2FieldPosition@icu_56@@8 dd	offset ??_R1A@?0A@EA@FieldPosition@icu_56@@8
					; DATA XREF: .rdata$r:000006B8o
					; icu_56::FieldPosition::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 6CCh
		public ??_R1A@?0A@EA@FieldPosition@icu_56@@8
; icu_56::FieldPosition::`RTTI Base Class Descriptor at	(0, -1,	0, 64)'
??_R1A@?0A@EA@FieldPosition@icu_56@@8 dd offset	??_R0?AVFieldPosition@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::FieldPosition::`RTTI Base	Class Array'o
					; icu_56::FieldPosition	`RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3FieldPosition@icu_56@@8 ; icu_56::FieldPosition::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 6E8h
		public ??_R1A@?0A@EA@UObject@icu_56@@8
; icu_56::UObject::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UObject@icu_56@@8	dd offset ??_R0?AVUObject@icu_56@@@8
					; DATA XREF: .rdata$r:000006C0o
					; .rdata$r:icu_56::UObject::`RTTI Base Class Array'o ...
					; icu_56::UObject `RTTI	Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UObject@icu_56@@8 ; icu_56::UObject::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 704h
		public ??_R0?AVUObject@icu_56@@@8
; class	icu_56::UObject	`RTTI Type Descriptor'
??_R0?AVUObject@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UObject::`RTTI Base Class	Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avuobject@ic	db '.?AVUObject@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 724h
		public ??_R3UObject@icu_56@@8
; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
??_R3UObject@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00000700o
		dd 2
		dd offset ??_R2UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 734h
		public ??_R2UObject@icu_56@@8
; icu_56::UObject::`RTTI Base Class Array'
??_R2UObject@icu_56@@8 dd offset ??_R1A@?0A@EA@UObject@icu_56@@8
					; DATA XREF: .rdata$r:00000730o
					; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 740h
		public ??_R13?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@UMemory@icu_56@@8 dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:000006C4o
					; .rdata$r:00000738o ...
					; icu_56::UMemory `RTTI	Type Descriptor'
		align 8
		dd 4, 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 75Ch
		public ??_R0?AVUMemory@icu_56@@@8
; class	icu_56::UMemory	`RTTI Type Descriptor'
??_R0?AVUMemory@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Descriptor at (4,-1,0,64)'o
					; .rdata$r:icu_56::UMemory::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avumemory@ic	db '.?AVUMemory@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 77Ch
		public ??_R3UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
??_R3UMemory@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00000758o
					; .rdata$r:000007ACo
		dd 1
		dd offset ??_R2UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 78Ch
		public ??_R2UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Array'
??_R2UMemory@icu_56@@8 dd offset ??_R1A@?0A@EA@UMemory@icu_56@@8
					; DATA XREF: .rdata$r:00000788o
					; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 794h
		public ??_R1A@?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UMemory@icu_56@@8	dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Array'o
					; icu_56::UMemory `RTTI	Type Descriptor'
		align 10h
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 7B0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::FieldPosition::FieldPosition(icu_56::FieldPosition *this, int)
		public ??0FieldPosition@icu_56@@QAE@H@Z
??0FieldPosition@icu_56@@QAE@H@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@XZ ; icu_56::UObject::UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7FieldPosition@icu_56@@6B@ ;	const icu_56::FieldPosition::`vftable'
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+4], ecx
		mov	eax, [ebp+var_8]

loc_7FA:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::hexo
		mov	dword ptr [eax+8], 0
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+0Ch], 0
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0FieldPosition@icu_56@@QAE@H@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 824h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::FieldPosition::FieldPosition(icu_56::FieldPosition *this, const struct icu_56::FieldPosition *)
		public ??0FieldPosition@icu_56@@QAE@ABV01@@Z
??0FieldPosition@icu_56@@QAE@ABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax		; struct icu_56::UObject *
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@ABV01@@Z ; icu_56::UObject::UObject(icu_56::UObject const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7FieldPosition@icu_56@@6B@ ;	const icu_56::FieldPosition::`vftable'
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		mov	[eax+8], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		mov	[eax+0Ch], edx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0FieldPosition@icu_56@@QAE@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 8A4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::FieldPosition::getField(icu_56::FieldPosition *__hidden this)
		public ?getField@FieldPosition@icu_56@@QBEHXZ
?getField@FieldPosition@icu_56@@QBEHXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+4]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getField@FieldPosition@icu_56@@QBEHXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 8D4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::FieldPosition::getBeginIndex(icu_56::FieldPosition *__hidden this)
		public ?getBeginIndex@FieldPosition@icu_56@@QBEHXZ
?getBeginIndex@FieldPosition@icu_56@@QBEHXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getBeginIndex@FieldPosition@icu_56@@QBEHXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 904h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::FieldPosition::getEndIndex(icu_56::FieldPosition *__hidden this)
		public ?getEndIndex@FieldPosition@icu_56@@QBEHXZ
?getEndIndex@FieldPosition@icu_56@@QBEHXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+0Ch]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getEndIndex@FieldPosition@icu_56@@QBEHXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 934h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::FieldPosition::setField(icu_56::FieldPosition	*this, int)
		public ?setField@FieldPosition@icu_56@@QAEXH@Z
?setField@FieldPosition@icu_56@@QAEXH@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+4], ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?setField@FieldPosition@icu_56@@QAEXH@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 96Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::FieldPosition::setBeginIndex(icu_56::FieldPosition *this, int)
		public ?setBeginIndex@FieldPosition@icu_56@@QAEXH@Z
?setBeginIndex@FieldPosition@icu_56@@QAEXH@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+8], ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?setBeginIndex@FieldPosition@icu_56@@QAEXH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 9A4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::FieldPosition::setEndIndex(icu_56::FieldPosition *this, int)
		public ?setEndIndex@FieldPosition@icu_56@@QAEXH@Z
?setEndIndex@FieldPosition@icu_56@@QAEXH@Z proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+0Ch], ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?setEndIndex@FieldPosition@icu_56@@QAEXH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 9DCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::FieldPosition::`scalar deleting destructor'(unsigned int)
		public ??_GFieldPosition@icu_56@@UAEPAXI@Z
??_GFieldPosition@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1FieldPosition@icu_56@@UAE@XZ	; icu_56::FieldPosition::~FieldPosition(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_A25
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_A25:				; CODE XREF: icu_56::FieldPosition::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GFieldPosition@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A40h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::FieldPosition::`vector deleting destructor'(unsigned int)
		public ??_EFieldPosition@icu_56@@UAEPAXI@Z
??_EFieldPosition@icu_56@@UAEPAXI@Z proc near
					; DATA XREF: .rdata:const icu_56::FieldPosition::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		and	eax, 2
		jz	short loc_AAB
		push	offset ??1FieldPosition@icu_56@@UAE@XZ ; icu_56::FieldPosition::~FieldPosition(void)
		mov	eax, [ebp+var_8]
		mov	ecx, [eax-4]
		push	ecx
		push	10h
		mov	edx, [ebp+var_8]
		push	edx
		call	??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_AA3
		mov	eax, [ebp+var_8]
		sub	eax, 4
		mov	esi, esp
		push	eax		; void *
		call	dword ptr ds:__imp_??_VUMemory@icu_56@@SAXPAX@Z	; icu_56::UMemory::operator delete[](void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_AA3:				; CODE XREF: icu_56::FieldPosition::`vector deleting destructor'(uint)+48j
		mov	eax, [ebp+var_8]
		sub	eax, 4
		jmp	short loc_AD4
; ---------------------------------------------------------------------------

loc_AAB:				; CODE XREF: icu_56::FieldPosition::`vector deleting destructor'(uint)+29j
		mov	ecx, [ebp+var_8] ; this
		call	??1FieldPosition@icu_56@@UAE@XZ	; icu_56::FieldPosition::~FieldPosition(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_AD1
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_AD1:				; CODE XREF: icu_56::FieldPosition::`vector deleting destructor'(uint)+79j
		mov	eax, [ebp+var_8]

loc_AD4:				; CODE XREF: icu_56::FieldPosition::`vector deleting destructor'(uint)+69j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_EFieldPosition@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0AECh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::FieldPosition &	__thiscall icu_56::FieldPosition::operator=(class icu_56::FieldPosition	const &)
		public ??4FieldPosition@icu_56@@QAEAAV01@ABV01@@Z
??4FieldPosition@icu_56@@QAEAAV01@ABV01@@Z proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		mov	[eax+0Ch], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		mov	[eax+8], edx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??4FieldPosition@icu_56@@QAEAAV01@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0B40h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: signed char __thiscall icu_56::FieldPosition::operator==(class icu_56::FieldPosition const &)const
		public ??8FieldPosition@icu_56@@QBECABV01@@Z
??8FieldPosition@icu_56@@QBECABV01@@Z proc near
					; CODE XREF: icu_56::FieldPosition::operator!=(icu_56::FieldPosition const &)+2Ap

var_D0		= byte ptr -0D0h
var_CD		= byte ptr -0CDh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+4]
		cmp	edx, [ecx+4]
		jnz	short loc_B96
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+0Ch]
		cmp	edx, [ecx+0Ch]
		jnz	short loc_B96
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+8]
		cmp	edx, [ecx+8]
		jnz	short loc_B96
		mov	[ebp+var_CD], 1
		jmp	short loc_B9D
; ---------------------------------------------------------------------------

loc_B96:				; CODE XREF: icu_56::FieldPosition::operator==(icu_56::FieldPosition const &)+2Fj
					; icu_56::FieldPosition::operator==(icu_56::FieldPosition const	&)+3Dj	...
		mov	[ebp+var_CD], 0

loc_B9D:				; CODE XREF: icu_56::FieldPosition::operator==(icu_56::FieldPosition const &)+54j
		mov	al, [ebp+var_CD]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??8FieldPosition@icu_56@@QBECABV01@@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0BACh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: signed char __thiscall icu_56::FieldPosition::operator!=(class icu_56::FieldPosition const &)const
		public ??9FieldPosition@icu_56@@QBECABV01@@Z
??9FieldPosition@icu_56@@QBECABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		call	??8FieldPosition@icu_56@@QBECABV01@@Z ;	icu_56::FieldPosition::operator==(icu_56::FieldPosition	const &)
		movsx	ecx, al
		test	ecx, ecx
		setz	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??9FieldPosition@icu_56@@QBECABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0BFCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: signed char __thiscall icu_56::FieldPositionIterator::operator!=(class icu_56::FieldPositionIterator const &)const
		public ??9FieldPositionIterator@icu_56@@QBECABV01@@Z
??9FieldPositionIterator@icu_56@@QBECABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		call	??8FieldPositionIterator@icu_56@@QBECABV01@@Z ;	icu_56::FieldPositionIterator::operator==(icu_56::FieldPositionIterator	const &)
		movsx	ecx, al
		test	ecx, ecx
		setz	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??9FieldPositionIterator@icu_56@@QBECABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C4Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::FieldPositionIterator &	__thiscall icu_56::FieldPositionIterator::operator=(class icu_56::FieldPositionIterator	const &)
		public ??4FieldPositionIterator@icu_56@@QAEAAV01@ABV01@@Z
??4FieldPositionIterator@icu_56@@QAEAAV01@ABV01@@Z proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		call	dword ptr ds:__imp_??4UObject@icu_56@@QAEAAV01@ABV01@@Z	; icu_56::UObject::operator=(icu_56::UObject const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		mov	[eax+8], edx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??4FieldPositionIterator@icu_56@@QAEAAV01@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0CB8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: signed char __thiscall icu_56::Format::operator!=(class icu_56::Format const &)const
		public ??9Format@icu_56@@QBECABV01@@Z
??9Format@icu_56@@QBECABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+8]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		movsx	ecx, al
		test	ecx, ecx
		setz	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??9Format@icu_56@@QBECABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0D14h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::NumberingSystem	& __thiscall icu_56::NumberingSystem::operator=(class icu_56::NumberingSystem const &)
		public ??4NumberingSystem@icu_56@@QAEAAV01@ABV01@@Z
??4NumberingSystem@icu_56@@QAEAAV01@ABV01@@Z proc near
					; CODE XREF: icu_56::NumberingSystem::NumberingSystem(icu_56::NumberingSystem const &)+88p

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		call	dword ptr ds:__imp_??4UObject@icu_56@@QAEAAV01@ABV01@@Z	; icu_56::UObject::operator=(icu_56::UObject const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		add	eax, 4
		mov	esi, esp
		push	eax
		mov	ecx, [ebp+var_8]
		add	ecx, 4
		call	dword ptr ds:__imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z ;	icu_56::UnicodeString::operator=(icu_56::UnicodeString const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+44h]
		mov	[eax+44h], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	dl, [ecx+48h]
		mov	[eax+48h], dl
		mov	[ebp+var_14], 0
		jmp	short loc_D93
; ---------------------------------------------------------------------------

loc_D8A:				; CODE XREF: icu_56::NumberingSystem::operator=(icu_56::NumberingSystem	const &)+97j
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax

loc_D93:				; CODE XREF: icu_56::NumberingSystem::operator=(icu_56::NumberingSystem	const &)+74j
		cmp	[ebp+var_14], 9
		jnb	short loc_DAD
		mov	eax, [ebp+var_8]
		add	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+var_14]
		mov	dl, [ecx+49h]
		mov	[eax+49h], dl
		jmp	short loc_D8A
; ---------------------------------------------------------------------------

loc_DAD:				; CODE XREF: icu_56::NumberingSystem::operator=(icu_56::NumberingSystem	const &)+83j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??4NumberingSystem@icu_56@@QAEAAV01@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0DC8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::NumberingSystem::`scalar deleting destructor'(unsigned int)
		public ??_GNumberingSystem@icu_56@@UAEPAXI@Z
??_GNumberingSystem@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1NumberingSystem@icu_56@@UAE@XZ ; icu_56::NumberingSystem::~NumberingSystem(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_E11
		mov	esi, esp
		mov	eax, [ebp+var_8]

loc_E00:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::basefieldo
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_E11:				; CODE XREF: icu_56::NumberingSystem::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GNumberingSystem@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0E2Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::NumberingSystem::`vector deleting destructor'(unsigned int)
		public ??_ENumberingSystem@icu_56@@UAEPAXI@Z
??_ENumberingSystem@icu_56@@UAEPAXI@Z proc near
					; DATA XREF: .rdata:const icu_56::NumberingSystem::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		and	eax, 2
		jz	short loc_E97
		push	offset ??1NumberingSystem@icu_56@@UAE@XZ ; icu_56::NumberingSystem::~NumberingSystem(void)
		mov	eax, [ebp+var_8]
		mov	ecx, [eax-4]
		push	ecx
		push	54h ; 'T'
		mov	edx, [ebp+var_8]
		push	edx
		call	??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_E8F
		mov	eax, [ebp+var_8]
		sub	eax, 4
		mov	esi, esp
		push	eax		; void *
		call	dword ptr ds:__imp_??_VUMemory@icu_56@@SAXPAX@Z	; icu_56::UMemory::operator delete[](void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_E8F:				; CODE XREF: icu_56::NumberingSystem::`vector deleting destructor'(uint)+48j
		mov	eax, [ebp+var_8]
		sub	eax, 4
		jmp	short loc_EC0
; ---------------------------------------------------------------------------

loc_E97:				; CODE XREF: icu_56::NumberingSystem::`vector deleting destructor'(uint)+29j
		mov	ecx, [ebp+var_8] ; this
		call	??1NumberingSystem@icu_56@@UAE@XZ ; icu_56::NumberingSystem::~NumberingSystem(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_EBD
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_EBD:				; CODE XREF: icu_56::NumberingSystem::`vector deleting destructor'(uint)+79j
		mov	eax, [ebp+var_8]

loc_EC0:				; CODE XREF: icu_56::NumberingSystem::`vector deleting destructor'(uint)+69j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_ENumberingSystem@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0ED8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	icu_56::NumberingSystem::getStaticClassID()
		public ?getStaticClassID@NumberingSystem@icu_56@@SAPAXXZ
?getStaticClassID@NumberingSystem@icu_56@@SAPAXXZ proc near
					; CODE XREF: icu_56::NumberingSystem::getDynamicClassID(void)+23p

var_C0		= byte ptr -0C0h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, offset ?classID@?1??getStaticClassID@NumberingSystem@icu_56@@SAPAXXZ@4DA ;	char `icu_56::NumberingSystem::getStaticClassID(void)'::`2'::classID
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getStaticClassID@NumberingSystem@icu_56@@SAPAXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0F04h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__thiscall icu_56::NumberingSystem::getDynamicClassID(icu_56::NumberingSystem *__hidden	this)
		public ?getDynamicClassID@NumberingSystem@icu_56@@UBEPAXXZ
?getDynamicClassID@NumberingSystem@icu_56@@UBEPAXXZ proc near ;	DATA XREF: .rdata:00001188o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		call	?getStaticClassID@NumberingSystem@icu_56@@SAPAXXZ ; icu_56::NumberingSystem::getStaticClassID(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?getDynamicClassID@NumberingSystem@icu_56@@UBEPAXXZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0F40h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	icu_56::NumsysNameEnumeration::getStaticClassID()
		public ?getStaticClassID@NumsysNameEnumeration@icu_56@@SAPAXXZ
?getStaticClassID@NumsysNameEnumeration@icu_56@@SAPAXXZ	proc near
					; CODE XREF: icu_56::NumsysNameEnumeration::getDynamicClassID(void)+23p

var_C0		= byte ptr -0C0h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, offset ?classID@?1??getStaticClassID@NumsysNameEnumeration@icu_56@@SAPAXXZ@4DA ; char `icu_56::NumsysNameEnumeration::getStaticClassID(void)'::`2'::classID
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getStaticClassID@NumsysNameEnumeration@icu_56@@SAPAXXZ	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0F6Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__thiscall icu_56::NumsysNameEnumeration::getDynamicClassID(icu_56::NumsysNameEnumeration *__hidden this)
		public ?getDynamicClassID@NumsysNameEnumeration@icu_56@@UBEPAXXZ
?getDynamicClassID@NumsysNameEnumeration@icu_56@@UBEPAXXZ proc near
					; DATA XREF: .rdata:00002948o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		call	?getStaticClassID@NumsysNameEnumeration@icu_56@@SAPAXXZ	; icu_56::NumsysNameEnumeration::getStaticClassID(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?getDynamicClassID@NumsysNameEnumeration@icu_56@@UBEPAXXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0FA8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::NumberingSystem::NumberingSystem(icu_56::NumberingSystem *__hidden this)
		public ??0NumberingSystem@icu_56@@QAE@XZ
??0NumberingSystem@icu_56@@QAE@XZ proc near
					; CODE XREF: icu_56::NumberingSystem::createInstance(int,signed	char,icu_56::UnicodeString const &,UErrorCode &)+D5p
					; icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+2F9p

var_124		= byte ptr -124h
var_60		= byte ptr -60h
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0NumberingSystem@icu_56@@QAE@XZ
		mov	eax, large fs:0
		push	eax
		sub	esp, 118h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_124]
		mov	ecx, 46h ; 'F'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_18], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_18] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@XZ ; icu_56::UObject::UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_FFF:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::scientifico
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_18]
		mov	dword ptr [eax], offset	??_7NumberingSystem@icu_56@@6B@	; const	icu_56::NumberingSystem::`vftable'
		mov	ecx, [ebp+var_18]
		add	ecx, 4		; this
		mov	esi, esp
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@XZ ; icu_56::UnicodeString::UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	byte ptr [ebp+var_4], 1
		mov	eax, [ebp+var_18]
		mov	dword ptr [eax+44h], 0Ah
		mov	eax, [ebp+var_18]
		mov	byte ptr [eax+48h], 0
		mov	esi, esp
		push	0FFFFFFFFh	; int
		push	offset ??_C@_1BG@PGBNDIAE@?$AA0?$AA1?$AA2?$AA3?$AA4?$AA5?$AA6?$AA7?$AA8?$AA9?$AA?$AA@ ;	"0123456789"
		push	1		; signed __int8
		lea	ecx, [ebp+var_60] ; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@CPB_WH@Z ; icu_56::UnicodeString::UnicodeString(signed char,wchar_t const *,int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	byte ptr [ebp+var_4], 2
		mov	esi, esp
		lea	eax, [ebp+var_60]
		push	eax		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_18]
		add	ecx, 4		; this
		call	dword ptr ds:__imp_?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z ; icu_56::UnicodeString::setTo(icu_56::UnicodeString const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	offset _gLatn	; "latn"
		mov	eax, [ebp+var_18]
		add	eax, 49h ; 'I'
		push	eax		; Dest
		call	_strcpy
		add	esp, 8
		mov	byte ptr [ebp+var_4], 1
		mov	esi, esp
		lea	ecx, [ebp+var_60] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_18]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN9
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 124h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0NumberingSystem@icu_56@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
$LN9		dd 1			; DATA XREF: icu_56::NumberingSystem::NumberingSystem(void)+101o
		dd offset $LN8
$LN8		dd 0FFFFFFA0h, 40h	; DATA XREF: .text:000010E4o
		dd offset $LN6		; "defaultDigits"
$LN6		db 'defaultDigits',0    ; DATA XREF: .text:000010F0o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 1104h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0NumberingSystem@icu_56@@QAE@XZ$0 proc near
					; DATA XREF: .xdata$x:00001194o
		mov	esi, esp
		mov	ecx, [ebp-18h]	; this
		call	dword ptr ds:__imp_??1UObject@icu_56@@UAE@XZ ; icu_56::UObject::~UObject(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0NumberingSystem@icu_56@@QAE@XZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0NumberingSystem@icu_56@@QAE@XZ$1 proc near
					; DATA XREF: .xdata$x:0000119Co
		mov	ecx, [ebp-18h]
		add	ecx, 4		; this
		mov	esi, esp
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0NumberingSystem@icu_56@@QAE@XZ$1 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0NumberingSystem@icu_56@@QAE@XZ$2 proc near
					; DATA XREF: .xdata$x:000011A4o
		mov	esi, esp
		lea	ecx, [ebp-60h]	; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0NumberingSystem@icu_56@@QAE@XZ$2 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0NumberingSystem@icu_56@@QAE@XZ proc near
					; DATA XREF: icu_56::NumberingSystem::NumberingSystem(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-128h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0NumberingSystem@icu_56@@QAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??0NumberingSystem@icu_56@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1168h
		public ??_C@_1BG@PGBNDIAE@?$AA0?$AA1?$AA2?$AA3?$AA4?$AA5?$AA6?$AA7?$AA8?$AA9?$AA?$AA@
; wchar_t `string'
??_C@_1BG@PGBNDIAE@?$AA0?$AA1?$AA2?$AA3?$AA4?$AA5?$AA6?$AA7?$AA8?$AA9?$AA?$AA@:
					; DATA XREF: icu_56::NumberingSystem::NumberingSystem(void)+95o
		unicode	0, <0123456789>,0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1180h
		dd offset ??_R4NumberingSystem@icu_56@@6B@ ; const icu_56::NumberingSystem::`RTTI Complete Object Locator'
;
; Exported entry
;
		public ??_7NumberingSystem@icu_56@@6B@
; const	icu_56::NumberingSystem::`vftable'
??_7NumberingSystem@icu_56@@6B@	dd offset ??_ENumberingSystem@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::NumberingSystem::NumberingSystem(void)+61o
					; icu_56::NumberingSystem::NumberingSystem(icu_56::NumberingSystem const &)+62o ...
					; icu_56::NumberingSystem::`vector deleting destructor'(uint)
		dd offset ?getDynamicClassID@NumberingSystem@icu_56@@UBEPAXXZ ;	icu_56::NumberingSystem::getDynamicClassID(void)
		dd offset ?getDescription@NumberingSystem@icu_56@@UBE?AVUnicodeString@2@XZ ; icu_56::NumberingSystem::getDescription(void)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 1190h
__unwindtable$??0NumberingSystem@icu_56@@QAE@XZ	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:000011B0o
		dd offset __unwindfunclet$??0NumberingSystem@icu_56@@QAE@XZ$0
		dd 0
		dd offset __unwindfunclet$??0NumberingSystem@icu_56@@QAE@XZ$1
		dd 1
		dd offset __unwindfunclet$??0NumberingSystem@icu_56@@QAE@XZ$2
__ehfuncinfo$??0NumberingSystem@icu_56@@QAE@XZ dd 19930522h, 3
					; DATA XREF: __ehhandler$??0NumberingSystem@icu_56@@QAE@XZ+1Eo
		dd offset __unwindtable$??0NumberingSystem@icu_56@@QAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 11CCh
		public ??_R4NumberingSystem@icu_56@@6B@
; const	icu_56::NumberingSystem::`RTTI Complete	Object Locator'
??_R4NumberingSystem@icu_56@@6B@ dd 3 dup(0) ; DATA XREF: .rdata:00001180o
		dd offset ??_R0?AVNumberingSystem@icu_56@@@8 ; icu_56::NumberingSystem `RTTI Type Descriptor'
		dd offset ??_R3NumberingSystem@icu_56@@8 ; icu_56::NumberingSystem::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 11E0h
		public ??_R0?AVNumberingSystem@icu_56@@@8
; class	icu_56::NumberingSystem	`RTTI Type Descriptor'
??_R0?AVNumberingSystem@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:000011D8o
					; .rdata$r:icu_56::NumberingSystem::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?avnumberings	db '.?AVNumberingSystem@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1208h
		public ??_R3NumberingSystem@icu_56@@8
; icu_56::NumberingSystem::`RTTI Class Hierarchy Descriptor'
??_R3NumberingSystem@icu_56@@8 dd 2 dup(0) ; DATA XREF:	.rdata$r:000011DCo
					; .rdata$r:00001240o
		dd 3
		dd offset ??_R2NumberingSystem@icu_56@@8 ; icu_56::NumberingSystem::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1218h
		public ??_R2NumberingSystem@icu_56@@8
; icu_56::NumberingSystem::`RTTI Base Class Array'
??_R2NumberingSystem@icu_56@@8 dd offset ??_R1A@?0A@EA@NumberingSystem@icu_56@@8
					; DATA XREF: .rdata$r:00001214o
					; icu_56::NumberingSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1228h
		public ??_R1A@?0A@EA@NumberingSystem@icu_56@@8
; icu_56::NumberingSystem::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@NumberingSystem@icu_56@@8	dd offset ??_R0?AVNumberingSystem@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::NumberingSystem::`RTTI Base Class	Array'o
					; icu_56::NumberingSystem `RTTI	Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3NumberingSystem@icu_56@@8 ; icu_56::NumberingSystem::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1244h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::NumberingSystem::NumberingSystem(icu_56::NumberingSystem *this, const struct icu_56::NumberingSystem *)
		public ??0NumberingSystem@icu_56@@QAE@ABV01@@Z
??0NumberingSystem@icu_56@@QAE@ABV01@@Z	proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0NumberingSystem@icu_56@@QAE@ABV01@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax		; struct icu_56::UObject *
		mov	ecx, [ebp+var_14] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@ABV01@@Z ; icu_56::UObject::UObject(icu_56::UObject const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7NumberingSystem@icu_56@@6B@	; const	icu_56::NumberingSystem::`vftable'
		mov	ecx, [ebp+var_14]
		add	ecx, 4		; this
		mov	esi, esp
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@XZ ; icu_56::UnicodeString::UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	byte ptr [ebp+var_4], 1
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_14]
		call	??4NumberingSystem@icu_56@@QAEAAV01@ABV01@@Z ; icu_56::NumberingSystem::operator=(icu_56::NumberingSystem const	&)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0NumberingSystem@icu_56@@QAE@ABV01@@Z	endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 12FCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0NumberingSystem@icu_56@@QAE@ABV01@@Z$0 proc near
					; DATA XREF: .xdata$x:00001348o
		mov	esi, esp
		mov	ecx, [ebp-14h]	; this
		call	dword ptr ds:__imp_??1UObject@icu_56@@UAE@XZ ; icu_56::UObject::~UObject(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0NumberingSystem@icu_56@@QAE@ABV01@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0NumberingSystem@icu_56@@QAE@ABV01@@Z$1 proc near
					; DATA XREF: .xdata$x:00001350o
		mov	ecx, [ebp-14h]
		add	ecx, 4		; this
		mov	esi, esp
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0NumberingSystem@icu_56@@QAE@ABV01@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0NumberingSystem@icu_56@@QAE@ABV01@@Z proc near
					; DATA XREF: icu_56::NumberingSystem::NumberingSystem(icu_56::NumberingSystem const &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0DCh]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0NumberingSystem@icu_56@@QAE@ABV01@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0NumberingSystem@icu_56@@QAE@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 1344h
__unwindtable$??0NumberingSystem@icu_56@@QAE@ABV01@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:0000135Co
		dd offset __unwindfunclet$??0NumberingSystem@icu_56@@QAE@ABV01@@Z$0
		align 10h
		dd offset __unwindfunclet$??0NumberingSystem@icu_56@@QAE@ABV01@@Z$1
__ehfuncinfo$??0NumberingSystem@icu_56@@QAE@ABV01@@Z dd	19930522h, 2
					; DATA XREF: __ehhandler$??0NumberingSystem@icu_56@@QAE@ABV01@@Z+14o
		dd offset __unwindtable$??0NumberingSystem@icu_56@@QAE@ABV01@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1378h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::NumberingSystem *__cdecl icu_56::NumberingSystem::createInstance(int, char, const struct icu_56::UnicodeString	*, enum	UErrorCode *)
		public ?createInstance@NumberingSystem@icu_56@@SAPAV12@HCABVUnicodeString@2@AAW4UErrorCode@@@Z
?createInstance@NumberingSystem@icu_56@@SAPAV12@HCABVUnicodeString@2@AAW4UErrorCode@@@Z	proc near
					; CODE XREF: icu_56::NumberingSystem::createInstanceByName(char	const *,UErrorCode &)+1ADp

var_100		= dword	ptr -100h
var_F8		= dword	ptr -0F8h
var_EC		= dword	ptr -0ECh
var_E0		= dword	ptr -0E0h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?createInstance@NumberingSystem@icu_56@@SAPAV12@HCABVUnicodeString@2@AAW4UErrorCode@@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0F4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_100]
		mov	ecx, 3Dh ; '='
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_13D1
		xor	eax, eax
		jmp	loc_14D2
; ---------------------------------------------------------------------------

loc_13D1:				; CODE XREF: icu_56::NumberingSystem::createInstance(int,signed	char,icu_56::UnicodeString const &,UErrorCode &)+50j
		cmp	[ebp+arg_0], 2
		jge	short loc_13E7
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 1
		xor	eax, eax
		jmp	loc_14D2
; ---------------------------------------------------------------------------

loc_13E7:				; CODE XREF: icu_56::NumberingSystem::createInstance(int,signed	char,icu_56::UnicodeString const &,UErrorCode &)+5Dj
		movsx	eax, [ebp+arg_4]
		test	eax, eax
		jnz	short loc_141D
		mov	esi, esp
		push	7FFFFFFFh	; int
		push	0		; int
		mov	ecx, [ebp+arg_8] ; this
		call	dword ptr ds:__imp_?countChar32@UnicodeString@icu_56@@QBEHHH@Z ; icu_56::UnicodeString::countChar32(int,int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	eax, [ebp+arg_0]
		jz	short loc_141D
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 1
		xor	eax, eax
		jmp	loc_14D2
; ---------------------------------------------------------------------------

loc_141D:				; CODE XREF: icu_56::NumberingSystem::createInstance(int,signed	char,icu_56::UnicodeString const &,UErrorCode &)+75j
					; icu_56::NumberingSystem::createInstance(int,signed char,icu_56::UnicodeString	const &,UErrorCode &)+93j
		mov	esi, esp
		push	54h ; 'T'       ; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_EC], eax
		mov	[ebp+var_4], 0
		cmp	[ebp+var_EC], 0
		jz	short loc_145A
		mov	ecx, [ebp+var_EC] ; this
		call	??0NumberingSystem@icu_56@@QAE@XZ ; icu_56::NumberingSystem::NumberingSystem(void)
		mov	[ebp+var_100], eax
		jmp	short loc_1464
; ---------------------------------------------------------------------------

loc_145A:				; CODE XREF: icu_56::NumberingSystem::createInstance(int,signed	char,icu_56::UnicodeString const &,UErrorCode &)+CDj
		mov	[ebp+var_100], 0

loc_1464:				; CODE XREF: icu_56::NumberingSystem::createInstance(int,signed	char,icu_56::UnicodeString const &,UErrorCode &)+E0j
		mov	eax, [ebp+var_100]
		mov	[ebp+var_F8], eax
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, [ebp+var_F8]
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; int
		mov	ecx, [ebp+var_14] ; this
		call	?setRadix@NumberingSystem@icu_56@@AAEXH@Z ; icu_56::NumberingSystem::setRadix(int)
		sub	esp, 40h
		mov	ecx, esp	; this
		mov	[ebp+var_E0], esp
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax		; struct icu_56::UnicodeString *
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@ABV01@@Z ; icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_100], eax
		mov	ecx, [ebp+var_14]
		call	?setDesc@NumberingSystem@icu_56@@AAEXVUnicodeString@2@@Z ; icu_56::NumberingSystem::setDesc(icu_56::UnicodeString)
		movzx	eax, [ebp+arg_4]
		push	eax		; signed __int8
		mov	ecx, [ebp+var_14] ; this
		call	?setAlgorithmic@NumberingSystem@icu_56@@AAEXC@Z	; icu_56::NumberingSystem::setAlgorithmic(signed char)
		push	0		; char *
		mov	ecx, [ebp+var_14] ; this
		call	?setName@NumberingSystem@icu_56@@AAEXPBD@Z ; icu_56::NumberingSystem::setName(char const *)
		mov	eax, [ebp+var_14]

loc_14D2:				; CODE XREF: icu_56::NumberingSystem::createInstance(int,signed	char,icu_56::UnicodeString const &,UErrorCode &)+54j
					; icu_56::NumberingSystem::createInstance(int,signed char,icu_56::UnicodeString	const &,UErrorCode &)+6Aj ...
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 100h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createInstance@NumberingSystem@icu_56@@SAPAV12@HCABVUnicodeString@2@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 14F4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?createInstance@NumberingSystem@icu_56@@SAPAV12@HCABVUnicodeString@2@AAW4UErrorCode@@@Z$0 proc near
					; DATA XREF: .xdata$x:00001530o
		mov	esi, esp
		mov	eax, [ebp-0ECh]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?createInstance@NumberingSystem@icu_56@@SAPAV12@HCABVUnicodeString@2@AAW4UErrorCode@@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?createInstance@NumberingSystem@icu_56@@SAPAV12@HCABVUnicodeString@2@AAW4UErrorCode@@@Z proc near
					; DATA XREF: icu_56::NumberingSystem::createInstance(int,signed	char,icu_56::UnicodeString const &,UErrorCode &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-104h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?createInstance@NumberingSystem@icu_56@@SAPAV12@HCABVUnicodeString@2@AAW4UErrorCode@@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?createInstance@NumberingSystem@icu_56@@SAPAV12@HCABVUnicodeString@2@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 152Ch
__unwindtable$?createInstance@NumberingSystem@icu_56@@SAPAV12@HCABVUnicodeString@2@AAW4UErrorCode@@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:0000153Co
		dd offset __unwindfunclet$?createInstance@NumberingSystem@icu_56@@SAPAV12@HCABVUnicodeString@2@AAW4UErrorCode@@@Z$0
__ehfuncinfo$?createInstance@NumberingSystem@icu_56@@SAPAV12@HCABVUnicodeString@2@AAW4UErrorCode@@@Z dd	19930522h, 1
					; DATA XREF: __ehhandler$?createInstance@NumberingSystem@icu_56@@SAPAV12@HCABVUnicodeString@2@AAW4UErrorCode@@@Z+14o
		dd offset __unwindtable$?createInstance@NumberingSystem@icu_56@@SAPAV12@HCABVUnicodeString@2@AAW4UErrorCode@@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1558h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl U_FAILURE(enum  UErrorCode)
?U_FAILURE@@YACW4UErrorCode@@@Z	proc near
					; CODE XREF: icu_56::NumberingSystem::createInstance(int,signed	char,icu_56::UnicodeString const &,UErrorCode &)+43p
					; icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+46p ...

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		setnle	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?U_FAILURE@@YACW4UErrorCode@@@Z	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1584h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::NumberingSystem *__cdecl icu_56::NumberingSystem::createInstance(const	struct icu_56::Locale *, enum UErrorCode *)
		public ?createInstance@NumberingSystem@icu_56@@SAPAV12@ABVLocale@2@AAW4UErrorCode@@@Z
?createInstance@NumberingSystem@icu_56@@SAPAV12@ABVLocale@2@AAW4UErrorCode@@@Z proc near
					; CODE XREF: icu_56::NumberingSystem::createInstance(UErrorCode	&)+32p

var_1B4		= dword	ptr -1B4h
var_1AC		= dword	ptr -1ACh
var_1A0		= dword	ptr -1A0h
var_D4		= dword	ptr -0D4h
var_C8		= dword	ptr -0C8h
var_BC		= dword	ptr -0BCh
var_B0		= dword	ptr -0B0h
var_A4		= dword	ptr -0A4h
var_98		= dword	ptr -98h
Str1		= byte ptr -8Ch
var_21		= byte ptr -21h
var_15		= byte ptr -15h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?createInstance@NumberingSystem@icu_56@@SAPAV12@ABVLocale@2@AAW4UErrorCode@@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 1A8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_1B4]
		mov	ecx, 6Ah ; 'j'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_15E0
		xor	eax, eax
		jmp	loc_18D0
; ---------------------------------------------------------------------------

loc_15E0:				; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+53j
		mov	[ebp+var_15], 1
		mov	[ebp+var_21], 0
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax		; enum UErrorCode *
		push	60h ; '`'       ; int
		lea	ecx, [ebp+Str1]
		push	ecx		; char *
		push	offset ??_C@_07OJOLMEAA@numbers?$AA@ ; "numbers"
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?getKeywordValue@Locale@icu_56@@QBEHPBDPADHAAW4UErrorCode@@@Z ; icu_56::Locale::getKeywordValue(char	const *,char *,int,UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_98], eax
		cmp	[ebp+var_98], 0
		jle	short loc_168F
		mov	eax, [ebp+var_98]
		mov	[ebp+eax+Str1],	0
		push	offset _gDefault ; "default"
		lea	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jz	short loc_1689
		push	offset _gNative	; "native"
		lea	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jz	short loc_1689
		push	offset _gTraditional ; "traditional"
		lea	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jz	short loc_1689
		push	offset _gFinance ; "finance"
		lea	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_168D

loc_1689:				; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+BBj
					; icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+D3j ...
		mov	[ebp+var_15], 0

loc_168D:				; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+103j
		jmp	short loc_16A7
; ---------------------------------------------------------------------------

loc_168F:				; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+95j
		push	offset _gDefault ; "default"
		lea	eax, [ebp+Str1]
		push	eax		; Dest
		call	_strcpy
		add	esp, 8
		mov	[ebp+var_15], 0

loc_16A7:				; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &):loc_168Dj
		movsx	eax, [ebp+var_15]
		test	eax, eax
		jnz	loc_183C
		mov	[ebp+var_A4], 0
		lea	eax, [ebp+var_A4]
		push	eax
		mov	esi, esp
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?getName@Locale@icu_56@@QBEPBDXZ ; icu_56::Locale::getName(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax
		push	0
		call	_ures_open_56
		add	esp, 0Ch
		mov	[ebp+var_B0], eax
		lea	eax, [ebp+var_A4]
		push	eax
		push	0
		push	offset _gNumberElements	; "NumberElements"
		mov	ecx, [ebp+var_B0]
		push	ecx
		call	_ures_getByKey_56
		add	esp, 10h
		mov	[ebp+var_BC], eax

loc_170A:				; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &):loc_1819j
		movsx	eax, [ebp+var_15]
		test	eax, eax
		jnz	loc_181E
		mov	[ebp+var_A4], 0
		mov	[ebp+var_98], 0
		lea	eax, [ebp+var_A4]
		push	eax
		lea	ecx, [ebp+var_98]
		push	ecx
		lea	edx, [ebp+Str1]
		push	edx
		mov	eax, [ebp+var_BC]
		push	eax
		call	_ures_getStringByKeyWithFallback_56
		add	esp, 10h
		mov	[ebp+var_C8], eax
		cmp	[ebp+var_98], 0
		jle	short loc_1795
		cmp	[ebp+var_98], 60h ; '`'
		jge	short loc_1795
		mov	eax, [ebp+var_98]
		push	eax
		lea	ecx, [ebp+Str1]
		push	ecx
		mov	edx, [ebp+var_C8]
		push	edx
		call	_u_UCharsToChars_56
		add	esp, 0Ch
		mov	eax, [ebp+var_98]
		mov	[ebp+eax+Str1],	0
		mov	[ebp+var_15], 1

loc_1795:				; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+1D7j
					; icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+1E0j
		movsx	eax, [ebp+var_15]
		test	eax, eax
		jnz	short loc_1819
		push	offset _gNative	; "native"
		lea	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jz	short loc_17CD
		push	offset _gFinance ; "finance"
		lea	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_17E3

loc_17CD:				; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+22Fj
		push	offset _gDefault ; "default"
		lea	eax, [ebp+Str1]
		push	eax		; Dest
		call	_strcpy
		add	esp, 8
		jmp	short loc_1819
; ---------------------------------------------------------------------------

loc_17E3:				; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+247j
		push	offset _gTraditional ; "traditional"
		lea	eax, [ebp+Str1]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_1811
		push	offset _gNative	; "native"
		lea	eax, [ebp+Str1]
		push	eax		; Dest
		call	_strcpy
		add	esp, 8
		jmp	short loc_1819
; ---------------------------------------------------------------------------

loc_1811:				; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+275j
		mov	[ebp+var_21], 1
		mov	[ebp+var_15], 1

loc_1819:				; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+217j
					; icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+25Dj ...
		jmp	loc_170A
; ---------------------------------------------------------------------------

loc_181E:				; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+18Cj
		mov	eax, [ebp+var_BC]
		push	eax
		call	_ures_close_56
		add	esp, 4
		mov	eax, [ebp+var_B0]
		push	eax
		call	_ures_close_56
		add	esp, 4

loc_183C:				; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+129j
		movsx	eax, [ebp+var_21]
		test	eax, eax
		jz	short loc_18BD
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0FFFFFF80h
		mov	esi, esp
		push	54h ; 'T'       ; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_1A0], eax
		mov	[ebp+var_4], 0
		cmp	[ebp+var_1A0], 0
		jz	short loc_188A
		mov	ecx, [ebp+var_1A0] ; this
		call	??0NumberingSystem@icu_56@@QAE@XZ ; icu_56::NumberingSystem::NumberingSystem(void)
		mov	[ebp+var_1B4], eax
		jmp	short loc_1894
; ---------------------------------------------------------------------------

loc_188A:				; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+2F1j
		mov	[ebp+var_1B4], 0

loc_1894:				; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+304j
		mov	eax, [ebp+var_1B4]
		mov	[ebp+var_1AC], eax
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, [ebp+var_1AC]
		mov	[ebp+var_D4], ecx
		mov	eax, [ebp+var_D4]
		jmp	short loc_18D0
; ---------------------------------------------------------------------------
		jmp	short loc_18D0
; ---------------------------------------------------------------------------

loc_18BD:				; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+2BEj
		mov	eax, [ebp+arg_4]
		push	eax		; enum UErrorCode *
		lea	ecx, [ebp+Str1]
		push	ecx		; char *
		call	?createInstanceByName@NumberingSystem@icu_56@@SAPAV12@PBDAAW4UErrorCode@@@Z ; icu_56::NumberingSystem::createInstanceByName(char const *,UErrorCode &)
		add	esp, 8

loc_18D0:				; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+57j
					; icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+335j ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN28
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1B4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createInstance@NumberingSystem@icu_56@@SAPAV12@ABVLocale@2@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN28		dd 3			; DATA XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+350o
		dd offset $LN27
$LN27		dd 0FFFFFF74h, 60h	; DATA XREF: .text:00001910o
		dd offset $LN23		; "buffer"
		dd 0FFFFFF68h, 4
		dd offset $LN24		; "count"
		dd 0FFFFFF5Ch, 4
		dd offset $LN25		; "localStatus"
$LN25		db 'localStatus',0      ; DATA XREF: .text:00001934o
$LN24		db 'count',0            ; DATA XREF: .text:00001928o
$LN23		db 'buffer',0           ; DATA XREF: .text:0000191Co
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 1954h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?createInstance@NumberingSystem@icu_56@@SAPAV12@ABVLocale@2@AAW4UErrorCode@@@Z$0 proc near
					; DATA XREF: .xdata$x:000019A4o
		mov	esi, esp
		mov	eax, [ebp-1A0h]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?createInstance@NumberingSystem@icu_56@@SAPAV12@ABVLocale@2@AAW4UErrorCode@@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?createInstance@NumberingSystem@icu_56@@SAPAV12@ABVLocale@2@AAW4UErrorCode@@@Z proc	near
					; DATA XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-1B8h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?createInstance@NumberingSystem@icu_56@@SAPAV12@ABVLocale@2@AAW4UErrorCode@@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?createInstance@NumberingSystem@icu_56@@SAPAV12@ABVLocale@2@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1998h
		public ??_C@_07OJOLMEAA@numbers?$AA@
; char `string'[]
??_C@_07OJOLMEAA@numbers?$AA@ db 'numbers',0
					; DATA XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+73o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 19A0h
__unwindtable$?createInstance@NumberingSystem@icu_56@@SAPAV12@ABVLocale@2@AAW4UErrorCode@@@Z dd	0FFFFFFFFh
					; DATA XREF: .xdata$x:000019B0o
		dd offset __unwindfunclet$?createInstance@NumberingSystem@icu_56@@SAPAV12@ABVLocale@2@AAW4UErrorCode@@@Z$0
__ehfuncinfo$?createInstance@NumberingSystem@icu_56@@SAPAV12@ABVLocale@2@AAW4UErrorCode@@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$?createInstance@NumberingSystem@icu_56@@SAPAV12@ABVLocale@2@AAW4UErrorCode@@@Z+1Eo
		dd offset __unwindtable$?createInstance@NumberingSystem@icu_56@@SAPAV12@ABVLocale@2@AAW4UErrorCode@@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 19CCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::NumberingSystem *__cdecl icu_56::NumberingSystem::createInstance(enum UErrorCode *)
		public ?createInstance@NumberingSystem@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createInstance@NumberingSystem@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		mov	esi, esp
		call	dword ptr ds:__imp_?getDefault@Locale@icu_56@@SAABV12@XZ ; icu_56::Locale::getDefault(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax		; struct icu_56::Locale	*
		call	?createInstance@NumberingSystem@icu_56@@SAPAV12@ABVLocale@2@AAW4UErrorCode@@@Z ; icu_56::NumberingSystem::createInstance(icu_56::Locale	const &,UErrorCode &)
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createInstance@NumberingSystem@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1A1Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::NumberingSystem *__cdecl icu_56::NumberingSystem::createInstanceByName(const char *, enum UErrorCode *)
		public ?createInstanceByName@NumberingSystem@icu_56@@SAPAV12@PBDAAW4UErrorCode@@@Z
?createInstanceByName@NumberingSystem@icu_56@@SAPAV12@PBDAAW4UErrorCode@@@Z proc near
					; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+344p

var_184		= byte ptr -184h
var_180		= dword	ptr -180h
var_174		= dword	ptr -174h
var_A8		= dword	ptr -0A8h
var_99		= byte ptr -99h
var_90		= byte ptr -90h
var_48		= dword	ptr -48h
var_3C		= dword	ptr -3Ch
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?createInstanceByName@NumberingSystem@icu_56@@SAPAV12@PBDAAW4UErrorCode@@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 178h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_184]
		mov	ecx, 5Eh ; '^'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_18], 0
		mov	[ebp+var_3C], 0Ah
		mov	[ebp+var_48], 0
		mov	eax, [ebp+arg_4]
		push	eax
		push	offset _gNumberingSystems ; "numberingSystems"
		push	0
		call	_ures_openDirect_56
		add	esp, 0Ch
		mov	[ebp+var_18], eax
		mov	eax, [ebp+arg_4]
		push	eax
		push	0
		push	offset _gNumberingSystems ; "numberingSystems"
		mov	ecx, [ebp+var_18]
		push	ecx
		call	_ures_getByKey_56
		add	esp, 10h
		mov	[ebp+var_30], eax
		mov	eax, [ebp+arg_4]
		push	eax
		push	0
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_30]
		push	edx
		call	_ures_getByKey_56
		add	esp, 10h
		mov	[ebp+var_24], eax
		mov	eax, [ebp+arg_4]
		push	eax
		push	offset _gDesc	; "desc"
		mov	ecx, [ebp+var_24]
		push	ecx
		lea	edx, [ebp+var_90]
		push	edx
		call	?ures_getUnicodeStringByKey@icu_56@@YA?AVUnicodeString@1@PBUUResourceBundle@@PBDPAW4UErrorCode@@@Z ; icu_56::ures_getUnicodeStringByKey(UResourceBundle	const *,char const *,UErrorCode	*)
		add	esp, 10h
		mov	[ebp+var_4], 0
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_30]
		push	ecx
		push	offset _gRadix	; "radix"
		mov	edx, [ebp+var_24]
		push	edx
		call	_ures_getByKey_56
		add	esp, 10h
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_30]
		push	ecx
		call	_ures_getInt_56
		add	esp, 8
		mov	[ebp+var_3C], eax
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_30]
		push	ecx
		push	offset _gAlgorithmic ; "algorithmic"
		mov	edx, [ebp+var_24]
		push	edx
		call	_ures_getByKey_56
		add	esp, 10h
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_30]
		push	ecx
		call	_ures_getInt_56
		add	esp, 8
		mov	[ebp+var_48], eax
		cmp	[ebp+var_48], 1
		setz	al
		mov	[ebp+var_99], al
		mov	eax, [ebp+var_30]
		push	eax
		call	_ures_close_56
		add	esp, 4
		mov	eax, [ebp+var_24]
		push	eax
		call	_ures_close_56
		add	esp, 4
		mov	eax, [ebp+var_18]
		push	eax
		call	_ures_close_56
		add	esp, 4
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_1BB2
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 10h
		mov	[ebp+var_180], 0
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		lea	ecx, [ebp+var_90] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_180]
		jmp	short loc_1C14
; ---------------------------------------------------------------------------

loc_1BB2:				; CODE XREF: icu_56::NumberingSystem::createInstanceByName(char	const *,UErrorCode &)+15Dj
		mov	eax, [ebp+arg_4]
		push	eax		; enum UErrorCode *
		lea	ecx, [ebp+var_90]
		push	ecx		; struct icu_56::UnicodeString *
		movzx	edx, [ebp+var_99]
		push	edx		; char
		mov	eax, [ebp+var_3C]
		push	eax		; int
		call	?createInstance@NumberingSystem@icu_56@@SAPAV12@HCABVUnicodeString@2@AAW4UErrorCode@@@Z	; icu_56::NumberingSystem::createInstance(int,signed char,icu_56::UnicodeString	const &,UErrorCode &)
		add	esp, 10h
		mov	[ebp+var_A8], eax
		mov	eax, [ebp+arg_0]
		push	eax		; char *
		mov	ecx, [ebp+var_A8] ; this
		call	?setName@NumberingSystem@icu_56@@AAEXPBD@Z ; icu_56::NumberingSystem::setName(char const *)
		mov	eax, [ebp+var_A8]
		mov	[ebp+var_174], eax
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		lea	ecx, [ebp+var_90] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_174]

loc_1C14:				; CODE XREF: icu_56::NumberingSystem::createInstanceByName(char	const *,UErrorCode &)+194j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN8_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 184h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createInstanceByName@NumberingSystem@icu_56@@SAPAV12@PBDAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
$LN8_0		dd 1			; DATA XREF: icu_56::NumberingSystem::createInstanceByName(char	const *,UErrorCode &)+1FCo
		dd offset $LN7
$LN7		dd 0FFFFFF70h, 40h	; DATA XREF: .text:00001C54o
		dd offset $LN5
$LN5		dd 64736Eh		; DATA XREF: .text:00001C60o
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 1C68h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?createInstanceByName@NumberingSystem@icu_56@@SAPAV12@PBDAAW4UErrorCode@@@Z$0 proc near
					; DATA XREF: .xdata$x:00001CACo
		mov	esi, esp
		lea	ecx, [ebp-90h]	; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?createInstanceByName@NumberingSystem@icu_56@@SAPAV12@PBDAAW4UErrorCode@@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?createInstanceByName@NumberingSystem@icu_56@@SAPAV12@PBDAAW4UErrorCode@@@Z	proc near
					; DATA XREF: icu_56::NumberingSystem::createInstanceByName(char	const *,UErrorCode &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-188h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?createInstanceByName@NumberingSystem@icu_56@@SAPAV12@PBDAAW4UErrorCode@@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?createInstanceByName@NumberingSystem@icu_56@@SAPAV12@PBDAAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 1CA8h
__unwindtable$?createInstanceByName@NumberingSystem@icu_56@@SAPAV12@PBDAAW4UErrorCode@@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00001CB8o
		dd offset __unwindfunclet$?createInstanceByName@NumberingSystem@icu_56@@SAPAV12@PBDAAW4UErrorCode@@@Z$0
__ehfuncinfo$?createInstanceByName@NumberingSystem@icu_56@@SAPAV12@PBDAAW4UErrorCode@@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$?createInstanceByName@NumberingSystem@icu_56@@SAPAV12@PBDAAW4UErrorCode@@@Z+1Eo
		dd offset __unwindtable$?createInstanceByName@NumberingSystem@icu_56@@SAPAV12@PBDAAW4UErrorCode@@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1CD4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; class	icu_56::UnicodeString __cdecl icu_56::ures_getUnicodeStringByKey(struct	UResourceBundle	const *, char const *, enum  UErrorCode	*)
		public ?ures_getUnicodeStringByKey@icu_56@@YA?AVUnicodeString@1@PBUUResourceBundle@@PBDPAW4UErrorCode@@@Z
?ures_getUnicodeStringByKey@icu_56@@YA?AVUnicodeString@1@PBUUResourceBundle@@PBDPAW4UErrorCode@@@Z proc	near
					; CODE XREF: icu_56::NumberingSystem::createInstanceByName(char	const *,UErrorCode &)+B2p

var_E4		= byte ptr -0E4h
var_E0		= dword	ptr -0E0h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_E0], 0
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_C]
		push	eax
		lea	ecx, [ebp+var_8]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		call	_ures_getStringByKey_56
		add	esp, 10h
		mov	[ebp+var_14], eax
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; int
		mov	ecx, [ebp+var_14]
		push	ecx		; wchar_t *
		push	1		; signed __int8
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@CPB_WH@Z ; icu_56::UnicodeString::UnicodeString(signed char,wchar_t const *,int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+var_E0]
		or	edx, 1
		mov	[ebp+var_E0], edx
		mov	eax, [ebp+arg_0]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?ures_getUnicodeStringByKey@icu_56@@YA?AVUnicodeString@1@PBUUResourceBundle@@PBDPAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN7_0		dd 1			; DATA XREF: icu_56::ures_getUnicodeStringByKey(UResourceBundle	const *,char const *,UErrorCode	*)+7Co
		dd offset $LN6_0
$LN6_0		dd 0FFFFFFF8h, 4	; DATA XREF: .text:00001D78o
		dd offset $LN5_0
$LN5_0		dd 6E656Ch		; DATA XREF: .text:00001D84o
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1D8Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::NumberingSystem::~NumberingSystem(icu_56::NumberingSystem *__hidden	this)
		public ??1NumberingSystem@icu_56@@UAE@XZ
??1NumberingSystem@icu_56@@UAE@XZ proc near
					; CODE XREF: icu_56::NumberingSystem::`scalar deleting destructor'(uint)+26p
					; icu_56::NumberingSystem::`vector deleting destructor'(uint)+6Ep
					; DATA XREF: ...

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??1NumberingSystem@icu_56@@UAE@XZ
		mov	eax, large fs:0
		push	eax
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7NumberingSystem@icu_56@@6B@	; const	icu_56::NumberingSystem::`vftable'
		mov	[ebp+var_4], 0
		mov	ecx, [ebp+var_14]
		add	ecx, 4		; this
		mov	esi, esp
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		mov	ecx, [ebp+var_14] ; this
		call	dword ptr ds:__imp_??1UObject@icu_56@@UAE@XZ ; icu_56::UObject::~UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1NumberingSystem@icu_56@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 1E2Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??1NumberingSystem@icu_56@@UAE@XZ$0 proc near
					; DATA XREF: .xdata$x:00001E60o
		mov	esi, esp
		mov	ecx, [ebp-14h]	; this
		call	dword ptr ds:__imp_??1UObject@icu_56@@UAE@XZ ; icu_56::UObject::~UObject(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??1NumberingSystem@icu_56@@UAE@XZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??1NumberingSystem@icu_56@@UAE@XZ proc near
					; DATA XREF: icu_56::NumberingSystem::~NumberingSystem(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0DCh]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??1NumberingSystem@icu_56@@UAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??1NumberingSystem@icu_56@@UAE@XZ endp

_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 1E5Ch
__unwindtable$??1NumberingSystem@icu_56@@UAE@XZ	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00001E6Co
		dd offset __unwindfunclet$??1NumberingSystem@icu_56@@UAE@XZ$0
__ehfuncinfo$??1NumberingSystem@icu_56@@UAE@XZ dd 19930522h, 1
					; DATA XREF: __ehhandler$??1NumberingSystem@icu_56@@UAE@XZ+14o
		dd offset __unwindtable$??1NumberingSystem@icu_56@@UAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1E88h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::NumberingSystem::getRadix(icu_56::NumberingSystem *__hidden this)
		public ?getRadix@NumberingSystem@icu_56@@QBEHXZ
?getRadix@NumberingSystem@icu_56@@QBEHXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+44h]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getRadix@NumberingSystem@icu_56@@QBEHXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1EB8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual class	icu_56::UnicodeString __thiscall icu_56::NumberingSystem::getDescription(void)const
		public ?getDescription@NumberingSystem@icu_56@@UBE?AVUnicodeString@2@XZ
?getDescription@NumberingSystem@icu_56@@UBE?AVUnicodeString@2@XZ proc near
					; DATA XREF: .rdata:0000118Co

var_D8		= byte ptr -0D8h
var_D4		= dword	ptr -0D4h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	[ebp+var_D4], 0
		mov	eax, [ebp+var_8]
		add	eax, 4
		mov	esi, esp
		push	eax		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@ABV01@@Z ; icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_D4]
		or	ecx, 1
		mov	[ebp+var_D4], ecx
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?getDescription@NumberingSystem@icu_56@@UBE?AVUnicodeString@2@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1F28h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	char *__thiscall icu_56::NumberingSystem::getName(icu_56::NumberingSystem *__hidden this)
		public ?getName@NumberingSystem@icu_56@@QBEPBDXZ
?getName@NumberingSystem@icu_56@@QBEPBDXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		add	eax, 49h ; 'I'
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getName@NumberingSystem@icu_56@@QBEPBDXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1F58h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::NumberingSystem::setRadix(icu_56::NumberingSystem *this, int)
		public ?setRadix@NumberingSystem@icu_56@@AAEXH@Z
?setRadix@NumberingSystem@icu_56@@AAEXH@Z proc near
					; CODE XREF: icu_56::NumberingSystem::createInstance(int,signed	char,icu_56::UnicodeString const &,UErrorCode &)+10Fp

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+44h], ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?setRadix@NumberingSystem@icu_56@@AAEXH@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1F90h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::NumberingSystem::setAlgorithmic(icu_56::NumberingSystem *this, signed	__int8)
		public ?setAlgorithmic@NumberingSystem@icu_56@@AAEXC@Z
?setAlgorithmic@NumberingSystem@icu_56@@AAEXC@Z	proc near
					; CODE XREF: icu_56::NumberingSystem::createInstance(int,signed	char,icu_56::UnicodeString const &,UErrorCode &)+148p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	cl, [ebp+arg_0]
		mov	[eax+48h], cl
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?setAlgorithmic@NumberingSystem@icu_56@@AAEXC@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1FC8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; private: void	__thiscall icu_56::NumberingSystem::setDesc(class icu_56::UnicodeString)
		public ?setDesc@NumberingSystem@icu_56@@AAEXVUnicodeString@2@@Z
?setDesc@NumberingSystem@icu_56@@AAEXVUnicodeString@2@@Z proc near
					; CODE XREF: icu_56::NumberingSystem::createInstance(int,signed	char,icu_56::UnicodeString const &,UErrorCode &)+13Bp

var_E4		= byte ptr -0E4h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?setDesc@NumberingSystem@icu_56@@AAEXVUnicodeString@2@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_E4]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax

loc_1FFE:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::fixedo
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	[ebp+var_4], 0
		mov	esi, esp
		lea	eax, [ebp+arg_0]
		push	eax		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_14]
		add	ecx, 4		; this
		call	dword ptr ds:__imp_?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z ; icu_56::UnicodeString::setTo(icu_56::UnicodeString const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		lea	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7_1
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	40h
?setDesc@NumberingSystem@icu_56@@AAEXVUnicodeString@2@@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN7_1		dd 1			; DATA XREF: icu_56::NumberingSystem::setDesc(icu_56::UnicodeString)+7Fo
		dd offset $LN6_1
$LN6_1		dd 0FFFFFFE0h, 4	; DATA XREF: .text:0000207Co
		dd offset $LN4		; "_$ArrayPad"
$LN4		db '_$ArrayPad',0       ; DATA XREF: .text:00002088o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 2098h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?setDesc@NumberingSystem@icu_56@@AAEXVUnicodeString@2@@Z$0 proc	near
					; DATA XREF: .xdata$x:000020CCo
		mov	esi, esp
		lea	ecx, [ebp+8]	; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?setDesc@NumberingSystem@icu_56@@AAEXVUnicodeString@2@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?setDesc@NumberingSystem@icu_56@@AAEXVUnicodeString@2@@Z proc near
					; DATA XREF: icu_56::NumberingSystem::setDesc(icu_56::UnicodeString)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0E8h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?setDesc@NumberingSystem@icu_56@@AAEXVUnicodeString@2@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?setDesc@NumberingSystem@icu_56@@AAEXVUnicodeString@2@@Z endp

_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 20C8h
__unwindtable$?setDesc@NumberingSystem@icu_56@@AAEXVUnicodeString@2@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:000020D8o
		dd offset __unwindfunclet$?setDesc@NumberingSystem@icu_56@@AAEXVUnicodeString@2@@Z$0
__ehfuncinfo$?setDesc@NumberingSystem@icu_56@@AAEXVUnicodeString@2@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$?setDesc@NumberingSystem@icu_56@@AAEXVUnicodeString@2@@Z+14o
		dd offset __unwindtable$?setDesc@NumberingSystem@icu_56@@AAEXVUnicodeString@2@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 20F4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::NumberingSystem::setName(icu_56::NumberingSystem *this, const	char *)
		public ?setName@NumberingSystem@icu_56@@AAEXPBD@Z
?setName@NumberingSystem@icu_56@@AAEXPBD@Z proc	near
					; CODE XREF: icu_56::NumberingSystem::createInstance(int,signed	char,icu_56::UnicodeString const &,UErrorCode &)+152p
					; icu_56::NumberingSystem::createInstanceByName(char const *,UErrorCode	&)+1C5p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
Source		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		cmp	[ebp+Source], 0
		jnz	short loc_2126
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax+49h], 0
		jmp	short loc_215A
; ---------------------------------------------------------------------------

loc_2126:				; CODE XREF: icu_56::NumberingSystem::setName(char const *)+27j
		push	1
		mov	eax, [ebp+Source]
		push	eax
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	esi, esp
		push	8		; Count
		mov	ecx, [ebp+Source]
		push	ecx		; Source
		mov	edx, [ebp+var_8]
		add	edx, 49h ; 'I'
		push	edx		; Dest
		call	dword ptr ds:__imp__strncpy
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax+51h], 0

loc_215A:				; CODE XREF: icu_56::NumberingSystem::setName(char const *)+30j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?setName@NumberingSystem@icu_56@@AAEXPBD@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2170h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__thiscall icu_56::NumberingSystem::isAlgorithmic(icu_56::NumberingSystem *__hidden this)
		public ?isAlgorithmic@NumberingSystem@icu_56@@QBECXZ
?isAlgorithmic@NumberingSystem@icu_56@@QBECXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	al, [eax+48h]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?isAlgorithmic@NumberingSystem@icu_56@@QBECXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 21A0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::StringEnumeration *__cdecl icu_56::NumberingSystem::getAvailableNames(enum UErrorCode *)
		public ?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z
?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z proc near

var_184		= dword	ptr -184h
var_17C		= dword	ptr -17Ch
var_170		= dword	ptr -170h
var_164		= dword	ptr -164h
var_158		= dword	ptr -158h
var_14C		= dword	ptr -14Ch
var_140		= dword	ptr -140h
var_134		= dword	ptr -134h
var_128		= dword	ptr -128h
var_11C		= dword	ptr -11Ch
var_110		= dword	ptr -110h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= byte ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 178h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_184]
		mov	ecx, 5Eh ; '^'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_21F9
		xor	eax, eax
		jmp	loc_2548
; ---------------------------------------------------------------------------

loc_21F9:				; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+50j
		cmp	ds:?availableNames@?1??getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@3@AAW4UErrorCode@@@Z@4PAV43@A, 0 ; icu_56::StringEnumeration * `icu_56::NumberingSystem::getAvailableNames(UErrorCode &)'::`2'::availableNames
		jnz	loc_2543
		mov	esi, esp
		push	18h		; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_170], eax
		mov	[ebp+var_4], 0
		cmp	[ebp+var_170], 0
		jz	short loc_226A
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0		; signed __int8	(__cdecl __high	*)(union UElement, union UElement)
		push	offset _uprv_deleteUObject_56 ;	void (__cdecl *)(void *)
		mov	ecx, [ebp+var_170] ; this
		call	dword ptr ds:__imp_??0UVector@icu_56@@QAE@P6AXPAX@ZP6ACTUElement@@2@ZAAW4UErrorCode@@@Z	; icu_56::UVector::UVector(void	(*)(void *),signed char	(*)(UElement,UElement),UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_170]
		mov	dword ptr [ecx], offset	??_SUVector@icu_56@@6B@	; const	icu_56::UVector::`local	vftable'
		mov	edx, [ebp+var_170]
		mov	[ebp+var_184], edx
		jmp	short loc_2274
; ---------------------------------------------------------------------------

loc_226A:				; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+8Ej
		mov	[ebp+var_184], 0

loc_2274:				; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+C8j
		mov	eax, [ebp+var_184]
		mov	[ebp+var_17C], eax
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_17C]
		push	edx
		lea	ecx, [ebp+var_14]
		call	??0?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@PAVUVector@1@AAW4UErrorCode@@@Z	; icu_56::LocalPointer<icu_56::UVector>::LocalPointer<icu_56::UVector>(icu_56::UVector *,UErrorCode &)
		mov	[ebp+var_4], 1
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_22DA
		mov	[ebp+var_164], 0
		mov	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_14]
		call	??1?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@XZ ; icu_56::LocalPointer<icu_56::UVector>::~LocalPointer<icu_56::UVector>(void)
		mov	eax, [ebp+var_164]
		jmp	loc_2548
; ---------------------------------------------------------------------------

loc_22DA:				; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+114j
		mov	[ebp+var_20], 0
		lea	eax, [ebp+var_20]
		push	eax
		push	offset ??_C@_0BB@BOCNJIEB@numberingSystems?$AA@	; "numberingSystems"
		push	0
		call	_ures_openDirect_56
		add	esp, 0Ch
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+var_20]
		push	eax
		mov	ecx, [ebp+var_2C]
		push	ecx
		push	offset ??_C@_0BB@BOCNJIEB@numberingSystems?$AA@	; "numberingSystems"
		mov	edx, [ebp+var_2C]
		push	edx
		call	_ures_getByKey_56
		add	esp, 10h
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+var_20]
		push	eax
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	ecx, al
		test	ecx, ecx
		jz	short loc_235F
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 2
		mov	eax, [ebp+var_2C]
		push	eax
		call	_ures_close_56
		add	esp, 4
		mov	[ebp+var_158], 0
		mov	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_14]
		call	??1?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@XZ ; icu_56::LocalPointer<icu_56::UVector>::~LocalPointer<icu_56::UVector>(void)
		mov	eax, [ebp+var_158]
		jmp	loc_2548
; ---------------------------------------------------------------------------

loc_235F:				; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+184j
					; icu_56::NumberingSystem::getAvailableNames(UErrorCode	&)+2A2j
		mov	eax, [ebp+var_2C]
		push	eax
		call	_ures_hasNext_56
		add	esp, 4
		movsx	ecx, al
		test	ecx, ecx
		jz	loc_2447
		lea	eax, [ebp+var_20]
		push	eax
		push	0
		mov	ecx, [ebp+var_2C]
		push	ecx
		call	_ures_getNextResource_56
		add	esp, 0Ch
		mov	[ebp+var_38], eax
		mov	eax, [ebp+var_38]
		push	eax
		call	_ures_getKey_56
		add	esp, 4
		mov	[ebp+var_44], eax
		mov	esi, esp
		push	40h ; '@'       ; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_140], eax
		mov	byte ptr [ebp+var_4], 2
		cmp	[ebp+var_140], 0
		jz	short loc_23F8
		mov	esi, esp
		push	0
		push	0FFFFFFFFh
		mov	eax, [ebp+var_44]
		push	eax
		mov	ecx, [ebp+var_140]
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@PBDHW4EInvariant@01@@Z ; icu_56::UnicodeString::UnicodeString(char const *,int,icu_56::UnicodeString::EInvariant)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_140]
		mov	dword ptr [ecx], offset	??_SUnicodeString@icu_56@@6B@ ;	const icu_56::UnicodeString::`local vftable'
		mov	edx, [ebp+var_140]
		mov	[ebp+var_184], edx
		jmp	short loc_2402
; ---------------------------------------------------------------------------

loc_23F8:				; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+21Fj
		mov	[ebp+var_184], 0

loc_2402:				; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+256j
		mov	eax, [ebp+var_184]
		mov	[ebp+var_14C], eax
		mov	byte ptr [ebp+var_4], 1
		mov	esi, esp
		mov	ecx, [ebp+arg_0]
		push	ecx		; enum UErrorCode *
		mov	edx, [ebp+var_14C]
		push	edx		; void *
		lea	ecx, [ebp+var_14]
		call	??C?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QBEPAVUVector@1@XZ ; icu_56::LocalPointerBase<icu_56::UVector>::operator->(void)
		mov	ecx, eax	; this
		call	dword ptr ds:__imp_?addElement@UVector@icu_56@@QAEXPAXAAW4UErrorCode@@@Z ; icu_56::UVector::addElement(void *,UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_38]
		push	eax
		call	_ures_close_56
		add	esp, 4
		jmp	loc_235F
; ---------------------------------------------------------------------------

loc_2447:				; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+1D0j
		mov	eax, [ebp+var_2C]
		push	eax
		call	_ures_close_56
		add	esp, 4
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_248C
		mov	[ebp+var_134], 0
		mov	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_14]
		call	??1?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@XZ ; icu_56::LocalPointer<icu_56::UVector>::~LocalPointer<icu_56::UVector>(void)
		mov	eax, [ebp+var_134]
		jmp	loc_2548
; ---------------------------------------------------------------------------

loc_248C:				; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+2C6j
		mov	esi, esp
		push	74h ; 't'       ; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_11C], eax
		mov	byte ptr [ebp+var_4], 3
		cmp	[ebp+var_11C], 0
		jz	short loc_24D3
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		lea	ecx, [ebp+var_14]
		call	?getAlias@?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QBEPAVUVector@2@XZ ; icu_56::LocalPointerBase<icu_56::UVector>::getAlias(void)
		push	eax		; struct icu_56::UVector *
		mov	ecx, [ebp+var_11C] ; this
		call	??0NumsysNameEnumeration@icu_56@@QAE@PAVUVector@1@AAW4UErrorCode@@@Z ; icu_56::NumsysNameEnumeration::NumsysNameEnumeration(icu_56::UVector *,UErrorCode &)
		mov	[ebp+var_184], eax
		jmp	short loc_24DD
; ---------------------------------------------------------------------------

loc_24D3:				; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+311j
		mov	[ebp+var_184], 0

loc_24DD:				; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+331j
		mov	ecx, [ebp+var_184]
		mov	[ebp+var_128], ecx
		mov	byte ptr [ebp+var_4], 1
		mov	edx, [ebp+var_128]
		mov	ds:?availableNames@?1??getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@3@AAW4UErrorCode@@@Z@4PAV43@A, edx ; icu_56::StringEnumeration * `icu_56::NumberingSystem::getAvailableNames(UErrorCode	&)'::`2'::availableNames
		cmp	ds:?availableNames@?1??getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@3@AAW4UErrorCode@@@Z@4PAV43@A, 0 ; icu_56::StringEnumeration * `icu_56::NumberingSystem::getAvailableNames(UErrorCode &)'::`2'::availableNames
		jnz	short loc_252C
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 7
		mov	[ebp+var_110], 0
		mov	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_14]
		call	??1?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@XZ ; icu_56::LocalPointer<icu_56::UVector>::~LocalPointer<icu_56::UVector>(void)
		mov	eax, [ebp+var_110]
		jmp	short loc_2548
; ---------------------------------------------------------------------------

loc_252C:				; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+360j
		lea	ecx, [ebp+var_14]
		call	?orphan@?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QAEPAVUVector@2@XZ	; icu_56::LocalPointerBase<icu_56::UVector>::orphan(void)
		mov	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_14]
		call	??1?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@XZ ; icu_56::LocalPointer<icu_56::UVector>::~LocalPointer<icu_56::UVector>(void)

loc_2543:				; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+60j
		mov	eax, ds:?availableNames@?1??getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@3@AAW4UErrorCode@@@Z@4PAV43@A ; icu_56::StringEnumeration * `icu_56::NumberingSystem::getAvailableNames(UErrorCode	&)'::`2'::availableNames

loc_2548:				; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+54j
					; icu_56::NumberingSystem::getAvailableNames(UErrorCode	&)+135j ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN25_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 184h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
$LN25_0		dd 2			; DATA XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+3ACo
		dd offset $LN24_0
$LN24_0		dd 0FFFFFFECh, 4	; DATA XREF: .text:0000257Co
		dd offset $LN21		; "numsysNames"
		dd 0FFFFFFE0h, 4
		dd offset $LN22		; "rbstatus"
$LN22		db 'rbstatus',0         ; DATA XREF: .text:00002594o
$LN21		db 'numsysNames',0      ; DATA XREF: .text:00002588o
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 25B0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z$0 proc near
					; DATA XREF: .xdata$x:00002674o
		mov	esi, esp
		mov	eax, [ebp-170h]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z$1 proc near
					; DATA XREF: .xdata$x:0000267Co
		lea	ecx, [ebp-14h]
		jmp	??1?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@XZ ; icu_56::LocalPointer<icu_56::UVector>::~LocalPointer<icu_56::UVector>(void)
__unwindfunclet$?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z$2 proc near
					; DATA XREF: .xdata$x:00002684o
		mov	esi, esp
		mov	eax, [ebp-140h]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z$2 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z$3 proc near
					; DATA XREF: .xdata$x:0000268Co
		mov	esi, esp
		mov	eax, [ebp-11Ch]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z$3 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z proc	near
					; DATA XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-188h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2624h
		dd offset ??_R4UnicodeString@icu_56@@6B@ ; const icu_56::UnicodeString::`RTTI Complete Object Locator'
		public ??_SUnicodeString@icu_56@@6B@
; const	icu_56::UnicodeString::`local vftable'
??_SUnicodeString@icu_56@@6B@ dd offset	??_EUnicodeString@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+244o
					; icu_56::UnicodeString::`vector deleting destructor'(uint)
		dd offset ?getDynamicClassID@UnicodeString@icu_56@@UBEPAXXZ ; icu_56::UnicodeString::getDynamicClassID(void)
		dd offset ?extractBetween@UnicodeString@icu_56@@UBEXHHAAV12@@Z ; icu_56::UnicodeString::extractBetween(int,int,icu_56::UnicodeString &)
		dd offset ?handleReplaceBetween@UnicodeString@icu_56@@UAEXHHABV12@@Z ; icu_56::UnicodeString::handleReplaceBetween(int,int,icu_56::UnicodeString const &)
		dd offset ?copy@UnicodeString@icu_56@@UAEXHHH@Z	; icu_56::UnicodeString::copy(int,int,int)
		dd offset ?hasMetaData@UnicodeString@icu_56@@UBECXZ ; icu_56::UnicodeString::hasMetaData(void)
		dd offset ?clone@UnicodeString@icu_56@@UBEPAVReplaceable@2@XZ ;	icu_56::UnicodeString::clone(void)
		dd offset ?getLength@UnicodeString@icu_56@@MBEHXZ ; icu_56::UnicodeString::getLength(void)
		dd offset ?getCharAt@UnicodeString@icu_56@@MBE_WH@Z ; icu_56::UnicodeString::getCharAt(int)
		dd offset ?getChar32At@UnicodeString@icu_56@@MBEHH@Z ; icu_56::UnicodeString::getChar32At(int)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2650h
		public ??_C@_0BB@BOCNJIEB@numberingSystems?$AA@
; `string'
??_C@_0BB@BOCNJIEB@numberingSystems?$AA@ db 'numberingSystems',0
					; DATA XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+145o
					; icu_56::NumberingSystem::getAvailableNames(UErrorCode	&)+15Fo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2664h
		dd offset ??_R4UVector@icu_56@@6B@ ; const icu_56::UVector::`RTTI Complete Object Locator'
		public ??_SUVector@icu_56@@6B@
; const	icu_56::UVector::`local	vftable'
??_SUVector@icu_56@@6B@	dd offset ??_EUVector@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+B6o
					; icu_56::UVector::`vector deleting destructor'(uint)
		dd offset ?getDynamicClassID@UVector@icu_56@@UBEPAXXZ ;	icu_56::UVector::getDynamicClassID(void)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 2670h
__unwindtable$?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z dd	0FFFFFFFFh
					; DATA XREF: .xdata$x:00002698o
		dd offset __unwindfunclet$?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z$0
		dd 0FFFFFFFFh
		dd offset __unwindfunclet$?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z$1
		dd 1
		dd offset __unwindfunclet$?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z$2
		dd 1
		dd offset __unwindfunclet$?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z$3
__ehfuncinfo$?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z dd 19930522h, 4
					; DATA XREF: __ehhandler$?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z+14o
		dd offset __unwindtable$?getAvailableNames@NumberingSystem@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 26B4h
		public ??_R4UVector@icu_56@@6B@
; const	icu_56::UVector::`RTTI Complete	Object Locator'
??_R4UVector@icu_56@@6B@ dd 3 dup(0)	; DATA XREF: .rdata:00002664o
		dd offset ??_R0?AVUVector@icu_56@@@8 ; icu_56::UVector `RTTI Type Descriptor'
		dd offset ??_R3UVector@icu_56@@8 ; icu_56::UVector::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 26C8h
		public ??_R0?AVUVector@icu_56@@@8
; class	icu_56::UVector	`RTTI Type Descriptor'
??_R0?AVUVector@icu_56@@@8 dd offset ??_7type_info@@6B@	; DATA XREF: .rdata$r:000026C0o
					; .rdata$r:icu_56::UVector::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avuvector@ic	db '.?AVUVector@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 26E8h
		public ??_R3UVector@icu_56@@8
; icu_56::UVector::`RTTI Class Hierarchy Descriptor'
??_R3UVector@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:000026C4o
					; .rdata$r:00002720o
		dd 3
		dd offset ??_R2UVector@icu_56@@8 ; icu_56::UVector::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 26F8h
		public ??_R2UVector@icu_56@@8
; icu_56::UVector::`RTTI Base Class Array'
??_R2UVector@icu_56@@8 dd offset ??_R1A@?0A@EA@UVector@icu_56@@8
					; DATA XREF: .rdata$r:000026F4o
					; icu_56::UVector::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 2708h
		public ??_R1A@?0A@EA@UVector@icu_56@@8
; icu_56::UVector::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UVector@icu_56@@8	dd offset ??_R0?AVUVector@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UVector::`RTTI Base Class	Array'o
					; icu_56::UVector `RTTI	Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UVector@icu_56@@8 ; icu_56::UVector::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 2724h
		public ??_R4UnicodeString@icu_56@@6B@
; const	icu_56::UnicodeString::`RTTI Complete Object Locator'
??_R4UnicodeString@icu_56@@6B@ dd 3 dup(0) ; DATA XREF:	.rdata:00002624o
		dd offset ??_R0?AVUnicodeString@icu_56@@@8 ; icu_56::UnicodeString `RTTI Type Descriptor'
		dd offset ??_R3UnicodeString@icu_56@@8 ; icu_56::UnicodeString::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 2738h
		public ??_R0?AVUnicodeString@icu_56@@@8
; class	icu_56::UnicodeString `RTTI Type Descriptor'
??_R0?AVUnicodeString@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00002730o
					; .rdata$r:icu_56::UnicodeString::`RTTI	Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avunicodestr	db '.?AVUnicodeString@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 275Ch
		public ??_R3UnicodeString@icu_56@@8
; icu_56::UnicodeString::`RTTI Class Hierarchy Descriptor'
??_R3UnicodeString@icu_56@@8 dd	2 dup(0) ; DATA	XREF: .rdata$r:00002734o
					; .rdata$r:00002798o
		dd 4
		dd offset ??_R2UnicodeString@icu_56@@8 ; icu_56::UnicodeString::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 276Ch
		public ??_R2UnicodeString@icu_56@@8
; icu_56::UnicodeString::`RTTI Base Class Array'
??_R2UnicodeString@icu_56@@8 dd	offset ??_R1A@?0A@EA@UnicodeString@icu_56@@8
					; DATA XREF: .rdata$r:00002768o
					; icu_56::UnicodeString::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@Replaceable@icu_56@@8 ;	icu_56::Replaceable::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 2780h
		public ??_R1A@?0A@EA@UnicodeString@icu_56@@8
; icu_56::UnicodeString::`RTTI Base Class Descriptor at	(0, -1,	0, 64)'
??_R1A@?0A@EA@UnicodeString@icu_56@@8 dd offset	??_R0?AVUnicodeString@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UnicodeString::`RTTI Base	Class Array'o
					; icu_56::UnicodeString	`RTTI Type Descriptor'
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UnicodeString@icu_56@@8 ; icu_56::UnicodeString::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 279Ch
		public ??_R1A@?0A@EA@Replaceable@icu_56@@8
; icu_56::Replaceable::`RTTI Base Class	Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@Replaceable@icu_56@@8 dd offset ??_R0?AVReplaceable@icu_56@@@8
					; DATA XREF: .rdata$r:00002770o
					; .rdata$r:icu_56::Replaceable::`RTTI Base Class Array'o
					; icu_56::Replaceable `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3Replaceable@icu_56@@8 ; icu_56::Replaceable::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 27B8h
		public ??_R0?AVReplaceable@icu_56@@@8
; class	icu_56::Replaceable `RTTI Type Descriptor'
??_R0?AVReplaceable@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::Replaceable::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avreplaceabl	db '.?AVReplaceable@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 27DCh
		public ??_R3Replaceable@icu_56@@8
; icu_56::Replaceable::`RTTI Class Hierarchy Descriptor'
??_R3Replaceable@icu_56@@8 dd 2	dup(0)	; DATA XREF: .rdata$r:000027B4o
		dd 3
		dd offset ??_R2Replaceable@icu_56@@8 ; icu_56::Replaceable::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 27ECh
		public ??_R2Replaceable@icu_56@@8
; icu_56::Replaceable::`RTTI Base Class	Array'
??_R2Replaceable@icu_56@@8 dd offset ??_R1A@?0A@EA@Replaceable@icu_56@@8
					; DATA XREF: .rdata$r:000027E8o
					; icu_56::Replaceable::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 27FCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::UnicodeString::`scalar deleting destructor'(unsigned int)
		public ??_GUnicodeString@icu_56@@UAEPAXI@Z
??_GUnicodeString@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_284F
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_284F:				; CODE XREF: icu_56::UnicodeString::`scalar deleting destructor'(uint)+3Bj
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GUnicodeString@icu_56@@UAEPAXI@Z endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2868h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::UVector::`scalar deleting destructor'(unsigned int)
		public ??_GUVector@icu_56@@UAEPAXI@Z
??_GUVector@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??1UVector@icu_56@@UAE@XZ ; icu_56::UVector::~UVector(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_28BB
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_28BB:				; CODE XREF: icu_56::UVector::`scalar deleting destructor'(uint)+3Bj
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GUVector@icu_56@@UAEPAXI@Z endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 28D4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::NumsysNameEnumeration::NumsysNameEnumeration(icu_56::NumsysNameEnumeration *this, struct icu_56::UVector *,	enum UErrorCode	*)
		public ??0NumsysNameEnumeration@icu_56@@QAE@PAVUVector@1@AAW4UErrorCode@@@Z
??0NumsysNameEnumeration@icu_56@@QAE@PAVUVector@1@AAW4UErrorCode@@@Z proc near
					; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+326p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0StringEnumeration@icu_56@@IAE@XZ ; icu_56::StringEnumeration::StringEnumeration(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7NumsysNameEnumeration@icu_56@@6B@ ;	const icu_56::NumsysNameEnumeration::`vftable'
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+6Ch], 0
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+70h], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??0NumsysNameEnumeration@icu_56@@QAE@PAVUVector@1@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2940h
		dd offset ??_R4NumsysNameEnumeration@icu_56@@6B@ ; const icu_56::NumsysNameEnumeration::`RTTI Complete Object Locator'
		public ??_7NumsysNameEnumeration@icu_56@@6B@
; const	icu_56::NumsysNameEnumeration::`vftable'
??_7NumsysNameEnumeration@icu_56@@6B@ dd offset	??_ENumsysNameEnumeration@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::NumsysNameEnumeration::NumsysNameEnumeration(icu_56::UVector *,UErrorCode &)+38o
					; icu_56::NumsysNameEnumeration::~NumsysNameEnumeration(void)+45o
					; icu_56::NumsysNameEnumeration::`vector deleting destructor'(uint)
		dd offset ?getDynamicClassID@NumsysNameEnumeration@icu_56@@UBEPAXXZ ; icu_56::NumsysNameEnumeration::getDynamicClassID(void)
		dd offset ?clone@StringEnumeration@icu_56@@UBEPAV12@XZ ; icu_56::StringEnumeration::clone(void)
		dd offset ?count@NumsysNameEnumeration@icu_56@@UBEHAAW4UErrorCode@@@Z ;	icu_56::NumsysNameEnumeration::count(UErrorCode	&)
		dd offset ?next@StringEnumeration@icu_56@@UAEPBDPAHAAW4UErrorCode@@@Z ;	icu_56::StringEnumeration::next(int *,UErrorCode &)
		dd offset ?unext@StringEnumeration@icu_56@@UAEPB_WPAHAAW4UErrorCode@@@Z	; icu_56::StringEnumeration::unext(int *,UErrorCode &)
		dd offset ?snext@NumsysNameEnumeration@icu_56@@UAEPBVUnicodeString@2@AAW4UErrorCode@@@Z	; icu_56::NumsysNameEnumeration::snext(UErrorCode &)
		dd offset ?reset@NumsysNameEnumeration@icu_56@@UAEXAAW4UErrorCode@@@Z ;	icu_56::NumsysNameEnumeration::reset(UErrorCode	&)
		dd offset ??8StringEnumeration@icu_56@@UBECABV01@@Z ; icu_56::StringEnumeration::operator==(icu_56::StringEnumeration const &)
		dd offset ??9StringEnumeration@icu_56@@UBECABV01@@Z ; icu_56::StringEnumeration::operator!=(icu_56::StringEnumeration const &)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 296Ch
		public ??_R4NumsysNameEnumeration@icu_56@@6B@
; const	icu_56::NumsysNameEnumeration::`RTTI Complete Object Locator'
??_R4NumsysNameEnumeration@icu_56@@6B@ dd 3 dup(0) ; DATA XREF:	.rdata:00002940o
		dd offset ??_R0?AVNumsysNameEnumeration@icu_56@@@8 ; icu_56::NumsysNameEnumeration `RTTI Type Descriptor'
		dd offset ??_R3NumsysNameEnumeration@icu_56@@8 ; icu_56::NumsysNameEnumeration::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 2980h
		public ??_R0?AVNumsysNameEnumeration@icu_56@@@8
; class	icu_56::NumsysNameEnumeration `RTTI Type Descriptor'
??_R0?AVNumsysNameEnumeration@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00002978o
					; .rdata$r:icu_56::NumsysNameEnumeration::`RTTI	Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?avnumsysname	db '.?AVNumsysNameEnumeration@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 29ACh
		public ??_R3NumsysNameEnumeration@icu_56@@8
; icu_56::NumsysNameEnumeration::`RTTI Class Hierarchy Descriptor'
??_R3NumsysNameEnumeration@icu_56@@8 dd	2 dup(0) ; DATA	XREF: .rdata$r:0000297Co
					; .rdata$r:000029E8o
		dd 4
		dd offset ??_R2NumsysNameEnumeration@icu_56@@8 ; icu_56::NumsysNameEnumeration::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 29BCh
		public ??_R2NumsysNameEnumeration@icu_56@@8
; icu_56::NumsysNameEnumeration::`RTTI Base Class Array'
??_R2NumsysNameEnumeration@icu_56@@8 dd	offset ??_R1A@?0A@EA@NumsysNameEnumeration@icu_56@@8
					; DATA XREF: .rdata$r:000029B8o
					; icu_56::NumsysNameEnumeration::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@StringEnumeration@icu_56@@8 ; icu_56::StringEnumeration::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 29D0h
		public ??_R1A@?0A@EA@NumsysNameEnumeration@icu_56@@8
; icu_56::NumsysNameEnumeration::`RTTI Base Class Descriptor at	(0, -1,	0, 64)'
??_R1A@?0A@EA@NumsysNameEnumeration@icu_56@@8 dd offset	??_R0?AVNumsysNameEnumeration@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::NumsysNameEnumeration::`RTTI Base	Class Array'o
					; icu_56::NumsysNameEnumeration	`RTTI Type Descriptor'
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3NumsysNameEnumeration@icu_56@@8 ; icu_56::NumsysNameEnumeration::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 29ECh
		public ??_R1A@?0A@EA@StringEnumeration@icu_56@@8
; icu_56::StringEnumeration::`RTTI Base	Class Descriptor at (0,	-1, 0, 64)'
??_R1A@?0A@EA@StringEnumeration@icu_56@@8 dd offset ??_R0?AVStringEnumeration@icu_56@@@8
					; DATA XREF: .rdata$r:000029C0o
					; .rdata$r:icu_56::StringEnumeration::`RTTI Base Class Array'o
					; icu_56::StringEnumeration `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3StringEnumeration@icu_56@@8 ; icu_56::StringEnumeration::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 2A08h
		public ??_R0?AVStringEnumeration@icu_56@@@8
; class	icu_56::StringEnumeration `RTTI	Type Descriptor'
??_R0?AVStringEnumeration@icu_56@@@8 dd	offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::StringEnumeration::`RTTI Base Class Descriptor at	(0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avstringenum	db '.?AVStringEnumeration@icu_56@@',0
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 2A30h
		public ??_R3StringEnumeration@icu_56@@8
; icu_56::StringEnumeration::`RTTI Class Hierarchy Descriptor'
??_R3StringEnumeration@icu_56@@8 dd 2 dup(0) ; DATA XREF: .rdata$r:00002A04o
		dd 3
		dd offset ??_R2StringEnumeration@icu_56@@8 ; icu_56::StringEnumeration::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 2A40h
		public ??_R2StringEnumeration@icu_56@@8
; icu_56::StringEnumeration::`RTTI Base	Class Array'
??_R2StringEnumeration@icu_56@@8 dd offset ??_R1A@?0A@EA@StringEnumeration@icu_56@@8
					; DATA XREF: .rdata$r:00002A3Co
					; icu_56::StringEnumeration::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2A50h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::NumsysNameEnumeration::`scalar deleting destructor'(unsigned int)
		public ??_GNumsysNameEnumeration@icu_56@@UAEPAXI@Z
??_GNumsysNameEnumeration@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1NumsysNameEnumeration@icu_56@@UAE@XZ	; icu_56::NumsysNameEnumeration::~NumsysNameEnumeration(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_2A99
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_2A99:				; CODE XREF: icu_56::NumsysNameEnumeration::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GNumsysNameEnumeration@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2AB4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct icu_56::UnicodeString *__thiscall icu_56::NumsysNameEnumeration::snext(icu_56::NumsysNameEnumeration *this, enum	UErrorCode *)
		public ?snext@NumsysNameEnumeration@icu_56@@UAEPBVUnicodeString@2@AAW4UErrorCode@@@Z
?snext@NumsysNameEnumeration@icu_56@@UAEPBVUnicodeString@2@AAW4UErrorCode@@@Z proc near
					; DATA XREF: .rdata:0000295Co

var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_2B42
		mov	esi, esp
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+70h]	; this
		call	dword ptr ds:__imp_?size@UVector@icu_56@@QBEHXZ	; icu_56::UVector::size(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_8]
		cmp	[ecx+6Ch], eax
		jge	short loc_2B42
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+6Ch]
		mov	[ebp+var_D0], ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx+6Ch]
		add	eax, 1
		mov	ecx, [ebp+var_8]
		mov	[ecx+6Ch], eax
		mov	esi, esp
		mov	edx, [ebp+var_D0]
		push	edx		; int
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+70h]	; this
		call	dword ptr ds:__imp_?elementAt@UVector@icu_56@@QBEPAXH@Z	; icu_56::UVector::elementAt(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_2B44
; ---------------------------------------------------------------------------

loc_2B42:				; CODE XREF: icu_56::NumsysNameEnumeration::snext(UErrorCode &)+36j
					; icu_56::NumsysNameEnumeration::snext(UErrorCode &)+53j
		xor	eax, eax

loc_2B44:				; CODE XREF: icu_56::NumsysNameEnumeration::snext(UErrorCode &)+8Cj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?snext@NumsysNameEnumeration@icu_56@@UAEPBVUnicodeString@2@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2B5Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::NumsysNameEnumeration::reset(icu_56::NumsysNameEnumeration *this, enum UErrorCode *)
		public ?reset@NumsysNameEnumeration@icu_56@@UAEXAAW4UErrorCode@@@Z
?reset@NumsysNameEnumeration@icu_56@@UAEXAAW4UErrorCode@@@Z proc near
					; DATA XREF: .rdata:00002960o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+6Ch], 0
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?reset@NumsysNameEnumeration@icu_56@@UAEXAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2B94h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::NumsysNameEnumeration::count(icu_56::NumsysNameEnumeration *this, enum	UErrorCode *)
		public ?count@NumsysNameEnumeration@icu_56@@UBEHAAW4UErrorCode@@@Z
?count@NumsysNameEnumeration@icu_56@@UBEHAAW4UErrorCode@@@Z proc near
					; DATA XREF: .rdata:00002950o

var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+70h], 0
		jnz	short loc_2BCC
		mov	[ebp+var_D0], 0
		jmp	short loc_2BE7
; ---------------------------------------------------------------------------

loc_2BCC:				; CODE XREF: icu_56::NumsysNameEnumeration::count(UErrorCode &)+2Aj
		mov	esi, esp
		mov	ecx, [ebp+var_8]
		mov	ecx, [ecx+70h]	; this
		call	dword ptr ds:__imp_?size@UVector@icu_56@@QBEHXZ	; icu_56::UVector::size(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_D0], eax

loc_2BE7:				; CODE XREF: icu_56::NumsysNameEnumeration::count(UErrorCode &)+36j
		mov	eax, [ebp+var_D0]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?count@NumsysNameEnumeration@icu_56@@UBEHAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2C04h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::NumsysNameEnumeration::~NumsysNameEnumeration(icu_56::NumsysNameEnumeration	*__hidden this)
		public ??1NumsysNameEnumeration@icu_56@@UAE@XZ
??1NumsysNameEnumeration@icu_56@@UAE@XZ	proc near
					; CODE XREF: icu_56::NumsysNameEnumeration::`scalar deleting destructor'(uint)+26p

var_F4		= dword	ptr -0F4h
var_EC		= dword	ptr -0ECh
var_E0		= dword	ptr -0E0h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??1NumsysNameEnumeration@icu_56@@UAE@XZ
		mov	eax, large fs:0
		push	eax
		sub	esp, 0E8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_F4]
		mov	ecx, 3Ah ; ':'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7NumsysNameEnumeration@icu_56@@6B@ ;	const icu_56::NumsysNameEnumeration::`vftable'
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+70h]
		mov	[ebp+var_E0], ecx
		mov	edx, [ebp+var_E0]
		mov	[ebp+var_EC], edx
		cmp	[ebp+var_EC], 0
		jz	short loc_2C9C
		mov	esi, esp
		push	1
		mov	eax, [ebp+var_EC]
		mov	edx, [eax]
		mov	ecx, [ebp+var_EC]
		mov	eax, [edx]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_F4], eax
		jmp	short loc_2CA6
; ---------------------------------------------------------------------------

loc_2C9C:				; CODE XREF: icu_56::NumsysNameEnumeration::~NumsysNameEnumeration(void)+71j
		mov	[ebp+var_F4], 0

loc_2CA6:				; CODE XREF: icu_56::NumsysNameEnumeration::~NumsysNameEnumeration(void)+96j
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		mov	ecx, [ebp+var_14] ; this
		call	dword ptr ds:__imp_??1StringEnumeration@icu_56@@UAE@XZ ; icu_56::StringEnumeration::~StringEnumeration(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0F4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1NumsysNameEnumeration@icu_56@@UAE@XZ	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 2CE0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??1NumsysNameEnumeration@icu_56@@UAE@XZ$0 proc near
					; DATA XREF: .xdata$x:00002D14o
		mov	esi, esp
		mov	ecx, [ebp-14h]	; this
		call	dword ptr ds:__imp_??1StringEnumeration@icu_56@@UAE@XZ ; icu_56::StringEnumeration::~StringEnumeration(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??1NumsysNameEnumeration@icu_56@@UAE@XZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??1NumsysNameEnumeration@icu_56@@UAE@XZ proc near
					; DATA XREF: icu_56::NumsysNameEnumeration::~NumsysNameEnumeration(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0F8h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??1NumsysNameEnumeration@icu_56@@UAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??1NumsysNameEnumeration@icu_56@@UAE@XZ endp

_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 2D10h
__unwindtable$??1NumsysNameEnumeration@icu_56@@UAE@XZ dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00002D20o
		dd offset __unwindfunclet$??1NumsysNameEnumeration@icu_56@@UAE@XZ$0
__ehfuncinfo$??1NumsysNameEnumeration@icu_56@@UAE@XZ dd	19930522h, 1
					; DATA XREF: __ehhandler$??1NumsysNameEnumeration@icu_56@@UAE@XZ+14o
		dd offset __unwindtable$??1NumsysNameEnumeration@icu_56@@UAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2D3Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall icu_56::LocalPointer<class	icu_56::UVector>::LocalPointer<class icu_56::UVector>(class icu_56::UVector *, enum  UErrorCode	&)
		public ??0?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@PAVUVector@1@AAW4UErrorCode@@@Z
??0?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@PAVUVector@1@AAW4UErrorCode@@@Z	proc near
					; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+F5p

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@PAVUVector@1@AAW4UErrorCode@@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_14]
		call	??0?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QAE@PAVUVector@1@@Z ; icu_56::LocalPointerBase<icu_56::UVector>::LocalPointerBase<icu_56::UVector>(icu_56::UVector *)
		mov	[ebp+var_4], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_2DB5
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_2DB5
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 7

loc_2DB5:				; CODE XREF: icu_56::LocalPointer<icu_56::UVector>::LocalPointer<icu_56::UVector>(icu_56::UVector *,UErrorCode &)+59j
					; icu_56::LocalPointer<icu_56::UVector>::LocalPointer<icu_56::UVector>(icu_56::UVector *,UErrorCode &)+6Ej
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??0?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@PAVUVector@1@AAW4UErrorCode@@@Z	endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 2DE0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@PAVUVector@1@AAW4UErrorCode@@@Z$0 proc near
					; DATA XREF: .xdata$x:00002E0Co
		mov	ecx, [ebp-14h]
		jmp	??1?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QAE@XZ ; icu_56::LocalPointerBase<icu_56::UVector>::~LocalPointerBase<icu_56::UVector>(void)
__unwindfunclet$??0?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@PAVUVector@1@AAW4UErrorCode@@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@PAVUVector@1@AAW4UErrorCode@@@Z proc near
					; DATA XREF: icu_56::LocalPointer<icu_56::UVector>::LocalPointer<icu_56::UVector>(icu_56::UVector *,UErrorCode &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0DCh]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@PAVUVector@1@AAW4UErrorCode@@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@PAVUVector@1@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 2E08h
__unwindtable$??0?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@PAVUVector@1@AAW4UErrorCode@@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00002E18o
		dd offset __unwindfunclet$??0?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@PAVUVector@1@AAW4UErrorCode@@@Z$0
__ehfuncinfo$??0?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@PAVUVector@1@AAW4UErrorCode@@@Z dd	19930522h, 1
					; DATA XREF: __ehhandler$??0?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@PAVUVector@1@AAW4UErrorCode@@@Z+14o
		dd offset __unwindtable$??0?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@PAVUVector@1@AAW4UErrorCode@@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2E34h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall icu_56::LocalPointer<class	icu_56::UVector>::~LocalPointer<class icu_56::UVector>(void)
		public ??1?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@XZ
??1?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@XZ proc	near
					; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+12Ap
					; icu_56::NumberingSystem::getAvailableNames(UErrorCode	&)+1AFp ...

var_F4		= dword	ptr -0F4h
var_EC		= dword	ptr -0ECh
var_E0		= dword	ptr -0E0h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??1?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@XZ
		mov	eax, large fs:0
		push	eax
		sub	esp, 0E8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_F4]
		mov	ecx, 3Ah ; ':'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	ecx, [eax]
		mov	[ebp+var_E0], ecx
		mov	edx, [ebp+var_E0]
		mov	[ebp+var_EC], edx
		cmp	[ebp+var_EC], 0
		jz	short loc_2EC2
		mov	esi, esp
		push	1
		mov	eax, [ebp+var_EC]
		mov	edx, [eax]
		mov	ecx, [ebp+var_EC]
		mov	eax, [edx]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_F4], eax
		jmp	short loc_2ECC
; ---------------------------------------------------------------------------

loc_2EC2:				; CODE XREF: icu_56::LocalPointer<icu_56::UVector>::~LocalPointer<icu_56::UVector>(void)+67j
		mov	[ebp+var_F4], 0

loc_2ECC:				; CODE XREF: icu_56::LocalPointer<icu_56::UVector>::~LocalPointer<icu_56::UVector>(void)+8Cj
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, [ebp+var_14]
		call	??1?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QAE@XZ ; icu_56::LocalPointerBase<icu_56::UVector>::~LocalPointerBase<icu_56::UVector>(void)
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0F4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 2EFCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??1?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@XZ$0 proc near
					; DATA XREF: .xdata$x:00002F28o
		mov	ecx, [ebp-14h]
		jmp	??1?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QAE@XZ ; icu_56::LocalPointerBase<icu_56::UVector>::~LocalPointerBase<icu_56::UVector>(void)
__unwindfunclet$??1?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@XZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??1?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@XZ proc near
					; DATA XREF: icu_56::LocalPointer<icu_56::UVector>::~LocalPointer<icu_56::UVector>(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0F8h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??1?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??1?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 2F24h
__unwindtable$??1?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@XZ dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00002F34o
		dd offset __unwindfunclet$??1?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@XZ$0
__ehfuncinfo$??1?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@XZ	dd 19930522h, 1
					; DATA XREF: __ehhandler$??1?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@XZ+14o
		dd offset __unwindtable$??1?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2F50h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::UVector	* __thiscall icu_56::LocalPointerBase<class icu_56::UVector>::getAlias(void)const
		public ?getAlias@?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QBEPAVUVector@2@XZ
?getAlias@?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QBEPAVUVector@2@XZ proc near
					; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+31Ap

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getAlias@?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QBEPAVUVector@2@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2F80h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::UVector	* __thiscall icu_56::LocalPointerBase<class icu_56::UVector>::operator->(void)const
		public ??C?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QBEPAVUVector@1@XZ
??C?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QBEPAVUVector@1@XZ proc	near
					; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+282p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??C?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QBEPAVUVector@1@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2FB0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::UVector	* __thiscall icu_56::LocalPointerBase<class icu_56::UVector>::orphan(void)
		public ?orphan@?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QAEPAVUVector@2@XZ
?orphan@?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QAEPAVUVector@2@XZ	proc near
					; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+38Fp

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax]
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+var_14]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?orphan@?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QAEPAVUVector@2@XZ	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2FF0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall icu_56::LocalPointerBase<class icu_56::UVector>::LocalPointerBase<class icu_56::UVector>(class icu_56::UVector *)
		public ??0?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QAE@PAVUVector@1@@Z
??0?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QAE@PAVUVector@1@@Z proc near
					; CODE XREF: icu_56::LocalPointer<icu_56::UVector>::LocalPointer<icu_56::UVector>(icu_56::UVector *,UErrorCode &)+49p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx

loc_2FFD:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::hexfloato
					; .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::floatfieldo
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??0?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QAE@PAVUVector@1@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3028h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall icu_56::LocalPointerBase<class icu_56::UVector>::~LocalPointerBase<class icu_56::UVector>(void)
		public ??1?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QAE@XZ
??1?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QAE@XZ proc near
					; CODE XREF: __unwindfunclet$??0?$LocalPointer@VUVector@icu_56@@@icu_56@@QAE@PAVUVector@1@AAW4UErrorCode@@@Z$0+3j
					; icu_56::LocalPointer<icu_56::UVector>::~LocalPointer<icu_56::UVector>(void)+A2p ...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??1?$LocalPointerBase@VUVector@icu_56@@@icu_56@@QAE@XZ endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; public: signed char __thiscall icu_56::Formattable::operator==(class icu_56::Formattable const &)const
		extrn ??8Formattable@icu_56@@QBECABV01@@Z:near
					; CODE XREF: icu_56::Formattable::operator!=(icu_56::Formattable const &)+2Ap
		extrn __RTC_CheckEsp:near
					; CODE XREF: icu_56::Formattable::operator!=(icu_56::Formattable const &)+42p
					; icu_56::Formattable::getString(icu_56::UnicodeString &)+37p ...
		extrn __fltused:near
; __declspec(dllimport)	public:	class icu_56::UnicodeString & __thiscall icu_56::UnicodeString::operator=(class	icu_56::UnicodeString const &)
		extrn __imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z:near
					; CODE XREF: icu_56::Formattable::getString(icu_56::UnicodeString &)+2Fp
					; icu_56::NumberingSystem::operator=(icu_56::NumberingSystem const &)+48p
					; DATA XREF: ...
; int __thiscall icu_56::Formattable::getLong(icu_56::Formattable *__hidden this, enum UErrorCode *)
		extrn ?getLong@Formattable@icu_56@@QBEHAAW4UErrorCode@@@Z:near
					; CODE XREF: icu_56::Formattable::getLong(UErrorCode *)+2Ap
; _DWORD __thiscall icu_56::UObject::UObject(icu_56::UObject *__hidden this)
		extrn __imp_??0UObject@icu_56@@QAE@XZ:near
					; CODE XREF: icu_56::FieldPosition::FieldPosition(void)+28p
					; icu_56::FieldPosition::FieldPosition(int)+28p ...
; const	type_info::`vftable'
		extrn ??_7type_info@@6B@:near
					; DATA XREF: .data:icu_56::FieldPosition `RTTI Type Descriptor'o
					; .data:icu_56::UObject	`RTTI Type Descriptor'o ...
; public: virtual void * __thiscall icu_56::FieldPosition::getDynamicClassID(void)const
		extrn ?getDynamicClassID@FieldPosition@icu_56@@UBEPAXXZ:near
					; DATA XREF: .rdata:00000670o
; _DWORD __thiscall icu_56::UObject::UObject(icu_56::UObject *__hidden this, const struct icu_56::UObject *)
		extrn __imp_??0UObject@icu_56@@QAE@ABV01@@Z:near
					; CODE XREF: icu_56::FieldPosition::FieldPosition(icu_56::FieldPosition	const &)+2Cp
					; icu_56::NumberingSystem::NumberingSystem(icu_56::NumberingSystem const &)+4Bp
					; DATA XREF: ...
; void __cdecl icu_56::UMemory::operator delete(void *)
		extrn __imp_??3UMemory@icu_56@@SAXPAX@Z:near
					; CODE XREF: icu_56::FieldPosition::`scalar deleting destructor'(uint)+39p
					; icu_56::FieldPosition::`vector deleting destructor'(uint)+81p ...
; _DWORD __thiscall icu_56::FieldPosition::~FieldPosition(icu_56::FieldPosition	*__hidden this)
		extrn ??1FieldPosition@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::FieldPosition::`scalar deleting destructor'(uint)+26p
					; icu_56::FieldPosition::`vector deleting destructor'(uint)+6Ep
					; DATA XREF: ...
; void __cdecl icu_56::UMemory::operator delete[](void *)
		extrn __imp_??_VUMemory@icu_56@@SAXPAX@Z:near
					; CODE XREF: icu_56::FieldPosition::`vector deleting destructor'(uint)+53p
					; icu_56::NumberingSystem::`vector deleting destructor'(uint)+53p
					; DATA XREF: ...
; void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *))
		extrn ??_M@YGXPAXIHP6EX0@Z@Z:near
					; CODE XREF: icu_56::FieldPosition::`vector deleting destructor'(uint)+3Dp
					; icu_56::NumberingSystem::`vector deleting destructor'(uint)+3Dp
; public: signed char __thiscall icu_56::FieldPositionIterator::operator==(class icu_56::FieldPositionIterator const &)const
		extrn ??8FieldPositionIterator@icu_56@@QBECABV01@@Z:near
					; CODE XREF: icu_56::FieldPositionIterator::operator!=(icu_56::FieldPositionIterator const &)+2Ap
; __declspec(dllimport)	public:	class icu_56::UObject &	__thiscall icu_56::UObject::operator=(class icu_56::UObject const &)
		extrn __imp_??4UObject@icu_56@@QAEAAV01@ABV01@@Z:near
					; CODE XREF: icu_56::FieldPositionIterator::operator=(icu_56::FieldPositionIterator const &)+2Cp
					; icu_56::NumberingSystem::operator=(icu_56::NumberingSystem const &)+2Cp
					; DATA XREF: ...
; _DWORD __thiscall icu_56::UObject::~UObject(icu_56::UObject *__hidden	this)
		extrn __imp_??1UObject@icu_56@@UAE@XZ:near
					; CODE XREF: __unwindfunclet$??0NumberingSystem@icu_56@@QAE@XZ$0+5p
					; __unwindfunclet$??0NumberingSystem@icu_56@@QAE@ABV01@@Z$0+5p	...
; _DWORD __thiscall icu_56::UnicodeString::~UnicodeString(icu_56::UnicodeString	*__hidden this)
		extrn __imp_??1UnicodeString@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::NumberingSystem::NumberingSystem(void)+E6p
					; __unwindfunclet$??0NumberingSystem@icu_56@@QAE@XZ$1+8p ...
; char *__cdecl	strcpy(char *Dest, const char *Source)
		extrn _strcpy:near	; CODE XREF: icu_56::NumberingSystem::NumberingSystem(void)+D5p
					; icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+117p ...
; struct icu_56::UnicodeString *__thiscall icu_56::UnicodeString::setTo(icu_56::UnicodeString *__hidden	this, const struct icu_56::UnicodeString *)
		extrn __imp_?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z:near
					; CODE XREF: icu_56::NumberingSystem::NumberingSystem(void)+BCp
					; icu_56::NumberingSystem::setDesc(icu_56::UnicodeString)+55p
					; DATA XREF: ...
; _DWORD __thiscall icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString *__hidden this, signed __int8, const wchar_t *, int)
		extrn __imp_??0UnicodeString@icu_56@@QAE@CPB_WH@Z:near
					; CODE XREF: icu_56::NumberingSystem::NumberingSystem(void)+9Fp
					; icu_56::ures_getUnicodeStringByKey(UResourceBundle const *,char const	*,UErrorCode *)+59p
					; DATA XREF: ...
; _DWORD __thiscall icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString *__hidden this)
		extrn __imp_??0UnicodeString@icu_56@@QAE@XZ:near
					; CODE XREF: icu_56::NumberingSystem::NumberingSystem(void)+6Fp
					; icu_56::NumberingSystem::NumberingSystem(icu_56::NumberingSystem const &)+70p
					; DATA XREF: ...
		extrn ___security_cookie:near
					; DATA XREF: icu_56::NumberingSystem::NumberingSystem(void)+2Er
					; icu_56::NumberingSystem::NumberingSystem(icu_56::NumberingSystem const &)+2Er ...
		extrn ___CxxFrameHandler3:near
					; CODE XREF: __ehhandler$??0NumberingSystem@icu_56@@QAE@XZ+23j
					; __ehhandler$??0NumberingSystem@icu_56@@QAE@ABV01@@Z+19j ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: icu_56::NumberingSystem::NumberingSystem(void)+121p
					; __ehhandler$??0NumberingSystem@icu_56@@QAE@XZ+Fp ...
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near
					; CODE XREF: icu_56::NumberingSystem::NumberingSystem(void)+107p
					; icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+356p ...
; _DWORD __thiscall icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString *__hidden this, const struct icu_56::UnicodeString *)
		extrn __imp_??0UnicodeString@icu_56@@QAE@ABV01@@Z:near
					; CODE XREF: icu_56::NumberingSystem::createInstance(int,signed	char,icu_56::UnicodeString const &,UErrorCode &)+125p
					; icu_56::NumberingSystem::getDescription(void)+39p
					; DATA XREF: ...
; void *__cdecl	static icu_56::UMemory::operator new(unsigned int)
		extrn __imp_??2UMemory@icu_56@@SAPAXI@Z:near
					; CODE XREF: icu_56::NumberingSystem::createInstance(int,signed	char,icu_56::UnicodeString const &,UErrorCode &)+A9p
					; icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+2CDp ...
; int __thiscall icu_56::UnicodeString::countChar32(icu_56::UnicodeString *__hidden this, int, int)
		extrn __imp_?countChar32@UnicodeString@icu_56@@QBEHHH@Z:near
					; CODE XREF: icu_56::NumberingSystem::createInstance(int,signed	char,icu_56::UnicodeString const &,UErrorCode &)+83p
					; DATA XREF: icu_56::NumberingSystem::createInstance(int,signed	char,icu_56::UnicodeString const &,UErrorCode &)+83r
		extrn _ures_close_56:near
					; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+2A1p
					; icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+2B0p ...
		extrn _u_UCharsToChars_56:near
					; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+1F7p
		extrn _ures_getStringByKeyWithFallback_56:near
					; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+1C2p
		extrn _ures_getByKey_56:near
					; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+178p
					; icu_56::NumberingSystem::createInstanceByName(char const *,UErrorCode	&)+7Ap	...
		extrn _ures_open_56:near
					; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+155p
; const	char *__thiscall icu_56::Locale::getName(icu_56::Locale	*__hidden this)
		extrn __imp_?getName@Locale@icu_56@@QBEPBDXZ:near
					; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+145p
					; DATA XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+145r
; int __cdecl strcmp(const char	*Str1, const char *Str2)
		extrn _strcmp:near	; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+B1p
					; icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+C9p ...
; int __thiscall icu_56::Locale::getKeywordValue(icu_56::Locale	*__hidden this,	const char *, char *, int, enum	UErrorCode *)
		extrn __imp_?getKeywordValue@Locale@icu_56@@QBEHPBDPADHAAW4UErrorCode@@@Z:near
					; CODE XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+7Bp
					; DATA XREF: icu_56::NumberingSystem::createInstance(icu_56::Locale const &,UErrorCode &)+7Br
; const	struct icu_56::Locale *__cdecl static icu_56::Locale::getDefault()
		extrn __imp_?getDefault@Locale@icu_56@@SAABV12@XZ:near
					; CODE XREF: icu_56::NumberingSystem::createInstance(UErrorCode	&)+24p
					; DATA XREF: icu_56::NumberingSystem::createInstance(UErrorCode	&)+24r
		extrn _ures_getInt_56:near
					; CODE XREF: icu_56::NumberingSystem::createInstanceByName(char	const *,UErrorCode &)+E2p
					; icu_56::NumberingSystem::createInstanceByName(char const *,UErrorCode	&)+10Ep
		extrn _ures_openDirect_56:near
					; CODE XREF: icu_56::NumberingSystem::createInstanceByName(char	const *,UErrorCode &)+60p
					; icu_56::NumberingSystem::getAvailableNames(UErrorCode	&)+14Cp
		extrn _ures_getStringByKey_56:near
					; CODE XREF: icu_56::ures_getUnicodeStringByKey(UResourceBundle	const *,char const *,UErrorCode	*)+3Fp
; char *__cdecl	_strncpy(char *Dest, const char	*Source, size_t	Count)
		extrn __imp__strncpy:near
					; CODE XREF: icu_56::NumberingSystem::setName(char const *)+4Fp
					; DATA XREF: icu_56::NumberingSystem::setName(char const *)+4Fr
		extrn _uprv_checkValidMemory:near
					; CODE XREF: icu_56::NumberingSystem::setName(char const *)+38p
; void __thiscall icu_56::UVector::addElement(icu_56::UVector *__hidden	this, void *, enum UErrorCode *)
		extrn __imp_?addElement@UVector@icu_56@@QAEXPAXAAW4UErrorCode@@@Z:near
					; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+289p
					; DATA XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+289r
; _DWORD __thiscall __high icu_56::UnicodeString::UnicodeString(const char *, int, enum	icu_56::UnicodeString::EInvariant)
		extrn __imp_??0UnicodeString@icu_56@@QAE@PBDHW4EInvariant@01@@Z:near
					; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+231p
					; DATA XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+231r
		extrn _ures_getKey_56:near
					; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+1EFp
		extrn _ures_getNextResource_56:near
					; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+1E0p
		extrn _ures_hasNext_56:near
					; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+1C3p
; _DWORD __thiscall icu_56::UVector::UVector(icu_56::UVector *__hidden this, void (__cdecl *)(void *), signed __int8 (__cdecl __high *)(union UElement,	union UElement), enum UErrorCode *)
		extrn __imp_??0UVector@icu_56@@QAE@P6AXPAX@ZP6ACTUElement@@2@ZAAW4UErrorCode@@@Z:near
					; CODE XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+A3p
					; DATA XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+A3r
; void __cdecl uprv_deleteUObject_56(void *)
		extrn _uprv_deleteUObject_56:near
					; DATA XREF: icu_56::NumberingSystem::getAvailableNames(UErrorCode &)+98o
; public: virtual void * __thiscall icu_56::UVector::`scalar deleting destructor'(unsigned int)
		extrn ??_GUVector@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::UVector::`vector deleting destructor'(unsigned int)
		extrn ??_EUVector@icu_56@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:const icu_56::UVector::`local vftable'o
; public: virtual void * __thiscall icu_56::UVector::getDynamicClassID(void)const
		extrn ?getDynamicClassID@UVector@icu_56@@UBEPAXXZ:near
					; DATA XREF: .rdata:0000266Co
; public: virtual void * __thiscall icu_56::UnicodeString::`scalar deleting destructor'(unsigned int)
		extrn ??_GUnicodeString@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::UnicodeString::`vector deleting destructor'(unsigned int)
		extrn ??_EUnicodeString@icu_56@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:const icu_56::UnicodeString::`local	vftable'o
; public: virtual void * __thiscall icu_56::UnicodeString::getDynamicClassID(void)const
		extrn ?getDynamicClassID@UnicodeString@icu_56@@UBEPAXXZ:near
					; DATA XREF: .rdata:0000262Co
; public: virtual void __thiscall icu_56::UnicodeString::extractBetween(int, int, class	icu_56::UnicodeString &)const
		extrn ?extractBetween@UnicodeString@icu_56@@UBEXHHAAV12@@Z:near
					; DATA XREF: .rdata:00002630o
; public: virtual void __thiscall icu_56::UnicodeString::handleReplaceBetween(int, int,	class icu_56::UnicodeString const &)
		extrn ?handleReplaceBetween@UnicodeString@icu_56@@UAEXHHABV12@@Z:near
					; DATA XREF: .rdata:00002634o
; public: virtual void __thiscall icu_56::UnicodeString::copy(int, int,	int)
		extrn ?copy@UnicodeString@icu_56@@UAEXHHH@Z:near
					; DATA XREF: .rdata:00002638o
; public: virtual signed char __thiscall icu_56::UnicodeString::hasMetaData(void)const
		extrn ?hasMetaData@UnicodeString@icu_56@@UBECXZ:near
					; DATA XREF: .rdata:0000263Co
; public: virtual class	icu_56::Replaceable * __thiscall icu_56::UnicodeString::clone(void)const
		extrn ?clone@UnicodeString@icu_56@@UBEPAVReplaceable@2@XZ:near
					; DATA XREF: .rdata:00002640o
; protected: virtual int __thiscall icu_56::UnicodeString::getLength(void)const
		extrn ?getLength@UnicodeString@icu_56@@MBEHXZ:near
					; DATA XREF: .rdata:00002644o
; protected: virtual wchar_t __thiscall	icu_56::UnicodeString::getCharAt(int)const
		extrn ?getCharAt@UnicodeString@icu_56@@MBE_WH@Z:near
					; DATA XREF: .rdata:00002648o
; protected: virtual int __thiscall icu_56::UnicodeString::getChar32At(int)const
		extrn ?getChar32At@UnicodeString@icu_56@@MBEHH@Z:near
					; DATA XREF: .rdata:0000264Co
; _DWORD __thiscall icu_56::UVector::~UVector(icu_56::UVector *__hidden	this)
		extrn __imp_??1UVector@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::UVector::`scalar deleting destructor'(uint)+28p
					; DATA XREF: icu_56::UVector::`scalar deleting destructor'(uint)+28r
; _DWORD __thiscall icu_56::StringEnumeration::StringEnumeration(icu_56::StringEnumeration *__hidden this)
		extrn __imp_??0StringEnumeration@icu_56@@IAE@XZ:near
					; CODE XREF: icu_56::NumsysNameEnumeration::NumsysNameEnumeration(icu_56::UVector *,UErrorCode &)+28p
					; DATA XREF: icu_56::NumsysNameEnumeration::NumsysNameEnumeration(icu_56::UVector *,UErrorCode &)+28r
; public: virtual void * __thiscall icu_56::NumsysNameEnumeration::`scalar deleting destructor'(unsigned int)
		extrn ??_GNumsysNameEnumeration@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::NumsysNameEnumeration::`vector deleting destructor'(unsigned int)
		extrn ??_ENumsysNameEnumeration@icu_56@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:const icu_56::NumsysNameEnumeration::`vftable'o
; public: virtual class	icu_56::StringEnumeration * __thiscall icu_56::StringEnumeration::clone(void)const
		extrn ?clone@StringEnumeration@icu_56@@UBEPAV12@XZ:near
					; DATA XREF: .rdata:0000294Co
; public: virtual char const * __thiscall icu_56::StringEnumeration::next(int *, enum  UErrorCode &)
		extrn ?next@StringEnumeration@icu_56@@UAEPBDPAHAAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:00002954o
; public: virtual wchar_t const	* __thiscall icu_56::StringEnumeration::unext(int *, enum  UErrorCode &)
		extrn ?unext@StringEnumeration@icu_56@@UAEPB_WPAHAAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:00002958o
; public: virtual signed char __thiscall icu_56::StringEnumeration::operator==(class icu_56::StringEnumeration const &)const
		extrn ??8StringEnumeration@icu_56@@UBECABV01@@Z:near
					; DATA XREF: .rdata:00002964o
; public: virtual signed char __thiscall icu_56::StringEnumeration::operator!=(class icu_56::StringEnumeration const &)const
		extrn ??9StringEnumeration@icu_56@@UBECABV01@@Z:near
					; DATA XREF: .rdata:00002968o
; void *__thiscall icu_56::UVector::elementAt(icu_56::UVector *__hidden	this, int)
		extrn __imp_?elementAt@UVector@icu_56@@QBEPAXH@Z:near
					; CODE XREF: icu_56::NumsysNameEnumeration::snext(UErrorCode &)+7Fp
					; DATA XREF: icu_56::NumsysNameEnumeration::snext(UErrorCode &)+7Fr
; int __thiscall icu_56::UVector::size(icu_56::UVector *__hidden this)
		extrn __imp_?size@UVector@icu_56@@QBEHXZ:near
					; CODE XREF: icu_56::NumsysNameEnumeration::snext(UErrorCode &)+40p
					; icu_56::NumsysNameEnumeration::count(UErrorCode &)+40p
					; DATA XREF: ...
; _DWORD __thiscall icu_56::StringEnumeration::~StringEnumeration(icu_56::StringEnumeration *__hidden this)
		extrn __imp_??1StringEnumeration@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::NumsysNameEnumeration::~NumsysNameEnumeration(void)+AEp
					; __unwindfunclet$??1NumsysNameEnumeration@icu_56@@UAE@XZ$0+5p
					; DATA XREF: ...


		end
