;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	C114411A2288CD94DD5A3D291CE72978
; Input	CRC32 :	F14F09D7

; File Name   :	D:\compspace\objfiles\firefox\i18n\sortkey.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		public ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
; public: static bool const std::tr1::integral_constant<bool, 0>::value
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	db 0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 4
		public ?value@?$integral_constant@_N$00@tr1@std@@2_NB
; public: static bool const std::tr1::integral_constant<bool, 1>::value
?value@?$integral_constant@_N$00@tr1@std@@2_NB db 1
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8
		public ?value@?$integral_constant@I$0A@@tr1@std@@2IB
; public: static unsigned int const std::tr1::integral_constant<unsigned int, 0>::value
?value@?$integral_constant@I$0A@@tr1@std@@2IB dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0Ch
		public ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
; public: static int const std::_Arithmetic_traits<bool>::_Rank
?_Rank@?$_Arithmetic_traits@_N@std@@2HB	dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10h
		public ?_Rank@?$_Arithmetic_traits@D@std@@2HB
; public: static int const std::_Arithmetic_traits<char>::_Rank
?_Rank@?$_Arithmetic_traits@D@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14h
		public ?_Rank@?$_Arithmetic_traits@C@std@@2HB
; public: static int const std::_Arithmetic_traits<signed char>::_Rank
?_Rank@?$_Arithmetic_traits@C@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18h
		public ?_Rank@?$_Arithmetic_traits@E@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned char>::_Rank
?_Rank@?$_Arithmetic_traits@E@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1Ch
		public ?_Rank@?$_Arithmetic_traits@F@std@@2HB
; public: static int const std::_Arithmetic_traits<short>::_Rank
?_Rank@?$_Arithmetic_traits@F@std@@2HB dd 3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 20h
		public ?_Rank@?$_Arithmetic_traits@G@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned short>::_Rank
?_Rank@?$_Arithmetic_traits@G@std@@2HB dd 3
					; DATA XREF: .rdata:int	const std::_Locbase<int>::messageso
					; .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::showposo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 24h
		public ?_Rank@?$_Arithmetic_traits@H@std@@2HB
; public: static int const std::_Arithmetic_traits<int>::_Rank
?_Rank@?$_Arithmetic_traits@H@std@@2HB dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 28h
		public ?_Rank@?$_Arithmetic_traits@I@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned int>::_Rank
?_Rank@?$_Arithmetic_traits@I@std@@2HB dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2Ch
		public ?_Rank@?$_Arithmetic_traits@J@std@@2HB
; public: static int const std::_Arithmetic_traits<long>::_Rank
?_Rank@?$_Arithmetic_traits@J@std@@2HB dd 5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 30h
		public ?_Rank@?$_Arithmetic_traits@K@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned long>::_Rank
?_Rank@?$_Arithmetic_traits@K@std@@2HB dd 5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 34h
		public ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
; public: static int const std::_Arithmetic_traits<__int64>::_Rank
?_Rank@?$_Arithmetic_traits@_J@std@@2HB	dd 6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 38h
		public ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned __int64>::_Rank
?_Rank@?$_Arithmetic_traits@_K@std@@2HB	dd 6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3Ch
		public ?_Rank@?$_Arithmetic_traits@M@std@@2HB
; public: static int const std::_Arithmetic_traits<float>::_Rank
?_Rank@?$_Arithmetic_traits@M@std@@2HB dd 7
					; DATA XREF: .rdata:int	const std::_Locbase<int>::allo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 40h
		public ?_Rank@?$_Arithmetic_traits@N@std@@2HB
; public: static int const std::_Arithmetic_traits<double>::_Rank
?_Rank@?$_Arithmetic_traits@N@std@@2HB dd 8
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::lefto
					; .rdata:std::_Iosb<int>::_Openmode const std::_Iosb<int>::_Nocreateo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 44h
		public ?_Rank@?$_Arithmetic_traits@O@std@@2HB
; public: static int const std::_Arithmetic_traits<long	double>::_Rank
?_Rank@?$_Arithmetic_traits@O@std@@2HB dd 9
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 48h
		public ?collate@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::collate
?collate@?$_Locbase@H@std@@2HB dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4Ch
		public ?ctype@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::ctype
?ctype@?$_Locbase@H@std@@2HB dd	2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 50h
		public ?monetary@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::monetary
?monetary@?$_Locbase@H@std@@2HB	dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 54h
		public ?numeric@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::numeric
?numeric@?$_Locbase@H@std@@2HB dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 58h
		public ?time@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::time
?time@?$_Locbase@H@std@@2HB dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5Ch
		public ?messages@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::messages
?messages@?$_Locbase@H@std@@2HB	dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 60h
		public ?all@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::all
?all@?$_Locbase@H@std@@2HB dd offset ?_Rank@?$_Arithmetic_traits@M@std@@2HB+3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 64h
		public ?none@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::none
?none@?$_Locbase@H@std@@2HB dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 68h
		public ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::skipws
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6Ch
		public ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::unitbuf
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 70h
		public ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::uppercase
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 74h
		public ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showbase
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 78h
		public ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showpoint
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7Ch
		public ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showpos
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 80h
		public ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::left
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::righto
					; .rdata:std::_Iosb<int>::_Openmode const std::_Iosb<int>::_Noreplaceo
_rdata		ends			; int const std::_Arithmetic_traits<double>::_Rank

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 84h
		public ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::right
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B	dd offset ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B ; std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::left
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 88h
		public ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::internal
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset loc_FF+1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8Ch
		public ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::dec
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_1FD+3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 90h
		public ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::oct
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_400
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 94h
		public ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::hex
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_7FF+1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 98h
		public ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::scientific
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd	offset loc_FFF+1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9Ch
		public ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::fixed
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B	dd 2000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A0h
		public ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::hexfloat
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 3000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A4h
		public ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::boolalpha
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 4000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A8h
		public ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::_Stdio
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 8000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ACh
		public ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::adjustfield
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	?toUCollator@Collator@icu_56@@QAEPAUUCollator@@XZ ; icu_56::Collator::toUCollator(void)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B0h
		public ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::basefield
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset loc_DFE+2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B4h
		public ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::floatfield
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd	3000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B8h
		public ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::goodbit
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BCh
		public ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::eofbit
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B	dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C0h
		public ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::failbit
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C4h
		public ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::badbit
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B	dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C8h
		public ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::_Hardfail
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CCh
		public ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::in
?in@?$_Iosb@H@std@@2W4_Openmode@12@B dd	1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D0h
		public ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::out
?out@?$_Iosb@H@std@@2W4_Openmode@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D4h
		public ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::ate
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D8h
		public ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::app
?app@?$_Iosb@H@std@@2W4_Openmode@12@B dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0DCh
		public ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::trunc
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B	dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E0h
		public ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::_Nocreate
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E4h
		public ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::_Noreplace
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B dd	offset ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B ;	std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::left
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E8h
		public ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::binary
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int	const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ECh
		public ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::beg
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F0h
		public ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::cur
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F4h
		public ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::end
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	2
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
		assume cs:_bss
		;org 0F8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
; char `public:	static void * __cdecl icu_56::CollationKey::getStaticClassID(void)'::`2'::classID
?classID@?1??getStaticClassID@CollationKey@icu_56@@SAPAXXZ@4DA db ?
					; DATA XREF: icu_56::CollationKey::getStaticClassID(void)+1Eo
		align 4
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0FCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int)
		public ??2@YAPAXI@Z
??2@YAPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp

loc_FF:					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::internalo
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??2@YAPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 134h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 138h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 13Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX@Z
??3@YAXPAX@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??3@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 170h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::Collator *__cdecl icu_56::Collator::fromUCollator(struct UCollator *)
		public ?fromUCollator@Collator@icu_56@@SAPAV12@PAUUCollator@@@Z
?fromUCollator@Collator@icu_56@@SAPAV12@PAUUCollator@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?fromUCollator@Collator@icu_56@@SAPAV12@PAUUCollator@@@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 198h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct icu_56::Collator	*__cdecl icu_56::Collator::fromUCollator(const struct UCollator	*)
		public ?fromUCollator@Collator@icu_56@@SAPBV12@PBUUCollator@@@Z
?fromUCollator@Collator@icu_56@@SAPBV12@PBUUCollator@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?fromUCollator@Collator@icu_56@@SAPBV12@PBUUCollator@@@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1C0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct UCollator *__thiscall icu_56::Collator::toUCollator(icu_56::Collator *__hidden	this)
		public ?toUCollator@Collator@icu_56@@QAEPAUUCollator@@XZ
?toUCollator@Collator@icu_56@@QAEPAUUCollator@@XZ proc near
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::adjustfieldo

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?toUCollator@Collator@icu_56@@QAEPAUUCollator@@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1F0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct UCollator *__thiscall icu_56::Collator::toUCollator(icu_56::Collator *__hidden this)
		public ?toUCollator@Collator@icu_56@@QBEPBUUCollator@@XZ
?toUCollator@Collator@icu_56@@QBEPBUUCollator@@XZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx

loc_1FD:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::deco
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?toUCollator@Collator@icu_56@@QBEPBUUCollator@@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 220h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::CollatorFactory::CollatorFactory(icu_56::CollatorFactory *__hidden this)
		public ??0CollatorFactory@icu_56@@QAE@XZ
??0CollatorFactory@icu_56@@QAE@XZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@XZ ; icu_56::UObject::UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7CollatorFactory@icu_56@@6B@	; const	icu_56::CollatorFactory::`vftable'
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0CollatorFactory@icu_56@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 278h
		dd offset ??_R4CollatorFactory@icu_56@@6B@ ; const icu_56::CollatorFactory::`RTTI Complete Object Locator'
;
; Exported entry
;
		public ??_7CollatorFactory@icu_56@@6B@
; const	icu_56::CollatorFactory::`vftable'
??_7CollatorFactory@icu_56@@6B@	dd offset ??_ECollatorFactory@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::CollatorFactory::CollatorFactory(void)+38o
					; icu_56::CollatorFactory::CollatorFactory(icu_56::CollatorFactory const &)+3Co
					; icu_56::CollatorFactory::`vector deleting destructor'(uint)
		dd offset ?getDynamicClassID@UObject@icu_56@@UBEPAXXZ ;	icu_56::UObject::getDynamicClassID(void)
		dd offset ?visible@CollatorFactory@icu_56@@UBECXZ ; icu_56::CollatorFactory::visible(void)
		dd offset __purecall
		dd offset ?getDisplayName@CollatorFactory@icu_56@@UAEAAVUnicodeString@2@ABVLocale@2@0AAV32@@Z ;	icu_56::CollatorFactory::getDisplayName(icu_56::Locale const &,icu_56::Locale const &,icu_56::UnicodeString &)
		dd offset __purecall
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 294h
		public ??_R4CollatorFactory@icu_56@@6B@
; const	icu_56::CollatorFactory::`RTTI Complete	Object Locator'
??_R4CollatorFactory@icu_56@@6B@ dd 3 dup(0) ; DATA XREF: .rdata:00000278o
		dd offset ??_R0?AVCollatorFactory@icu_56@@@8 ; icu_56::CollatorFactory `RTTI Type Descriptor'
		dd offset ??_R3CollatorFactory@icu_56@@8 ; icu_56::CollatorFactory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 2A8h
		public ??_R0?AVCollatorFactory@icu_56@@@8
; class	icu_56::CollatorFactory	`RTTI Type Descriptor'
??_R0?AVCollatorFactory@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:000002A0o
					; .rdata$r:icu_56::CollatorFactory::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avcollatorfa	db '.?AVCollatorFactory@icu_56@@',0
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 2D0h
		public ??_R3CollatorFactory@icu_56@@8
; icu_56::CollatorFactory::`RTTI Class Hierarchy Descriptor'
??_R3CollatorFactory@icu_56@@8 dd 2 dup(0) ; DATA XREF:	.rdata$r:000002A4o
					; .rdata$r:00000308o
		dd 3
		dd offset ??_R2CollatorFactory@icu_56@@8 ; icu_56::CollatorFactory::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 2E0h
		public ??_R2CollatorFactory@icu_56@@8
; icu_56::CollatorFactory::`RTTI Base Class Array'
??_R2CollatorFactory@icu_56@@8 dd offset ??_R1A@?0A@EA@CollatorFactory@icu_56@@8
					; DATA XREF: .rdata$r:000002DCo
					; icu_56::CollatorFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 2F0h
		public ??_R1A@?0A@EA@CollatorFactory@icu_56@@8
; icu_56::CollatorFactory::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@CollatorFactory@icu_56@@8	dd offset ??_R0?AVCollatorFactory@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::CollatorFactory::`RTTI Base Class	Array'o
					; icu_56::CollatorFactory `RTTI	Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3CollatorFactory@icu_56@@8 ; icu_56::CollatorFactory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 30Ch
		public ??_R1A@?0A@EA@UObject@icu_56@@8
; icu_56::UObject::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UObject@icu_56@@8	dd offset ??_R0?AVUObject@icu_56@@@8
					; DATA XREF: .rdata$r:000002E4o
					; .rdata$r:icu_56::UObject::`RTTI Base Class Array'o ...
					; icu_56::UObject `RTTI	Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UObject@icu_56@@8 ; icu_56::UObject::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 328h
		public ??_R0?AVUObject@icu_56@@@8
; class	icu_56::UObject	`RTTI Type Descriptor'
??_R0?AVUObject@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UObject::`RTTI Base Class	Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avuobject@ic	db '.?AVUObject@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 348h
		public ??_R3UObject@icu_56@@8
; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
??_R3UObject@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00000324o
		dd 2
		dd offset ??_R2UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 358h
		public ??_R2UObject@icu_56@@8
; icu_56::UObject::`RTTI Base Class Array'
??_R2UObject@icu_56@@8 dd offset ??_R1A@?0A@EA@UObject@icu_56@@8
					; DATA XREF: .rdata$r:00000354o
					; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 364h
		public ??_R13?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@UMemory@icu_56@@8 dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:000002E8o
					; .rdata$r:0000035Co ...
					; icu_56::UMemory `RTTI	Type Descriptor'
		dd 0
		dd 4, 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 380h
		public ??_R0?AVUMemory@icu_56@@@8
; class	icu_56::UMemory	`RTTI Type Descriptor'
??_R0?AVUMemory@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Descriptor at (4,-1,0,64)'o
					; .rdata$r:icu_56::UMemory::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?avumemory@ic	db '.?AVUMemory@icu_56@@',0
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 3A0h
		public ??_R3UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
??_R3UMemory@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:0000037Co
					; .rdata$r:000003D0o
		dd 1
		dd offset ??_R2UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 3B0h
		public ??_R2UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Array'
??_R2UMemory@icu_56@@8 dd offset ??_R1A@?0A@EA@UMemory@icu_56@@8
					; DATA XREF: .rdata$r:000003ACo
					; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 3B8h
		public ??_R1A@?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UMemory@icu_56@@8	dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Array'o
					; icu_56::UMemory `RTTI	Type Descriptor'
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3D4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::CollatorFactory::CollatorFactory(icu_56::CollatorFactory *this, const struct icu_56::CollatorFactory *)
		public ??0CollatorFactory@icu_56@@QAE@ABV01@@Z
??0CollatorFactory@icu_56@@QAE@ABV01@@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax		; struct icu_56::UObject *
		mov	ecx, [ebp+var_8] ; this

loc_400:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::octo
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@ABV01@@Z ; icu_56::UObject::UObject(icu_56::UObject const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7CollatorFactory@icu_56@@6B@	; const	icu_56::CollatorFactory::`vftable'
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0CollatorFactory@icu_56@@QAE@ABV01@@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 430h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::CollatorFactory	& __thiscall icu_56::CollatorFactory::operator=(class icu_56::CollatorFactory const &)
		public ??4CollatorFactory@icu_56@@QAEAAV01@ABV01@@Z
??4CollatorFactory@icu_56@@QAEAAV01@ABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		call	dword ptr ds:__imp_??4UObject@icu_56@@QAEAAV01@ABV01@@Z	; icu_56::UObject::operator=(icu_56::UObject const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??4CollatorFactory@icu_56@@QAEAAV01@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 484h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::CollatorFactory::`scalar deleting destructor'(unsigned int)
		public ??_GCollatorFactory@icu_56@@UAEPAXI@Z
??_GCollatorFactory@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1CollatorFactory@icu_56@@UAE@XZ ; icu_56::CollatorFactory::~CollatorFactory(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_4CD
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_4CD:				; CODE XREF: icu_56::CollatorFactory::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GCollatorFactory@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4E8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::CollatorFactory::`vector deleting destructor'(unsigned int)
		public ??_ECollatorFactory@icu_56@@UAEPAXI@Z
??_ECollatorFactory@icu_56@@UAEPAXI@Z proc near
					; DATA XREF: .rdata:const icu_56::CollatorFactory::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		and	eax, 2
		jz	short loc_553
		push	offset ??1CollatorFactory@icu_56@@UAE@XZ ; icu_56::CollatorFactory::~CollatorFactory(void)
		mov	eax, [ebp+var_8]
		mov	ecx, [eax-4]
		push	ecx
		push	4
		mov	edx, [ebp+var_8]
		push	edx
		call	??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_54B
		mov	eax, [ebp+var_8]
		sub	eax, 4
		mov	esi, esp
		push	eax		; void *
		call	dword ptr ds:__imp_??_VUMemory@icu_56@@SAXPAX@Z	; icu_56::UMemory::operator delete[](void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_54B:				; CODE XREF: icu_56::CollatorFactory::`vector deleting destructor'(uint)+48j
		mov	eax, [ebp+var_8]
		sub	eax, 4
		jmp	short loc_57C
; ---------------------------------------------------------------------------

loc_553:				; CODE XREF: icu_56::CollatorFactory::`vector deleting destructor'(uint)+29j
		mov	ecx, [ebp+var_8] ; this
		call	??1CollatorFactory@icu_56@@UAE@XZ ; icu_56::CollatorFactory::~CollatorFactory(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_579
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_579:				; CODE XREF: icu_56::CollatorFactory::`vector deleting destructor'(uint)+79j
		mov	eax, [ebp+var_8]

loc_57C:				; CODE XREF: icu_56::CollatorFactory::`vector deleting destructor'(uint)+69j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_ECollatorFactory@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 594h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; unsigned __int8 *__thiscall icu_56::CollationKey::getBytes(icu_56::CollationKey *__hidden this)
		public ?getBytes@CollationKey@icu_56@@AAEPAEXZ
?getBytes@CollationKey@icu_56@@AAEPAEXZ	proc near
					; CODE XREF: icu_56::CollationKey::CollationKey(uchar const *,int)+D1p
					; icu_56::CollationKey::CollationKey(icu_56::CollationKey const	&)+F6p	...

var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+4], 0
		jl	short loc_5CE
		mov	ecx, [ebp+var_8]
		add	ecx, 0Ch
		mov	[ebp+var_D0], ecx
		jmp	short loc_5DA
; ---------------------------------------------------------------------------

loc_5CE:				; CODE XREF: icu_56::CollationKey::getBytes(void)+2Aj
		mov	edx, [ebp+var_8]
		mov	eax, [edx+0Ch]
		mov	[ebp+var_D0], eax

loc_5DA:				; CODE XREF: icu_56::CollationKey::getBytes(void)+38j
		mov	eax, [ebp+var_D0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getBytes@CollationKey@icu_56@@AAEPAEXZ	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 5E8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	unsigned __int8	*__thiscall icu_56::CollationKey::getBytes(icu_56::CollationKey	*__hidden this)
		public ?getBytes@CollationKey@icu_56@@ABEPBEXZ
?getBytes@CollationKey@icu_56@@ABEPBEXZ	proc near
					; CODE XREF: icu_56::CollationKey::getByteArray(int &)+33p
					; icu_56::CollationKey::CollationKey(icu_56::CollationKey const	&)+D8p	...

var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+4], 0
		jl	short loc_622
		mov	ecx, [ebp+var_8]
		add	ecx, 0Ch
		mov	[ebp+var_D0], ecx
		jmp	short loc_62E
; ---------------------------------------------------------------------------

loc_622:				; CODE XREF: icu_56::CollationKey::getBytes(void)+2Aj
		mov	edx, [ebp+var_8]
		mov	eax, [edx+0Ch]
		mov	[ebp+var_D0], eax

loc_62E:				; CODE XREF: icu_56::CollationKey::getBytes(void)+38j
		mov	eax, [ebp+var_D0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getBytes@CollationKey@icu_56@@ABEPBEXZ	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 63Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::CollationKey::getCapacity(icu_56::CollationKey	*__hidden this)
		public ?getCapacity@CollationKey@icu_56@@ABEHXZ
?getCapacity@CollationKey@icu_56@@ABEHXZ proc near
					; CODE XREF: icu_56::CollationKey::CollationKey(uchar const *,int)+8Cp
					; icu_56::CollationKey::CollationKey(icu_56::CollationKey const	&)+A7p	...

var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+4], 0
		jl	short loc_674
		mov	[ebp+var_D0], 20h ; ' '
		jmp	short loc_680
; ---------------------------------------------------------------------------

loc_674:				; CODE XREF: icu_56::CollationKey::getCapacity(void)+2Aj
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+10h]
		mov	[ebp+var_D0], edx

loc_680:				; CODE XREF: icu_56::CollationKey::getCapacity(void)+36j
		mov	eax, [ebp+var_D0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getCapacity@CollationKey@icu_56@@ABEHXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 690h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::CollationKey::getLength(icu_56::CollationKey *__hidden	this)
		public ?getLength@CollationKey@icu_56@@ABEHXZ
?getLength@CollationKey@icu_56@@ABEHXZ proc near
					; CODE XREF: icu_56::CollationKey::getByteArray(int &)+26p
					; icu_56::CollationKey::CollationKey(icu_56::CollationKey const	&)+6Bp	...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+4]
		and	eax, 7FFFFFFFh
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getLength@CollationKey@icu_56@@ABEHXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 6C8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::CollationKey::`scalar deleting destructor'(unsigned int)
		public ??_GCollationKey@icu_56@@UAEPAXI@Z
??_GCollationKey@icu_56@@UAEPAXI@Z proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1CollationKey@icu_56@@UAE@XZ ; icu_56::CollationKey::~CollationKey(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_711
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_711:				; CODE XREF: icu_56::CollationKey::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GCollationKey@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 72Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::CollationKey::`vector deleting destructor'(unsigned int)
		public ??_ECollationKey@icu_56@@UAEPAXI@Z
??_ECollationKey@icu_56@@UAEPAXI@Z proc	near
					; DATA XREF: .rdata:const icu_56::CollationKey::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		and	eax, 2
		jz	short loc_797
		push	offset ??1CollationKey@icu_56@@UAE@XZ ;	icu_56::CollationKey::~CollationKey(void)
		mov	eax, [ebp+var_8]
		mov	ecx, [eax-4]
		push	ecx
		push	2Ch ; ','
		mov	edx, [ebp+var_8]
		push	edx
		call	??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_78F
		mov	eax, [ebp+var_8]
		sub	eax, 4
		mov	esi, esp
		push	eax		; void *
		call	dword ptr ds:__imp_??_VUMemory@icu_56@@SAXPAX@Z	; icu_56::UMemory::operator delete[](void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_78F:				; CODE XREF: icu_56::CollationKey::`vector deleting destructor'(uint)+48j
		mov	eax, [ebp+var_8]
		sub	eax, 4
		jmp	short loc_7C0
; ---------------------------------------------------------------------------

loc_797:				; CODE XREF: icu_56::CollationKey::`vector deleting destructor'(uint)+29j
		mov	ecx, [ebp+var_8] ; this
		call	??1CollationKey@icu_56@@UAE@XZ ; icu_56::CollationKey::~CollationKey(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_7BD
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_7BD:				; CODE XREF: icu_56::CollationKey::`vector deleting destructor'(uint)+79j
		mov	eax, [ebp+var_8]

loc_7C0:				; CODE XREF: icu_56::CollationKey::`vector deleting destructor'(uint)+69j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_ECollationKey@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 7D8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	icu_56::CollationKey::operator!=(icu_56::CollationKey *)
		public ??9CollationKey@icu_56@@QBECABV01@@Z
??9CollationKey@icu_56@@QBECABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; icu_56::CollationKey *

loc_7FF:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::hexo
		mov	ecx, [ebp+var_8]
		call	??8CollationKey@icu_56@@QBECABV01@@Z ; icu_56::CollationKey::operator==(icu_56::CollationKey const &)
		movsx	ecx, al
		test	ecx, ecx
		setz	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??9CollationKey@icu_56@@QBECABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 828h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__thiscall icu_56::CollationKey::isBogus(icu_56::CollationKey *__hidden	this)
		public ?isBogus@CollationKey@icu_56@@QBECXZ
?isBogus@CollationKey@icu_56@@QBECXZ proc near
					; CODE XREF: icu_56::CollationKey::CollationKey(icu_56::CollationKey const &)+85p
					; icu_56::CollationKey::operator=(icu_56::CollationKey const &)+32p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+8], 2
		setz	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?isBogus@CollationKey@icu_56@@QBECXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 85Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	unsigned __int8	*__thiscall icu_56::CollationKey::getByteArray(icu_56::CollationKey *this, int *)
		public ?getByteArray@CollationKey@icu_56@@QBEPBEAAH@Z
?getByteArray@CollationKey@icu_56@@QBEPBEAAH@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	?getLength@CollationKey@icu_56@@ABEHXZ ; icu_56::CollationKey::getLength(void)
		mov	ecx, [ebp+arg_0]
		mov	[ecx], eax
		mov	ecx, [ebp+var_8] ; this
		call	?getBytes@CollationKey@icu_56@@ABEPBEXZ	; icu_56::CollationKey::getBytes(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?getByteArray@CollationKey@icu_56@@QBEPBEAAH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 8ACh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	icu_56::CollationKey::getStaticClassID()
		public ?getStaticClassID@CollationKey@icu_56@@SAPAXXZ
?getStaticClassID@CollationKey@icu_56@@SAPAXXZ proc near
					; CODE XREF: icu_56::CollationKey::getDynamicClassID(void)+23p

var_C0		= byte ptr -0C0h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, offset ?classID@?1??getStaticClassID@CollationKey@icu_56@@SAPAXXZ@4DA ; char `icu_56::CollationKey::getStaticClassID(void)'::`2'::classID
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getStaticClassID@CollationKey@icu_56@@SAPAXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 8D8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__thiscall icu_56::CollationKey::getDynamicClassID(icu_56::CollationKey	*__hidden this)
		public ?getDynamicClassID@CollationKey@icu_56@@UBEPAXXZ
?getDynamicClassID@CollationKey@icu_56@@UBEPAXXZ proc near ; DATA XREF:	.rdata:00000988o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		call	?getStaticClassID@CollationKey@icu_56@@SAPAXXZ ; icu_56::CollationKey::getStaticClassID(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?getDynamicClassID@CollationKey@icu_56@@UBEPAXXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 914h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::CollationKey::CollationKey(icu_56::CollationKey *__hidden this)
		public ??0CollationKey@icu_56@@QAE@XZ
??0CollationKey@icu_56@@QAE@XZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@XZ ; icu_56::UObject::UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7CollationKey@icu_56@@6B@ ; const icu_56::CollationKey::`vftable'
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+4], 0
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+8], 1
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0CollationKey@icu_56@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 980h
		dd offset ??_R4CollationKey@icu_56@@6B@	; const	icu_56::CollationKey::`RTTI Complete Object Locator'
;
; Exported entry
;
		public ??_7CollationKey@icu_56@@6B@
; const	icu_56::CollationKey::`vftable'
??_7CollationKey@icu_56@@6B@ dd	offset ??_ECollationKey@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::CollationKey::CollationKey(void)+38o
					; icu_56::CollationKey::CollationKey(uchar const *,int)+5Eo ...
					; icu_56::CollationKey::`vector	deleting destructor'(uint)
		dd offset ?getDynamicClassID@CollationKey@icu_56@@UBEPAXXZ ; icu_56::CollationKey::getDynamicClassID(void)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 98Ch
		public ??_R4CollationKey@icu_56@@6B@
; const	icu_56::CollationKey::`RTTI Complete Object Locator'
??_R4CollationKey@icu_56@@6B@ dd 3 dup(0) ; DATA XREF: .rdata:00000980o
		dd offset ??_R0?AVCollationKey@icu_56@@@8 ; icu_56::CollationKey `RTTI Type Descriptor'
		dd offset ??_R3CollationKey@icu_56@@8 ;	icu_56::CollationKey::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 9A0h
		public ??_R0?AVCollationKey@icu_56@@@8
; class	icu_56::CollationKey `RTTI Type	Descriptor'
??_R0?AVCollationKey@icu_56@@@8	dd offset ??_7type_info@@6B@ ; DATA XREF: .rdata$r:00000998o
					; .rdata$r:icu_56::CollationKey::`RTTI Base Class Descriptor at	(0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?avcollationk	db '.?AVCollationKey@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9C4h
		public ??_R3CollationKey@icu_56@@8
; icu_56::CollationKey::`RTTI Class Hierarchy Descriptor'
??_R3CollationKey@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:0000099Co
					; .rdata$r:000009FCo
		dd 3
		dd offset ??_R2CollationKey@icu_56@@8 ;	icu_56::CollationKey::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9D4h
		public ??_R2CollationKey@icu_56@@8
; icu_56::CollationKey::`RTTI Base Class Array'
??_R2CollationKey@icu_56@@8 dd offset ??_R1A@?0A@EA@CollationKey@icu_56@@8
					; DATA XREF: .rdata$r:000009D0o
					; icu_56::CollationKey::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9E4h
		public ??_R1A@?0A@EA@CollationKey@icu_56@@8
; icu_56::CollationKey::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@CollationKey@icu_56@@8 dd	offset ??_R0?AVCollationKey@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::CollationKey::`RTTI Base Class Array'o
					; icu_56::CollationKey `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3CollationKey@icu_56@@8 ;	icu_56::CollationKey::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A00h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::CollationKey::CollationKey(icu_56::CollationKey *this, const unsigned __int8 *Src, int)
		public ??0CollationKey@icu_56@@QAE@PBEH@Z
??0CollationKey@icu_56@@QAE@PBEH@Z proc	near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0CollationKey@icu_56@@QAE@PBEH@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_14] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@XZ ; icu_56::UObject::UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7CollationKey@icu_56@@6B@ ; const icu_56::CollationKey::`vftable'
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+Size]
		mov	[eax+4], ecx
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax+8], 0
		cmp	[ebp+Size], 0
		jl	short loc_AA8
		cmp	[ebp+Src], 0
		jnz	short loc_A89
		cmp	[ebp+Size], 0
		jnz	short loc_AA8

loc_A89:				; CODE XREF: icu_56::CollationKey::CollationKey(uchar const *,int)+81j
		mov	ecx, [ebp+var_14] ; this
		call	?getCapacity@CollationKey@icu_56@@ABEHXZ ; icu_56::CollationKey::getCapacity(void)
		cmp	[ebp+Size], eax
		jle	short loc_AB2
		push	0		; int
		mov	eax, [ebp+Size]
		push	eax		; int
		mov	ecx, [ebp+var_14] ; this
		call	?reallocate@CollationKey@icu_56@@AAEPAEHH@Z ; icu_56::CollationKey::reallocate(int,int)
		test	eax, eax
		jnz	short loc_AB2

loc_AA8:				; CODE XREF: icu_56::CollationKey::CollationKey(uchar const *,int)+7Bj
					; icu_56::CollationKey::CollationKey(uchar const *,int)+87j
		mov	ecx, [ebp+var_14] ; this
		call	?setToBogus@CollationKey@icu_56@@AAEAAV12@XZ ; icu_56::CollationKey::setToBogus(void)
		jmp	short loc_ADF
; ---------------------------------------------------------------------------

loc_AB2:				; CODE XREF: icu_56::CollationKey::CollationKey(uchar const *,int)+94j
					; icu_56::CollationKey::CollationKey(uchar const *,int)+A6j
		cmp	[ebp+Size], 0
		jle	short loc_ADF
		push	1
		mov	eax, [ebp+Src]
		push	eax
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	ecx, [ebp+Size]
		push	ecx		; Size
		mov	edx, [ebp+Src]
		push	edx		; Src
		mov	ecx, [ebp+var_14] ; this
		call	?getBytes@CollationKey@icu_56@@AAEPAEXZ	; icu_56::CollationKey::getBytes(void)
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch

loc_ADF:				; CODE XREF: icu_56::CollationKey::CollationKey(uchar const *,int)+B0j
					; icu_56::CollationKey::CollationKey(uchar const *,int)+B6j
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??0CollationKey@icu_56@@QAE@PBEH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 0B0Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0CollationKey@icu_56@@QAE@PBEH@Z$0 proc near
					; DATA XREF: .xdata$x:00000B40o
		mov	esi, esp
		mov	ecx, [ebp-14h]	; this
		call	dword ptr ds:__imp_??1UObject@icu_56@@UAE@XZ ; icu_56::UObject::~UObject(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0CollationKey@icu_56@@QAE@PBEH@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0CollationKey@icu_56@@QAE@PBEH@Z proc near
					; DATA XREF: icu_56::CollationKey::CollationKey(uchar const *,int)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0DCh]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0CollationKey@icu_56@@QAE@PBEH@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0CollationKey@icu_56@@QAE@PBEH@Z endp

_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 0B3Ch
__unwindtable$??0CollationKey@icu_56@@QAE@PBEH@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00000B4Co
		dd offset __unwindfunclet$??0CollationKey@icu_56@@QAE@PBEH@Z$0
__ehfuncinfo$??0CollationKey@icu_56@@QAE@PBEH@Z	dd 19930522h, 1
					; DATA XREF: __ehhandler$??0CollationKey@icu_56@@QAE@PBEH@Z+14o
		dd offset __unwindtable$??0CollationKey@icu_56@@QAE@PBEH@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0B68h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::CollationKey::CollationKey(icu_56::CollationKey *this, const struct	icu_56::CollationKey *)
		public ??0CollationKey@icu_56@@QAE@ABV01@@Z
??0CollationKey@icu_56@@QAE@ABV01@@Z proc near

var_E4		= byte ptr -0E4h
Size		= dword	ptr -20h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0CollationKey@icu_56@@QAE@ABV01@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_E4]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax		; struct icu_56::UObject *
		mov	ecx, [ebp+var_14] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@ABV01@@Z ; icu_56::UObject::UObject(icu_56::UObject const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7CollationKey@icu_56@@6B@ ; const icu_56::CollationKey::`vftable'
		mov	ecx, [ebp+arg_0] ; this
		call	?getLength@CollationKey@icu_56@@ABEHXZ ; icu_56::CollationKey::getLength(void)
		mov	ecx, [ebp+var_14]
		mov	[ecx+4], eax
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		mov	[eax+8], edx
		mov	ecx, [ebp+arg_0] ; this
		call	?isBogus@CollationKey@icu_56@@QBECXZ ; icu_56::CollationKey::isBogus(void)
		movsx	eax, al
		test	eax, eax
		jz	short loc_C03
		mov	ecx, [ebp+var_14] ; this
		call	?setToBogus@CollationKey@icu_56@@AAEAAV12@XZ ; icu_56::CollationKey::setToBogus(void)
		jmp	short loc_C6C
; ---------------------------------------------------------------------------

loc_C03:				; CODE XREF: icu_56::CollationKey::CollationKey(icu_56::CollationKey const &)+8Fj
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	[ebp+Size], ecx
		mov	ecx, [ebp+var_14] ; this
		call	?getCapacity@CollationKey@icu_56@@ABEHXZ ; icu_56::CollationKey::getCapacity(void)
		cmp	[ebp+Size], eax
		jle	short loc_C35
		push	0		; int
		mov	eax, [ebp+Size]
		push	eax		; int
		mov	ecx, [ebp+var_14] ; this
		call	?reallocate@CollationKey@icu_56@@AAEPAEHH@Z ; icu_56::CollationKey::reallocate(int,int)
		test	eax, eax
		jnz	short loc_C35
		mov	ecx, [ebp+var_14] ; this
		call	?setToBogus@CollationKey@icu_56@@AAEAAV12@XZ ; icu_56::CollationKey::setToBogus(void)
		jmp	short loc_C6C
; ---------------------------------------------------------------------------

loc_C35:				; CODE XREF: icu_56::CollationKey::CollationKey(icu_56::CollationKey const &)+AFj
					; icu_56::CollationKey::CollationKey(icu_56::CollationKey const	&)+C1j
		cmp	[ebp+Size], 0
		jle	short loc_C6C
		push	1
		mov	ecx, [ebp+arg_0] ; this
		call	?getBytes@CollationKey@icu_56@@ABEPBEXZ	; icu_56::CollationKey::getBytes(void)
		push	eax
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	eax, [ebp+Size]
		push	eax		; Size
		mov	ecx, [ebp+arg_0] ; this
		call	?getBytes@CollationKey@icu_56@@ABEPBEXZ	; icu_56::CollationKey::getBytes(void)
		push	eax		; Src
		mov	ecx, [ebp+var_14] ; this
		call	?getBytes@CollationKey@icu_56@@AAEPAEXZ	; icu_56::CollationKey::getBytes(void)
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch

loc_C6C:				; CODE XREF: icu_56::CollationKey::CollationKey(icu_56::CollationKey const &)+99j
					; icu_56::CollationKey::CollationKey(icu_56::CollationKey const	&)+CBj	...
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0CollationKey@icu_56@@QAE@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 0C98h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0CollationKey@icu_56@@QAE@ABV01@@Z$0 proc near
					; DATA XREF: .xdata$x:00000CCCo
		mov	esi, esp
		mov	ecx, [ebp-14h]	; this
		call	dword ptr ds:__imp_??1UObject@icu_56@@UAE@XZ ; icu_56::UObject::~UObject(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0CollationKey@icu_56@@QAE@ABV01@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0CollationKey@icu_56@@QAE@ABV01@@Z proc near
					; DATA XREF: icu_56::CollationKey::CollationKey(icu_56::CollationKey const &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0E8h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0CollationKey@icu_56@@QAE@ABV01@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0CollationKey@icu_56@@QAE@ABV01@@Z endp

_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 0CC8h
__unwindtable$??0CollationKey@icu_56@@QAE@ABV01@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00000CD8o
		dd offset __unwindfunclet$??0CollationKey@icu_56@@QAE@ABV01@@Z$0
__ehfuncinfo$??0CollationKey@icu_56@@QAE@ABV01@@Z dd 19930522h,	1
					; DATA XREF: __ehhandler$??0CollationKey@icu_56@@QAE@ABV01@@Z+14o
		dd offset __unwindtable$??0CollationKey@icu_56@@QAE@ABV01@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0CF4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::CollationKey::~CollationKey(icu_56::CollationKey *__hidden this)
		public ??1CollationKey@icu_56@@UAE@XZ
??1CollationKey@icu_56@@UAE@XZ proc near
					; CODE XREF: icu_56::CollationKey::`scalar deleting destructor'(uint)+26p
					; icu_56::CollationKey::`vector	deleting destructor'(uint)+6Ep
					; DATA XREF: ...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7CollationKey@icu_56@@6B@ ; const icu_56::CollationKey::`vftable'
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+4], 0
		jge	short loc_D38
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+0Ch]
		push	ecx
		call	_uprv_free_56
		add	esp, 4

loc_D38:				; CODE XREF: icu_56::CollationKey::~CollationKey(void)+33j
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??1UObject@icu_56@@UAE@XZ ; icu_56::UObject::~UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1CollationKey@icu_56@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0D60h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; unsigned __int8 *__thiscall icu_56::CollationKey::reallocate(icu_56::CollationKey *this, int,	int)
		public ?reallocate@CollationKey@icu_56@@AAEPAEHH@Z
?reallocate@CollationKey@icu_56@@AAEPAEHH@Z proc near
					; CODE XREF: icu_56::CollationKey::CollationKey(uchar const *,int)+9Fp
					; icu_56::CollationKey::CollationKey(icu_56::CollationKey const	&)+BAp	...

var_D8		= byte ptr -0D8h
Dst		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_uprv_malloc_56
		add	esp, 4
		mov	[ebp+Dst], eax
		cmp	[ebp+Dst], 0
		jnz	short loc_D9C
		xor	eax, eax
		jmp	short loc_E0D
; ---------------------------------------------------------------------------

loc_D9C:				; CODE XREF: icu_56::CollationKey::reallocate(int,int)+36j
		cmp	[ebp+Size], 0
		jle	short loc_DCE
		push	1
		mov	ecx, [ebp+var_8] ; this
		call	?getBytes@CollationKey@icu_56@@AAEPAEXZ	; icu_56::CollationKey::getBytes(void)
		push	eax
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	eax, [ebp+Size]
		push	eax		; Size
		mov	ecx, [ebp+var_8] ; this
		call	?getBytes@CollationKey@icu_56@@AAEPAEXZ	; icu_56::CollationKey::getBytes(void)
		push	eax		; Src
		mov	ecx, [ebp+Dst]
		push	ecx		; Dst
		call	_memcpy
		add	esp, 0Ch

loc_DCE:				; CODE XREF: icu_56::CollationKey::reallocate(int,int)+40j
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+4], 0
		jge	short loc_DE6
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+0Ch]
		push	ecx
		call	_uprv_free_56
		add	esp, 4

loc_DE6:				; CODE XREF: icu_56::CollationKey::reallocate(int,int)+75j
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+Dst]
		mov	[eax+0Ch], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+10h], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]

loc_DFE:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::basefieldo
		or	ecx, 80000000h
		mov	edx, [ebp+var_8]
		mov	[edx+4], ecx
		mov	eax, [ebp+Dst]

loc_E0D:				; CODE XREF: icu_56::CollationKey::reallocate(int,int)+3Aj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?reallocate@CollationKey@icu_56@@AAEPAEHH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0E24h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::CollationKey::setLength(icu_56::CollationKey *this, int)
		public ?setLength@CollationKey@icu_56@@AAEXH@Z
?setLength@CollationKey@icu_56@@AAEXH@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		and	ecx, 80000000h
		or	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_8]
		mov	[edx+4], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+8], 0
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?setLength@CollationKey@icu_56@@AAEXH@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0E70h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::CollationKey *__thiscall icu_56::CollationKey::reset(icu_56::CollationKey *__hidden this)
		public ?reset@CollationKey@icu_56@@AAEAAV12@XZ
?reset@CollationKey@icu_56@@AAEAAV12@XZ	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		and	ecx, 80000000h
		mov	edx, [ebp+var_8]
		mov	[edx+4], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+8], 1
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?reset@CollationKey@icu_56@@AAEAAV12@XZ	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0EBCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::CollationKey *__thiscall icu_56::CollationKey::setToBogus(icu_56::CollationKey	*__hidden this)
		public ?setToBogus@CollationKey@icu_56@@AAEAAV12@XZ
?setToBogus@CollationKey@icu_56@@AAEAAV12@XZ proc near
					; CODE XREF: icu_56::CollationKey::CollationKey(uchar const *,int)+ABp
					; icu_56::CollationKey::CollationKey(icu_56::CollationKey const	&)+94p	...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		and	ecx, 80000000h
		mov	edx, [ebp+var_8]
		mov	[edx+4], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+8], 2
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?setToBogus@CollationKey@icu_56@@AAEAAV12@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0F08h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	icu_56::CollationKey::operator==(icu_56::CollationKey *)
		public ??8CollationKey@icu_56@@QBECABV01@@Z
??8CollationKey@icu_56@@QBECABV01@@Z proc near
					; CODE XREF: icu_56::CollationKey::operator!=(icu_56::CollationKey const &)+2Ap

var_D0		= byte ptr -0D0h
var_CD		= byte ptr -0CDh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	?getLength@CollationKey@icu_56@@ABEHXZ ; icu_56::CollationKey::getLength(void)
		mov	esi, eax
		mov	ecx, [ebp+arg_0] ; this
		call	?getLength@CollationKey@icu_56@@ABEHXZ ; icu_56::CollationKey::getLength(void)
		cmp	esi, eax
		jnz	short loc_F79
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_0]
		jz	short loc_F70
		mov	ecx, [ebp+var_8] ; this
		call	?getLength@CollationKey@icu_56@@ABEHXZ ; icu_56::CollationKey::getLength(void)
		push	eax		; Size
		mov	ecx, [ebp+arg_0] ; this
		call	?getBytes@CollationKey@icu_56@@ABEPBEXZ	; icu_56::CollationKey::getBytes(void)
		push	eax		; Buf2
		mov	ecx, [ebp+var_8] ; this
		call	?getBytes@CollationKey@icu_56@@ABEPBEXZ	; icu_56::CollationKey::getBytes(void)
		push	eax		; Buf1
		call	_memcmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_F79

loc_F70:				; CODE XREF: icu_56::CollationKey::operator==(icu_56::CollationKey const &)+3Fj
		mov	[ebp+var_CD], 1
		jmp	short loc_F80
; ---------------------------------------------------------------------------

loc_F79:				; CODE XREF: icu_56::CollationKey::operator==(icu_56::CollationKey const &)+37j
					; icu_56::CollationKey::operator==(icu_56::CollationKey	const &)+66j
		mov	[ebp+var_CD], 0

loc_F80:				; CODE XREF: icu_56::CollationKey::operator==(icu_56::CollationKey const &)+6Fj
		mov	al, [ebp+var_CD]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??8CollationKey@icu_56@@QBECABV01@@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0F9Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	icu_56::CollationKey::operator=(icu_56::CollationKey *)
		public ??4CollationKey@icu_56@@QAEABV01@ABV01@@Z
??4CollationKey@icu_56@@QAEABV01@ABV01@@Z proc near

var_D8		= byte ptr -0D8h
Size		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_0]
		jz	loc_1073
		mov	ecx, [ebp+arg_0] ; this
		call	?isBogus@CollationKey@icu_56@@QBECXZ ; icu_56::CollationKey::isBogus(void)
		movsx	eax, al
		test	eax, eax
		jz	short loc_FE7
		mov	ecx, [ebp+var_8] ; this
		call	?setToBogus@CollationKey@icu_56@@AAEAAV12@XZ ; icu_56::CollationKey::setToBogus(void)
		jmp	loc_1076
; ---------------------------------------------------------------------------

loc_FE7:				; CODE XREF: icu_56::CollationKey::operator=(icu_56::CollationKey const	&)+3Cj
		mov	ecx, [ebp+arg_0] ; this
		call	?getLength@CollationKey@icu_56@@ABEHXZ ; icu_56::CollationKey::getLength(void)
		mov	[ebp+Size], eax
		mov	ecx, [ebp+var_8] ; this
		call	?getCapacity@CollationKey@icu_56@@ABEHXZ ; icu_56::CollationKey::getCapacity(void)
		cmp	[ebp+Size], eax
		jle	short loc_101B

loc_FFF:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::scientifico
		push	0		; int
		mov	eax, [ebp+Size]
		push	eax		; int
		mov	ecx, [ebp+var_8] ; this
		call	?reallocate@CollationKey@icu_56@@AAEPAEHH@Z ; icu_56::CollationKey::reallocate(int,int)
		test	eax, eax
		jnz	short loc_101B
		mov	ecx, [ebp+var_8] ; this
		call	?setToBogus@CollationKey@icu_56@@AAEAAV12@XZ ; icu_56::CollationKey::setToBogus(void)
		jmp	short loc_1076
; ---------------------------------------------------------------------------

loc_101B:				; CODE XREF: icu_56::CollationKey::operator=(icu_56::CollationKey const	&)+61j
					; icu_56::CollationKey::operator=(icu_56::CollationKey const &)+73j
		cmp	[ebp+Size], 0
		jle	short loc_1052
		push	1
		mov	ecx, [ebp+arg_0] ; this
		call	?getBytes@CollationKey@icu_56@@ABEPBEXZ	; icu_56::CollationKey::getBytes(void)
		push	eax
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	eax, [ebp+Size]
		push	eax		; Size
		mov	ecx, [ebp+arg_0] ; this
		call	?getBytes@CollationKey@icu_56@@ABEPBEXZ	; icu_56::CollationKey::getBytes(void)
		push	eax		; Src
		mov	ecx, [ebp+var_8] ; this
		call	?getBytes@CollationKey@icu_56@@AAEPAEXZ	; icu_56::CollationKey::getBytes(void)
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch

loc_1052:				; CODE XREF: icu_56::CollationKey::operator=(icu_56::CollationKey const	&)+83j
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		and	ecx, 80000000h
		or	ecx, [ebp+Size]
		mov	edx, [ebp+var_8]
		mov	[edx+4], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		mov	[eax+8], edx

loc_1073:				; CODE XREF: icu_56::CollationKey::operator=(icu_56::CollationKey const	&)+29j
		mov	eax, [ebp+var_8]

loc_1076:				; CODE XREF: icu_56::CollationKey::operator=(icu_56::CollationKey const	&)+46j
					; icu_56::CollationKey::operator=(icu_56::CollationKey const &)+7Dj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??4CollationKey@icu_56@@QAEABV01@ABV01@@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 108Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: enum	icu_56::Collator::EComparisonResult __thiscall icu_56::CollationKey::compareTo(class icu_56::CollationKey const	&)const
		public ?compareTo@CollationKey@icu_56@@QBE?AW4EComparisonResult@Collator@2@ABV12@@Z
?compareTo@CollationKey@icu_56@@QBE?AW4EComparisonResult@Collator@2@ABV12@@Z proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	[ebp+var_14], 0
		lea	eax, [ebp+var_14]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	ecx, [ebp+var_8]
		call	?compareTo@CollationKey@icu_56@@QBE?AW4UCollationResult@@ABV12@AAW4UErrorCode@@@Z ; icu_56::CollationKey::compareTo(icu_56::CollationKey const &,UErrorCode &)
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?compareTo@CollationKey@icu_56@@QBE?AW4EComparisonResult@Collator@2@ABV12@@Z endp

; ---------------------------------------------------------------------------
		align 10h
$LN5		dd 1			; DATA XREF: icu_56::CollationKey::compareTo(icu_56::CollationKey const	&)+3Eo
		dd offset $LN4
$LN4		dd 0FFFFFFECh, 4	; DATA XREF: .text:000010F4o
		dd offset $LN3		; "errorCode"
$LN3		db 'errorCode',0        ; DATA XREF: .text:00001100o
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1110h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: enum	UCollationResult __thiscall icu_56::CollationKey::compareTo(class icu_56::CollationKey const &,	enum  UErrorCode &)const
		public ?compareTo@CollationKey@icu_56@@QBE?AW4UCollationResult@@ABV12@AAW4UErrorCode@@@Z
?compareTo@CollationKey@icu_56@@QBE?AW4UCollationResult@@ABV12@AAW4UErrorCode@@@Z proc near
					; CODE XREF: icu_56::CollationKey::compareTo(icu_56::CollationKey const	&)+35p

var_114		= byte ptr -114h
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
Size		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
Buf2		= dword	ptr -20h
Buf1		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 114h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_114]
		mov	ecx, 45h ; 'E'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	loc_11F4
		mov	ecx, [ebp+var_8] ; this
		call	?getBytes@CollationKey@icu_56@@ABEPBEXZ	; icu_56::CollationKey::getBytes(void)
		mov	[ebp+Buf1], eax
		mov	ecx, [ebp+arg_0] ; this
		call	?getBytes@CollationKey@icu_56@@ABEPBEXZ	; icu_56::CollationKey::getBytes(void)
		mov	[ebp+Buf2], eax
		mov	eax, [ebp+Buf1]
		cmp	eax, [ebp+Buf2]
		jnz	short loc_1171
		xor	eax, eax
		jmp	loc_11F6
; ---------------------------------------------------------------------------

loc_1171:				; CODE XREF: icu_56::CollationKey::compareTo(icu_56::CollationKey const	&,UErrorCode &)+58j
		mov	ecx, [ebp+var_8] ; this
		call	?getLength@CollationKey@icu_56@@ABEHXZ ; icu_56::CollationKey::getLength(void)
		mov	[ebp+Size], eax
		mov	ecx, [ebp+arg_0] ; this
		call	?getLength@CollationKey@icu_56@@ABEHXZ ; icu_56::CollationKey::getLength(void)
		mov	[ebp+var_44], eax
		mov	eax, [ebp+Size]
		cmp	eax, [ebp+var_44]
		jge	short loc_1198
		mov	[ebp+var_2C], 0FFFFFFFFh
		jmp	short loc_11B6
; ---------------------------------------------------------------------------

loc_1198:				; CODE XREF: icu_56::CollationKey::compareTo(icu_56::CollationKey const	&,UErrorCode &)+7Dj
		mov	eax, [ebp+Size]
		cmp	eax, [ebp+var_44]
		jnz	short loc_11A9
		mov	[ebp+var_2C], 0
		jmp	short loc_11B6
; ---------------------------------------------------------------------------

loc_11A9:				; CODE XREF: icu_56::CollationKey::compareTo(icu_56::CollationKey const	&,UErrorCode &)+8Ej
		mov	eax, [ebp+var_44]
		mov	[ebp+Size], eax
		mov	[ebp+var_2C], 1

loc_11B6:				; CODE XREF: icu_56::CollationKey::compareTo(icu_56::CollationKey const	&,UErrorCode &)+86j
					; icu_56::CollationKey::compareTo(icu_56::CollationKey const &,UErrorCode &)+97j
		cmp	[ebp+Size], 0
		jle	short loc_11ED
		mov	eax, [ebp+Size]
		push	eax		; Size
		mov	ecx, [ebp+Buf2]
		push	ecx		; Buf2
		mov	edx, [ebp+Buf1]
		push	edx		; Buf1
		call	_memcmp
		add	esp, 0Ch
		mov	[ebp+var_50], eax
		cmp	[ebp+var_50], 0
		jle	short loc_11E2
		mov	eax, 1
		jmp	short loc_11F6
; ---------------------------------------------------------------------------
		jmp	short loc_11ED
; ---------------------------------------------------------------------------

loc_11E2:				; CODE XREF: icu_56::CollationKey::compareTo(icu_56::CollationKey const	&,UErrorCode &)+C7j
		cmp	[ebp+var_50], 0
		jge	short loc_11ED
		or	eax, 0FFFFFFFFh
		jmp	short loc_11F6
; ---------------------------------------------------------------------------

loc_11ED:				; CODE XREF: icu_56::CollationKey::compareTo(icu_56::CollationKey const	&,UErrorCode &)+AAj
					; icu_56::CollationKey::compareTo(icu_56::CollationKey const &,UErrorCode &)+D0j ...
		mov	eax, [ebp+var_2C]
		jmp	short loc_11F6
; ---------------------------------------------------------------------------
		jmp	short loc_11F6
; ---------------------------------------------------------------------------

loc_11F4:				; CODE XREF: icu_56::CollationKey::compareTo(icu_56::CollationKey const	&,UErrorCode &)+36j
		xor	eax, eax

loc_11F6:				; CODE XREF: icu_56::CollationKey::compareTo(icu_56::CollationKey const	&,UErrorCode &)+5Cj
					; icu_56::CollationKey::compareTo(icu_56::CollationKey const &,UErrorCode &)+CEj ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 114h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?compareTo@CollationKey@icu_56@@QBE?AW4UCollationResult@@ABV12@AAW4UErrorCode@@@Z endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 120Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl U_SUCCESS(enum  UErrorCode)
?U_SUCCESS@@YACW4UErrorCode@@@Z	proc near
					; CODE XREF: icu_56::CollationKey::compareTo(icu_56::CollationKey const	&,UErrorCode &)+29p

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		setle	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?U_SUCCESS@@YACW4UErrorCode@@@Z	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1238h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::CollationKey::hashCode(icu_56::CollationKey *__hidden this)
		public ?hashCode@CollationKey@icu_56@@QBEHXZ
?hashCode@CollationKey@icu_56@@QBEHXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+8], 0
		jnz	short loc_1284
		mov	ecx, [ebp+var_8] ; this
		call	?getLength@CollationKey@icu_56@@ABEHXZ ; icu_56::CollationKey::getLength(void)
		push	eax
		mov	ecx, [ebp+var_8] ; this
		call	?getBytes@CollationKey@icu_56@@ABEPBEXZ	; icu_56::CollationKey::getBytes(void)
		push	eax
		call	?computeHashCode@icu_56@@YAHPBEH@Z ; icu_56::computeHashCode(uchar const *,int)
		add	esp, 8
		mov	ecx, [ebp+var_8]
		mov	[ecx+8], eax

loc_1284:				; CODE XREF: icu_56::CollationKey::hashCode(void)+2Aj
		mov	eax, [ebp+var_8]
		mov	eax, [eax+8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?hashCode@CollationKey@icu_56@@QBEHXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 12A0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl icu_56::computeHashCode(unsigned char const *, int)
?computeHashCode@icu_56@@YAHPBEH@Z proc	near
					; CODE XREF: icu_56::CollationKey::hashCode(void)+3Ep
					; _ucol_keyHashCode_56+26p

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_12D0
		cmp	[ebp+arg_4], 0
		jnz	short loc_12D9

loc_12D0:				; CODE XREF: icu_56::computeHashCode(uchar const *,int)+28j
		mov	[ebp+var_14], 1
		jmp	short loc_12FF
; ---------------------------------------------------------------------------

loc_12D9:				; CODE XREF: icu_56::computeHashCode(uchar const *,int)+2Ej
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_8]
		push	ecx
		call	_ustr_hashCharsN_56
		add	esp, 8
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_12F8
		cmp	[ebp+var_14], 2
		jnz	short loc_12FF

loc_12F8:				; CODE XREF: icu_56::computeHashCode(uchar const *,int)+50j
		mov	[ebp+var_14], 1

loc_12FF:				; CODE XREF: icu_56::computeHashCode(uchar const *,int)+37j
					; icu_56::computeHashCode(uchar	const *,int)+56j
		mov	eax, [ebp+var_14]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?computeHashCode@icu_56@@YAHPBEH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1318h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ucol_keyHashCode_56
_ucol_keyHashCode_56 proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	?computeHashCode@icu_56@@YAHPBEH@Z ; icu_56::computeHashCode(uchar const *,int)
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ucol_keyHashCode_56 endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; _DWORD __thiscall icu_56::UObject::UObject(icu_56::UObject *__hidden this)
		extrn __imp_??0UObject@icu_56@@QAE@XZ:near
					; CODE XREF: icu_56::CollatorFactory::CollatorFactory(void)+28p
					; icu_56::CollationKey::CollationKey(void)+28p	...
		extrn __RTC_CheckEsp:near
					; CODE XREF: icu_56::CollatorFactory::CollatorFactory(void)+30p
					; icu_56::CollatorFactory::CollatorFactory(void)+4Cp ...
; const	type_info::`vftable'
		extrn ??_7type_info@@6B@:near
					; DATA XREF: .data:icu_56::CollatorFactory `RTTI Type Descriptor'o
					; .data:icu_56::UObject	`RTTI Type Descriptor'o ...
; public: virtual void * __thiscall icu_56::UObject::getDynamicClassID(void)const
		extrn ?getDynamicClassID@UObject@icu_56@@UBEPAXXZ:near
					; DATA XREF: .rdata:00000280o
; public: virtual signed char __thiscall icu_56::CollatorFactory::visible(void)const
		extrn ?visible@CollatorFactory@icu_56@@UBECXZ:near
					; DATA XREF: .rdata:00000284o
		extrn __purecall:near	; DATA XREF: .rdata:00000288o
					; .rdata:00000290o
; public: virtual class	icu_56::UnicodeString &	__thiscall icu_56::CollatorFactory::getDisplayName(class icu_56::Locale	const &, class icu_56::Locale const &, class icu_56::UnicodeString &)
		extrn ?getDisplayName@CollatorFactory@icu_56@@UAEAAVUnicodeString@2@ABVLocale@2@0AAV32@@Z:near
					; DATA XREF: .rdata:0000028Co
; _DWORD __thiscall icu_56::UObject::UObject(icu_56::UObject *__hidden this, const struct icu_56::UObject *)
		extrn __imp_??0UObject@icu_56@@QAE@ABV01@@Z:near
					; CODE XREF: icu_56::CollatorFactory::CollatorFactory(icu_56::CollatorFactory const &):loc_400p
					; icu_56::CollationKey::CollationKey(icu_56::CollationKey const	&)+4Bp
					; DATA XREF: ...
; __declspec(dllimport)	public:	class icu_56::UObject &	__thiscall icu_56::UObject::operator=(class icu_56::UObject const &)
		extrn __imp_??4UObject@icu_56@@QAEAAV01@ABV01@@Z:near
					; CODE XREF: icu_56::CollatorFactory::operator=(icu_56::CollatorFactory	const &)+2Cp
					; DATA XREF: icu_56::CollatorFactory::operator=(icu_56::CollatorFactory	const &)+2Cr
; void __cdecl icu_56::UMemory::operator delete(void *)
		extrn __imp_??3UMemory@icu_56@@SAXPAX@Z:near
					; CODE XREF: icu_56::CollatorFactory::`scalar deleting destructor'(uint)+39p
					; icu_56::CollatorFactory::`vector deleting destructor'(uint)+81p ...
; _DWORD __thiscall icu_56::CollatorFactory::~CollatorFactory(icu_56::CollatorFactory *__hidden	this)
		extrn ??1CollatorFactory@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::CollatorFactory::`scalar deleting destructor'(uint)+26p
					; icu_56::CollatorFactory::`vector deleting destructor'(uint)+6Ep
					; DATA XREF: ...
; void __cdecl icu_56::UMemory::operator delete[](void *)
		extrn __imp_??_VUMemory@icu_56@@SAXPAX@Z:near
					; CODE XREF: icu_56::CollatorFactory::`vector deleting destructor'(uint)+53p
					; icu_56::CollationKey::`vector	deleting destructor'(uint)+53p
					; DATA XREF: ...
; void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *))
		extrn ??_M@YGXPAXIHP6EX0@Z@Z:near
					; CODE XREF: icu_56::CollatorFactory::`vector deleting destructor'(uint)+3Dp
					; icu_56::CollationKey::`vector	deleting destructor'(uint)+3Dp
; _DWORD __thiscall icu_56::UObject::~UObject(icu_56::UObject *__hidden	this)
		extrn __imp_??1UObject@icu_56@@UAE@XZ:near
					; CODE XREF: __unwindfunclet$??0CollationKey@icu_56@@QAE@PBEH@Z$0+5p
					; __unwindfunclet$??0CollationKey@icu_56@@QAE@ABV01@@Z$0+5p ...
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: icu_56::CollationKey::CollationKey(uchar const *,int)+D7p
					; icu_56::CollationKey::CollationKey(icu_56::CollationKey const	&)+FCp	...
		extrn _uprv_checkValidMemory:near
					; CODE XREF: icu_56::CollationKey::CollationKey(uchar const *,int)+BEp
					; icu_56::CollationKey::CollationKey(icu_56::CollationKey const	&)+DEp	...
		extrn ___security_cookie:near
					; DATA XREF: icu_56::CollationKey::CollationKey(uchar const *,int)+2Er
					; icu_56::CollationKey::CollationKey(icu_56::CollationKey const	&)+2Er
		extrn ___CxxFrameHandler3:near
					; CODE XREF: __ehhandler$??0CollationKey@icu_56@@QAE@PBEH@Z+19j
					; __ehhandler$??0CollationKey@icu_56@@QAE@ABV01@@Z+19j
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: __ehhandler$??0CollationKey@icu_56@@QAE@PBEH@Z+Fp
					; __ehhandler$??0CollationKey@icu_56@@QAE@ABV01@@Z+Fp
		extrn _uprv_free_56:near
					; CODE XREF: icu_56::CollationKey::~CollationKey(void)+3Cp
					; icu_56::CollationKey::reallocate(int,int)+7Ep
		extrn _uprv_malloc_56:near
					; CODE XREF: icu_56::CollationKey::reallocate(int,int)+27p
; int __cdecl memcmp(const void	*Buf1, const void *Buf2, size_t	Size)
		extrn _memcmp:near	; CODE XREF: icu_56::CollationKey::operator==(icu_56::CollationKey const &)+5Cp
					; icu_56::CollationKey::compareTo(icu_56::CollationKey const &,UErrorCode &)+B8p
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near
					; CODE XREF: icu_56::CollationKey::compareTo(icu_56::CollationKey const	&)+44p
		extrn _ustr_hashCharsN_56:near
					; CODE XREF: icu_56::computeHashCode(uchar const *,int)+41p


		end
