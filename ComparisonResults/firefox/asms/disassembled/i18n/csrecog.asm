;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	5B43282F5C7E86EA728A0ECF8104B6A7
; Input	CRC32 :	5D8B34D1

; File Name   :	D:\compspace\objfiles\firefox\i18n\csrecog.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int)
		public ??2@YAPAXI@Z
??2@YAPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??2@YAPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 38h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 3Ch
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 40h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX@Z
??3@YAXPAX@Z	proc near		; DATA XREF: .rdata$r:00000128o
					; .rdata$r:00000144o ...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??3@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 74h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::CharsetRecognizer::~CharsetRecognizer(icu_56::CharsetRecognizer *__hidden this)
		public ??1CharsetRecognizer@icu_56@@UAE@XZ
??1CharsetRecognizer@icu_56@@UAE@XZ proc near
					; CODE XREF: icu_56::CharsetRecognizer::`scalar	deleting destructor'(uint)+26p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7CharsetRecognizer@icu_56@@6B@ ; const icu_56::CharsetRecognizer::`vftable'
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??1CharsetRecognizer@icu_56@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A8h
		dd offset ??_R4CharsetRecognizer@icu_56@@6B@ ; const icu_56::CharsetRecognizer::`RTTI Complete Object Locator'
		public ??_7CharsetRecognizer@icu_56@@6B@
; const	icu_56::CharsetRecognizer::`vftable'
??_7CharsetRecognizer@icu_56@@6B@ dd offset __purecall
					; DATA XREF: icu_56::CharsetRecognizer::~CharsetRecognizer(void)+26o
		dd offset ?getLanguage@CharsetRecognizer@icu_56@@UBEPBDXZ ; icu_56::CharsetRecognizer::getLanguage(void)
		dd offset __purecall
		dd offset ??_ECharsetRecognizer@icu_56@@UAEPAXI@Z ; icu_56::CharsetRecognizer::`vector deleting	destructor'(uint)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0BCh
		public ??_R4CharsetRecognizer@icu_56@@6B@
; const	icu_56::CharsetRecognizer::`RTTI Complete Object Locator'
??_R4CharsetRecognizer@icu_56@@6B@ dd 3	dup(0) ; DATA XREF: .rdata:000000A8o
		dd offset ??_R0?AVCharsetRecognizer@icu_56@@@8 ; icu_56::CharsetRecognizer `RTTI Type Descriptor'
		dd offset ??_R3CharsetRecognizer@icu_56@@8 ; icu_56::CharsetRecognizer::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 0D0h
		public ??_R0?AVCharsetRecognizer@icu_56@@@8
; class	icu_56::CharsetRecognizer `RTTI	Type Descriptor'
??_R0?AVCharsetRecognizer@icu_56@@@8 dd	offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:000000C8o
					; .rdata$r:icu_56::CharsetRecognizer::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?avcharsetrec	db '.?AVCharsetRecognizer@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0F8h
		public ??_R3CharsetRecognizer@icu_56@@8
; icu_56::CharsetRecognizer::`RTTI Class Hierarchy Descriptor'
??_R3CharsetRecognizer@icu_56@@8 dd 2 dup(0) ; DATA XREF: .rdata$r:000000CCo
					; .rdata$r:0000012Co
		dd 2
		dd offset ??_R2CharsetRecognizer@icu_56@@8 ; icu_56::CharsetRecognizer::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 108h
		public ??_R2CharsetRecognizer@icu_56@@8
; icu_56::CharsetRecognizer::`RTTI Base	Class Array'
??_R2CharsetRecognizer@icu_56@@8 dd offset ??_R1A@?0A@EA@CharsetRecognizer@icu_56@@8
					; DATA XREF: .rdata$r:00000104o
					; icu_56::CharsetRecognizer::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 114h
		public ??_R1A@?0A@EA@CharsetRecognizer@icu_56@@8
; icu_56::CharsetRecognizer::`RTTI Base	Class Descriptor at (0,	-1, 0, 64)'
??_R1A@?0A@EA@CharsetRecognizer@icu_56@@8 dd offset ??_R0?AVCharsetRecognizer@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::CharsetRecognizer::`RTTI Base Class Array'o
					; icu_56::CharsetRecognizer `RTTI Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset ??3@YAXPAX@Z	; operator delete(void *)
		dd offset ??_R3CharsetRecognizer@icu_56@@8 ; icu_56::CharsetRecognizer::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 130h
		public ??_R13?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@UMemory@icu_56@@8 dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:0000010Co
					; icu_56::UMemory `RTTI	Type Descriptor'
		align 8
		dd 4, 0FFFFFFFFh, 0
		dd offset ??3@YAXPAX@Z	; operator delete(void *)
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 14Ch
		public ??_R0?AVUMemory@icu_56@@@8
; class	icu_56::UMemory	`RTTI Type Descriptor'
??_R0?AVUMemory@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Descriptor at (4,-1,0,64)'o
					; .rdata$r:icu_56::UMemory::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avumemory@ic	db '.?AVUMemory@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 16Ch
		public ??_R3UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
??_R3UMemory@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00000148o
					; .rdata$r:0000019Co
		dd 1
		dd offset ??_R2UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 17Ch
		public ??_R2UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Array'
??_R2UMemory@icu_56@@8 dd offset ??_R1A@?0A@EA@UMemory@icu_56@@8
					; DATA XREF: .rdata$r:00000178o
					; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 184h
		public ??_R1A@?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UMemory@icu_56@@8	dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Array'o
					; icu_56::UMemory `RTTI	Type Descriptor'
		align 10h
		dd 0FFFFFFFFh, 0
		dd offset ??3@YAXPAX@Z	; operator delete(void *)
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1A0h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::CharsetRecognizer::`scalar deleting	destructor'(unsigned int)
		public ??_GCharsetRecognizer@icu_56@@UAEPAXI@Z
??_GCharsetRecognizer@icu_56@@UAEPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1CharsetRecognizer@icu_56@@UAE@XZ ; icu_56::CharsetRecognizer::~CharsetRecognizer(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_1E9
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1E9:				; CODE XREF: icu_56::CharsetRecognizer::`scalar	deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GCharsetRecognizer@icu_56@@UAEPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 204h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	char *__thiscall icu_56::CharsetRecognizer::getLanguage(icu_56::CharsetRecognizer *__hidden this)
		public ?getLanguage@CharsetRecognizer@icu_56@@UBEPBDXZ
?getLanguage@CharsetRecognizer@icu_56@@UBEPBDXZ	proc near ; DATA XREF: .rdata:000000B0o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getLanguage@CharsetRecognizer@icu_56@@UBEPBDXZ	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 234h
		public ??_C@_00CNPNBAHC@?$AA@
; `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: icu_56::CharsetRecognizer::getLanguage(void)+23o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; const	type_info::`vftable'
		extrn ??_7type_info@@6B@:near
					; DATA XREF: .data:icu_56::CharsetRecognizer `RTTI Type	Descriptor'o
					; .data:icu_56::UMemory	`RTTI Type Descriptor'o
		extrn __purecall:near	; DATA XREF: .rdata:const icu_56::CharsetRecognizer::`vftable'o
					; .rdata:000000B4o
; public: virtual void * __thiscall icu_56::CharsetRecognizer::`scalar deleting	destructor'(unsigned int)
		extrn ??_GCharsetRecognizer@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::CharsetRecognizer::`vector deleting	destructor'(unsigned int)
		extrn ??_ECharsetRecognizer@icu_56@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:000000B8o
; void __cdecl icu_56::UMemory::operator delete(void *)
		extrn __imp_??3UMemory@icu_56@@SAXPAX@Z:near
					; CODE XREF: icu_56::CharsetRecognizer::`scalar	deleting destructor'(uint)+39p
					; DATA XREF: icu_56::CharsetRecognizer::`scalar	deleting destructor'(uint)+39r
		extrn __RTC_CheckEsp:near
					; CODE XREF: icu_56::CharsetRecognizer::`scalar	deleting destructor'(uint)+44p
					; icu_56::CharsetRecognizer::`scalar deleting destructor'(uint)+57p


		end
