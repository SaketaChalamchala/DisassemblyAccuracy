;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	96CBCCF986F4814871A26E559FD909C6
; Input	CRC32 :	0836D954

; File Name   :	D:\compspace\objfiles\firefox\i18n\fphdlimp.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int)
		public ??2@YAPAXI@Z
??2@YAPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??2@YAPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 38h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 3Ch
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 40h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX@Z
??3@YAXPAX@Z	proc near		; DATA XREF: .rdata$r:00000160o
					; .rdata$r:0000017Co ...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??3@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 74h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::FieldPosition::FieldPosition(icu_56::FieldPosition *__hidden this)
		public ??0FieldPosition@icu_56@@QAE@XZ
??0FieldPosition@icu_56@@QAE@XZ	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@XZ ; icu_56::UObject::UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7FieldPosition@icu_56@@6B@ ;	const icu_56::FieldPosition::`vftable'
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+4], 0FFFFFFFFh
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+8], 0
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+0Ch], 0
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0FieldPosition@icu_56@@QAE@XZ	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E8h
		dd offset ??_R4FieldPosition@icu_56@@6B@ ; const icu_56::FieldPosition::`RTTI Complete Object Locator'
;
; Exported entry
;
		public ??_7FieldPosition@icu_56@@6B@
; const	icu_56::FieldPosition::`vftable'
??_7FieldPosition@icu_56@@6B@ dd offset	??_EFieldPosition@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::FieldPosition::FieldPosition(void)+38o
					; icu_56::FieldPosition::FieldPosition(int)+38o ...
					; icu_56::FieldPosition::`vector deleting destructor'(uint)
		dd offset ?getDynamicClassID@FieldPosition@icu_56@@UBEPAXXZ ; icu_56::FieldPosition::getDynamicClassID(void)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0F4h
		public ??_R4FieldPosition@icu_56@@6B@
; const	icu_56::FieldPosition::`RTTI Complete Object Locator'
??_R4FieldPosition@icu_56@@6B@ dd 3 dup(0) ; DATA XREF:	.rdata:000000E8o
		dd offset ??_R0?AVFieldPosition@icu_56@@@8 ; icu_56::FieldPosition `RTTI Type Descriptor'
		dd offset ??_R3FieldPosition@icu_56@@8 ; icu_56::FieldPosition::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 108h
		public ??_R0?AVFieldPosition@icu_56@@@8
; class	icu_56::FieldPosition `RTTI Type Descriptor'
??_R0?AVFieldPosition@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00000100o
					; .rdata$r:icu_56::FieldPosition::`RTTI	Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avfieldposit	db '.?AVFieldPosition@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 12Ch
		public ??_R3FieldPosition@icu_56@@8
; icu_56::FieldPosition::`RTTI Class Hierarchy Descriptor'
??_R3FieldPosition@icu_56@@8 dd	2 dup(0) ; DATA	XREF: .rdata$r:00000104o
					; .rdata$r:00000164o
		dd 3
		dd offset ??_R2FieldPosition@icu_56@@8 ; icu_56::FieldPosition::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 13Ch
		public ??_R2FieldPosition@icu_56@@8
; icu_56::FieldPosition::`RTTI Base Class Array'
??_R2FieldPosition@icu_56@@8 dd	offset ??_R1A@?0A@EA@FieldPosition@icu_56@@8
					; DATA XREF: .rdata$r:00000138o
					; icu_56::FieldPosition::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 14Ch
		public ??_R1A@?0A@EA@FieldPosition@icu_56@@8
; icu_56::FieldPosition::`RTTI Base Class Descriptor at	(0, -1,	0, 64)'
??_R1A@?0A@EA@FieldPosition@icu_56@@8 dd offset	??_R0?AVFieldPosition@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::FieldPosition::`RTTI Base	Class Array'o
					; icu_56::FieldPosition	`RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ??3@YAXPAX@Z	; operator delete(void *)
		dd offset ??_R3FieldPosition@icu_56@@8 ; icu_56::FieldPosition::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 168h
		public ??_R1A@?0A@EA@UObject@icu_56@@8
; icu_56::UObject::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UObject@icu_56@@8	dd offset ??_R0?AVUObject@icu_56@@@8
					; DATA XREF: .rdata$r:00000140o
					; .rdata$r:icu_56::UObject::`RTTI Base Class Array'o ...
					; icu_56::UObject `RTTI	Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset ??3@YAXPAX@Z	; operator delete(void *)
		dd offset ??_R3UObject@icu_56@@8 ; icu_56::UObject::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 184h
		public ??_R0?AVUObject@icu_56@@@8
; class	icu_56::UObject	`RTTI Type Descriptor'
??_R0?AVUObject@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UObject::`RTTI Base Class	Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avuobject@ic	db '.?AVUObject@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1A4h
		public ??_R3UObject@icu_56@@8
; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
??_R3UObject@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00000180o
		dd 2
		dd offset ??_R2UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1B4h
		public ??_R2UObject@icu_56@@8
; icu_56::UObject::`RTTI Base Class Array'
??_R2UObject@icu_56@@8 dd offset ??_R1A@?0A@EA@UObject@icu_56@@8
					; DATA XREF: .rdata$r:000001B0o
					; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1C0h
		public ??_R13?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@UMemory@icu_56@@8 dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:00000144o
					; .rdata$r:000001B8o ...
					; icu_56::UMemory `RTTI	Type Descriptor'
		align 8
		dd 4, 0FFFFFFFFh, 0
		dd offset ??3@YAXPAX@Z	; operator delete(void *)
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 1DCh
		public ??_R0?AVUMemory@icu_56@@@8
; class	icu_56::UMemory	`RTTI Type Descriptor'
??_R0?AVUMemory@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Descriptor at (4,-1,0,64)'o
					; .rdata$r:icu_56::UMemory::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avumemory@ic	db '.?AVUMemory@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1FCh
		public ??_R3UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
??_R3UMemory@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:000001D8o
					; .rdata$r:0000022Co
		dd 1
		dd offset ??_R2UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 20Ch
		public ??_R2UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Array'
??_R2UMemory@icu_56@@8 dd offset ??_R1A@?0A@EA@UMemory@icu_56@@8
					; DATA XREF: .rdata$r:00000208o
					; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 214h
		public ??_R1A@?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UMemory@icu_56@@8	dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Array'o
					; icu_56::UMemory `RTTI	Type Descriptor'
		align 10h
		dd 0FFFFFFFFh, 0
		dd offset ??3@YAXPAX@Z	; operator delete(void *)
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 230h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::FieldPosition::FieldPosition(icu_56::FieldPosition *this, int)
		public ??0FieldPosition@icu_56@@QAE@H@Z
??0FieldPosition@icu_56@@QAE@H@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@XZ ; icu_56::UObject::UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7FieldPosition@icu_56@@6B@ ;	const icu_56::FieldPosition::`vftable'
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+4], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+8], 0
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+0Ch], 0
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0FieldPosition@icu_56@@QAE@H@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2A4h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::FieldPosition::FieldPosition(icu_56::FieldPosition *this, const struct icu_56::FieldPosition *)
		public ??0FieldPosition@icu_56@@QAE@ABV01@@Z
??0FieldPosition@icu_56@@QAE@ABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax		; struct icu_56::UObject *
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@ABV01@@Z ; icu_56::UObject::UObject(icu_56::UObject const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7FieldPosition@icu_56@@6B@ ;	const icu_56::FieldPosition::`vftable'
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		mov	[eax+8], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		mov	[eax+0Ch], edx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0FieldPosition@icu_56@@QAE@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 324h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::FieldPosition::getField(icu_56::FieldPosition *__hidden this)
		public ?getField@FieldPosition@icu_56@@QBEHXZ
?getField@FieldPosition@icu_56@@QBEHXZ proc near
					; CODE XREF: icu_56::FieldPositionOnlyHandler::addAttribute(int,int,int)+29p
					; icu_56::FieldPositionOnlyHandler::shiftLast(int)+2Fp	...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+4]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getField@FieldPosition@icu_56@@QBEHXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 354h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::FieldPosition::getBeginIndex(icu_56::FieldPosition *__hidden this)
		public ?getBeginIndex@FieldPosition@icu_56@@QBEHXZ
?getBeginIndex@FieldPosition@icu_56@@QBEHXZ proc near
					; CODE XREF: icu_56::FieldPositionOnlyHandler::shiftLast(int)+3Fp
					; icu_56::FieldPositionOnlyHandler::shiftLast(int)+4Fp

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getBeginIndex@FieldPosition@icu_56@@QBEHXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 384h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::FieldPosition::getEndIndex(icu_56::FieldPosition *__hidden this)
		public ?getEndIndex@FieldPosition@icu_56@@QBEHXZ
?getEndIndex@FieldPosition@icu_56@@QBEHXZ proc near
					; CODE XREF: icu_56::FieldPositionOnlyHandler::shiftLast(int)+69p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+0Ch]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getEndIndex@FieldPosition@icu_56@@QBEHXZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3B4h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::FieldPosition::setField(icu_56::FieldPosition	*this, int)
		public ?setField@FieldPosition@icu_56@@QAEXH@Z
?setField@FieldPosition@icu_56@@QAEXH@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+4], ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?setField@FieldPosition@icu_56@@QAEXH@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3ECh
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::FieldPosition::setBeginIndex(icu_56::FieldPosition *this, int)
		public ?setBeginIndex@FieldPosition@icu_56@@QAEXH@Z
?setBeginIndex@FieldPosition@icu_56@@QAEXH@Z proc near
					; CODE XREF: icu_56::FieldPositionOnlyHandler::addAttribute(int,int,int)+3Dp
					; icu_56::FieldPositionOnlyHandler::shiftLast(int)+5Ep

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+8], ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?setBeginIndex@FieldPosition@icu_56@@QAEXH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 424h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::FieldPosition::setEndIndex(icu_56::FieldPosition *this, int)
		public ?setEndIndex@FieldPosition@icu_56@@QAEXH@Z
?setEndIndex@FieldPosition@icu_56@@QAEXH@Z proc	near
					; CODE XREF: icu_56::FieldPositionOnlyHandler::addAttribute(int,int,int)+4Cp
					; icu_56::FieldPositionOnlyHandler::shiftLast(int)+78p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+0Ch], ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?setEndIndex@FieldPosition@icu_56@@QAEXH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 45Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::FieldPosition::`scalar deleting destructor'(unsigned int)
		public ??_GFieldPosition@icu_56@@UAEPAXI@Z
??_GFieldPosition@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1FieldPosition@icu_56@@UAE@XZ	; icu_56::FieldPosition::~FieldPosition(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_4A5
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_4A5:				; CODE XREF: icu_56::FieldPosition::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GFieldPosition@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4C0h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::FieldPosition::`vector deleting destructor'(unsigned int)
		public ??_EFieldPosition@icu_56@@UAEPAXI@Z
??_EFieldPosition@icu_56@@UAEPAXI@Z proc near
					; DATA XREF: .rdata:const icu_56::FieldPosition::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		and	eax, 2
		jz	short loc_52B
		push	offset ??1FieldPosition@icu_56@@UAE@XZ ; icu_56::FieldPosition::~FieldPosition(void)
		mov	eax, [ebp+var_8]
		mov	ecx, [eax-4]
		push	ecx
		push	10h
		mov	edx, [ebp+var_8]
		push	edx
		call	??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_523
		mov	eax, [ebp+var_8]
		sub	eax, 4
		mov	esi, esp
		push	eax		; void *
		call	dword ptr ds:__imp_??_VUMemory@icu_56@@SAXPAX@Z	; icu_56::UMemory::operator delete[](void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_523:				; CODE XREF: icu_56::FieldPosition::`vector deleting destructor'(uint)+48j
		mov	eax, [ebp+var_8]
		sub	eax, 4
		jmp	short loc_554
; ---------------------------------------------------------------------------

loc_52B:				; CODE XREF: icu_56::FieldPosition::`vector deleting destructor'(uint)+29j
		mov	ecx, [ebp+var_8] ; this
		call	??1FieldPosition@icu_56@@UAE@XZ	; icu_56::FieldPosition::~FieldPosition(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_551
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_551:				; CODE XREF: icu_56::FieldPosition::`vector deleting destructor'(uint)+79j
		mov	eax, [ebp+var_8]

loc_554:				; CODE XREF: icu_56::FieldPosition::`vector deleting destructor'(uint)+69j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_EFieldPosition@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 56Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::FieldPosition &	__thiscall icu_56::FieldPosition::operator=(class icu_56::FieldPosition	const &)
		public ??4FieldPosition@icu_56@@QAEAAV01@ABV01@@Z
??4FieldPosition@icu_56@@QAEAAV01@ABV01@@Z proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+0Ch]
		mov	[eax+0Ch], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		mov	[eax+8], edx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??4FieldPosition@icu_56@@QAEAAV01@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 5C0h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: signed char __thiscall icu_56::FieldPosition::operator==(class icu_56::FieldPosition const &)const
		public ??8FieldPosition@icu_56@@QBECABV01@@Z
??8FieldPosition@icu_56@@QBECABV01@@Z proc near
					; CODE XREF: icu_56::FieldPosition::operator!=(icu_56::FieldPosition const &)+2Ap

var_D0		= byte ptr -0D0h
var_CD		= byte ptr -0CDh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+4]
		cmp	edx, [ecx+4]
		jnz	short loc_616
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+0Ch]
		cmp	edx, [ecx+0Ch]
		jnz	short loc_616
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+8]
		cmp	edx, [ecx+8]
		jnz	short loc_616
		mov	[ebp+var_CD], 1
		jmp	short loc_61D
; ---------------------------------------------------------------------------

loc_616:				; CODE XREF: icu_56::FieldPosition::operator==(icu_56::FieldPosition const &)+2Fj
					; icu_56::FieldPosition::operator==(icu_56::FieldPosition const	&)+3Dj	...
		mov	[ebp+var_CD], 0

loc_61D:				; CODE XREF: icu_56::FieldPosition::operator==(icu_56::FieldPosition const &)+54j
		mov	al, [ebp+var_CD]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??8FieldPosition@icu_56@@QBECABV01@@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 62Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: signed char __thiscall icu_56::FieldPosition::operator!=(class icu_56::FieldPosition const &)const
		public ??9FieldPosition@icu_56@@QBECABV01@@Z
??9FieldPosition@icu_56@@QBECABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		call	??8FieldPosition@icu_56@@QBECABV01@@Z ;	icu_56::FieldPosition::operator==(icu_56::FieldPosition	const &)
		movsx	ecx, al
		test	ecx, ecx
		setz	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??9FieldPosition@icu_56@@QBECABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 67Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: signed char __thiscall icu_56::FieldPositionIterator::operator!=(class icu_56::FieldPositionIterator const &)const
		public ??9FieldPositionIterator@icu_56@@QBECABV01@@Z
??9FieldPositionIterator@icu_56@@QBECABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		call	??8FieldPositionIterator@icu_56@@QBECABV01@@Z ;	icu_56::FieldPositionIterator::operator==(icu_56::FieldPositionIterator	const &)
		movsx	ecx, al
		test	ecx, ecx
		setz	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??9FieldPositionIterator@icu_56@@QBECABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 6CCh
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::FieldPositionIterator &	__thiscall icu_56::FieldPositionIterator::operator=(class icu_56::FieldPositionIterator	const &)
		public ??4FieldPositionIterator@icu_56@@QAEAAV01@ABV01@@Z
??4FieldPositionIterator@icu_56@@QAEAAV01@ABV01@@Z proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		call	dword ptr ds:__imp_??4UObject@icu_56@@QAEAAV01@ABV01@@Z	; icu_56::UObject::operator=(icu_56::UObject const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		mov	[eax+8], edx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??4FieldPositionIterator@icu_56@@QAEAAV01@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 738h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::FieldPositionHandler::FieldPositionHandler(icu_56::FieldPositionHandler *__hidden this)
		public ??0FieldPositionHandler@icu_56@@QAE@XZ
??0FieldPositionHandler@icu_56@@QAE@XZ proc near
					; CODE XREF: icu_56::FieldPositionOnlyHandler::FieldPositionOnlyHandler(icu_56::FieldPosition &)+26p
					; icu_56::FieldPositionIteratorHandler::FieldPositionIteratorHandler(icu_56::FieldPositionIterator *,UErrorCode	&)+45p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7FieldPositionHandler@icu_56@@6B@ ; const icu_56::FieldPositionHandler::`vftable'
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??0FieldPositionHandler@icu_56@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 770h
		dd offset ??_R4FieldPositionHandler@icu_56@@6B@	; const	icu_56::FieldPositionHandler::`RTTI Complete Object Locator'
;
; Exported entry
;
		public ??_7FieldPositionHandler@icu_56@@6B@
; const	icu_56::FieldPositionHandler::`vftable'
??_7FieldPositionHandler@icu_56@@6B@ dd	offset ??_EFieldPositionHandler@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::FieldPositionHandler::FieldPositionHandler(void)+26o
					; icu_56::FieldPositionHandler::FieldPositionHandler(icu_56::FieldPositionHandler const	&)+44o	...
					; icu_56::FieldPositionHandler::`vector	deleting destructor'(uint)
		dd offset ?addAttribute@FieldPositionHandler@icu_56@@UAEXHHH@Z ; icu_56::FieldPositionHandler::addAttribute(int,int,int)
		dd offset ?shiftLast@FieldPositionHandler@icu_56@@UAEXH@Z ; icu_56::FieldPositionHandler::shiftLast(int)
		dd offset ?isRecording@FieldPositionHandler@icu_56@@UBECXZ ; icu_56::FieldPositionHandler::isRecording(void)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 784h
		public ??_R4FieldPositionHandler@icu_56@@6B@
; const	icu_56::FieldPositionHandler::`RTTI Complete Object Locator'
??_R4FieldPositionHandler@icu_56@@6B@ dd 3 dup(0) ; DATA XREF: .rdata:00000770o
		dd offset ??_R0?AVFieldPositionHandler@icu_56@@@8 ; icu_56::FieldPositionHandler `RTTI Type Descriptor'
		dd offset ??_R3FieldPositionHandler@icu_56@@8 ;	icu_56::FieldPositionHandler::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 798h
		public ??_R0?AVFieldPositionHandler@icu_56@@@8
; class	icu_56::FieldPositionHandler `RTTI Type	Descriptor'
??_R0?AVFieldPositionHandler@icu_56@@@8	dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00000790o
					; .rdata$r:icu_56::FieldPositionHandler::`RTTI Base Class Descriptor at	(0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avfieldpos_0	db '.?AVFieldPositionHandler@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 7C4h
		public ??_R3FieldPositionHandler@icu_56@@8
; icu_56::FieldPositionHandler::`RTTI Class Hierarchy Descriptor'
??_R3FieldPositionHandler@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00000794o
					; .rdata$r:000007F8o
		dd 2
		dd offset ??_R2FieldPositionHandler@icu_56@@8 ;	icu_56::FieldPositionHandler::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 7D4h
		public ??_R2FieldPositionHandler@icu_56@@8
; icu_56::FieldPositionHandler::`RTTI Base Class Array'
??_R2FieldPositionHandler@icu_56@@8 dd offset ??_R1A@?0A@EA@FieldPositionHandler@icu_56@@8
					; DATA XREF: .rdata$r:000007D0o
					; icu_56::FieldPositionHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 7E0h
		public ??_R1A@?0A@EA@FieldPositionHandler@icu_56@@8
; icu_56::FieldPositionHandler::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@FieldPositionHandler@icu_56@@8 dd	offset ??_R0?AVFieldPositionHandler@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::FieldPositionHandler::`RTTI Base Class Array'o
					; .rdata$r:00000B10o ...
					; icu_56::FieldPositionHandler `RTTI Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset ??3@YAXPAX@Z	; operator delete(void *)
		dd offset ??_R3FieldPositionHandler@icu_56@@8 ;	icu_56::FieldPositionHandler::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 7FCh
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::FieldPositionHandler::FieldPositionHandler(icu_56::FieldPositionHandler *this, const struct	icu_56::FieldPositionHandler *)
		public ??0FieldPositionHandler@icu_56@@QAE@ABV01@@Z
??0FieldPositionHandler@icu_56@@QAE@ABV01@@Z proc near

var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		cmp	[ebp+arg_0], 0
		jz	short loc_833
		mov	eax, [ebp+arg_0]
		add	eax, 4
		mov	[ebp+var_D0], eax
		jmp	short loc_83D
; ---------------------------------------------------------------------------

loc_833:				; CODE XREF: icu_56::FieldPositionHandler::FieldPositionHandler(icu_56::FieldPositionHandler const &)+27j
		mov	[ebp+var_D0], 0

loc_83D:				; CODE XREF: icu_56::FieldPositionHandler::FieldPositionHandler(icu_56::FieldPositionHandler const &)+35j
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7FieldPositionHandler@icu_56@@6B@ ; const icu_56::FieldPositionHandler::`vftable'
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??0FieldPositionHandler@icu_56@@QAE@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 854h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::FieldPositionHandler & __thiscall icu_56::FieldPositionHandler::operator=(class	icu_56::FieldPositionHandler const &)
		public ??4FieldPositionHandler@icu_56@@QAEAAV01@ABV01@@Z
??4FieldPositionHandler@icu_56@@QAEAAV01@ABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??4FieldPositionHandler@icu_56@@QAEAAV01@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 884h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::FieldPositionHandler::`scalar deleting destructor'(unsigned int)
		public ??_GFieldPositionHandler@icu_56@@UAEPAXI@Z
??_GFieldPositionHandler@icu_56@@UAEPAXI@Z proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1FieldPositionHandler@icu_56@@UAE@XZ ; icu_56::FieldPositionHandler::~FieldPositionHandler(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_8CD
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_8CD:				; CODE XREF: icu_56::FieldPositionHandler::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GFieldPositionHandler@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 8E8h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::FieldPositionHandler::`vector deleting destructor'(unsigned int)
		public ??_EFieldPositionHandler@icu_56@@UAEPAXI@Z
??_EFieldPositionHandler@icu_56@@UAEPAXI@Z proc	near
					; DATA XREF: .rdata:const icu_56::FieldPositionHandler::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		and	eax, 2
		jz	short loc_953
		push	offset ??1FieldPositionHandler@icu_56@@UAE@XZ ;	icu_56::FieldPositionHandler::~FieldPositionHandler(void)
		mov	eax, [ebp+var_8]
		mov	ecx, [eax-4]
		push	ecx
		push	4
		mov	edx, [ebp+var_8]
		push	edx
		call	??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_94B
		mov	eax, [ebp+var_8]
		sub	eax, 4
		mov	esi, esp
		push	eax		; void *
		call	dword ptr ds:__imp_??_VUMemory@icu_56@@SAXPAX@Z	; icu_56::UMemory::operator delete[](void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_94B:				; CODE XREF: icu_56::FieldPositionHandler::`vector deleting destructor'(uint)+48j
		mov	eax, [ebp+var_8]
		sub	eax, 4
		jmp	short loc_97C
; ---------------------------------------------------------------------------

loc_953:				; CODE XREF: icu_56::FieldPositionHandler::`vector deleting destructor'(uint)+29j
		mov	ecx, [ebp+var_8] ; this
		call	??1FieldPositionHandler@icu_56@@UAE@XZ ; icu_56::FieldPositionHandler::~FieldPositionHandler(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_979
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_979:				; CODE XREF: icu_56::FieldPositionHandler::`vector deleting destructor'(uint)+79j
		mov	eax, [ebp+var_8]

loc_97C:				; CODE XREF: icu_56::FieldPositionHandler::`vector deleting destructor'(uint)+69j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_EFieldPositionHandler@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 994h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::FieldPositionHandler::~FieldPositionHandler(icu_56::FieldPositionHandler *__hidden this)
		public ??1FieldPositionHandler@icu_56@@UAE@XZ
??1FieldPositionHandler@icu_56@@UAE@XZ proc near
					; CODE XREF: icu_56::FieldPositionHandler::`scalar deleting destructor'(uint)+26p
					; icu_56::FieldPositionHandler::`vector	deleting destructor'(uint)+6Ep ...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7FieldPositionHandler@icu_56@@6B@ ; const icu_56::FieldPositionHandler::`vftable'
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??1FieldPositionHandler@icu_56@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 9C8h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::FieldPositionHandler::addAttribute(icu_56::FieldPositionHandler *this, int, int, int)
		public ?addAttribute@FieldPositionHandler@icu_56@@UAEXHHH@Z
?addAttribute@FieldPositionHandler@icu_56@@UAEXHHH@Z proc near ; DATA XREF: .rdata:00000778o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?addAttribute@FieldPositionHandler@icu_56@@UAEXHHH@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 9F4h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::FieldPositionHandler::shiftLast(icu_56::FieldPositionHandler *this, int)
		public ?shiftLast@FieldPositionHandler@icu_56@@UAEXH@Z
?shiftLast@FieldPositionHandler@icu_56@@UAEXH@Z	proc near ; DATA XREF: .rdata:0000077Co

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?shiftLast@FieldPositionHandler@icu_56@@UAEXH@Z	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A20h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__thiscall icu_56::FieldPositionHandler::isRecording(icu_56::FieldPositionHandler *__hidden this)
		public ?isRecording@FieldPositionHandler@icu_56@@UBECXZ
?isRecording@FieldPositionHandler@icu_56@@UBECXZ proc near ; DATA XREF:	.rdata:00000780o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		xor	al, al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?isRecording@FieldPositionHandler@icu_56@@UBECXZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A4Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::FieldPositionOnlyHandler::FieldPositionOnlyHandler(icu_56::FieldPositionOnlyHandler	*this, struct icu_56::FieldPosition *)
		public ??0FieldPositionOnlyHandler@icu_56@@QAE@AAVFieldPosition@1@@Z
??0FieldPositionOnlyHandler@icu_56@@QAE@AAVFieldPosition@1@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??0FieldPositionHandler@icu_56@@QAE@XZ ; icu_56::FieldPositionHandler::FieldPositionHandler(void)
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7FieldPositionOnlyHandler@icu_56@@6B@ ; const icu_56::FieldPositionOnlyHandler::`vftable'
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+4], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0FieldPositionOnlyHandler@icu_56@@QAE@AAVFieldPosition@1@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AA4h
		dd offset ??_R4FieldPositionOnlyHandler@icu_56@@6B@ ; const icu_56::FieldPositionOnlyHandler::`RTTI Complete Object Locator'
		public ??_7FieldPositionOnlyHandler@icu_56@@6B@
; const	icu_56::FieldPositionOnlyHandler::`vftable'
??_7FieldPositionOnlyHandler@icu_56@@6B@ dd offset ??_EFieldPositionOnlyHandler@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::FieldPositionOnlyHandler::FieldPositionOnlyHandler(icu_56::FieldPosition &)+2Eo
					; icu_56::FieldPositionOnlyHandler::~FieldPositionOnlyHandler(void)+26o
					; icu_56::FieldPositionOnlyHandler::`vector deleting destructor'(uint)
		dd offset ?addAttribute@FieldPositionOnlyHandler@icu_56@@UAEXHHH@Z ; icu_56::FieldPositionOnlyHandler::addAttribute(int,int,int)
		dd offset ?shiftLast@FieldPositionOnlyHandler@icu_56@@UAEXH@Z ;	icu_56::FieldPositionOnlyHandler::shiftLast(int)
		dd offset ?isRecording@FieldPositionOnlyHandler@icu_56@@UBECXZ ; icu_56::FieldPositionOnlyHandler::isRecording(void)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0AB8h
		public ??_R4FieldPositionOnlyHandler@icu_56@@6B@
; const	icu_56::FieldPositionOnlyHandler::`RTTI	Complete Object	Locator'
??_R4FieldPositionOnlyHandler@icu_56@@6B@ dd 3 dup(0) ;	DATA XREF: .rdata:00000AA4o
		dd offset ??_R0?AVFieldPositionOnlyHandler@icu_56@@@8 ;	icu_56::FieldPositionOnlyHandler `RTTI Type Descriptor'
		dd offset ??_R3FieldPositionOnlyHandler@icu_56@@8 ; icu_56::FieldPositionOnlyHandler::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 0ACCh
		public ??_R0?AVFieldPositionOnlyHandler@icu_56@@@8
; class	icu_56::FieldPositionOnlyHandler `RTTI Type Descriptor'
??_R0?AVFieldPositionOnlyHandler@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00000AC4o
					; .rdata$r:icu_56::FieldPositionOnlyHandler::`RTTI Base	Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avfieldpos_1	db '.?AVFieldPositionOnlyHandler@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0AFCh
		public ??_R3FieldPositionOnlyHandler@icu_56@@8
; icu_56::FieldPositionOnlyHandler::`RTTI Class	Hierarchy Descriptor'
??_R3FieldPositionOnlyHandler@icu_56@@8	dd 2 dup(0) ; DATA XREF: .rdata$r:00000AC8o
					; .rdata$r:00000B34o
		dd 3
		dd offset ??_R2FieldPositionOnlyHandler@icu_56@@8 ; icu_56::FieldPositionOnlyHandler::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0B0Ch
		public ??_R2FieldPositionOnlyHandler@icu_56@@8
; icu_56::FieldPositionOnlyHandler::`RTTI Base Class Array'
??_R2FieldPositionOnlyHandler@icu_56@@8	dd offset ??_R1A@?0A@EA@FieldPositionOnlyHandler@icu_56@@8
					; DATA XREF: .rdata$r:00000B08o
					; icu_56::FieldPositionOnlyHandler::`RTTI Base Class Descriptor	at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@FieldPositionHandler@icu_56@@8 ; icu_56::FieldPositionHandler::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0B1Ch
		public ??_R1A@?0A@EA@FieldPositionOnlyHandler@icu_56@@8
; icu_56::FieldPositionOnlyHandler::`RTTI Base Class Descriptor	at (0, -1, 0, 64)'
??_R1A@?0A@EA@FieldPositionOnlyHandler@icu_56@@8 dd offset ??_R0?AVFieldPositionOnlyHandler@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::FieldPositionOnlyHandler::`RTTI Base Class Array'o
					; icu_56::FieldPositionOnlyHandler `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ??3@YAXPAX@Z	; operator delete(void *)
		dd offset ??_R3FieldPositionOnlyHandler@icu_56@@8 ; icu_56::FieldPositionOnlyHandler::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0B38h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::FieldPositionOnlyHandler::`scalar deleting destructor'(unsigned int)
		public ??_GFieldPositionOnlyHandler@icu_56@@UAEPAXI@Z
??_GFieldPositionOnlyHandler@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1FieldPositionOnlyHandler@icu_56@@UAE@XZ ; icu_56::FieldPositionOnlyHandler::~FieldPositionOnlyHandler(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_B81
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_B81:				; CODE XREF: icu_56::FieldPositionOnlyHandler::`scalar deleting	destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GFieldPositionOnlyHandler@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0B9Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::FieldPositionOnlyHandler::~FieldPositionOnlyHandler(icu_56::FieldPositionOnlyHandler *__hidden this)
		public ??1FieldPositionOnlyHandler@icu_56@@UAE@XZ
??1FieldPositionOnlyHandler@icu_56@@UAE@XZ proc	near
					; CODE XREF: icu_56::FieldPositionOnlyHandler::`scalar deleting	destructor'(uint)+26p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7FieldPositionOnlyHandler@icu_56@@6B@ ; const icu_56::FieldPositionOnlyHandler::`vftable'
		mov	ecx, [ebp+var_8] ; this
		call	??1FieldPositionHandler@icu_56@@UAE@XZ ; icu_56::FieldPositionHandler::~FieldPositionHandler(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1FieldPositionOnlyHandler@icu_56@@UAE@XZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0BE4h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::FieldPositionOnlyHandler::addAttribute(icu_56::FieldPositionOnlyHandler *this, int, int, int)
		public ?addAttribute@FieldPositionOnlyHandler@icu_56@@UAEXHHH@Z
?addAttribute@FieldPositionOnlyHandler@icu_56@@UAEXHHH@Z proc near
					; DATA XREF: .rdata:00000AACo

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]	; this
		call	?getField@FieldPosition@icu_56@@QBEHXZ ; icu_56::FieldPosition::getField(void)
		cmp	eax, [ebp+arg_0]
		jnz	short loc_C35
		mov	eax, [ebp+arg_4]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		mov	ecx, [ecx+4]	; this
		call	?setBeginIndex@FieldPosition@icu_56@@QAEXH@Z ; icu_56::FieldPosition::setBeginIndex(int)
		mov	eax, [ebp+arg_8]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		mov	ecx, [ecx+4]	; this
		call	?setEndIndex@FieldPosition@icu_56@@QAEXH@Z ; icu_56::FieldPosition::setEndIndex(int)

loc_C35:				; CODE XREF: icu_56::FieldPositionOnlyHandler::addAttribute(int,int,int)+31j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?addAttribute@FieldPositionOnlyHandler@icu_56@@UAEXHHH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C4Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::FieldPositionOnlyHandler::shiftLast(icu_56::FieldPositionOnlyHandler *this, int)
		public ?shiftLast@FieldPositionOnlyHandler@icu_56@@UAEXH@Z
?shiftLast@FieldPositionOnlyHandler@icu_56@@UAEXH@Z proc near ;	DATA XREF: .rdata:00000AB0o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		cmp	[ebp+arg_0], 0
		jz	short loc_CC9
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]	; this
		call	?getField@FieldPosition@icu_56@@QBEHXZ ; icu_56::FieldPosition::getField(void)
		cmp	eax, 0FFFFFFFFh
		jz	short loc_CC9
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]	; this
		call	?getBeginIndex@FieldPosition@icu_56@@QBEHXZ ; icu_56::FieldPosition::getBeginIndex(void)
		cmp	eax, 0FFFFFFFFh
		jz	short loc_CC9
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]	; this
		call	?getBeginIndex@FieldPosition@icu_56@@QBEHXZ ; icu_56::FieldPosition::getBeginIndex(void)
		add	eax, [ebp+arg_0]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		mov	ecx, [ecx+4]	; this
		call	?setBeginIndex@FieldPosition@icu_56@@QAEXH@Z ; icu_56::FieldPosition::setBeginIndex(int)
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]	; this
		call	?getEndIndex@FieldPosition@icu_56@@QBEHXZ ; icu_56::FieldPosition::getEndIndex(void)
		add	eax, [ebp+arg_0]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		mov	ecx, [ecx+4]	; this
		call	?setEndIndex@FieldPosition@icu_56@@QAEXH@Z ; icu_56::FieldPosition::setEndIndex(int)

loc_CC9:				; CODE XREF: icu_56::FieldPositionOnlyHandler::shiftLast(int)+27j
					; icu_56::FieldPositionOnlyHandler::shiftLast(int)+37j	...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?shiftLast@FieldPositionOnlyHandler@icu_56@@UAEXH@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0CE0h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__thiscall icu_56::FieldPositionOnlyHandler::isRecording(icu_56::FieldPositionOnlyHandler *__hidden this)
		public ?isRecording@FieldPositionOnlyHandler@icu_56@@UBECXZ
?isRecording@FieldPositionOnlyHandler@icu_56@@UBECXZ proc near ; DATA XREF: .rdata:00000AB4o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]	; this
		call	?getField@FieldPosition@icu_56@@QBEHXZ ; icu_56::FieldPosition::getField(void)
		cmp	eax, 0FFFFFFFFh
		setnz	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?isRecording@FieldPositionOnlyHandler@icu_56@@UBECXZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0D28h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::FieldPositionIteratorHandler::FieldPositionIteratorHandler(icu_56::FieldPositionIteratorHandler *this, struct icu_56::FieldPositionIterator	*, enum	UErrorCode *)
		public ??0FieldPositionIteratorHandler@icu_56@@QAE@PAVFieldPositionIterator@1@AAW4UErrorCode@@@Z
??0FieldPositionIteratorHandler@icu_56@@QAE@PAVFieldPositionIterator@1@AAW4UErrorCode@@@Z proc near

var_F4		= dword	ptr -0F4h
var_EC		= dword	ptr -0ECh
var_E0		= dword	ptr -0E0h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0FieldPositionIteratorHandler@icu_56@@QAE@PAVFieldPositionIterator@1@AAW4UErrorCode@@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0E8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_F4]
		mov	ecx, 3Ah ; ':'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	ecx, [ebp+var_14] ; this
		call	??0FieldPositionHandler@icu_56@@QAE@XZ ; icu_56::FieldPositionHandler::FieldPositionHandler(void)
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7FieldPositionIteratorHandler@icu_56@@6B@ ; const icu_56::FieldPositionIteratorHandler::`vftable'
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_0]
		mov	[eax+4], ecx
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax+8], 0
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		mov	[eax+0Ch], edx
		mov	eax, [ebp+var_14]
		cmp	dword ptr [eax+4], 0
		jz	loc_E4A
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+0Ch]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	loc_E4A
		mov	esi, esp
		push	14h		; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_E0], eax
		mov	byte ptr [ebp+var_4], 1
		cmp	[ebp+var_E0], 0
		jz	short loc_E24
		mov	eax, [ebp+var_14]
		add	eax, 0Ch
		mov	esi, esp
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+var_E0] ; this
		call	dword ptr ds:__imp_??0UVector32@icu_56@@QAE@AAW4UErrorCode@@@Z ; icu_56::UVector32::UVector32(UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_E0]
		mov	dword ptr [ecx], offset	??_SUVector32@icu_56@@6B@ ; const icu_56::UVector32::`local vftable'
		mov	edx, [ebp+var_E0]
		mov	[ebp+var_F4], edx
		jmp	short loc_E2E
; ---------------------------------------------------------------------------

loc_E24:				; CODE XREF: icu_56::FieldPositionIteratorHandler::FieldPositionIteratorHandler(icu_56::FieldPositionIterator *,UErrorCode &)+C4j
		mov	[ebp+var_F4], 0

loc_E2E:				; CODE XREF: icu_56::FieldPositionIteratorHandler::FieldPositionIteratorHandler(icu_56::FieldPositionIterator *,UErrorCode &)+FAj
		mov	eax, [ebp+var_F4]
		mov	[ebp+var_EC], eax
		mov	byte ptr [ebp+var_4], 0
		mov	ecx, [ebp+var_14]
		mov	edx, [ebp+var_EC]
		mov	[ecx+8], edx

loc_E4A:				; CODE XREF: icu_56::FieldPositionIteratorHandler::FieldPositionIteratorHandler(icu_56::FieldPositionIterator *,UErrorCode &)+7Fj
					; icu_56::FieldPositionIteratorHandler::FieldPositionIteratorHandler(icu_56::FieldPositionIterator *,UErrorCode	&)+99j
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0F4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??0FieldPositionIteratorHandler@icu_56@@QAE@PAVFieldPositionIterator@1@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 0E78h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0FieldPositionIteratorHandler@icu_56@@QAE@PAVFieldPositionIterator@1@AAW4UErrorCode@@@Z$0 proc near
					; DATA XREF: .xdata$x:00000EDCo
		mov	ecx, [ebp-14h]	; this
		jmp	??1FieldPositionHandler@icu_56@@UAE@XZ ; icu_56::FieldPositionHandler::~FieldPositionHandler(void)
__unwindfunclet$??0FieldPositionIteratorHandler@icu_56@@QAE@PAVFieldPositionIterator@1@AAW4UErrorCode@@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0FieldPositionIteratorHandler@icu_56@@QAE@PAVFieldPositionIterator@1@AAW4UErrorCode@@@Z$1 proc near
					; DATA XREF: .xdata$x:00000EE4o
		mov	esi, esp
		mov	eax, [ebp-0E0h]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0FieldPositionIteratorHandler@icu_56@@QAE@PAVFieldPositionIterator@1@AAW4UErrorCode@@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0FieldPositionIteratorHandler@icu_56@@QAE@PAVFieldPositionIterator@1@AAW4UErrorCode@@@Z proc near
					; DATA XREF: icu_56::FieldPositionIteratorHandler::FieldPositionIteratorHandler(icu_56::FieldPositionIterator *,UErrorCode &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0F8h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0FieldPositionIteratorHandler@icu_56@@QAE@PAVFieldPositionIterator@1@AAW4UErrorCode@@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0FieldPositionIteratorHandler@icu_56@@QAE@PAVFieldPositionIterator@1@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0EB8h
		dd offset ??_R4UVector32@icu_56@@6B@ ; const icu_56::UVector32::`RTTI Complete Object Locator'
		public ??_SUVector32@icu_56@@6B@
; const	icu_56::UVector32::`local vftable'
??_SUVector32@icu_56@@6B@ dd offset ??_EUVector32@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::FieldPositionIteratorHandler::FieldPositionIteratorHandler(icu_56::FieldPositionIterator *,UErrorCode &)+E8o
					; icu_56::UVector32::`vector deleting destructor'(uint)
		dd offset ?getDynamicClassID@UVector32@icu_56@@UBEPAXXZ	; icu_56::UVector32::getDynamicClassID(void)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0EC4h
		dd offset ??_R4FieldPositionIteratorHandler@icu_56@@6B@	; const	icu_56::FieldPositionIteratorHandler::`RTTI Complete Object Locator'
		public ??_7FieldPositionIteratorHandler@icu_56@@6B@
; const	icu_56::FieldPositionIteratorHandler::`vftable'
??_7FieldPositionIteratorHandler@icu_56@@6B@ dd	offset ??_EFieldPositionIteratorHandler@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::FieldPositionIteratorHandler::FieldPositionIteratorHandler(icu_56::FieldPositionIterator *,UErrorCode &)+54o
					; icu_56::FieldPositionIteratorHandler::~FieldPositionIteratorHandler(void)+45o
					; icu_56::FieldPositionIteratorHandler::`vector	deleting destructor'(uint)
		dd offset ?addAttribute@FieldPositionIteratorHandler@icu_56@@UAEXHHH@Z ; icu_56::FieldPositionIteratorHandler::addAttribute(int,int,int)
		dd offset ?shiftLast@FieldPositionIteratorHandler@icu_56@@UAEXH@Z ; icu_56::FieldPositionIteratorHandler::shiftLast(int)
		dd offset ?isRecording@FieldPositionIteratorHandler@icu_56@@UBECXZ ; icu_56::FieldPositionIteratorHandler::isRecording(void)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 0ED8h
__unwindtable$??0FieldPositionIteratorHandler@icu_56@@QAE@PAVFieldPositionIterator@1@AAW4UErrorCode@@@Z	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00000EF0o
		dd offset __unwindfunclet$??0FieldPositionIteratorHandler@icu_56@@QAE@PAVFieldPositionIterator@1@AAW4UErrorCode@@@Z$0
		dd 0
		dd offset __unwindfunclet$??0FieldPositionIteratorHandler@icu_56@@QAE@PAVFieldPositionIterator@1@AAW4UErrorCode@@@Z$1
__ehfuncinfo$??0FieldPositionIteratorHandler@icu_56@@QAE@PAVFieldPositionIterator@1@AAW4UErrorCode@@@Z dd 19930522h, 2
					; DATA XREF: __ehhandler$??0FieldPositionIteratorHandler@icu_56@@QAE@PAVFieldPositionIterator@1@AAW4UErrorCode@@@Z+14o
		dd offset __unwindtable$??0FieldPositionIteratorHandler@icu_56@@QAE@PAVFieldPositionIterator@1@AAW4UErrorCode@@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0F0Ch
		public ??_R4FieldPositionIteratorHandler@icu_56@@6B@
; const	icu_56::FieldPositionIteratorHandler::`RTTI Complete Object Locator'
??_R4FieldPositionIteratorHandler@icu_56@@6B@ dd 3 dup(0) ; DATA XREF: .rdata:00000EC4o
		dd offset ??_R0?AVFieldPositionIteratorHandler@icu_56@@@8 ; icu_56::FieldPositionIteratorHandler `RTTI Type Descriptor'
		dd offset ??_R3FieldPositionIteratorHandler@icu_56@@8 ;	icu_56::FieldPositionIteratorHandler::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 0F20h
		public ??_R0?AVFieldPositionIteratorHandler@icu_56@@@8
; class	icu_56::FieldPositionIteratorHandler `RTTI Type	Descriptor'
??_R0?AVFieldPositionIteratorHandler@icu_56@@@8	dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00000F18o
					; .rdata$r:icu_56::FieldPositionIteratorHandler::`RTTI Base Class Descriptor at	(0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?avfieldpos_2	db '.?AVFieldPositionIteratorHandler@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0F54h
		public ??_R3FieldPositionIteratorHandler@icu_56@@8
; icu_56::FieldPositionIteratorHandler::`RTTI Class Hierarchy Descriptor'
??_R3FieldPositionIteratorHandler@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00000F1Co
					; .rdata$r:00000F8Co
		dd 3
		dd offset ??_R2FieldPositionIteratorHandler@icu_56@@8 ;	icu_56::FieldPositionIteratorHandler::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0F64h
		public ??_R2FieldPositionIteratorHandler@icu_56@@8
; icu_56::FieldPositionIteratorHandler::`RTTI Base Class Array'
??_R2FieldPositionIteratorHandler@icu_56@@8 dd offset ??_R1A@?0A@EA@FieldPositionIteratorHandler@icu_56@@8
					; DATA XREF: .rdata$r:00000F60o
					; icu_56::FieldPositionIteratorHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@FieldPositionHandler@icu_56@@8 ; icu_56::FieldPositionHandler::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0F74h
		public ??_R1A@?0A@EA@FieldPositionIteratorHandler@icu_56@@8
; icu_56::FieldPositionIteratorHandler::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@FieldPositionIteratorHandler@icu_56@@8 dd	offset ??_R0?AVFieldPositionIteratorHandler@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::FieldPositionIteratorHandler::`RTTI Base Class Array'o
					; icu_56::FieldPositionIteratorHandler `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ??3@YAXPAX@Z	; operator delete(void *)
		dd offset ??_R3FieldPositionIteratorHandler@icu_56@@8 ;	icu_56::FieldPositionIteratorHandler::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0F90h
		public ??_R4UVector32@icu_56@@6B@
; const	icu_56::UVector32::`RTTI Complete Object Locator'
??_R4UVector32@icu_56@@6B@ dd 3	dup(0)	; DATA XREF: .rdata:00000EB8o
		dd offset ??_R0?AVUVector32@icu_56@@@8 ; icu_56::UVector32 `RTTI Type Descriptor'
		dd offset ??_R3UVector32@icu_56@@8 ; icu_56::UVector32::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 0FA4h
		public ??_R0?AVUVector32@icu_56@@@8
; class	icu_56::UVector32 `RTTI	Type Descriptor'
??_R0?AVUVector32@icu_56@@@8 dd	offset ??_7type_info@@6B@ ; DATA XREF: .rdata$r:00000F9Co
					; .rdata$r:icu_56::UVector32::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avuvector32@	db '.?AVUVector32@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0FC4h
		public ??_R3UVector32@icu_56@@8
; icu_56::UVector32::`RTTI Class Hierarchy Descriptor'
??_R3UVector32@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00000FA0o
					; .rdata$r:00000FFCo
		dd 3
		dd offset ??_R2UVector32@icu_56@@8 ; icu_56::UVector32::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0FD4h
		public ??_R2UVector32@icu_56@@8
; icu_56::UVector32::`RTTI Base	Class Array'
??_R2UVector32@icu_56@@8 dd offset ??_R1A@?0A@EA@UVector32@icu_56@@8
					; DATA XREF: .rdata$r:00000FD0o
					; icu_56::UVector32::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0FE4h
		public ??_R1A@?0A@EA@UVector32@icu_56@@8
; icu_56::UVector32::`RTTI Base	Class Descriptor at (0,	-1, 0, 64)'
??_R1A@?0A@EA@UVector32@icu_56@@8 dd offset ??_R0?AVUVector32@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UVector32::`RTTI Base Class Array'o
					; icu_56::UVector32 `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ??3@YAXPAX@Z	; operator delete(void *)
		dd offset ??_R3UVector32@icu_56@@8 ; icu_56::UVector32::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1000h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl U_SUCCESS(enum  UErrorCode)
?U_SUCCESS@@YACW4UErrorCode@@@Z	proc near
					; CODE XREF: icu_56::FieldPositionIteratorHandler::FieldPositionIteratorHandler(icu_56::FieldPositionIterator *,UErrorCode &)+8Cp
					; icu_56::FieldPositionIteratorHandler::addAttribute(int,int,int)+37p ...

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		setle	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?U_SUCCESS@@YACW4UErrorCode@@@Z	endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 102Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::FieldPositionIteratorHandler::`scalar deleting destructor'(unsigned int)
		public ??_GFieldPositionIteratorHandler@icu_56@@UAEPAXI@Z
??_GFieldPositionIteratorHandler@icu_56@@UAEPAXI@Z proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1FieldPositionIteratorHandler@icu_56@@UAE@XZ ; icu_56::FieldPositionIteratorHandler::~FieldPositionIteratorHandler(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_1075
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1075:				; CODE XREF: icu_56::FieldPositionIteratorHandler::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GFieldPositionIteratorHandler@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1090h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::UVector32::`scalar deleting	destructor'(unsigned int)
		public ??_GUVector32@icu_56@@UAEPAXI@Z
??_GUVector32@icu_56@@UAEPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??1UVector32@icu_56@@UAE@XZ ; icu_56::UVector32::~UVector32(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_10E3
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_10E3:				; CODE XREF: icu_56::UVector32::`scalar	deleting destructor'(uint)+3Bj
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GUVector32@icu_56@@UAEPAXI@Z	endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10FCh
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::FieldPositionIteratorHandler::~FieldPositionIteratorHandler(icu_56::FieldPositionIteratorHandler *__hidden this)
		public ??1FieldPositionIteratorHandler@icu_56@@UAE@XZ
??1FieldPositionIteratorHandler@icu_56@@UAE@XZ proc near
					; CODE XREF: icu_56::FieldPositionIteratorHandler::`scalar deleting destructor'(uint)+26p

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??1FieldPositionIteratorHandler@icu_56@@UAE@XZ
		mov	eax, large fs:0
		push	eax
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7FieldPositionIteratorHandler@icu_56@@6B@ ; const icu_56::FieldPositionIteratorHandler::`vftable'
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		cmp	dword ptr [eax+4], 0
		jz	short loc_1170
		mov	eax, [ebp+var_14]
		add	eax, 0Ch
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+var_14]
		mov	edx, [ecx+8]
		push	edx		; struct icu_56::UVector32 *
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]	; this
		call	?setData@FieldPositionIterator@icu_56@@AAEXPAVUVector32@2@AAW4UErrorCode@@@Z ; icu_56::FieldPositionIterator::setData(icu_56::UVector32	*,UErrorCode &)

loc_1170:				; CODE XREF: icu_56::FieldPositionIteratorHandler::~FieldPositionIteratorHandler(void)+59j
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax+8], 0
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, [ebp+var_14] ; this
		call	??1FieldPositionHandler@icu_56@@UAE@XZ ; icu_56::FieldPositionHandler::~FieldPositionHandler(void)
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1FieldPositionIteratorHandler@icu_56@@UAE@XZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 11A8h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??1FieldPositionIteratorHandler@icu_56@@UAE@XZ$0 proc near
					; DATA XREF: .xdata$x:000011D4o
		mov	ecx, [ebp-14h]	; this
		jmp	??1FieldPositionHandler@icu_56@@UAE@XZ ; icu_56::FieldPositionHandler::~FieldPositionHandler(void)
__unwindfunclet$??1FieldPositionIteratorHandler@icu_56@@UAE@XZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??1FieldPositionIteratorHandler@icu_56@@UAE@XZ proc	near
					; DATA XREF: icu_56::FieldPositionIteratorHandler::~FieldPositionIteratorHandler(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0DCh]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??1FieldPositionIteratorHandler@icu_56@@UAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??1FieldPositionIteratorHandler@icu_56@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 11D0h
__unwindtable$??1FieldPositionIteratorHandler@icu_56@@UAE@XZ dd	0FFFFFFFFh
					; DATA XREF: .xdata$x:000011E0o
		dd offset __unwindfunclet$??1FieldPositionIteratorHandler@icu_56@@UAE@XZ$0
__ehfuncinfo$??1FieldPositionIteratorHandler@icu_56@@UAE@XZ dd 19930522h, 1
					; DATA XREF: __ehhandler$??1FieldPositionIteratorHandler@icu_56@@UAE@XZ+14o
		dd offset __unwindtable$??1FieldPositionIteratorHandler@icu_56@@UAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 11FCh
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::FieldPositionIteratorHandler::addAttribute(icu_56::FieldPositionIteratorHandler *this, int, int, int)
		public ?addAttribute@FieldPositionIteratorHandler@icu_56@@UAEXHHH@Z
?addAttribute@FieldPositionIteratorHandler@icu_56@@UAEXHHH@Z proc near
					; DATA XREF: .rdata:00000ECCo

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	dword ptr [eax+4], 0
		jz	loc_12F9
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+0Ch]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	loc_12F9
		mov	eax, [ebp+arg_4]
		cmp	eax, [ebp+arg_8]
		jge	loc_12F9
		mov	esi, esp
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+8]	; this
		call	dword ptr ds:__imp_?size@UVector32@icu_56@@QBEHXZ ; icu_56::UVector32::size(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_8]
		add	eax, 0Ch
		mov	esi, esp
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+arg_0]
		push	ecx		; int
		mov	edx, [ebp+var_8]
		mov	ecx, [edx+8]	; this
		call	dword ptr ds:__imp_?addElement@UVector32@icu_56@@QAEXHAAW4UErrorCode@@@Z ; icu_56::UVector32::addElement(int,UErrorCode	&)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		add	eax, 0Ch
		mov	esi, esp
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+arg_4]
		push	ecx		; int
		mov	edx, [ebp+var_8]
		mov	ecx, [edx+8]	; this
		call	dword ptr ds:__imp_?addElement@UVector32@icu_56@@QAEXHAAW4UErrorCode@@@Z ; icu_56::UVector32::addElement(int,UErrorCode	&)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		add	eax, 0Ch
		mov	esi, esp
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+arg_8]
		push	ecx		; int
		mov	edx, [ebp+var_8]
		mov	ecx, [edx+8]	; this
		call	dword ptr ds:__imp_?addElement@UVector32@icu_56@@QAEXHAAW4UErrorCode@@@Z ; icu_56::UVector32::addElement(int,UErrorCode	&)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+0Ch]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jnz	short loc_12F9
		mov	esi, esp
		mov	eax, [ebp+var_14]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		mov	ecx, [ecx+8]	; this
		call	dword ptr ds:__imp_?setSize@UVector32@icu_56@@QAEXH@Z ;	icu_56::UVector32::setSize(int)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_12F9:				; CODE XREF: icu_56::FieldPositionIteratorHandler::addAttribute(int,int,int)+2Aj
					; icu_56::FieldPositionIteratorHandler::addAttribute(int,int,int)+44j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?addAttribute@FieldPositionIteratorHandler@icu_56@@UAEXHHH@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1310h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::FieldPositionIteratorHandler::shiftLast(icu_56::FieldPositionIteratorHandler *__hidden this, int)
		public ?shiftLast@FieldPositionIteratorHandler@icu_56@@UAEXH@Z
?shiftLast@FieldPositionIteratorHandler@icu_56@@UAEXH@Z	proc near
					; DATA XREF: .rdata:00000ED0o

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi		; int
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+0Ch]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	loc_13F3
		cmp	[ebp+arg_0], 0
		jz	loc_13F3
		mov	esi, esp
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+8]	; this
		call	dword ptr ds:__imp_?size@UVector32@icu_56@@QBEHXZ ; icu_56::UVector32::size(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jle	short loc_13F3
		mov	eax, [ebp+var_14]
		sub	eax, 1
		mov	[ebp+var_14], eax
		mov	esi, esp
		mov	eax, [ebp+var_14]
		push	eax		; int
		mov	edi, esp
		mov	ecx, [ebp+var_14]
		push	ecx		; int
		mov	edx, [ebp+var_8]
		mov	ecx, [edx+8]	; this
		call	dword ptr ds:__imp_?elementAti@UVector32@icu_56@@QBEHH@Z ; icu_56::UVector32::elementAti(int)
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, [ebp+arg_0]
		push	eax		; int
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+8]	; this
		call	dword ptr ds:__imp_?setElementAt@UVector32@icu_56@@QAEXHH@Z ; icu_56::UVector32::setElementAt(int,int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_14]
		sub	eax, 1
		mov	[ebp+var_14], eax
		mov	esi, esp
		mov	eax, [ebp+var_14]
		push	eax		; int
		mov	edi, esp
		mov	ecx, [ebp+var_14]
		push	ecx		; int
		mov	edx, [ebp+var_8]
		mov	ecx, [edx+8]	; this
		call	dword ptr ds:__imp_?elementAti@UVector32@icu_56@@QBEHH@Z ; icu_56::UVector32::elementAti(int)
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, [ebp+arg_0]
		push	eax		; int
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+8]	; this
		call	dword ptr ds:__imp_?setElementAt@UVector32@icu_56@@QAEXHH@Z ; icu_56::UVector32::setElementAt(int,int)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_13F3:				; CODE XREF: icu_56::FieldPositionIteratorHandler::shiftLast(int)+37j
					; icu_56::FieldPositionIteratorHandler::shiftLast(int)+41j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?shiftLast@FieldPositionIteratorHandler@icu_56@@UAEXH@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 140Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed __int8	__thiscall icu_56::FieldPositionIteratorHandler::isRecording(icu_56::FieldPositionIteratorHandler *__hidden this)
		public ?isRecording@FieldPositionIteratorHandler@icu_56@@UBECXZ
?isRecording@FieldPositionIteratorHandler@icu_56@@UBECXZ proc near
					; DATA XREF: .rdata:00000ED4o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+0Ch]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?isRecording@FieldPositionIteratorHandler@icu_56@@UBECXZ endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; _DWORD __thiscall icu_56::UObject::UObject(icu_56::UObject *__hidden this)
		extrn __imp_??0UObject@icu_56@@QAE@XZ:near
					; CODE XREF: icu_56::FieldPosition::FieldPosition(void)+28p
					; icu_56::FieldPosition::FieldPosition(int)+28p
					; DATA XREF: ...
		extrn __RTC_CheckEsp:near
					; CODE XREF: icu_56::FieldPosition::FieldPosition(void)+30p
					; icu_56::FieldPosition::FieldPosition(void)+6Ap ...
; const	type_info::`vftable'
		extrn ??_7type_info@@6B@:near
					; DATA XREF: .data:icu_56::FieldPosition `RTTI Type Descriptor'o
					; .data:icu_56::UObject	`RTTI Type Descriptor'o ...
; public: virtual void * __thiscall icu_56::FieldPosition::getDynamicClassID(void)const
		extrn ?getDynamicClassID@FieldPosition@icu_56@@UBEPAXXZ:near
					; DATA XREF: .rdata:000000F0o
; _DWORD __thiscall icu_56::UObject::UObject(icu_56::UObject *__hidden this, const struct icu_56::UObject *)
		extrn __imp_??0UObject@icu_56@@QAE@ABV01@@Z:near
					; CODE XREF: icu_56::FieldPosition::FieldPosition(icu_56::FieldPosition	const &)+2Cp
					; DATA XREF: icu_56::FieldPosition::FieldPosition(icu_56::FieldPosition	const &)+2Cr
; void __cdecl icu_56::UMemory::operator delete(void *)
		extrn __imp_??3UMemory@icu_56@@SAXPAX@Z:near
					; CODE XREF: icu_56::FieldPosition::`scalar deleting destructor'(uint)+39p
					; icu_56::FieldPosition::`vector deleting destructor'(uint)+81p ...
; _DWORD __thiscall icu_56::FieldPosition::~FieldPosition(icu_56::FieldPosition	*__hidden this)
		extrn ??1FieldPosition@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::FieldPosition::`scalar deleting destructor'(uint)+26p
					; icu_56::FieldPosition::`vector deleting destructor'(uint)+6Ep
					; DATA XREF: ...
; void __cdecl icu_56::UMemory::operator delete[](void *)
		extrn __imp_??_VUMemory@icu_56@@SAXPAX@Z:near
					; CODE XREF: icu_56::FieldPosition::`vector deleting destructor'(uint)+53p
					; icu_56::FieldPositionHandler::`vector	deleting destructor'(uint)+53p
					; DATA XREF: ...
; void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *))
		extrn ??_M@YGXPAXIHP6EX0@Z@Z:near
					; CODE XREF: icu_56::FieldPosition::`vector deleting destructor'(uint)+3Dp
					; icu_56::FieldPositionHandler::`vector	deleting destructor'(uint)+3Dp
; public: signed char __thiscall icu_56::FieldPositionIterator::operator==(class icu_56::FieldPositionIterator const &)const
		extrn ??8FieldPositionIterator@icu_56@@QBECABV01@@Z:near
					; CODE XREF: icu_56::FieldPositionIterator::operator!=(icu_56::FieldPositionIterator const &)+2Ap
; __declspec(dllimport)	public:	class icu_56::UObject &	__thiscall icu_56::UObject::operator=(class icu_56::UObject const &)
		extrn __imp_??4UObject@icu_56@@QAEAAV01@ABV01@@Z:near
					; CODE XREF: icu_56::FieldPositionIterator::operator=(icu_56::FieldPositionIterator const &)+2Cp
					; DATA XREF: icu_56::FieldPositionIterator::operator=(icu_56::FieldPositionIterator const &)+2Cr
; public: virtual void * __thiscall icu_56::FieldPositionOnlyHandler::`scalar deleting destructor'(unsigned int)
		extrn ??_GFieldPositionOnlyHandler@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::FieldPositionOnlyHandler::`vector deleting destructor'(unsigned int)
		extrn ??_EFieldPositionOnlyHandler@icu_56@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:const icu_56::FieldPositionOnlyHandler::`vftable'o
; _DWORD __thiscall icu_56::UVector32::UVector32(icu_56::UVector32 *__hidden this, enum	UErrorCode *)
		extrn __imp_??0UVector32@icu_56@@QAE@AAW4UErrorCode@@@Z:near
					; CODE XREF: icu_56::FieldPositionIteratorHandler::FieldPositionIteratorHandler(icu_56::FieldPositionIterator *,UErrorCode &)+D5p
					; DATA XREF: icu_56::FieldPositionIteratorHandler::FieldPositionIteratorHandler(icu_56::FieldPositionIterator *,UErrorCode &)+D5r
; void *__cdecl	static icu_56::UMemory::operator new(unsigned int)
		extrn __imp_??2UMemory@icu_56@@SAPAXI@Z:near
					; CODE XREF: icu_56::FieldPositionIteratorHandler::FieldPositionIteratorHandler(icu_56::FieldPositionIterator *,UErrorCode &)+A3p
					; DATA XREF: icu_56::FieldPositionIteratorHandler::FieldPositionIteratorHandler(icu_56::FieldPositionIterator *,UErrorCode &)+A3r
		extrn ___security_cookie:near
					; DATA XREF: icu_56::FieldPositionIteratorHandler::FieldPositionIteratorHandler(icu_56::FieldPositionIterator *,UErrorCode &)+2Er
					; icu_56::FieldPositionIteratorHandler::~FieldPositionIteratorHandler(void)+2Er
		extrn ___CxxFrameHandler3:near
					; CODE XREF: __ehhandler$??0FieldPositionIteratorHandler@icu_56@@QAE@PAVFieldPositionIterator@1@AAW4UErrorCode@@@Z+19j
					; __ehhandler$??1FieldPositionIteratorHandler@icu_56@@UAE@XZ+19j
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: __ehhandler$??0FieldPositionIteratorHandler@icu_56@@QAE@PAVFieldPositionIterator@1@AAW4UErrorCode@@@Z+Fp
					; __ehhandler$??1FieldPositionIteratorHandler@icu_56@@UAE@XZ+Fp
; public: virtual void * __thiscall icu_56::FieldPositionIteratorHandler::`scalar deleting destructor'(unsigned int)
		extrn ??_GFieldPositionIteratorHandler@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::FieldPositionIteratorHandler::`vector deleting destructor'(unsigned int)
		extrn ??_EFieldPositionIteratorHandler@icu_56@@UAEPAXI@Z:near ;	weak
					; DATA XREF: .rdata:const icu_56::FieldPositionIteratorHandler::`vftable'o
; public: virtual void * __thiscall icu_56::UVector32::`scalar deleting	destructor'(unsigned int)
		extrn ??_GUVector32@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::UVector32::`vector deleting	destructor'(unsigned int)
		extrn ??_EUVector32@icu_56@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:const icu_56::UVector32::`local vftable'o
; public: virtual void * __thiscall icu_56::UVector32::getDynamicClassID(void)const
		extrn ?getDynamicClassID@UVector32@icu_56@@UBEPAXXZ:near
					; DATA XREF: .rdata:00000EC0o
; _DWORD __thiscall icu_56::UVector32::~UVector32(icu_56::UVector32 *__hidden this)
		extrn __imp_??1UVector32@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::UVector32::`scalar	deleting destructor'(uint)+28p
					; DATA XREF: icu_56::UVector32::`scalar	deleting destructor'(uint)+28r
; void __thiscall icu_56::FieldPositionIterator::setData(icu_56::FieldPositionIterator *__hidden this, struct icu_56::UVector32	*, enum	UErrorCode *)
		extrn ?setData@FieldPositionIterator@icu_56@@AAEXPAVUVector32@2@AAW4UErrorCode@@@Z:near
					; CODE XREF: icu_56::FieldPositionIteratorHandler::~FieldPositionIteratorHandler(void)+6Fp
; void __thiscall icu_56::UVector32::setSize(icu_56::UVector32 *__hidden this, int)
		extrn __imp_?setSize@UVector32@icu_56@@QAEXH@Z:near
					; CODE XREF: icu_56::FieldPositionIteratorHandler::addAttribute(int,int,int)+F0p
					; DATA XREF: icu_56::FieldPositionIteratorHandler::addAttribute(int,int,int)+F0r
; void __thiscall icu_56::UVector32::addElement(icu_56::UVector32 *__hidden this, int, enum UErrorCode *)
		extrn __imp_?addElement@UVector32@icu_56@@QAEXHAAW4UErrorCode@@@Z:near
					; CODE XREF: icu_56::FieldPositionIteratorHandler::addAttribute(int,int,int)+81p
					; icu_56::FieldPositionIteratorHandler::addAttribute(int,int,int)+A1p ...
; int __thiscall icu_56::UVector32::size(icu_56::UVector32 *__hidden this)
		extrn __imp_?size@UVector32@icu_56@@QBEHXZ:near
					; CODE XREF: icu_56::FieldPositionIteratorHandler::addAttribute(int,int,int)+5Ep
					; icu_56::FieldPositionIteratorHandler::shiftLast(int)+4Fp
					; DATA XREF: ...
; void __thiscall icu_56::UVector32::setElementAt(icu_56::UVector32 *__hidden this, int, int)
		extrn __imp_?setElementAt@UVector32@icu_56@@QAEXHH@Z:near
					; CODE XREF: icu_56::FieldPositionIteratorHandler::shiftLast(int)+97p
					; icu_56::FieldPositionIteratorHandler::shiftLast(int)+D6p
					; DATA XREF: ...
; int __thiscall icu_56::UVector32::elementAti(icu_56::UVector32 *__hidden this, int)
		extrn __imp_?elementAti@UVector32@icu_56@@QBEHH@Z:near
					; CODE XREF: icu_56::FieldPositionIteratorHandler::shiftLast(int)+80p
					; icu_56::FieldPositionIteratorHandler::shiftLast(int)+BFp
					; DATA XREF: ...


		end
