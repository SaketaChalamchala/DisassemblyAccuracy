;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	AD03EAC27B42149FB8ACA4D44F4FE00F
; Input	CRC32 :	A4E997A4

; File Name   :	D:\compspace\objfiles\firefox\i18n\search.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		public ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
; public: static bool const std::tr1::integral_constant<bool, 0>::value
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	db 0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 4
		public ?value@?$integral_constant@_N$00@tr1@std@@2_NB
; public: static bool const std::tr1::integral_constant<bool, 1>::value
?value@?$integral_constant@_N$00@tr1@std@@2_NB db 1
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8
		public ?value@?$integral_constant@I$0A@@tr1@std@@2IB
; public: static unsigned int const std::tr1::integral_constant<unsigned int, 0>::value
?value@?$integral_constant@I$0A@@tr1@std@@2IB dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0Ch
		public ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
; public: static int const std::_Arithmetic_traits<bool>::_Rank
?_Rank@?$_Arithmetic_traits@_N@std@@2HB	dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 10h
		public ?_Rank@?$_Arithmetic_traits@D@std@@2HB
; public: static int const std::_Arithmetic_traits<char>::_Rank
?_Rank@?$_Arithmetic_traits@D@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14h
		public ?_Rank@?$_Arithmetic_traits@C@std@@2HB
; public: static int const std::_Arithmetic_traits<signed char>::_Rank
?_Rank@?$_Arithmetic_traits@C@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18h
		public ?_Rank@?$_Arithmetic_traits@E@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned char>::_Rank
?_Rank@?$_Arithmetic_traits@E@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1Ch
		public ?_Rank@?$_Arithmetic_traits@F@std@@2HB
; public: static int const std::_Arithmetic_traits<short>::_Rank
?_Rank@?$_Arithmetic_traits@F@std@@2HB dd 3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 20h
		public ?_Rank@?$_Arithmetic_traits@G@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned short>::_Rank
?_Rank@?$_Arithmetic_traits@G@std@@2HB dd 3
					; DATA XREF: .rdata:int	const std::_Locbase<int>::messageso
					; .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::showposo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 24h
		public ?_Rank@?$_Arithmetic_traits@H@std@@2HB
; public: static int const std::_Arithmetic_traits<int>::_Rank
?_Rank@?$_Arithmetic_traits@H@std@@2HB dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 28h
		public ?_Rank@?$_Arithmetic_traits@I@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned int>::_Rank
?_Rank@?$_Arithmetic_traits@I@std@@2HB dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2Ch
		public ?_Rank@?$_Arithmetic_traits@J@std@@2HB
; public: static int const std::_Arithmetic_traits<long>::_Rank
?_Rank@?$_Arithmetic_traits@J@std@@2HB dd 5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 30h
		public ?_Rank@?$_Arithmetic_traits@K@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned long>::_Rank
?_Rank@?$_Arithmetic_traits@K@std@@2HB dd 5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 34h
		public ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
; public: static int const std::_Arithmetic_traits<__int64>::_Rank
?_Rank@?$_Arithmetic_traits@_J@std@@2HB	dd 6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 38h
		public ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned __int64>::_Rank
?_Rank@?$_Arithmetic_traits@_K@std@@2HB	dd 6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3Ch
		public ?_Rank@?$_Arithmetic_traits@M@std@@2HB
; public: static int const std::_Arithmetic_traits<float>::_Rank
?_Rank@?$_Arithmetic_traits@M@std@@2HB dd 7
					; DATA XREF: .rdata:int	const std::_Locbase<int>::allo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 40h
		public ?_Rank@?$_Arithmetic_traits@N@std@@2HB
; public: static int const std::_Arithmetic_traits<double>::_Rank
?_Rank@?$_Arithmetic_traits@N@std@@2HB dd 8
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::lefto
					; .rdata:std::_Iosb<int>::_Openmode const std::_Iosb<int>::_Nocreateo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 44h
		public ?_Rank@?$_Arithmetic_traits@O@std@@2HB
; public: static int const std::_Arithmetic_traits<long	double>::_Rank
?_Rank@?$_Arithmetic_traits@O@std@@2HB dd 9
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 48h
		public ?collate@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::collate
?collate@?$_Locbase@H@std@@2HB dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4Ch
		public ?ctype@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::ctype
?ctype@?$_Locbase@H@std@@2HB dd	2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 50h
		public ?monetary@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::monetary
?monetary@?$_Locbase@H@std@@2HB	dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 54h
		public ?numeric@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::numeric
?numeric@?$_Locbase@H@std@@2HB dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 58h
		public ?time@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::time
?time@?$_Locbase@H@std@@2HB dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5Ch
		public ?messages@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::messages
?messages@?$_Locbase@H@std@@2HB	dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 60h
		public ?all@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::all
?all@?$_Locbase@H@std@@2HB dd offset ?_Rank@?$_Arithmetic_traits@M@std@@2HB+3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 64h
		public ?none@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::none
?none@?$_Locbase@H@std@@2HB dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 68h
		public ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::skipws
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6Ch
		public ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::unitbuf
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 70h
		public ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::uppercase
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 74h
		public ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showbase
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 78h
		public ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showpoint
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7Ch
		public ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showpos
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 80h
		public ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::left
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::righto
					; .rdata:std::_Iosb<int>::_Openmode const std::_Iosb<int>::_Noreplaceo
_rdata		ends			; int const std::_Arithmetic_traits<double>::_Rank

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 84h
		public ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::right
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B	dd offset ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B ; std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::left
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 88h
		public ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::internal
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset loc_FB+5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8Ch
		public ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::dec
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_200
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 90h
		public ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::oct
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_3FF+1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 94h
		public ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::hex
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_7FE+2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 98h
		public ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::scientific
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd	offset loc_FFB+5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9Ch
		public ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::fixed
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B	dd 2000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A0h
		public ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::hexfloat
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 3000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A4h
		public ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::boolalpha
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 4000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A8h
		public ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::_Stdio
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 8000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ACh
		public ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::adjustfield
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	loc_1BB+5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B0h
		public ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::basefield
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset loc_DFC+4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B4h
		public ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::floatfield
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd	3000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B8h
		public ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::goodbit
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0BCh
		public ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::eofbit
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B	dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C0h
		public ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::failbit
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C4h
		public ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::badbit
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B	dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C8h
		public ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::_Hardfail
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0CCh
		public ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::in
?in@?$_Iosb@H@std@@2W4_Openmode@12@B dd	1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D0h
		public ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::out
?out@?$_Iosb@H@std@@2W4_Openmode@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D4h
		public ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::ate
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D8h
		public ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::app
?app@?$_Iosb@H@std@@2W4_Openmode@12@B dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0DCh
		public ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::trunc
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B	dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E0h
		public ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::_Nocreate
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E4h
		public ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::_Noreplace
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B dd	offset ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B ;	std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::left
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E8h
		public ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::binary
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B dd offset ?_Rank@?$_Arithmetic_traits@G@std@@2HB ; int	const std::_Arithmetic_traits<ushort>::_Rank
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ECh
		public ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::beg
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F0h
		public ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::cur
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F4h
		public ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::end
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	2
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0F8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int)
		public ??2@YAPAXI@Z
??2@YAPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp

loc_FB:					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::internalo
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??2@YAPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 130h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 134h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 138h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX@Z
??3@YAXPAX@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??3@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 16Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::SearchIterator::`scalar deleting destructor'(unsigned int)
		public ??_GSearchIterator@icu_56@@UAEPAXI@Z
??_GSearchIterator@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1SearchIterator@icu_56@@UAE@XZ ; icu_56::SearchIterator::~SearchIterator(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_1B5
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1B5:				; CODE XREF: icu_56::SearchIterator::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx

loc_1BB:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::adjustfieldo
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GSearchIterator@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1D0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::SearchIterator::`vector deleting destructor'(unsigned int)
		public ??_ESearchIterator@icu_56@@UAEPAXI@Z
??_ESearchIterator@icu_56@@UAEPAXI@Z proc near
					; DATA XREF: .rdata:const icu_56::SearchIterator::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		and	eax, 2
		jz	short loc_23B
		push	offset ??1SearchIterator@icu_56@@UAE@XZ	; icu_56::SearchIterator::~SearchIterator(void)

loc_200:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::deco
		mov	eax, [ebp+var_8]
		mov	ecx, [eax-4]
		push	ecx
		push	4Ch ; 'L'
		mov	edx, [ebp+var_8]
		push	edx
		call	??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_233
		mov	eax, [ebp+var_8]
		sub	eax, 4
		mov	esi, esp
		push	eax		; void *
		call	dword ptr ds:__imp_??_VUMemory@icu_56@@SAXPAX@Z	; icu_56::UMemory::operator delete[](void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_233:				; CODE XREF: icu_56::SearchIterator::`vector deleting destructor'(uint)+48j
		mov	eax, [ebp+var_8]
		sub	eax, 4
		jmp	short loc_264
; ---------------------------------------------------------------------------

loc_23B:				; CODE XREF: icu_56::SearchIterator::`vector deleting destructor'(uint)+29j
		mov	ecx, [ebp+var_8] ; this
		call	??1SearchIterator@icu_56@@UAE@XZ ; icu_56::SearchIterator::~SearchIterator(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_261
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_261:				; CODE XREF: icu_56::SearchIterator::`vector deleting destructor'(uint)+79j
		mov	eax, [ebp+var_8]

loc_264:				; CODE XREF: icu_56::SearchIterator::`vector deleting destructor'(uint)+69j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_ESearchIterator@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 27Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: signed char __thiscall icu_56::SearchIterator::operator!=(class icu_56::SearchIterator const &)const
		public ??9SearchIterator@icu_56@@QBECABV01@@Z
??9SearchIterator@icu_56@@QBECABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+18h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		movsx	ecx, al
		test	ecx, ecx
		setz	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??9SearchIterator@icu_56@@QBECABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2D8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::SearchIterator::SearchIterator(icu_56::SearchIterator *this, const struct icu_56::SearchIterator *)
		public ??0SearchIterator@icu_56@@QAE@ABV01@@Z
??0SearchIterator@icu_56@@QAE@ABV01@@Z proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0SearchIterator@icu_56@@QAE@ABV01@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax		; struct icu_56::UObject *
		mov	ecx, [ebp+var_14] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@ABV01@@Z ; icu_56::UObject::UObject(icu_56::UObject const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7SearchIterator@icu_56@@6B@ ; const icu_56::SearchIterator::`vftable'
		mov	ecx, [ebp+var_14]
		add	ecx, 0Ch	; this
		mov	esi, esp
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@XZ ; icu_56::UnicodeString::UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	byte ptr [ebp+var_4], 1
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		mov	[eax+8], edx
		mov	eax, [ebp+arg_0]
		add	eax, 0Ch
		mov	esi, esp
		push	eax
		mov	ecx, [ebp+var_14]
		add	ecx, 0Ch
		call	dword ptr ds:__imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z ;	icu_56::UnicodeString::operator=(icu_56::UnicodeString const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	20h ; ' '
		call	_uprv_malloc_56
		add	esp, 4
		mov	ecx, [ebp+var_14]
		mov	[ecx+4], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_14]
		mov	eax, [edx+4]
		mov	ecx, [ecx+10h]
		mov	[eax+10h], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_14]
		mov	eax, [edx+4]
		mov	cl, [ecx+9]
		mov	[eax+9], cl
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_14]
		mov	eax, [edx+4]
		mov	cl, [ecx+8]
		mov	[eax+8], cl
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_14]
		mov	eax, [edx+4]
		mov	cx, [ecx+0Ah]
		mov	[eax+0Ah], cx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_14]
		mov	eax, [edx+4]
		mov	ecx, [ecx+14h]
		mov	[eax+14h], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_14]
		mov	eax, [edx+4]
		mov	ecx, [ecx+18h]
		mov	[eax+18h], ecx

loc_3FF:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::octo
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_14]
		mov	eax, [edx+4]
		mov	ecx, [ecx]
		mov	[eax], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_14]
		mov	eax, [edx+4]
		mov	ecx, [ecx+4]
		mov	[eax+4], ecx
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0SearchIterator@icu_56@@QAE@ABV01@@Z endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 44Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0SearchIterator@icu_56@@QAE@ABV01@@Z$0 proc near
					; DATA XREF: .xdata$x:000004D0o
		mov	esi, esp
		mov	ecx, [ebp-14h]	; this
		call	dword ptr ds:__imp_??1UObject@icu_56@@UAE@XZ ; icu_56::UObject::~UObject(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0SearchIterator@icu_56@@QAE@ABV01@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0SearchIterator@icu_56@@QAE@ABV01@@Z$1 proc near
					; DATA XREF: .xdata$x:000004D8o
		mov	ecx, [ebp-14h]
		add	ecx, 0Ch	; this
		mov	esi, esp
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0SearchIterator@icu_56@@QAE@ABV01@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0SearchIterator@icu_56@@QAE@ABV01@@Z proc	near
					; DATA XREF: icu_56::SearchIterator::SearchIterator(icu_56::SearchIterator const &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0DCh]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0SearchIterator@icu_56@@QAE@ABV01@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0SearchIterator@icu_56@@QAE@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 494h
		dd offset ??_R4SearchIterator@icu_56@@6B@ ; const icu_56::SearchIterator::`RTTI	Complete Object	Locator'
;
; Exported entry
;
		public ??_7SearchIterator@icu_56@@6B@
; const	icu_56::SearchIterator::`vftable'
??_7SearchIterator@icu_56@@6B@ dd offset ??_ESearchIterator@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::SearchIterator::SearchIterator(icu_56::SearchIterator const &)+62o
					; icu_56::SearchIterator::~SearchIterator(void)+45o ...
					; icu_56::SearchIterator::`vector deleting destructor'(uint)
		dd offset ?getDynamicClassID@UObject@icu_56@@UBEPAXXZ ;	icu_56::UObject::getDynamicClassID(void)
		dd offset __purecall
		dd offset __purecall
		dd offset ?setText@SearchIterator@icu_56@@UAEXAAVCharacterIterator@2@AAW4UErrorCode@@@Z	; icu_56::SearchIterator::setText(icu_56::CharacterIterator &,UErrorCode &)
		dd offset ?setText@SearchIterator@icu_56@@UAEXABVUnicodeString@2@AAW4UErrorCode@@@Z ; icu_56::SearchIterator::setText(icu_56::UnicodeString const &,UErrorCode &)
		dd offset ??8SearchIterator@icu_56@@UBECABV01@@Z ; icu_56::SearchIterator::operator==(icu_56::SearchIterator const &)
		dd offset __purecall
		dd offset ?reset@SearchIterator@icu_56@@UAEXXZ ; icu_56::SearchIterator::reset(void)
		dd offset __purecall
		dd offset __purecall
		dd offset ?setMatchLength@SearchIterator@icu_56@@MAEXH@Z ; icu_56::SearchIterator::setMatchLength(int)
		dd offset ?setMatchStart@SearchIterator@icu_56@@MAEXH@Z	; icu_56::SearchIterator::setMatchStart(int)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 4CCh
__unwindtable$??0SearchIterator@icu_56@@QAE@ABV01@@Z dd	0FFFFFFFFh
					; DATA XREF: .xdata$x:000004E4o
		dd offset __unwindfunclet$??0SearchIterator@icu_56@@QAE@ABV01@@Z$0
		align 8
		dd offset __unwindfunclet$??0SearchIterator@icu_56@@QAE@ABV01@@Z$1
__ehfuncinfo$??0SearchIterator@icu_56@@QAE@ABV01@@Z dd 19930522h, 2
					; DATA XREF: __ehhandler$??0SearchIterator@icu_56@@QAE@ABV01@@Z+14o
		dd offset __unwindtable$??0SearchIterator@icu_56@@QAE@ABV01@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 500h
		public ??_R4SearchIterator@icu_56@@6B@
; const	icu_56::SearchIterator::`RTTI Complete Object Locator'
??_R4SearchIterator@icu_56@@6B@	dd 3 dup(0) ; DATA XREF: .rdata:00000494o
		dd offset ??_R0?AVSearchIterator@icu_56@@@8 ; icu_56::SearchIterator `RTTI Type	Descriptor'
		dd offset ??_R3SearchIterator@icu_56@@8	; icu_56::SearchIterator::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 514h
		public ??_R0?AVSearchIterator@icu_56@@@8
; class	icu_56::SearchIterator `RTTI Type Descriptor'
??_R0?AVSearchIterator@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:0000050Co
					; .rdata$r:icu_56::SearchIterator::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avsearchiter	db '.?AVSearchIterator@icu_56@@',0
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 538h
		public ??_R3SearchIterator@icu_56@@8
; icu_56::SearchIterator::`RTTI	Class Hierarchy	Descriptor'
??_R3SearchIterator@icu_56@@8 dd 2 dup(0) ; DATA XREF: .rdata$r:00000510o
					; .rdata$r:00000570o
		dd 3
		dd offset ??_R2SearchIterator@icu_56@@8	; icu_56::SearchIterator::`RTTI	Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 548h
		public ??_R2SearchIterator@icu_56@@8
; icu_56::SearchIterator::`RTTI	Base Class Array'
??_R2SearchIterator@icu_56@@8 dd offset	??_R1A@?0A@EA@SearchIterator@icu_56@@8
					; DATA XREF: .rdata$r:00000544o
					; icu_56::SearchIterator::`RTTI	Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 558h
		public ??_R1A@?0A@EA@SearchIterator@icu_56@@8
; icu_56::SearchIterator::`RTTI	Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@SearchIterator@icu_56@@8 dd offset ??_R0?AVSearchIterator@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::SearchIterator::`RTTI Base Class Array'o
					; icu_56::SearchIterator `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3SearchIterator@icu_56@@8	; icu_56::SearchIterator::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 574h
		public ??_R1A@?0A@EA@UObject@icu_56@@8
; icu_56::UObject::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UObject@icu_56@@8	dd offset ??_R0?AVUObject@icu_56@@@8
					; DATA XREF: .rdata$r:0000054Co
					; .rdata$r:icu_56::UObject::`RTTI Base Class Array'o
					; icu_56::UObject `RTTI	Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UObject@icu_56@@8 ; icu_56::UObject::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 590h
		public ??_R0?AVUObject@icu_56@@@8
; class	icu_56::UObject	`RTTI Type Descriptor'
??_R0?AVUObject@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UObject::`RTTI Base Class	Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?avuobject@ic	db '.?AVUObject@icu_56@@',0
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 5B0h
		public ??_R3UObject@icu_56@@8
; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
??_R3UObject@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:0000058Co
		dd 2
		dd offset ??_R2UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 5C0h
		public ??_R2UObject@icu_56@@8
; icu_56::UObject::`RTTI Base Class Array'
??_R2UObject@icu_56@@8 dd offset ??_R1A@?0A@EA@UObject@icu_56@@8
					; DATA XREF: .rdata$r:000005BCo
					; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 5CCh
		public ??_R13?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@UMemory@icu_56@@8 dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:00000550o
					; .rdata$r:000005C4o
					; icu_56::UMemory `RTTI	Type Descriptor'
		dd 0
		dd 4, 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 5E8h
		public ??_R0?AVUMemory@icu_56@@@8
; class	icu_56::UMemory	`RTTI Type Descriptor'
??_R0?AVUMemory@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Descriptor at (4,-1,0,64)'o
					; .rdata$r:icu_56::UMemory::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avumemory@ic	db '.?AVUMemory@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 608h
		public ??_R3UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
??_R3UMemory@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:000005E4o
					; .rdata$r:00000638o
		dd 1
		dd offset ??_R2UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 618h
		public ??_R2UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Array'
??_R2UMemory@icu_56@@8 dd offset ??_R1A@?0A@EA@UMemory@icu_56@@8
					; DATA XREF: .rdata$r:00000614o
					; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 620h
		public ??_R1A@?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UMemory@icu_56@@8	dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Array'o
					; icu_56::UMemory `RTTI	Type Descriptor'
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd offset ?_Rank@?$_Arithmetic_traits@N@std@@2HB ; int const std::_Arithmetic_traits<double>::_Rank
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 63Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::SearchIterator::~SearchIterator(icu_56::SearchIterator *__hidden this)
		public ??1SearchIterator@icu_56@@UAE@XZ
??1SearchIterator@icu_56@@UAE@XZ proc near
					; CODE XREF: icu_56::SearchIterator::`scalar deleting destructor'(uint)+26p
					; icu_56::SearchIterator::`vector deleting destructor'(uint)+6Ep
					; DATA XREF: ...

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??1SearchIterator@icu_56@@UAE@XZ
		mov	eax, large fs:0
		push	eax
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7SearchIterator@icu_56@@6B@ ; const icu_56::SearchIterator::`vftable'
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		cmp	dword ptr [eax+4], 0
		jz	short loc_6A6
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		push	ecx
		call	_uprv_free_56
		add	esp, 4

loc_6A6:				; CODE XREF: icu_56::SearchIterator::~SearchIterator(void)+59j
		mov	ecx, [ebp+var_14]
		add	ecx, 0Ch	; this
		mov	esi, esp
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		mov	ecx, [ebp+var_14] ; this
		call	dword ptr ds:__imp_??1UObject@icu_56@@UAE@XZ ; icu_56::UObject::~UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1SearchIterator@icu_56@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 6F4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??1SearchIterator@icu_56@@UAE@XZ$0 proc	near ; DATA XREF: .xdata$x:00000728o
		mov	esi, esp
		mov	ecx, [ebp-14h]	; this
		call	dword ptr ds:__imp_??1UObject@icu_56@@UAE@XZ ; icu_56::UObject::~UObject(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??1SearchIterator@icu_56@@UAE@XZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??1SearchIterator@icu_56@@UAE@XZ proc near
					; DATA XREF: icu_56::SearchIterator::~SearchIterator(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0DCh]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??1SearchIterator@icu_56@@UAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??1SearchIterator@icu_56@@UAE@XZ endp

_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 724h
__unwindtable$??1SearchIterator@icu_56@@UAE@XZ dd 0FFFFFFFFh ; DATA XREF: .xdata$x:00000734o
		dd offset __unwindfunclet$??1SearchIterator@icu_56@@UAE@XZ$0
__ehfuncinfo$??1SearchIterator@icu_56@@UAE@XZ dd 19930522h, 1
					; DATA XREF: __ehhandler$??1SearchIterator@icu_56@@UAE@XZ+14o
		dd offset __unwindtable$??1SearchIterator@icu_56@@UAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 750h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall icu_56::SearchIterator::setAttribute(enum  USearchAttribute, enum  USearchAttributeValue, enum  UErrorCode &)
		public ?setAttribute@SearchIterator@icu_56@@QAEXW4USearchAttribute@@W4USearchAttributeValue@@AAW4UErrorCode@@@Z
?setAttribute@SearchIterator@icu_56@@QAEXW4USearchAttribute@@W4USearchAttributeValue@@AAW4UErrorCode@@@Z proc near

var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	loc_80D
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_D0], eax
		cmp	[ebp+var_D0], 0
		jz	short loc_7B2
		cmp	[ebp+var_D0], 1
		jz	short loc_7C6
		cmp	[ebp+var_D0], 2
		jz	short loc_7DA
		jmp	short loc_804
; ---------------------------------------------------------------------------

loc_7B2:				; CODE XREF: icu_56::SearchIterator::setAttribute(USearchAttribute,USearchAttributeValue,UErrorCode &)+4Cj
		xor	eax, eax
		cmp	[ebp+arg_4], 1
		setz	al
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		mov	[edx+8], al
		jmp	short loc_80D
; ---------------------------------------------------------------------------

loc_7C6:				; CODE XREF: icu_56::SearchIterator::setAttribute(USearchAttribute,USearchAttributeValue,UErrorCode &)+55j
		xor	eax, eax
		cmp	[ebp+arg_4], 1
		setz	al
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		mov	[edx+9], al
		jmp	short loc_80D
; ---------------------------------------------------------------------------

loc_7DA:				; CODE XREF: icu_56::SearchIterator::setAttribute(USearchAttribute,USearchAttributeValue,UErrorCode &)+5Ej
		cmp	[ebp+arg_4], 3
		jz	short loc_7E6
		cmp	[ebp+arg_4], 4
		jnz	short loc_7F6

loc_7E6:				; CODE XREF: icu_56::SearchIterator::setAttribute(USearchAttribute,USearchAttributeValue,UErrorCode &)+8Ej
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	dx, word ptr [ebp+arg_4]
		mov	[ecx+0Ah], dx
		jmp	short loc_802
; ---------------------------------------------------------------------------

loc_7F6:				; CODE XREF: icu_56::SearchIterator::setAttribute(USearchAttribute,USearchAttributeValue,UErrorCode &)+94j
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		xor	edx, edx

loc_7FE:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::hexo
		mov	[ecx+0Ah], dx

loc_802:				; CODE XREF: icu_56::SearchIterator::setAttribute(USearchAttribute,USearchAttributeValue,UErrorCode &)+A4j
		jmp	short loc_80D
; ---------------------------------------------------------------------------

loc_804:				; CODE XREF: icu_56::SearchIterator::setAttribute(USearchAttribute,USearchAttributeValue,UErrorCode &)+60j
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 1

loc_80D:				; CODE XREF: icu_56::SearchIterator::setAttribute(USearchAttribute,USearchAttributeValue,UErrorCode &)+36j
					; icu_56::SearchIterator::setAttribute(USearchAttribute,USearchAttributeValue,UErrorCode &)+74j ...
		cmp	[ebp+arg_4], 5
		jnz	short loc_81C
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 1

loc_81C:				; CODE XREF: icu_56::SearchIterator::setAttribute(USearchAttribute,USearchAttributeValue,UErrorCode &)+C1j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?setAttribute@SearchIterator@icu_56@@QAEXW4USearchAttribute@@W4USearchAttributeValue@@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 834h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl U_SUCCESS(enum  UErrorCode)
?U_SUCCESS@@YACW4UErrorCode@@@Z	proc near
					; CODE XREF: icu_56::SearchIterator::setAttribute(USearchAttribute,USearchAttributeValue,UErrorCode &)+29p
					; icu_56::SearchIterator::setBreakIterator(icu_56::BreakIterator *,UErrorCode &)+29p ...

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		setle	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?U_SUCCESS@@YACW4UErrorCode@@@Z	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 860h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: enum	USearchAttributeValue __thiscall icu_56::SearchIterator::getAttribute(enum  USearchAttribute)const
		public ?getAttribute@SearchIterator@icu_56@@QBE?AW4USearchAttributeValue@@W4USearchAttribute@@@Z
?getAttribute@SearchIterator@icu_56@@QBE?AW4USearchAttributeValue@@W4USearchAttribute@@@Z proc near

var_DC		= dword	ptr -0DCh
var_14		= word ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0DCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_DC]
		mov	ecx, 37h ; '7'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_DC], eax
		cmp	[ebp+var_DC], 0
		jz	short loc_8A9
		cmp	[ebp+var_DC], 1
		jz	short loc_8BF
		cmp	[ebp+var_DC], 2
		jz	short loc_8D5
		jmp	short loc_904
; ---------------------------------------------------------------------------

loc_8A9:				; CODE XREF: icu_56::SearchIterator::getAttribute(USearchAttribute)+33j
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		movsx	eax, byte ptr [ecx+8]
		sub	eax, 1
		neg	eax
		sbb	eax, eax
		add	eax, 1
		jmp	short loc_907
; ---------------------------------------------------------------------------

loc_8BF:				; CODE XREF: icu_56::SearchIterator::getAttribute(USearchAttribute)+3Cj
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		movsx	eax, byte ptr [ecx+9]
		sub	eax, 1
		neg	eax
		sbb	eax, eax
		add	eax, 1
		jmp	short loc_907
; ---------------------------------------------------------------------------

loc_8D5:				; CODE XREF: icu_56::SearchIterator::getAttribute(USearchAttribute)+45j
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	dx, [ecx+0Ah]
		mov	[ebp+var_14], dx
		movsx	eax, [ebp+var_14]
		cmp	eax, 3
		jz	short loc_8F5
		movsx	eax, [ebp+var_14]
		cmp	eax, 4
		jnz	short loc_8FD

loc_8F5:				; CODE XREF: icu_56::SearchIterator::getAttribute(USearchAttribute)+8Aj
		movsx	eax, [ebp+var_14]
		jmp	short loc_907
; ---------------------------------------------------------------------------
		jmp	short loc_904
; ---------------------------------------------------------------------------

loc_8FD:				; CODE XREF: icu_56::SearchIterator::getAttribute(USearchAttribute)+93j
		mov	eax, 2
		jmp	short loc_907
; ---------------------------------------------------------------------------

loc_904:				; CODE XREF: icu_56::SearchIterator::getAttribute(USearchAttribute)+47j
					; icu_56::SearchIterator::getAttribute(USearchAttribute)+9Bj
		or	eax, 0FFFFFFFFh

loc_907:				; CODE XREF: icu_56::SearchIterator::getAttribute(USearchAttribute)+5Dj
					; icu_56::SearchIterator::getAttribute(USearchAttribute)+73j ...
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?getAttribute@SearchIterator@icu_56@@QBE?AW4USearchAttributeValue@@W4USearchAttribute@@@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 910h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::SearchIterator::getMatchedStart(icu_56::SearchIterator	*__hidden this)
		public ?getMatchedStart@SearchIterator@icu_56@@QBEHXZ
?getMatchedStart@SearchIterator@icu_56@@QBEHXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	eax, [ecx+14h]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getMatchedStart@SearchIterator@icu_56@@QBEHXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 944h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::SearchIterator::getMatchedLength(icu_56::SearchIterator *__hidden this)
		public ?getMatchedLength@SearchIterator@icu_56@@QBEHXZ
?getMatchedLength@SearchIterator@icu_56@@QBEHXZ	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	eax, [ecx+18h]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getMatchedLength@SearchIterator@icu_56@@QBEHXZ	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 978h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::SearchIterator::getMatchedText(icu_56::SearchIterator	*this, struct icu_56::UnicodeString *)
		public ?getMatchedText@SearchIterator@icu_56@@QBEXAAVUnicodeString@2@@Z
?getMatchedText@SearchIterator@icu_56@@QBEXAAVUnicodeString@2@@Z proc near

var_E4		= byte ptr -0E4h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	edx, [ecx+14h]
		mov	[ebp+var_14], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	edx, [ecx+18h]
		mov	[ebp+var_20], edx
		cmp	[ebp+var_14], 0FFFFFFFFh
		jz	short loc_9E6
		cmp	[ebp+var_20], 0
		jz	short loc_9E6
		mov	esi, esp
		mov	eax, [ebp+var_20]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		mov	eax, [edx]
		mov	ecx, [ebp+var_14]
		lea	edx, [eax+ecx*2]
		push	edx		; wchar_t *
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?setTo@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z ; icu_56::UnicodeString::setTo(wchar_t	const *,int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_9F8
; ---------------------------------------------------------------------------

loc_9E6:				; CODE XREF: icu_56::SearchIterator::getMatchedText(icu_56::UnicodeString &)+3Fj
					; icu_56::SearchIterator::getMatchedText(icu_56::UnicodeString &)+45j
		mov	esi, esp
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?remove@UnicodeString@icu_56@@QAEAAV12@XZ ; icu_56::UnicodeString::remove(void)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_9F8:				; CODE XREF: icu_56::SearchIterator::getMatchedText(icu_56::UnicodeString &)+6Cj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?getMatchedText@SearchIterator@icu_56@@QBEXAAVUnicodeString@2@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A10h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::SearchIterator::setBreakIterator(icu_56::SearchIterator *this, struct	icu_56::BreakIterator *, enum UErrorCode *)
		public ?setBreakIterator@SearchIterator@icu_56@@QAEXPAVBreakIterator@2@AAW4UErrorCode@@@Z
?setBreakIterator@SearchIterator@icu_56@@QAEXPAVBreakIterator@2@AAW4UErrorCode@@@Z proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_A5D
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	edx, [ebp+arg_0]
		mov	[ecx+10h], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+8], ecx

loc_A5D:				; CODE XREF: icu_56::SearchIterator::setBreakIterator(icu_56::BreakIterator *,UErrorCode &)+36j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?setBreakIterator@SearchIterator@icu_56@@QAEXPAVBreakIterator@2@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0A74h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct icu_56::BreakIterator *__thiscall icu_56::SearchIterator::getBreakIterator(icu_56::SearchIterator *__hidden this)
		public ?getBreakIterator@SearchIterator@icu_56@@QBEPBVBreakIterator@2@XZ
?getBreakIterator@SearchIterator@icu_56@@QBEPBVBreakIterator@2@XZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	eax, [eax+8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getBreakIterator@SearchIterator@icu_56@@QBEPBVBreakIterator@2@XZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0AA4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::SearchIterator::setText(icu_56::SearchIterator *this,	const struct icu_56::UnicodeString *, enum UErrorCode *)
		public ?setText@SearchIterator@icu_56@@UAEXABVUnicodeString@2@AAW4UErrorCode@@@Z
?setText@SearchIterator@icu_56@@UAEXABVUnicodeString@2@AAW4UErrorCode@@@Z proc near
					; DATA XREF: .rdata:000004ACo

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_B51
		mov	esi, esp
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jnz	short loc_AFD
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 1
		jmp	short loc_B51
; ---------------------------------------------------------------------------

loc_AFD:				; CODE XREF: icu_56::SearchIterator::setText(icu_56::UnicodeString const &,UErrorCode &)+4Cj
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		add	ecx, 0Ch
		call	dword ptr ds:__imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z ;	icu_56::UnicodeString::operator=(icu_56::UnicodeString const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_8]
		add	ecx, 0Ch	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ ;	icu_56::UnicodeString::getBuffer(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		mov	[edx], eax
		mov	ecx, [ebp+var_8]
		add	ecx, 0Ch	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		mov	[edx+4], eax

loc_B51:				; CODE XREF: icu_56::SearchIterator::setText(icu_56::UnicodeString const &,UErrorCode &)+36j
					; icu_56::SearchIterator::setText(icu_56::UnicodeString	const &,UErrorCode &)+57j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?setText@SearchIterator@icu_56@@UAEXABVUnicodeString@2@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0B68h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::SearchIterator::setText(icu_56::SearchIterator *this,	struct icu_56::CharacterIterator *, enum UErrorCode *)
		public ?setText@SearchIterator@icu_56@@UAEXAAVCharacterIterator@2@AAW4UErrorCode@@@Z
?setText@SearchIterator@icu_56@@UAEXAAVCharacterIterator@2@AAW4UErrorCode@@@Z proc near
					; DATA XREF: .rdata:000004A8o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_BDE
		mov	eax, [ebp+var_8]
		add	eax, 0Ch
		mov	esi, esp
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+64h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_8]
		add	ecx, 0Ch
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax+14h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_BDE:				; CODE XREF: icu_56::SearchIterator::setText(icu_56::CharacterIterator &,UErrorCode &)+36j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?setText@SearchIterator@icu_56@@UAEXAAVCharacterIterator@2@AAW4UErrorCode@@@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0BF4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct icu_56::UnicodeString *__thiscall icu_56::SearchIterator::getText(icu_56::SearchIterator	*__hidden this)
		public ?getText@SearchIterator@icu_56@@QBEABVUnicodeString@2@XZ
?getText@SearchIterator@icu_56@@QBEABVUnicodeString@2@XZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		add	eax, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getText@SearchIterator@icu_56@@QBEABVUnicodeString@2@XZ endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C24h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual signed char __thiscall icu_56::SearchIterator::operator==(class icu_56::SearchIterator const &)const
		public ??8SearchIterator@icu_56@@UBECABV01@@Z
??8SearchIterator@icu_56@@UBECABV01@@Z proc near ; DATA	XREF: .rdata:000004B0o

var_D0		= byte ptr -0D0h
var_CD		= byte ptr -0CDh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_0]
		jnz	short loc_C56
		mov	al, 1
		jmp	loc_D6E
; ---------------------------------------------------------------------------

loc_C56:				; CODE XREF: icu_56::SearchIterator::operator==(icu_56::SearchIterator const &)+29j
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+8]
		cmp	edx, [ecx+8]
		jnz	loc_D61
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		movsx	edx, byte ptr [ecx+9]
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		movsx	eax, byte ptr [ecx+9]
		cmp	edx, eax
		jnz	loc_D61
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		movsx	eax, byte ptr [edx+8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		movsx	ecx, byte ptr [edx+8]
		cmp	eax, ecx
		jnz	loc_D61
		mov	edx, [ebp+var_8]
		mov	eax, [edx+4]
		movsx	ecx, word ptr [eax+0Ah]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		movsx	edx, word ptr [eax+0Ah]
		cmp	ecx, edx
		jnz	loc_D61
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		mov	ecx, [ecx+14h]
		cmp	ecx, [eax+14h]
		jnz	loc_D61
		mov	edx, [ebp+var_8]
		mov	eax, [edx+4]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	eax, [eax+18h]
		cmp	eax, [edx+18h]
		jnz	short loc_D61
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [edx+4]
		cmp	edx, [ecx+4]
		jnz	short loc_D61
		mov	eax, [ebp+var_8]
		mov	edx, [eax]
		mov	esi, esp
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+0Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	edi, esp
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+0Ch]
		call	eax
		cmp	edi, esp
		call	__RTC_CheckEsp
		cmp	esi, eax
		jnz	short loc_D61
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		mov	eax, [edx+4]
		shl	eax, 1
		push	eax		; Size
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	eax, [edx]
		push	eax		; Buf2
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		mov	eax, [edx]
		push	eax		; Buf1
		call	_memcmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_D61
		mov	[ebp+var_CD], 1
		jmp	short loc_D68
; ---------------------------------------------------------------------------

loc_D61:				; CODE XREF: icu_56::SearchIterator::operator==(icu_56::SearchIterator const &)+3Ej
					; icu_56::SearchIterator::operator==(icu_56::SearchIterator const &)+5Aj ...
		mov	[ebp+var_CD], 0

loc_D68:				; CODE XREF: icu_56::SearchIterator::operator==(icu_56::SearchIterator const &)+13Bj
		mov	al, [ebp+var_CD]

loc_D6E:				; CODE XREF: icu_56::SearchIterator::operator==(icu_56::SearchIterator const &)+2Dj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??8SearchIterator@icu_56@@UBECABV01@@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0D84h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::SearchIterator::first(icu_56::SearchIterator *this, enum UErrorCode *)
		public ?first@SearchIterator@icu_56@@QAEHAAW4UErrorCode@@@Z
?first@SearchIterator@icu_56@@QAEHAAW4UErrorCode@@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_DC1
		or	eax, 0FFFFFFFFh
		jmp	short loc_DF9
; ---------------------------------------------------------------------------

loc_DC1:				; CODE XREF: icu_56::SearchIterator::first(UErrorCode &)+36j
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		push	0
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+8]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		push	0
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+24h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_DF9:				; CODE XREF: icu_56::SearchIterator::first(UErrorCode &)+3Bj
		pop	edi
		pop	esi
		pop	ebx

loc_DFC:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::basefieldo
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?first@SearchIterator@icu_56@@QAEHAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0E10h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl U_FAILURE(enum  UErrorCode)
?U_FAILURE@@YACW4UErrorCode@@@Z	proc near
					; CODE XREF: icu_56::SearchIterator::first(UErrorCode &)+29p
					; icu_56::SearchIterator::following(int,UErrorCode &)+29p ...

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		setnle	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?U_FAILURE@@YACW4UErrorCode@@@Z	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0E3Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::SearchIterator::following(icu_56::SearchIterator *this, int, enum UErrorCode *)
		public ?following@SearchIterator@icu_56@@QAEHHAAW4UErrorCode@@@Z
?following@SearchIterator@icu_56@@QAEHHAAW4UErrorCode@@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_E79
		or	eax, 0FFFFFFFFh
		jmp	short loc_EB5
; ---------------------------------------------------------------------------

loc_E79:				; CODE XREF: icu_56::SearchIterator::following(int,UErrorCode &)+36j
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax+8]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax+24h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_EB5:				; CODE XREF: icu_56::SearchIterator::following(int,UErrorCode &)+3Bj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?following@SearchIterator@icu_56@@QAEHHAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0ECCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::SearchIterator::last(icu_56::SearchIterator *this, enum UErrorCode *)
		public ?last@SearchIterator@icu_56@@QAEHAAW4UErrorCode@@@Z
?last@SearchIterator@icu_56@@QAEHAAW4UErrorCode@@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_F09
		or	eax, 0FFFFFFFFh
		jmp	short loc_F51
; ---------------------------------------------------------------------------

loc_F09:				; CODE XREF: icu_56::SearchIterator::last(UErrorCode &)+36j
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		mov	eax, [edx+4]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+8]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		mov	eax, [edx+4]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+28h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_F51:				; CODE XREF: icu_56::SearchIterator::last(UErrorCode &)+3Bj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?last@SearchIterator@icu_56@@QAEHAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0F68h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::SearchIterator::preceding(icu_56::SearchIterator *this, int, enum UErrorCode *)
		public ?preceding@SearchIterator@icu_56@@QAEHHAAW4UErrorCode@@@Z
?preceding@SearchIterator@icu_56@@QAEHHAAW4UErrorCode@@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_FA5
		or	eax, 0FFFFFFFFh
		jmp	short loc_FE1
; ---------------------------------------------------------------------------

loc_FA5:				; CODE XREF: icu_56::SearchIterator::preceding(int,UErrorCode &)+36j
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax+8]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax+28h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_FE1:				; CODE XREF: icu_56::SearchIterator::preceding(int,UErrorCode &)+3Bj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?preceding@SearchIterator@icu_56@@QAEHHAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0FF8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::SearchIterator::next(icu_56::SearchIterator *this, enum UErrorCode *)
		public ?next@SearchIterator@icu_56@@QAEHAAW4UErrorCode@@@Z
?next@SearchIterator@icu_56@@QAEHAAW4UErrorCode@@@Z proc near

var_FC		= byte ptr -0FCh
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp

loc_FFB:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::scientifico
		sub	esp, 0FCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_FC]
		mov	ecx, 3Fh ; '?'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	loc_111D
		mov	eax, [ebp+var_8]
		mov	edx, [eax]
		mov	esi, esp
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+0Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	edx, [ecx+14h]
		mov	[ebp+var_20], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	edx, [ecx+18h]
		mov	[ebp+var_2C], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+1Dh], 0
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		movsx	edx, byte ptr [ecx+1Ch]
		cmp	edx, 1
		jnz	short loc_10BA
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	edx, [ecx+4]
		mov	[ebp+var_38], edx
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_38]
		jz	short loc_10AB
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+var_38]
		jz	short loc_10AB
		cmp	[ebp+var_20], 0FFFFFFFFh
		jz	short loc_10B8
		mov	eax, [ebp+var_20]
		add	eax, [ebp+var_2C]
		cmp	eax, [ebp+var_38]
		jl	short loc_10B8

loc_10AB:				; CODE XREF: icu_56::SearchIterator::next(UErrorCode &)+98j
					; icu_56::SearchIterator::next(UErrorCode &)+A0j
		mov	ecx, [ebp+var_8] ; this
		call	?setMatchNotFound@SearchIterator@icu_56@@IAEXXZ	; icu_56::SearchIterator::setMatchNotFound(void)
		or	eax, 0FFFFFFFFh
		jmp	short loc_1120
; ---------------------------------------------------------------------------

loc_10B8:				; CODE XREF: icu_56::SearchIterator::next(UErrorCode &)+A6j
					; icu_56::SearchIterator::next(UErrorCode &)+B1j
		jmp	short loc_10D5
; ---------------------------------------------------------------------------

loc_10BA:				; CODE XREF: icu_56::SearchIterator::next(UErrorCode &)+84j
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+1Ch], 1
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		cmp	dword ptr [ecx+14h], 0FFFFFFFFh
		jz	short loc_10D5
		mov	eax, [ebp+var_20]
		jmp	short loc_1120
; ---------------------------------------------------------------------------

loc_10D5:				; CODE XREF: icu_56::SearchIterator::next(UErrorCode &):loc_10B8j
					; icu_56::SearchIterator::next(UErrorCode &)+D6j
		cmp	[ebp+var_2C], 0
		jle	short loc_10FD
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		movsx	edx, byte ptr [ecx+8]
		test	edx, edx
		jz	short loc_10F4
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		jmp	short loc_10FD
; ---------------------------------------------------------------------------

loc_10F4:				; CODE XREF: icu_56::SearchIterator::next(UErrorCode &)+EFj
		mov	eax, [ebp+var_14]
		add	eax, [ebp+var_2C]
		mov	[ebp+var_14], eax

loc_10FD:				; CODE XREF: icu_56::SearchIterator::next(UErrorCode &)+E1j
					; icu_56::SearchIterator::next(UErrorCode &)+FAj
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax+24h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_1120
; ---------------------------------------------------------------------------

loc_111D:				; CODE XREF: icu_56::SearchIterator::next(UErrorCode &)+36j
		or	eax, 0FFFFFFFFh

loc_1120:				; CODE XREF: icu_56::SearchIterator::next(UErrorCode &)+BEj
					; icu_56::SearchIterator::next(UErrorCode &)+DBj ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0FCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?next@SearchIterator@icu_56@@QAEHAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1138h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::SearchIterator::previous(icu_56::SearchIterator *this,	enum UErrorCode	*)
		public ?previous@SearchIterator@icu_56@@QAEHAAW4UErrorCode@@@Z
?previous@SearchIterator@icu_56@@QAEHAAW4UErrorCode@@@Z	proc near

var_E4		= byte ptr -0E4h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	loc_1290
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		movsx	edx, byte ptr [ecx+1Dh]
		test	edx, edx
		jz	short loc_11C2
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	edx, [ecx+4]
		mov	[ebp+var_14], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+1Ch], 0
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+1Dh], 0
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax+8]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_11DB
; ---------------------------------------------------------------------------

loc_11C2:				; CODE XREF: icu_56::SearchIterator::previous(UErrorCode &)+48j
		mov	eax, [ebp+var_8]
		mov	edx, [eax]
		mov	esi, esp
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+0Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], eax

loc_11DB:				; CODE XREF: icu_56::SearchIterator::previous(UErrorCode &)+88j
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	edx, [ecx+14h]
		mov	[ebp+var_20], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		movsx	edx, byte ptr [ecx+1Ch]
		cmp	edx, 1
		jnz	short loc_1210
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+1Ch], 0
		cmp	[ebp+var_20], 0FFFFFFFFh
		jz	short loc_120E
		mov	eax, [ebp+var_20]
		jmp	loc_1293
; ---------------------------------------------------------------------------

loc_120E:				; CODE XREF: icu_56::SearchIterator::previous(UErrorCode &)+CCj
		jmp	short loc_1229
; ---------------------------------------------------------------------------

loc_1210:				; CODE XREF: icu_56::SearchIterator::previous(UErrorCode &)+BCj
		cmp	[ebp+var_14], 0
		jz	short loc_121C
		cmp	[ebp+var_20], 0
		jnz	short loc_1229

loc_121C:				; CODE XREF: icu_56::SearchIterator::previous(UErrorCode &)+DCj
		mov	ecx, [ebp+var_8] ; this
		call	?setMatchNotFound@SearchIterator@icu_56@@IAEXXZ	; icu_56::SearchIterator::setMatchNotFound(void)
		or	eax, 0FFFFFFFFh
		jmp	short loc_1293
; ---------------------------------------------------------------------------

loc_1229:				; CODE XREF: icu_56::SearchIterator::previous(UErrorCode &):loc_120Ej
					; icu_56::SearchIterator::previous(UErrorCode &)+E2j
		cmp	[ebp+var_20], 0FFFFFFFFh
		jz	short loc_1270
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		movsx	edx, byte ptr [ecx+8]
		test	edx, edx
		jz	short loc_1250
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	edx, [ecx+18h]
		mov	eax, [ebp+var_20]
		lea	ecx, [eax+edx-2]
		mov	[ebp+var_20], ecx

loc_1250:				; CODE XREF: icu_56::SearchIterator::previous(UErrorCode &)+103j
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_20]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax+28h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_1293
; ---------------------------------------------------------------------------

loc_1270:				; CODE XREF: icu_56::SearchIterator::previous(UErrorCode &)+F5j
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax+28h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_1293
; ---------------------------------------------------------------------------

loc_1290:				; CODE XREF: icu_56::SearchIterator::previous(UErrorCode &)+36j
		or	eax, 0FFFFFFFFh

loc_1293:				; CODE XREF: icu_56::SearchIterator::previous(UErrorCode &)+D1j
					; icu_56::SearchIterator::previous(UErrorCode &)+EFj ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?previous@SearchIterator@icu_56@@QAEHAAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 12ACh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::SearchIterator::reset(icu_56::SearchIterator *__hidden this)
		public ?reset@SearchIterator@icu_56@@UAEXXZ
?reset@SearchIterator@icu_56@@UAEXXZ proc near ; DATA XREF: .rdata:000004B8o

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	[ebp+var_14], 0
		mov	ecx, [ebp+var_8] ; this
		call	?setMatchNotFound@SearchIterator@icu_56@@IAEXXZ	; icu_56::SearchIterator::setMatchNotFound(void)
		mov	esi, esp
		lea	eax, [ebp+var_14]
		push	eax
		push	0
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+8]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+8], 0
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+9], 0
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		xor	edx, edx
		mov	[ecx+0Ah], dx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+1Ch], 1
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+1Dh], 1
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?reset@SearchIterator@icu_56@@UAEXXZ endp

; ---------------------------------------------------------------------------
		align 4
$LN5		dd 1			; DATA XREF: icu_56::SearchIterator::reset(void)+86o
		dd offset $LN4
$LN4		dd 0FFFFFFECh, 4	; DATA XREF: .text:00001358o
		dd offset $LN3		; "status"
$LN3		db 'status',0           ; DATA XREF: .text:00001364o
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1370h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::SearchIterator::SearchIterator(icu_56::SearchIterator *__hidden this)
		public ??0SearchIterator@icu_56@@IAE@XZ
??0SearchIterator@icu_56@@IAE@XZ proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0SearchIterator@icu_56@@IAE@XZ
		mov	eax, large fs:0
		push	eax
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_14] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@XZ ; icu_56::UObject::UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7SearchIterator@icu_56@@6B@ ; const icu_56::SearchIterator::`vftable'
		mov	ecx, [ebp+var_14]
		add	ecx, 0Ch	; this
		mov	esi, esp
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@XZ ; icu_56::UnicodeString::UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	20h ; ' '
		call	_uprv_malloc_56
		add	esp, 4
		mov	ecx, [ebp+var_14]
		mov	[ecx+4], eax
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	dword ptr [ecx+10h], 0
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+8], 0
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+9], 0
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		xor	edx, edx
		mov	[ecx+0Ah], dx
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+1Ch], 1
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+1Dh], 1
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	dword ptr [ecx+14h], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	dword ptr [ecx+18h], 0
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	dword ptr [ecx], 0
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	dword ptr [ecx+4], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax+8], 0
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0SearchIterator@icu_56@@IAE@XZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 14A0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0SearchIterator@icu_56@@IAE@XZ$0 proc	near ; DATA XREF: .xdata$x:000014D4o
		mov	esi, esp
		mov	ecx, [ebp-14h]	; this
		call	dword ptr ds:__imp_??1UObject@icu_56@@UAE@XZ ; icu_56::UObject::~UObject(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0SearchIterator@icu_56@@IAE@XZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0SearchIterator@icu_56@@IAE@XZ proc near
					; DATA XREF: icu_56::SearchIterator::SearchIterator(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0DCh]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0SearchIterator@icu_56@@IAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??0SearchIterator@icu_56@@IAE@XZ endp

_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 14D0h
__unwindtable$??0SearchIterator@icu_56@@IAE@XZ dd 0FFFFFFFFh ; DATA XREF: .xdata$x:000014E0o
		dd offset __unwindfunclet$??0SearchIterator@icu_56@@IAE@XZ$0
__ehfuncinfo$??0SearchIterator@icu_56@@IAE@XZ dd 19930522h, 1
					; DATA XREF: __ehhandler$??0SearchIterator@icu_56@@IAE@XZ+14o
		dd offset __unwindtable$??0SearchIterator@icu_56@@IAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 14FCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::SearchIterator::SearchIterator(icu_56::SearchIterator *this, const struct icu_56::UnicodeString *, struct icu_56::BreakIterator *)
		public ??0SearchIterator@icu_56@@IAE@ABVUnicodeString@1@PAVBreakIterator@1@@Z
??0SearchIterator@icu_56@@IAE@ABVUnicodeString@1@PAVBreakIterator@1@@Z proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0SearchIterator@icu_56@@IAE@ABVUnicodeString@1@PAVBreakIterator@1@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_14] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@XZ ; icu_56::UObject::UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7SearchIterator@icu_56@@6B@ ; const icu_56::SearchIterator::`vftable'
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_4]
		mov	[eax+8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_14]
		add	ecx, 0Ch	; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@ABV01@@Z ; icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	byte ptr [ebp+var_4], 1
		push	20h ; ' '
		call	_uprv_malloc_56
		add	esp, 4
		mov	ecx, [ebp+var_14]
		mov	[ecx+4], eax
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	dword ptr [ecx+10h], 0
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+8], 0
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+9], 0
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		xor	edx, edx
		mov	[ecx+0Ah], dx
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+1Ch], 1
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+1Dh], 1
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	dword ptr [ecx+14h], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	dword ptr [ecx+18h], 0
		mov	ecx, [ebp+var_14]
		add	ecx, 0Ch	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ ;	icu_56::UnicodeString::getBuffer(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		mov	edx, [ecx+4]
		mov	[edx], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		mov	edx, [ecx+4]
		mov	[edx+4], eax
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??0SearchIterator@icu_56@@IAE@ABVUnicodeString@1@PAVBreakIterator@1@@Z endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 1654h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0SearchIterator@icu_56@@IAE@ABVUnicodeString@1@PAVBreakIterator@1@@Z$0 proc near
					; DATA XREF: .xdata$x:000016A0o
		mov	esi, esp
		mov	ecx, [ebp-14h]	; this
		call	dword ptr ds:__imp_??1UObject@icu_56@@UAE@XZ ; icu_56::UObject::~UObject(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0SearchIterator@icu_56@@IAE@ABVUnicodeString@1@PAVBreakIterator@1@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0SearchIterator@icu_56@@IAE@ABVUnicodeString@1@PAVBreakIterator@1@@Z$1 proc near
					; DATA XREF: .xdata$x:000016A8o
		mov	ecx, [ebp-14h]
		add	ecx, 0Ch	; this
		mov	esi, esp
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0SearchIterator@icu_56@@IAE@ABVUnicodeString@1@PAVBreakIterator@1@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0SearchIterator@icu_56@@IAE@ABVUnicodeString@1@PAVBreakIterator@1@@Z proc	near
					; DATA XREF: icu_56::SearchIterator::SearchIterator(icu_56::UnicodeString const	&,icu_56::BreakIterator	*)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0DCh]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0SearchIterator@icu_56@@IAE@ABVUnicodeString@1@PAVBreakIterator@1@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0SearchIterator@icu_56@@IAE@ABVUnicodeString@1@PAVBreakIterator@1@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 169Ch
__unwindtable$??0SearchIterator@icu_56@@IAE@ABVUnicodeString@1@PAVBreakIterator@1@@Z dd	0FFFFFFFFh
					; DATA XREF: .xdata$x:000016B4o
		dd offset __unwindfunclet$??0SearchIterator@icu_56@@IAE@ABVUnicodeString@1@PAVBreakIterator@1@@Z$0
		align 8
		dd offset __unwindfunclet$??0SearchIterator@icu_56@@IAE@ABVUnicodeString@1@PAVBreakIterator@1@@Z$1
__ehfuncinfo$??0SearchIterator@icu_56@@IAE@ABVUnicodeString@1@PAVBreakIterator@1@@Z dd 19930522h, 2
					; DATA XREF: __ehhandler$??0SearchIterator@icu_56@@IAE@ABVUnicodeString@1@PAVBreakIterator@1@@Z+14o
		dd offset __unwindtable$??0SearchIterator@icu_56@@IAE@ABVUnicodeString@1@PAVBreakIterator@1@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 16D0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::SearchIterator::SearchIterator(icu_56::SearchIterator *this, struct	icu_56::CharacterIterator *, struct icu_56::BreakIterator *)
		public ??0SearchIterator@icu_56@@IAE@AAVCharacterIterator@1@PAVBreakIterator@1@@Z
??0SearchIterator@icu_56@@IAE@AAVCharacterIterator@1@PAVBreakIterator@1@@Z proc	near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0SearchIterator@icu_56@@IAE@AAVCharacterIterator@1@PAVBreakIterator@1@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_14] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@XZ ; icu_56::UObject::UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7SearchIterator@icu_56@@6B@ ; const icu_56::SearchIterator::`vftable'
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_4]
		mov	[eax+8], ecx
		mov	ecx, [ebp+var_14]
		add	ecx, 0Ch	; this
		mov	esi, esp
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@XZ ; icu_56::UnicodeString::UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	byte ptr [ebp+var_4], 1
		push	20h ; ' '
		call	_uprv_malloc_56
		add	esp, 4
		mov	ecx, [ebp+var_14]
		mov	[ecx+4], eax
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	dword ptr [ecx+10h], 0
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+8], 0
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+9], 0
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		xor	edx, edx
		mov	[ecx+0Ah], dx
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+1Ch], 1
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx+1Dh], 1
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	dword ptr [ecx+14h], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	dword ptr [ecx+18h], 0
		mov	eax, [ebp+var_14]
		add	eax, 0Ch
		mov	esi, esp
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+64h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		add	ecx, 0Ch	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ ;	icu_56::UnicodeString::getBuffer(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		mov	edx, [ecx+4]
		mov	[edx], eax
		mov	ecx, [ebp+var_14]
		add	ecx, 0Ch	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		mov	edx, [ecx+4]
		mov	[edx+4], eax
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_4]
		mov	[eax+8], ecx
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??0SearchIterator@icu_56@@IAE@AAVCharacterIterator@1@PAVBreakIterator@1@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 1850h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0SearchIterator@icu_56@@IAE@AAVCharacterIterator@1@PAVBreakIterator@1@@Z$0 proc near
					; DATA XREF: .xdata$x:0000189Co
		mov	esi, esp
		mov	ecx, [ebp-14h]	; this
		call	dword ptr ds:__imp_??1UObject@icu_56@@UAE@XZ ; icu_56::UObject::~UObject(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0SearchIterator@icu_56@@IAE@AAVCharacterIterator@1@PAVBreakIterator@1@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0SearchIterator@icu_56@@IAE@AAVCharacterIterator@1@PAVBreakIterator@1@@Z$1 proc near
					; DATA XREF: .xdata$x:000018A4o
		mov	ecx, [ebp-14h]
		add	ecx, 0Ch	; this
		mov	esi, esp
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0SearchIterator@icu_56@@IAE@AAVCharacterIterator@1@PAVBreakIterator@1@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0SearchIterator@icu_56@@IAE@AAVCharacterIterator@1@PAVBreakIterator@1@@Z proc near
					; DATA XREF: icu_56::SearchIterator::SearchIterator(icu_56::CharacterIterator &,icu_56::BreakIterator *)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0DCh]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0SearchIterator@icu_56@@IAE@AAVCharacterIterator@1@PAVBreakIterator@1@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0SearchIterator@icu_56@@IAE@AAVCharacterIterator@1@PAVBreakIterator@1@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 1898h
__unwindtable$??0SearchIterator@icu_56@@IAE@AAVCharacterIterator@1@PAVBreakIterator@1@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:000018B0o
		dd offset __unwindfunclet$??0SearchIterator@icu_56@@IAE@AAVCharacterIterator@1@PAVBreakIterator@1@@Z$0
		dd 0
		dd offset __unwindfunclet$??0SearchIterator@icu_56@@IAE@AAVCharacterIterator@1@PAVBreakIterator@1@@Z$1
__ehfuncinfo$??0SearchIterator@icu_56@@IAE@AAVCharacterIterator@1@PAVBreakIterator@1@@Z	dd 19930522h, 2
					; DATA XREF: __ehhandler$??0SearchIterator@icu_56@@IAE@AAVCharacterIterator@1@PAVBreakIterator@1@@Z+14o
		dd offset __unwindtable$??0SearchIterator@icu_56@@IAE@AAVCharacterIterator@1@PAVBreakIterator@1@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 18CCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; protected: class icu_56::SearchIterator & __thiscall icu_56::SearchIterator::operator=(class icu_56::SearchIterator const &)
		public ??4SearchIterator@icu_56@@IAEAAV01@ABV01@@Z
??4SearchIterator@icu_56@@IAEAAV01@ABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_0]
		jz	loc_19B3
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		mov	[eax+8], edx
		mov	eax, [ebp+arg_0]
		add	eax, 0Ch
		mov	esi, esp
		push	eax
		mov	ecx, [ebp+var_8]
		add	ecx, 0Ch
		call	dword ptr ds:__imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z ;	icu_56::UnicodeString::operator=(icu_56::UnicodeString const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_8]
		mov	eax, [edx+4]
		mov	ecx, [ecx+10h]
		mov	[eax+10h], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_8]
		mov	eax, [edx+4]
		mov	cl, [ecx+9]
		mov	[eax+9], cl
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_8]
		mov	eax, [edx+4]
		mov	cl, [ecx+8]
		mov	[eax+8], cl
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_8]
		mov	eax, [edx+4]
		mov	cx, [ecx+0Ah]
		mov	[eax+0Ah], cx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_8]
		mov	eax, [edx+4]
		mov	ecx, [ecx+14h]
		mov	[eax+14h], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_8]
		mov	eax, [edx+4]
		mov	ecx, [ecx+18h]
		mov	[eax+18h], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_8]
		mov	eax, [edx+4]
		mov	ecx, [ecx]
		mov	[eax], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_8]
		mov	eax, [edx+4]
		mov	ecx, [ecx+4]
		mov	[eax+4], ecx

loc_19B3:				; CODE XREF: icu_56::SearchIterator::operator=(icu_56::SearchIterator const &)+29j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??4SearchIterator@icu_56@@IAEAAV01@ABV01@@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 19CCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::SearchIterator::setMatchLength(icu_56::SearchIterator	*this, int)
		public ?setMatchLength@SearchIterator@icu_56@@MAEXH@Z
?setMatchLength@SearchIterator@icu_56@@MAEXH@Z proc near ; DATA	XREF: .rdata:000004C4o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	edx, [ebp+arg_0]
		mov	[ecx+18h], edx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?setMatchLength@SearchIterator@icu_56@@MAEXH@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1A04h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::SearchIterator::setMatchStart(icu_56::SearchIterator *this, int)
		public ?setMatchStart@SearchIterator@icu_56@@MAEXH@Z
?setMatchStart@SearchIterator@icu_56@@MAEXH@Z proc near	; DATA XREF: .rdata:000004C8o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	edx, [ebp+arg_0]
		mov	[ecx+14h], edx
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
?setMatchStart@SearchIterator@icu_56@@MAEXH@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1A3Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::SearchIterator::setMatchNotFound(icu_56::SearchIterator *__hidden this)
		public ?setMatchNotFound@SearchIterator@icu_56@@IAEXXZ
?setMatchNotFound@SearchIterator@icu_56@@IAEXXZ	proc near
					; CODE XREF: icu_56::SearchIterator::next(UErrorCode &)+B6p
					; icu_56::SearchIterator::previous(UErrorCode &)+E7p ...

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		push	0FFFFFFFFh
		mov	eax, [ebp+var_8]
		mov	edx, [eax]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+30h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	0
		mov	eax, [ebp+var_8]
		mov	edx, [eax]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+2Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], 0
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		movsx	edx, byte ptr [ecx+1Ch]
		test	edx, edx
		jz	short loc_1ACA
		mov	esi, esp
		lea	eax, [ebp+var_14]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		mov	eax, [edx+4]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+8]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_1AE6
; ---------------------------------------------------------------------------

loc_1ACA:				; CODE XREF: icu_56::SearchIterator::setMatchNotFound(void)+66j
		mov	esi, esp
		lea	eax, [ebp+var_14]
		push	eax
		push	0
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+8]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1AE6:				; CODE XREF: icu_56::SearchIterator::setMatchNotFound(void)+8Cj
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?setMatchNotFound@SearchIterator@icu_56@@IAEXXZ	endp

; ---------------------------------------------------------------------------
		align 4
$LN7		dd 1			; DATA XREF: icu_56::SearchIterator::setMatchNotFound(void)+AEo
		dd offset $LN6
$LN6		dd 0FFFFFFECh, 4	; DATA XREF: .text:00001B10o
		dd offset $LN5_0	; "status"
$LN5_0		db 'status',0           ; DATA XREF: .text:00001B1Co
_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; void __cdecl icu_56::UMemory::operator delete(void *)
		extrn __imp_??3UMemory@icu_56@@SAXPAX@Z:near
					; CODE XREF: icu_56::SearchIterator::`scalar deleting destructor'(uint)+39p
					; icu_56::SearchIterator::`vector deleting destructor'(uint)+81p
					; DATA XREF: ...
		extrn __RTC_CheckEsp:near
					; CODE XREF: icu_56::SearchIterator::`scalar deleting destructor'(uint)+44p
					; icu_56::SearchIterator::`scalar deleting destructor'(uint)+57p ...
; void __cdecl icu_56::UMemory::operator delete[](void *)
		extrn __imp_??_VUMemory@icu_56@@SAXPAX@Z:near
					; CODE XREF: icu_56::SearchIterator::`vector deleting destructor'(uint)+53p
					; DATA XREF: icu_56::SearchIterator::`vector deleting destructor'(uint)+53r
; void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *))
		extrn ??_M@YGXPAXIHP6EX0@Z@Z:near
					; CODE XREF: icu_56::SearchIterator::`vector deleting destructor'(uint)+3Dp
; _DWORD __thiscall icu_56::UnicodeString::~UnicodeString(icu_56::UnicodeString	*__hidden this)
		extrn __imp_??1UnicodeString@icu_56@@UAE@XZ:near
					; CODE XREF: __unwindfunclet$??0SearchIterator@icu_56@@QAE@ABV01@@Z$1+8p
					; icu_56::SearchIterator::~SearchIterator(void)+72p ...
; _DWORD __thiscall icu_56::UObject::~UObject(icu_56::UObject *__hidden	this)
		extrn __imp_??1UObject@icu_56@@UAE@XZ:near
					; CODE XREF: __unwindfunclet$??0SearchIterator@icu_56@@QAE@ABV01@@Z$0+5p
					; icu_56::SearchIterator::~SearchIterator(void)+8Bp ...
		extrn _uprv_malloc_56:near
					; CODE XREF: icu_56::SearchIterator::SearchIterator(icu_56::SearchIterator const &)+ABp
					; icu_56::SearchIterator::SearchIterator(void)+7Bp ...
; __declspec(dllimport)	public:	class icu_56::UnicodeString & __thiscall icu_56::UnicodeString::operator=(class	icu_56::UnicodeString const &)
		extrn __imp_??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z:near
					; CODE XREF: icu_56::SearchIterator::SearchIterator(icu_56::SearchIterator const &)+9Cp
					; icu_56::SearchIterator::setText(icu_56::UnicodeString	const &,UErrorCode &)+65p ...
; _DWORD __thiscall icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString *__hidden this)
		extrn __imp_??0UnicodeString@icu_56@@QAE@XZ:near
					; CODE XREF: icu_56::SearchIterator::SearchIterator(icu_56::SearchIterator const &)+70p
					; icu_56::SearchIterator::SearchIterator(void)+6Cp ...
; _DWORD __thiscall icu_56::UObject::UObject(icu_56::UObject *__hidden this, const struct icu_56::UObject *)
		extrn __imp_??0UObject@icu_56@@QAE@ABV01@@Z:near
					; CODE XREF: icu_56::SearchIterator::SearchIterator(icu_56::SearchIterator const &)+4Bp
					; DATA XREF: icu_56::SearchIterator::SearchIterator(icu_56::SearchIterator const &)+4Br
		extrn ___security_cookie:near
					; DATA XREF: icu_56::SearchIterator::SearchIterator(icu_56::SearchIterator const &)+2Er
					; icu_56::SearchIterator::~SearchIterator(void)+2Er ...
		extrn ___CxxFrameHandler3:near
					; CODE XREF: __ehhandler$??0SearchIterator@icu_56@@QAE@ABV01@@Z+19j
					; __ehhandler$??1SearchIterator@icu_56@@UAE@XZ+19j ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: __ehhandler$??0SearchIterator@icu_56@@QAE@ABV01@@Z+Fp
					; __ehhandler$??1SearchIterator@icu_56@@UAE@XZ+Fp ...
; const	type_info::`vftable'
		extrn ??_7type_info@@6B@:near
					; DATA XREF: .data:icu_56::SearchIterator `RTTI	Type Descriptor'o
					; .data:icu_56::UObject	`RTTI Type Descriptor'o ...
; public: virtual void * __thiscall icu_56::UObject::getDynamicClassID(void)const
		extrn ?getDynamicClassID@UObject@icu_56@@UBEPAXXZ:near
					; DATA XREF: .rdata:0000049Co
		extrn __purecall:near	; DATA XREF: .rdata:000004A0o
					; .rdata:000004A4o ...
		extrn _uprv_free_56:near
					; CODE XREF: icu_56::SearchIterator::~SearchIterator(void)+62p
; struct icu_56::UnicodeString *__thiscall icu_56::UnicodeString::remove(icu_56::UnicodeString *__hidden this)
		extrn __imp_?remove@UnicodeString@icu_56@@QAEAAV12@XZ:near
					; CODE XREF: icu_56::SearchIterator::getMatchedText(icu_56::UnicodeString &)+73p
					; DATA XREF: icu_56::SearchIterator::getMatchedText(icu_56::UnicodeString &)+73r
; struct icu_56::UnicodeString *__thiscall icu_56::UnicodeString::setTo(icu_56::UnicodeString *__hidden	this, const wchar_t *, int)
		extrn __imp_?setTo@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z:near
					; CODE XREF: icu_56::SearchIterator::getMatchedText(icu_56::UnicodeString &)+5Fp
					; DATA XREF: icu_56::SearchIterator::getMatchedText(icu_56::UnicodeString &)+5Fr
; const	wchar_t	*__thiscall icu_56::UnicodeString::getBuffer(icu_56::UnicodeString *__hidden this)
		extrn __imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ:near
					; CODE XREF: icu_56::SearchIterator::setText(icu_56::UnicodeString const &,UErrorCode &)+7Ap
					; icu_56::SearchIterator::SearchIterator(icu_56::UnicodeString const &,icu_56::BreakIterator *)+FDp ...
; int __thiscall icu_56::UnicodeString::length(icu_56::UnicodeString *__hidden this)
		extrn __imp_?length@UnicodeString@icu_56@@QBEHXZ:near
					; CODE XREF: icu_56::SearchIterator::setText(icu_56::UnicodeString const &,UErrorCode &)+3Dp
					; icu_56::SearchIterator::setText(icu_56::UnicodeString	const &,UErrorCode &)+97p ...
; int __cdecl memcmp(const void	*Buf1, const void *Buf2, size_t	Size)
		extrn _memcmp:near	; CODE XREF: icu_56::SearchIterator::operator==(icu_56::SearchIterator const &)+128p
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near
					; CODE XREF: icu_56::SearchIterator::reset(void)+8Cp
					; icu_56::SearchIterator::setMatchNotFound(void)+B4p
; _DWORD __thiscall icu_56::UObject::UObject(icu_56::UObject *__hidden this)
		extrn __imp_??0UObject@icu_56@@QAE@XZ:near
					; CODE XREF: icu_56::SearchIterator::SearchIterator(void)+47p
					; icu_56::SearchIterator::SearchIterator(icu_56::UnicodeString const &,icu_56::BreakIterator *)+47p ...
; _DWORD __thiscall icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString *__hidden this, const struct icu_56::UnicodeString *)
		extrn __imp_??0UnicodeString@icu_56@@QAE@ABV01@@Z:near
					; CODE XREF: icu_56::SearchIterator::SearchIterator(icu_56::UnicodeString const	&,icu_56::BreakIterator	*)+79p
					; DATA XREF: icu_56::SearchIterator::SearchIterator(icu_56::UnicodeString const	&,icu_56::BreakIterator	*)+79r


		end
