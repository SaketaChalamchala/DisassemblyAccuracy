;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	75F5A94C16FDC71A44F48895BD933926
; Input	CRC32 :	B19456AA

; File Name   :	D:\compspace\objfiles\firefox\i18n\measunit.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		public ??_C@_08KOKHCCMH@teaspoon?$AA@
; `string'
??_C@_08KOKHCCMH@teaspoon?$AA@ db 'teaspoon',0 ; DATA XREF: .rdata:00001278o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0Ch
		public ??_C@_0L@GHCNMNHJ@tablespoon?$AA@
; `string'
??_C@_0L@GHCNMNHJ@tablespoon?$AA@ db 'tablespoon',0 ; DATA XREF: .rdata:00001274o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 18h
		public ??_C@_05CAMNHPCN@quart?$AA@
; `string'
??_C@_05CAMNHPCN@quart?$AA@ db 'quart',0 ; DATA XREF: .rdata:00001270o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 20h
		public ??_C@_0M@PNABJEFL@pint?9metric?$AA@
; `string'
??_C@_0M@PNABJEFL@pint?9metric?$AA@ db 'pint-metric',0
					; DATA XREF: .rdata:int	const std::_Locbase<int>::messageso
					; .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::showposo ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2Ch
		public ??_C@_04IPDLAKHM@pint?$AA@
; `string'
??_C@_04IPDLAKHM@pint?$AA@ db 'pint',0  ; DATA XREF: .rdata:00001268o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 34h
		public ??_C@_0L@FNKLILIN@milliliter?$AA@
; `string'
??_C@_0L@FNKLILIN@milliliter?$AA@ db 'milliliter',0 ; DATA XREF: .rdata:00001264o
unk_3F		db    ?	;		; DATA XREF: .rdata:int	const std::_Locbase<int>::allo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 40h
		public ??_C@_09IFCLMNDI@megaliter?$AA@
; `string'
??_C@_09IFCLMNDI@megaliter?$AA@	db 'megaliter',0
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::lefto
					; .rdata:std::_Iosb<int>::_Openmode const std::_Iosb<int>::_Nocreateo ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4Ch
		public ??_C@_05BCGBKBDF@liter?$AA@
; `string'
??_C@_05BCGBKBDF@liter?$AA@ db 'liter',0 ; DATA XREF: .rdata:0000125Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 54h
		public ??_C@_0L@CFPHBHDE@hectoliter?$AA@
; `string'
??_C@_0L@CFPHBHDE@hectoliter?$AA@ db 'hectoliter',0 ; DATA XREF: .rdata:00001258o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 60h
		public ??_C@_06HKONJGNG@gallon?$AA@
; `string'
??_C@_06HKONJGNG@gallon?$AA@ db	'gallon',0 ; DATA XREF: .rdata:00001254o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 68h
		public ??_C@_0M@ECJCMDCC@fluid?9ounce?$AA@
; `string'
??_C@_0M@ECJCMDCC@fluid?9ounce?$AA@ db 'fluid-ounce',0 ; DATA XREF: .rdata:00001250o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 74h
		public ??_C@_09MOJLKGGP@deciliter?$AA@
; `string'
??_C@_09MOJLKGGP@deciliter?$AA@	db 'deciliter',0 ; DATA XREF: .rdata:0000124Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 80h
		public ??_C@_0L@KJBEBBLL@cup?9metric?$AA@
; `string'
??_C@_0L@KJBEBBLL@cup?9metric?$AA@ db 63h
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::righto
					; .rdata:std::_Iosb<int>::_Openmode const std::_Iosb<int>::_Noreplaceo	...
aUpMetric	db 'up-metric',0        ; DATA XREF: .rdata:off_C14o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8Ch
		public ??_C@_03IKCNKLED@cup?$AA@
; `string'
??_C@_03IKCNKLED@cup?$AA@ dd 707563h	; DATA XREF: .rdata:00001244o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 90h
		public ??_C@_0L@NAMPKCJB@cubic?9yard?$AA@
; `string'
??_C@_0L@NAMPKCJB@cubic?9yard?$AA@ db 'cubic-yard',0 ; DATA XREF: .rdata:00001240o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9Ch
		public ??_C@_0L@IPLIAEAH@cubic?9mile?$AA@
; `string'
??_C@_0L@IPLIAEAH@cubic?9mile?$AA@ db 'cubic-mile',0 ; DATA XREF: .rdata:0000123Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A8h
		public ??_C@_0M@NDLPKEKC@cubic?9meter?$AA@
; `string'
??_C@_0M@NDLPKEKC@cubic?9meter?$AA@ db 'cubic-meter',0 ; DATA XREF: .rdata:00001238o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B4h
		public ??_C@_0BA@LBIKIOKP@cubic?9kilometer?$AA@
; `string'
??_C@_0BA@LBIKIOKP@cubic?9kilometer?$AA@ db 'cubic-kilometer',0
					; DATA XREF: .rdata:00001234o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0C4h
		public ??_C@_0L@FJBNKDAO@cubic?9inch?$AA@
; `string'
??_C@_0L@FJBNKDAO@cubic?9inch?$AA@ db 'cubic-inch',0 ; DATA XREF: .rdata:00001230o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0D0h
		public ??_C@_0L@IMJMPHID@cubic?9foot?$AA@
; `string'
??_C@_0L@IMJMPHID@cubic?9foot?$AA@ db 'cubic-foot',0 ; DATA XREF: .rdata:0000122Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0DCh
		public ??_C@_0BB@EAFJLGPA@cubic?9centimeter?$AA@
; `string'
??_C@_0BB@EAFJLGPA@cubic?9centimeter?$AA@ db 'cubic-centimeter',0
					; DATA XREF: .rdata:00001228o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0F0h
		public ??_C@_0L@JEEJECBN@centiliter?$AA@
; `string'
??_C@_0L@JEEJECBN@centiliter?$AA@ db 'centiliter',0 ; DATA XREF: .rdata:00001224o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0FCh
		public ??_C@_06OCOBIJKM@bushel?$AA@
; `string'
??_C@_06OCOBIJKM@bushel?$AA@ db	'bushel',0 ; DATA XREF: .rdata:00001220o
					; .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::internalo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 104h
		public ??_C@_09LGJIPDLG@acre?9foot?$AA@
; `string'
??_C@_09LGJIPDLG@acre?9foot?$AA@ db 'acre-foot',0 ; DATA XREF: .rdata:0000121Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 110h
		public ??_C@_06BNPFHFPN@kelvin?$AA@
; `string'
??_C@_06BNPFHFPN@kelvin?$AA@ db	'kelvin',0 ; DATA XREF: .rdata:00001218o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 118h
		public ??_C@_07DCLBNMLN@generic?$AA@
; `string'
??_C@_07DCLBNMLN@generic?$AA@ db 'generic',0 ; DATA XREF: .rdata:00001214o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 120h
		public ??_C@_0L@FJGNLCPP@fahrenheit?$AA@
; `string'
??_C@_0L@FJGNLCPP@fahrenheit?$AA@ db 'fahrenheit',0 ; DATA XREF: .rdata:00001210o
					; .data:00001280o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 12Ch
		public ??_C@_07MMHFIJLF@celsius?$AA@
; `string'
??_C@_07MMHFIJLF@celsius?$AA@ db 'celsius',0 ; DATA XREF: .rdata:0000120Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 134h
		public ??_C@_0O@HCEOKJJ@mile?9per?9hour?$AA@
; `string'
??_C@_0O@HCEOKJJ@mile?9per?9hour?$AA@ db 'mile-per-hour',0 ; DATA XREF: .rdata:00001208o
					; .data:_unitPerUnitToSingleUnito
		db ?
		db    ?	;		; DATA XREF: .data:0000128Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 144h
		public ??_C@_0BB@MCEHBAJA@meter?9per?9second?$AA@
; `string'
??_C@_0BB@MCEHBAJA@meter?9per?9second?$AA@ db 'meter-per-second',0
					; DATA XREF: .rdata:00001204o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 158h
		public ??_C@_04EBOPOGB@knot?$AA@
; `string'
??_C@_04EBOPOGB@knot?$AA@ db 'knot',0   ; DATA XREF: .rdata:00001200o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 160h
		public ??_C@_0BD@OHFEFKNK@kilometer?9per?9hour?$AA@
; `string'
??_C@_0BD@OHFEFKNK@kilometer?9per?9hour?$AA@ db	'kilometer-per-hour',0
					; DATA XREF: .rdata:000011FCo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 174h
		public ??_C@_05ELCMIKMK@karat?$AA@
; `string'
??_C@_05ELCMIKMK@karat?$AA@ db 'karat',0 ; DATA XREF: .rdata:000011F8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 17Ch
		public ??_C@_0BG@BKCACION@pound?9per?9square?9inch?$AA@
; `string'
??_C@_0BG@BKCACION@pound?9per?9square?9inch?$AA@ db 'pound-per-square-inch',0
					; DATA XREF: .rdata:000011F4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 194h
		public ??_C@_0BG@DPECJILI@millimeter?9of?9mercury?$AA@
; `string'
??_C@_0BG@DPECJILI@millimeter?9of?9mercury?$AA@	db 'millimeter-of-mercury',0
					; DATA XREF: .rdata:000011F0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1ACh
		public ??_C@_08BJEPEPFF@millibar?$AA@
; `string'
??_C@_08BJEPEPFF@millibar?$AA@ db 'millibar',0 ; DATA XREF: .rdata:000011ECo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1B8h
		public ??_C@_07JHPCPNNN@inch?9hg?$AA@
; `string'
??_C@_07JHPCPNNN@inch?9hg?$AA@ db 'inch-hg',0 ; DATA XREF: .rdata:000011E8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1C0h
		public ??_C@_0M@CNNPMNDL@hectopascal?$AA@
; `string'
??_C@_0M@CNNPMNDL@hectopascal?$AA@ db 'hectopascal',0
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::adjustfieldo
					; .rdata:000011E4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1CCh
		public ??_C@_04OJBONICF@watt?$AA@
; `string'
??_C@_04OJBONICF@watt?$AA@ db 'watt',0  ; DATA XREF: .rdata:000011E0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1D4h
		public ??_C@_09PMMGDCIG@milliwatt?$AA@
; `string'
??_C@_09PMMGDCIG@milliwatt?$AA@	db 'milliwatt',0 ; DATA XREF: .rdata:000011DCo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1E0h
		public ??_C@_08HBKLFNCO@megawatt?$AA@
; `string'
??_C@_08HBKLFNCO@megawatt?$AA@ db 'megawatt',0 ; DATA XREF: .rdata:000011D8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1ECh
		public ??_C@_08GNBDAEGB@kilowatt?$AA@
; `string'
??_C@_08GNBDAEGB@kilowatt?$AA@ db 'kilowatt',0 ; DATA XREF: .rdata:000011D4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1F8h
		public ??_C@_0L@MODKBPDG@horsepower?$AA@
; `string'
??_C@_0L@MODKBPDG@horsepower?$AA@ db 'horsepower',0 ; DATA XREF: .rdata:000011D0o
					; .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::deco
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 204h
		public ??_C@_08LDCKMCPP@gigawatt?$AA@
; `string'
??_C@_08LDCKMCPP@gigawatt?$AA@ db 'gigawatt',0 ; DATA XREF: .rdata:000011CCo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 210h
		public ??_C@_03ICBDNNBM@ton?$AA@
; `string'
??_C@_03ICBDNNBM@ton?$AA@ dd 6E6F74h	; DATA XREF: .rdata:000011C8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 214h
		public ??_C@_05PGFPPJKB@stone?$AA@
; `string'
??_C@_05PGFPPJKB@stone?$AA@ db 'stone',0 ; DATA XREF: .rdata:000011C4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 21Ch
		public ??_C@_05EBEEKLCG@pound?$AA@
; `string'
??_C@_05EBEEKLCG@pound?$AA@ db 'pound',0 ; DATA XREF: .rdata:000011C0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 224h
		public ??_C@_0L@JPFPIKEP@ounce?9troy?$AA@
; `string'
??_C@_0L@JPFPIKEP@ounce?9troy?$AA@ db 'ounce-troy',0 ; DATA XREF: .rdata:000011BCo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 230h
		public ??_C@_05PEPOGMH@ounce?$AA@
; `string'
??_C@_05PEPOGMH@ounce?$AA@ db 'ounce',0 ; DATA XREF: .rdata:000011B8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 238h
		public ??_C@_09FPGHJFPG@milligram?$AA@
; `string'
??_C@_09FPGHJFPG@milligram?$AA@	db 'milligram',0 ; DATA XREF: .rdata:000011B4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 244h
		public ??_C@_09GHPPIDNE@microgram?$AA@
; `string'
??_C@_09GHPPIDNE@microgram?$AA@	db 'microgram',0 ; DATA XREF: .rdata:000011B0o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 250h
		public ??_C@_0L@IOHLDMKE@metric?9ton?$AA@
; `string'
??_C@_0L@IOHLDMKE@metric?9ton?$AA@ db 'metric-ton',0 ; DATA XREF: .rdata:000011ACo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 25Ch
		public ??_C@_08MOLCKDBB@kilogram?$AA@
; `string'
??_C@_08MOLCKDBB@kilogram?$AA@ db 'kilogram',0 ; DATA XREF: .rdata:000011A8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 268h
		public ??_C@_04EKLPHPFF@gram?$AA@
; `string'
??_C@_04EKLPHPFF@gram?$AA@ db 'gram',0  ; DATA XREF: .rdata:000011A4o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 270h
		public ??_C@_05KHHPAIKH@carat?$AA@
; `string'
??_C@_05KHHPAIKH@carat?$AA@ db 'carat',0 ; DATA XREF: .rdata:000011A0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 278h
		public ??_C@_03BKJHDBBN@lux?$AA@
; `string'
??_C@_03BKJHDBBN@lux?$AA@ dd 78756Ch	; DATA XREF: .rdata:0000119Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 27Ch
		public ??_C@_04BIGBAIKH@yard?$AA@
; `string'
??_C@_04BIGBAIKH@yard?$AA@ db 'yard',0  ; DATA XREF: .rdata:00001198o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 284h
		public ??_C@_09GLJGHPHH@picometer?$AA@
; `string'
??_C@_09GLJGHPHH@picometer?$AA@	db 'picometer',0 ; DATA XREF: .rdata:00001194o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 290h
		public ??_C@_06LHAHKBCH@parsec?$AA@
; `string'
??_C@_06LHAHKBCH@parsec?$AA@ db	'parsec',0 ; DATA XREF: .rdata:00001190o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 298h
		public ??_C@_0O@JFMHCMIL@nautical?9mile?$AA@
; `string'
??_C@_0O@JFMHCMIL@nautical?9mile?$AA@ db 'nautical-mile',0 ; DATA XREF: .rdata:0000118Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2A8h
		public ??_C@_09HCCMHJOF@nanometer?$AA@
; `string'
??_C@_09HCCMHJOF@nanometer?$AA@	db 'nanometer',0 ; DATA XREF: .rdata:00001188o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2B4h
		public ??_C@_0L@FDAHLFCJ@millimeter?$AA@
; `string'
??_C@_0L@FDAHLFCJ@millimeter?$AA@ db 'millimeter',0 ; DATA XREF: .rdata:00001184o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2C0h
		public ??_C@_0BC@FJMIFAFA@mile?9scandinavian?$AA@
; `string'
??_C@_0BC@FJMIFAFA@mile?9scandinavian?$AA@ db 'mile-scandinavian',0
					; DATA XREF: .rdata:00001180o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2D4h
		public ??_C@_04EHBGKODB@mile?$AA@
; `string'
??_C@_04EHBGKODB@mile?$AA@ db 'mile',0  ; DATA XREF: .rdata:0000117Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2DCh
		public ??_C@_0L@IGFPGMNL@micrometer?$AA@
; `string'
??_C@_0L@IGFPGMNL@micrometer?$AA@ db 'micrometer',0 ; DATA XREF: .rdata:00001178o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2E8h
		public ??_C@_05BMMNJPJB@meter?$AA@
; `string'
??_C@_05BMMNJPJB@meter?$AA@ db 'meter',0 ; DATA XREF: .rdata:00001174o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2F0h
		public ??_C@_0L@NHHLOPAJ@light?9year?$AA@
; `string'
??_C@_0L@NHHLOPAJ@light?9year?$AA@ db 'light-year',0 ; DATA XREF: .rdata:00001170o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2FCh
		public ??_C@_09GNPIBHME@kilometer?$AA@
; `string'
??_C@_09GNPIBHME@kilometer?$AA@	db 'kilometer',0 ; DATA XREF: .rdata:0000116Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 308h
		public ??_C@_04JBLDAJDI@inch?$AA@
; `string'
??_C@_04JBLDAJDI@inch?$AA@ db 'inch',0  ; DATA XREF: .rdata:00001168o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 310h
		public ??_C@_07CDJBLMLP@furlong?$AA@
; `string'
??_C@_07CDJBLMLP@furlong?$AA@ db 'furlong',0 ; DATA XREF: .rdata:00001164o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 318h
		public ??_C@_04EEDCFNLF@foot?$AA@
; `string'
??_C@_04EEDCFNLF@foot?$AA@ db 'foot',0  ; DATA XREF: .rdata:00001160o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 320h
		public ??_C@_06CIEFIFLF@fathom?$AA@
; `string'
??_C@_06CIEFIFLF@fathom?$AA@ db	'fathom',0 ; DATA XREF: .rdata:0000115Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 328h
		public ??_C@_09MADHJIML@decimeter?$AA@
; `string'
??_C@_09MADHJIML@decimeter?$AA@	db 'decimeter',0 ; DATA XREF: .rdata:00001158o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 334h
		public ??_C@_0L@JKOFHMLJ@centimeter?$AA@
; `string'
??_C@_0L@JKOFHMLJ@centimeter?$AA@ db 'centimeter',0 ; DATA XREF: .rdata:00001154o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 340h
		public ??_C@_0BC@KIODCLHF@astronomical?9unit?$AA@
; `string'
??_C@_0BC@KIODCLHF@astronomical?9unit?$AA@ db 'astronomical-unit',0
					; DATA XREF: .rdata:00001150o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 354h
		public ??_C@_09CLBMHOLM@megahertz?$AA@
; `string'
??_C@_09CLBMHOLM@megahertz?$AA@	db 'megahertz',0 ; DATA XREF: .rdata:0000114Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 360h
		public ??_C@_09MNGDJKOE@kilohertz?$AA@
; `string'
??_C@_09MNGDJKOE@kilohertz?$AA@	db 'kilohertz',0 ; DATA XREF: .rdata:00001148o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 36Ch
		public ??_C@_05LMFGBCLB@hertz?$AA@
; `string'
??_C@_05LMFGBCLB@hertz?$AA@ db 'hertz',0 ; DATA XREF: .rdata:00001144o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 374h
		public ??_C@_09NKAKBNGB@gigahertz?$AA@
; `string'
??_C@_09NKAKBNGB@gigahertz?$AA@	db 'gigahertz',0 ; DATA XREF: .rdata:00001140o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 380h
		public ??_C@_0O@NLAFLNJH@kilowatt?9hour?$AA@
; `string'
??_C@_0O@NLAFLNJH@kilowatt?9hour?$AA@ db 'kilowatt-hour',0 ; DATA XREF: .rdata:0000113Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 390h
		public ??_C@_09IIKDOHKB@kilojoule?$AA@
; `string'
??_C@_09IIKDOHKB@kilojoule?$AA@	db 'kilojoule',0 ; DATA XREF: .rdata:00001138o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 39Ch
		public ??_C@_0M@DHDJDLEO@kilocalorie?$AA@
; `string'
??_C@_0M@DHDJDLEO@kilocalorie?$AA@ db 'kilocalorie',0 ; DATA XREF: .rdata:00001134o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3A8h
		public ??_C@_05PJJGGPPE@joule?$AA@
; `string'
??_C@_05PJJGGPPE@joule?$AA@ db 'joule',0 ; DATA XREF: .rdata:00001130o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3B0h
		public ??_C@_0M@CIEBNFDN@foodcalorie?$AA@
; `string'
??_C@_0M@CIEBNFDN@foodcalorie?$AA@ db 'foodcalorie',0 ; DATA XREF: .rdata:0000112Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3BCh
		public ??_C@_07BDJGOIHI@calorie?$AA@
; `string'
??_C@_07BDJGOIHI@calorie?$AA@ db 'calorie',0 ; DATA XREF: .rdata:00001128o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3C4h
		public ??_C@_04CGJEHEGO@volt?$AA@
; `string'
??_C@_04CGJEHEGO@volt?$AA@ db 'volt',0  ; DATA XREF: .rdata:00001124o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3CCh
		public ??_C@_03CLGJEIME@ohm?$AA@
; `string'
??_C@_03CLGJEIME@ohm?$AA@ dd 6D686Fh	; DATA XREF: .rdata:00001120o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3D0h
		public ??_C@_0M@IEBIEOOC@milliampere?$AA@
; `string'
??_C@_0M@IEBIEOOC@milliampere?$AA@ db 'milliampere',0 ; DATA XREF: .rdata:0000111Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3DCh
		public ??_C@_06EBONLPHG@ampere?$AA@
; `string'
??_C@_06EBONLPHG@ampere?$AA@ db	'ampere',0 ; DATA XREF: .rdata:00001118o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3E4h
		public ??_C@_04JFPLDHAO@year?$AA@
; `string'
??_C@_04JFPLDHAO@year?$AA@ db 'year',0  ; DATA XREF: .rdata:00001114o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3ECh
		public ??_C@_04LGMCIIKL@week?$AA@
; `string'
??_C@_04LGMCIIKL@week?$AA@ db 'week',0  ; DATA XREF: .rdata:00001110o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3F4h
		public ??_C@_06BJCFNGJP@second?$AA@
; `string'
??_C@_06BJCFNGJP@second?$AA@ db	'second',0 ; DATA XREF: .rdata:0000110Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3FCh
		public ??_C@_0L@EOCDICFM@nanosecond?$AA@
; `string'
??_C@_0L@EOCDICFM@nanosecond?$AA@ db 'nanosecond',0 ; DATA XREF: .rdata:00001108o
					; .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::octo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 408h
		public ??_C@_05MEBAADFH@month?$AA@
; `string'
??_C@_05MEBAADFH@month?$AA@ db 'month',0 ; DATA XREF: .rdata:00001104o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 410h
		public ??_C@_06JGJIJFNK@minute?$AA@
; `string'
??_C@_06JGJIJFNK@minute?$AA@ db	'minute',0 ; DATA XREF: .rdata:00001100o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 418h
		public ??_C@_0M@NMNACHAL@millisecond?$AA@
; `string'
??_C@_0M@NMNACHAL@millisecond?$AA@ db 'millisecond',0 ; DATA XREF: .rdata:000010FCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 424h
		public ??_C@_0M@IPLGOMOC@microsecond?$AA@
; `string'
??_C@_0M@IPLGOMOC@microsecond?$AA@ db 'microsecond',0 ; DATA XREF: .rdata:000010F8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 430h
		public ??_C@_04LMOJGCPE@hour?$AA@
; `string'
??_C@_04LMOJGCPE@hour?$AA@ db 'hour',0  ; DATA XREF: .rdata:000010F4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 438h
		public ??_C@_03NNBHCDBP@day?$AA@
; `string'
??_C@_03NNBHCDBP@day?$AA@ dd 796164h	; DATA XREF: .rdata:000010F0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 43Ch
		public ??_C@_07NGPCOCIG@century?$AA@
; `string'
??_C@_07NGPCOCIG@century?$AA@ db 'century',0 ; DATA XREF: .rdata:000010ECo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 444h
		public ??_C@_08CKFKFOPP@terabyte?$AA@
; `string'
??_C@_08CKFKFOPP@terabyte?$AA@ db 'terabyte',0 ; DATA XREF: .rdata:000010E8o
					; .data:?__LINE__Var@?1??getAvailable@MeasureUnit@icu_56@@SAHPAV23@HAAW4UErrorCode@@@Z@4JA@756c999fo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 450h
		public ??_C@_07BEILFNFM@terabit?$AA@
; `string'
??_C@_07BEILFNFM@terabit?$AA@ db 'terabit',0 ; DATA XREF: .rdata:000010E4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 458h
		public ??_C@_08BPNPBJLM@megabyte?$AA@
; `string'
??_C@_08BPNPBJLM@megabyte?$AA@ db 'megabyte',0 ; DATA XREF: .rdata:000010E0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 464h
		public ??_C@_07CEGEOEHE@megabit?$AA@
; `string'
??_C@_07CEGEOEHE@megabit?$AA@ db 'megabit',0 ; DATA XREF: .rdata:000010DCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 46Ch
		public ??_C@_08DGHEAPD@kilobyte?$AA@
; `string'
??_C@_08DGHEAPD@kilobyte?$AA@ db 'kilobyte',0 ; DATA XREF: .rdata:000010D8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 478h
		public ??_C@_07PAFMMJCF@kilobit?$AA@
; `string'
??_C@_07PAFMMJCF@kilobit?$AA@ db 'kilobit',0 ; DATA XREF: .rdata:000010D4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 480h
		public ??_C@_08NNFOIGGN@gigabyte?$AA@
; `string'
??_C@_08NNFOIGGN@gigabyte?$AA@ db 'gigabyte',0 ; DATA XREF: .rdata:000010D0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 48Ch
		public ??_C@_07HCAEJCMI@gigabit?$AA@
; `string'
??_C@_07HCAEJCMI@gigabit?$AA@ db 'gigabit',0 ; DATA XREF: .rdata:000010CCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 494h
		public ??_C@_04IHGKJMLH@byte?$AA@
; `string'
??_C@_04IHGKJMLH@byte?$AA@ db 'byte',0  ; DATA XREF: .rdata:000010C8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 49Ch
		public ??_C@_03EDMBFDDG@bit?$AA@
; `string'
??_C@_03EDMBFDDG@bit?$AA@ dd 746962h	; DATA XREF: .rdata:000010C4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4A0h
		public ??_C@_03JLHFMIMG@ZWR?$AA@
; `string'
??_C@_03JLHFMIMG@ZWR?$AA@ dd 52575Ah	; DATA XREF: .rdata:000010C0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4A4h
		public ??_C@_03HNACJFJL@ZWN?$AA@
; `string'
??_C@_03HNACJFJL@ZWN?$AA@ dd 4E575Ah	; DATA XREF: .rdata:000010BCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4A8h
		public ??_C@_03EPDEPHBJ@ZWL?$AA@
; `string'
??_C@_03EPDEPHBJ@ZWL?$AA@ db 5Ah, 57h	; DATA XREF: .rdata:000010B8o
word_4AA	dw 4Ch			; DATA XREF: .data:long	`icu_56::MeasureUnit::initTime(char const *)'::`2'::__LINE__Varo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4ACh
		public ??_C@_03IHONHNBB@ZWD?$AA@
; `string'
??_C@_03IHONHNBB@ZWD?$AA@ dd 44575Ah	; DATA XREF: .rdata:000010B4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4B0h
		public ??_C@_03FFGHIACF@ZRZ?$AA@
; `string'
??_C@_03FFGHIACF@ZRZ?$AA@ db 5Ah, 52h, 5Ah ; DATA XREF:	.rdata:000010B0o
byte_4B3	db 0			; DATA XREF: .data:long	`icu_56::MeasureUnit::initCurrency(char	const *)'::`2'::__LINE__Varo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4B4h
		public ??_C@_03HLMJFHHA@ZRN?$AA@
; `string'
??_C@_03HLMJFHHA@ZRN?$AA@ dd 4E525Ah	; DATA XREF: .rdata:000010ACo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4B8h
		public ??_C@_03PHLDBKCF@ZMW?$AA@
; `string'
??_C@_03PHLDBKCF@ZMW?$AA@ dd 574D5Ah	; DATA XREF: .rdata:000010A8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4BCh
		public ??_C@_03BBMEEHHI@ZMK?$AA@
; `string'
??_C@_03BBMEEHHI@ZMK?$AA@ dd 4B4D5Ah	; DATA XREF: .rdata:000010A4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4C0h
		public ??_C@_03IDNOBHAE@ZAR?$AA@
; `string'
??_C@_03IDNOBHAE@ZAR?$AA@ dd 52415Ah	; DATA XREF: .rdata:000010A0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4C4h
		public ??_C@_03FHJPCINL@ZAL?$AA@
; `string'
??_C@_03FHJPCINL@ZAL?$AA@ dd 4C415Ah	; DATA XREF: .rdata:0000109Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4C8h
		public ??_C@_03GMDDOOBL@YUN?$AA@
; `string'
??_C@_03GMDDOOBL@YUN?$AA@ dd 4E5559h	; DATA XREF: .rdata:00001098o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4CCh
		public ??_C@_03EHBOLNNI@YUM?$AA@
; `string'
??_C@_03EHBOLNNI@YUM?$AA@ dd 4D5559h	; DATA XREF: .rdata:00001094o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4D0h
		public ??_C@_03JGGCBADG@YER?$AA@
; `string'
??_C@_03JGGCBADG@YER?$AA@ dd 524559h	; DATA XREF: .rdata:00001090o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4D4h
		public ??_C@_03ILDIMPNG@YDD?$AA@
; `string'
??_C@_03ILDIMPNG@YDD?$AA@ dd 444459h	; DATA XREF: .rdata:0000108Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4D8h
		public ??_C@_03MAMPKPPK@XXX?$AA@
; `string'
??_C@_03MAMPKPPK@XXX?$AA@ dd 585858h	; DATA XREF: .rdata:00001088o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4DCh
		public ??_C@_03FDBHJFLB@XUA?$AA@
; `string'
??_C@_03FDBHJFLB@XUA?$AA@ dd 415558h	; DATA XREF: .rdata:00001084o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4E0h
		public ??_C@_03CKCBIPFF@XTS?$AA@
; `string'
??_C@_03CKCBIPFF@XTS?$AA@ dd 535458h	; DATA XREF: .rdata:00001080o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4E4h
		public ??_C@_03HJDEDOFG@XSU?$AA@
; `string'
??_C@_03HJDEDOFG@XSU?$AA@ dd 555358h	; DATA XREF: .rdata:0000107Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4E8h
		public ??_C@_03GCGJLBEO@XPT?$AA@
; `string'
??_C@_03GCGJLBEO@XPT?$AA@ dd 545058h	; DATA XREF: .rdata:00001078o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4ECh
		public ??_C@_03BKJNMBJN@XPF?$AA@
; `string'
??_C@_03BKJNMBJN@XPF?$AA@ dd 465058h	; DATA XREF: .rdata:00001074o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4F0h
		public ??_C@_03CIKLKDBP@XPD?$AA@
; `string'
??_C@_03CIKLKDBP@XPD?$AA@ dd 445058h	; DATA XREF: .rdata:00001070o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4F4h
		public ??_C@_03NOHCFNA@XOF?$AA@
; `string'
??_C@_03NOHCFNA@XOF?$AA@ dd 464F58h	; DATA XREF: .rdata:0000106Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4F8h
		public ??_C@_03GBJPOBJE@XEU?$AA@
; `string'
??_C@_03GBJPOBJE@XEU?$AA@ dd 554558h	; DATA XREF: .rdata:00001068o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4FCh
		public ??_C@_03CPBMBNGE@XDR?$AA@
; `string'
??_C@_03CPBMBNGE@XDR?$AA@ dd 524458h	; DATA XREF: .rdata:00001064o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 500h
		public ??_C@_03DGMLLODG@XCD?$AA@
; `string'
??_C@_03DGMLLODG@XCD?$AA@ dd 444358h	; DATA XREF: .rdata:00001060o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 504h
		public ??_C@_03DHAJNEAB@XBD?$AA@
; `string'
??_C@_03DHAJNEAB@XBD?$AA@ dd 444258h	; DATA XREF: .rdata:0000105Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 508h
		public ??_C@_03HIEIECMG@XBC?$AA@
; `string'
??_C@_03HIEIECMG@XBC?$AA@ dd 434258h	; DATA XREF: .rdata:00001058o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 50Ch
		public ??_C@_03GBFDHDIH@XBB?$AA@
; `string'
??_C@_03GBFDHDIH@XBB?$AA@ dd 424258h	; DATA XREF: .rdata:00001054o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 510h
		public ??_C@_03EKHOCAEE@XBA?$AA@
; `string'
??_C@_03EKHOCAEE@XBA?$AA@ dd 414258h	; DATA XREF: .rdata:00001050o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 514h
		public ??_C@_03GGJGEJEI@XAU?$AA@
; `string'
??_C@_03GGJGEJEI@XAU?$AA@ dd 554158h	; DATA XREF: .rdata:0000104Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 518h
		public ??_C@_03BOGCDJJL@XAG?$AA@
; `string'
??_C@_03BOGCDJJL@XAG?$AA@ dd 474158h	; DATA XREF: .rdata:00001048o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 51Ch
		public ??_C@_03HHJAINK@XAF?$AA@
; `string'
??_C@_03HHJAINK@XAF?$AA@ dd 464158h	; DATA XREF: .rdata:00001044o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 520h
		public ??_C@_03DIEMBPEB@WST?$AA@
; `string'
??_C@_03DIEMBPEB@WST?$AA@ dd 545357h	; DATA XREF: .rdata:00001040o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 524h
		public ??_C@_03LGELGGBE@VUV?$AA@
; `string'
??_C@_03LGELGGBE@VUV?$AA@ dd 565556h	; DATA XREF: .rdata:0000103Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 528h
		public ??_C@_03NOMMFKFG@VND?$AA@
; `string'
??_C@_03NOMMFKFG@VND?$AA@ dd 444E56h	; DATA XREF: .rdata:00001038o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 52Ch
		public ??_C@_03OAKPNHDF@VEF?$AA@
; `string'
??_C@_03OAKPNHDF@VEF?$AA@ dd 464556h	; DATA XREF: .rdata:00001034o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 530h
		public ??_C@_03IEMDBCDB@VEB?$AA@
; `string'
??_C@_03IEMDBCDB@VEB?$AA@ dd 424556h	; DATA XREF: .rdata:00001030o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 534h
		public ??_C@_03NCNFHKIC@UZS?$AA@
; `string'
??_C@_03NCNFHKIC@UZS?$AA@ dd 535A55h	; DATA XREF: .rdata:0000102Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 538h
		public ??_C@_03IGMJGDFN@UYU?$AA@
; `string'
??_C@_03IGMJGDFN@UYU?$AA@ dd 555955h	; DATA XREF: .rdata:00001028o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 53Ch
		public ??_C@_03GALODOAA@UYI?$AA@
; `string'
??_C@_03GALODOAA@UYI?$AA@ dd 495955h	; DATA XREF: .rdata:00001024o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 540h
		public ??_C@_03NNAEEBAN@USS?$AA@
; `string'
??_C@_03NNAEEBAN@USS?$AA@ dd 535355h	; DATA XREF: .rdata:00001020o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 544h
		public ??_C@_03CCGICNBB@USN?$AA@
; `string'
??_C@_03CCGICNBB@USN?$AA@ dd 4E5355h	; DATA XREF: .rdata:0000101Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 548h
		public ??_C@_03NIIHMFJL@USD?$AA@
; `string'
??_C@_03NIIHMFJL@USD?$AA@ dd 445355h	; DATA XREF: .rdata:00001018o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 54Ch
		public ??_C@_03CFNPJDGK@UGX?$AA@
; `string'
??_C@_03CFNPJDGK@UGX?$AA@ dd 584755h	; DATA XREF: .rdata:00001014o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 550h
		public ??_C@_03EALNKOEK@UAK?$AA@
; `string'
??_C@_03EALNKOEK@UAK?$AA@ dd 4B4155h	; DATA XREF: .rdata:00001010o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 554h
		public ??_C@_03GLJAPNIJ@UAH?$AA@
; `string'
??_C@_03GLJAPNIJ@UAH?$AA@ dd 484155h	; DATA XREF: .rdata:0000100Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 558h
		public ??_C@_03GKGJBNOH@TZS?$AA@
; `string'
??_C@_03GKGJBNOH@TZS?$AA@ dd 535A54h	; DATA XREF: .rdata:00001008o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 55Ch
		public ??_C@_03GHDCAKCC@TWD?$AA@
; `string'
??_C@_03GHDCAKCC@TWD?$AA@ dd 445754h	; DATA XREF: .rdata:00001004o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 560h
		public ??_C@_03GFHELEHL@TTD?$AA@
; `string'
??_C@_03GFHELEHL@TTD?$AA@ dd 445454h	; DATA XREF: .rdata:off_1000o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 564h
		public ??_C@_03JOJFKENF@TRY?$AA@
; `string'
??_C@_03JOJFKENF@TRY?$AA@ dd 595254h	; DATA XREF: .rdata:00000FFCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 568h
		public ??_C@_03KJCAECMB@TRL?$AA@
; `string'
??_C@_03KJCAECMB@TRL?$AA@ dd 4C5254h	; DATA XREF: .rdata:00000FF8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 56Ch
		public ??_C@_03HLGGCNOG@TPE?$AA@
; `string'
??_C@_03HLGGCNOG@TPE?$AA@ dd 455054h	; DATA XREF: .rdata:00000FF4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 570h
		public ??_C@_03FLKJCPLP@TOP?$AA@
; `string'
??_C@_03FLKJCPLP@TOP?$AA@ dd 504F54h	; DATA XREF: .rdata:00000FF0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 574h
		public ??_C@_03HEMFJCNN@TND?$AA@
; `string'
??_C@_03HEMFJCNN@TND?$AA@ dd 444E54h	; DATA XREF: .rdata:00000FECo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 578h
		public ??_C@_03DMEBDONF@TMT?$AA@
; `string'
??_C@_03DMEBDONF@TMT?$AA@ dd 544D54h	; DATA XREF: .rdata:00000FE8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 57Ch
		public ??_C@_03KHEBJHMN@TMM?$AA@
; `string'
??_C@_03KHEBJHMN@TMM?$AA@ dd 4D4D54h	; DATA XREF: .rdata:00000FE4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 580h
		public ??_C@_03HGEPLOJH@TJS?$AA@
; `string'
??_C@_03HGEPLOJH@TJS?$AA@ dd 534A54h	; DATA XREF: .rdata:00000FE0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 584h
		public ??_C@_03GPFEIPNG@TJR?$AA@
; `string'
??_C@_03GPFEIPNG@TJR?$AA@ dd 524A54h	; DATA XREF: .rdata:00000FDCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 588h
		public ??_C@_03CGBCEJOJ@THB?$AA@
; `string'
??_C@_03CGBCEJOJ@THB?$AA@ dd 424854h	; DATA XREF: .rdata:00000FD8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 58Ch
		public ??_C@_03DKOECLMA@SZL?$AA@
; `string'
??_C@_03DKOECLMA@SZL?$AA@ dd 4C5A53h	; DATA XREF: .rdata:00000FD4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 590h
		public ??_C@_03NONFMIME@SYP?$AA@
; `string'
??_C@_03NONFMIME@SYP?$AA@ dd 505953h	; DATA XREF: .rdata:00000FD0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 594h
		public ??_C@_03LEGGMOGL@SVC?$AA@
; `string'
??_C@_03LEGGMOGL@SVC?$AA@ dd 435653h	; DATA XREF: .rdata:00000FCCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 598h
		public ??_C@_03PIKDIMMC@STD?$AA@
; `string'
??_C@_03PIKDIMMC@STD?$AA@ dd 445453h	; DATA XREF: .rdata:00000FC8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 59Ch
		public ??_C@_03NDECENBC@SSP?$AA@
; `string'
??_C@_03NDECENBC@SSP?$AA@ dd 505353h	; DATA XREF: .rdata:00000FC4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5A0h
		public ??_C@_03NHADKDLD@SRG?$AA@
; `string'
??_C@_03NHADKDLD@SRG?$AA@ dd 475253h	; DATA XREF: .rdata:00000FC0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5A4h
		public ??_C@_03PMCOPAHA@SRD?$AA@
; `string'
??_C@_03PMCOPAHA@SRD?$AA@ dd 445253h	; DATA XREF: .rdata:00000FBCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5A8h
		public ??_C@_03ONFDEEMF@SOS?$AA@
; `string'
??_C@_03ONFDEEMF@SOS?$AA@ dd 534F53h	; DATA XREF: .rdata:00000FB8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5ACh
		public ??_C@_03CCEPPEAC@SLL?$AA@
; `string'
??_C@_03CCEPPEAC@SLL?$AA@ dd 4C4C53h	; DATA XREF: .rdata:00000FB4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5B0h
		public ??_C@_03GIEBHEEA@SKK?$AA@
; `string'
??_C@_03GIEBHEEA@SKK?$AA@ dd 4B4B53h	; DATA XREF: .rdata:00000FB0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5B4h
		public ??_C@_03KGJPKOLA@SIT?$AA@
; `string'
??_C@_03KGJPKOLA@SIT?$AA@ dd 544953h	; DATA XREF: .rdata:00000FACo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5B8h
		public ??_C@_03MDDBABID@SHP?$AA@
; `string'
??_C@_03MDDBABID@SHP?$AA@ dd 504853h	; DATA XREF: .rdata:00000FA8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5BCh
		public ??_C@_03OGMDJBOL@SGD?$AA@
; `string'
??_C@_03OGMDJBOL@SGD?$AA@ dd 444753h	; DATA XREF: .rdata:00000FA4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5C0h
		public ??_C@_03GCNPFJEK@SEK?$AA@
; `string'
??_C@_03GCNPFJEK@SEK?$AA@ dd 4B4553h	; DATA XREF: .rdata:00000FA0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5C4h
		public ??_C@_03MPKIHMHB@SDG?$AA@
; `string'
??_C@_03MPKIHMHB@SDG?$AA@ dd 474453h	; DATA XREF: .rdata:00000F9Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5C8h
		public ??_C@_03OEIFCPLC@SDD?$AA@
; `string'
??_C@_03OEIFCPLC@SDD?$AA@ dd 444453h	; DATA XREF: .rdata:00000F98o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5CCh
		public ??_C@_03PNFCIMOA@SCR?$AA@
; `string'
??_C@_03PNFCIMOA@SCR?$AA@ dd 524353h	; DATA XREF: .rdata:00000F94o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5D0h
		public ??_C@_03OAAIFDAA@SBD?$AA@
; `string'
??_C@_03OAAIFDAA@SBD?$AA@ dd 444253h	; DATA XREF: .rdata:00000F90o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5D4h
		public ??_C@_03PONGFIIO@SAR?$AA@
; `string'
??_C@_03PONGFIIO@SAR?$AA@ dd 524153h	; DATA XREF: .rdata:00000F8Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5D8h
		public ??_C@_03HAGPDHHM@RWF?$AA@
; `string'
??_C@_03HAGPDHHM@RWF?$AA@ dd 465752h	; DATA XREF: .rdata:00000F88o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5DCh
		public ??_C@_03FNEFDEEH@RUR?$AA@
; `string'
??_C@_03FNEFDEEH@RUR?$AA@ dd 525552h	; DATA XREF: .rdata:00000F84o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5E0h
		public ??_C@_03BHIHCGBG@RUB?$AA@
; `string'
??_C@_03BHIHCGBG@RUB?$AA@ dd 425552h	; DATA XREF: .rdata:00000F80o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5E4h
		public ??_C@_03EFFAPNCC@RSD?$AA@
; `string'
??_C@_03EFFAPNCC@RSD?$AA@ dd 445352h	; DATA XREF: .rdata:00000F7Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5E8h
		public ??_C@_03KKIDEPLM@RON?$AA@
; `string'
??_C@_03KKIDEPLM@RON?$AA@ dd 4E4F52h	; DATA XREF: .rdata:00000F78o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5ECh
		public ??_C@_03JILFCNDO@ROL?$AA@
; `string'
??_C@_03JILFCNDO@ROL?$AA@ dd 4C4F52h	; DATA XREF: .rdata:00000F74o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5F0h
		public ??_C@_03FENPJAAF@QAR?$AA@
; `string'
??_C@_03FENPJAAF@QAR?$AA@ dd 524151h	; DATA XREF: .rdata:00000F70o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5F4h
		public ??_C@_03MJODODLM@PYG?$AA@
; `string'
??_C@_03MJODODLM@PYG?$AA@ dd 475950h	; DATA XREF: .rdata:00000F6Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5F8h
		public ??_C@_03PDANBCGN@PTE?$AA@
; `string'
??_C@_03PDANBCGN@PTE?$AA@ dd 455450h	; DATA XREF: .rdata:00000F68o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 5FCh
		public ??_C@_03CMGCOODL@PLZ?$AA@
; `string'
??_C@_03CMGCOODL@PLZ?$AA@ dd 5A4C50h	; DATA XREF: .rdata:00000F64o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 600h
		public ??_C@_03CMMDJGO@PLN?$AA@
; `string'
??_C@_03CMMDJGO@PLN?$AA@ dd 4E4C50h	; DATA XREF: .rdata:00000F60o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 604h
		public ??_C@_03OBPEHCLG@PKR?$AA@
; `string'
??_C@_03OBPEHCLG@PKR?$AA@ dd 524B50h	; DATA XREF: .rdata:00000F5Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 608h
		public ??_C@_03NBIEKOGN@PHP?$AA@
; `string'
??_C@_03NBIEKOGN@PHP?$AA@ dd 504850h	; DATA XREF: .rdata:00000F58o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 60Ch
		public ??_C@_03HDOOCCMK@PGK?$AA@
; `string'
??_C@_03HDOOCCMK@PGK?$AA@ dd 4B4750h	; DATA XREF: .rdata:00000F54o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 610h
		public ??_C@_03PCHBGOPN@PES?$AA@
; `string'
??_C@_03PCHBGOPN@PES?$AA@ dd 534550h	; DATA XREF: .rdata:00000F50o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 614h
		public ??_C@_03NBNACOB@PEN?$AA@
; `string'
??_C@_03NBNACOB@PEN?$AA@ dd 4E4550h	; DATA XREF: .rdata:00000F4Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 618h
		public ??_C@_03ECFMJECG@PEI?$AA@
; `string'
??_C@_03ECFMJECG@PEI?$AA@ dd 494550h	; DATA XREF: .rdata:00000F48o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 61Ch
		public ??_C@_03KGKBOFDB@PAB?$AA@
; `string'
??_C@_03KGKBOFDB@PAB?$AA@ dd 424150h	; DATA XREF: .rdata:00000F44o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 620h
		public ??_C@_03ONADEJMN@OMR?$AA@
; `string'
??_C@_03ONADEJMN@OMR?$AA@ dd 524D4Fh	; DATA XREF: .rdata:00000F40o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 624h
		public ??_C@_03FAEOCOIK@NZD?$AA@
; `string'
??_C@_03FAEOCOIK@NZD?$AA@ dd 445A4Eh	; DATA XREF: .rdata:00000F3Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 628h
		public ??_C@_03EBEBBOIL@NPR?$AA@
; `string'
??_C@_03EBEBBOIL@NPR?$AA@ dd 52504Eh	; DATA XREF: .rdata:00000F38o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 62Ch
		public ??_C@_03MNDLFDNO@NOK?$AA@
; `string'
??_C@_03MNDLFDNO@NOK?$AA@ dd 4B4F4Eh	; DATA XREF: .rdata:00000F34o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 630h
		public ??_C@_03GDMIKCIL@NLG?$AA@
; `string'
??_C@_03GDMIKCIL@NLG?$AA@ dd 474C4Eh	; DATA XREF: .rdata:00000F30o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 634h
		public ??_C@_03KNNKOKGI@NIO?$AA@
; `string'
??_C@_03KNNKOKGI@NIO?$AA@ dd 4F494Eh	; DATA XREF: .rdata:00000F2Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 638h
		public ??_C@_03LOFPPGCD@NGN?$AA@
; `string'
??_C@_03LOFPPGCD@NGN?$AA@ dd 4E474Eh	; DATA XREF: .rdata:00000F28o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 63Ch
		public ??_C@_03EADNGCBL@NAD?$AA@
; `string'
??_C@_03EADNGCBL@NAD?$AA@ dd 44414Eh	; DATA XREF: .rdata:00000F24o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 640h
		public ??_C@_03LIBEGJOO@MZN?$AA@
; `string'
??_C@_03LIBEGJOO@MZN?$AA@ dd 4E5A4Dh	; DATA XREF: .rdata:00000F20o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 644h
		public ??_C@_03JDDJDKCN@MZM?$AA@
; `string'
??_C@_03JDDJDKCN@MZM?$AA@ dd 4D5A4Dh	; DATA XREF: .rdata:00000F1Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 648h
		public ??_C@_03FMCFIKOK@MYR?$AA@
; `string'
??_C@_03FMCFIKOK@MYR?$AA@ dd 52594Dh	; DATA XREF: .rdata:00000F18o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 64Ch
		public ??_C@_03DJILCFNJ@MXV?$AA@
; `string'
??_C@_03DJILCFNJ@MXV?$AA@ dd 56584Dh	; DATA XREF: .rdata:00000F14o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 650h
		public ??_C@_03LLJALNIA@MXN?$AA@
; `string'
??_C@_03LLJALNIA@MXN?$AA@ dd 4E584Dh	; DATA XREF: .rdata:00000F10o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 654h
		public ??_C@_03MNLLAOPI@MWK?$AA@
; `string'
??_C@_03MNLLAOPI@MWK?$AA@ dd 4B574Dh	; DATA XREF: .rdata:00000F0Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 658h
		public ??_C@_03FHHJMNNH@MVR?$AA@
; `string'
??_C@_03FHHJMNNH@MVR?$AA@ dd 52564Dh	; DATA XREF: .rdata:00000F08o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 65Ch
		public ??_C@_03FFDPHDIO@MUR?$AA@
; `string'
??_C@_03FFDPHDIO@MUR?$AA@ dd 52554Dh	; DATA XREF: .rdata:00000F04o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 660h
		public ??_C@_03IALMCGGG@MTL?$AA@
; `string'
??_C@_03IALMCGGG@MTL?$AA@ dd 4C544Dh	; DATA XREF: .rdata:00000F00o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 664h
		public ??_C@_03KPBMAJBH@MRO?$AA@
; `string'
??_C@_03KPBMAJBH@MRO?$AA@ dd 4F524Dh	; DATA XREF: .rdata:00000EFCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 668h
		public ??_C@_03HGLIDHKK@MOP?$AA@
; `string'
??_C@_03HGLIDHKK@MOP?$AA@ dd 504F4Dh	; DATA XREF: .rdata:00000EF8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 66Ch
		public ??_C@_03BDBGJIJJ@MNT?$AA@
; `string'
??_C@_03BDBGJIJJ@MNT?$AA@ dd 544E4Dh	; DATA XREF: .rdata:00000EF4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 670h
		public ??_C@_03NMAKCIFO@MMK?$AA@
; `string'
??_C@_03NMAKCIFO@MMK?$AA@ dd 4B4D4Dh	; DATA XREF: .rdata:00000EF0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 674h
		public ??_C@_03GIGGDMCE@MLF?$AA@
; `string'
??_C@_03GIGGDMCE@MLF?$AA@ dd 464C4Dh	; DATA XREF: .rdata:00000EECo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 678h
		public ??_C@_03FPBPEICD@MKD?$AA@
; `string'
??_C@_03FPBPEICD@MKD?$AA@ dd 444B4Dh	; DATA XREF: .rdata:00000EE8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 67Ch
		public ??_C@_03GEDDNDMF@MGF?$AA@
; `string'
??_C@_03GEDDNDMF@MGF?$AA@ dd 46474Dh	; DATA XREF: .rdata:00000EE4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 680h
		public ??_C@_03CLHCEFAC@MGA?$AA@
; `string'
??_C@_03CLHCEFAC@MGA?$AA@ dd 41474Dh	; DATA XREF: .rdata:00000EE0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 684h
		public ??_C@_03JMJKIFBG@MDL?$AA@
; `string'
??_C@_03JMJKIFBG@MDL?$AA@ dd 4C444Dh	; DATA XREF: .rdata:00000EDCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 688h
		public ??_C@_03FCIIMNPF@MAD?$AA@
; `string'
??_C@_03FCIIMNPF@MAD?$AA@ dd 44414Dh	; DATA XREF: .rdata:00000ED8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 68Ch
		public ??_C@_03PIABFIFI@LYD?$AA@
; `string'
??_C@_03PIABFIFI@LYD?$AA@ dd 44594Ch	; DATA XREF: .rdata:00000ED4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 690h
		public ??_C@_03OPMFKKLC@LVR?$AA@
; `string'
??_C@_03OPMFKKLC@LVR?$AA@ dd 52564Ch	; DATA XREF: .rdata:00000ED0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 694h
		public ??_C@_03DLIEJFGN@LVL?$AA@
; `string'
??_C@_03DLIEJFGN@LVL?$AA@ dd 4C564Ch	; DATA XREF: .rdata:00000ECCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 698h
		public ??_C@_03DJMCCLDE@LUL?$AA@
; `string'
??_C@_03DJMCCLDE@LUL?$AA@ dd 4C554Ch	; DATA XREF: .rdata:00000EC8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 69Ch
		public ??_C@_03MDCNMDLO@LUF?$AA@
; `string'
??_C@_03MDCNMDLO@LUF?$AA@ dd 46554Ch	; DATA XREF: .rdata:00000EC4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6A0h
		public ??_C@_03LOFKDHPL@LUC?$AA@
; `string'
??_C@_03LOFKDHPL@LUC?$AA@ dd 43554Ch	; DATA XREF: .rdata:00000EC0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6A4h
		public ??_C@_03LKBLNJFK@LTT?$AA@
; `string'
??_C@_03LKBLNJFK@LTT?$AA@ dd 54544Ch	; DATA XREF: .rdata:00000EBCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6A8h
		public ??_C@_03DIAAEBAD@LTL?$AA@
; `string'
??_C@_03DIAAEBAD@LTL?$AA@ dd 4C544Ch	; DATA XREF: .rdata:00000EB8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6ACh
		public ??_C@_03DNEPFHIG@LSL?$AA@
; `string'
??_C@_03DNEPFHIG@LSL?$AA@ dd 4C534Ch	; DATA XREF: .rdata:00000EB4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6B0h
		public ??_C@_03PEFELHLJ@LRD?$AA@
; `string'
??_C@_03PEFELHLJ@LRD?$AA@ dd 44524Ch	; DATA XREF: .rdata:00000EB0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6B4h
		public ??_C@_03PLDLJKJB@LKR?$AA@
; `string'
??_C@_03PLDLJKJB@LKR?$AA@ dd 524B4Ch	; DATA XREF: .rdata:00000EACo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6B8h
		public ??_C@_03MGNMMDJM@LBP?$AA@
; `string'
??_C@_03MGNMMDJM@LBP?$AA@ dd 50424Ch	; DATA XREF: .rdata:00000EA8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6BCh
		public ??_C@_03GNKMLGFP@LAK?$AA@
; `string'
??_C@_03GNKMLGFP@LAK?$AA@ dd 4B414Ch	; DATA XREF: .rdata:00000EA4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6C0h
		public ??_C@_03CNFCMMOJ@KZT?$AA@
; `string'
??_C@_03CNFCMMOJ@KZT?$AA@ dd 545A4Bh	; DATA XREF: .rdata:00000EA0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6C4h
		public ??_C@_03GFNGGAOB@KYD?$AA@
; `string'
??_C@_03GFNGGAOB@KYD?$AA@ dd 44594Bh	; DATA XREF: .rdata:00000E9Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6C8h
		public ??_C@_03GPEIENOL@KWD?$AA@
; `string'
??_C@_03GPEIENOL@KWD?$AA@ dd 44574Bh	; DATA XREF: .rdata:00000E98o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6CCh
		public ??_C@_03IGMMOJC@KRW?$AA@
; `string'
??_C@_03IGMMOJC@KRW?$AA@ dd 57524Bh	; DATA XREF: .rdata:00000E94o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6D0h
		public ??_C@_03LOIBKPM@KPW?$AA@
; `string'
??_C@_03LOIBKPM@KPW?$AA@ dd 57504Bh	; DATA XREF: .rdata:00000E90o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6D4h
		public ??_C@_03EMMPAJMP@KMF?$AA@
; `string'
??_C@_03EMMPAJMP@KMF?$AA@ dd 464D4Bh	; DATA XREF: .rdata:00000E8Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6D8h
		public ??_C@_03GEKKBMHB@KHR?$AA@
; `string'
??_C@_03GEKKBMHB@KHR?$AA@ dd 52484Bh	; DATA XREF: .rdata:00000E88o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6DCh
		public ??_C@_03HGONGKAN@KGS?$AA@
; `string'
??_C@_03HGONGKAN@KGS?$AA@ dd 53474Bh	; DATA XREF: .rdata:00000E84o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6E0h
		public ??_C@_03HFGJLOGD@KES?$AA@
; `string'
??_C@_03HFGJLOGD@KES?$AA@ dd 53454Bh	; DATA XREF: .rdata:00000E80o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6E4h
		public ??_C@_03CNNHFABH@JPY?$AA@
; `string'
??_C@_03CNNHFABH@JPY?$AA@ dd 59504Ah	; DATA XREF: .rdata:00000E7Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6E8h
		public ??_C@_03MFMBNIEG@JOD?$AA@
; `string'
??_C@_03MFMBNIEG@JOD?$AA@ dd 444F4Ah	; DATA XREF: .rdata:00000E78o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6ECh
		public ??_C@_03MGEFAMCI@JMD?$AA@
; `string'
??_C@_03MGEFAMCI@JMD?$AA@ dd 444D4Ah	; DATA XREF: .rdata:00000E74o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6F0h
		public ??_C@_03PNOLBDB@ITL?$AA@
; `string'
??_C@_03PNOLBDB@ITL?$AA@ dd 4C5449h	; DATA XREF: .rdata:00000E70o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6F4h
		public ??_C@_03EFNADBHD@ISK?$AA@
; `string'
??_C@_03EFNADBHD@ISK?$AA@ dd 4B5349h	; DATA XREF: .rdata:00000E6Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6F8h
		public ??_C@_03NPBCPCFM@IRR?$AA@
; `string'
??_C@_03NPBCPCFM@IRR?$AA@ dd 525249h	; DATA XREF: .rdata:00000E68o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6FCh
		public ??_C@_03MBMMPJNC@IQD?$AA@
; `string'
??_C@_03MBMMPJNC@IQD?$AA@ dd 445149h	; DATA XREF: .rdata:00000E64o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 700h
		public ??_C@_03MKCOKIEI@INR?$AA@
; `string'
??_C@_03MKCOKIEI@INR?$AA@ dd 524E49h	; DATA XREF: .rdata:00000E60o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 704h
		public ??_C@_03NALBENGH@ILS?$AA@
; `string'
??_C@_03NALBENGH@ILS?$AA@ dd 534C49h	; DATA XREF: .rdata:00000E5Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 708h
		public ??_C@_03PEENCFCL@IEP?$AA@
; `string'
??_C@_03PEENCFCL@IEP?$AA@ dd 504549h	; DATA XREF: .rdata:00000E58o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 70Ch
		public ??_C@_03MHLJCNJO@IDR?$AA@
; `string'
??_C@_03MHLJCNJO@IDR?$AA@ dd 524449h	; DATA XREF: .rdata:00000E54o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 710h
		public ??_C@_03EMEPFEOJ@HUF?$AA@
; `string'
??_C@_03EMEPFEOJ@HUF?$AA@ dd 465548h	; DATA XREF: .rdata:00000E50o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 714h
		public ??_C@_03FEJGAPJP@HTG?$AA@
; `string'
??_C@_03FEJGAPJP@HTG?$AA@ dd 475448h	; DATA XREF: .rdata:00000E4Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 718h
		public ??_C@_03PMKODMCB@HRK?$AA@
; `string'
??_C@_03PMKODMCB@HRK?$AA@ dd 4B5248h	; DATA XREF: .rdata:00000E48o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 71Ch
		public ??_C@_03HLDGCAOO@HRD?$AA@
; `string'
??_C@_03HLDGCAOO@HRD?$AA@ dd 445248h	; DATA XREF: .rdata:00000E44o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 720h
		public ??_C@_03KGNDPAPC@HNL?$AA@
; `string'
??_C@_03KGNDPAPC@HNL?$AA@ dd 4C4E48h	; DATA XREF: .rdata:00000E40o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 724h
		public ??_C@_03GIMBLIBB@HKD?$AA@
; `string'
??_C@_03GIMBLIBB@HKD?$AA@ dd 444B48h	; DATA XREF: .rdata:00000E3Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 728h
		public ??_C@_03CPAANPFJ@GYD?$AA@
; `string'
??_C@_03CPAANPFJ@GYD?$AA@ dd 445947h	; DATA XREF: .rdata:00000E38o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 72Ch
		public ??_C@_03LDACFAG@GWP?$AA@
; `string'
??_C@_03LDACFAG@GWP?$AA@ dd 505747h	; DATA XREF: .rdata:00000E34o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 730h
		public ??_C@_03BAGNKKBO@GTQ?$AA@
; `string'
??_C@_03BAGNKKBO@GTQ?$AA@ dd 515447h	; DATA XREF: .rdata:00000E30o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 734h
		public ??_C@_03CDFFDALI@GRD?$AA@
; `string'
??_C@_03CDFFDALI@GRD?$AA@ dd 445247h	; DATA XREF: .rdata:00000E2Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 738h
		public ??_C@_03DIAILPKA@GQE?$AA@
; `string'
??_C@_03DIAILPKA@GQE?$AA@ dd 455147h	; DATA XREF: .rdata:00000E28o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 73Ch
		public ??_C@_03EFPAICO@GNF?$AA@
; `string'
??_C@_03EFPAICO@GNF?$AA@ dd 464E47h	; DATA XREF: .rdata:00000E24o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 740h
		public ??_C@_03DECPNEPF@GMD?$AA@
; `string'
??_C@_03DECPNEPF@GMD?$AA@ dd 444D47h	; DATA XREF: .rdata:00000E20o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 744h
		public ??_C@_03BNIIKLHM@GIP?$AA@
; `string'
??_C@_03BNIIKLHM@GIP?$AA@ dd 504947h	; DATA XREF: .rdata:00000E1Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 748h
		public ??_C@_03DHGHJCII@GHS?$AA@
; `string'
??_C@_03DHGHJCII@GHS?$AA@ dd 534847h	; DATA XREF: .rdata:00000E18o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 74Ch
		public ??_C@_03BMEKMBEL@GHP?$AA@
; `string'
??_C@_03BMEKMBEL@GHP?$AA@ dd 504847h	; DATA XREF: .rdata:00000E14o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 750h
		public ??_C@_03HNKFIANJ@GHC?$AA@
; `string'
??_C@_03HNKFIANJ@GHC?$AA@ dd 434847h	; DATA XREF: .rdata:00000E10o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 754h
		public ??_C@_03PCOFAPEF@GEL?$AA@
; `string'
??_C@_03PCOFAPEF@GEL?$AA@ dd 4C4547h	; DATA XREF: .rdata:00000E0Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 758h
		public ??_C@_03LNKEJJIC@GEK?$AA@
; `string'
??_C@_03LNKEJJIC@GEK?$AA@ dd 4B4547h	; DATA XREF: .rdata:00000E08o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 75Ch
		public ??_C@_03BBNNEEJN@GBP?$AA@
; `string'
??_C@_03BBNNEEJN@GBP?$AA@ dd 504247h	; DATA XREF: .rdata:00000E04o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 760h
		public ??_C@_03KJNPDFFP@FRF?$AA@
; `string'
??_C@_03KJNPDFFP@FRF?$AA@ dd 465246h	; DATA XREF: .rdata:off_E00o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 764h
		public ??_C@_03KGLABIHH@FKP?$AA@
; `string'
??_C@_03KGLABIHH@FKP?$AA@ dd 504B46h	; DATA XREF: .rdata:00000DFCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 768h
		public ??_C@_03IJNMKFBF@FJD?$AA@
; `string'
??_C@_03IJNMKFBF@FJD?$AA@ dd 444A46h	; DATA XREF: .rdata:00000DF8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 76Ch
		public ??_C@_03FKFIKAAF@FIM?$AA@
; `string'
??_C@_03FKFIKAAF@FIM?$AA@ dd 4D4946h	; DATA XREF: .rdata:00000DF4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 770h
		public ??_C@_03JAILFLGB@EUR?$AA@
; `string'
??_C@_03JAILFLGB@EUR?$AA@ dd 525545h	; DATA XREF: .rdata:00000DF0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 774h
		public ??_C@_03NLILCDAH@ETB?$AA@
; `string'
??_C@_03NLILCDAH@ETB?$AA@ dd 425445h	; DATA XREF: .rdata:00000DECo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 778h
		public ??_C@_03KGDAEFFB@ESP?$AA@
; `string'
??_C@_03KGDAEFFB@ESP?$AA@ dd 505345h	; DATA XREF: .rdata:00000DE8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 77Ch
		public ??_C@_03NOMEDFIC@ESB?$AA@
; `string'
??_C@_03NOMEDFIC@ESB?$AA@ dd 425345h	; DATA XREF: .rdata:00000DE4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 780h
		public ??_C@_03PFOJGGEB@ESA?$AA@
; `string'
??_C@_03PFOJGGEB@ESA?$AA@ dd 415345h	; DATA XREF: .rdata:00000DE0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 784h
		public ??_C@_03HDLDBALJ@ERN?$AA@
; `string'
??_C@_03HDLDBALJ@ERN?$AA@ dd 4E5245h	; DATA XREF: .rdata:00000DDCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 788h
		public ??_C@_03LNBPEOPN@EGP?$AA@
; `string'
??_C@_03LNBPEOPN@EGP?$AA@ dd 504745h	; DATA XREF: .rdata:00000DD8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 78Ch
		public ??_C@_03BHKNFBAJ@EEK?$AA@
; `string'
??_C@_03BHKNFBAJ@EEK?$AA@ dd 4B4545h	; DATA XREF: .rdata:00000DD4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 790h
		public ??_C@_03OMEMEBKH@ECV?$AA@
; `string'
??_C@_03OMEMEBKH@ECV?$AA@ dd 564345h	; DATA XREF: .rdata:00000DD0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 794h
		public ??_C@_03JBDLLFOC@ECS?$AA@
; `string'
??_C@_03JBDLLFOC@ECS?$AA@ dd 534345h	; DATA XREF: .rdata:00000DCCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 798h
		public ??_C@_03DPPDMOOO@DZD?$AA@
; `string'
??_C@_03DPPDMOOO@DZD?$AA@ dd 445A44h	; DATA XREF: .rdata:00000DC8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 79Ch
		public ??_C@_03LLAHICA@DOP?$AA@
; `string'
??_C@_03LLAHICA@DOP?$AA@ dd 504F44h	; DATA XREF: .rdata:00000DC4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7A0h
		public ??_C@_03KFIPBLGG@DKK?$AA@
; `string'
??_C@_03KFIPBLGG@DKK?$AA@ dd 4B4B44h	; DATA XREF: .rdata:00000DC0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7A4h
		public ??_C@_03BBODAPBM@DJF?$AA@
; `string'
??_C@_03BBODAPBM@DJF?$AA@ dd 464A44h	; DATA XREF: .rdata:00000DBCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7A8h
		public ??_C@_03PJELJBOK@DEM?$AA@
; `string'
??_C@_03PJELJBOK@DEM?$AA@ dd 4D4544h	; DATA XREF: .rdata:00000DB8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7ACh
		public ??_C@_03PIIJPLNN@DDM?$AA@
; `string'
??_C@_03PIIJPLNN@DDM?$AA@ dd 4D4444h	; DATA XREF: .rdata:00000DB4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7B0h
		public ??_C@_03CFLMOKJI@CZK?$AA@
; `string'
??_C@_03CFLMOKJI@CZK?$AA@ dd 4B5A43h	; DATA XREF: .rdata:00000DB0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7B4h
		public ??_C@_03IOMMJPFL@CYP?$AA@
; `string'
??_C@_03IOMMJPFL@CYP?$AA@ dd 505943h	; DATA XREF: .rdata:00000DACo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7B8h
		public ??_C@_03LCCFDOHC@CVE?$AA@
; `string'
??_C@_03LCCFDOHC@CVE?$AA@ dd 455643h	; DATA XREF: .rdata:00000DA8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7BCh
		public ??_C@_03IHNGGGDP@CUP?$AA@
; `string'
??_C@_03IHNGGGDP@CUP?$AA@ dd 505543h	; DATA XREF: .rdata:00000DA4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7C0h
		public ??_C@_03OGDJCHKN@CUC?$AA@
; `string'
??_C@_03OGDJCHKN@CUC?$AA@ dd 435543h	; DATA XREF: .rdata:00000DA0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7C4h
		public ??_C@_03CKGNNBBH@CSK?$AA@
; `string'
??_C@_03CKGNNBBH@CSK?$AA@ dd 4B5343h	; DATA XREF: .rdata:00000D9Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7C8h
		public ??_C@_03KNPFMNNI@CSD?$AA@
; `string'
??_C@_03KNPFMNNI@CSD?$AA@ dd 445343h	; DATA XREF: .rdata:00000D98o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7CCh
		public ??_C@_03ODHGDBCI@CRC?$AA@
; `string'
??_C@_03ODHGDBCI@CRC?$AA@ dd 435243h	; DATA XREF: .rdata:00000D94o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7D0h
		public ??_C@_03OLBALENM@COU?$AA@
; `string'
??_C@_03OLBALENM@COU?$AA@ dd 554F43h	; DATA XREF: .rdata:00000D90o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7D4h
		public ??_C@_03JGGHEAJJ@COP?$AA@
; `string'
??_C@_03JGGHEAJJ@COP?$AA@ dd 504F43h	; DATA XREF: .rdata:00000D8Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7D8h
		public ??_C@_03EGGHJBOH@CNY?$AA@
; `string'
??_C@_03EGGHJBOH@CNY?$AA@ dd 594E43h	; DATA XREF: .rdata:00000D88o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7DCh
		public ??_C@_03JECBPOMA@CLP?$AA@
; `string'
??_C@_03JECBPOMA@CLP?$AA@ dd 504C43h	; DATA XREF: .rdata:00000D84o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7E0h
		public ??_C@_03IILJELBH@CLF?$AA@
; `string'
??_C@_03IILJELBH@CLF?$AA@ dd 464C43h	; DATA XREF: .rdata:00000D80o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7E4h
		public ??_C@_03NMGJMANL@CHW?$AA@
; `string'
??_C@_03NMGJMANL@CHW?$AA@ dd 574843h	; DATA XREF: .rdata:00000D7Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7E8h
		public ??_C@_03IPLAODML@CHF?$AA@
; `string'
??_C@_03IPLAODML@CHF?$AA@ dd 464843h	; DATA XREF: .rdata:00000D78o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7ECh
		public ??_C@_03KEJNLAAI@CHE?$AA@
; `string'
??_C@_03KEJNLAAI@CHE?$AA@ dd 454843h	; DATA XREF: .rdata:00000D74o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7F0h
		public ??_C@_03PCMHBHIO@CHC?$AA@
; `string'
??_C@_03PCMHBHIO@CHC?$AA@ dd 434843h	; DATA XREF: .rdata:00000D70o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7F4h
		public ??_C@_03IGKKBKKP@CDF?$AA@
; `string'
??_C@_03IGKKBKKP@CDF?$AA@ dd 464443h	; DATA XREF: .rdata:00000D6Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7F8h
		public ??_C@_03LCFHLKMG@CAD?$AA@
; `string'
??_C@_03LCFHLKMG@CAD?$AA@ dd 444143h	; DATA XREF: .rdata:00000D68o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7FCh
		public ??_C@_03BKJIJBDC@BZD?$AA@
; `string'
??_C@_03BKJIJBDC@BZD?$AA@ dd 445A42h	; DATA XREF: .rdata:00000D64o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 800h
		public ??_C@_03EEGJKLM@BYR?$AA@
; `string'
??_C@_03EEGJKLM@BYR?$AA@ dd 525942h	; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::hexo
					; .rdata:00000D60o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 804h
		public ??_C@_03EOIEIION@BYB?$AA@
; `string'
??_C@_03EOIEIION@BYB?$AA@ dd 425942h	; DATA XREF: .rdata:00000D5Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 808h
		public ??_C@_03DMOONFDE@BWP?$AA@
; `string'
??_C@_03DMOONFDE@BWP?$AA@ dd 505742h	; DATA XREF: .rdata:00000D58o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 80Ch
		public ??_C@_03OKOJFELC@BTN?$AA@
; `string'
??_C@_03OKOJFELC@BTN?$AA@ dd 4E5442h	; DATA XREF: .rdata:00000D54o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 810h
		public ??_C@_03BFEJKKLN@BSD?$AA@
; `string'
??_C@_03BFEJKKLN@BSD?$AA@ dd 445342h	; DATA XREF: .rdata:00000D50o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 814h
		public ??_C@_03IBDHFFN@BRR?$AA@
; `string'
??_C@_03IBDHFFN@BRR?$AA@ dd 525242h	; DATA XREF: .rdata:00000D4Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 818h
		public ??_C@_03OOGECIAA@BRN?$AA@
; `string'
??_C@_03OOGECIAA@BRN?$AA@ dd 4E5242h	; DATA XREF: .rdata:00000D48o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 81Ch
		public ??_C@_03NMFCEKIC@BRL?$AA@
; `string'
??_C@_03NMFCEKIC@BRL?$AA@ dd 4C5242h	; DATA XREF: .rdata:00000D44o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 820h
		public ??_C@_03NJAPBML@BRE?$AA@
; `string'
??_C@_03NJAPBML@BRE?$AA@ dd 455242h	; DATA XREF: .rdata:00000D40o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 824h
		public ??_C@_03FLMKFGEN@BRC?$AA@
; `string'
??_C@_03FLMKFGEN@BRC?$AA@ dd 435242h	; DATA XREF: .rdata:00000D3Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 828h
		public ??_C@_03HIIBIAHK@BOV?$AA@
; `string'
??_C@_03HIIBIAHK@BOV?$AA@ dd 564F42h	; DATA XREF: .rdata:00000D38o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 82Ch
		public ??_C@_03FGCPFHCP@BOB?$AA@
; `string'
??_C@_03FGCPFHCP@BOB?$AA@ dd 424F42h	; DATA XREF: .rdata:00000D34o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 830h
		public ??_C@_03BLHJKJO@BND?$AA@
; `string'
??_C@_03BLHJKJO@BND?$AA@ dd 444E42h	; DATA XREF: .rdata:00000D30o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 834h
		public ??_C@_03DPBCEMH@BMD?$AA@
; `string'
??_C@_03DPBCEMH@BMD?$AA@ dd 444D42h	; DATA XREF: .rdata:00000D2Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 838h
		public ??_C@_03DGMOOOJJ@BIF?$AA@
; `string'
??_C@_03DGMOOOJJ@BIF?$AA@ dd 464942h	; DATA XREF: .rdata:00000D28o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 83Ch
		public ??_C@_03FDKOGCM@BHD?$AA@
; `string'
??_C@_03FDKOGCM@BHD?$AA@ dd 444842h	; DATA XREF: .rdata:00000D24o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 840h
		public ??_C@_03PEIJEJJL@BGN?$AA@
; `string'
??_C@_03PEIJEJJL@BGN?$AA@ dd 4E4742h	; DATA XREF: .rdata:00000D20o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 844h
		public ??_C@_03MGLPCLBJ@BGL?$AA@
; `string'
??_C@_03MGLPCLBJ@BGL?$AA@ dd 4C4742h	; DATA XREF: .rdata:00000D1Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 848h
		public ??_C@_03MFDLPPHH@BEL?$AA@
; `string'
??_C@_03MFDLPPHH@BEL?$AA@ dd 4C4542h	; DATA XREF: .rdata:00000D18o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 84Ch
		public ??_C@_03DPNEBHPN@BEF?$AA@
; `string'
??_C@_03DPNEBHPN@BEF?$AA@ dd 464542h	; DATA XREF: .rdata:00000D14o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 850h
		public ??_C@_03ECKDODLI@BEC?$AA@
; `string'
??_C@_03ECKDODLI@BEC?$AA@ dd 434542h	; DATA XREF: .rdata:00000D10o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 854h
		public ??_C@_03EGOCANBJ@BDT?$AA@
; `string'
??_C@_03EGOCANBJ@BDT?$AA@ dd 544442h	; DATA XREF: .rdata:00000D0Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 858h
		public ??_C@_03IKNGDPK@BBD?$AA@
; `string'
??_C@_03IKNGDPK@BBD?$AA@ dd 444242h	; DATA XREF: .rdata:00000D08o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 85Ch
		public ??_C@_03NLCJGGOK@BAM?$AA@
; `string'
??_C@_03NLCJGGOK@BAM?$AA@ dd 4D4142h	; DATA XREF: .rdata:00000D04o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 860h
		public ??_C@_03KOLNNKD@BAD?$AA@
; `string'
??_C@_03KOLNNKD@BAD?$AA@ dd 444142h	; DATA XREF: .rdata:00000D00o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 864h
		public ??_C@_03PCMCNGFG@AZN?$AA@
; `string'
??_C@_03PCMCNGFG@AZN?$AA@ dd 4E5A41h	; DATA XREF: .rdata:00000CFCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 868h
		public ??_C@_03NJOPIFJF@AZM?$AA@
; `string'
??_C@_03NJOPIFJF@AZM?$AA@ dd 4D5A41h	; DATA XREF: .rdata:00000CF8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 86Ch
		public ??_C@_03NLKJDLMM@AYM?$AA@
; `string'
??_C@_03NLKJDLMM@AYM?$AA@ dd 4D5941h	; DATA XREF: .rdata:00000CF4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 870h
		public ??_C@_03CLNIPOEM@AWG?$AA@
; `string'
??_C@_03CLNIPOEM@AWG?$AA@ dd 475741h	; DATA XREF: .rdata:00000CF0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 874h
		public ??_C@_03DHBHJOB@AUD?$AA@
; `string'
??_C@_03DHBHJOB@AUD?$AA@ dd 445541h	; DATA XREF: .rdata:00000CECo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 878h
		public ??_C@_03HDAJHEA@ATS?$AA@
; `string'
??_C@_03HDAJHEA@ATS?$AA@ dd 535441h	; DATA XREF: .rdata:00000CE8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 87Ch
		public ??_C@_03DLNOLPC@ARS?$AA@
; `string'
??_C@_03DLNOLPC@ARS?$AA@ dd 535241h	; DATA XREF: .rdata:00000CE4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 880h
		public ??_C@_03CIJALIDB@ARP?$AA@
; `string'
??_C@_03CIJALIDB@ARP?$AA@ dd 505241h	; DATA XREF: .rdata:00000CE0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 884h
		public ??_C@_03HLEJJLCB@ARA?$AA@
; `string'
??_C@_03HLEJJLCB@ARA?$AA@ dd 415241h	; DATA XREF: .rdata:00000CDCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 888h
		public ??_C@_03OFIOKJA@AOR?$AA@
; `string'
??_C@_03OFIOKJA@AOR?$AA@ dd 524F41h	; DATA XREF: .rdata:00000CD8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 88Ch
		public ??_C@_03OICPLHMN@AON?$AA@
; `string'
??_C@_03OICPLHMN@AON?$AA@ dd 4E4F41h	; DATA XREF: .rdata:00000CD4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 890h
		public ??_C@_03GPLHKLAC@AOA?$AA@
; `string'
??_C@_03GPLHKLAC@AOA?$AA@ dd 414F41h	; DATA XREF: .rdata:00000CD0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 894h
		public ??_C@_03DICPGGLD@ANG?$AA@
; `string'
??_C@_03DICPGGLD@ANG?$AA@ dd 474E41h	; DATA XREF: .rdata:00000CCCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 898h
		public ??_C@_03BBEEILCJ@AMD?$AA@
; `string'
??_C@_03BBEEILCJ@AMD?$AA@ dd 444D41h	; DATA XREF: .rdata:00000CC8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 89Ch
		public ??_C@_03NIFPGLBG@ALL?$AA@
; `string'
??_C@_03NIFPGLBG@ALL?$AA@ dd 4C4C41h	; DATA XREF: .rdata:00000CC4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8A0h
		public ??_C@_03OHPOIMEC@AFN?$AA@
; `string'
??_C@_03OHPOIMEC@AFN?$AA@ dd 4E4641h	; DATA XREF: .rdata:00000CC0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8A4h
		public ??_C@_03GAGGJAIN@AFA?$AA@
; `string'
??_C@_03GAGGJAIN@AFA?$AA@ dd 414641h	; DATA XREF: .rdata:00000CBCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8A8h
		public ??_C@_03BPFHNKJB@AED?$AA@
; `string'
??_C@_03BPFHNKJB@AED?$AA@ dd 444541h	; DATA XREF: .rdata:00000CB8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8ACh
		public ??_C@_03DADLGHPD@ADP?$AA@
; `string'
??_C@_03DADLGHPD@ADP?$AA@ dd 504441h	; DATA XREF: .rdata:00000CB4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8B0h
		public ??_C@_0BA@EJNNDDOD@mile?9per?9gallon?$AA@
; `string'
??_C@_0BA@EJNNDDOD@mile?9per?9gallon?$AA@ db 'mile-per-gallon',0
					; DATA XREF: .rdata:00000CB0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8C0h
		public ??_C@_0BE@NNBGALLP@liter?9per?9kilometer?$AA@
; `string'
??_C@_0BE@NNBGALLP@liter?9per?9kilometer?$AA@ db 'liter-per-kilometer',0
					; DATA XREF: .rdata:00000CACo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8D4h
		public ??_C@_0BI@KFFNHCCO@liter?9per?9100kilometers?$AA@
; `string'
??_C@_0BI@KFFNHCCO@liter?9per?9100kilometers?$AA@ db 'liter-per-100kilometers',0
					; DATA XREF: .rdata:00000CA8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8ECh
		public ??_C@_0M@BOFPNPJO@square?9yard?$AA@
; `string'
??_C@_0M@BOFPNPJO@square?9yard?$AA@ db 'square-yard',0 ; DATA XREF: .rdata:00000CA4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8F8h
		public ??_C@_0M@EBCIHJAI@square?9mile?$AA@
; `string'
??_C@_0M@EBCIHJAI@square?9mile?$AA@ db 'square-mile',0 ; DATA XREF: .rdata:00000CA0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 904h
		public ??_C@_0N@EDMOCJEO@square?9meter?$AA@
; `string'
??_C@_0N@EDMOCJEO@square?9meter?$AA@ db	'square-meter',0 ; DATA XREF: .rdata:00000C9Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 914h
		public ??_C@_0BB@COFCDAP@square?9kilometer?$AA@
; `string'
??_C@_0BB@COFCDAP@square?9kilometer?$AA@ db 'square-kilometer',0
					; DATA XREF: .rdata:00000C98o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 928h
		public ??_C@_0M@JHINNOAB@square?9inch?$AA@
; `string'
??_C@_0M@JHINNOAB@square?9inch?$AA@ db 'square-inch',0 ; DATA XREF: .rdata:00000C94o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 934h
		public ??_C@_0M@ECAMIKIM@square?9foot?$AA@
; `string'
??_C@_0M@ECAMIKIM@square?9foot?$AA@ db 'square-foot',0 ; DATA XREF: .rdata:00000C90o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 940h
		public ??_C@_0BC@JGDMHKLF@square?9centimeter?$AA@
; `string'
??_C@_0BC@JGDMHKLF@square?9centimeter?$AA@ db 'square-centimeter',0
					; DATA XREF: .rdata:00000C8Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 954h
		public ??_C@_07OAKHAJL@hectare?$AA@
; `string'
??_C@_07OAKHAJL@hectare?$AA@ db	'hectare',0 ; DATA XREF: .rdata:00000C88o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 95Ch
		public ??_C@_04PLODCNCO@acre?$AA@
; `string'
??_C@_04PLODCNCO@acre?$AA@ db 'acre',0  ; DATA XREF: .rdata:00000C84o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 964h
		public ??_C@_0L@GKPKOMAM@revolution?$AA@
; `string'
??_C@_0L@GKPKOMAM@revolution?$AA@ db 'revolution',0 ; DATA XREF: .rdata:00000C80o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 970h
		public ??_C@_06ECDLLDEG@radian?$AA@
; `string'
??_C@_06ECDLLDEG@radian?$AA@ db	'radian',0 ; DATA XREF: .rdata:00000C7Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 978h
		public ??_C@_06PJOBIDPN@degree?$AA@
; `string'
??_C@_06PJOBIDPN@degree?$AA@ db	'degree',0 ; DATA XREF: .rdata:00000C78o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 980h
		public ??_C@_0L@ILLFGOLG@arc?9second?$AA@
; `string'
??_C@_0L@ILLFGOLG@arc?9second?$AA@ db 'arc-second',0 ; DATA XREF: .rdata:00000C74o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 98Ch
		public ??_C@_0L@EAICNPD@arc?9minute?$AA@
; `string'
??_C@_0L@EAICNPD@arc?9minute?$AA@ db 'arc-minute',0 ; DATA XREF: .rdata:00000C70o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 998h
		public ??_C@_0BJ@KDKOIMLI@meter?9per?9second?9squared?$AA@
; `string'
??_C@_0BJ@KDKOIMLI@meter?9per?9second?9squared?$AA@ db 'meter-per-second-squared',0
					; DATA XREF: .rdata:00000C6Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9B4h
		public ??_C@_07LIHLFPDP@g?9force?$AA@
; `string'
??_C@_07LIHLFPDP@g?9force?$AA@ db 'g-force',0 ; DATA XREF: .rdata:_gSubTypeso
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9BCh
		public ??_C@_06EMCPHFGM@volume?$AA@
; `string'
??_C@_06EMCPHFGM@volume?$AA@ db	'volume',0 ; DATA XREF: .rdata:00000C60o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9C4h
		public ??_C@_0M@GJEHHDCL@temperature?$AA@
; `string'
??_C@_0M@GJEHHDCL@temperature?$AA@ db 'temperature',0 ; DATA XREF: .rdata:00000C5Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9D0h
		public ??_C@_05HJCMGBKF@speed?$AA@
; `string'
??_C@_05HJCMGBKF@speed?$AA@ db 'speed',0 ; DATA XREF: .rdata:00000C58o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9D8h
		public ??_C@_0L@HOPBDCNE@proportion?$AA@
; `string'
??_C@_0L@HOPBDCNE@proportion?$AA@ db 'proportion',0 ; DATA XREF: .rdata:00000C54o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9E4h
		public ??_C@_08POHEELCJ@pressure?$AA@
; `string'
??_C@_08POHEELCJ@pressure?$AA@ db 'pressure',0 ; DATA XREF: .rdata:00000C50o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9F0h
		public ??_C@_05PLIADJJL@power?$AA@
; `string'
??_C@_05PLIADJJL@power?$AA@ db 'power',0 ; DATA XREF: .rdata:00000C4Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9F8h
		public ??_C@_04IJEANHEE@mass?$AA@
; `string'
??_C@_04IJEANHEE@mass?$AA@ db 'mass',0  ; DATA XREF: .rdata:00000C48o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A00h
		public ??_C@_05OEPGNJB@light?$AA@
; `string'
??_C@_05OEPGNJB@light?$AA@ db 'light',0 ; DATA XREF: .rdata:00000C44o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A08h
		public ??_C@_06IJDLPEM@length?$AA@
; `string'
??_C@_06IJDLPEM@length?$AA@ db 'length',0 ; DATA XREF: .rdata:00000C40o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A10h
		public ??_C@_09KJGFCOBE@frequency?$AA@
; `string'
??_C@_09KJGFCOBE@frequency?$AA@	db 'frequency',0 ; DATA XREF: .rdata:00000C3Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A1Ch
		public ??_C@_06KKGCKCNJ@energy?$AA@
; `string'
??_C@_06KKGCKCNJ@energy?$AA@ db	'energy',0 ; DATA XREF: .rdata:00000C38o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A24h
		public ??_C@_08BLBKGCCL@electric?$AA@
; `string'
??_C@_08BLBKGCCL@electric?$AA@ db 'electric',0 ; DATA XREF: .rdata:00000C34o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A30h
		public ??_C@_08LGBPINEC@duration?$AA@
; char `string'[]
??_C@_08LGBPINEC@duration?$AA@ db 'duration',0 ; DATA XREF: .rdata:00000C30o
					; icu_56::MeasureUnit::initTime(char const *)+23o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A3Ch
		public ??_C@_07DFIBBPEI@digital?$AA@
; `string'
??_C@_07DFIBBPEI@digital?$AA@ db 'digital',0 ; DATA XREF: .rdata:00000C2Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A44h
		public ??_C@_08JLPCGLMH@currency?$AA@
; char `string'[]
??_C@_08JLPCGLMH@currency?$AA@ db 'currency',0 ; DATA XREF: .rdata:00000C28o
					; icu_56::MeasureUnit::initCurrency(char const *)+23o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A50h
		public ??_C@_0M@OJLAKFOH@consumption?$AA@
; `string'
??_C@_0M@OJLAKFOH@consumption?$AA@ db 'consumption',0 ; DATA XREF: .rdata:00000C24o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A5Ch
		public ??_C@_04GOEDGNCF@area?$AA@
; `string'
??_C@_04GOEDGNCF@area?$AA@ db 'area',0  ; DATA XREF: .rdata:00000C20o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A64h
		public ??_C@_05FECBCJJD@angle?$AA@
; `string'
??_C@_05FECBCJJD@angle?$AA@ db 'angle',0 ; DATA XREF: .rdata:00000C1Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A6Ch
		public ??_C@_0N@OKFAMOHD@acceleration?$AA@
; `string'
??_C@_0N@OKFAMOHD@acceleration?$AA@ db 'acceleration',0 ; DATA XREF: .rdata:_gTypeso
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 0A7Ch
		public ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
; public: static bool const std::tr1::integral_constant<bool, 0>::value
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	db 0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 0A80h
		public ?value@?$integral_constant@_N$00@tr1@std@@2_NB
; public: static bool const std::tr1::integral_constant<bool, 1>::value
?value@?$integral_constant@_N$00@tr1@std@@2_NB db 1
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A84h
		public ?value@?$integral_constant@I$0A@@tr1@std@@2IB
; public: static unsigned int const std::tr1::integral_constant<unsigned int, 0>::value
?value@?$integral_constant@I$0A@@tr1@std@@2IB dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A88h
		public ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
; public: static int const std::_Arithmetic_traits<bool>::_Rank
?_Rank@?$_Arithmetic_traits@_N@std@@2HB	dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A8Ch
		public ?_Rank@?$_Arithmetic_traits@D@std@@2HB
; public: static int const std::_Arithmetic_traits<char>::_Rank
?_Rank@?$_Arithmetic_traits@D@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A90h
		public ?_Rank@?$_Arithmetic_traits@C@std@@2HB
; public: static int const std::_Arithmetic_traits<signed char>::_Rank
?_Rank@?$_Arithmetic_traits@C@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A94h
		public ?_Rank@?$_Arithmetic_traits@E@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned char>::_Rank
?_Rank@?$_Arithmetic_traits@E@std@@2HB dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A98h
		public ?_Rank@?$_Arithmetic_traits@F@std@@2HB
; public: static int const std::_Arithmetic_traits<short>::_Rank
?_Rank@?$_Arithmetic_traits@F@std@@2HB dd 3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A9Ch
		public ?_Rank@?$_Arithmetic_traits@G@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned short>::_Rank
?_Rank@?$_Arithmetic_traits@G@std@@2HB dd 3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AA0h
		public ?_Rank@?$_Arithmetic_traits@H@std@@2HB
; public: static int const std::_Arithmetic_traits<int>::_Rank
?_Rank@?$_Arithmetic_traits@H@std@@2HB dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AA4h
		public ?_Rank@?$_Arithmetic_traits@I@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned int>::_Rank
?_Rank@?$_Arithmetic_traits@I@std@@2HB dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AA8h
		public ?_Rank@?$_Arithmetic_traits@J@std@@2HB
; public: static int const std::_Arithmetic_traits<long>::_Rank
?_Rank@?$_Arithmetic_traits@J@std@@2HB dd 5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AACh
		public ?_Rank@?$_Arithmetic_traits@K@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned long>::_Rank
?_Rank@?$_Arithmetic_traits@K@std@@2HB dd 5
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AB0h
		public ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
; public: static int const std::_Arithmetic_traits<__int64>::_Rank
?_Rank@?$_Arithmetic_traits@_J@std@@2HB	dd 6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AB4h
		public ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
; public: static int const std::_Arithmetic_traits<unsigned __int64>::_Rank
?_Rank@?$_Arithmetic_traits@_K@std@@2HB	dd 6
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AB8h
		public ?_Rank@?$_Arithmetic_traits@M@std@@2HB
; public: static int const std::_Arithmetic_traits<float>::_Rank
?_Rank@?$_Arithmetic_traits@M@std@@2HB dd 7
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ABCh
		public ?_Rank@?$_Arithmetic_traits@N@std@@2HB
; public: static int const std::_Arithmetic_traits<double>::_Rank
?_Rank@?$_Arithmetic_traits@N@std@@2HB dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AC0h
		public ?_Rank@?$_Arithmetic_traits@O@std@@2HB
; public: static int const std::_Arithmetic_traits<long	double>::_Rank
?_Rank@?$_Arithmetic_traits@O@std@@2HB dd 9
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AC4h
		public ?collate@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::collate
?collate@?$_Locbase@H@std@@2HB dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AC8h
		public ?ctype@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::ctype
?ctype@?$_Locbase@H@std@@2HB dd	2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ACCh
		public ?monetary@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::monetary
?monetary@?$_Locbase@H@std@@2HB	dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AD0h
		public ?numeric@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::numeric
?numeric@?$_Locbase@H@std@@2HB dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AD4h
		public ?time@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::time
?time@?$_Locbase@H@std@@2HB dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AD8h
		public ?messages@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::messages
?messages@?$_Locbase@H@std@@2HB	dd offset ??_C@_0M@PNABJEFL@pint?9metric?$AA@ ;	"pint-metric"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0ADCh
		public ?all@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::all
?all@?$_Locbase@H@std@@2HB dd offset unk_3F
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AE0h
		public ?none@?$_Locbase@H@std@@2HB
; public: static int const std::_Locbase<int>::none
?none@?$_Locbase@H@std@@2HB dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AE4h
		public ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::skipws
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AE8h
		public ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::unitbuf
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AECh
		public ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::uppercase
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AF0h
		public ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showbase
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AF4h
		public ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showpoint
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AF8h
		public ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::showpos
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ??_C@_0M@PNABJEFL@pint?9metric?$AA@	; "pint-metric"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AFCh
		public ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::left
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ??_C@_09IFCLMNDI@megaliter?$AA@ ; "megaliter"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B00h
		public ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::right
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B	dd offset ??_C@_0L@KJBEBBLL@cup?9metric?$AA@ ; `string'
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B04h
		public ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::internal
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset ??_C@_06OCOBIJKM@bushel?$AA@+4 ; "el"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B08h
		public ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::dec
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	??_C@_0L@MODKBPDG@horsepower?$AA@+8 ; "er"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B0Ch
		public ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::oct
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	??_C@_0L@EOCDICFM@nanosecond?$AA@+4 ; "second"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B10h
		public ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::hex
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	??_C@_03EEGJKLM@BYR?$AA@ ; `string'
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B14h
		public ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::scientific
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd	offset off_1000
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B18h
		public ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::fixed
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B	dd offset loc_1FFF+1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B1Ch
		public ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::hexfloat
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset loc_2FFD+3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B20h
		public ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::boolalpha
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset loc_3FFE+2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B24h
		public ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::_Stdio
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd 8000h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B28h
		public ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::adjustfield
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset	??_C@_0M@CNNPMNDL@hectopascal?$AA@ ; "hectopascal"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B2Ch
		public ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::basefield
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd offset off_E00
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B30h
		public ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
; public: static enum  std::_Iosb<int>::_Fmtflags const	std::_Iosb<int>::floatfield
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B dd	offset loc_2FFD+3
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B34h
		public ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::goodbit
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B dd 0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B38h
		public ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::eofbit
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B	dd 1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B3Ch
		public ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::failbit
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B40h
		public ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::badbit
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B	dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B44h
		public ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
; public: static enum  std::_Iosb<int>::_Iostate const std::_Iosb<int>::_Hardfail
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B48h
		public ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::in
?in@?$_Iosb@H@std@@2W4_Openmode@12@B dd	1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B4Ch
		public ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::out
?out@?$_Iosb@H@std@@2W4_Openmode@12@B dd 2
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B50h
		public ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::ate
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B dd 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B54h
		public ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::app
?app@?$_Iosb@H@std@@2W4_Openmode@12@B dd 8
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B58h
		public ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::trunc
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B	dd 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B5Ch
		public ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::_Nocreate
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B dd offset ??_C@_09IFCLMNDI@megaliter?$AA@ ;	"megaliter"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B60h
		public ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::_Noreplace
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B dd	offset ??_C@_0L@KJBEBBLL@cup?9metric?$AA@ ; `string'
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B64h
		public ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
; public: static enum  std::_Iosb<int>::_Openmode const	std::_Iosb<int>::binary
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B dd offset ??_C@_0M@PNABJEFL@pint?9metric?$AA@ ; "pint-metric"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B68h
		public ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::beg
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B6Ch
		public ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::cur
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	1
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0B70h
		public ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
; public: static enum  std::_Iosb<int>::_Seekdir const std::_Iosb<int>::end
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B dd	2
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
		assume cs:_bss
		;org 0B74h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
; char `public:	static void * __cdecl icu_56::MeasureUnit::getStaticClassID(void)'::`2'::classID
?classID@?1??getStaticClassID@MeasureUnit@icu_56@@SAPAXXZ@4DA db ?
					; DATA XREF: icu_56::MeasureUnit::getStaticClassID(void)+1Eo
		align 4
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 0B78h
; int gOffsets
_gOffsets	dd 0			; DATA XREF: icu_56::MeasureUnit::getAvailable(icu_56::MeasureUnit *,int,UErrorCode &)+82r
					; icu_56::MeasureUnit::getAvailable(char const *,icu_56::MeasureUnit *,int,UErrorCode &)+69r ...
; int dword_B7C
dword_B7C	dd 2			; DATA XREF: icu_56::MeasureUnit::getAvailable(icu_56::MeasureUnit *,int,UErrorCode &)+7Br
					; icu_56::MeasureUnit::getAvailable(char const *,icu_56::MeasureUnit *,int,UErrorCode &)+62r ...
		dd 7, 10h, 13h,	117h, 121h, 12Ch, 130h,	136h, 13Ah, 14Dh
		dd 14Eh, 159h, 15Fh, 164h, 165h, 169h, 16Dh, 185h
_gIndexes	dd 0			; DATA XREF: icu_56::MeasureUnit::getIndex(void)+29r
		dd 2, 7, 10h, 2	dup(13h), 1Dh, 28h, 2Ch, 32h, 36h, 49h
		dd 4Ah,	55h, 5Bh, 60h, 61h, 65h, 69h
off_C14		dd offset aUpMetric	; DATA XREF: icu_56::MeasureUnit::getIndexCount(void)+1Er
					; "up-metric"
_gTypes		dd offset ??_C@_0N@OKFAMOHD@acceleration?$AA@
					; DATA XREF: icu_56::MeasureUnit::getType(void)+29r
					; icu_56::MeasureUnit::getAvailable(char const *,icu_56::MeasureUnit *,int,UErrorCode &)+42o ...
					; "acceleration"
		dd offset ??_C@_05FECBCJJD@angle?$AA@ ;	"angle"
		dd offset ??_C@_04GOEDGNCF@area?$AA@ ; "area"
		dd offset ??_C@_0M@OJLAKFOH@consumption?$AA@ ; "consumption"
		dd offset ??_C@_08JLPCGLMH@currency?$AA@ ; "currency"
		dd offset ??_C@_07DFIBBPEI@digital?$AA@	; "digital"
		dd offset ??_C@_08LGBPINEC@duration?$AA@ ; "duration"
		dd offset ??_C@_08BLBKGCCL@electric?$AA@ ; "electric"
		dd offset ??_C@_06KKGCKCNJ@energy?$AA@ ; "energy"
		dd offset ??_C@_09KJGFCOBE@frequency?$AA@ ; "frequency"
		dd offset ??_C@_06IJDLPEM@length?$AA@ ;	"length"
		dd offset ??_C@_05OEPGNJB@light?$AA@ ; "light"
		dd offset ??_C@_04IJEANHEE@mass?$AA@ ; "mass"
		dd offset ??_C@_05PLIADJJL@power?$AA@ ;	"power"
		dd offset ??_C@_08POHEELCJ@pressure?$AA@ ; "pressure"
		dd offset ??_C@_0L@HOPBDCNE@proportion?$AA@ ; "proportion"
		dd offset ??_C@_05HJCMGBKF@speed?$AA@ ;	"speed"
		dd offset ??_C@_0M@GJEHHDCL@temperature?$AA@ ; "temperature"
		dd offset ??_C@_06EMCPHFGM@volume?$AA@ ; "volume"
		align 8
_gSubTypes	dd offset ??_C@_07LIHLFPDP@g?9force?$AA@
					; DATA XREF: icu_56::MeasureUnit::getSubtype(void)+36r
					; icu_56::MeasureUnit::initTime(char const *)+90o ...
					; "g-force"
		dd offset ??_C@_0BJ@KDKOIMLI@meter?9per?9second?9squared?$AA@ ;	"meter-per-second-squared"
		dd offset ??_C@_0L@EAICNPD@arc?9minute?$AA@ ; "arc-minute"
		dd offset ??_C@_0L@ILLFGOLG@arc?9second?$AA@ ; "arc-second"
		dd offset ??_C@_06PJOBIDPN@degree?$AA@ ; "degree"
		dd offset ??_C@_06ECDLLDEG@radian?$AA@ ; "radian"
		dd offset ??_C@_0L@GKPKOMAM@revolution?$AA@ ; "revolution"
		dd offset ??_C@_04PLODCNCO@acre?$AA@ ; "acre"
		dd offset ??_C@_07OAKHAJL@hectare?$AA@ ; "hectare"
		dd offset ??_C@_0BC@JGDMHKLF@square?9centimeter?$AA@ ; "square-centimeter"
		dd offset ??_C@_0M@ECAMIKIM@square?9foot?$AA@ ;	"square-foot"
		dd offset ??_C@_0M@JHINNOAB@square?9inch?$AA@ ;	"square-inch"
		dd offset ??_C@_0BB@COFCDAP@square?9kilometer?$AA@ ; "square-kilometer"
		dd offset ??_C@_0N@EDMOCJEO@square?9meter?$AA@ ; "square-meter"
		dd offset ??_C@_0M@EBCIHJAI@square?9mile?$AA@ ;	"square-mile"
		dd offset ??_C@_0M@BOFPNPJO@square?9yard?$AA@ ;	"square-yard"
		dd offset ??_C@_0BI@KFFNHCCO@liter?9per?9100kilometers?$AA@ ; "liter-per-100kilometers"
		dd offset ??_C@_0BE@NNBGALLP@liter?9per?9kilometer?$AA@	; "liter-per-kilometer"
		dd offset ??_C@_0BA@EJNNDDOD@mile?9per?9gallon?$AA@ ; "mile-per-gallon"
		dd offset ??_C@_03DADLGHPD@ADP?$AA@ ; `string'
		dd offset ??_C@_03BPFHNKJB@AED?$AA@ ; `string'
		dd offset ??_C@_03GAGGJAIN@AFA?$AA@ ; `string'
		dd offset ??_C@_03OHPOIMEC@AFN?$AA@ ; `string'
		dd offset ??_C@_03NIFPGLBG@ALL?$AA@ ; `string'
		dd offset ??_C@_03BBEEILCJ@AMD?$AA@ ; `string'
		dd offset ??_C@_03DICPGGLD@ANG?$AA@ ; `string'
		dd offset ??_C@_03GPLHKLAC@AOA?$AA@ ; `string'
		dd offset ??_C@_03OICPLHMN@AON?$AA@ ; `string'
		dd offset ??_C@_03OFIOKJA@AOR?$AA@ ; `string'
		dd offset ??_C@_03HLEJJLCB@ARA?$AA@ ; `string'
		dd offset ??_C@_03CIJALIDB@ARP?$AA@ ; `string'
		dd offset ??_C@_03DLNOLPC@ARS?$AA@ ; `string'
		dd offset ??_C@_03HDAJHEA@ATS?$AA@ ; `string'
		dd offset ??_C@_03DHBHJOB@AUD?$AA@ ; `string'
		dd offset ??_C@_03CLNIPOEM@AWG?$AA@ ; `string'
		dd offset ??_C@_03NLKJDLMM@AYM?$AA@ ; `string'
		dd offset ??_C@_03NJOPIFJF@AZM?$AA@ ; `string'
		dd offset ??_C@_03PCMCNGFG@AZN?$AA@ ; `string'
		dd offset ??_C@_03KOLNNKD@BAD?$AA@ ; `string'
		dd offset ??_C@_03NLCJGGOK@BAM?$AA@ ; `string'
		dd offset ??_C@_03IKNGDPK@BBD?$AA@ ; `string'
		dd offset ??_C@_03EGOCANBJ@BDT?$AA@ ; `string'
		dd offset ??_C@_03ECKDODLI@BEC?$AA@ ; `string'
		dd offset ??_C@_03DPNEBHPN@BEF?$AA@ ; `string'
		dd offset ??_C@_03MFDLPPHH@BEL?$AA@ ; `string'
		dd offset ??_C@_03MGLPCLBJ@BGL?$AA@ ; `string'
		dd offset ??_C@_03PEIJEJJL@BGN?$AA@ ; `string'
		dd offset ??_C@_03FDKOGCM@BHD?$AA@ ; `string'
		dd offset ??_C@_03DGMOOOJJ@BIF?$AA@ ; `string'
		dd offset ??_C@_03DPBCEMH@BMD?$AA@ ; `string'
		dd offset ??_C@_03BLHJKJO@BND?$AA@ ; `string'
		dd offset ??_C@_03FGCPFHCP@BOB?$AA@ ; `string'
		dd offset ??_C@_03HIIBIAHK@BOV?$AA@ ; `string'
		dd offset ??_C@_03FLMKFGEN@BRC?$AA@ ; `string'
		dd offset ??_C@_03NJAPBML@BRE?$AA@ ; `string'
		dd offset ??_C@_03NMFCEKIC@BRL?$AA@ ; `string'
		dd offset ??_C@_03OOGECIAA@BRN?$AA@ ; `string'
		dd offset ??_C@_03IBDHFFN@BRR?$AA@ ; `string'
		dd offset ??_C@_03BFEJKKLN@BSD?$AA@ ; `string'
		dd offset ??_C@_03OKOJFELC@BTN?$AA@ ; `string'
		dd offset ??_C@_03DMOONFDE@BWP?$AA@ ; `string'
		dd offset ??_C@_03EOIEIION@BYB?$AA@ ; `string'
		dd offset ??_C@_03EEGJKLM@BYR?$AA@ ; `string'
		dd offset ??_C@_03BKJIJBDC@BZD?$AA@ ; `string'
		dd offset ??_C@_03LCFHLKMG@CAD?$AA@ ; `string'
		dd offset ??_C@_03IGKKBKKP@CDF?$AA@ ; `string'
		dd offset ??_C@_03PCMHBHIO@CHC?$AA@ ; `string'
		dd offset ??_C@_03KEJNLAAI@CHE?$AA@ ; `string'
		dd offset ??_C@_03IPLAODML@CHF?$AA@ ; `string'
		dd offset ??_C@_03NMGJMANL@CHW?$AA@ ; `string'
		dd offset ??_C@_03IILJELBH@CLF?$AA@ ; `string'
		dd offset ??_C@_03JECBPOMA@CLP?$AA@ ; `string'
		dd offset ??_C@_03EGGHJBOH@CNY?$AA@ ; `string'
		dd offset ??_C@_03JGGHEAJJ@COP?$AA@ ; `string'
		dd offset ??_C@_03OLBALENM@COU?$AA@ ; `string'
		dd offset ??_C@_03ODHGDBCI@CRC?$AA@ ; `string'
		dd offset ??_C@_03KNPFMNNI@CSD?$AA@ ; `string'
		dd offset ??_C@_03CKGNNBBH@CSK?$AA@ ; `string'
		dd offset ??_C@_03OGDJCHKN@CUC?$AA@ ; `string'
		dd offset ??_C@_03IHNGGGDP@CUP?$AA@ ; `string'
		dd offset ??_C@_03LCCFDOHC@CVE?$AA@ ; `string'
		dd offset ??_C@_03IOMMJPFL@CYP?$AA@ ; `string'
		dd offset ??_C@_03CFLMOKJI@CZK?$AA@ ; `string'
		dd offset ??_C@_03PIIJPLNN@DDM?$AA@ ; `string'
		dd offset ??_C@_03PJELJBOK@DEM?$AA@ ; `string'
		dd offset ??_C@_03BBODAPBM@DJF?$AA@ ; `string'
		dd offset ??_C@_03KFIPBLGG@DKK?$AA@ ; `string'
		dd offset ??_C@_03LLAHICA@DOP?$AA@ ; `string'
		dd offset ??_C@_03DPPDMOOO@DZD?$AA@ ; `string'
		dd offset ??_C@_03JBDLLFOC@ECS?$AA@ ; `string'
		dd offset ??_C@_03OMEMEBKH@ECV?$AA@ ; `string'
		dd offset ??_C@_03BHKNFBAJ@EEK?$AA@ ; `string'
		dd offset ??_C@_03LNBPEOPN@EGP?$AA@ ; `string'
		dd offset ??_C@_03HDLDBALJ@ERN?$AA@ ; `string'
		dd offset ??_C@_03PFOJGGEB@ESA?$AA@ ; `string'
		dd offset ??_C@_03NOMEDFIC@ESB?$AA@ ; `string'
		dd offset ??_C@_03KGDAEFFB@ESP?$AA@ ; `string'
		dd offset ??_C@_03NLILCDAH@ETB?$AA@ ; `string'
		dd offset ??_C@_03JAILFLGB@EUR?$AA@ ; `string'
		dd offset ??_C@_03FKFIKAAF@FIM?$AA@ ; `string'
		dd offset ??_C@_03IJNMKFBF@FJD?$AA@ ; `string'
		dd offset ??_C@_03KGLABIHH@FKP?$AA@ ; `string'
off_E00		dd offset ??_C@_03KJNPDFFP@FRF?$AA@
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::basefieldo
					; `string'
		dd offset ??_C@_03BBNNEEJN@GBP?$AA@ ; `string'
		dd offset ??_C@_03LNKEJJIC@GEK?$AA@ ; `string'
		dd offset ??_C@_03PCOFAPEF@GEL?$AA@ ; `string'
		dd offset ??_C@_03HNKFIANJ@GHC?$AA@ ; `string'
		dd offset ??_C@_03BMEKMBEL@GHP?$AA@ ; `string'
		dd offset ??_C@_03DHGHJCII@GHS?$AA@ ; `string'
		dd offset ??_C@_03BNIIKLHM@GIP?$AA@ ; `string'
		dd offset ??_C@_03DECPNEPF@GMD?$AA@ ; `string'
		dd offset ??_C@_03EFPAICO@GNF?$AA@ ; `string'
		dd offset ??_C@_03DIAILPKA@GQE?$AA@ ; `string'
		dd offset ??_C@_03CDFFDALI@GRD?$AA@ ; `string'
		dd offset ??_C@_03BAGNKKBO@GTQ?$AA@ ; `string'
		dd offset ??_C@_03LDACFAG@GWP?$AA@ ; `string'
		dd offset ??_C@_03CPAANPFJ@GYD?$AA@ ; `string'
		dd offset ??_C@_03GIMBLIBB@HKD?$AA@ ; `string'
		dd offset ??_C@_03KGNDPAPC@HNL?$AA@ ; `string'
		dd offset ??_C@_03HLDGCAOO@HRD?$AA@ ; `string'
		dd offset ??_C@_03PMKODMCB@HRK?$AA@ ; `string'
		dd offset ??_C@_03FEJGAPJP@HTG?$AA@ ; `string'
		dd offset ??_C@_03EMEPFEOJ@HUF?$AA@ ; `string'
		dd offset ??_C@_03MHLJCNJO@IDR?$AA@ ; `string'
		dd offset ??_C@_03PEENCFCL@IEP?$AA@ ; `string'
		dd offset ??_C@_03NALBENGH@ILS?$AA@ ; `string'
		dd offset ??_C@_03MKCOKIEI@INR?$AA@ ; `string'
		dd offset ??_C@_03MBMMPJNC@IQD?$AA@ ; `string'
		dd offset ??_C@_03NPBCPCFM@IRR?$AA@ ; `string'
		dd offset ??_C@_03EFNADBHD@ISK?$AA@ ; `string'
		dd offset ??_C@_03PNOLBDB@ITL?$AA@ ; `string'
		dd offset ??_C@_03MGEFAMCI@JMD?$AA@ ; `string'
		dd offset ??_C@_03MFMBNIEG@JOD?$AA@ ; `string'
		dd offset ??_C@_03CNNHFABH@JPY?$AA@ ; `string'
		dd offset ??_C@_03HFGJLOGD@KES?$AA@ ; `string'
		dd offset ??_C@_03HGONGKAN@KGS?$AA@ ; `string'
		dd offset ??_C@_03GEKKBMHB@KHR?$AA@ ; `string'
		dd offset ??_C@_03EMMPAJMP@KMF?$AA@ ; `string'
		dd offset ??_C@_03LOIBKPM@KPW?$AA@ ; `string'
		dd offset ??_C@_03IGMMOJC@KRW?$AA@ ; `string'
		dd offset ??_C@_03GPEIENOL@KWD?$AA@ ; `string'
		dd offset ??_C@_03GFNGGAOB@KYD?$AA@ ; `string'
		dd offset ??_C@_03CNFCMMOJ@KZT?$AA@ ; `string'
		dd offset ??_C@_03GNKMLGFP@LAK?$AA@ ; `string'
		dd offset ??_C@_03MGNMMDJM@LBP?$AA@ ; `string'
		dd offset ??_C@_03PLDLJKJB@LKR?$AA@ ; `string'
		dd offset ??_C@_03PEFELHLJ@LRD?$AA@ ; `string'
		dd offset ??_C@_03DNEPFHIG@LSL?$AA@ ; `string'
		dd offset ??_C@_03DIAAEBAD@LTL?$AA@ ; `string'
		dd offset ??_C@_03LKBLNJFK@LTT?$AA@ ; `string'
		dd offset ??_C@_03LOFKDHPL@LUC?$AA@ ; `string'
		dd offset ??_C@_03MDCNMDLO@LUF?$AA@ ; `string'
		dd offset ??_C@_03DJMCCLDE@LUL?$AA@ ; `string'
		dd offset ??_C@_03DLIEJFGN@LVL?$AA@ ; `string'
		dd offset ??_C@_03OPMFKKLC@LVR?$AA@ ; `string'
		dd offset ??_C@_03PIABFIFI@LYD?$AA@ ; `string'
		dd offset ??_C@_03FCIIMNPF@MAD?$AA@ ; `string'
		dd offset ??_C@_03JMJKIFBG@MDL?$AA@ ; `string'
		dd offset ??_C@_03CLHCEFAC@MGA?$AA@ ; `string'
		dd offset ??_C@_03GEDDNDMF@MGF?$AA@ ; `string'
		dd offset ??_C@_03FPBPEICD@MKD?$AA@ ; `string'
		dd offset ??_C@_03GIGGDMCE@MLF?$AA@ ; `string'
		dd offset ??_C@_03NMAKCIFO@MMK?$AA@ ; `string'
		dd offset ??_C@_03BDBGJIJJ@MNT?$AA@ ; `string'
		dd offset ??_C@_03HGLIDHKK@MOP?$AA@ ; `string'
		dd offset ??_C@_03KPBMAJBH@MRO?$AA@ ; `string'
		dd offset ??_C@_03IALMCGGG@MTL?$AA@ ; `string'
		dd offset ??_C@_03FFDPHDIO@MUR?$AA@ ; `string'
		dd offset ??_C@_03FHHJMNNH@MVR?$AA@ ; `string'
		dd offset ??_C@_03MNLLAOPI@MWK?$AA@ ; `string'
		dd offset ??_C@_03LLJALNIA@MXN?$AA@ ; `string'
		dd offset ??_C@_03DJILCFNJ@MXV?$AA@ ; `string'
		dd offset ??_C@_03FMCFIKOK@MYR?$AA@ ; `string'
		dd offset ??_C@_03JDDJDKCN@MZM?$AA@ ; `string'
		dd offset ??_C@_03LIBEGJOO@MZN?$AA@ ; `string'
		dd offset ??_C@_03EADNGCBL@NAD?$AA@ ; `string'
		dd offset ??_C@_03LOFPPGCD@NGN?$AA@ ; `string'
		dd offset ??_C@_03KNNKOKGI@NIO?$AA@ ; `string'
		dd offset ??_C@_03GDMIKCIL@NLG?$AA@ ; `string'
		dd offset ??_C@_03MNDLFDNO@NOK?$AA@ ; `string'
		dd offset ??_C@_03EBEBBOIL@NPR?$AA@ ; `string'
		dd offset ??_C@_03FAEOCOIK@NZD?$AA@ ; `string'
		dd offset ??_C@_03ONADEJMN@OMR?$AA@ ; `string'
		dd offset ??_C@_03KGKBOFDB@PAB?$AA@ ; `string'
		dd offset ??_C@_03ECFMJECG@PEI?$AA@ ; `string'
		dd offset ??_C@_03NBNACOB@PEN?$AA@ ; `string'
		dd offset ??_C@_03PCHBGOPN@PES?$AA@ ; `string'
		dd offset ??_C@_03HDOOCCMK@PGK?$AA@ ; `string'
		dd offset ??_C@_03NBIEKOGN@PHP?$AA@ ; `string'
		dd offset ??_C@_03OBPEHCLG@PKR?$AA@ ; `string'
		dd offset ??_C@_03CMMDJGO@PLN?$AA@ ; `string'
		dd offset ??_C@_03CMGCOODL@PLZ?$AA@ ; `string'
		dd offset ??_C@_03PDANBCGN@PTE?$AA@ ; `string'
		dd offset ??_C@_03MJODODLM@PYG?$AA@ ; `string'
		dd offset ??_C@_03FENPJAAF@QAR?$AA@ ; `string'
		dd offset ??_C@_03JILFCNDO@ROL?$AA@ ; `string'
		dd offset ??_C@_03KKIDEPLM@RON?$AA@ ; `string'
		dd offset ??_C@_03EFFAPNCC@RSD?$AA@ ; `string'
		dd offset ??_C@_03BHIHCGBG@RUB?$AA@ ; `string'
		dd offset ??_C@_03FNEFDEEH@RUR?$AA@ ; `string'
		dd offset ??_C@_03HAGPDHHM@RWF?$AA@ ; `string'
		dd offset ??_C@_03PONGFIIO@SAR?$AA@ ; `string'
		dd offset ??_C@_03OAAIFDAA@SBD?$AA@ ; `string'
		dd offset ??_C@_03PNFCIMOA@SCR?$AA@ ; `string'
		dd offset ??_C@_03OEIFCPLC@SDD?$AA@ ; `string'
		dd offset ??_C@_03MPKIHMHB@SDG?$AA@ ; `string'
		dd offset ??_C@_03GCNPFJEK@SEK?$AA@ ; `string'
		dd offset ??_C@_03OGMDJBOL@SGD?$AA@ ; `string'
		dd offset ??_C@_03MDDBABID@SHP?$AA@ ; `string'
		dd offset ??_C@_03KGJPKOLA@SIT?$AA@ ; `string'
		dd offset ??_C@_03GIEBHEEA@SKK?$AA@ ; `string'
		dd offset ??_C@_03CCEPPEAC@SLL?$AA@ ; `string'
		dd offset ??_C@_03ONFDEEMF@SOS?$AA@ ; `string'
		dd offset ??_C@_03PMCOPAHA@SRD?$AA@ ; `string'
		dd offset ??_C@_03NHADKDLD@SRG?$AA@ ; `string'
		dd offset ??_C@_03NDECENBC@SSP?$AA@ ; `string'
		dd offset ??_C@_03PIKDIMMC@STD?$AA@ ; `string'
		dd offset ??_C@_03LEGGMOGL@SVC?$AA@ ; `string'
		dd offset ??_C@_03NONFMIME@SYP?$AA@ ; `string'
		dd offset ??_C@_03DKOECLMA@SZL?$AA@ ; `string'
		dd offset ??_C@_03CGBCEJOJ@THB?$AA@ ; `string'
		dd offset ??_C@_03GPFEIPNG@TJR?$AA@ ; `string'
		dd offset ??_C@_03HGEPLOJH@TJS?$AA@ ; `string'
		dd offset ??_C@_03KHEBJHMN@TMM?$AA@ ; `string'
		dd offset ??_C@_03DMEBDONF@TMT?$AA@ ; `string'
		dd offset ??_C@_03HEMFJCNN@TND?$AA@ ; `string'
		dd offset ??_C@_03FLKJCPLP@TOP?$AA@ ; `string'
		dd offset ??_C@_03HLGGCNOG@TPE?$AA@ ; `string'
		dd offset ??_C@_03KJCAECMB@TRL?$AA@ ; `string'
		dd offset ??_C@_03JOJFKENF@TRY?$AA@ ; `string'
off_1000	dd offset ??_C@_03GFHELEHL@TTD?$AA@
					; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::scientifico
					; `string'
		dd offset ??_C@_03GHDCAKCC@TWD?$AA@ ; `string'
		dd offset ??_C@_03GKGJBNOH@TZS?$AA@ ; `string'
		dd offset ??_C@_03GLJAPNIJ@UAH?$AA@ ; `string'
		dd offset ??_C@_03EALNKOEK@UAK?$AA@ ; `string'
		dd offset ??_C@_03CFNPJDGK@UGX?$AA@ ; `string'
		dd offset ??_C@_03NIIHMFJL@USD?$AA@ ; `string'
		dd offset ??_C@_03CCGICNBB@USN?$AA@ ; `string'
		dd offset ??_C@_03NNAEEBAN@USS?$AA@ ; `string'
		dd offset ??_C@_03GALODOAA@UYI?$AA@ ; `string'
		dd offset ??_C@_03IGMJGDFN@UYU?$AA@ ; `string'
		dd offset ??_C@_03NCNFHKIC@UZS?$AA@ ; `string'
		dd offset ??_C@_03IEMDBCDB@VEB?$AA@ ; `string'
		dd offset ??_C@_03OAKPNHDF@VEF?$AA@ ; `string'
		dd offset ??_C@_03NOMMFKFG@VND?$AA@ ; `string'
		dd offset ??_C@_03LGELGGBE@VUV?$AA@ ; `string'
		dd offset ??_C@_03DIEMBPEB@WST?$AA@ ; `string'
		dd offset ??_C@_03HHJAINK@XAF?$AA@ ; `string'
		dd offset ??_C@_03BOGCDJJL@XAG?$AA@ ; `string'
		dd offset ??_C@_03GGJGEJEI@XAU?$AA@ ; `string'
		dd offset ??_C@_03EKHOCAEE@XBA?$AA@ ; `string'
		dd offset ??_C@_03GBFDHDIH@XBB?$AA@ ; `string'
		dd offset ??_C@_03HIEIECMG@XBC?$AA@ ; `string'
		dd offset ??_C@_03DHAJNEAB@XBD?$AA@ ; `string'
		dd offset ??_C@_03DGMLLODG@XCD?$AA@ ; `string'
		dd offset ??_C@_03CPBMBNGE@XDR?$AA@ ; `string'
		dd offset ??_C@_03GBJPOBJE@XEU?$AA@ ; `string'
		dd offset ??_C@_03NOHCFNA@XOF?$AA@ ; `string'
		dd offset ??_C@_03CIKLKDBP@XPD?$AA@ ; `string'
		dd offset ??_C@_03BKJNMBJN@XPF?$AA@ ; `string'
		dd offset ??_C@_03GCGJLBEO@XPT?$AA@ ; `string'
		dd offset ??_C@_03HJDEDOFG@XSU?$AA@ ; `string'
		dd offset ??_C@_03CKCBIPFF@XTS?$AA@ ; `string'
		dd offset ??_C@_03FDBHJFLB@XUA?$AA@ ; `string'
		dd offset ??_C@_03MAMPKPPK@XXX?$AA@ ; `string'
		dd offset ??_C@_03ILDIMPNG@YDD?$AA@ ; `string'
		dd offset ??_C@_03JGGCBADG@YER?$AA@ ; `string'
		dd offset ??_C@_03EHBOLNNI@YUM?$AA@ ; `string'
		dd offset ??_C@_03GMDDOOBL@YUN?$AA@ ; `string'
		dd offset ??_C@_03FHJPCINL@ZAL?$AA@ ; `string'
		dd offset ??_C@_03IDNOBHAE@ZAR?$AA@ ; `string'
		dd offset ??_C@_03BBMEEHHI@ZMK?$AA@ ; `string'
		dd offset ??_C@_03PHLDBKCF@ZMW?$AA@ ; `string'
		dd offset ??_C@_03HLMJFHHA@ZRN?$AA@ ; `string'
		dd offset ??_C@_03FFGHIACF@ZRZ?$AA@ ; `string'
		dd offset ??_C@_03IHONHNBB@ZWD?$AA@ ; `string'
		dd offset ??_C@_03EPDEPHBJ@ZWL?$AA@ ; `string'
		dd offset ??_C@_03HNACJFJL@ZWN?$AA@ ; `string'
		dd offset ??_C@_03JLHFMIMG@ZWR?$AA@ ; `string'
		dd offset ??_C@_03EDMBFDDG@bit?$AA@ ; `string'
		dd offset ??_C@_04IHGKJMLH@byte?$AA@ ; "byte"
		dd offset ??_C@_07HCAEJCMI@gigabit?$AA@	; "gigabit"
		dd offset ??_C@_08NNFOIGGN@gigabyte?$AA@ ; "gigabyte"
		dd offset ??_C@_07PAFMMJCF@kilobit?$AA@	; "kilobit"
		dd offset ??_C@_08DGHEAPD@kilobyte?$AA@	; "kilobyte"
		dd offset ??_C@_07CEGEOEHE@megabit?$AA@	; "megabit"
		dd offset ??_C@_08BPNPBJLM@megabyte?$AA@ ; "megabyte"
		dd offset ??_C@_07BEILFNFM@terabit?$AA@	; "terabit"
		dd offset ??_C@_08CKFKFOPP@terabyte?$AA@ ; "terabyte"
		dd offset ??_C@_07NGPCOCIG@century?$AA@	; "century"
		dd offset ??_C@_03NNBHCDBP@day?$AA@ ; `string'
		dd offset ??_C@_04LMOJGCPE@hour?$AA@ ; "hour"
		dd offset ??_C@_0M@IPLGOMOC@microsecond?$AA@ ; "microsecond"
		dd offset ??_C@_0M@NMNACHAL@millisecond?$AA@ ; "millisecond"
		dd offset ??_C@_06JGJIJFNK@minute?$AA@ ; "minute"
		dd offset ??_C@_05MEBAADFH@month?$AA@ ;	"month"
		dd offset ??_C@_0L@EOCDICFM@nanosecond?$AA@ ; "nanosecond"
		dd offset ??_C@_06BJCFNGJP@second?$AA@ ; "second"
		dd offset ??_C@_04LGMCIIKL@week?$AA@ ; "week"
		dd offset ??_C@_04JFPLDHAO@year?$AA@ ; "year"
		dd offset ??_C@_06EBONLPHG@ampere?$AA@ ; "ampere"
		dd offset ??_C@_0M@IEBIEOOC@milliampere?$AA@ ; "milliampere"
		dd offset ??_C@_03CLGJEIME@ohm?$AA@ ; `string'
		dd offset ??_C@_04CGJEHEGO@volt?$AA@ ; "volt"
		dd offset ??_C@_07BDJGOIHI@calorie?$AA@	; "calorie"
		dd offset ??_C@_0M@CIEBNFDN@foodcalorie?$AA@ ; "foodcalorie"
		dd offset ??_C@_05PJJGGPPE@joule?$AA@ ;	"joule"
		dd offset ??_C@_0M@DHDJDLEO@kilocalorie?$AA@ ; "kilocalorie"
		dd offset ??_C@_09IIKDOHKB@kilojoule?$AA@ ; "kilojoule"
		dd offset ??_C@_0O@NLAFLNJH@kilowatt?9hour?$AA@	; "kilowatt-hour"
		dd offset ??_C@_09NKAKBNGB@gigahertz?$AA@ ; "gigahertz"
		dd offset ??_C@_05LMFGBCLB@hertz?$AA@ ;	"hertz"
		dd offset ??_C@_09MNGDJKOE@kilohertz?$AA@ ; "kilohertz"
		dd offset ??_C@_09CLBMHOLM@megahertz?$AA@ ; "megahertz"
		dd offset ??_C@_0BC@KIODCLHF@astronomical?9unit?$AA@ ; "astronomical-unit"
		dd offset ??_C@_0L@JKOFHMLJ@centimeter?$AA@ ; "centimeter"
		dd offset ??_C@_09MADHJIML@decimeter?$AA@ ; "decimeter"
		dd offset ??_C@_06CIEFIFLF@fathom?$AA@ ; "fathom"
		dd offset ??_C@_04EEDCFNLF@foot?$AA@ ; "foot"
		dd offset ??_C@_07CDJBLMLP@furlong?$AA@	; "furlong"
		dd offset ??_C@_04JBLDAJDI@inch?$AA@ ; "inch"
		dd offset ??_C@_09GNPIBHME@kilometer?$AA@ ; "kilometer"
		dd offset ??_C@_0L@NHHLOPAJ@light?9year?$AA@ ; "light-year"
		dd offset ??_C@_05BMMNJPJB@meter?$AA@ ;	"meter"
		dd offset ??_C@_0L@IGFPGMNL@micrometer?$AA@ ; "micrometer"
		dd offset ??_C@_04EHBGKODB@mile?$AA@ ; "mile"
		dd offset ??_C@_0BC@FJMIFAFA@mile?9scandinavian?$AA@ ; "mile-scandinavian"
		dd offset ??_C@_0L@FDAHLFCJ@millimeter?$AA@ ; "millimeter"
		dd offset ??_C@_09HCCMHJOF@nanometer?$AA@ ; "nanometer"
		dd offset ??_C@_0O@JFMHCMIL@nautical?9mile?$AA@	; "nautical-mile"
		dd offset ??_C@_06LHAHKBCH@parsec?$AA@ ; "parsec"
		dd offset ??_C@_09GLJGHPHH@picometer?$AA@ ; "picometer"
		dd offset ??_C@_04BIGBAIKH@yard?$AA@ ; "yard"
		dd offset ??_C@_03BKJHDBBN@lux?$AA@ ; `string'
		dd offset ??_C@_05KHHPAIKH@carat?$AA@ ;	"carat"
		dd offset ??_C@_04EKLPHPFF@gram?$AA@ ; "gram"
		dd offset ??_C@_08MOLCKDBB@kilogram?$AA@ ; "kilogram"
		dd offset ??_C@_0L@IOHLDMKE@metric?9ton?$AA@ ; "metric-ton"
		dd offset ??_C@_09GHPPIDNE@microgram?$AA@ ; "microgram"
		dd offset ??_C@_09FPGHJFPG@milligram?$AA@ ; "milligram"
		dd offset ??_C@_05PEPOGMH@ounce?$AA@ ; "ounce"
		dd offset ??_C@_0L@JPFPIKEP@ounce?9troy?$AA@ ; "ounce-troy"
		dd offset ??_C@_05EBEEKLCG@pound?$AA@ ;	"pound"
		dd offset ??_C@_05PGFPPJKB@stone?$AA@ ;	"stone"
		dd offset ??_C@_03ICBDNNBM@ton?$AA@ ; `string'
		dd offset ??_C@_08LDCKMCPP@gigawatt?$AA@ ; "gigawatt"
		dd offset ??_C@_0L@MODKBPDG@horsepower?$AA@ ; "horsepower"
		dd offset ??_C@_08GNBDAEGB@kilowatt?$AA@ ; "kilowatt"
		dd offset ??_C@_08HBKLFNCO@megawatt?$AA@ ; "megawatt"
		dd offset ??_C@_09PMMGDCIG@milliwatt?$AA@ ; "milliwatt"
		dd offset ??_C@_04OJBONICF@watt?$AA@ ; "watt"
		dd offset ??_C@_0M@CNNPMNDL@hectopascal?$AA@ ; "hectopascal"
		dd offset ??_C@_07JHPCPNNN@inch?9hg?$AA@ ; "inch-hg"
		dd offset ??_C@_08BJEPEPFF@millibar?$AA@ ; "millibar"
		dd offset ??_C@_0BG@DPECJILI@millimeter?9of?9mercury?$AA@ ; "millimeter-of-mercury"
		dd offset ??_C@_0BG@BKCACION@pound?9per?9square?9inch?$AA@ ; "pound-per-square-inch"
		dd offset ??_C@_05ELCMIKMK@karat?$AA@ ;	"karat"
		dd offset ??_C@_0BD@OHFEFKNK@kilometer?9per?9hour?$AA@ ; "kilometer-per-hour"
		dd offset ??_C@_04EBOPOGB@knot?$AA@ ; "knot"
		dd offset ??_C@_0BB@MCEHBAJA@meter?9per?9second?$AA@ ; "meter-per-second"
		dd offset ??_C@_0O@HCEOKJJ@mile?9per?9hour?$AA@	; "mile-per-hour"
		dd offset ??_C@_07MMHFIJLF@celsius?$AA@	; "celsius"
		dd offset ??_C@_0L@FJGNLCPP@fahrenheit?$AA@ ; "fahrenheit"
		dd offset ??_C@_07DCLBNMLN@generic?$AA@	; "generic"
		dd offset ??_C@_06BNPFHFPN@kelvin?$AA@ ; "kelvin"
		dd offset ??_C@_09LGJIPDLG@acre?9foot?$AA@ ; "acre-foot"
		dd offset ??_C@_06OCOBIJKM@bushel?$AA@ ; "bushel"
		dd offset ??_C@_0L@JEEJECBN@centiliter?$AA@ ; "centiliter"
		dd offset ??_C@_0BB@EAFJLGPA@cubic?9centimeter?$AA@ ; "cubic-centimeter"
		dd offset ??_C@_0L@IMJMPHID@cubic?9foot?$AA@ ; "cubic-foot"
		dd offset ??_C@_0L@FJBNKDAO@cubic?9inch?$AA@ ; "cubic-inch"
		dd offset ??_C@_0BA@LBIKIOKP@cubic?9kilometer?$AA@ ; "cubic-kilometer"
		dd offset ??_C@_0M@NDLPKEKC@cubic?9meter?$AA@ ;	"cubic-meter"
		dd offset ??_C@_0L@IPLIAEAH@cubic?9mile?$AA@ ; "cubic-mile"
		dd offset ??_C@_0L@NAMPKCJB@cubic?9yard?$AA@ ; "cubic-yard"
		dd offset ??_C@_03IKCNKLED@cup?$AA@ ; `string'
		dd offset ??_C@_0L@KJBEBBLL@cup?9metric?$AA@ ; `string'
		dd offset ??_C@_09MOJLKGGP@deciliter?$AA@ ; "deciliter"
		dd offset ??_C@_0M@ECJCMDCC@fluid?9ounce?$AA@ ;	"fluid-ounce"
		dd offset ??_C@_06HKONJGNG@gallon?$AA@ ; "gallon"
		dd offset ??_C@_0L@CFPHBHDE@hectoliter?$AA@ ; "hectoliter"
		dd offset ??_C@_05BCGBKBDF@liter?$AA@ ;	"liter"
		dd offset ??_C@_09IFCLMNDI@megaliter?$AA@ ; "megaliter"
		dd offset ??_C@_0L@FNKLILIN@milliliter?$AA@ ; "milliliter"
		dd offset ??_C@_04IPDLAKHM@pint?$AA@ ; "pint"
		dd offset ??_C@_0M@PNABJEFL@pint?9metric?$AA@ ;	"pint-metric"
		dd offset ??_C@_05CAMNHPCN@quart?$AA@ ;	"quart"
		dd offset ??_C@_0L@GHCNMNHJ@tablespoon?$AA@ ; "tablespoon"
		dd offset ??_C@_08KOKHCCMH@teaspoon?$AA@ ; "teaspoon"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 127Ch
_unitPerUnitToSingleUnit dd offset ??_C@_0O@HCEOKJJ@mile?9per?9hour?$AA@+0Dh
					; DATA XREF: icu_56::MeasureUnit::resolveUnitPerUnit(icu_56::MeasureUnit const &,icu_56::MeasureUnit const &)+81o
					; ""
		dd offset ??_C@_0L@FJGNLCPP@fahrenheit?$AA@+3 ;	"renheit"
		dd 10h,	0
		dd offset unk_143
		dd offset ??_C@_0L@FJGNLCPP@fahrenheit?$AA@+9 ;	"t"
		dd 10h,	2, 145h, 123h, 10h, 3, 145h, 17Bh, 3, 2, 156h
		dd 0Bh,	0Eh, 4,	17Dh, 141h, 3, 1
_data		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 12DCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int)
		public ??2@YAPAXI@Z
??2@YAPAXI@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??2@YAPAXI@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 1314h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 1318h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 131Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX@Z
??3@YAXPAX@Z	proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax],	5
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??3@YAXPAX@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1350h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::MeasureUnit::MeasureUnit(icu_56::MeasureUnit *__hidden this)
		public ??0MeasureUnit@icu_56@@QAE@XZ
??0MeasureUnit@icu_56@@QAE@XZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@XZ ; icu_56::UObject::UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7MeasureUnit@icu_56@@6B@ ; const icu_56::MeasureUnit::`vftable'
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+4], 0
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax+8], 0
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0MeasureUnit@icu_56@@QAE@XZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 13C0h
		dd offset ??_R4MeasureUnit@icu_56@@6B@ ; const icu_56::MeasureUnit::`RTTI Complete Object Locator'
;
; Exported entry
;
		public ??_7MeasureUnit@icu_56@@6B@
; const	icu_56::MeasureUnit::`vftable'
??_7MeasureUnit@icu_56@@6B@ dd offset ??_EMeasureUnit@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::MeasureUnit::MeasureUnit(void)+38o
					; icu_56::MeasureUnit::MeasureUnit(int,int)+38o ...
					; icu_56::MeasureUnit::`vector deleting	destructor'(uint)
		dd offset ?getDynamicClassID@MeasureUnit@icu_56@@UBEPAXXZ ; icu_56::MeasureUnit::getDynamicClassID(void)
		dd offset ?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ	; icu_56::MeasureUnit::clone(void)
		dd offset ??8MeasureUnit@icu_56@@UBECABVUObject@1@@Z ; icu_56::MeasureUnit::operator==(icu_56::UObject const &)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 13D4h
		public ??_R4MeasureUnit@icu_56@@6B@
; const	icu_56::MeasureUnit::`RTTI Complete Object Locator'
??_R4MeasureUnit@icu_56@@6B@ dd	3 dup(0) ; DATA	XREF: .rdata:000013C0o
		dd offset ??_R0?AVMeasureUnit@icu_56@@@8 ; icu_56::MeasureUnit `RTTI Type Descriptor'
		dd offset ??_R3MeasureUnit@icu_56@@8 ; icu_56::MeasureUnit::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 13E8h
		public ??_R0?AVMeasureUnit@icu_56@@@8
; class	icu_56::MeasureUnit `RTTI Type Descriptor'
??_R0?AVMeasureUnit@icu_56@@@8 dd offset ??_7type_info@@6B@ ; DATA XREF: .rdata$r:000013E0o
					; .rdata$r:icu_56::MeasureUnit::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avmeasureuni	db '.?AVMeasureUnit@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 140Ch
		public ??_R3MeasureUnit@icu_56@@8
; icu_56::MeasureUnit::`RTTI Class Hierarchy Descriptor'
??_R3MeasureUnit@icu_56@@8 dd 2	dup(0)	; DATA XREF: .rdata$r:000013E4o
					; .rdata$r:00001444o
		dd 3
		dd offset ??_R2MeasureUnit@icu_56@@8 ; icu_56::MeasureUnit::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 141Ch
		public ??_R2MeasureUnit@icu_56@@8
; icu_56::MeasureUnit::`RTTI Base Class	Array'
??_R2MeasureUnit@icu_56@@8 dd offset ??_R1A@?0A@EA@MeasureUnit@icu_56@@8
					; DATA XREF: .rdata$r:00001418o
					; icu_56::MeasureUnit::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 142Ch
		public ??_R1A@?0A@EA@MeasureUnit@icu_56@@8
; icu_56::MeasureUnit::`RTTI Base Class	Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@MeasureUnit@icu_56@@8 dd offset ??_R0?AVMeasureUnit@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::MeasureUnit::`RTTI Base Class Array'o
					; icu_56::MeasureUnit `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ??_C@_09IFCLMNDI@megaliter?$AA@ ; "megaliter"
		dd offset ??_R3MeasureUnit@icu_56@@8 ; icu_56::MeasureUnit::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1448h
		public ??_R1A@?0A@EA@UObject@icu_56@@8
; icu_56::UObject::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UObject@icu_56@@8	dd offset ??_R0?AVUObject@icu_56@@@8
					; DATA XREF: .rdata$r:00001420o
					; .rdata$r:icu_56::UObject::`RTTI Base Class Array'o ...
					; icu_56::UObject `RTTI	Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset ??_C@_09IFCLMNDI@megaliter?$AA@ ; "megaliter"
		dd offset ??_R3UObject@icu_56@@8 ; icu_56::UObject::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 1464h
		public ??_R0?AVUObject@icu_56@@@8
; class	icu_56::UObject	`RTTI Type Descriptor'
??_R0?AVUObject@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UObject::`RTTI Base Class	Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avuobject@ic	db '.?AVUObject@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1484h
		public ??_R3UObject@icu_56@@8
; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
??_R3UObject@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00001460o
		dd 2
		dd offset ??_R2UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1494h
		public ??_R2UObject@icu_56@@8
; icu_56::UObject::`RTTI Base Class Array'
??_R2UObject@icu_56@@8 dd offset ??_R1A@?0A@EA@UObject@icu_56@@8
					; DATA XREF: .rdata$r:00001490o
					; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 14A0h
		public ??_R13?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@UMemory@icu_56@@8 dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:00001424o
					; .rdata$r:00001498o ...
					; icu_56::UMemory `RTTI	Type Descriptor'
		align 8
		dd 4, 0FFFFFFFFh, 0
		dd offset ??_C@_09IFCLMNDI@megaliter?$AA@ ; "megaliter"
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 14BCh
		public ??_R0?AVUMemory@icu_56@@@8
; class	icu_56::UMemory	`RTTI Type Descriptor'
??_R0?AVUMemory@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Descriptor at (4,-1,0,64)'o
					; .rdata$r:icu_56::UMemory::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avumemory@ic	db '.?AVUMemory@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 14DCh
		public ??_R3UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
??_R3UMemory@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:000014B8o
					; .rdata$r:0000150Co
		dd 1
		dd offset ??_R2UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 14ECh
		public ??_R2UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Array'
??_R2UMemory@icu_56@@8 dd offset ??_R1A@?0A@EA@UMemory@icu_56@@8
					; DATA XREF: .rdata$r:000014E8o
					; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 14F4h
		public ??_R1A@?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UMemory@icu_56@@8	dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Array'o
					; icu_56::UMemory `RTTI	Type Descriptor'
		align 10h
		dd 0FFFFFFFFh, 0
		dd offset ??_C@_09IFCLMNDI@megaliter?$AA@ ; "megaliter"
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1510h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: signed char __thiscall icu_56::MeasureUnit::operator!=(class icu_56::UObject const &)const
		public ??9MeasureUnit@icu_56@@QBECABVUObject@1@@Z
??9MeasureUnit@icu_56@@QBECABVUObject@1@@Z proc	near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+0Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		movsx	ecx, al
		test	ecx, ecx
		setz	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??9MeasureUnit@icu_56@@QBECABVUObject@1@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 156Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::MeasureUnit::MeasureUnit(icu_56::MeasureUnit *this,	int, int)
		public ??0MeasureUnit@icu_56@@AAE@HH@Z
??0MeasureUnit@icu_56@@AAE@HH@Z	proc near
					; CODE XREF: icu_56::MeasureUnit::resolveUnitPerUnit(icu_56::MeasureUnit const &,icu_56::MeasureUnit const &)+120p
					; icu_56::MeasureUnit::create(int,int,UErrorCode &)+8Ep

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@XZ ; icu_56::UObject::UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7MeasureUnit@icu_56@@6B@ ; const icu_56::MeasureUnit::`vftable'
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+4], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_4]
		mov	[eax+8], ecx
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax+0Ch], 0
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??0MeasureUnit@icu_56@@AAE@HH@Z	endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 15DCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::MeasureUnit::`scalar deleting destructor'(unsigned int)
		public ??_GMeasureUnit@icu_56@@UAEPAXI@Z
??_GMeasureUnit@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1MeasureUnit@icu_56@@UAE@XZ ;	icu_56::MeasureUnit::~MeasureUnit(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_1625
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1625:				; CODE XREF: icu_56::MeasureUnit::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GMeasureUnit@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1640h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::MeasureUnit::`vector deleting destructor'(unsigned int)
		public ??_EMeasureUnit@icu_56@@UAEPAXI@Z
??_EMeasureUnit@icu_56@@UAEPAXI@Z proc near
					; DATA XREF: .rdata:const icu_56::MeasureUnit::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		and	eax, 2
		jz	short loc_16AB
		push	offset ??1MeasureUnit@icu_56@@UAE@XZ ; icu_56::MeasureUnit::~MeasureUnit(void)
		mov	eax, [ebp+var_8]
		mov	ecx, [eax-4]
		push	ecx
		push	10h
		mov	edx, [ebp+var_8]
		push	edx
		call	??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_16A3
		mov	eax, [ebp+var_8]
		sub	eax, 4
		mov	esi, esp
		push	eax		; void *
		call	dword ptr ds:__imp_??_VUMemory@icu_56@@SAXPAX@Z	; icu_56::UMemory::operator delete[](void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_16A3:				; CODE XREF: icu_56::MeasureUnit::`vector deleting destructor'(uint)+48j
		mov	eax, [ebp+var_8]
		sub	eax, 4
		jmp	short loc_16D4
; ---------------------------------------------------------------------------

loc_16AB:				; CODE XREF: icu_56::MeasureUnit::`vector deleting destructor'(uint)+29j
		mov	ecx, [ebp+var_8] ; this
		call	??1MeasureUnit@icu_56@@UAE@XZ ;	icu_56::MeasureUnit::~MeasureUnit(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_16D1
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_16D1:				; CODE XREF: icu_56::MeasureUnit::`vector deleting destructor'(uint)+79j
		mov	eax, [ebp+var_8]

loc_16D4:				; CODE XREF: icu_56::MeasureUnit::`vector deleting destructor'(uint)+69j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_EMeasureUnit@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 16ECh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	icu_56::MeasureUnit::getStaticClassID()
		public ?getStaticClassID@MeasureUnit@icu_56@@SAPAXXZ
?getStaticClassID@MeasureUnit@icu_56@@SAPAXXZ proc near
					; CODE XREF: icu_56::MeasureUnit::getDynamicClassID(void)+23p

var_C0		= byte ptr -0C0h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, offset ?classID@?1??getStaticClassID@MeasureUnit@icu_56@@SAPAXXZ@4DA ; char `icu_56::MeasureUnit::getStaticClassID(void)'::`2'::classID
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getStaticClassID@MeasureUnit@icu_56@@SAPAXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1718h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__thiscall icu_56::MeasureUnit::getDynamicClassID(icu_56::MeasureUnit *__hidden	this)
		public ?getDynamicClassID@MeasureUnit@icu_56@@UBEPAXXZ
?getDynamicClassID@MeasureUnit@icu_56@@UBEPAXXZ	proc near ; DATA XREF: .rdata:000013C8o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		call	?getStaticClassID@MeasureUnit@icu_56@@SAPAXXZ ;	icu_56::MeasureUnit::getStaticClassID(void)
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?getDynamicClassID@MeasureUnit@icu_56@@UBEPAXXZ	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1754h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createGForce(enum UErrorCode	*)
		public ?createGForce@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createGForce@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0		; int
		push	0		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createGForce@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1798h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMeterPerSecondSquared(enum UErrorCode *)
		public ?createMeterPerSecondSquared@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMeterPerSecondSquared@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	1		; int
		push	0		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMeterPerSecondSquared@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 17DCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createArcMinute(enum	UErrorCode *)
		public ?createArcMinute@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createArcMinute@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0		; int
		push	1		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createArcMinute@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1820h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createArcSecond(enum	UErrorCode *)
		public ?createArcSecond@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createArcSecond@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	1		; int
		push	1		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createArcSecond@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1864h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createDegree(enum UErrorCode	*)
		public ?createDegree@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createDegree@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	2		; int
		push	1		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createDegree@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 18A8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createRadian(enum UErrorCode	*)
		public ?createRadian@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createRadian@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	3		; int
		push	1		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createRadian@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 18ECh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createRevolutionAngle(enum UErrorCode *)
		public ?createRevolutionAngle@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createRevolutionAngle@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	4		; int
		push	1		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createRevolutionAngle@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1930h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createAcre(enum UErrorCode *)
		public ?createAcre@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createAcre@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0		; int
		push	2		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createAcre@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1974h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createHectare(enum UErrorCode *)
		public ?createHectare@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createHectare@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	1		; int
		push	2		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createHectare@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 19B8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createSquareCentimeter(enum UErrorCode *)
		public ?createSquareCentimeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createSquareCentimeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	2		; int
		push	2		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createSquareCentimeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 19FCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createSquareFoot(enum UErrorCode *)
		public ?createSquareFoot@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createSquareFoot@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	3		; int
		push	2		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createSquareFoot@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1A40h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createSquareInch(enum UErrorCode *)
		public ?createSquareInch@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createSquareInch@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	4		; int
		push	2		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createSquareInch@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1A84h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createSquareKilometer(enum UErrorCode *)
		public ?createSquareKilometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createSquareKilometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	5		; int
		push	2		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createSquareKilometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1AC8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createSquareMeter(enum UErrorCode *)
		public ?createSquareMeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createSquareMeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	6		; int
		push	2		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createSquareMeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1B0Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createSquareMile(enum UErrorCode *)
		public ?createSquareMile@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createSquareMile@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	7		; int
		push	2		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createSquareMile@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1B50h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createSquareYard(enum UErrorCode *)
		public ?createSquareYard@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createSquareYard@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	8		; int
		push	2		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createSquareYard@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1B94h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createLiterPer100Kilometers(enum UErrorCode *)
		public ?createLiterPer100Kilometers@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createLiterPer100Kilometers@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0		; int
		push	3		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createLiterPer100Kilometers@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1BD8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createLiterPerKilometer(enum	UErrorCode *)
		public ?createLiterPerKilometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createLiterPerKilometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	1		; int
		push	3		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createLiterPerKilometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1C1Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMilePerGallon(enum UErrorCode *)
		public ?createMilePerGallon@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMilePerGallon@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	2		; int
		push	3		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMilePerGallon@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1C60h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createBit(enum UErrorCode *)
		public ?createBit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createBit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0		; int
		push	5		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createBit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1CA4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createByte(enum UErrorCode *)
		public ?createByte@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createByte@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	1		; int
		push	5		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createByte@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1CE8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createGigabit(enum UErrorCode *)
		public ?createGigabit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createGigabit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	2		; int
		push	5		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createGigabit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1D2Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createGigabyte(enum UErrorCode *)
		public ?createGigabyte@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createGigabyte@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	3		; int
		push	5		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createGigabyte@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1D70h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createKilobit(enum UErrorCode *)
		public ?createKilobit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createKilobit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	4		; int
		push	5		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createKilobit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1DB4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createKilobyte(enum UErrorCode *)
		public ?createKilobyte@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createKilobyte@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	5		; int
		push	5		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createKilobyte@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1DF8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMegabit(enum UErrorCode *)
		public ?createMegabit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMegabit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	6		; int
		push	5		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMegabit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1E3Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMegabyte(enum UErrorCode *)
		public ?createMegabyte@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMegabyte@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	7		; int
		push	5		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMegabyte@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1E80h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createTerabit(enum UErrorCode *)
		public ?createTerabit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createTerabit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	8		; int
		push	5		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createTerabit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1EC4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createTerabyte(enum UErrorCode *)
		public ?createTerabyte@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createTerabyte@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	9		; int
		push	5		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createTerabyte@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1F08h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createCentury(enum UErrorCode *)
		public ?createCentury@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createCentury@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0		; int
		push	6		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createCentury@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1F4Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createDay(enum UErrorCode *)
		public ?createDay@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createDay@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	1		; int
		push	6		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createDay@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1F90h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createHour(enum UErrorCode *)
		public ?createHour@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createHour@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	2		; int
		push	6		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createHour@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1FD4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMicrosecond(enum UErrorCode *)
		public ?createMicrosecond@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMicrosecond@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	3		; int
		push	6		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)

loc_1FFF:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::fixedo
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMicrosecond@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2018h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMillisecond(enum UErrorCode *)
		public ?createMillisecond@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMillisecond@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	4		; int
		push	6		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMillisecond@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 205Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMinute(enum UErrorCode	*)
		public ?createMinute@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMinute@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	5		; int
		push	6		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMinute@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 20A0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMonth(enum UErrorCode *)
		public ?createMonth@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMonth@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	6		; int
		push	6		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMonth@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 20E4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createNanosecond(enum UErrorCode *)
		public ?createNanosecond@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createNanosecond@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	7		; int
		push	6		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createNanosecond@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2128h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createSecond(enum UErrorCode	*)
		public ?createSecond@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createSecond@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	8		; int
		push	6		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createSecond@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 216Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createWeek(enum UErrorCode *)
		public ?createWeek@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createWeek@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	9		; int
		push	6		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createWeek@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 21B0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createYear(enum UErrorCode *)
		public ?createYear@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createYear@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0Ah		; int
		push	6		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createYear@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 21F4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createAmpere(enum UErrorCode	*)
		public ?createAmpere@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createAmpere@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0		; int
		push	7		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createAmpere@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2238h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMilliampere(enum UErrorCode *)
		public ?createMilliampere@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMilliampere@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	1		; int
		push	7		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMilliampere@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 227Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createOhm(enum UErrorCode *)
		public ?createOhm@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createOhm@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	2		; int
		push	7		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createOhm@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 22C0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createVolt(enum UErrorCode *)
		public ?createVolt@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createVolt@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	3		; int
		push	7		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createVolt@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2304h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createCalorie(enum UErrorCode *)
		public ?createCalorie@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createCalorie@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0		; int
		push	8		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createCalorie@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2348h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createFoodcalorie(enum UErrorCode *)
		public ?createFoodcalorie@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createFoodcalorie@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	1		; int
		push	8		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createFoodcalorie@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 238Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createJoule(enum UErrorCode *)
		public ?createJoule@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createJoule@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	2		; int
		push	8		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createJoule@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 23D0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createKilocalorie(enum UErrorCode *)
		public ?createKilocalorie@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createKilocalorie@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	3		; int
		push	8		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createKilocalorie@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2414h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createKilojoule(enum	UErrorCode *)
		public ?createKilojoule@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createKilojoule@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	4		; int
		push	8		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createKilojoule@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2458h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createKilowattHour(enum UErrorCode *)
		public ?createKilowattHour@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createKilowattHour@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	5		; int
		push	8		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createKilowattHour@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 249Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createGigahertz(enum	UErrorCode *)
		public ?createGigahertz@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createGigahertz@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0		; int
		push	9		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createGigahertz@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 24E0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createHertz(enum UErrorCode *)
		public ?createHertz@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createHertz@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	1		; int
		push	9		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createHertz@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2524h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createKilohertz(enum	UErrorCode *)
		public ?createKilohertz@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createKilohertz@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	2		; int
		push	9		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createKilohertz@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2568h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMegahertz(enum	UErrorCode *)
		public ?createMegahertz@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMegahertz@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	3		; int
		push	9		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMegahertz@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 25ACh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createAstronomicalUnit(enum UErrorCode *)
		public ?createAstronomicalUnit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createAstronomicalUnit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0		; int
		push	0Ah		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createAstronomicalUnit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 25F0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createCentimeter(enum UErrorCode *)
		public ?createCentimeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createCentimeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	1		; int
		push	0Ah		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createCentimeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2634h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createDecimeter(enum	UErrorCode *)
		public ?createDecimeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createDecimeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	2		; int
		push	0Ah		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createDecimeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2678h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createFathom(enum UErrorCode	*)
		public ?createFathom@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createFathom@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	3		; int
		push	0Ah		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createFathom@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 26BCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createFoot(enum UErrorCode *)
		public ?createFoot@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createFoot@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	4		; int
		push	0Ah		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createFoot@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2700h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createFurlong(enum UErrorCode *)
		public ?createFurlong@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createFurlong@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	5		; int
		push	0Ah		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createFurlong@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2744h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createInch(enum UErrorCode *)
		public ?createInch@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createInch@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	6		; int
		push	0Ah		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createInch@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2788h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createKilometer(enum	UErrorCode *)
		public ?createKilometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createKilometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	7		; int
		push	0Ah		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createKilometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 27CCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createLightYear(enum	UErrorCode *)
		public ?createLightYear@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createLightYear@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	8		; int
		push	0Ah		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createLightYear@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2810h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMeter(enum UErrorCode *)
		public ?createMeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	9		; int
		push	0Ah		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2854h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMicrometer(enum UErrorCode *)
		public ?createMicrometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMicrometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0Ah		; int
		push	0Ah		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMicrometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2898h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMile(enum UErrorCode *)
		public ?createMile@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMile@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0Bh		; int
		push	0Ah		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMile@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 28DCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMileScandinavian(enum UErrorCode *)
		public ?createMileScandinavian@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMileScandinavian@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0Ch		; int
		push	0Ah		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMileScandinavian@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2920h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMillimeter(enum UErrorCode *)
		public ?createMillimeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMillimeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0Dh		; int
		push	0Ah		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMillimeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2964h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createNanometer(enum	UErrorCode *)
		public ?createNanometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createNanometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0Eh		; int
		push	0Ah		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createNanometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 29A8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createNauticalMile(enum UErrorCode *)
		public ?createNauticalMile@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createNauticalMile@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0Fh		; int
		push	0Ah		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createNauticalMile@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 29ECh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createParsec(enum UErrorCode	*)
		public ?createParsec@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createParsec@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	10h		; int
		push	0Ah		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createParsec@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2A30h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createPicometer(enum	UErrorCode *)
		public ?createPicometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createPicometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	11h		; int
		push	0Ah		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createPicometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2A74h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createYard(enum UErrorCode *)
		public ?createYard@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createYard@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	12h		; int
		push	0Ah		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createYard@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2AB8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createLux(enum UErrorCode *)
		public ?createLux@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createLux@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0		; int
		push	0Bh		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createLux@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2AFCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createCarat(enum UErrorCode *)
		public ?createCarat@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createCarat@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0		; int
		push	0Ch		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createCarat@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2B40h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createGram(enum UErrorCode *)
		public ?createGram@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createGram@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	1		; int
		push	0Ch		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createGram@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2B84h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createKilogram(enum UErrorCode *)
		public ?createKilogram@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createKilogram@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	2		; int
		push	0Ch		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createKilogram@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2BC8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMetricTon(enum	UErrorCode *)
		public ?createMetricTon@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMetricTon@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	3		; int
		push	0Ch		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMetricTon@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2C0Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMicrogram(enum	UErrorCode *)
		public ?createMicrogram@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMicrogram@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	4		; int
		push	0Ch		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMicrogram@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2C50h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMilligram(enum	UErrorCode *)
		public ?createMilligram@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMilligram@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	5		; int
		push	0Ch		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMilligram@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2C94h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createOunce(enum UErrorCode *)
		public ?createOunce@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createOunce@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	6		; int
		push	0Ch		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createOunce@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2CD8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createOunceTroy(enum	UErrorCode *)
		public ?createOunceTroy@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createOunceTroy@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	7		; int
		push	0Ch		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createOunceTroy@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2D1Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createPound(enum UErrorCode *)
		public ?createPound@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createPound@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	8		; int
		push	0Ch		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createPound@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2D60h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createStone(enum UErrorCode *)
		public ?createStone@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createStone@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	9		; int
		push	0Ch		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createStone@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2DA4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createTon(enum UErrorCode *)
		public ?createTon@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createTon@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0Ah		; int
		push	0Ch		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createTon@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2DE8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createGigawatt(enum UErrorCode *)
		public ?createGigawatt@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createGigawatt@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0		; int
		push	0Dh		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createGigawatt@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2E2Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createHorsepower(enum UErrorCode *)
		public ?createHorsepower@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createHorsepower@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	1		; int
		push	0Dh		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createHorsepower@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2E70h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createKilowatt(enum UErrorCode *)
		public ?createKilowatt@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createKilowatt@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	2		; int
		push	0Dh		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createKilowatt@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2EB4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMegawatt(enum UErrorCode *)
		public ?createMegawatt@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMegawatt@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	3		; int
		push	0Dh		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMegawatt@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2EF8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMilliwatt(enum	UErrorCode *)
		public ?createMilliwatt@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMilliwatt@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	4		; int
		push	0Dh		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMilliwatt@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2F3Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createWatt(enum UErrorCode *)
		public ?createWatt@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createWatt@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	5		; int
		push	0Dh		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createWatt@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2F80h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createHectopascal(enum UErrorCode *)
		public ?createHectopascal@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createHectopascal@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0		; int
		push	0Eh		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createHectopascal@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2FC4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createInchHg(enum UErrorCode	*)
		public ?createInchHg@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createInchHg@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	1		; int
		push	0Eh		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp

loc_2FFD:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::hexfloato
					; .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::floatfieldo
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createInchHg@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3008h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMillibar(enum UErrorCode *)
		public ?createMillibar@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMillibar@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	2		; int
		push	0Eh		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMillibar@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 304Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMillimeterOfMercury(enum UErrorCode *)
		public ?createMillimeterOfMercury@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMillimeterOfMercury@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	3		; int
		push	0Eh		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMillimeterOfMercury@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3090h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createPoundPerSquareInch(enum UErrorCode *)
		public ?createPoundPerSquareInch@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createPoundPerSquareInch@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	4		; int
		push	0Eh		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createPoundPerSquareInch@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 30D4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createKarat(enum UErrorCode *)
		public ?createKarat@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createKarat@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0		; int
		push	0Fh		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createKarat@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3118h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createKilometerPerHour(enum UErrorCode *)
		public ?createKilometerPerHour@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createKilometerPerHour@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0		; int
		push	10h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createKilometerPerHour@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 315Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createKnot(enum UErrorCode *)
		public ?createKnot@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createKnot@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	1		; int
		push	10h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createKnot@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 31A0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMeterPerSecond(enum UErrorCode	*)
		public ?createMeterPerSecond@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMeterPerSecond@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	2		; int
		push	10h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMeterPerSecond@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 31E4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMilePerHour(enum UErrorCode *)
		public ?createMilePerHour@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMilePerHour@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	3		; int
		push	10h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMilePerHour@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3228h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createCelsius(enum UErrorCode *)
		public ?createCelsius@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createCelsius@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0		; int
		push	11h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createCelsius@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 326Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createFahrenheit(enum UErrorCode *)
		public ?createFahrenheit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createFahrenheit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	1		; int
		push	11h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createFahrenheit@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 32B0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createGenericTemperature(enum UErrorCode *)
		public ?createGenericTemperature@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createGenericTemperature@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	2		; int
		push	11h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createGenericTemperature@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 32F4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createKelvin(enum UErrorCode	*)
		public ?createKelvin@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createKelvin@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	3		; int
		push	11h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createKelvin@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3338h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createAcreFoot(enum UErrorCode *)
		public ?createAcreFoot@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createAcreFoot@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createAcreFoot@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 337Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createBushel(enum UErrorCode	*)
		public ?createBushel@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createBushel@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	1		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createBushel@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 33C0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createCentiliter(enum UErrorCode *)
		public ?createCentiliter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createCentiliter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	2		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createCentiliter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3404h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createCubicCentimeter(enum UErrorCode *)
		public ?createCubicCentimeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createCubicCentimeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	3		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createCubicCentimeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3448h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createCubicFoot(enum	UErrorCode *)
		public ?createCubicFoot@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createCubicFoot@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	4		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createCubicFoot@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 348Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createCubicInch(enum	UErrorCode *)
		public ?createCubicInch@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createCubicInch@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	5		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createCubicInch@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 34D0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createCubicKilometer(enum UErrorCode	*)
		public ?createCubicKilometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createCubicKilometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	6		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createCubicKilometer@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3514h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createCubicMeter(enum UErrorCode *)
		public ?createCubicMeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createCubicMeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	7		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createCubicMeter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3558h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createCubicMile(enum	UErrorCode *)
		public ?createCubicMile@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createCubicMile@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	8		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createCubicMile@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 359Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createCubicYard(enum	UErrorCode *)
		public ?createCubicYard@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createCubicYard@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	9		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createCubicYard@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 35E0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createCup(enum UErrorCode *)
		public ?createCup@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createCup@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0Ah		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createCup@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3624h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createCupMetric(enum	UErrorCode *)
		public ?createCupMetric@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createCupMetric@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0Bh		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createCupMetric@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3668h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createDeciliter(enum	UErrorCode *)
		public ?createDeciliter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createDeciliter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0Ch		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createDeciliter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 36ACh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createFluidOunce(enum UErrorCode *)
		public ?createFluidOunce@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createFluidOunce@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0Dh		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createFluidOunce@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 36F0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createGallon(enum UErrorCode	*)
		public ?createGallon@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createGallon@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0Eh		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createGallon@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3734h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createHectoliter(enum UErrorCode *)
		public ?createHectoliter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createHectoliter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	0Fh		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createHectoliter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3778h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createLiter(enum UErrorCode *)
		public ?createLiter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createLiter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	10h		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createLiter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 37BCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMegaliter(enum	UErrorCode *)
		public ?createMegaliter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMegaliter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	11h		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMegaliter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3800h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createMilliliter(enum UErrorCode *)
		public ?createMilliliter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createMilliliter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	12h		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createMilliliter@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3844h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createPint(enum UErrorCode *)
		public ?createPint@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createPint@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc	near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	13h		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createPint@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3888h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createPintMetric(enum UErrorCode *)
		public ?createPintMetric@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createPintMetric@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	14h		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createPintMetric@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 38CCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createQuart(enum UErrorCode *)
		public ?createQuart@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createQuart@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	15h		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createQuart@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3910h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createTablespoon(enum UErrorCode *)
		public ?createTablespoon@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createTablespoon@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	16h		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createTablespoon@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3954h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::createTeaspoon(enum UErrorCode *)
		public ?createTeaspoon@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z
?createTeaspoon@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		push	eax		; enum UErrorCode *
		push	17h		; int
		push	12h		; int
		call	?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z ; icu_56::MeasureUnit::create(int,int,UErrorCode &)
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?createTeaspoon@MeasureUnit@icu_56@@SAPAV12@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3998h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::MeasureUnit::MeasureUnit(icu_56::MeasureUnit *this,	const struct icu_56::MeasureUnit *)
		public ??0MeasureUnit@icu_56@@QAE@ABV01@@Z
??0MeasureUnit@icu_56@@QAE@ABV01@@Z proc near
					; CODE XREF: icu_56::MeasureUnit::clone(void)+76p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0UObject@icu_56@@QAE@XZ ; icu_56::UObject::UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7MeasureUnit@icu_56@@6B@ ; const icu_56::MeasureUnit::`vftable'
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		mov	[eax+8], edx
		mov	eax, [ebp+arg_0]
		add	eax, 0Ch
		push	eax		; Source
		mov	ecx, [ebp+var_8]
		add	ecx, 0Ch
		push	ecx		; Dest
		call	_strcpy
		add	esp, 8
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0MeasureUnit@icu_56@@QAE@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3A20h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	icu_56::MeasureUnit & __thiscall icu_56::MeasureUnit::operator=(class icu_56::MeasureUnit const	&)
		public ??4MeasureUnit@icu_56@@QAEAAV01@ABV01@@Z
??4MeasureUnit@icu_56@@QAEAAV01@ABV01@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_0]
		jnz	short loc_3A50
		mov	eax, [ebp+var_8]
		jmp	short loc_3A81
; ---------------------------------------------------------------------------

loc_3A50:				; CODE XREF: icu_56::MeasureUnit::operator=(icu_56::MeasureUnit	const &)+29j
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+8]
		mov	[eax+8], edx
		mov	eax, [ebp+arg_0]
		add	eax, 0Ch
		push	eax		; Source
		mov	ecx, [ebp+var_8]
		add	ecx, 0Ch
		push	ecx		; Dest
		call	_strcpy
		add	esp, 8
		mov	eax, [ebp+var_8]

loc_3A81:				; CODE XREF: icu_56::MeasureUnit::operator=(icu_56::MeasureUnit	const &)+2Ej
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??4MeasureUnit@icu_56@@QAEAAV01@ABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3A98h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::UObject *__thiscall icu_56::MeasureUnit::clone(icu_56::MeasureUnit *__hidden this)
		public ?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ
?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ proc near	; DATA XREF: .rdata:000013CCo

var_F4		= dword	ptr -0F4h
var_EC		= dword	ptr -0ECh
var_E0		= dword	ptr -0E0h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ
		mov	eax, large fs:0
		push	eax
		sub	esp, 0E8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_F4]
		mov	ecx, 3Ah ; ':'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	esi, esp
		push	10h		; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_E0], eax
		mov	[ebp+var_4], 0
		cmp	[ebp+var_E0], 0
		jz	short loc_3B1B
		mov	eax, [ebp+var_14]
		push	eax		; struct icu_56::MeasureUnit *
		mov	ecx, [ebp+var_E0] ; this
		call	??0MeasureUnit@icu_56@@QAE@ABV01@@Z ; icu_56::MeasureUnit::MeasureUnit(icu_56::MeasureUnit const &)
		mov	[ebp+var_F4], eax
		jmp	short loc_3B25
; ---------------------------------------------------------------------------

loc_3B1B:				; CODE XREF: icu_56::MeasureUnit::clone(void)+6Aj
		mov	[ebp+var_F4], 0

loc_3B25:				; CODE XREF: icu_56::MeasureUnit::clone(void)+81j
		mov	ecx, [ebp+var_F4]
		mov	[ebp+var_EC], ecx
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_EC]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0F4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 3B60h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ$0	proc near
					; DATA XREF: .xdata$x:00003B9Co
		mov	esi, esp
		mov	eax, [ebp-0E0h]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ$0	endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ proc near
					; DATA XREF: icu_56::MeasureUnit::clone(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0F8h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ
		jmp	___CxxFrameHandler3
__ehhandler$?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 3B98h
__unwindtable$?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00003BA8o
		dd offset __unwindfunclet$?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ$0
__ehfuncinfo$?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ dd 19930522h, 1
					; DATA XREF: __ehhandler$?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ+14o
		dd offset __unwindtable$?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ
		align 20h
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3BC4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall icu_56::MeasureUnit::~MeasureUnit(icu_56::MeasureUnit *__hidden this)
		public ??1MeasureUnit@icu_56@@UAE@XZ
??1MeasureUnit@icu_56@@UAE@XZ proc near	; CODE XREF: icu_56::MeasureUnit::`scalar deleting destructor'(uint)+26p
					; icu_56::MeasureUnit::`vector deleting	destructor'(uint)+6Ep
					; DATA XREF: ...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7MeasureUnit@icu_56@@6B@ ; const icu_56::MeasureUnit::`vftable'
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??1UObject@icu_56@@UAE@XZ ; icu_56::UObject::~UObject(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1MeasureUnit@icu_56@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3C18h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	char *__thiscall icu_56::MeasureUnit::getType(icu_56::MeasureUnit *__hidden this)
		public ?getType@MeasureUnit@icu_56@@QBEPBDXZ
?getType@MeasureUnit@icu_56@@QBEPBDXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	eax, ds:_gTypes[ecx*4]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getType@MeasureUnit@icu_56@@QBEPBDXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3C50h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	char *__thiscall icu_56::MeasureUnit::getSubtype(icu_56::MeasureUnit *__hidden this)
		public ?getSubtype@MeasureUnit@icu_56@@QBEPBDXZ
?getSubtype@MeasureUnit@icu_56@@QBEPBDXZ proc near

var_D0		= dword	ptr -0D0h
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D0]
		mov	ecx, 34h ; '4'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		movsx	ecx, byte ptr [eax+0Ch]
		test	ecx, ecx
		jnz	short loc_3C95
		mov	ecx, [ebp+var_8] ; this
		call	?getOffset@MeasureUnit@icu_56@@ABEHXZ ;	icu_56::MeasureUnit::getOffset(void)
		mov	edx, ds:_gSubTypes[eax*4]
		mov	[ebp+var_D0], edx
		jmp	short loc_3CA1
; ---------------------------------------------------------------------------

loc_3C95:				; CODE XREF: icu_56::MeasureUnit::getSubtype(void)+2Cj
		mov	eax, [ebp+var_8]
		add	eax, 0Ch
		mov	[ebp+var_D0], eax

loc_3CA1:				; CODE XREF: icu_56::MeasureUnit::getSubtype(void)+43j
		mov	eax, [ebp+var_D0]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?getSubtype@MeasureUnit@icu_56@@QBEPBDXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3CBCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual signed char __thiscall icu_56::MeasureUnit::operator==(class icu_56::UObject const &)const
		public ??8MeasureUnit@icu_56@@UBECABVUObject@1@@Z
??8MeasureUnit@icu_56@@UBECABVUObject@1@@Z proc	near ; DATA XREF: .rdata:000013D0o

var_DC		= byte ptr -0DCh
var_D9		= byte ptr -0D9h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0DCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_DC]
		mov	ecx, 37h ; '7'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_0]
		jnz	short loc_3CEE
		mov	al, 1
		jmp	loc_3D75
; ---------------------------------------------------------------------------

loc_3CEE:				; CODE XREF: icu_56::MeasureUnit::operator==(icu_56::UObject const &)+29j
		mov	eax, [ebp+arg_0]
		push	eax
		call	___RTtypeid
		add	esp, 4
		mov	esi, esp
		push	eax
		mov	ecx, [ebp+var_8]
		push	ecx
		call	___RTtypeid
		add	esp, 4
		mov	ecx, eax
		call	dword ptr ds:__imp_??9type_info@@QBE_NABV0@@Z ;	type_info::operator!=(type_info	const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		movzx	edx, al
		test	edx, edx
		jz	short loc_3D23
		xor	al, al
		jmp	short loc_3D75
; ---------------------------------------------------------------------------

loc_3D23:				; CODE XREF: icu_56::MeasureUnit::operator==(icu_56::UObject const &)+61j
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_14]
		mov	edx, [eax+4]
		cmp	edx, [ecx+4]
		jnz	short loc_3D68
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_14]
		mov	edx, [eax+8]
		cmp	edx, [ecx+8]
		jnz	short loc_3D68
		mov	eax, [ebp+var_14]
		add	eax, 0Ch
		push	eax		; Str2
		mov	ecx, [ebp+var_8]
		add	ecx, 0Ch
		push	ecx		; Str1
		call	_strcmp
		add	esp, 8
		test	eax, eax
		jnz	short loc_3D68
		mov	[ebp+var_D9], 1
		jmp	short loc_3D6F
; ---------------------------------------------------------------------------

loc_3D68:				; CODE XREF: icu_56::MeasureUnit::operator==(icu_56::UObject const &)+79j
					; icu_56::MeasureUnit::operator==(icu_56::UObject const	&)+87j	...
		mov	[ebp+var_D9], 0

loc_3D6F:				; CODE XREF: icu_56::MeasureUnit::operator==(icu_56::UObject const &)+AAj
		mov	al, [ebp+var_D9]

loc_3D75:				; CODE XREF: icu_56::MeasureUnit::operator==(icu_56::UObject const &)+2Dj
					; icu_56::MeasureUnit::operator==(icu_56::UObject const	&)+65j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0DCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??8MeasureUnit@icu_56@@UBECABVUObject@1@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3D8Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::MeasureUnit::getIndex(icu_56::MeasureUnit *__hidden this)
		public ?getIndex@MeasureUnit@icu_56@@QBEHXZ
?getIndex@MeasureUnit@icu_56@@QBEHXZ proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	eax, ds:_gIndexes[ecx*4]
		mov	edx, [ebp+var_8]
		add	eax, [edx+8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getIndex@MeasureUnit@icu_56@@QBEHXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3DCCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl icu_56::MeasureUnit::getAvailable(struct icu_56::MeasureUnit *, int, enum	UErrorCode *)
		public ?getAvailable@MeasureUnit@icu_56@@SAHPAV12@HAAW4UErrorCode@@@Z
?getAvailable@MeasureUnit@icu_56@@SAHPAV12@HAAW4UErrorCode@@@Z proc near

var_F0		= byte ptr -0F0h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0F0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_F0]
		mov	ecx, 3Ch ; '<'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_3E06
		xor	eax, eax
		jmp	loc_3EC8
; ---------------------------------------------------------------------------

loc_3E06:				; CODE XREF: icu_56::MeasureUnit::getAvailable(icu_56::MeasureUnit *,int,UErrorCode &)+31j
		cmp	[ebp+arg_4], 185h
		jge	short loc_3E22
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 0Fh
		mov	eax, 185h
		jmp	loc_3EC8
; ---------------------------------------------------------------------------

loc_3E22:				; CODE XREF: icu_56::MeasureUnit::getAvailable(icu_56::MeasureUnit *,int,UErrorCode &)+41j
		mov	[ebp+var_8], 0
		mov	[ebp+var_14], 0
		jmp	short loc_3E3B
; ---------------------------------------------------------------------------

loc_3E32:				; CODE XREF: icu_56::MeasureUnit::getAvailable(icu_56::MeasureUnit *,int,UErrorCode &):loc_3E93j
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax

loc_3E3B:				; CODE XREF: icu_56::MeasureUnit::getAvailable(icu_56::MeasureUnit *,int,UErrorCode &)+64j
		cmp	[ebp+var_14], 13h
		jge	short loc_3E95
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_14]
		mov	edx, ds:dword_B7C[eax*4]
		sub	edx, ds:_gOffsets[ecx*4]
		mov	[ebp+var_20], edx
		mov	[ebp+var_2C], 0
		jmp	short loc_3E6A
; ---------------------------------------------------------------------------

loc_3E61:				; CODE XREF: icu_56::MeasureUnit::getAvailable(icu_56::MeasureUnit *,int,UErrorCode &)+C5j
		mov	eax, [ebp+var_2C]
		add	eax, 1
		mov	[ebp+var_2C], eax

loc_3E6A:				; CODE XREF: icu_56::MeasureUnit::getAvailable(icu_56::MeasureUnit *,int,UErrorCode &)+93j
		mov	eax, [ebp+var_2C]
		cmp	eax, [ebp+var_20]
		jge	short loc_3E93
		mov	eax, [ebp+var_2C]
		push	eax		; int
		mov	ecx, [ebp+var_14]
		push	ecx		; int
		mov	ecx, [ebp+var_8]
		shl	ecx, 4
		add	ecx, [ebp+arg_0] ; this
		call	?setTo@MeasureUnit@icu_56@@AAEXHH@Z ; icu_56::MeasureUnit::setTo(int,int)
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		jmp	short loc_3E61
; ---------------------------------------------------------------------------

loc_3E93:				; CODE XREF: icu_56::MeasureUnit::getAvailable(icu_56::MeasureUnit *,int,UErrorCode &)+A4j
		jmp	short loc_3E32
; ---------------------------------------------------------------------------

loc_3E95:				; CODE XREF: icu_56::MeasureUnit::getAvailable(icu_56::MeasureUnit *,int,UErrorCode &)+73j
		cmp	[ebp+var_8], 185h
		jz	short loc_3EC3
		mov	eax, ds:?__LINE__Var@?1??getAvailable@MeasureUnit@icu_56@@SAHPAV23@HAAW4UErrorCode@@@Z@4JA@756c999f
		add	eax, 10h
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FK@LINCOLOC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@ ; "d:\\mozilla\\intl\\icu\\source\\i18n\\m"...
		push	offset ??_C@_1HG@LOEPDNGO@?$AAi?$AAd?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAg?$AAS?$AAu?$AAb?$AAT?$AAy?$AAp?$AAe@	; "idx == (int32_t)(sizeof(gSubTypes)/size"...
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_3EC3:				; CODE XREF: icu_56::MeasureUnit::getAvailable(icu_56::MeasureUnit *,int,UErrorCode &)+D0j
		mov	eax, 185h

loc_3EC8:				; CODE XREF: icu_56::MeasureUnit::getAvailable(icu_56::MeasureUnit *,int,UErrorCode &)+35j
					; icu_56::MeasureUnit::getAvailable(icu_56::MeasureUnit	*,int,UErrorCode &)+51j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0F0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?getAvailable@MeasureUnit@icu_56@@SAHPAV12@HAAW4UErrorCode@@@Z endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 3EDCh
		public ??_C@_1HG@LOEPDNGO@?$AAi?$AAd?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAg?$AAS?$AAu?$AAb?$AAT?$AAy?$AAp?$AAe@
; wchar_t `string'
??_C@_1HG@LOEPDNGO@?$AAi?$AAd?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA3?$AA2?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAg?$AAS?$AAu?$AAb?$AAT?$AAy?$AAp?$AAe@:
					; DATA XREF: icu_56::MeasureUnit::getAvailable(icu_56::MeasureUnit *,int,UErrorCode &)+E2o
		unicode	0, <idx	== (int32_t)(sizeof(gSubTypes)/sizeof((gSubTypes)[0])>
		unicode	0, <)>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 3F54h
		public ??_C@_1FK@LINCOLOC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@
; wchar_t `string'
??_C@_1FK@LINCOLOC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@:
					; DATA XREF: icu_56::MeasureUnit::getAvailable(icu_56::MeasureUnit *,int,UErrorCode &)+DDo
					; icu_56::MeasureUnit::initTime(char const *)+4Do ...
		unicode	0, <d:\mozilla\intl\icu\source\i18n\measunit.cpp>,0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 3FB0h
		public ?__LINE__Var@?1??getAvailable@MeasureUnit@icu_56@@SAHPAV23@HAAW4UErrorCode@@@Z@4JA@756c999f
?__LINE__Var@?1??getAvailable@MeasureUnit@icu_56@@SAHPAV23@HAAW4UErrorCode@@@Z@4JA@756c999f dd offset ??_C@_08CKFKFOPP@terabyte?$AA@
					; DATA XREF: icu_56::MeasureUnit::getAvailable(icu_56::MeasureUnit *,int,UErrorCode &)+D2r
_data		ends			; "terabyte"

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3FB4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl U_FAILURE(enum  UErrorCode)
?U_FAILURE@@YACW4UErrorCode@@@Z	proc near
					; CODE XREF: icu_56::MeasureUnit::getAvailable(icu_56::MeasureUnit *,int,UErrorCode &)+24p
					; icu_56::MeasureUnit::getAvailable(char const *,icu_56::MeasureUnit *,int,UErrorCode &)+24p ...

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		setnle	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?U_FAILURE@@YACW4UErrorCode@@@Z	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3FE0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl icu_56::MeasureUnit::getAvailable(const char *Str2, struct icu_56::MeasureUnit *,	int, enum UErrorCode *)
		public ?getAvailable@MeasureUnit@icu_56@@SAHPBDPAV12@HAAW4UErrorCode@@@Z
?getAvailable@MeasureUnit@icu_56@@SAHPBDPAV12@HAAW4UErrorCode@@@Z proc near

var_E4		= byte ptr -0E4h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
Str2		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd

loc_3FFE:				; DATA XREF: .rdata:std::_Iosb<int>::_Fmtflags const std::_Iosb<int>::boolalphao
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_401A
		xor	eax, eax
		jmp	loc_409E
; ---------------------------------------------------------------------------

loc_401A:				; CODE XREF: icu_56::MeasureUnit::getAvailable(char const *,icu_56::MeasureUnit	*,int,UErrorCode &)+31j
		mov	eax, [ebp+Str2]
		push	eax		; Str2
		push	13h		; int
		push	0		; int
		push	offset _gTypes	; int
		call	?binarySearch@icu_56@@YAHPBQBDHHPBD@Z ;	icu_56::binarySearch(char const	* const	*,int,int,char const *)
		add	esp, 10h
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0FFFFFFFFh
		jnz	short loc_403C
		xor	eax, eax
		jmp	short loc_409E
; ---------------------------------------------------------------------------

loc_403C:				; CODE XREF: icu_56::MeasureUnit::getAvailable(char const *,icu_56::MeasureUnit	*,int,UErrorCode &)+56j
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_8]
		mov	edx, ds:dword_B7C[eax*4]
		sub	edx, ds:_gOffsets[ecx*4]
		mov	[ebp+var_14], edx
		mov	eax, [ebp+arg_8]
		cmp	eax, [ebp+var_14]
		jge	short loc_4069
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0Fh
		mov	eax, [ebp+var_14]
		jmp	short loc_409E
; ---------------------------------------------------------------------------

loc_4069:				; CODE XREF: icu_56::MeasureUnit::getAvailable(char const *,icu_56::MeasureUnit	*,int,UErrorCode &)+79j
		mov	[ebp+var_20], 0
		jmp	short loc_407B
; ---------------------------------------------------------------------------

loc_4072:				; CODE XREF: icu_56::MeasureUnit::getAvailable(char const *,icu_56::MeasureUnit	*,int,UErrorCode &)+B9j
		mov	eax, [ebp+var_20]
		add	eax, 1
		mov	[ebp+var_20], eax

loc_407B:				; CODE XREF: icu_56::MeasureUnit::getAvailable(char const *,icu_56::MeasureUnit	*,int,UErrorCode &)+90j
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+var_14]
		jge	short loc_409B
		mov	eax, [ebp+var_20]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		push	ecx		; int
		mov	ecx, [ebp+var_20]
		shl	ecx, 4
		add	ecx, [ebp+arg_4] ; this
		call	?setTo@MeasureUnit@icu_56@@AAEXHH@Z ; icu_56::MeasureUnit::setTo(int,int)
		jmp	short loc_4072
; ---------------------------------------------------------------------------

loc_409B:				; CODE XREF: icu_56::MeasureUnit::getAvailable(char const *,icu_56::MeasureUnit	*,int,UErrorCode &)+A1j
		mov	eax, [ebp+var_14]

loc_409E:				; CODE XREF: icu_56::MeasureUnit::getAvailable(char const *,icu_56::MeasureUnit	*,int,UErrorCode &)+35j
					; icu_56::MeasureUnit::getAvailable(char const *,icu_56::MeasureUnit *,int,UErrorCode &)+5Aj ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?getAvailable@MeasureUnit@icu_56@@SAHPBDPAV12@HAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 40B4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl icu_56::binarySearch(int,	int, int, char *Str2)
?binarySearch@icu_56@@YAHPBQBDHHPBD@Z proc near
					; CODE XREF: icu_56::MeasureUnit::getAvailable(char const *,icu_56::MeasureUnit	*,int,UErrorCode &)+47p
					; icu_56::MeasureUnit::initTime(char const *)+31p ...

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Str2		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd

loc_40D2:				; CODE XREF: icu_56::binarySearch(char const * const *,int,int,char const *)+5Cj
					; icu_56::binarySearch(char const * const *,int,int,char const *)+6Fj
		mov	eax, [ebp+arg_4]
		cmp	eax, [ebp+arg_8]
		jge	short loc_4125
		mov	eax, [ebp+arg_4]
		add	eax, [ebp+arg_8]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_8], eax
		mov	eax, [ebp+Str2]
		push	eax		; Str2
		mov	ecx, [ebp+var_8]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+ecx*4]
		push	eax		; Str1
		call	_strcmp
		add	esp, 8
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jge	short loc_4112
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+arg_4], eax
		jmp	short loc_40D2
; ---------------------------------------------------------------------------

loc_4112:				; CODE XREF: icu_56::binarySearch(char const * const *,int,int,char const *)+51j
		cmp	[ebp+var_14], 0
		jnz	short loc_411D
		mov	eax, [ebp+var_8]
		jmp	short loc_4128
; ---------------------------------------------------------------------------

loc_411D:				; CODE XREF: icu_56::binarySearch(char const * const *,int,int,char const *)+62j
		mov	eax, [ebp+var_8]
		mov	[ebp+arg_8], eax
		jmp	short loc_40D2
; ---------------------------------------------------------------------------

loc_4125:				; CODE XREF: icu_56::binarySearch(char const * const *,int,int,char const *)+24j
		or	eax, 0FFFFFFFFh

loc_4128:				; CODE XREF: icu_56::binarySearch(char const * const *,int,int,char const *)+67j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?binarySearch@icu_56@@YAHPBQBDHHPBD@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 413Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::StringEnumeration *__cdecl icu_56::MeasureUnit::getAvailableTypes(enum	UErrorCode *)
		public ?getAvailableTypes@MeasureUnit@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z
?getAvailableTypes@MeasureUnit@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z proc	near

var_100		= dword	ptr -100h
var_F8		= dword	ptr -0F8h
var_EC		= dword	ptr -0ECh
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?getAvailableTypes@MeasureUnit@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0F4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_100]
		mov	ecx, 3Dh ; '='
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	eax, [ebp+arg_0]
		push	eax
		push	13h
		push	offset _gTypes
		call	_uenum_openCharStringsEnumeration_56
		add	esp, 0Ch
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_41B7
		mov	eax, [ebp+var_14]
		push	eax
		call	_uenum_close_56
		add	esp, 4
		xor	eax, eax
		jmp	loc_425C
; ---------------------------------------------------------------------------

loc_41B7:				; CODE XREF: icu_56::MeasureUnit::getAvailableTypes(UErrorCode &)+66j
		mov	esi, esp
		push	70h ; 'p'       ; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_EC], eax
		mov	[ebp+var_4], 0
		cmp	[ebp+var_EC], 0
		jz	short loc_4214
		mov	esi, esp
		mov	eax, [ebp+var_14]
		push	eax		; struct UEnumeration *
		mov	ecx, [ebp+var_EC] ; this
		call	dword ptr ds:__imp_??0UStringEnumeration@icu_56@@QAE@PAUUEnumeration@@@Z ; icu_56::UStringEnumeration::UStringEnumeration(UEnumeration *)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_EC]
		mov	dword ptr [ecx], offset	??_SUStringEnumeration@icu_56@@6B@ ; const icu_56::UStringEnumeration::`local vftable'
		mov	edx, [ebp+var_EC]
		mov	[ebp+var_100], edx
		jmp	short loc_421E
; ---------------------------------------------------------------------------

loc_4214:				; CODE XREF: icu_56::MeasureUnit::getAvailableTypes(UErrorCode &)+A3j
		mov	[ebp+var_100], 0

loc_421E:				; CODE XREF: icu_56::MeasureUnit::getAvailableTypes(UErrorCode &)+D6j
		mov	eax, [ebp+var_100]
		mov	[ebp+var_F8], eax
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, [ebp+var_F8]
		mov	[ebp+var_20], ecx
		cmp	[ebp+var_20], 0
		jnz	short loc_4259
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 7
		mov	eax, [ebp+var_14]
		push	eax
		call	_uenum_close_56
		add	esp, 4
		xor	eax, eax
		jmp	short loc_425C
; ---------------------------------------------------------------------------

loc_4259:				; CODE XREF: icu_56::MeasureUnit::getAvailableTypes(UErrorCode &)+102j
		mov	eax, [ebp+var_20]

loc_425C:				; CODE XREF: icu_56::MeasureUnit::getAvailableTypes(UErrorCode &)+76j
					; icu_56::MeasureUnit::getAvailableTypes(UErrorCode &)+11Bj
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 100h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?getAvailableTypes@MeasureUnit@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 427Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?getAvailableTypes@MeasureUnit@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z$0 proc near
					; DATA XREF: .xdata$x:000042E4o
		mov	esi, esp
		mov	eax, [ebp-0ECh]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?getAvailableTypes@MeasureUnit@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?getAvailableTypes@MeasureUnit@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z proc near
					; DATA XREF: icu_56::MeasureUnit::getAvailableTypes(UErrorCode &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-104h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?getAvailableTypes@MeasureUnit@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?getAvailableTypes@MeasureUnit@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 42B4h
		dd offset ??_R4UStringEnumeration@icu_56@@6B@ ;	const icu_56::UStringEnumeration::`RTTI	Complete Object	Locator'
		public ??_SUStringEnumeration@icu_56@@6B@
; const	icu_56::UStringEnumeration::`local vftable'
??_SUStringEnumeration@icu_56@@6B@ dd offset ??_EUStringEnumeration@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::MeasureUnit::getAvailableTypes(UErrorCode &)+C4o
					; icu_56::UStringEnumeration::`vector deleting destructor'(uint)
		dd offset ?getDynamicClassID@UStringEnumeration@icu_56@@UBEPAXXZ ; icu_56::UStringEnumeration::getDynamicClassID(void)
		dd offset ?clone@StringEnumeration@icu_56@@UBEPAV12@XZ ; icu_56::StringEnumeration::clone(void)
		dd offset ?count@UStringEnumeration@icu_56@@UBEHAAW4UErrorCode@@@Z ; icu_56::UStringEnumeration::count(UErrorCode &)
		dd offset ?next@UStringEnumeration@icu_56@@UAEPBDPAHAAW4UErrorCode@@@Z ; icu_56::UStringEnumeration::next(int *,UErrorCode &)
		dd offset ?unext@StringEnumeration@icu_56@@UAEPB_WPAHAAW4UErrorCode@@@Z	; icu_56::StringEnumeration::unext(int *,UErrorCode &)
		dd offset ?snext@UStringEnumeration@icu_56@@UAEPBVUnicodeString@2@AAW4UErrorCode@@@Z ; icu_56::UStringEnumeration::snext(UErrorCode &)
		dd offset ?reset@UStringEnumeration@icu_56@@UAEXAAW4UErrorCode@@@Z ; icu_56::UStringEnumeration::reset(UErrorCode &)
		dd offset ??8StringEnumeration@icu_56@@UBECABV01@@Z ; icu_56::StringEnumeration::operator==(icu_56::StringEnumeration const &)
		dd offset ??9StringEnumeration@icu_56@@UBECABV01@@Z ; icu_56::StringEnumeration::operator!=(icu_56::StringEnumeration const &)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 42E0h
__unwindtable$?getAvailableTypes@MeasureUnit@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:000042F0o
		dd offset __unwindfunclet$?getAvailableTypes@MeasureUnit@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z$0
__ehfuncinfo$?getAvailableTypes@MeasureUnit@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z	dd 19930522h, 1
					; DATA XREF: __ehhandler$?getAvailableTypes@MeasureUnit@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z+14o
		dd offset __unwindtable$?getAvailableTypes@MeasureUnit@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 430Ch
		public ??_R4UStringEnumeration@icu_56@@6B@
; const	icu_56::UStringEnumeration::`RTTI Complete Object Locator'
??_R4UStringEnumeration@icu_56@@6B@ dd 3 dup(0)	; DATA XREF: .rdata:000042B4o
		dd offset ??_R0?AVUStringEnumeration@icu_56@@@8	; icu_56::UStringEnumeration `RTTI Type	Descriptor'
		dd offset ??_R3UStringEnumeration@icu_56@@8 ; icu_56::UStringEnumeration::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 4320h
		public ??_R0?AVUStringEnumeration@icu_56@@@8
; class	icu_56::UStringEnumeration `RTTI Type Descriptor'
??_R0?AVUStringEnumeration@icu_56@@@8 dd offset	??_7type_info@@6B@
					; DATA XREF: .rdata$r:00004318o
					; .rdata$r:icu_56::UStringEnumeration::`RTTI Base Class	Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?avustringenu	db '.?AVUStringEnumeration@icu_56@@',0
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 4348h
		public ??_R3UStringEnumeration@icu_56@@8
; icu_56::UStringEnumeration::`RTTI Class Hierarchy Descriptor'
??_R3UStringEnumeration@icu_56@@8 dd 2 dup(0) ;	DATA XREF: .rdata$r:0000431Co
					; .rdata$r:00004384o
		dd 4
		dd offset ??_R2UStringEnumeration@icu_56@@8 ; icu_56::UStringEnumeration::`RTTI	Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 4358h
		public ??_R2UStringEnumeration@icu_56@@8
; icu_56::UStringEnumeration::`RTTI Base Class Array'
??_R2UStringEnumeration@icu_56@@8 dd offset ??_R1A@?0A@EA@UStringEnumeration@icu_56@@8
					; DATA XREF: .rdata$r:00004354o
					; icu_56::UStringEnumeration::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@StringEnumeration@icu_56@@8 ; icu_56::StringEnumeration::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 436Ch
		public ??_R1A@?0A@EA@UStringEnumeration@icu_56@@8
; icu_56::UStringEnumeration::`RTTI Base Class Descriptor at (0, -1, 0,	64)'
??_R1A@?0A@EA@UStringEnumeration@icu_56@@8 dd offset ??_R0?AVUStringEnumeration@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UStringEnumeration::`RTTI	Base Class Array'o
					; icu_56::UStringEnumeration `RTTI Type	Descriptor'
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd offset ??_C@_09IFCLMNDI@megaliter?$AA@ ; "megaliter"
		dd offset ??_R3UStringEnumeration@icu_56@@8 ; icu_56::UStringEnumeration::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 4388h
		public ??_R1A@?0A@EA@StringEnumeration@icu_56@@8
; icu_56::StringEnumeration::`RTTI Base	Class Descriptor at (0,	-1, 0, 64)'
??_R1A@?0A@EA@StringEnumeration@icu_56@@8 dd offset ??_R0?AVStringEnumeration@icu_56@@@8
					; DATA XREF: .rdata$r:0000435Co
					; .rdata$r:icu_56::StringEnumeration::`RTTI Base Class Array'o
					; icu_56::StringEnumeration `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset ??_C@_09IFCLMNDI@megaliter?$AA@ ; "megaliter"
		dd offset ??_R3StringEnumeration@icu_56@@8 ; icu_56::StringEnumeration::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 43A4h
		public ??_R0?AVStringEnumeration@icu_56@@@8
; class	icu_56::StringEnumeration `RTTI	Type Descriptor'
??_R0?AVStringEnumeration@icu_56@@@8 dd	offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::StringEnumeration::`RTTI Base Class Descriptor at	(0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avstringenum	db '.?AVStringEnumeration@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 43CCh
		public ??_R3StringEnumeration@icu_56@@8
; icu_56::StringEnumeration::`RTTI Class Hierarchy Descriptor'
??_R3StringEnumeration@icu_56@@8 dd 2 dup(0) ; DATA XREF: .rdata$r:000043A0o
		dd 3
		dd offset ??_R2StringEnumeration@icu_56@@8 ; icu_56::StringEnumeration::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 43DCh
		public ??_R2StringEnumeration@icu_56@@8
; icu_56::StringEnumeration::`RTTI Base	Class Array'
??_R2StringEnumeration@icu_56@@8 dd offset ??_R1A@?0A@EA@StringEnumeration@icu_56@@8
					; DATA XREF: .rdata$r:000043D8o
					; icu_56::StringEnumeration::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 43ECh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::UStringEnumeration::`scalar	deleting destructor'(unsigned int)
		public ??_GUStringEnumeration@icu_56@@UAEPAXI@Z
??_GUStringEnumeration@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??1UStringEnumeration@icu_56@@UAE@XZ	; icu_56::UStringEnumeration::~UStringEnumeration(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_443F
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_443F:				; CODE XREF: icu_56::UStringEnumeration::`scalar deleting destructor'(uint)+3Bj
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GUStringEnumeration@icu_56@@UAEPAXI@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4458h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl icu_56::MeasureUnit::getIndexCount()
		public ?getIndexCount@MeasureUnit@icu_56@@SAHXZ
?getIndexCount@MeasureUnit@icu_56@@SAHXZ proc near

var_C0		= byte ptr -0C0h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, ds:off_C14
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getIndexCount@MeasureUnit@icu_56@@SAHXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4484h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::resolveUnitPerUnit(const struct icu_56::MeasureUnit *, const	struct icu_56::MeasureUnit *)
		public ?resolveUnitPerUnit@MeasureUnit@icu_56@@SAPAV12@ABV12@0@Z
?resolveUnitPerUnit@MeasureUnit@icu_56@@SAPAV12@ABV12@0@Z proc near

var_130		= dword	ptr -130h
var_128		= dword	ptr -128h
var_11C		= dword	ptr -11Ch
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?resolveUnitPerUnit@MeasureUnit@icu_56@@SAPAV12@ABV12@0@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 124h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_130]
		mov	ecx, 49h ; 'I'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	ecx, [ebp+arg_0] ; this
		call	?getOffset@MeasureUnit@icu_56@@ABEHXZ ;	icu_56::MeasureUnit::getOffset(void)
		mov	[ebp+var_14], eax
		mov	ecx, [ebp+arg_4] ; this
		call	?getOffset@MeasureUnit@icu_56@@ABEHXZ ;	icu_56::MeasureUnit::getOffset(void)
		mov	[ebp+var_20], eax
		mov	[ebp+var_2C], 0
		mov	[ebp+var_38], 6

loc_44E5:				; CODE XREF: icu_56::MeasureUnit::resolveUnitPerUnit(icu_56::MeasureUnit const &,icu_56::MeasureUnit const &):loc_45D6j
		mov	eax, [ebp+var_2C]
		cmp	eax, [ebp+var_38]
		jge	loc_45DB
		mov	eax, [ebp+var_2C]
		add	eax, [ebp+var_38]
		cdq
		sub	eax, edx
		sar	eax, 1
		mov	[ebp+var_44], eax
		mov	eax, [ebp+var_44]
		shl	eax, 4
		add	eax, offset _unitPerUnitToSingleUnit
		mov	[ebp+var_50], eax
		mov	eax, [ebp+var_50]
		mov	ecx, [ebp+var_14]
		cmp	ecx, [eax]
		jge	short loc_4522
		mov	eax, [ebp+var_44]
		mov	[ebp+var_38], eax
		jmp	loc_45D6
; ---------------------------------------------------------------------------

loc_4522:				; CODE XREF: icu_56::MeasureUnit::resolveUnitPerUnit(icu_56::MeasureUnit const &,icu_56::MeasureUnit const &)+91j
		mov	eax, [ebp+var_50]
		mov	ecx, [ebp+var_14]
		cmp	ecx, [eax]
		jle	short loc_453A
		mov	eax, [ebp+var_44]
		add	eax, 1
		mov	[ebp+var_2C], eax
		jmp	loc_45D6
; ---------------------------------------------------------------------------

loc_453A:				; CODE XREF: icu_56::MeasureUnit::resolveUnitPerUnit(icu_56::MeasureUnit const &,icu_56::MeasureUnit const &)+A6j
		mov	eax, [ebp+var_50]
		mov	ecx, [ebp+var_20]
		cmp	ecx, [eax+4]
		jge	short loc_4550
		mov	eax, [ebp+var_44]
		mov	[ebp+var_38], eax
		jmp	loc_45D6
; ---------------------------------------------------------------------------

loc_4550:				; CODE XREF: icu_56::MeasureUnit::resolveUnitPerUnit(icu_56::MeasureUnit const &,icu_56::MeasureUnit const &)+BFj
		mov	eax, [ebp+var_50]
		mov	ecx, [ebp+var_20]
		cmp	ecx, [eax+4]
		jle	short loc_4566
		mov	eax, [ebp+var_44]
		add	eax, 1
		mov	[ebp+var_2C], eax
		jmp	short loc_45D6
; ---------------------------------------------------------------------------

loc_4566:				; CODE XREF: icu_56::MeasureUnit::resolveUnitPerUnit(icu_56::MeasureUnit const &,icu_56::MeasureUnit const &)+D5j
		mov	esi, esp
		push	10h		; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_11C], eax
		mov	[ebp+var_4], 0
		cmp	[ebp+var_11C], 0
		jz	short loc_45B1
		mov	eax, [ebp+var_50]
		mov	ecx, [eax+0Ch]
		push	ecx		; int
		mov	edx, [ebp+var_50]
		mov	eax, [edx+8]
		push	eax		; int
		mov	ecx, [ebp+var_11C] ; this
		call	??0MeasureUnit@icu_56@@AAE@HH@Z	; icu_56::MeasureUnit::MeasureUnit(int,int)
		mov	[ebp+var_130], eax
		jmp	short loc_45BB
; ---------------------------------------------------------------------------

loc_45B1:				; CODE XREF: icu_56::MeasureUnit::resolveUnitPerUnit(icu_56::MeasureUnit const &,icu_56::MeasureUnit const &)+10Aj
		mov	[ebp+var_130], 0

loc_45BB:				; CODE XREF: icu_56::MeasureUnit::resolveUnitPerUnit(icu_56::MeasureUnit const &,icu_56::MeasureUnit const &)+12Bj
		mov	ecx, [ebp+var_130]
		mov	[ebp+var_128], ecx
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_128]
		jmp	short loc_45DD
; ---------------------------------------------------------------------------

loc_45D6:				; CODE XREF: icu_56::MeasureUnit::resolveUnitPerUnit(icu_56::MeasureUnit const &,icu_56::MeasureUnit const &)+99j
					; icu_56::MeasureUnit::resolveUnitPerUnit(icu_56::MeasureUnit const &,icu_56::MeasureUnit const	&)+B1j	...
		jmp	loc_44E5
; ---------------------------------------------------------------------------

loc_45DB:				; CODE XREF: icu_56::MeasureUnit::resolveUnitPerUnit(icu_56::MeasureUnit const &,icu_56::MeasureUnit const &)+67j
		xor	eax, eax

loc_45DD:				; CODE XREF: icu_56::MeasureUnit::resolveUnitPerUnit(icu_56::MeasureUnit const &,icu_56::MeasureUnit const &)+150j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 130h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?resolveUnitPerUnit@MeasureUnit@icu_56@@SAPAV12@ABV12@0@Z endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 45FCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?resolveUnitPerUnit@MeasureUnit@icu_56@@SAPAV12@ABV12@0@Z$0 proc near
					; DATA XREF: .xdata$x:00004638o
		mov	esi, esp
		mov	eax, [ebp-11Ch]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?resolveUnitPerUnit@MeasureUnit@icu_56@@SAPAV12@ABV12@0@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?resolveUnitPerUnit@MeasureUnit@icu_56@@SAPAV12@ABV12@0@Z proc near
					; DATA XREF: icu_56::MeasureUnit::resolveUnitPerUnit(icu_56::MeasureUnit const &,icu_56::MeasureUnit const &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-134h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?resolveUnitPerUnit@MeasureUnit@icu_56@@SAPAV12@ABV12@0@Z
		jmp	___CxxFrameHandler3
__ehhandler$?resolveUnitPerUnit@MeasureUnit@icu_56@@SAPAV12@ABV12@0@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 4634h
__unwindtable$?resolveUnitPerUnit@MeasureUnit@icu_56@@SAPAV12@ABV12@0@Z	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00004644o
		dd offset __unwindfunclet$?resolveUnitPerUnit@MeasureUnit@icu_56@@SAPAV12@ABV12@0@Z$0
__ehfuncinfo$?resolveUnitPerUnit@MeasureUnit@icu_56@@SAPAV12@ABV12@0@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$?resolveUnitPerUnit@MeasureUnit@icu_56@@SAPAV12@ABV12@0@Z+14o
		dd offset __unwindtable$?resolveUnitPerUnit@MeasureUnit@icu_56@@SAPAV12@ABV12@0@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4660h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct icu_56::MeasureUnit *__cdecl icu_56::MeasureUnit::create(int, int, enum UErrorCode *)
		public ?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z
?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z proc near
					; CODE XREF: icu_56::MeasureUnit::createGForce(UErrorCode &)+26p
					; icu_56::MeasureUnit::createMeterPerSecondSquared(UErrorCode &)+26p ...

var_F4		= dword	ptr -0F4h
var_EC		= dword	ptr -0ECh
var_E0		= dword	ptr -0E0h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0E8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_F4]
		mov	ecx, 3Ah ; ':'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_46B6
		xor	eax, eax
		jmp	short loc_4733
; ---------------------------------------------------------------------------

loc_46B6:				; CODE XREF: icu_56::MeasureUnit::create(int,int,UErrorCode &)+50j
		mov	esi, esp
		push	10h		; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_E0], eax
		mov	[ebp+var_4], 0
		cmp	[ebp+var_E0], 0
		jz	short loc_46FB
		mov	eax, [ebp+arg_4]
		push	eax		; int
		mov	ecx, [ebp+arg_0]
		push	ecx		; int
		mov	ecx, [ebp+var_E0] ; this
		call	??0MeasureUnit@icu_56@@AAE@HH@Z	; icu_56::MeasureUnit::MeasureUnit(int,int)
		mov	[ebp+var_F4], eax
		jmp	short loc_4705
; ---------------------------------------------------------------------------

loc_46FB:				; CODE XREF: icu_56::MeasureUnit::create(int,int,UErrorCode &)+7Ej
		mov	[ebp+var_F4], 0

loc_4705:				; CODE XREF: icu_56::MeasureUnit::create(int,int,UErrorCode &)+99j
		mov	edx, [ebp+var_F4]
		mov	[ebp+var_EC], edx
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_EC]
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	short loc_4730
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 7

loc_4730:				; CODE XREF: icu_56::MeasureUnit::create(int,int,UErrorCode &)+C5j
		mov	eax, [ebp+var_14]

loc_4733:				; CODE XREF: icu_56::MeasureUnit::create(int,int,UErrorCode &)+54j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0F4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 4754h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z$0 proc	near
					; DATA XREF: .xdata$x:00004790o
		mov	esi, esp
		mov	eax, [ebp-0E0h]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z proc near
					; DATA XREF: icu_56::MeasureUnit::create(int,int,UErrorCode &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0F8h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 478Ch
__unwindtable$?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:0000479Co
		dd offset __unwindfunclet$?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z$0
__ehfuncinfo$?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z+14o
		dd offset __unwindtable$?create@MeasureUnit@icu_56@@CAPAV12@HHAAW4UErrorCode@@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 47B8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::MeasureUnit::initTime(icu_56::MeasureUnit *this, const char *)
		public ?initTime@MeasureUnit@icu_56@@IAEXPBD@Z
?initTime@MeasureUnit@icu_56@@IAEXPBD@Z	proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
Str2		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		push	offset ??_C@_08LGBPINEC@duration?$AA@ ;	"duration"
		push	13h		; int
		push	0		; int
		push	offset _gTypes	; int
		call	?binarySearch@icu_56@@YAHPBQBDHHPBD@Z ;	icu_56::binarySearch(char const	* const	*,int,int,char const *)
		add	esp, 10h
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0FFFFFFFFh
		jnz	short loc_481F
		mov	eax, ds:?__LINE__Var@?1??initTime@MeasureUnit@icu_56@@IAEXPBD@Z@4JA ; long `icu_56::MeasureUnit::initTime(char const *)'::`2'::__LINE__Var
		add	eax, 2
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FK@LINCOLOC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@ ; "d:\\mozilla\\intl\\icu\\source\\i18n\\m"...
		push	offset ??_C@_1BK@ILHAOHKE@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@ ; "result != -1"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_481F:				; CODE XREF: icu_56::MeasureUnit::initTime(char	const *)+40j
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_14]
		mov	[eax+4], ecx
		mov	eax, [ebp+Str2]
		push	eax		; Str2
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		mov	eax, ds:dword_B7C[edx*4]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		mov	eax, ds:_gOffsets[edx*4]
		push	eax		; int
		push	offset _gSubTypes ; int
		call	?binarySearch@icu_56@@YAHPBQBDHHPBD@Z ;	icu_56::binarySearch(char const	* const	*,int,int,char const *)
		add	esp, 10h
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0FFFFFFFFh
		jnz	short loc_4883
		mov	eax, ds:?__LINE__Var@?1??initTime@MeasureUnit@icu_56@@IAEXPBD@Z@4JA ; long `icu_56::MeasureUnit::initTime(char const *)'::`2'::__LINE__Var
		add	eax, 5
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FK@LINCOLOC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@ ; "d:\\mozilla\\intl\\icu\\source\\i18n\\m"...
		push	offset ??_C@_1BK@ILHAOHKE@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@ ; "result != -1"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_4883:				; CODE XREF: icu_56::MeasureUnit::initTime(char	const *)+A4j
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_14]
		sub	edx, ds:_gOffsets[ecx*4]
		mov	eax, [ebp+var_8]
		mov	[eax+8], edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?initTime@MeasureUnit@icu_56@@IAEXPBD@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 48B0h
		public ??_C@_1BK@ILHAOHKE@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@
; wchar_t `string'
??_C@_1BK@ILHAOHKE@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@:
					; DATA XREF: icu_56::MeasureUnit::initTime(char	const *)+52o
					; icu_56::MeasureUnit::initTime(char const *)+B6o ...
		unicode	0, <result != -1>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 48CCh
		public ?__LINE__Var@?1??initTime@MeasureUnit@icu_56@@IAEXPBD@Z@4JA
; long `protected: void	__thiscall icu_56::MeasureUnit::initTime(char const *)'::`2'::__LINE__Var
?__LINE__Var@?1??initTime@MeasureUnit@icu_56@@IAEXPBD@Z@4JA dd offset word_4AA
					; DATA XREF: icu_56::MeasureUnit::initTime(char	const *)+42r
					; icu_56::MeasureUnit::initTime(char const *)+A6r
_data		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 48D0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::MeasureUnit::initCurrency(icu_56::MeasureUnit	*this, const char *)
		public ?initCurrency@MeasureUnit@icu_56@@IAEXPBD@Z
?initCurrency@MeasureUnit@icu_56@@IAEXPBD@Z proc near

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
Source		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		push	offset ??_C@_08JLPCGLMH@currency?$AA@ ;	"currency"
		push	13h		; int
		push	0		; int
		push	offset _gTypes	; int
		call	?binarySearch@icu_56@@YAHPBQBDHHPBD@Z ;	icu_56::binarySearch(char const	* const	*,int,int,char const *)
		add	esp, 10h
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0FFFFFFFFh
		jnz	short loc_4937
		mov	eax, ds:?__LINE__Var@?1??initCurrency@MeasureUnit@icu_56@@IAEXPBD@Z@4JA	; long `icu_56::MeasureUnit::initCurrency(char const *)'::`2'::__LINE__Var
		add	eax, 2
		mov	esi, esp
		push	eax		; Line
		push	offset ??_C@_1FK@LINCOLOC@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@ ; "d:\\mozilla\\intl\\icu\\source\\i18n\\m"...
		push	offset ??_C@_1BK@ILHAOHKE@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@ ; "result != -1"
		call	dword ptr ds:__imp___wassert
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_4937:				; CODE XREF: icu_56::MeasureUnit::initCurrency(char const *)+40j
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+var_14]
		mov	[eax+4], ecx
		mov	eax, [ebp+Source]
		push	eax		; Str2
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		mov	eax, ds:dword_B7C[edx*4]
		push	eax		; int
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx+4]
		mov	eax, ds:_gOffsets[edx*4]
		push	eax		; int
		push	offset _gSubTypes ; int
		call	?binarySearch@icu_56@@YAHPBQBDHHPBD@Z ;	icu_56::binarySearch(char const	* const	*,int,int,char const *)
		add	esp, 10h
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0FFFFFFFFh
		jz	short loc_498E
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	edx, [ebp+var_14]
		sub	edx, ds:_gOffsets[ecx*4]
		mov	eax, [ebp+var_8]
		mov	[eax+8], edx
		jmp	short loc_49BB
; ---------------------------------------------------------------------------

loc_498E:				; CODE XREF: icu_56::MeasureUnit::initCurrency(char const *)+A4j
		push	1
		mov	eax, [ebp+Source]
		push	eax
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	esi, esp
		push	4		; Count
		mov	ecx, [ebp+Source]
		push	ecx		; Source
		mov	edx, [ebp+var_8]
		add	edx, 0Ch
		push	edx		; Dest
		call	dword ptr ds:__imp__strncpy
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_49BB:				; CODE XREF: icu_56::MeasureUnit::initCurrency(char const *)+BCj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?initCurrency@MeasureUnit@icu_56@@IAEXPBD@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 49D4h
		public ?__LINE__Var@?1??initCurrency@MeasureUnit@icu_56@@IAEXPBD@Z@4JA
; long `protected: void	__thiscall icu_56::MeasureUnit::initCurrency(char const	*)'::`2'::__LINE__Var
?__LINE__Var@?1??initCurrency@MeasureUnit@icu_56@@IAEXPBD@Z@4JA	dd offset byte_4B3
					; DATA XREF: icu_56::MeasureUnit::initCurrency(char const *)+42r
_data		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 49D8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall icu_56::MeasureUnit::setTo(icu_56::MeasureUnit *this,	int, int)
		public ?setTo@MeasureUnit@icu_56@@AAEXHH@Z
?setTo@MeasureUnit@icu_56@@AAEXHH@Z proc near
					; CODE XREF: icu_56::MeasureUnit::getAvailable(icu_56::MeasureUnit *,int,UErrorCode &)+B7p
					; icu_56::MeasureUnit::getAvailable(char const *,icu_56::MeasureUnit *,int,UErrorCode &)+B4p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	[eax+4], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_4]
		mov	[eax+8], ecx
		mov	eax, [ebp+var_8]
		mov	byte ptr [eax+0Ch], 0
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	8
?setTo@MeasureUnit@icu_56@@AAEXHH@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4A20h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall icu_56::MeasureUnit::getOffset(icu_56::MeasureUnit *__hidden this)
		public ?getOffset@MeasureUnit@icu_56@@ABEHXZ
?getOffset@MeasureUnit@icu_56@@ABEHXZ proc near
					; CODE XREF: icu_56::MeasureUnit::getSubtype(void)+31p
					; icu_56::MeasureUnit::resolveUnitPerUnit(icu_56::MeasureUnit const &,icu_56::MeasureUnit const	&)+40p	...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+4]
		mov	eax, ds:_gOffsets[ecx*4]
		mov	edx, [ebp+var_8]
		add	eax, [edx+8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?getOffset@MeasureUnit@icu_56@@ABEHXZ endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; _DWORD __thiscall icu_56::UObject::UObject(icu_56::UObject *__hidden this)
		extrn __imp_??0UObject@icu_56@@QAE@XZ:near
					; CODE XREF: icu_56::MeasureUnit::MeasureUnit(void)+28p
					; icu_56::MeasureUnit::MeasureUnit(int,int)+28p ...
		extrn __RTC_CheckEsp:near
					; CODE XREF: icu_56::MeasureUnit::MeasureUnit(void)+30p
					; icu_56::MeasureUnit::MeasureUnit(void)+67p ...
; const	type_info::`vftable'
		extrn ??_7type_info@@6B@:near
					; DATA XREF: .data:icu_56::MeasureUnit `RTTI Type Descriptor'o
					; .data:icu_56::UObject	`RTTI Type Descriptor'o ...
; void __cdecl icu_56::UMemory::operator delete(void *)
		extrn __imp_??3UMemory@icu_56@@SAXPAX@Z:near
					; CODE XREF: icu_56::MeasureUnit::`scalar deleting destructor'(uint)+39p
					; icu_56::MeasureUnit::`vector deleting	destructor'(uint)+81p ...
; void __cdecl icu_56::UMemory::operator delete[](void *)
		extrn __imp_??_VUMemory@icu_56@@SAXPAX@Z:near
					; CODE XREF: icu_56::MeasureUnit::`vector deleting destructor'(uint)+53p
					; DATA XREF: icu_56::MeasureUnit::`vector deleting destructor'(uint)+53r
; void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *))
		extrn ??_M@YGXPAXIHP6EX0@Z@Z:near
					; CODE XREF: icu_56::MeasureUnit::`vector deleting destructor'(uint)+3Dp
; char *__cdecl	strcpy(char *Dest, const char *Source)
		extrn _strcpy:near	; CODE XREF: icu_56::MeasureUnit::MeasureUnit(icu_56::MeasureUnit const	&)+64p
					; icu_56::MeasureUnit::operator=(icu_56::MeasureUnit const &)+56p
; void *__cdecl	static icu_56::UMemory::operator new(unsigned int)
		extrn __imp_??2UMemory@icu_56@@SAPAXI@Z:near
					; CODE XREF: icu_56::MeasureUnit::clone(void)+46p
					; icu_56::MeasureUnit::getAvailableTypes(UErrorCode &)+7Fp ...
		extrn ___security_cookie:near
					; DATA XREF: icu_56::MeasureUnit::clone(void)+2Er
					; icu_56::MeasureUnit::getAvailableTypes(UErrorCode &)+2Cr ...
		extrn ___CxxFrameHandler3:near
					; CODE XREF: __ehhandler$?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ+19j
					; __ehhandler$?getAvailableTypes@MeasureUnit@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z+19j ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: __ehhandler$?clone@MeasureUnit@icu_56@@UBEPAVUObject@2@XZ+Fp
					; __ehhandler$?getAvailableTypes@MeasureUnit@icu_56@@SAPAVStringEnumeration@2@AAW4UErrorCode@@@Z+Fp ...
; _DWORD __thiscall icu_56::UObject::~UObject(icu_56::UObject *__hidden	this)
		extrn __imp_??1UObject@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::MeasureUnit::~MeasureUnit(void)+31p
					; DATA XREF: icu_56::MeasureUnit::~MeasureUnit(void)+31r
; int __cdecl strcmp(const char	*Str1, const char *Str2)
		extrn _strcmp:near	; CODE XREF: icu_56::MeasureUnit::operator==(icu_56::UObject const &)+97p
					; icu_56::binarySearch(char const * const *,int,int,char const *)+42p
; __declspec(dllimport)	public:	bool __thiscall	type_info::operator!=(class type_info const &)const
		extrn __imp_??9type_info@@QBE_NABV0@@Z:near
					; CODE XREF: icu_56::MeasureUnit::operator==(icu_56::UObject const &)+4Fp
					; DATA XREF: icu_56::MeasureUnit::operator==(icu_56::UObject const &)+4Fr
		extrn ___RTtypeid:near	; CODE XREF: icu_56::MeasureUnit::operator==(icu_56::UObject const &)+36p
					; icu_56::MeasureUnit::operator==(icu_56::UObject const	&)+45p
; void __cdecl __wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
		extrn __imp___wassert:near
					; CODE XREF: icu_56::MeasureUnit::getAvailable(icu_56::MeasureUnit *,int,UErrorCode &)+E7p
					; icu_56::MeasureUnit::initTime(char const *)+57p ...
; _DWORD __thiscall icu_56::UStringEnumeration::UStringEnumeration(icu_56::UStringEnumeration *__hidden	this, struct UEnumeration *)
		extrn __imp_??0UStringEnumeration@icu_56@@QAE@PAUUEnumeration@@@Z:near
					; CODE XREF: icu_56::MeasureUnit::getAvailableTypes(UErrorCode &)+B1p
					; DATA XREF: icu_56::MeasureUnit::getAvailableTypes(UErrorCode &)+B1r
		extrn _uenum_close_56:near
					; CODE XREF: icu_56::MeasureUnit::getAvailableTypes(UErrorCode &)+6Cp
					; icu_56::MeasureUnit::getAvailableTypes(UErrorCode &)+111p
		extrn _uenum_openCharStringsEnumeration_56:near
					; CODE XREF: icu_56::MeasureUnit::getAvailableTypes(UErrorCode &)+48p
; public: virtual void * __thiscall icu_56::UStringEnumeration::`scalar	deleting destructor'(unsigned int)
		extrn ??_GUStringEnumeration@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::UStringEnumeration::`vector	deleting destructor'(unsigned int)
		extrn ??_EUStringEnumeration@icu_56@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:const icu_56::UStringEnumeration::`local vftable'o
; public: virtual void * __thiscall icu_56::UStringEnumeration::getDynamicClassID(void)const
		extrn ?getDynamicClassID@UStringEnumeration@icu_56@@UBEPAXXZ:near
					; DATA XREF: .rdata:000042BCo
; public: virtual class	icu_56::StringEnumeration * __thiscall icu_56::StringEnumeration::clone(void)const
		extrn ?clone@StringEnumeration@icu_56@@UBEPAV12@XZ:near
					; DATA XREF: .rdata:000042C0o
; public: virtual int __thiscall icu_56::UStringEnumeration::count(enum	 UErrorCode &)const
		extrn ?count@UStringEnumeration@icu_56@@UBEHAAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:000042C4o
; public: virtual char const * __thiscall icu_56::UStringEnumeration::next(int *, enum	UErrorCode &)
		extrn ?next@UStringEnumeration@icu_56@@UAEPBDPAHAAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:000042C8o
; public: virtual wchar_t const	* __thiscall icu_56::StringEnumeration::unext(int *, enum  UErrorCode &)
		extrn ?unext@StringEnumeration@icu_56@@UAEPB_WPAHAAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:000042CCo
; public: virtual class	icu_56::UnicodeString const * __thiscall icu_56::UStringEnumeration::snext(enum	 UErrorCode &)
		extrn ?snext@UStringEnumeration@icu_56@@UAEPBVUnicodeString@2@AAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:000042D0o
; public: virtual void __thiscall icu_56::UStringEnumeration::reset(enum  UErrorCode &)
		extrn ?reset@UStringEnumeration@icu_56@@UAEXAAW4UErrorCode@@@Z:near
					; DATA XREF: .rdata:000042D4o
; public: virtual signed char __thiscall icu_56::StringEnumeration::operator==(class icu_56::StringEnumeration const &)const
		extrn ??8StringEnumeration@icu_56@@UBECABV01@@Z:near
					; DATA XREF: .rdata:000042D8o
; public: virtual signed char __thiscall icu_56::StringEnumeration::operator!=(class icu_56::StringEnumeration const &)const
		extrn ??9StringEnumeration@icu_56@@UBECABV01@@Z:near
					; DATA XREF: .rdata:000042DCo
; _DWORD __thiscall icu_56::UStringEnumeration::~UStringEnumeration(icu_56::UStringEnumeration *__hidden this)
		extrn __imp_??1UStringEnumeration@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::UStringEnumeration::`scalar deleting destructor'(uint)+28p
					; DATA XREF: icu_56::UStringEnumeration::`scalar deleting destructor'(uint)+28r
; char *__cdecl	_strncpy(char *Dest, const char	*Source, size_t	Count)
		extrn __imp__strncpy:near
					; CODE XREF: icu_56::MeasureUnit::initCurrency(char const *)+DBp
					; DATA XREF: icu_56::MeasureUnit::initCurrency(char const *)+DBr
		extrn _uprv_checkValidMemory:near
					; CODE XREF: icu_56::MeasureUnit::initCurrency(char const *)+C4p


		end
