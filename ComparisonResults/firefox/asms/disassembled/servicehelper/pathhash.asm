;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	7362E62DFF7672C7843669E8953AFC7B
; Input	CRC32 :	B98FF34A

; File Name   :	D:\compspace\objfiles\firefox\servicehelper\pathhash.obj
; Format      :	COFF (X386MAGIC)
; includelib "uuid.lib"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl BinaryDataToHexString(unsigned char const *, unsigned long &, wchar_t *)
?BinaryDataToHexString@@YAXPBEAAKPA_W@Z	proc near
					; CODE XREF: CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+18Fp

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_8], eax
		mov	[ebp+var_14], 0
		jmp	short loc_36
; ---------------------------------------------------------------------------

loc_2D:					; CODE XREF: BinaryDataToHexString(uchar const *,ulong &,wchar_t *)+6Ej
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax

loc_36:					; CODE XREF: BinaryDataToHexString(uchar const *,ulong &,wchar_t *)+2Bj
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_14]
		cmp	ecx, [eax]
		jnb	short loc_70
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+var_14]
		movzx	ecx, byte ptr [eax]
		mov	esi, esp
		push	ecx
		push	offset ??_C@_19LOMEABKM@?$AA?$CF?$AA?4?$AA2?$AAx?$AA?$AA@ ; "%.2x"
		mov	edx, [ebp+var_8]
		push	edx		; LPWSTR
		call	dword ptr ds:__imp__wsprintfW
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		add	eax, 4
		mov	[ebp+var_8], eax
		jmp	short loc_2D
; ---------------------------------------------------------------------------

loc_70:					; CODE XREF: BinaryDataToHexString(uchar const *,ulong &,wchar_t *)+3Ej
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?BinaryDataToHexString@@YAXPBEAAKPA_W@Z	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 84h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl CalculateMD5(BYTE	*pbData, DWORD dwDataLen, int, BYTE *)
?CalculateMD5@@YAHPBDKPAPAEAAK@Z proc near
					; CODE XREF: CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+101p

var_F0		= byte ptr -0F0h
var_EC		= dword	ptr -0ECh
pdwDataLen	= dword	ptr -20h
phHash		= dword	ptr -14h
phProv		= dword	ptr -8
pbData		= dword	ptr  8
dwDataLen	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0F0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_F0]
		mov	ecx, 3Ch ; '<'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+phProv], 0
		mov	[ebp+phHash], 0
		mov	esi, esp
		push	0F0000000h	; dwFlags
		push	1		; dwProvType
		push	0		; szProvider
		push	0		; szContainer
		lea	eax, [ebp+phProv]
		push	eax		; phProv
		call	dword ptr ds:__imp__CryptAcquireContextW@20 ; CryptAcquireContextW(x,x,x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jnz	short loc_118
		mov	esi, esp
		call	dword ptr ds:__imp__GetLastError@0 ; GetLastError()
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	eax, 80090016h
		jz	short loc_EF
		xor	eax, eax
		jmp	loc_233
; ---------------------------------------------------------------------------

loc_EF:					; CODE XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+62j
		mov	esi, esp
		push	0F0000008h	; dwFlags
		push	1		; dwProvType
		push	0		; szProvider
		push	0		; szContainer
		lea	eax, [ebp+phProv]
		push	eax		; phProv
		call	dword ptr ds:__imp__CryptAcquireContextW@20 ; CryptAcquireContextW(x,x,x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jnz	short loc_118
		xor	eax, eax
		jmp	loc_233
; ---------------------------------------------------------------------------

loc_118:				; CODE XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+4Cj
					; CalculateMD5(char const *,ulong,uchar	* *,ulong &)+8Bj
		mov	esi, esp
		lea	eax, [ebp+phHash]
		push	eax		; phHash
		push	0		; dwFlags
		push	0		; hKey
		push	8003h		; Algid
		mov	ecx, [ebp+phProv]
		push	ecx		; hProv
		call	dword ptr ds:__imp__CryptCreateHash@20 ; CryptCreateHash(x,x,x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jnz	short loc_143
		xor	eax, eax
		jmp	loc_233
; ---------------------------------------------------------------------------

loc_143:				; CODE XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+B6j
		mov	esi, esp
		push	0		; dwFlags
		mov	eax, [ebp+dwDataLen]
		push	eax		; dwDataLen
		mov	ecx, [ebp+pbData]
		push	ecx		; pbData
		mov	edx, [ebp+phHash]
		push	edx		; hHash
		call	dword ptr ds:__imp__CryptHashData@16 ; CryptHashData(x,x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jnz	short loc_16B
		xor	eax, eax
		jmp	loc_233
; ---------------------------------------------------------------------------

loc_16B:				; CODE XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+DEj
		mov	[ebp+pdwDataLen], 4
		mov	esi, esp
		push	0		; dwFlags
		lea	eax, [ebp+pdwDataLen]
		push	eax		; pdwDataLen
		mov	ecx, [ebp+arg_C]
		push	ecx		; pbData
		push	4		; dwParam
		mov	edx, [ebp+phHash]
		push	edx		; hHash
		call	dword ptr ds:__imp__CryptGetHashParam@20 ; CryptGetHashParam(x,x,x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jnz	short loc_19C
		xor	eax, eax
		jmp	loc_233
; ---------------------------------------------------------------------------

loc_19C:				; CODE XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+10Fj
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx		; unsigned int
		call	??2@YAPAXI@Z	; operator new(uint)
		add	esp, 4
		mov	[ebp+var_EC], eax
		mov	edx, [ebp+arg_8]
		mov	eax, [ebp+var_EC]
		mov	[edx], eax
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx		; Size
		push	0		; Val
		mov	edx, [ebp+arg_8]
		mov	eax, [edx]
		push	eax		; Dst
		call	_memset
		add	esp, 0Ch
		mov	esi, esp
		push	0		; dwFlags
		mov	eax, [ebp+arg_C]
		push	eax		; pdwDataLen
		mov	ecx, [ebp+arg_8]
		mov	edx, [ecx]
		push	edx		; pbData
		push	2		; dwParam
		mov	eax, [ebp+phHash]
		push	eax		; hHash
		call	dword ptr ds:__imp__CryptGetHashParam@20 ; CryptGetHashParam(x,x,x,x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jnz	short loc_1FA
		xor	eax, eax
		jmp	short loc_233
; ---------------------------------------------------------------------------

loc_1FA:				; CODE XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+170j
		cmp	[ebp+phHash], 0
		jz	short loc_213
		mov	esi, esp
		mov	eax, [ebp+phHash]
		push	eax		; hHash
		call	dword ptr ds:__imp__CryptDestroyHash@4 ; CryptDestroyHash(x)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_213:				; CODE XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+17Aj
		cmp	[ebp+phProv], 0
		jz	short loc_22E
		mov	esi, esp
		push	0		; dwFlags
		mov	eax, [ebp+phProv]
		push	eax		; hProv
		call	dword ptr ds:__imp__CryptReleaseContext@8 ; CryptReleaseContext(x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_22E:				; CODE XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+193j
		mov	eax, 1

loc_233:				; CODE XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+66j
					; CalculateMD5(char const *,ulong,uchar	* *,ulong &)+8Fj ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN16
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0F0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?CalculateMD5@@YAHPBDKPAPAEAAK@Z endp

; ---------------------------------------------------------------------------
$LN16		dd 3			; DATA XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+1B3o
		dd offset $LN15
$LN15		dd 0FFFFFFF8h, 4	; DATA XREF: .text$mn:0000025Co
		dd offset $LN12		; "hProv"
		dd 0FFFFFFECh, 4
		dd offset $LN13		; "hHash"
		dd 0FFFFFFE0h, 4
		dd offset $LN14		; "dwCount"
$LN14		db 'dwCount',0          ; DATA XREF: .text$mn:00000280o
$LN13		db 'hHash',0            ; DATA XREF: .text$mn:00000274o
$LN12		db 'hProv',0            ; DATA XREF: .text$mn:00000268o
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 298h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl CalculateRegistryPathFromFilePath(const wchar_t *const Str, wchar_t *Dest)
		public ?CalculateRegistryPathFromFilePath@@YAHQB_WPA_W@Z
?CalculateRegistryPathFromFilePath@@YAHQB_WPA_W@Z proc near

var_12C		= byte ptr -12Ch
var_128		= dword	ptr -128h
var_11C		= dword	ptr -11Ch
var_110		= dword	ptr -110h
var_104		= dword	ptr -104h
Source		= dword	ptr -38h
var_2C		= byte ptr -2Ch
var_20		= dword	ptr -20h
Dst		= dword	ptr -14h
var_8		= dword	ptr -8
Str		= dword	ptr  8
Dest		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 12Ch
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_12C]
		mov	ecx, 4Bh ; 'K'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	esi, esp
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	dword ptr ds:__imp__wcslen
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jnz	short loc_2DC
		xor	eax, eax
		jmp	loc_44C
; ---------------------------------------------------------------------------

loc_2DC:				; CODE XREF: CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+3Bj
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+Str]
		movzx	edx, word ptr [ecx+eax*2-2]
		cmp	edx, 5Ch ; '\'
		jz	short loc_2FC
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+Str]
		movzx	edx, word ptr [ecx+eax*2-2]
		cmp	edx, 2Fh ; '/'
		jnz	short loc_305

loc_2FC:				; CODE XREF: CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+52j
		mov	eax, [ebp+var_8]
		sub	eax, 1
		mov	[ebp+var_8], eax

loc_305:				; CODE XREF: CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+62j
		mov	eax, [ebp+var_8]
		add	eax, 2
		xor	ecx, ecx
		mov	edx, 2
		mul	edx
		seto	cl
		neg	ecx
		or	ecx, eax
		push	ecx		; unsigned int
		call	??2@YAPAXI@Z	; operator new(uint)
		add	esp, 4
		mov	[ebp+var_128], eax
		mov	eax, [ebp+var_128]
		mov	[ebp+Dst], eax
		mov	eax, [ebp+var_8]
		lea	ecx, [eax+eax+4]
		push	ecx		; Size
		push	0		; Val
		mov	edx, [ebp+Dst]
		push	edx		; Dst
		call	_memset
		add	esp, 0Ch
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	esi, esp
		push	eax		; Count
		mov	ecx, [ebp+Str]
		push	ecx		; Source
		mov	edx, [ebp+Dst]
		push	edx		; Dest
		call	dword ptr ds:__imp__wcsncpy
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+Dst]
		push	eax		; String
		call	dword ptr ds:__imp___wcslwr
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	dword ptr [ebp+var_2C],	0
		lea	eax, [ebp+var_2C]
		push	eax		; BYTE *
		lea	ecx, [ebp+var_20]
		push	ecx		; int
		mov	edx, [ebp+var_8]
		shl	edx, 1
		push	edx		; dwDataLen
		mov	eax, [ebp+Dst]
		push	eax		; pbData
		call	?CalculateMD5@@YAHPBDKPAPAEAAK@Z ; CalculateMD5(char const *,ulong,uchar * *,ulong &)
		add	esp, 10h
		test	eax, eax
		jnz	short loc_3C4
		mov	eax, [ebp+Dst]
		mov	[ebp+var_11C], eax
		mov	ecx, [ebp+var_11C]
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4
		xor	eax, eax
		jmp	loc_44C
; ---------------------------------------------------------------------------

loc_3C4:				; CODE XREF: CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+10Bj
		mov	eax, [ebp+Dst]
		mov	[ebp+var_110], eax
		mov	ecx, [ebp+var_110]
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4
		mov	[ebp+Source], offset ??_C@_1EK@FHBKBBLP@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAM?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAM?$AAa?$AAi?$AAn?$AAt?$AAe?$AAn?$AAa?$AAn?$AAc?$AAe?$AAS?$AAe?$AAr?$AAv@ ; "SOFTWARE\\Mozilla\\MaintenanceService\\"
		mov	esi, esp
		push	104h		; Count
		mov	eax, [ebp+Source]
		push	eax		; Source
		mov	ecx, [ebp+Dest]
		push	ecx		; Dest
		call	dword ptr ds:__imp__wcsncpy
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+Source]
		push	eax		; Str
		call	dword ptr ds:__imp__wcslen
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+Dest]
		lea	edx, [ecx+eax*2]
		push	edx
		lea	eax, [ebp+var_2C]
		push	eax
		mov	ecx, [ebp+var_20]
		push	ecx
		call	?BinaryDataToHexString@@YAXPBEAAKPA_W@Z	; BinaryDataToHexString(uchar const *,ulong &,wchar_t *)
		add	esp, 0Ch
		mov	eax, [ebp+var_20]
		mov	[ebp+var_104], eax
		mov	ecx, [ebp+var_104]
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4
		mov	eax, 1

loc_44C:				; CODE XREF: CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+3Fj
					; CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+127j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN10
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 12Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?CalculateRegistryPathFromFilePath@@YAHQB_WPA_W@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN10		dd 2			; DATA XREF: CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+1B8o
		dd offset $LN9
$LN9		dd 0FFFFFFE0h, 4	; DATA XREF: .text$mn:00000478o
		dd offset $LN7		; "hash"
		dd 0FFFFFFD4h, 4
		dd offset $LN8		; "hashSize"
$LN8		db 'hashSize',0         ; DATA XREF: .text$mn:00000490o
$LN7		db 'hash',0             ; DATA XREF: .text$mn:00000484o
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4A4h
		public ??_C@_19LOMEABKM@?$AA?$CF?$AA?4?$AA2?$AAx?$AA?$AA@
; const	WCHAR `string'
??_C@_19LOMEABKM@?$AA?$CF?$AA?4?$AA2?$AAx?$AA?$AA@:
					; DATA XREF: BinaryDataToHexString(uchar const *,ulong &,wchar_t *)+4Co
		unicode	0, <%.2x>,0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 4B0h
		public ??_C@_1EK@FHBKBBLP@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAM?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAM?$AAa?$AAi?$AAn?$AAt?$AAe?$AAn?$AAa?$AAn?$AAc?$AAe?$AAS?$AAe?$AAr?$AAv@
; `string'
??_C@_1EK@FHBKBBLP@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAM?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAM?$AAa?$AAi?$AAn?$AAt?$AAe?$AAn?$AAa?$AAn?$AAc?$AAe?$AAS?$AAe?$AAr?$AAv@:
					; DATA XREF: CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+144o
		unicode	0, <SOFTWARE\Mozilla\MaintenanceService\>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 4FCh
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 500h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; void *__cdecl	operator new(unsigned int)
		extrn ??2@YAPAXI@Z:near	; CODE XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+11Ep
					; CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+84p
; void __cdecl operator	delete(void *)
		extrn ??3@YAXPAX@Z:near	; CODE XREF: CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+11Dp
					; CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+13Cp ...
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn _memset:near	; CODE XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+145p
					; CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+A9p
; size_t __cdecl _wcslen(const wchar_t *Str)
		extrn __imp__wcslen:near
					; CODE XREF: CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+24p
					; CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+170p
					; DATA XREF: ...
; wchar_t *__cdecl _wcsncpy(wchar_t *Dest, const wchar_t *Source, size_t Count)
		extrn __imp__wcsncpy:near
					; CODE XREF: CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+C2p
					; CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+15Ap
					; DATA XREF: ...
; wchar_t *__cdecl __wcslwr(wchar_t *String)
		extrn __imp___wcslwr:near
					; CODE XREF: CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+D8p
					; DATA XREF: CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+D8r
; DWORD	__stdcall GetLastError()
		extrn __imp__GetLastError@0:near
					; CODE XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+50p
					; DATA XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+50r
; int _wsprintfW(LPWSTR, LPCWSTR, ...)
		extrn __imp__wsprintfW:near
					; CODE XREF: BinaryDataToHexString(uchar const *,ulong &,wchar_t *)+55p
					; DATA XREF: BinaryDataToHexString(uchar const *,ulong &,wchar_t *)+55r
; BOOL __stdcall CryptAcquireContextW(HCRYPTPROV *phProv, LPCWSTR szContainer, LPCWSTR szProvider, DWORD dwProvType, DWORD dwFlags)
		extrn __imp__CryptAcquireContextW@20:near
					; CODE XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+3Dp
					; CalculateMD5(char const *,ulong,uchar	* *,ulong &)+7Cp
					; DATA XREF: ...
; BOOL __stdcall CryptReleaseContext(HCRYPTPROV	hProv, DWORD dwFlags)
		extrn __imp__CryptReleaseContext@8:near
					; CODE XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+19Dp
					; DATA XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+19Dr
; BOOL __stdcall CryptGetHashParam(HCRYPTHASH hHash, DWORD dwParam, BYTE *pbData, DWORD	*pdwDataLen, DWORD dwFlags)
		extrn __imp__CryptGetHashParam@20:near
					; CODE XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+100p
					; CalculateMD5(char const *,ulong,uchar	* *,ulong &)+161p
					; DATA XREF: ...
; BOOL __stdcall CryptCreateHash(HCRYPTPROV hProv, ALG_ID Algid, HCRYPTKEY hKey, DWORD dwFlags,	HCRYPTHASH *phHash)
		extrn __imp__CryptCreateHash@20:near
					; CODE XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+A7p
					; DATA XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+A7r
; BOOL __stdcall CryptHashData(HCRYPTHASH hHash, const BYTE *pbData, DWORD dwDataLen, DWORD dwFlags)
		extrn __imp__CryptHashData@16:near
					; CODE XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+CFp
					; DATA XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+CFr
; BOOL __stdcall CryptDestroyHash(HCRYPTHASH hHash)
		extrn __imp__CryptDestroyHash@4:near
					; CODE XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+182p
					; DATA XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+182r
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near
					; CODE XREF: CalculateMD5(char const *,ulong,uchar * *,ulong &)+1B9p
					; CalculateRegistryPathFromFilePath(wchar_t const * const,wchar_t *)+1BEp
		extrn __RTC_CheckEsp:near
					; CODE XREF: BinaryDataToHexString(uchar const *,ulong &,wchar_t *)+60p
					; BinaryDataToHexString(uchar const *,ulong &,wchar_t *)+7Bp ...
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo


		end
