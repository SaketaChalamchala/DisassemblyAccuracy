;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	56F97953172790E07DB185A299F69BE3
; Input	CRC32 :	FFEC8DE1

; File Name   :	D:\compspace\objfiles\firefox\icuinfo\icuinfo.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		public ??_C@_03PJHHNEEI@xml?$AA@
; `string'
??_C@_03PJHHNEEI@xml?$AA@ dd 6C6D78h	; DATA XREF: .data:000000D4o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4
		public ??_C@_07NCDIDCDG@cleanup?$AA@
; `string'
??_C@_07NCDIDCDG@cleanup?$AA@ db 'cleanup',0 ; DATA XREF: .data:000000C0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0Ch
		public ??_C@_0BA@OAEDIKLC@milisecond?9time?$AA@
; `string'
??_C@_0BA@OAEDIKLC@milisecond?9time?$AA@ db 'milisecond-time',0 ; DATA XREF: .data:000000ACo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1Ch
		public ??_C@_0N@KKCLAMBN@list?9plugins?$AA@
; `string'
??_C@_0N@KKCLAMBN@list?9plugins?$AA@ db	'list-plugins',0 ; DATA XREF: .data:00000098o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2Ch
		public ??_C@_07KBAMPNJK@verbose?$AA@
; `string'
??_C@_07KBAMPNJK@verbose?$AA@ db 'verbose',0 ; DATA XREF: .data:00000084o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 34h
		public ??_C@_0L@JMMPKMPC@icudatadir?$AA@
; `string'
??_C@_0L@JMMPKMPC@icudatadir?$AA@ db 'icudatadir',0 ; DATA XREF: .data:00000070o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 40h
		public ??_C@_04PCJFHION@help?$AA@
; `string'
??_C@_04PCJFHION@help?$AA@ db 'help',0  ; DATA XREF: .data:_optionso
					; .data:0000005Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 48h
_options	dd offset ??_C@_04PCJFHION@help?$AA@ ; DATA XREF: _main+29o
					; "help"
		dd 3 dup(0)
		db 68h,	0
byte_5A		db 0			; DATA XREF: _main:loc_593r
		align 4
		dd offset ??_C@_04PCJFHION@help?$AA@ ; "help"
		dd 3 dup(0)
		db 3Fh,	0
byte_6E		db 0			; DATA XREF: _main+8Ar
		align 10h
		dd offset ??_C@_0L@JMMPKMPC@icudatadir?$AA@ ; "icudatadir"
dword_74	dd 0			; DATA XREF: _main+140r
		align 10h
		db 69h,	1
byte_82		db 0			; DATA XREF: _main:loc_649r
		align 4
		dd offset ??_C@_07KBAMPNJK@verbose?$AA@	; "verbose"
		dd 3 dup(0)
		db 76h,	0
byte_96		db 0			; DATA XREF: _main:loc_68Ar
		align 4
		dd offset ??_C@_0N@KKCLAMBN@list?9plugins?$AA@ ; "list-plugins"
		dd 3 dup(0)
		db 4Ch,	0
byte_AA		db 0			; DATA XREF: _main:loc_676r
		align 4
		dd offset ??_C@_0BA@OAEDIKLC@milisecond?9time?$AA@ ; "milisecond-time"
		dd 3 dup(0)
		db 6Dh,	0
byte_BE		db 0			; DATA XREF: _main:loc_662r
		align 10h
		dd offset ??_C@_07NCDIDCDG@cleanup?$AA@	; "cleanup"
		align 10h
		db 4Bh,	0
byte_D2		db 0			; DATA XREF: _main:loc_754r
		align 4
		dd offset ??_C@_03PJHHNEEI@xml?$AA@ ; `string'
; char *Filename
Filename	dd 0			; DATA XREF: _main+1A9r _main+1CAr
		dd 2 dup(0)
		db 78h,	1
byte_E6		db 0			; DATA XREF: _main:loc_6A7r
		align 4
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 0E8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
_initStatus	dd ?			; DATA XREF: cmd_version(signed	char,UErrorCode	&):loc_2A0r
					; do_init(void)+29o
_icuInitted	db ?			; DATA XREF: do_init(void)+1Er
					; do_init(void)+36w
		align 10h
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0F0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl cmd_millis()
		public ?cmd_millis@@YAXXZ
?cmd_millis@@YAXXZ proc	near		; CODE XREF: _main+159p

var_D4		= qword	ptr -0D4h
var_C0		= byte ptr -0C0h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		call	_uprv_getUTCtime_56
		mov	esi, esp
		sub	esp, 8
		fstp	[esp+0D4h+var_D4]
		push	offset ??_C@_0CA@GEHONGD@Milliseconds?5since?5Epoch?3?5?$CF?40f?6?$AA@ ; "Milliseconds since Epoch: %.0f\n"
		call	dword ptr ds:__imp__printf
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?cmd_millis@@YAXXZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 144h
		public ??_C@_0CA@GEHONGD@Milliseconds?5since?5Epoch?3?5?$CF?40f?6?$AA@
; char `string'[]
??_C@_0CA@GEHONGD@Milliseconds?5since?5Epoch?3?5?$CF?40f?6?$AA@	db 'Milliseconds since Epoch: %.0f',0Ah,0
					; DATA XREF: cmd_millis(void)+2Bo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 164h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 168h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 16Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl cmd_version(signed __int8, enum UErrorCode *)
		public ?cmd_version@@YAXCAAW4UErrorCode@@@Z
?cmd_version@@YAXCAAW4UErrorCode@@@Z proc near ; CODE XREF: _main+187p
					; _main+262p

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= word ptr -8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		call	?do_init@@YAXXZ	; do_init(void)
		mov	esi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	esi, esp
		call	__RTC_CheckEsp
		add	eax, 20h ; ' '
		push	eax
		call	_udbg_writeIcuInfo
		add	esp, 4
		mov	eax, 100h
		mov	[ebp+var_8], ax
		movzx	eax, byte ptr [ebp+var_8]
		test	eax, eax
		jnz	short loc_1BD
		jmp	short loc_1F7
; ---------------------------------------------------------------------------

loc_1BD:				; CODE XREF: cmd_version(signed	char,UErrorCode	&)+4Dj
		movzx	eax, byte ptr [ebp+var_8]
		mov	esi, esp
		push	eax
		push	0
		push	offset ??_C@_0DK@EEHNEJKO@?5?5error?3?5U_IS_BIG_ENDIAN?$DN?$CFd?5?$CB?$DN?5?$CF@ ; "  error: U_IS_BIG_ENDIAN=%d	!= %d=actua"...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 5

loc_1F7:				; CODE XREF: cmd_version(signed	char,UErrorCode	&)+4Fj
		mov	eax, 1
		test	eax, eax
		jz	short loc_202
		jmp	short loc_239
; ---------------------------------------------------------------------------

loc_202:				; CODE XREF: cmd_version(signed	char,UErrorCode	&)+92j
		mov	esi, esp
		push	2
		push	2
		push	offset ??_C@_0DE@JCDPBNNG@?5?5error?3?5U_SIZEOF_WCHAR_T?$DN?$CFd?5?$CB?$DN?5@ ;	"  error: U_SIZEOF_WCHAR_T=%d != %d=size"...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 5

loc_239:				; CODE XREF: cmd_version(signed	char,UErrorCode	&)+94j
		mov	eax, 1
		test	eax, eax
		jz	short loc_24B
		mov	[ebp+var_14], 0
		jmp	short loc_25F
; ---------------------------------------------------------------------------

loc_24B:				; CODE XREF: cmd_version(signed	char,UErrorCode	&)+D4j
		xor	eax, eax
		jz	short loc_258
		mov	[ebp+var_14], 1
		jmp	short loc_25F
; ---------------------------------------------------------------------------

loc_258:				; CODE XREF: cmd_version(signed	char,UErrorCode	&)+E1j
		mov	[ebp+var_14], 0FFFFFFFFh

loc_25F:				; CODE XREF: cmd_version(signed	char,UErrorCode	&)+DDj
					; cmd_version(signed char,UErrorCode &)+EAj
		cmp	[ebp+var_14], 0
		jnz	short loc_267
		jmp	short loc_2A0
; ---------------------------------------------------------------------------

loc_267:				; CODE XREF: cmd_version(signed	char,UErrorCode	&)+F7j
		mov	esi, esp
		mov	eax, [ebp+var_14]
		push	eax
		push	0
		push	offset ??_C@_0DK@HIABJOBO@?5?5error?3?5U_CHARSET_FAMILY?$DN?$CFd?5?$CB?$DN?5@ ;	"  error: U_CHARSET_FAMILY=%d != %d=actu"...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 5

loc_2A0:				; CODE XREF: cmd_version(signed	char,UErrorCode	&)+F9j
		mov	eax, ds:_initStatus
		push	eax
		call	_u_errorName_56
		add	esp, 4
		mov	esi, esp
		push	eax
		push	offset ??_C@_0CD@KONIPLD@?6?6ICU?5Initialization?5returned?3?5?$CF@ ; "\n\nICU Initialization returned:	%s\n"
		call	dword ptr ds:__imp__printf
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	offset ??_C@_0BH@IDEOJPJI@Plugins?5are?5disabled?4?6?$AA@ ; "Plugins are disabled.\n"
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN15
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?cmd_version@@YAXCAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN15		dd 1			; DATA XREF: cmd_version(signed	char,UErrorCode	&)+188o
		dd offset $LN14
$LN14		dd 0FFFFFFF8h, 2	; DATA XREF: .text:0000031Co
		dd offset $LN13
$LN13		db 75h,	0		; DATA XREF: .text:00000328o
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 330h
		public ??_C@_0BH@IDEOJPJI@Plugins?5are?5disabled?4?6?$AA@
; char `string'[]
??_C@_0BH@IDEOJPJI@Plugins?5are?5disabled?4?6?$AA@ db 'Plugins are disabled.',0Ah,0
					; DATA XREF: cmd_version(signed	char,UErrorCode	&)+15Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 348h
		public ??_C@_0CD@KONIPLD@?6?6ICU?5Initialization?5returned?3?5?$CF@
; char `string'[]
??_C@_0CD@KONIPLD@?6?6ICU?5Initialization?5returned?3?5?$CF@ db	0Ah
					; DATA XREF: cmd_version(signed	char,UErrorCode	&)+145o
		db 0Ah
		db 'ICU Initialization returned: %s',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 36Ch
		public ??_C@_0DK@HIABJOBO@?5?5error?3?5U_CHARSET_FAMILY?$DN?$CFd?5?$CB?$DN?5@
; char `string'[]
??_C@_0DK@HIABJOBO@?5?5error?3?5U_CHARSET_FAMILY?$DN?$CFd?5?$CB?$DN?5@ db '  error: U_CHARSET_FAMILY=%d != %d=actual charset family',0Ah,0
					; DATA XREF: cmd_version(signed	char,UErrorCode	&)+103o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3A8h
		public ??_C@_0DE@JCDPBNNG@?5?5error?3?5U_SIZEOF_WCHAR_T?$DN?$CFd?5?$CB?$DN?5@
; char `string'[]
??_C@_0DE@JCDPBNNG@?5?5error?3?5U_SIZEOF_WCHAR_T?$DN?$CFd?5?$CB?$DN?5@ db '  error: U_SIZEOF_WCHAR_T=%d != %d=sizeof(wchar_t)',0Ah,0
					; DATA XREF: cmd_version(signed	char,UErrorCode	&)+9Co
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3DCh
		public ??_C@_0DK@EEHNEJKO@?5?5error?3?5U_IS_BIG_ENDIAN?$DN?$CFd?5?$CB?$DN?5?$CF@
; char `string'[]
??_C@_0DK@EEHNEJKO@?5?5error?3?5U_IS_BIG_ENDIAN?$DN?$CFd?5?$CB?$DN?5?$CF@ db '  error: U_IS_BIG_ENDIAN=%d != %d=actual ',27h,'is big endian',27h,0Ah,0
					; DATA XREF: cmd_version(signed	char,UErrorCode	&)+5Ao
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 418h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl do_init(void)
?do_init@@YAXXZ	proc near		; CODE XREF: cmd_version(signed	char,UErrorCode	&)+1Ep

var_C0		= byte ptr -0C0h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		movsx	eax, ds:_icuInitted
		test	eax, eax
		jnz	short loc_455
		push	offset _initStatus
		call	_u_init_56
		add	esp, 4
		mov	ds:_icuInitted,	1

loc_455:				; CODE XREF: do_init(void)+27j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?do_init@@YAXXZ	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 46Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl cmd_cleanup()
		public ?cmd_cleanup@@YAXXZ
?cmd_cleanup@@YAXXZ proc near		; CODE XREF: _main+24Bp

var_C0		= byte ptr -0C0h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		call	_u_cleanup_56
		mov	esi, esp
		push	offset ??_C@_0BJ@NCHDPMLP@ICU?5u_cleanup?$CI?$CJ?5called?4?6?$AA@ ; "ICU u_cleanup() called.\n"
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 20h ; ' '
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?cmd_cleanup@@YAXXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4D0h
		public ??_C@_0BJ@NCHDPMLP@ICU?5u_cleanup?$CI?$CJ?5called?4?6?$AA@
; char `string'[]
??_C@_0BJ@NCHDPMLP@ICU?5u_cleanup?$CI?$CJ?5called?4?6?$AA@ db 'ICU u_cleanup() called.',0Ah,0
					; DATA XREF: cmd_cleanup(void)+25o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4ECh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl cmd_listplugins()
		public ?cmd_listplugins@@YAXXZ
?cmd_listplugins@@YAXXZ	proc near	; CODE XREF: _main+16Dp

var_C0		= byte ptr -0C0h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?cmd_listplugins@@YAXXZ	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 514h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public _main
_main		proc near

var_E4		= byte ptr -0E4h
File		= dword	ptr -20h
var_11		= byte ptr -11h
var_8		= dword	ptr -8
argc		= dword	ptr  8
argv		= dword	ptr  0Ch
envp		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	[ebp+var_11], 0
		push	offset _options
		push	8
		mov	eax, [ebp+argv]
		push	eax
		mov	ecx, [ebp+argc]
		push	ecx
		call	_u_parseArgs
		add	esp, 10h
		mov	[ebp+argc], eax
		cmp	[ebp+argc], 0
		jge	short loc_593
		mov	eax, [ebp+argc]
		neg	eax
		mov	esi, esp
		mov	ecx, [ebp+argv]
		mov	edx, [ecx+eax*4]
		push	edx
		push	offset ??_C@_0CF@BGPNLJEE@error?5in?5command?5line?5argument?5?$CC@ ; "error in	command	line argument \"%s\"\n"
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_593:				; CODE XREF: _main+47j
		movsx	eax, ds:byte_5A
		test	eax, eax
		jnz	short loc_5AD
		movsx	eax, ds:byte_6E
		test	eax, eax
		jz	loc_649

loc_5AD:				; CODE XREF: _main+88j
		mov	esi, esp
		mov	eax, [ebp+argv]
		mov	ecx, [eax]
		push	ecx
		push	offset ??_C@_0CO@MEKMPGIM@?$CFs?3?5Output?5information?5about?5the@ ; "%s: Output information about the	curren"...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	offset ??_C@_0BPG@BAAPDFFE@Options?3?6?5?9h?5?5?5?5?5or?5?5?9?9help?5?5?5?5?5@ ; "Options:\n -h	    or	--help		 "...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	offset ??_C@_0GD@IBBFEJOD@?5Copyright?5?$CIC?$CJ?52015?0?5Internation@ ; " Copyright (C) 2015, International Busi"...
		push	offset ??_C@_04HBNCPEDB@56?41?$AA@ ; "56.1"
		push	offset ??_C@_0CM@KLGICPGA@International?5Components?5for?5Uni@ ; "International	Components for Unicode %s"...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		xor	eax, eax
		cmp	[ebp+argc], 0
		setl	al
		jmp	loc_78D
; ---------------------------------------------------------------------------

loc_649:				; CODE XREF: _main+93j
		movsx	eax, ds:byte_82
		test	eax, eax
		jz	short loc_662
		mov	eax, ds:dword_74
		push	eax
		call	_u_setDataDirectory_56
		add	esp, 4

loc_662:				; CODE XREF: _main+13Ej
		movsx	eax, ds:byte_BE
		test	eax, eax
		jz	short loc_676
		call	?cmd_millis@@YAXXZ ; cmd_millis(void)
		mov	[ebp+var_11], 1

loc_676:				; CODE XREF: _main+157j
		movsx	eax, ds:byte_AA
		test	eax, eax
		jz	short loc_68A
		call	?cmd_listplugins@@YAXXZ	; cmd_listplugins(void)
		mov	[ebp+var_11], 1

loc_68A:				; CODE XREF: _main+16Bj
		movsx	eax, ds:byte_96
		test	eax, eax
		jz	short loc_6A7
		lea	eax, [ebp+var_8]
		push	eax		; enum UErrorCode *
		push	0		; signed __int8
		call	?cmd_version@@YAXCAAW4UErrorCode@@@Z ; cmd_version(signed char,UErrorCode &)
		add	esp, 8
		mov	[ebp+var_11], 1

loc_6A7:				; CODE XREF: _main+17Fj
		movsx	eax, ds:byte_E6
		test	eax, eax
		jz	loc_754
		mov	esi, esp
		push	offset ??_C@_01NOFIACDB@w?$AA@ ; "w"
		mov	eax, ds:Filename
		push	eax		; Filename
		call	dword ptr ds:__imp__fopen
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+File], eax
		cmp	[ebp+File], 0
		jnz	short loc_713
		mov	esi, esp
		mov	eax, ds:Filename
		push	eax
		push	offset ??_C@_0CB@DBKIKLNG@ERR?3?5can?8t?5write?5to?5XML?5file?5?$CFs?6@	; "ERR:	can't write to XML file %s\n"
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, 1
		jmp	short loc_78D
; ---------------------------------------------------------------------------

loc_713:				; CODE XREF: _main+1C6j
		mov	esi, esp
		push	offset ??_C@_0CJ@NBLFLEIE@?$DM?$DPxml?5version?$DN?$CC1?40?$CC?5encoding?$DN?$CCUT@ ; "<?xml version=\"1.0\" encoding=\"UTF-8\"...
		mov	eax, [ebp+File]
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+File]
		push	eax
		call	_udbg_writeIcuInfo
		add	esp, 4
		mov	esi, esp
		mov	eax, [ebp+File]
		push	eax		; File
		call	dword ptr ds:__imp__fclose
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_11], 1

loc_754:				; CODE XREF: _main+19Cj
		movsx	eax, ds:byte_D2
		test	eax, eax
		jz	short loc_768
		call	?cmd_cleanup@@YAXXZ ; cmd_cleanup(void)
		mov	[ebp+var_11], 1

loc_768:				; CODE XREF: _main+249j
		movsx	eax, [ebp+var_11]
		test	eax, eax
		jnz	short loc_77E
		lea	eax, [ebp+var_8]
		push	eax		; enum UErrorCode *
		push	0		; signed __int8
		call	?cmd_version@@YAXCAAW4UErrorCode@@@Z ; cmd_version(signed char,UErrorCode &)
		add	esp, 8

loc_77E:				; CODE XREF: _main+25Aj
		mov	eax, [ebp+var_8]
		push	eax
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	eax, al

loc_78D:				; CODE XREF: _main+130j _main+1FDj
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN16
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_main		endp

; ---------------------------------------------------------------------------
		align 4
$LN16		dd 1			; DATA XREF: _main+27Do
		dd offset $LN15_0
$LN15_0		dd 0FFFFFFF8h, 4	; DATA XREF: .text:000007B8o
		dd offset $LN14_0	; "errorCode"
$LN14_0		db 'errorCode',0        ; DATA XREF: .text:000007C4o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7D4h
		public ??_C@_0CJ@NBLFLEIE@?$DM?$DPxml?5version?$DN?$CC1?40?$CC?5encoding?$DN?$CCUT@
; char `string'[]
??_C@_0CJ@NBLFLEIE@?$DM?$DPxml?5version?$DN?$CC1?40?$CC?5encoding?$DN?$CCUT@ db	'<?xml version="1.0" encoding="UTF-8" ?>',0Ah,0
					; DATA XREF: _main+201o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 800h
		public ??_C@_0CB@DBKIKLNG@ERR?3?5can?8t?5write?5to?5XML?5file?5?$CFs?6@
; char `string'[]
??_C@_0CB@DBKIKLNG@ERR?3?5can?8t?5write?5to?5XML?5file?5?$CFs?6@ db 'ERR: can',27h,'t write to XML file %s',0Ah,0
					; DATA XREF: _main+1D0o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 824h
		public ??_C@_01NOFIACDB@w?$AA@
; char `string'[2]
??_C@_01NOFIACDB@w?$AA@	db 'w',0        ; DATA XREF: _main+1A4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 828h
		public ??_C@_0CM@KLGICPGA@International?5Components?5for?5Uni@
; char `string'[]
??_C@_0CM@KLGICPGA@International?5Components?5for?5Uni@	db 'International Components for Unicode %s',0Ah
					; DATA XREF: _main+FFo
		db '%s',0Ah,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 854h
		public ??_C@_04HBNCPEDB@56?41?$AA@
; `string'
??_C@_04HBNCPEDB@56?41?$AA@ db '56.1',0 ; DATA XREF: _main+FAo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 85Ch
		public ??_C@_0GD@IBBFEJOD@?5Copyright?5?$CIC?$CJ?52015?0?5Internation@
; `string'
??_C@_0GD@IBBFEJOD@?5Copyright?5?$CIC?$CJ?52015?0?5Internation@	db ' Copyright (C) 2015, International Business Machines Corporation '
					; DATA XREF: _main+F5o
		db 'and others. All Rights Reserved. ',0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 8C0h
		public ??_C@_0BPG@BAAPDFFE@Options?3?6?5?9h?5?5?5?5?5or?5?5?9?9help?5?5?5?5?5@
; char `string'[]
??_C@_0BPG@BAAPDFFE@Options?3?6?5?9h?5?5?5?5?5or?5?5?9?9help?5?5?5?5?5@	db 'Options:',0Ah
					; DATA XREF: _main+CBo
		db ' -h     or  --help                 - Print this help message.',0Ah
		db ' -m     or  --millisecond-time     - Print the current UTC time i'
		db 'n milliseconds.',0Ah
		db ' -d <dir>   or  --icudatadir <dir> - Set the ICU Data Directory',0Ah
		db ' -v                                - Print version and configurat'
		db 'ion information about ICU',0Ah
		db ' -K         or  --cleanup          - Call u_cleanup() before exit'
		db 'ting (will attempt to unload plugins)',0Ah
		db 0Ah
		db 'If no arguments are given, the tool will print ICU version and co'
		db 'nfiguration information.',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AB8h
		public ??_C@_0CO@MEKMPGIM@?$CFs?3?5Output?5information?5about?5the@
; char `string'[]
??_C@_0CO@MEKMPGIM@?$CFs?3?5Output?5information?5about?5the@ db	'%s: Output information about the current ICU',0Ah,0
					; DATA XREF: _main+A1o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0AE8h
		public ??_C@_0CF@BGPNLJEE@error?5in?5command?5line?5argument?5?$CC@
; char `string'[]
??_C@_0CF@BGPNLJEE@error?5in?5command?5line?5argument?5?$CC@ db	'error in command line argument "%s"',0Ah,0
					; DATA XREF: _main+57o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0B10h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl U_FAILURE(enum  UErrorCode)
?U_FAILURE@@YACW4UErrorCode@@@Z	proc near ; CODE XREF: _main+26Ep

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		setnle	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?U_FAILURE@@YACW4UErrorCode@@@Z	endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; int _printf(const char *Format, ...)
		extrn __imp__printf:near ; CODE	XREF: cmd_millis(void)+30p
					; cmd_version(signed char,UErrorCode &)+14Ap
					; DATA XREF: ...
		extrn _uprv_getUTCtime_56:near ; CODE XREF: cmd_millis(void)+1Ep
		extrn __fltused:near
		extrn __RTC_CheckEsp:near ; CODE XREF: cmd_millis(void)+3Bp
					; cmd_millis(void)+4Bp	...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn _u_errorName_56:near
					; CODE XREF: cmd_version(signed	char,UErrorCode	&)+13Ap
; int _fprintf(FILE *File, const char *Format, ...)
		extrn __imp__fprintf:near
					; CODE XREF: cmd_version(signed	char,UErrorCode	&)+72p
					; cmd_version(signed char,UErrorCode &)+B4p ...
		extrn _udbg_writeIcuInfo:near
					; CODE XREF: cmd_version(signed	char,UErrorCode	&)+36p
					; _main+21Ep
; FILE *__cdecl	___iob_func()
		extrn __imp____iob_func:near
					; CODE XREF: cmd_version(signed	char,UErrorCode	&)+25p
					; cmd_version(signed char,UErrorCode &)+61p ...
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near
					; CODE XREF: cmd_version(signed	char,UErrorCode	&)+18Ep
					; _main+283p
		extrn _u_init_56:near	; CODE XREF: do_init(void)+2Ep
		extrn _u_cleanup_56:near ; CODE	XREF: cmd_cleanup(void)+1Ep
; int __cdecl _fclose(FILE *File)
		extrn __imp__fclose:near ; CODE	XREF: _main+22Cp
					; DATA XREF: _main+22Cr
; FILE *__cdecl	_fopen(const char *Filename, const char	*Mode)
		extrn __imp__fopen:near	; CODE XREF: _main+1AFp
					; DATA XREF: _main+1AFr
		extrn _u_setDataDirectory_56:near ; CODE XREF: _main+146p
		extrn _u_parseArgs:near	; CODE XREF: _main+38p


		end
