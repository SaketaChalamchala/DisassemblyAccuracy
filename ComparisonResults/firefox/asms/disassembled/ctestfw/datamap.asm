;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	1319085564C6C3044DB71F00AD3A90BD
; Input	CRC32 :	8A49CEA1

; File Name   :	D:\compspace\objfiles\firefox\ctestfw\datamap.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
;
; Exported entry
;

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall DataMap::DataMap(DataMap *this, const struct DataMap *)
		public ??0DataMap@@QAE@ABV0@@Z
??0DataMap@@QAE@ABV0@@Z	proc near	; CODE XREF: RBDataMap::RBDataMap(RBDataMap const &)+2Ap

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7DataMap@@6B@ ; const DataMap::`vftable'
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??0DataMap@@QAE@ABV0@@Z	endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 38h
		dd offset ??_R4DataMap@@6B@ ; const DataMap::`RTTI Complete Object Locator'
;
; Exported entry
;
		public ??_7DataMap@@6B@
; const	DataMap::`vftable'
??_7DataMap@@6B@ dd offset ??_EDataMap@@UAEPAXI@Z
					; DATA XREF: DataMap::DataMap(DataMap const &)+26o
					; DataMap::~DataMap(void)+26o ...
					; DataMap::`vector deleting destructor'(uint)
off_40		dd offset __purecall	; DATA XREF: .rdata$r:000000C0o
					; .rdata$r:000002D0o ...
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 60h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 64h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 68h
		public ??_R4DataMap@@6B@
; const	DataMap::`RTTI Complete	Object Locator'
??_R4DataMap@@6B@ dd 3 dup(0)		; DATA XREF: .rdata:00000038o
		dd offset ??_R0?AVDataMap@@@8 ;	DataMap	`RTTI Type Descriptor'
		dd offset ??_R3DataMap@@8 ; DataMap::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 7Ch
		public ??_R0?AVDataMap@@@8
; class	DataMap	`RTTI Type Descriptor'
??_R0?AVDataMap@@@8 dd offset ??_7type_info@@6B@ ; DATA	XREF: .rdata$r:00000074o
					; .rdata$r:DataMap::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avdatamap@@	db '.?AVDataMap@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 94h
		public ??_R3DataMap@@8
; DataMap::`RTTI Class Hierarchy Descriptor'
??_R3DataMap@@8	dd 2 dup(0)		; DATA XREF: .rdata$r:00000078o
					; .rdata$r:000000C4o
		dd 1
		dd offset ??_R2DataMap@@8 ; DataMap::`RTTI Base	Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0A4h
		public ??_R2DataMap@@8
; DataMap::`RTTI Base Class Array'
??_R2DataMap@@8	dd offset ??_R1A@?0A@EA@DataMap@@8 ; DATA XREF:	.rdata$r:000000A0o
					; DataMap::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0ACh
		public ??_R1A@?0A@EA@DataMap@@8
; DataMap::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@DataMap@@8 dd offset ??_R0?AVDataMap@@@8
					; DATA XREF: .rdata$r:DataMap::`RTTI Base Class	Array'o
					; .rdata$r:000002B4o
					; DataMap `RTTI	Type Descriptor'
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd offset off_40
		dd offset ??_R3DataMap@@8 ; DataMap::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	DataMap	& __thiscall DataMap::operator=(class DataMap const &)
		public ??4DataMap@@QAEAAV0@ABV0@@Z
??4DataMap@@QAEAAV0@ABV0@@Z proc near	; CODE XREF: RBDataMap::operator=(RBDataMap const &)+2Ap

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
??4DataMap@@QAEAAV0@ABV0@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0F8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall DataMap::`scalar deleting destructor'(unsigned int)
		public ??_GDataMap@@UAEPAXI@Z
??_GDataMap@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1DataMap@@UAE@XZ ; DataMap::~DataMap(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_137
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_137:				; CODE XREF: DataMap::`scalar deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GDataMap@@UAEPAXI@Z endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 150h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall DataMap::`vector deleting destructor'(unsigned int)
		public ??_EDataMap@@UAEPAXI@Z
??_EDataMap@@UAEPAXI@Z proc near	; DATA XREF: .rdata:const DataMap::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		and	eax, 2
		jz	short loc_1B1
		push	offset ??1DataMap@@UAE@XZ ; DataMap::~DataMap(void)
		mov	eax, [ebp+var_8]
		mov	ecx, [eax-4]
		push	ecx
		push	4
		mov	edx, [ebp+var_8]
		push	edx
		call	??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_1A9
		mov	eax, [ebp+var_8]
		sub	eax, 4
		push	eax		; void *
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		add	esp, 4

loc_1A9:				; CODE XREF: DataMap::`vector deleting destructor'(uint)+48j
		mov	eax, [ebp+var_8]
		sub	eax, 4
		jmp	short loc_1D0
; ---------------------------------------------------------------------------

loc_1B1:				; CODE XREF: DataMap::`vector deleting destructor'(uint)+29j
		mov	ecx, [ebp+var_8] ; this
		call	??1DataMap@@UAE@XZ ; DataMap::~DataMap(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_1CD
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_1CD:				; CODE XREF: DataMap::`vector deleting destructor'(uint)+6Fj
		mov	eax, [ebp+var_8]

loc_1D0:				; CODE XREF: DataMap::`vector deleting destructor'(uint)+5Fj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_EDataMap@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1E8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall RBDataMap::RBDataMap(RBDataMap *this, const	struct RBDataMap *)
		public ??0RBDataMap@@QAE@ABV0@@Z
??0RBDataMap@@QAE@ABV0@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; struct DataMap *
		mov	ecx, [ebp+var_8] ; this
		call	??0DataMap@@QAE@ABV0@@Z	; DataMap::DataMap(DataMap const &)
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7RBDataMap@@6B@ ; const RBDataMap::`vftable'
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0RBDataMap@@QAE@ABV0@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 248h
		dd offset ??_R4RBDataMap@@6B@ ;	const RBDataMap::`RTTI Complete	Object Locator'
;
; Exported entry
;
		public ??_7RBDataMap@@6B@
; const	RBDataMap::`vftable'
??_7RBDataMap@@6B@ dd offset ??_ERBDataMap@@UAEPAXI@Z
					; DATA XREF: RBDataMap::RBDataMap(RBDataMap const &)+32o
					; RBDataMap::~RBDataMap(void)+45o ...
					; RBDataMap::`vector deleting destructor'(uint)
		dd offset ?getString@RBDataMap@@UBE?BVUnicodeString@icu_56@@PBDAAW4UErrorCode@@@Z ; RBDataMap::getString(char const *,UErrorCode &)
		dd offset ?getInt@RBDataMap@@UBEHPBDAAW4UErrorCode@@@Z ; RBDataMap::getInt(char	const *,UErrorCode &)
		dd offset ?getInt28@RBDataMap@@UBEHPBDAAW4UErrorCode@@@Z ; RBDataMap::getInt28(char const *,UErrorCode &)
		dd offset ?getUInt28@RBDataMap@@UBEIPBDAAW4UErrorCode@@@Z ; RBDataMap::getUInt28(char const *,UErrorCode &)
		dd offset ?getIntVector@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z ; RBDataMap::getIntVector(int	&,char const *,UErrorCode &)
		dd offset ?getBinary@RBDataMap@@UBEPBEAAHPBDAAW4UErrorCode@@@Z ; RBDataMap::getBinary(int &,char const *,UErrorCode &)
		dd offset ?getStringArray@RBDataMap@@UBEPBVUnicodeString@icu_56@@AAHPBDAAW4UErrorCode@@@Z ; RBDataMap::getStringArray(int &,char const *,UErrorCode &)
		dd offset ?getIntArray@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z ; RBDataMap::getIntArray(int &,char const *,UErrorCode	&)
		dd offset ?getItem@RBDataMap@@UBEPBVResourceBundle@icu_56@@PBDAAW4UErrorCode@@@Z ; RBDataMap::getItem(char const *,UErrorCode &)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 274h
		public ??_R4RBDataMap@@6B@
; const	RBDataMap::`RTTI Complete Object Locator'
??_R4RBDataMap@@6B@ dd 3 dup(0)		; DATA XREF: .rdata:00000248o
		dd offset ??_R0?AVRBDataMap@@@8	; RBDataMap `RTTI Type Descriptor'
		dd offset ??_R3RBDataMap@@8 ; RBDataMap::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 288h
		public ??_R0?AVRBDataMap@@@8
; class	RBDataMap `RTTI	Type Descriptor'
??_R0?AVRBDataMap@@@8 dd offset	??_7type_info@@6B@ ; DATA XREF:	.rdata$r:00000280o
					; .rdata$r:RBDataMap::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avrbdatamap@	db '.?AVRBDataMap@@',0
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 2A0h
		public ??_R3RBDataMap@@8
; RBDataMap::`RTTI Class Hierarchy Descriptor'
??_R3RBDataMap@@8 dd 2 dup(0)		; DATA XREF: .rdata$r:00000284o
					; .rdata$r:000002D4o
		dd 2
		dd offset ??_R2RBDataMap@@8 ; RBDataMap::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 2B0h
		public ??_R2RBDataMap@@8
; RBDataMap::`RTTI Base	Class Array'
??_R2RBDataMap@@8 dd offset ??_R1A@?0A@EA@RBDataMap@@8 ; DATA XREF: .rdata$r:000002ACo
					; RBDataMap::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@DataMap@@8 ; DataMap::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 2BCh
		public ??_R1A@?0A@EA@RBDataMap@@8
; RBDataMap::`RTTI Base	Class Descriptor at (0,	-1, 0, 64)'
??_R1A@?0A@EA@RBDataMap@@8 dd offset ??_R0?AVRBDataMap@@@8
					; DATA XREF: .rdata$r:RBDataMap::`RTTI Base Class Array'o
					; RBDataMap `RTTI Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset off_40
		dd offset ??_R3RBDataMap@@8 ; RBDataMap::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2D8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	RBDataMap & __thiscall RBDataMap::operator=(class RBDataMap const &)
		public ??4RBDataMap@@QAEAAV0@ABV0@@Z
??4RBDataMap@@QAEAAV0@ABV0@@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		call	??4DataMap@@QAEAAV0@ABV0@@Z ; DataMap::operator=(DataMap const &)
		mov	eax, [ebp+var_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??4RBDataMap@@QAEAAV0@ABV0@@Z endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 32Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall RBDataMap::`scalar deleting	destructor'(unsigned int)
		public ??_GRBDataMap@@UAEPAXI@Z
??_GRBDataMap@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8] ; this
		call	??1RBDataMap@@UAE@XZ ; RBDataMap::~RBDataMap(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_36B
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_36B:				; CODE XREF: RBDataMap::`scalar	deleting destructor'(uint)+31j
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GRBDataMap@@UAEPAXI@Z endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 384h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall RBDataMap::`vector deleting	destructor'(unsigned int)
		public ??_ERBDataMap@@UAEPAXI@Z
??_ERBDataMap@@UAEPAXI@Z proc near	; DATA XREF: .rdata:const RBDataMap::`vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		and	eax, 2
		jz	short loc_3E5
		push	offset ??1RBDataMap@@UAE@XZ ; RBDataMap::~RBDataMap(void)
		mov	eax, [ebp+var_8]
		mov	ecx, [eax-4]
		push	ecx
		push	8
		mov	edx, [ebp+var_8]
		push	edx
		call	??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_3DD
		mov	eax, [ebp+var_8]
		sub	eax, 4
		push	eax		; void *
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		add	esp, 4

loc_3DD:				; CODE XREF: RBDataMap::`vector	deleting destructor'(uint)+48j
		mov	eax, [ebp+var_8]
		sub	eax, 4
		jmp	short loc_404
; ---------------------------------------------------------------------------

loc_3E5:				; CODE XREF: RBDataMap::`vector	deleting destructor'(uint)+29j
		mov	ecx, [ebp+var_8] ; this
		call	??1RBDataMap@@UAE@XZ ; RBDataMap::~RBDataMap(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_401
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_401:				; CODE XREF: RBDataMap::`vector	deleting destructor'(uint)+6Fj
		mov	eax, [ebp+var_8]

loc_404:				; CODE XREF: RBDataMap::`vector	deleting destructor'(uint)+5Fj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_ERBDataMap@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 41Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall DataMap::~DataMap(DataMap *__hidden	this)
		public ??1DataMap@@UAE@XZ
??1DataMap@@UAE@XZ proc	near		; CODE XREF: DataMap::`scalar deleting destructor'(uint)+26p
					; DataMap::`vector deleting destructor'(uint)+64p ...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7DataMap@@6B@ ; const DataMap::`vftable'
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??1DataMap@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 450h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; protected: __thiscall	DataMap::DataMap(void)
		public ??0DataMap@@IAE@XZ
??0DataMap@@IAE@XZ proc	near		; CODE XREF: RBDataMap::RBDataMap(void)+45p
					; RBDataMap::RBDataMap(UResourceBundle *,UErrorCode &)+45p ...

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_7DataMap@@6B@ ; const DataMap::`vftable'
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
??0DataMap@@IAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 488h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall DataMap::utoi(DataMap *this, const struct icu_56::UnicodeString *)
		public ?utoi@DataMap@@IBEHABVUnicodeString@icu_56@@@Z
?utoi@DataMap@@IBEHABVUnicodeString@icu_56@@@Z proc near
					; CODE XREF: RBDataMap::getInt(char const *,UErrorCode &)+8Ap
					; RBDataMap::getIntArray(int &,char const *,UErrorCode &)+18Bp

var_1F0		= byte ptr -1F0h
var_12C		= dword	ptr -12Ch
var_120		= dword	ptr -120h
Str		= byte ptr -114h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 1F0h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_1F0]
		mov	ecx, 7Ch ; '|'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	[ebp+var_C], ecx
		mov	esi, esp
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ ;	icu_56::UnicodeString::getBuffer(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_120], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ	; icu_56::UnicodeString::length(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_12C], eax
		mov	eax, [ebp+var_12C]
		push	eax
		lea	ecx, [ebp+Str]
		push	ecx
		mov	edx, [ebp+var_120]
		push	edx
		call	_u_UCharsToChars_56
		add	esp, 0Ch
		mov	eax, [ebp+var_12C]
		mov	[ebp+eax+Str], 0
		mov	esi, esp
		lea	eax, [ebp+Str]
		push	eax		; Str
		call	dword ptr ds:__imp__atoi
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1F0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?utoi@DataMap@@IBEHABVUnicodeString@icu_56@@@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN5		dd 1			; DATA XREF: DataMap::utoi(icu_56::UnicodeString const &)+A5o
		dd offset $LN4
$LN4		dd 0FFFFFEECh, 100h	; DATA XREF: .text:00000560o
		dd offset $LN3
$LN3		db 63h,	68h, 0		; DATA XREF: .text:0000056Co
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 574h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl deleteResBund(void *)
		public _deleteResBund
_deleteResBund	proc near		; DATA XREF: RBDataMap::RBDataMap(void)+D3o
					; RBDataMap::RBDataMap(UResourceBundle *,UErrorCode &)+CCo ...

var_DC		= dword	ptr -0DCh
var_D4		= dword	ptr -0D4h
var_C8		= dword	ptr -0C8h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0DCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_DC]
		mov	ecx, 37h ; '7'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_C8], eax
		mov	ecx, [ebp+var_C8]
		mov	[ebp+var_D4], ecx
		cmp	[ebp+var_D4], 0
		jz	short loc_5D5
		mov	esi, esp
		push	1
		mov	edx, [ebp+var_D4]
		mov	eax, [edx]
		mov	ecx, [ebp+var_D4]
		mov	edx, [eax]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_DC], eax
		jmp	short loc_5DF
; ---------------------------------------------------------------------------

loc_5D5:				; CODE XREF: _deleteResBund+3Aj
		mov	[ebp+var_DC], 0

loc_5DF:				; CODE XREF: _deleteResBund+5Fj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0DCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_deleteResBund	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 5F4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall RBDataMap::~RBDataMap(RBDataMap *__hidden this)
		public ??1RBDataMap@@UAE@XZ
??1RBDataMap@@UAE@XZ proc near		; CODE XREF: RBDataMap::`scalar	deleting destructor'(uint)+26p
					; RBDataMap::`vector deleting destructor'(uint)+64p
					; DATA XREF: ...

var_F4		= dword	ptr -0F4h
var_EC		= dword	ptr -0ECh
var_E0		= dword	ptr -0E0h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??1RBDataMap@@UAE@XZ
		mov	eax, large fs:0
		push	eax
		sub	esp, 0E8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_F4]
		mov	ecx, 3Ah ; ':'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7RBDataMap@@6B@ ; const RBDataMap::`vftable'
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]
		mov	[ebp+var_E0], ecx
		mov	edx, [ebp+var_E0]
		mov	[ebp+var_EC], edx
		cmp	[ebp+var_EC], 0
		jz	short loc_67C
		push	1
		mov	ecx, [ebp+var_EC]
		call	??_GHashtable@icu_56@@QAEPAXI@Z	; icu_56::Hashtable::`scalar deleting destructor'(uint)
		mov	[ebp+var_F4], eax
		jmp	short loc_686
; ---------------------------------------------------------------------------

loc_67C:				; CODE XREF: RBDataMap::~RBDataMap(void)+71j
		mov	[ebp+var_F4], 0

loc_686:				; CODE XREF: RBDataMap::~RBDataMap(void)+86j
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, [ebp+var_14] ; this
		call	??1DataMap@@UAE@XZ ; DataMap::~DataMap(void)
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0F4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1RBDataMap@@UAE@XZ endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 6B4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??1RBDataMap@@UAE@XZ$0 proc near ; DATA	XREF: .xdata$x:000006E0o
		mov	ecx, [ebp-14h]	; this
		jmp	??1DataMap@@UAE@XZ ; DataMap::~DataMap(void)
__unwindfunclet$??1RBDataMap@@UAE@XZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??1RBDataMap@@UAE@XZ proc near ; DATA XREF:	RBDataMap::~RBDataMap(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0F8h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??1RBDataMap@@UAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??1RBDataMap@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 6DCh
__unwindtable$??1RBDataMap@@UAE@XZ dd 0FFFFFFFFh ; DATA	XREF: .xdata$x:000006ECo
		dd offset __unwindfunclet$??1RBDataMap@@UAE@XZ$0
__ehfuncinfo$??1RBDataMap@@UAE@XZ dd 19930522h,	1
					; DATA XREF: __ehhandler$??1RBDataMap@@UAE@XZ+14o
		dd offset __unwindtable$??1RBDataMap@@UAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 708h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void * __thiscall icu_56::Hashtable::`scalar deleting	destructor'(unsigned int)
		public ??_GHashtable@icu_56@@QAEPAXI@Z
??_GHashtable@icu_56@@QAEPAXI@Z	proc near ; CODE XREF: RBDataMap::~RBDataMap(void)+7Bp

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??1Hashtable@icu_56@@QAE@XZ ; icu_56::Hashtable::~Hashtable(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_75B
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_75B:				; CODE XREF: icu_56::Hashtable::`scalar	deleting destructor'(uint)+3Bj
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GHashtable@icu_56@@QAEPAXI@Z	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 774h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall RBDataMap::RBDataMap(void)
		public ??0RBDataMap@@QAE@XZ
??0RBDataMap@@QAE@XZ proc near

var_100		= dword	ptr -100h
var_F8		= dword	ptr -0F8h
var_EC		= dword	ptr -0ECh
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0RBDataMap@@QAE@XZ
		mov	eax, large fs:0
		push	eax
		sub	esp, 0F4h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_100]
		mov	ecx, 3Dh ; '='
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	ecx, [ebp+var_14]
		call	??0DataMap@@IAE@XZ ; DataMap::DataMap(void)
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7RBDataMap@@6B@ ; const RBDataMap::`vftable'
		mov	[ebp+var_20], 0
		mov	esi, esp
		push	38h ; '8'       ; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_EC], eax
		mov	byte ptr [ebp+var_4], 1
		cmp	[ebp+var_EC], 0
		jz	short loc_81F
		mov	esi, esp
		lea	eax, [ebp+var_20]
		push	eax		; enum UErrorCode *
		push	1		; signed __int8
		mov	ecx, [ebp+var_EC] ; this
		call	dword ptr ds:__imp_??0Hashtable@icu_56@@QAE@CAAW4UErrorCode@@@Z	; icu_56::Hashtable::Hashtable(signed char,UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_100], eax
		jmp	short loc_829
; ---------------------------------------------------------------------------

loc_81F:				; CODE XREF: RBDataMap::RBDataMap(void)+86j
		mov	[ebp+var_100], 0

loc_829:				; CODE XREF: RBDataMap::RBDataMap(void)+A9j
		mov	ecx, [ebp+var_100]
		mov	[ebp+var_F8], ecx
		mov	byte ptr [ebp+var_4], 0
		mov	edx, [ebp+var_14]
		mov	eax, [ebp+var_F8]
		mov	[edx+4], eax
		mov	esi, esp
		push	offset _deleteResBund ;	void (__cdecl *)(void *)
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]	; this
		call	dword ptr ds:__imp_?setValueDeleter@Hashtable@icu_56@@QAEP6AXPAX@ZP6AX0@Z@Z ; icu_56::Hashtable::setValueDeleter(void (*)(void *))
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN10
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 100h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0RBDataMap@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
$LN10		dd 1			; DATA XREF: RBDataMap::RBDataMap(void)+F9o
		dd offset $LN9
$LN9		dd 0FFFFFFE0h, 4	; DATA XREF: .text:000008A0o
		dd offset $LN7		; "status"
$LN7		db 'status',0           ; DATA XREF: .text:000008ACo
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 8B8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0RBDataMap@@QAE@XZ$0 proc near ; DATA	XREF: .xdata$x:000008FCo
		mov	ecx, [ebp-14h]	; this
		jmp	??1DataMap@@UAE@XZ ; DataMap::~DataMap(void)
__unwindfunclet$??0RBDataMap@@QAE@XZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0RBDataMap@@QAE@XZ$1 proc near ; DATA	XREF: .xdata$x:00000904o
		mov	esi, esp
		mov	eax, [ebp-0ECh]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0RBDataMap@@QAE@XZ$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0RBDataMap@@QAE@XZ proc near ; DATA XREF:	RBDataMap::RBDataMap(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-104h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0RBDataMap@@QAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??0RBDataMap@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8F8h
__unwindtable$??0RBDataMap@@QAE@XZ dd 0FFFFFFFFh ; DATA	XREF: .xdata$x:00000910o
		dd offset __unwindfunclet$??0RBDataMap@@QAE@XZ$0
		dd 0
		dd offset __unwindfunclet$??0RBDataMap@@QAE@XZ$1
__ehfuncinfo$??0RBDataMap@@QAE@XZ dd 19930522h,	2
					; DATA XREF: __ehhandler$??0RBDataMap@@QAE@XZ+14o
		dd offset __unwindtable$??0RBDataMap@@QAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 92Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	RBDataMap::RBDataMap(struct UResourceBundle *, enum UErrorCode *)
		public ??0RBDataMap@@QAE@PAUUResourceBundle@@AAW4UErrorCode@@@Z
??0RBDataMap@@QAE@PAUUResourceBundle@@AAW4UErrorCode@@@Z proc near

var_F4		= dword	ptr -0F4h
var_EC		= dword	ptr -0ECh
var_E0		= dword	ptr -0E0h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0RBDataMap@@QAE@PAUUResourceBundle@@AAW4UErrorCode@@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0E8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_F4]
		mov	ecx, 3Ah ; ':'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	ecx, [ebp+var_14]
		call	??0DataMap@@IAE@XZ ; DataMap::DataMap(void)
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7RBDataMap@@6B@ ; const RBDataMap::`vftable'
		mov	esi, esp
		push	38h ; '8'       ; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_E0], eax
		mov	byte ptr [ebp+var_4], 1
		cmp	[ebp+var_E0], 0
		jz	short loc_9D0
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax		; enum UErrorCode *
		push	1		; signed __int8
		mov	ecx, [ebp+var_E0] ; this
		call	dword ptr ds:__imp_??0Hashtable@icu_56@@QAE@CAAW4UErrorCode@@@Z	; icu_56::Hashtable::Hashtable(signed char,UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_F4], eax
		jmp	short loc_9DA
; ---------------------------------------------------------------------------

loc_9D0:				; CODE XREF: RBDataMap::RBDataMap(UResourceBundle *,UErrorCode &)+7Fj
		mov	[ebp+var_F4], 0

loc_9DA:				; CODE XREF: RBDataMap::RBDataMap(UResourceBundle *,UErrorCode &)+A2j
		mov	ecx, [ebp+var_F4]
		mov	[ebp+var_EC], ecx
		mov	byte ptr [ebp+var_4], 0
		mov	edx, [ebp+var_14]
		mov	eax, [ebp+var_EC]
		mov	[edx+4], eax
		mov	esi, esp
		push	offset _deleteResBund ;	void (__cdecl *)(void *)
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]	; this
		call	dword ptr ds:__imp_?setValueDeleter@Hashtable@icu_56@@QAEP6AXPAX@ZP6AX0@Z@Z ; icu_56::Hashtable::setValueDeleter(void (*)(void *))
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_4]
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+arg_0]
		push	ecx		; struct UResourceBundle *
		mov	ecx, [ebp+var_14] ; this
		call	?init@RBDataMap@@QAEXPAUUResourceBundle@@AAW4UErrorCode@@@Z ; RBDataMap::init(UResourceBundle *,UErrorCode &)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0F4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??0RBDataMap@@QAE@PAUUResourceBundle@@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 0A4Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0RBDataMap@@QAE@PAUUResourceBundle@@AAW4UErrorCode@@@Z$0 proc	near
					; DATA XREF: .xdata$x:00000A90o
		mov	ecx, [ebp-14h]	; this
		jmp	??1DataMap@@UAE@XZ ; DataMap::~DataMap(void)
__unwindfunclet$??0RBDataMap@@QAE@PAUUResourceBundle@@AAW4UErrorCode@@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0RBDataMap@@QAE@PAUUResourceBundle@@AAW4UErrorCode@@@Z$1 proc	near
					; DATA XREF: .xdata$x:00000A98o
		mov	esi, esp
		mov	eax, [ebp-0E0h]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0RBDataMap@@QAE@PAUUResourceBundle@@AAW4UErrorCode@@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0RBDataMap@@QAE@PAUUResourceBundle@@AAW4UErrorCode@@@Z proc near
					; DATA XREF: RBDataMap::RBDataMap(UResourceBundle *,UErrorCode &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0F8h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0RBDataMap@@QAE@PAUUResourceBundle@@AAW4UErrorCode@@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0RBDataMap@@QAE@PAUUResourceBundle@@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 0A8Ch
__unwindtable$??0RBDataMap@@QAE@PAUUResourceBundle@@AAW4UErrorCode@@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00000AA4o
		dd offset __unwindfunclet$??0RBDataMap@@QAE@PAUUResourceBundle@@AAW4UErrorCode@@@Z$0
		align 8
		dd offset __unwindfunclet$??0RBDataMap@@QAE@PAUUResourceBundle@@AAW4UErrorCode@@@Z$1
__ehfuncinfo$??0RBDataMap@@QAE@PAUUResourceBundle@@AAW4UErrorCode@@@Z dd 19930522h, 2
					; DATA XREF: __ehhandler$??0RBDataMap@@QAE@PAUUResourceBundle@@AAW4UErrorCode@@@Z+14o
		dd offset __unwindtable$??0RBDataMap@@QAE@PAUUResourceBundle@@AAW4UErrorCode@@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0AC0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	RBDataMap::RBDataMap(struct UResourceBundle *, struct UResourceBundle *, enum UErrorCode *)
		public ??0RBDataMap@@QAE@PAUUResourceBundle@@0AAW4UErrorCode@@@Z
??0RBDataMap@@QAE@PAUUResourceBundle@@0AAW4UErrorCode@@@Z proc near

var_F4		= dword	ptr -0F4h
var_EC		= dword	ptr -0ECh
var_E0		= dword	ptr -0E0h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0RBDataMap@@QAE@PAUUResourceBundle@@0AAW4UErrorCode@@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 0E8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_F4]
		mov	ecx, 3Ah ; ':'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	ecx, [ebp+var_14]
		call	??0DataMap@@IAE@XZ ; DataMap::DataMap(void)
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax], offset	??_7RBDataMap@@6B@ ; const RBDataMap::`vftable'
		mov	esi, esp
		push	38h ; '8'       ; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_E0], eax
		mov	byte ptr [ebp+var_4], 1
		cmp	[ebp+var_E0], 0
		jz	short loc_B64
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax		; enum UErrorCode *
		push	1		; signed __int8
		mov	ecx, [ebp+var_E0] ; this
		call	dword ptr ds:__imp_??0Hashtable@icu_56@@QAE@CAAW4UErrorCode@@@Z	; icu_56::Hashtable::Hashtable(signed char,UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_F4], eax
		jmp	short loc_B6E
; ---------------------------------------------------------------------------

loc_B64:				; CODE XREF: RBDataMap::RBDataMap(UResourceBundle *,UResourceBundle *,UErrorCode &)+7Fj
		mov	[ebp+var_F4], 0

loc_B6E:				; CODE XREF: RBDataMap::RBDataMap(UResourceBundle *,UResourceBundle *,UErrorCode &)+A2j
		mov	ecx, [ebp+var_F4]
		mov	[ebp+var_EC], ecx
		mov	byte ptr [ebp+var_4], 0
		mov	edx, [ebp+var_14]
		mov	eax, [ebp+var_EC]
		mov	[edx+4], eax
		mov	esi, esp
		push	offset _deleteResBund ;	void (__cdecl *)(void *)
		mov	eax, [ebp+var_14]
		mov	ecx, [eax+4]	; this
		call	dword ptr ds:__imp_?setValueDeleter@Hashtable@icu_56@@QAEP6AXPAX@ZP6AX0@Z@Z ; icu_56::Hashtable::setValueDeleter(void (*)(void *))
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_8]
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+arg_4]
		push	ecx		; struct UResourceBundle *
		mov	edx, [ebp+arg_0]
		push	edx		; struct UResourceBundle *
		mov	ecx, [ebp+var_14] ; this
		call	?init@RBDataMap@@QAEXPAUUResourceBundle@@0AAW4UErrorCode@@@Z ; RBDataMap::init(UResourceBundle *,UResourceBundle *,UErrorCode &)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0F4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
??0RBDataMap@@QAE@PAUUResourceBundle@@0AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 0BE4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0RBDataMap@@QAE@PAUUResourceBundle@@0AAW4UErrorCode@@@Z$0 proc near
					; DATA XREF: .xdata$x:00000C28o
		mov	ecx, [ebp-14h]	; this
		jmp	??1DataMap@@UAE@XZ ; DataMap::~DataMap(void)
__unwindfunclet$??0RBDataMap@@QAE@PAUUResourceBundle@@0AAW4UErrorCode@@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0RBDataMap@@QAE@PAUUResourceBundle@@0AAW4UErrorCode@@@Z$1 proc near
					; DATA XREF: .xdata$x:00000C30o
		mov	esi, esp
		mov	eax, [ebp-0E0h]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0RBDataMap@@QAE@PAUUResourceBundle@@0AAW4UErrorCode@@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0RBDataMap@@QAE@PAUUResourceBundle@@0AAW4UErrorCode@@@Z proc near
					; DATA XREF: RBDataMap::RBDataMap(UResourceBundle *,UResourceBundle *,UErrorCode &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0F8h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0RBDataMap@@QAE@PAUUResourceBundle@@0AAW4UErrorCode@@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0RBDataMap@@QAE@PAUUResourceBundle@@0AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 0C24h
__unwindtable$??0RBDataMap@@QAE@PAUUResourceBundle@@0AAW4UErrorCode@@@Z	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00000C3Co
		dd offset __unwindfunclet$??0RBDataMap@@QAE@PAUUResourceBundle@@0AAW4UErrorCode@@@Z$0
		align 10h
		dd offset __unwindfunclet$??0RBDataMap@@QAE@PAUUResourceBundle@@0AAW4UErrorCode@@@Z$1
__ehfuncinfo$??0RBDataMap@@QAE@PAUUResourceBundle@@0AAW4UErrorCode@@@Z dd 19930522h, 2
					; DATA XREF: __ehhandler$??0RBDataMap@@QAE@PAUUResourceBundle@@0AAW4UErrorCode@@@Z+14o
		dd offset __unwindtable$??0RBDataMap@@QAE@PAUUResourceBundle@@0AAW4UErrorCode@@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0C58h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall RBDataMap::init(RBDataMap *this, struct UResourceBundle *, enum UErrorCode *)
		public ?init@RBDataMap@@QAEXPAUUResourceBundle@@AAW4UErrorCode@@@Z
?init@RBDataMap@@QAEXPAUUResourceBundle@@AAW4UErrorCode@@@Z proc near
					; CODE XREF: RBDataMap::RBDataMap(UResourceBundle *,UErrorCode &)+EFp

var_160		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_150		= dword	ptr -150h
var_144		= dword	ptr -144h
var_138		= byte ptr -138h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?init@RBDataMap@@QAEXPAUUResourceBundle@@AAW4UErrorCode@@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 154h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_160]
		mov	ecx, 55h ; 'U'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_18], ecx
		mov	[ebp+var_24], 0
		mov	esi, esp
		mov	eax, [ebp+var_18]
		mov	ecx, [eax+4]	; this
		call	dword ptr ds:__imp_?removeAll@Hashtable@icu_56@@QAEXXZ ; icu_56::Hashtable::removeAll(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_30], 0
		mov	[ebp+var_24], 0
		jmp	short loc_CD2
; ---------------------------------------------------------------------------

loc_CC9:				; CODE XREF: RBDataMap::init(UResourceBundle *,UErrorCode &)+1AAj
		mov	eax, [ebp+var_24]
		add	eax, 1
		mov	[ebp+var_24], eax

loc_CD2:				; CODE XREF: RBDataMap::init(UResourceBundle *,UErrorCode &)+6Fj
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ures_getSize_56
		add	esp, 4
		cmp	[ebp+var_24], eax
		jge	loc_E07
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+var_30]
		push	ecx
		mov	edx, [ebp+var_24]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ures_getByIndex_56
		add	esp, 10h
		mov	[ebp+var_30], eax
		mov	esi, esp
		push	0Ch		; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_144], eax
		mov	[ebp+var_4], 0
		cmp	[ebp+var_144], 0
		jz	short loc_D63
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+var_30]
		push	ecx		; struct UResourceBundle *
		mov	ecx, [ebp+var_144] ; this
		call	dword ptr ds:__imp_??0ResourceBundle@icu_56@@QAE@PAUUResourceBundle@@AAW4UErrorCode@@@Z	; icu_56::ResourceBundle::ResourceBundle(UResourceBundle *,UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+var_144]
		mov	dword ptr [edx], offset	??_SResourceBundle@icu_56@@6B@ ; const icu_56::ResourceBundle::`local vftable'
		mov	eax, [ebp+var_144]
		mov	[ebp+var_158], eax
		jmp	short loc_D6D
; ---------------------------------------------------------------------------

loc_D63:				; CODE XREF: RBDataMap::init(UResourceBundle *,UErrorCode &)+D2j
		mov	[ebp+var_158], 0

loc_D6D:				; CODE XREF: RBDataMap::init(UResourceBundle *,UErrorCode &)+109j
		mov	ecx, [ebp+var_158]
		mov	[ebp+var_150], ecx
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		mov	edx, [ebp+arg_4]
		push	edx		; void *
		mov	eax, [ebp+var_150]
		push	eax		; enum UErrorCode *
		mov	edi, esp
		push	0		; void *
		push	0FFFFFFFFh
		mov	ecx, [ebp+var_30]
		push	ecx
		call	_ures_getKey_56
		add	esp, 4
		push	eax
		lea	ecx, [ebp+var_138]
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@PBDHW4EInvariant@01@@Z ; icu_56::UnicodeString::UnicodeString(char const *,int,icu_56::UnicodeString::EInvariant)
		cmp	edi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_15C], eax
		mov	edx, [ebp+var_15C]
		mov	[ebp+var_160], edx
		mov	[ebp+var_4], 1
		mov	eax, [ebp+var_160]
		push	eax		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_18]
		mov	ecx, [ecx+4]	; this
		call	dword ptr ds:__imp_?put@Hashtable@icu_56@@QAEPAXABVUnicodeString@2@PAXAAW4UErrorCode@@@Z ; icu_56::Hashtable::put(icu_56::UnicodeString	const &,void *,UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		lea	ecx, [ebp+var_138] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	loc_CC9
; ---------------------------------------------------------------------------

loc_E07:				; CODE XREF: RBDataMap::init(UResourceBundle *,UErrorCode &)+89j
		mov	eax, [ebp+var_30]
		push	eax
		call	_ures_close_56
		add	esp, 4
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 160h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?init@RBDataMap@@QAEXPAUUResourceBundle@@AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 0E40h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?init@RBDataMap@@QAEXPAUUResourceBundle@@AAW4UErrorCode@@@Z$0 proc near
					; DATA XREF: .xdata$x:00000EA8o
		mov	esi, esp
		mov	eax, [ebp-144h]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?init@RBDataMap@@QAEXPAUUResourceBundle@@AAW4UErrorCode@@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?init@RBDataMap@@QAEXPAUUResourceBundle@@AAW4UErrorCode@@@Z$1 proc near
					; DATA XREF: .xdata$x:00000EB0o
		mov	esi, esp
		lea	ecx, [ebp-138h]	; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?init@RBDataMap@@QAEXPAUUResourceBundle@@AAW4UErrorCode@@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?init@RBDataMap@@QAEXPAUUResourceBundle@@AAW4UErrorCode@@@Z	proc near
					; DATA XREF: RBDataMap::init(UResourceBundle *,UErrorCode &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-164h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?init@RBDataMap@@QAEXPAUUResourceBundle@@AAW4UErrorCode@@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?init@RBDataMap@@QAEXPAUUResourceBundle@@AAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E98h
		dd offset ??_R4ResourceBundle@icu_56@@6B@ ; const icu_56::ResourceBundle::`RTTI	Complete Object	Locator'
		public ??_SResourceBundle@icu_56@@6B@
; const	icu_56::ResourceBundle::`local vftable'
??_SResourceBundle@icu_56@@6B@ dd offset ??_EResourceBundle@icu_56@@UAEPAXI@Z
					; DATA XREF: RBDataMap::init(UResourceBundle *,UErrorCode &)+F7o
					; RBDataMap::init(UResourceBundle *,UResourceBundle *,UErrorCode &)+142o
					; icu_56::ResourceBundle::`vector deleting destructor'(uint)
		dd offset ?getDynamicClassID@ResourceBundle@icu_56@@UBEPAXXZ ; icu_56::ResourceBundle::getDynamicClassID(void)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 0EA4h
__unwindtable$?init@RBDataMap@@QAEXPAUUResourceBundle@@AAW4UErrorCode@@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00000EBCo
		dd offset __unwindfunclet$?init@RBDataMap@@QAEXPAUUResourceBundle@@AAW4UErrorCode@@@Z$0
		dd 0FFFFFFFFh
		dd offset __unwindfunclet$?init@RBDataMap@@QAEXPAUUResourceBundle@@AAW4UErrorCode@@@Z$1
__ehfuncinfo$?init@RBDataMap@@QAEXPAUUResourceBundle@@AAW4UErrorCode@@@Z dd 19930522h, 2
					; DATA XREF: __ehhandler$?init@RBDataMap@@QAEXPAUUResourceBundle@@AAW4UErrorCode@@@Z+1Eo
		dd offset __unwindtable$?init@RBDataMap@@QAEXPAUUResourceBundle@@AAW4UErrorCode@@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0ED8h
		public ??_R4ResourceBundle@icu_56@@6B@
; const	icu_56::ResourceBundle::`RTTI Complete Object Locator'
??_R4ResourceBundle@icu_56@@6B@	dd 3 dup(0) ; DATA XREF: .rdata:00000E98o
		dd offset ??_R0?AVResourceBundle@icu_56@@@8 ; icu_56::ResourceBundle `RTTI Type	Descriptor'
		dd offset ??_R3ResourceBundle@icu_56@@8	; icu_56::ResourceBundle::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 0EECh
		public ??_R0?AVResourceBundle@icu_56@@@8
; class	icu_56::ResourceBundle `RTTI Type Descriptor'
??_R0?AVResourceBundle@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00000EE4o
					; .rdata$r:icu_56::ResourceBundle::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avresourcebu	db '.?AVResourceBundle@icu_56@@',0
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0F10h
		public ??_R3ResourceBundle@icu_56@@8
; icu_56::ResourceBundle::`RTTI	Class Hierarchy	Descriptor'
??_R3ResourceBundle@icu_56@@8 dd 2 dup(0) ; DATA XREF: .rdata$r:00000EE8o
					; .rdata$r:00000F48o
		dd 3
		dd offset ??_R2ResourceBundle@icu_56@@8	; icu_56::ResourceBundle::`RTTI	Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0F20h
		public ??_R2ResourceBundle@icu_56@@8
; icu_56::ResourceBundle::`RTTI	Base Class Array'
??_R2ResourceBundle@icu_56@@8 dd offset	??_R1A@?0A@EA@ResourceBundle@icu_56@@8
					; DATA XREF: .rdata$r:00000F1Co
					; icu_56::ResourceBundle::`RTTI	Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0F30h
		public ??_R1A@?0A@EA@ResourceBundle@icu_56@@8
; icu_56::ResourceBundle::`RTTI	Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@ResourceBundle@icu_56@@8 dd offset ??_R0?AVResourceBundle@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::ResourceBundle::`RTTI Base Class Array'o
					; icu_56::ResourceBundle `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset off_40
		dd offset ??_R3ResourceBundle@icu_56@@8	; icu_56::ResourceBundle::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0F4Ch
		public ??_R1A@?0A@EA@UObject@icu_56@@8
; icu_56::UObject::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UObject@icu_56@@8	dd offset ??_R0?AVUObject@icu_56@@@8
					; DATA XREF: .rdata$r:00000F24o
					; .rdata$r:icu_56::UObject::`RTTI Base Class Array'o ...
					; icu_56::UObject `RTTI	Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset off_40
		dd offset ??_R3UObject@icu_56@@8 ; icu_56::UObject::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 0F68h
		public ??_R0?AVUObject@icu_56@@@8
; class	icu_56::UObject	`RTTI Type Descriptor'
??_R0?AVUObject@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UObject::`RTTI Base Class	Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avuobject@ic	db '.?AVUObject@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0F88h
		public ??_R3UObject@icu_56@@8
; icu_56::UObject::`RTTI Class Hierarchy Descriptor'
??_R3UObject@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00000F64o
		dd 2
		dd offset ??_R2UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0F98h
		public ??_R2UObject@icu_56@@8
; icu_56::UObject::`RTTI Base Class Array'
??_R2UObject@icu_56@@8 dd offset ??_R1A@?0A@EA@UObject@icu_56@@8
					; DATA XREF: .rdata$r:00000F94o
					; icu_56::UObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0FA4h
		public ??_R13?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@UMemory@icu_56@@8 dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:00000F28o
					; .rdata$r:00000F9Co ...
					; icu_56::UMemory `RTTI	Type Descriptor'
		dd 0
		dd 4, 0FFFFFFFFh, 0
		dd offset off_40
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 0FC0h
		public ??_R0?AVUMemory@icu_56@@@8
; class	icu_56::UMemory	`RTTI Type Descriptor'
??_R0?AVUMemory@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Descriptor at (4,-1,0,64)'o
					; .rdata$r:icu_56::UMemory::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?avumemory@ic	db '.?AVUMemory@icu_56@@',0
		align 10h
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0FE0h
		public ??_R3UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Class Hierarchy Descriptor'
??_R3UMemory@icu_56@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00000FBCo
					; .rdata$r:00001010o
		dd 1
		dd offset ??_R2UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0FF0h
		public ??_R2UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Array'
??_R2UMemory@icu_56@@8 dd offset ??_R1A@?0A@EA@UMemory@icu_56@@8
					; DATA XREF: .rdata$r:00000FECo
					; icu_56::UMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0FF8h
		public ??_R1A@?0A@EA@UMemory@icu_56@@8
; icu_56::UMemory::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@UMemory@icu_56@@8	dd offset ??_R0?AVUMemory@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UMemory::`RTTI Base Class	Array'o
					; icu_56::UMemory `RTTI	Type Descriptor'
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd offset off_40
		dd offset ??_R3UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1014h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::ResourceBundle::`scalar deleting destructor'(unsigned int)
		public ??_GResourceBundle@icu_56@@UAEPAXI@Z
??_GResourceBundle@icu_56@@UAEPAXI@Z proc near

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??1ResourceBundle@icu_56@@UAE@XZ ; icu_56::ResourceBundle::~ResourceBundle(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_1067
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1067:				; CODE XREF: icu_56::ResourceBundle::`scalar deleting destructor'(uint)+3Bj
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GResourceBundle@icu_56@@UAEPAXI@Z endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1080h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall RBDataMap::init(RBDataMap *this, struct UResourceBundle *, struct UResourceBundle *, enum UErrorCode *)
		public ?init@RBDataMap@@QAEXPAUUResourceBundle@@0AAW4UErrorCode@@@Z
?init@RBDataMap@@QAEXPAUUResourceBundle@@0AAW4UErrorCode@@@Z proc near
					; CODE XREF: RBDataMap::RBDataMap(UResourceBundle *,UResourceBundle *,UErrorCode &)+F3p

var_178		= dword	ptr -178h
var_174		= dword	ptr -174h
var_170		= dword	ptr -170h
var_168		= dword	ptr -168h
var_15C		= dword	ptr -15Ch
var_150		= byte ptr -150h
var_48		= dword	ptr -48h
var_3C		= dword	ptr -3Ch
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?init@RBDataMap@@QAEXPAUUResourceBundle@@0AAW4UErrorCode@@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 16Ch
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_178]
		mov	ecx, 5Bh ; '['
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_18], ecx
		mov	[ebp+var_24], 0
		mov	esi, esp
		mov	eax, [ebp+var_18]
		mov	ecx, [eax+4]	; this
		call	dword ptr ds:__imp_?removeAll@Hashtable@icu_56@@QAEXXZ ; icu_56::Hashtable::removeAll(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_30], 0
		mov	[ebp+var_3C], 0
		mov	[ebp+var_48], 0
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ures_getSize_56
		add	esp, 4
		mov	esi, eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		call	_ures_getSize_56
		add	esp, 4
		cmp	esi, eax
		jnz	loc_1273
		mov	[ebp+var_24], 0
		jmp	short loc_112A
; ---------------------------------------------------------------------------

loc_1121:				; CODE XREF: RBDataMap::init(UResourceBundle *,UResourceBundle *,UErrorCode &)+1ECj
		mov	eax, [ebp+var_24]
		add	eax, 1
		mov	[ebp+var_24], eax

loc_112A:				; CODE XREF: RBDataMap::init(UResourceBundle *,UResourceBundle *,UErrorCode &)+9Fj
		mov	eax, [ebp+arg_4]
		push	eax
		call	_ures_getSize_56
		add	esp, 4
		cmp	[ebp+var_24], eax
		jge	loc_1271
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+var_30]
		push	ecx
		mov	edx, [ebp+var_24]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		call	_ures_getByIndex_56
		add	esp, 10h
		mov	[ebp+var_30], eax
		mov	eax, [ebp+arg_8]
		push	eax
		lea	ecx, [ebp+var_48]
		push	ecx
		mov	edx, [ebp+var_24]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ures_getStringByIndex_56
		add	esp, 10h
		mov	[ebp+var_3C], eax
		mov	esi, esp
		push	0Ch		; unsigned int
		call	dword ptr ds:__imp_??2UMemory@icu_56@@SAPAXI@Z ; icu_56::UMemory::operator new(uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_15C], eax
		mov	[ebp+var_4], 0
		cmp	[ebp+var_15C], 0
		jz	short loc_11D6
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+var_30]
		push	ecx		; struct UResourceBundle *
		mov	ecx, [ebp+var_15C] ; this
		call	dword ptr ds:__imp_??0ResourceBundle@icu_56@@QAE@PAUUResourceBundle@@AAW4UErrorCode@@@Z	; icu_56::ResourceBundle::ResourceBundle(UResourceBundle *,UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+var_15C]
		mov	dword ptr [edx], offset	??_SResourceBundle@icu_56@@6B@ ; const icu_56::ResourceBundle::`local vftable'
		mov	eax, [ebp+var_15C]
		mov	[ebp+var_170], eax
		jmp	short loc_11E0
; ---------------------------------------------------------------------------

loc_11D6:				; CODE XREF: RBDataMap::init(UResourceBundle *,UResourceBundle *,UErrorCode &)+11Dj
		mov	[ebp+var_170], 0

loc_11E0:				; CODE XREF: RBDataMap::init(UResourceBundle *,UResourceBundle *,UErrorCode &)+154j
		mov	ecx, [ebp+var_170]
		mov	[ebp+var_168], ecx
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		mov	edx, [ebp+arg_8]
		push	edx		; enum UErrorCode *
		mov	eax, [ebp+var_168]
		push	eax		; void *
		mov	edi, esp
		mov	ecx, [ebp+var_48]
		push	ecx		; int
		mov	edx, [ebp+var_3C]
		push	edx		; wchar_t *
		lea	ecx, [ebp+var_150] ; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@PB_WH@Z	; icu_56::UnicodeString::UnicodeString(wchar_t const *,int)
		cmp	edi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_174], eax
		mov	eax, [ebp+var_174]
		mov	[ebp+var_178], eax
		mov	[ebp+var_4], 1
		mov	ecx, [ebp+var_178]
		push	ecx		; struct icu_56::UnicodeString *
		mov	edx, [ebp+var_18]
		mov	ecx, [edx+4]	; this
		call	dword ptr ds:__imp_?put@Hashtable@icu_56@@QAEPAXABVUnicodeString@2@PAXAAW4UErrorCode@@@Z ; icu_56::Hashtable::put(icu_56::UnicodeString	const &,void *,UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		lea	ecx, [ebp+var_150] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	loc_1121
; ---------------------------------------------------------------------------

loc_1271:				; CODE XREF: RBDataMap::init(UResourceBundle *,UResourceBundle *,UErrorCode &)+B9j
		jmp	short loc_127C
; ---------------------------------------------------------------------------

loc_1273:				; CODE XREF: RBDataMap::init(UResourceBundle *,UResourceBundle *,UErrorCode &)+92j
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 3

loc_127C:				; CODE XREF: RBDataMap::init(UResourceBundle *,UResourceBundle *,UErrorCode &):loc_1271j
		mov	eax, [ebp+var_30]
		push	eax
		call	_ures_close_56
		add	esp, 4
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN15
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 178h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?init@RBDataMap@@QAEXPAUUResourceBundle@@0AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
$LN15		dd 1			; DATA XREF: RBDataMap::init(UResourceBundle *,UResourceBundle *,UErrorCode &)+20Co
		dd offset $LN14
$LN14		dd 0FFFFFFB8h, 4	; DATA XREF: .text:000012C8o
		dd offset $LN12		; "keyLen"
$LN12		db 'keyLen',0           ; DATA XREF: .text:000012D4o
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 12E0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?init@RBDataMap@@QAEXPAUUResourceBundle@@0AAW4UErrorCode@@@Z$0 proc near
					; DATA XREF: .xdata$x:0000133Co
		mov	esi, esp
		mov	eax, [ebp-15Ch]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?init@RBDataMap@@QAEXPAUUResourceBundle@@0AAW4UErrorCode@@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?init@RBDataMap@@QAEXPAUUResourceBundle@@0AAW4UErrorCode@@@Z$1 proc near
					; DATA XREF: .xdata$x:00001344o
		mov	esi, esp
		lea	ecx, [ebp-150h]	; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?init@RBDataMap@@QAEXPAUUResourceBundle@@0AAW4UErrorCode@@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?init@RBDataMap@@QAEXPAUUResourceBundle@@0AAW4UErrorCode@@@Z proc near
					; DATA XREF: RBDataMap::init(UResourceBundle *,UResourceBundle *,UErrorCode &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-17Ch]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?init@RBDataMap@@QAEXPAUUResourceBundle@@0AAW4UErrorCode@@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?init@RBDataMap@@QAEXPAUUResourceBundle@@0AAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 1338h
__unwindtable$?init@RBDataMap@@QAEXPAUUResourceBundle@@0AAW4UErrorCode@@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00001350o
		dd offset __unwindfunclet$?init@RBDataMap@@QAEXPAUUResourceBundle@@0AAW4UErrorCode@@@Z$0
		dd 0FFFFFFFFh
		dd offset __unwindfunclet$?init@RBDataMap@@QAEXPAUUResourceBundle@@0AAW4UErrorCode@@@Z$1
__ehfuncinfo$?init@RBDataMap@@QAEXPAUUResourceBundle@@0AAW4UErrorCode@@@Z dd 19930522h,	2
					; DATA XREF: __ehhandler$?init@RBDataMap@@QAEXPAUUResourceBundle@@0AAW4UErrorCode@@@Z+1Eo
		dd offset __unwindtable$?init@RBDataMap@@QAEXPAUUResourceBundle@@0AAW4UErrorCode@@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 136Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct icu_56::ResourceBundle *__thiscall RBDataMap::getItem(RBDataMap *this, const char *, enum UErrorCode *)
		public ?getItem@RBDataMap@@UBEPBVResourceBundle@icu_56@@PBDAAW4UErrorCode@@@Z
?getItem@RBDataMap@@UBEPBVResourceBundle@icu_56@@PBDAAW4UErrorCode@@@Z proc near
					; DATA XREF: .rdata:00000270o

var_148		= byte ptr -148h
var_144		= dword	ptr -144h
var_138		= dword	ptr -138h
var_6C		= dword	ptr -6Ch
var_60		= byte ptr -60h
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?getItem@RBDataMap@@UBEPBVResourceBundle@icu_56@@PBDAAW4UErrorCode@@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 13Ch
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_148]
		mov	ecx, 4Fh ; 'O'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_18], ecx
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	?U_FAILURE@@YACW4UErrorCode@@@Z	; U_FAILURE(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_13CD
		xor	eax, eax
		jmp	loc_1489
; ---------------------------------------------------------------------------

loc_13CD:				; CODE XREF: RBDataMap::getItem(char const *,UErrorCode	&)+58j
		mov	esi, esp
		push	0
		push	0FFFFFFFFh
		mov	eax, [ebp+arg_0]
		push	eax
		lea	ecx, [ebp+var_60]
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@PBDHW4EInvariant@01@@Z ; icu_56::UnicodeString::UnicodeString(char const *,int,icu_56::UnicodeString::EInvariant)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0
		mov	esi, esp
		lea	eax, [ebp+var_60]
		push	eax		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_18]
		mov	ecx, [ecx+4]	; this
		call	dword ptr ds:__imp_?get@Hashtable@icu_56@@QBEPAXABVUnicodeString@2@@Z ;	icu_56::Hashtable::get(icu_56::UnicodeString const &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_6C], eax
		cmp	[ebp+var_6C], 0
		jz	short loc_143C
		mov	eax, [ebp+var_6C]
		mov	[ebp+var_144], eax
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		lea	ecx, [ebp+var_60] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_144]
		jmp	short loc_1489
; ---------------------------------------------------------------------------
		jmp	short loc_1470
; ---------------------------------------------------------------------------

loc_143C:				; CODE XREF: RBDataMap::getItem(char const *,UErrorCode	&)+A2j
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 2
		mov	[ebp+var_138], 0
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		lea	ecx, [ebp+var_60] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_138]
		jmp	short loc_1489
; ---------------------------------------------------------------------------

loc_1470:				; CODE XREF: RBDataMap::getItem(char const *,UErrorCode	&)+CEj
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		lea	ecx, [ebp+var_60] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1489:				; CODE XREF: RBDataMap::getItem(char const *,UErrorCode	&)+5Cj
					; RBDataMap::getItem(char const	*,UErrorCode &)+CCj ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN10_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 148h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?getItem@RBDataMap@@UBEPBVResourceBundle@icu_56@@PBDAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN10_0		dd 1			; DATA XREF: RBDataMap::getItem(char const *,UErrorCode	&)+121o
		dd offset $LN9_0
$LN9_0		dd 0FFFFFFA0h, 40h	; DATA XREF: .text:000014CCo
		dd offset $LN7_0	; "hashKey"
$LN7_0		db 'hashKey',0          ; DATA XREF: .text:000014D8o
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 14E4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?getItem@RBDataMap@@UBEPBVResourceBundle@icu_56@@PBDAAW4UErrorCode@@@Z$0 proc near
					; DATA XREF: .xdata$x:00001524o
		mov	esi, esp
		lea	ecx, [ebp-60h]	; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?getItem@RBDataMap@@UBEPBVResourceBundle@icu_56@@PBDAAW4UErrorCode@@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?getItem@RBDataMap@@UBEPBVResourceBundle@icu_56@@PBDAAW4UErrorCode@@@Z proc	near
					; DATA XREF: RBDataMap::getItem(char const *,UErrorCode	&)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-14Ch]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?getItem@RBDataMap@@UBEPBVResourceBundle@icu_56@@PBDAAW4UErrorCode@@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?getItem@RBDataMap@@UBEPBVResourceBundle@icu_56@@PBDAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 1520h
__unwindtable$?getItem@RBDataMap@@UBEPBVResourceBundle@icu_56@@PBDAAW4UErrorCode@@@Z dd	0FFFFFFFFh
					; DATA XREF: .xdata$x:00001530o
		dd offset __unwindfunclet$?getItem@RBDataMap@@UBEPBVResourceBundle@icu_56@@PBDAAW4UErrorCode@@@Z$0
__ehfuncinfo$?getItem@RBDataMap@@UBEPBVResourceBundle@icu_56@@PBDAAW4UErrorCode@@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$?getItem@RBDataMap@@UBEPBVResourceBundle@icu_56@@PBDAAW4UErrorCode@@@Z+1Eo
		dd offset __unwindtable$?getItem@RBDataMap@@UBEPBVResourceBundle@icu_56@@PBDAAW4UErrorCode@@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 154Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl U_FAILURE(enum  UErrorCode)
?U_FAILURE@@YACW4UErrorCode@@@Z	proc near
					; CODE XREF: RBDataMap::getItem(char const *,UErrorCode	&)+4Bp

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		setnle	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?U_FAILURE@@YACW4UErrorCode@@@Z	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1578h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual class	icu_56::UnicodeString const __thiscall RBDataMap::getString(char const *, enum	UErrorCode &)const
		public ?getString@RBDataMap@@UBE?BVUnicodeString@icu_56@@PBDAAW4UErrorCode@@@Z
?getString@RBDataMap@@UBE?BVUnicodeString@icu_56@@PBDAAW4UErrorCode@@@Z	proc near
					; DATA XREF: .rdata:00000250o

var_E4		= byte ptr -0E4h
var_E0		= dword	ptr -0E0h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E4h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_E4]
		mov	ecx, 39h ; '9'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	[ebp+var_E0], 0
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax+24h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_160B
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	ecx, [ebp+var_14]
		call	dword ptr ds:__imp_?getString@ResourceBundle@icu_56@@QBE?AVUnicodeString@2@AAW4UErrorCode@@@Z ;	icu_56::ResourceBundle::getString(UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+var_E0]
		or	edx, 1
		mov	[ebp+var_E0], edx
		mov	eax, [ebp+arg_0]
		jmp	short loc_162F
; ---------------------------------------------------------------------------
		jmp	short loc_162F
; ---------------------------------------------------------------------------

loc_160B:				; CODE XREF: RBDataMap::getString(char const *,UErrorCode &)+61j
		mov	esi, esp
		mov	ecx, [ebp+arg_0] ; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@XZ ; icu_56::UnicodeString::UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_E0]
		or	eax, 1
		mov	[ebp+var_E0], eax
		mov	eax, [ebp+arg_0]

loc_162F:				; CODE XREF: RBDataMap::getString(char const *,UErrorCode &)+8Fj
					; RBDataMap::getString(char const *,UErrorCode &)+91j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?getString@RBDataMap@@UBE?BVUnicodeString@icu_56@@PBDAAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1648h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; signed char __cdecl U_SUCCESS(enum  UErrorCode)
?U_SUCCESS@@YACW4UErrorCode@@@Z	proc near
					; CODE XREF: RBDataMap::getString(char const *,UErrorCode &)+54p
					; RBDataMap::getInt28(char const *,UErrorCode &)+4Ap ...

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		setle	al
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
?U_SUCCESS@@YACW4UErrorCode@@@Z	endp

_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1674h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall RBDataMap::getInt28(RBDataMap *this, const char *, enum UErrorCode *)
		public ?getInt28@RBDataMap@@UBEHPBDAAW4UErrorCode@@@Z
?getInt28@RBDataMap@@UBEHPBDAAW4UErrorCode@@@Z proc near ; DATA	XREF: .rdata:00000258o

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax+24h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_16E7
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+var_14] ; this
		call	dword ptr ds:__imp_?getInt@ResourceBundle@icu_56@@QBEHAAW4UErrorCode@@@Z ; icu_56::ResourceBundle::getInt(UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_16E9
; ---------------------------------------------------------------------------
		jmp	short loc_16E9
; ---------------------------------------------------------------------------

loc_16E7:				; CODE XREF: RBDataMap::getInt28(char const *,UErrorCode &)+57j
		xor	eax, eax

loc_16E9:				; CODE XREF: RBDataMap::getInt28(char const *,UErrorCode &)+6Fj
					; RBDataMap::getInt28(char const *,UErrorCode &)+71j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?getInt28@RBDataMap@@UBEHPBDAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1700h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; unsigned int __thiscall RBDataMap::getUInt28(RBDataMap *this,	const char *, enum UErrorCode *)
		public ?getUInt28@RBDataMap@@UBEIPBDAAW4UErrorCode@@@Z
?getUInt28@RBDataMap@@UBEIPBDAAW4UErrorCode@@@Z	proc near ; DATA XREF: .rdata:0000025Co

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax+24h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_1773
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+var_14] ; this
		call	dword ptr ds:__imp_?getUInt@ResourceBundle@icu_56@@QBEIAAW4UErrorCode@@@Z ; icu_56::ResourceBundle::getUInt(UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_1775
; ---------------------------------------------------------------------------
		jmp	short loc_1775
; ---------------------------------------------------------------------------

loc_1773:				; CODE XREF: RBDataMap::getUInt28(char const *,UErrorCode &)+57j
		xor	eax, eax

loc_1775:				; CODE XREF: RBDataMap::getUInt28(char const *,UErrorCode &)+6Fj
					; RBDataMap::getUInt28(char const *,UErrorCode &)+71j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?getUInt28@RBDataMap@@UBEIPBDAAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 178Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	int *__thiscall	RBDataMap::getIntVector(RBDataMap *this, int *,	const char *, enum UErrorCode *)
		public ?getIntVector@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z
?getIntVector@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z	proc near
					; DATA XREF: .rdata:00000260o

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax+24h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_1803
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+arg_0]
		push	ecx		; int *
		mov	ecx, [ebp+var_14] ; this
		call	dword ptr ds:__imp_?getIntVector@ResourceBundle@icu_56@@QBEPBHAAHAAW4UErrorCode@@@Z ; icu_56::ResourceBundle::getIntVector(int &,UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_1805
; ---------------------------------------------------------------------------
		jmp	short loc_1805
; ---------------------------------------------------------------------------

loc_1803:				; CODE XREF: RBDataMap::getIntVector(int &,char	const *,UErrorCode &)+57j
		xor	eax, eax

loc_1805:				; CODE XREF: RBDataMap::getIntVector(int &,char	const *,UErrorCode &)+73j
					; RBDataMap::getIntVector(int &,char const *,UErrorCode	&)+75j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?getIntVector@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 181Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	unsigned __int8	*__thiscall RBDataMap::getBinary(RBDataMap *this, int *, const char *, enum UErrorCode *)
		public ?getBinary@RBDataMap@@UBEPBEAAHPBDAAW4UErrorCode@@@Z
?getBinary@RBDataMap@@UBEPBEAAHPBDAAW4UErrorCode@@@Z proc near ; DATA XREF: .rdata:00000264o

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		mov	edx, [eax+24h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_1893
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax		; enum UErrorCode *
		mov	ecx, [ebp+arg_0]
		push	ecx		; int *
		mov	ecx, [ebp+var_14] ; this
		call	dword ptr ds:__imp_?getBinary@ResourceBundle@icu_56@@QBEPBEAAHAAW4UErrorCode@@@Z ; icu_56::ResourceBundle::getBinary(int &,UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_1895
; ---------------------------------------------------------------------------
		jmp	short loc_1895
; ---------------------------------------------------------------------------

loc_1893:				; CODE XREF: RBDataMap::getBinary(int &,char const *,UErrorCode	&)+57j
		xor	eax, eax

loc_1895:				; CODE XREF: RBDataMap::getBinary(int &,char const *,UErrorCode	&)+73j
					; RBDataMap::getBinary(int &,char const	*,UErrorCode &)+75j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?getBinary@RBDataMap@@UBEPBEAAHPBDAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 18ACh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall RBDataMap::getInt(RBDataMap *this, const char *, enum UErrorCode *)
		public ?getInt@RBDataMap@@UBEHPBDAAW4UErrorCode@@@Z
?getInt@RBDataMap@@UBEHPBDAAW4UErrorCode@@@Z proc near ; DATA XREF: .rdata:00000254o

var_13C		= byte ptr -13Ch
var_138		= dword	ptr -138h
var_12C		= dword	ptr -12Ch
var_60		= byte ptr -60h
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?getInt@RBDataMap@@UBEHPBDAAW4UErrorCode@@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 130h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_13C]
		mov	ecx, 4Ch ; 'L'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_18], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		lea	edx, [ebp+var_60]
		push	edx
		mov	eax, [ebp+var_18]
		mov	edx, [eax]
		mov	ecx, [ebp+var_18]
		mov	eax, [edx+4]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	short loc_1964
		lea	eax, [ebp+var_60]
		push	eax		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_18] ; this
		call	?utoi@DataMap@@IBEHABVUnicodeString@icu_56@@@Z ; DataMap::utoi(icu_56::UnicodeString const &)
		mov	[ebp+var_138], eax
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		lea	ecx, [ebp+var_60] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_138]
		jmp	short loc_19A8
; ---------------------------------------------------------------------------
		jmp	short loc_198F
; ---------------------------------------------------------------------------

loc_1964:				; CODE XREF: RBDataMap::getInt(char const *,UErrorCode &)+81j
		mov	[ebp+var_12C], 0
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		lea	ecx, [ebp+var_60] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_12C]
		jmp	short loc_19A8
; ---------------------------------------------------------------------------

loc_198F:				; CODE XREF: RBDataMap::getInt(char const *,UErrorCode &)+B6j
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		lea	ecx, [ebp+var_60] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_19A8:				; CODE XREF: RBDataMap::getInt(char const *,UErrorCode &)+B4j
					; RBDataMap::getInt(char const *,UErrorCode &)+E1j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN9_1
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 13Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?getInt@RBDataMap@@UBEHPBDAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
$LN9_1		dd 1			; DATA XREF: RBDataMap::getInt(char const *,UErrorCode &)+100o
		dd offset $LN8
$LN8		dd 0FFFFFFA0h, 40h	; DATA XREF: .text:000019E8o
		dd offset $LN6
$LN6		db 72h,	0		; DATA XREF: .text:000019F4o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 19FCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?getInt@RBDataMap@@UBEHPBDAAW4UErrorCode@@@Z$0 proc near
					; DATA XREF: .xdata$x:00001A3Co
		mov	esi, esp
		lea	ecx, [ebp-60h]	; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?getInt@RBDataMap@@UBEHPBDAAW4UErrorCode@@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?getInt@RBDataMap@@UBEHPBDAAW4UErrorCode@@@Z proc near
					; DATA XREF: RBDataMap::getInt(char const *,UErrorCode &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-140h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?getInt@RBDataMap@@UBEHPBDAAW4UErrorCode@@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?getInt@RBDataMap@@UBEHPBDAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 1A38h
__unwindtable$?getInt@RBDataMap@@UBEHPBDAAW4UErrorCode@@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00001A48o
		dd offset __unwindfunclet$?getInt@RBDataMap@@UBEHPBDAAW4UErrorCode@@@Z$0
__ehfuncinfo$?getInt@RBDataMap@@UBEHPBDAAW4UErrorCode@@@Z dd 19930522h,	1
					; DATA XREF: __ehhandler$?getInt@RBDataMap@@UBEHPBDAAW4UErrorCode@@@Z+1Eo
		dd offset __unwindtable$?getInt@RBDataMap@@UBEHPBDAAW4UErrorCode@@@Z
		align 20h
		dd 1
_xdata$x	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1A64h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct icu_56::UnicodeString *__thiscall RBDataMap::getStringArray(RBDataMap *this, int	*, const char *, enum UErrorCode *)
		public ?getStringArray@RBDataMap@@UBEPBVUnicodeString@icu_56@@AAHPBDAAW4UErrorCode@@@Z
?getStringArray@RBDataMap@@UBEPBVUnicodeString@icu_56@@AAHPBDAAW4UErrorCode@@@Z	proc near
					; DATA XREF: .rdata:00000268o

var_174		= dword	ptr -174h
var_170		= dword	ptr -170h
var_168		= dword	ptr -168h
var_15C		= dword	ptr -15Ch
var_150		= dword	ptr -150h
var_144		= byte ptr -144h
var_3C		= dword	ptr -3Ch
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?getStringArray@RBDataMap@@UBEPBVUnicodeString@icu_56@@AAHPBDAAW4UErrorCode@@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 168h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_174]
		mov	ecx, 5Ah ; 'Z'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_18], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+var_18]
		mov	eax, [edx]
		mov	ecx, [ebp+var_18]
		mov	edx, [eax+24h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_24], eax
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	loc_1C93
		mov	[ebp+var_30], 0
		mov	esi, esp
		mov	ecx, [ebp+var_24] ; this
		call	dword ptr ds:__imp_?getSize@ResourceBundle@icu_56@@QBEHXZ ; icu_56::ResourceBundle::getSize(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+arg_0]
		mov	[ecx], eax
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax], 0
		jg	short loc_1B10
		xor	eax, eax
		jmp	loc_1C95
; ---------------------------------------------------------------------------

loc_1B10:				; CODE XREF: RBDataMap::getStringArray(int &,char const	*,UErrorCode &)+A3j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_168], ecx
		cmp	[ebp+var_168], 0
		jnz	short loc_1B36
		push	4		; unsigned int
		call	??_U@YAPAXI@Z	; operator new[](uint)
		add	esp, 4
		mov	[ebp+var_170], eax
		jmp	short loc_1B71
; ---------------------------------------------------------------------------

loc_1B36:				; CODE XREF: RBDataMap::getStringArray(int &,char const	*,UErrorCode &)+BEj
		xor	ecx, ecx
		mov	eax, [ebp+var_168]
		mov	edx, 40h ; '@'
		mul	edx
		seto	cl
		neg	ecx
		or	ecx, eax
		xor	eax, eax
		add	ecx, 4
		setb	al
		neg	eax
		or	eax, ecx
		mov	esi, esp
		push	eax		; unsigned int
		call	dword ptr ds:__imp_??_UUMemory@icu_56@@SAPAXI@Z	; icu_56::UMemory::operator new[](uint)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_170], eax

loc_1B71:				; CODE XREF: RBDataMap::getStringArray(int &,char const	*,UErrorCode &)+D0j
		mov	ecx, [ebp+var_170] ; this
		mov	[ebp+var_150], ecx
		mov	[ebp+var_4], 0
		cmp	[ebp+var_150], 0
		jz	short loc_1BD0
		mov	edx, [ebp+var_150]
		mov	eax, [ebp+var_168]
		mov	[edx], eax
		mov	ecx, dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ	; icu_56::UnicodeString::~UnicodeString(void)
		push	ecx
		push	offset ??_TUnicodeString@icu_56@@QAEXXZ	; icu_56::UnicodeString::`local	vftable	constructor closure'(void)
		mov	edx, [ebp+var_168]
		push	edx
		push	40h ; '@'
		mov	eax, [ebp+var_150]
		add	eax, 4
		push	eax
		call	??_L@YGXPAXIHP6EX0@Z1@Z	; `eh vector constructor iterator'(void *,uint,int,void (*)(void *),void (*)(void *))
		mov	ecx, [ebp+var_150]
		add	ecx, 4
		mov	[ebp+var_174], ecx
		jmp	short loc_1BDA
; ---------------------------------------------------------------------------

loc_1BD0:				; CODE XREF: RBDataMap::getStringArray(int &,char const	*,UErrorCode &)+127j
		mov	[ebp+var_174], 0

loc_1BDA:				; CODE XREF: RBDataMap::getStringArray(int &,char const	*,UErrorCode &)+16Aj
		mov	edx, [ebp+var_174]
		mov	[ebp+var_15C], edx
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_15C]
		mov	[ebp+var_3C], eax
		mov	[ebp+var_30], 0
		jmp	short loc_1C08
; ---------------------------------------------------------------------------

loc_1BFF:				; CODE XREF: RBDataMap::getStringArray(int &,char const	*,UErrorCode &)+223j
		mov	eax, [ebp+var_30]
		add	eax, 1
		mov	[ebp+var_30], eax

loc_1C08:				; CODE XREF: RBDataMap::getStringArray(int &,char const	*,UErrorCode &)+199j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_30]
		cmp	ecx, [eax]
		jge	short loc_1C8C
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+var_30]
		push	ecx
		lea	edx, [ebp+var_144]
		push	edx
		mov	ecx, [ebp+var_24]
		call	dword ptr ds:__imp_?getStringEx@ResourceBundle@icu_56@@QBE?AVUnicodeString@2@HAAW4UErrorCode@@@Z ; icu_56::ResourceBundle::getStringEx(int,UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_170], eax
		mov	eax, [ebp+var_170]
		mov	[ebp+var_174], eax
		mov	[ebp+var_4], 1
		mov	esi, esp
		mov	ecx, [ebp+var_174]
		push	ecx
		mov	ecx, [ebp+var_30]
		shl	ecx, 6
		add	ecx, [ebp+var_3C]
		call	dword ptr ds:__imp_??4UnicodeString@icu_56@@QAEAAV01@$$QAV01@@Z	; icu_56::UnicodeString::operator=(icu_56::UnicodeString &&)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		lea	ecx, [ebp+var_144] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	loc_1BFF
; ---------------------------------------------------------------------------

loc_1C8C:				; CODE XREF: RBDataMap::getStringArray(int &,char const	*,UErrorCode &)+1ACj
		mov	eax, [ebp+var_3C]
		jmp	short loc_1C95
; ---------------------------------------------------------------------------
		jmp	short loc_1C95
; ---------------------------------------------------------------------------

loc_1C93:				; CODE XREF: RBDataMap::getStringArray(int &,char const	*,UErrorCode &)+79j
		xor	eax, eax

loc_1C95:				; CODE XREF: RBDataMap::getStringArray(int &,char const	*,UErrorCode &)+A7j
					; RBDataMap::getStringArray(int	&,char const *,UErrorCode &)+22Bj ...
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 174h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?getStringArray@RBDataMap@@UBEPBVUnicodeString@icu_56@@AAHPBDAAW4UErrorCode@@@Z	endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 1CC0h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?getStringArray@RBDataMap@@UBEPBVUnicodeString@icu_56@@AAHPBDAAW4UErrorCode@@@Z$0 proc near
					; DATA XREF: .xdata$x:00001D1Co
		mov	esi, esp
		mov	eax, [ebp-150h]
		push	eax		; void *
		call	dword ptr ds:__imp_??_VUMemory@icu_56@@SAXPAX@Z	; icu_56::UMemory::operator delete[](void *)
		add	esp, 4
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?getStringArray@RBDataMap@@UBEPBVUnicodeString@icu_56@@AAHPBDAAW4UErrorCode@@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?getStringArray@RBDataMap@@UBEPBVUnicodeString@icu_56@@AAHPBDAAW4UErrorCode@@@Z$1 proc near
					; DATA XREF: .xdata$x:00001D24o
		mov	esi, esp
		lea	ecx, [ebp-144h]	; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?getStringArray@RBDataMap@@UBEPBVUnicodeString@icu_56@@AAHPBDAAW4UErrorCode@@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?getStringArray@RBDataMap@@UBEPBVUnicodeString@icu_56@@AAHPBDAAW4UErrorCode@@@Z proc near
					; DATA XREF: RBDataMap::getStringArray(int &,char const	*,UErrorCode &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-178h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?getStringArray@RBDataMap@@UBEPBVUnicodeString@icu_56@@AAHPBDAAW4UErrorCode@@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?getStringArray@RBDataMap@@UBEPBVUnicodeString@icu_56@@AAHPBDAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 1D18h
__unwindtable$?getStringArray@RBDataMap@@UBEPBVUnicodeString@icu_56@@AAHPBDAAW4UErrorCode@@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00001D30o
		dd offset __unwindfunclet$?getStringArray@RBDataMap@@UBEPBVUnicodeString@icu_56@@AAHPBDAAW4UErrorCode@@@Z$0
		dd 0FFFFFFFFh
		dd offset __unwindfunclet$?getStringArray@RBDataMap@@UBEPBVUnicodeString@icu_56@@AAHPBDAAW4UErrorCode@@@Z$1
__ehfuncinfo$?getStringArray@RBDataMap@@UBEPBVUnicodeString@icu_56@@AAHPBDAAW4UErrorCode@@@Z dd	19930522h, 2
					; DATA XREF: __ehhandler$?getStringArray@RBDataMap@@UBEPBVUnicodeString@icu_56@@AAHPBDAAW4UErrorCode@@@Z+1Eo
		dd offset __unwindtable$?getStringArray@RBDataMap@@UBEPBVUnicodeString@icu_56@@AAHPBDAAW4UErrorCode@@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1D4Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall icu_56::UnicodeString::`vector deleting destructor'(unsigned int)
		public ??_EUnicodeString@icu_56@@UAEPAXI@Z
??_EUnicodeString@icu_56@@UAEPAXI@Z proc near
					; DATA XREF: .rdata:const icu_56::UnicodeString::`local	vftable'o

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx		; this
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		and	eax, 2
		jz	short loc_1DB8
		mov	eax, dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ	; icu_56::UnicodeString::~UnicodeString(void)
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx-4]
		push	edx
		push	40h ; '@'
		mov	eax, [ebp+var_8]
		push	eax
		call	??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_1DB0
		mov	eax, [ebp+var_8]
		sub	eax, 4
		mov	esi, esp
		push	eax		; void *
		call	dword ptr ds:__imp_??_VUMemory@icu_56@@SAXPAX@Z	; icu_56::UMemory::operator delete[](void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1DB0:				; CODE XREF: icu_56::UnicodeString::`vector deleting destructor'(uint)+49j
		mov	eax, [ebp+var_8]
		sub	eax, 4
		jmp	short loc_1DEB
; ---------------------------------------------------------------------------

loc_1DB8:				; CODE XREF: icu_56::UnicodeString::`vector deleting destructor'(uint)+29j
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_1DE8
		mov	esi, esp
		mov	eax, [ebp+var_8]
		push	eax		; void *
		call	dword ptr ds:__imp_??3UMemory@icu_56@@SAXPAX@Z ; icu_56::UMemory::operator delete(void *)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1DE8:				; CODE XREF: icu_56::UnicodeString::`vector deleting destructor'(uint)+84j
		mov	eax, [ebp+var_8]

loc_1DEB:				; CODE XREF: icu_56::UnicodeString::`vector deleting destructor'(uint)+6Aj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_EUnicodeString@icu_56@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1E04h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall icu_56::UnicodeString::`local	vftable	constructor closure'(void)
		public ??_TUnicodeString@icu_56@@QAEXXZ
??_TUnicodeString@icu_56@@QAEXXZ proc near
					; DATA XREF: RBDataMap::getStringArray(int &,char const	*,UErrorCode &)+13Eo

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	[ebp+var_8], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_8] ; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@XZ ; icu_56::UnicodeString::UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		mov	dword ptr [eax], offset	??_SUnicodeString@icu_56@@6B@ ;	const icu_56::UnicodeString::`local vftable'
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??_TUnicodeString@icu_56@@QAEXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1E58h
		dd offset ??_R4UnicodeString@icu_56@@6B@ ; const icu_56::UnicodeString::`RTTI Complete Object Locator'
		public ??_SUnicodeString@icu_56@@6B@
; const	icu_56::UnicodeString::`local vftable'
??_SUnicodeString@icu_56@@6B@ dd offset	??_EUnicodeString@icu_56@@UAEPAXI@Z
					; DATA XREF: icu_56::UnicodeString::`local vftable constructor closure'(void)+38o
					; icu_56::UnicodeString::`vector deleting destructor'(uint)
		dd offset ?getDynamicClassID@UnicodeString@icu_56@@UBEPAXXZ ; icu_56::UnicodeString::getDynamicClassID(void)
		dd offset ?extractBetween@UnicodeString@icu_56@@UBEXHHAAV12@@Z ; icu_56::UnicodeString::extractBetween(int,int,icu_56::UnicodeString &)
		dd offset ?handleReplaceBetween@UnicodeString@icu_56@@UAEXHHABV12@@Z ; icu_56::UnicodeString::handleReplaceBetween(int,int,icu_56::UnicodeString const &)
		dd offset ?copy@UnicodeString@icu_56@@UAEXHHH@Z	; icu_56::UnicodeString::copy(int,int,int)
		dd offset ?hasMetaData@UnicodeString@icu_56@@UBECXZ ; icu_56::UnicodeString::hasMetaData(void)
		dd offset ?clone@UnicodeString@icu_56@@UBEPAVReplaceable@2@XZ ;	icu_56::UnicodeString::clone(void)
		dd offset ?getLength@UnicodeString@icu_56@@MBEHXZ ; icu_56::UnicodeString::getLength(void)
		dd offset ?getCharAt@UnicodeString@icu_56@@MBE_WH@Z ; icu_56::UnicodeString::getCharAt(int)
		dd offset ?getChar32At@UnicodeString@icu_56@@MBEHH@Z ; icu_56::UnicodeString::getChar32At(int)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1E84h
		public ??_R4UnicodeString@icu_56@@6B@
; const	icu_56::UnicodeString::`RTTI Complete Object Locator'
??_R4UnicodeString@icu_56@@6B@ dd 3 dup(0) ; DATA XREF:	.rdata:00001E58o
		dd offset ??_R0?AVUnicodeString@icu_56@@@8 ; icu_56::UnicodeString `RTTI Type Descriptor'
		dd offset ??_R3UnicodeString@icu_56@@8 ; icu_56::UnicodeString::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 1E98h
		public ??_R0?AVUnicodeString@icu_56@@@8
; class	icu_56::UnicodeString `RTTI Type Descriptor'
??_R0?AVUnicodeString@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00001E90o
					; .rdata$r:icu_56::UnicodeString::`RTTI	Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avunicodestr	db '.?AVUnicodeString@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1EBCh
		public ??_R3UnicodeString@icu_56@@8
; icu_56::UnicodeString::`RTTI Class Hierarchy Descriptor'
??_R3UnicodeString@icu_56@@8 dd	2 dup(0) ; DATA	XREF: .rdata$r:00001E94o
					; .rdata$r:00001EF8o
		dd 4
		dd offset ??_R2UnicodeString@icu_56@@8 ; icu_56::UnicodeString::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1ECCh
		public ??_R2UnicodeString@icu_56@@8
; icu_56::UnicodeString::`RTTI Base Class Array'
??_R2UnicodeString@icu_56@@8 dd	offset ??_R1A@?0A@EA@UnicodeString@icu_56@@8
					; DATA XREF: .rdata$r:00001EC8o
					; icu_56::UnicodeString::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@Replaceable@icu_56@@8 ;	icu_56::Replaceable::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1EE0h
		public ??_R1A@?0A@EA@UnicodeString@icu_56@@8
; icu_56::UnicodeString::`RTTI Base Class Descriptor at	(0, -1,	0, 64)'
??_R1A@?0A@EA@UnicodeString@icu_56@@8 dd offset	??_R0?AVUnicodeString@icu_56@@@8
					; DATA XREF: .rdata$r:icu_56::UnicodeString::`RTTI Base	Class Array'o
					; icu_56::UnicodeString	`RTTI Type Descriptor'
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd offset off_40
		dd offset ??_R3UnicodeString@icu_56@@8 ; icu_56::UnicodeString::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1EFCh
		public ??_R1A@?0A@EA@Replaceable@icu_56@@8
; icu_56::Replaceable::`RTTI Base Class	Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@Replaceable@icu_56@@8 dd offset ??_R0?AVReplaceable@icu_56@@@8
					; DATA XREF: .rdata$r:00001ED0o
					; .rdata$r:icu_56::Replaceable::`RTTI Base Class Array'o
					; icu_56::Replaceable `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset off_40
		dd offset ??_R3Replaceable@icu_56@@8 ; icu_56::Replaceable::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 1F18h
		public ??_R0?AVReplaceable@icu_56@@@8
; class	icu_56::Replaceable `RTTI Type Descriptor'
??_R0?AVReplaceable@icu_56@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:icu_56::Replaceable::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?avreplaceabl	db '.?AVReplaceable@icu_56@@',0
		align 4
_data		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1F3Ch
		public ??_R3Replaceable@icu_56@@8
; icu_56::Replaceable::`RTTI Class Hierarchy Descriptor'
??_R3Replaceable@icu_56@@8 dd 2	dup(0)	; DATA XREF: .rdata$r:00001F14o
		dd 3
		dd offset ??_R2Replaceable@icu_56@@8 ; icu_56::Replaceable::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 1F4Ch
		public ??_R2Replaceable@icu_56@@8
; icu_56::Replaceable::`RTTI Base Class	Array'
??_R2Replaceable@icu_56@@8 dd offset ??_R1A@?0A@EA@Replaceable@icu_56@@8
					; DATA XREF: .rdata$r:00001F48o
					; icu_56::Replaceable::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@UObject@icu_56@@8 ; icu_56::UObject::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@UMemory@icu_56@@8 ; icu_56::UMemory::`RTTI Base Class Descriptor	at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

;
; Exported entry
;
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1F5Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	int *__thiscall	RBDataMap::getIntArray(RBDataMap *this,	int *, const char *, enum UErrorCode *)
		public ?getIntArray@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z
?getIntArray@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z proc near
					; DATA XREF: .rdata:0000026Co

var_1B0		= dword	ptr -1B0h
var_1AC		= dword	ptr -1ACh
var_1A4		= dword	ptr -1A4h
var_198		= dword	ptr -198h
var_18C		= byte ptr -18Ch
var_84		= byte ptr -84h
var_3C		= dword	ptr -3Ch
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?getIntArray@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 1A4h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_1B0]
		mov	ecx, 69h ; 'i'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_18], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+var_18]
		mov	eax, [edx]
		mov	ecx, [ebp+var_18]
		mov	edx, [eax+24h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_24], eax
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		push	ecx
		call	?U_SUCCESS@@YACW4UErrorCode@@@Z	; U_SUCCESS(UErrorCode)
		add	esp, 4
		movsx	edx, al
		test	edx, edx
		jz	loc_2129
		mov	[ebp+var_30], 0
		mov	esi, esp
		mov	ecx, [ebp+var_24] ; this
		call	dword ptr ds:__imp_?getSize@ResourceBundle@icu_56@@QBEHXZ ; icu_56::ResourceBundle::getSize(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+arg_0]
		mov	[ecx], eax
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax], 0
		jg	short loc_2008
		xor	eax, eax
		jmp	loc_212B
; ---------------------------------------------------------------------------

loc_2008:				; CODE XREF: RBDataMap::getIntArray(int	&,char const *,UErrorCode &)+A3j
		xor	ecx, ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	edx, 4
		mul	edx
		seto	cl
		neg	ecx
		or	ecx, eax
		push	ecx		; unsigned int
		call	??_U@YAPAXI@Z	; operator new[](uint)
		add	esp, 4
		mov	[ebp+var_1A4], eax
		mov	eax, [ebp+var_1A4]
		mov	[ebp+var_3C], eax
		mov	esi, esp
		lea	ecx, [ebp+var_84] ; this
		call	dword ptr ds:__imp_??0UnicodeString@icu_56@@QAE@XZ ; icu_56::UnicodeString::UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0
		mov	[ebp+var_30], 0
		jmp	short loc_2063
; ---------------------------------------------------------------------------

loc_205A:				; CODE XREF: RBDataMap::getIntArray(int	&,char const *,UErrorCode &)+199j
		mov	eax, [ebp+var_30]
		add	eax, 1
		mov	[ebp+var_30], eax

loc_2063:				; CODE XREF: RBDataMap::getIntArray(int	&,char const *,UErrorCode &)+FCj
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_30]
		cmp	ecx, [eax]
		jge	loc_20FA
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+var_30]
		push	ecx
		lea	edx, [ebp+var_18C]
		push	edx
		mov	ecx, [ebp+var_24]
		call	dword ptr ds:__imp_?getStringEx@ResourceBundle@icu_56@@QBE?AVUnicodeString@2@HAAW4UErrorCode@@@Z ; icu_56::ResourceBundle::getStringEx(int,UErrorCode &)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_1AC], eax
		mov	eax, [ebp+var_1AC]
		mov	[ebp+var_1B0], eax
		mov	byte ptr [ebp+var_4], 1
		mov	esi, esp
		mov	ecx, [ebp+var_1B0]
		push	ecx
		lea	ecx, [ebp+var_84]
		call	dword ptr ds:__imp_??4UnicodeString@icu_56@@QAEAAV01@$$QAV01@@Z	; icu_56::UnicodeString::operator=(icu_56::UnicodeString &&)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	byte ptr [ebp+var_4], 0
		mov	esi, esp
		lea	ecx, [ebp+var_18C] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		lea	eax, [ebp+var_84]
		push	eax		; struct icu_56::UnicodeString *
		mov	ecx, [ebp+var_18] ; this
		call	?utoi@DataMap@@IBEHABVUnicodeString@icu_56@@@Z ; DataMap::utoi(icu_56::UnicodeString const &)
		mov	ecx, [ebp+var_30]
		mov	edx, [ebp+var_3C]
		mov	[edx+ecx*4], eax
		jmp	loc_205A
; ---------------------------------------------------------------------------

loc_20FA:				; CODE XREF: RBDataMap::getIntArray(int	&,char const *,UErrorCode &)+10Fj
		mov	eax, [ebp+var_3C]
		mov	[ebp+var_198], eax
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	esi, esp
		lea	ecx, [ebp+var_84] ; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_198]
		jmp	short loc_212B
; ---------------------------------------------------------------------------
		jmp	short loc_212B
; ---------------------------------------------------------------------------

loc_2129:				; CODE XREF: RBDataMap::getIntArray(int	&,char const *,UErrorCode &)+79j
		xor	eax, eax

loc_212B:				; CODE XREF: RBDataMap::getIntArray(int	&,char const *,UErrorCode &)+A7j
					; RBDataMap::getIntArray(int &,char const *,UErrorCode &)+1C9j	...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN14_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1B0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?getIntArray@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN14_0		dd 1			; DATA XREF: RBDataMap::getIntArray(int	&,char const *,UErrorCode &)+1D3o
		dd offset $LN13
$LN13		dd 0FFFFFF7Ch, 40h	; DATA XREF: .text:0000216Co
		dd offset $LN11		; "stringRes"
$LN11		db 'stringRes',0        ; DATA XREF: .text:00002178o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 2188h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?getIntArray@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z$0 proc near
					; DATA XREF: .xdata$x:000021E0o
		mov	esi, esp
		lea	ecx, [ebp-84h]	; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?getIntArray@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?getIntArray@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z$1 proc near
					; DATA XREF: .xdata$x:000021E8o
		mov	esi, esp
		lea	ecx, [ebp-18Ch]	; this
		call	dword ptr ds:__imp_??1UnicodeString@icu_56@@UAE@XZ ; icu_56::UnicodeString::~UnicodeString(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$?getIntArray@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?getIntArray@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z proc	near
					; DATA XREF: RBDataMap::getIntArray(int	&,char const *,UErrorCode &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-1B4h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?getIntArray@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?getIntArray@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 21DCh
__unwindtable$?getIntArray@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z dd	0FFFFFFFFh
					; DATA XREF: .xdata$x:000021F4o
		dd offset __unwindfunclet$?getIntArray@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z$0
		align 8
		dd offset __unwindfunclet$?getIntArray@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z$1
__ehfuncinfo$?getIntArray@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z dd 19930522h, 2
					; DATA XREF: __ehhandler$?getIntArray@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z+1Eo
		dd offset __unwindtable$?getIntArray@RBDataMap@@UBEPBHAAHPBDAAW4UErrorCode@@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; const	type_info::`vftable'
		extrn ??_7type_info@@6B@:near
					; DATA XREF: .data:DataMap `RTTI Type Descriptor'o
					; .data:RBDataMap `RTTI	Type Descriptor'o ...
		extrn __purecall:near	; DATA XREF: .rdata:off_40o
					; .rdata:00000044o ...
; void __cdecl operator	delete(void *)
		extrn ??3@YAXPAX@Z:near	; CODE XREF: DataMap::`scalar deleting destructor'(uint)+37p
					; DataMap::`vector deleting destructor'(uint)+75p ...
		extrn __RTC_CheckEsp:near
					; CODE XREF: DataMap::`scalar deleting destructor'(uint)+4Dp
					; DataMap::`vector deleting destructor'(uint)+8Bp ...
; void __cdecl operator	delete[](void *)
		extrn ??_V@YAXPAX@Z:near
					; CODE XREF: DataMap::`vector deleting destructor'(uint)+51p
					; RBDataMap::`vector deleting destructor'(uint)+51p
; void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *))
		extrn ??_M@YGXPAXIHP6EX0@Z@Z:near
					; CODE XREF: DataMap::`vector deleting destructor'(uint)+3Dp
					; RBDataMap::`vector deleting destructor'(uint)+3Dp ...
; int __cdecl _atoi(const char *Str)
		extrn __imp__atoi:near	; CODE XREF: DataMap::utoi(icu_56::UnicodeString const &)+91p
					; DATA XREF: DataMap::utoi(icu_56::UnicodeString const &)+91r
		extrn _u_UCharsToChars_56:near
					; CODE XREF: DataMap::utoi(icu_56::UnicodeString const &)+72p
; int __thiscall icu_56::UnicodeString::length(icu_56::UnicodeString *__hidden this)
		extrn __imp_?length@UnicodeString@icu_56@@QBEHXZ:near
					; CODE XREF: DataMap::utoi(icu_56::UnicodeString const &)+4Ap
					; DATA XREF: DataMap::utoi(icu_56::UnicodeString const &)+4Ar
; const	wchar_t	*__thiscall icu_56::UnicodeString::getBuffer(icu_56::UnicodeString *__hidden this)
		extrn __imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ:near
					; CODE XREF: DataMap::utoi(icu_56::UnicodeString const &)+32p
					; DATA XREF: DataMap::utoi(icu_56::UnicodeString const &)+32r
		extrn ___security_cookie:near
					; DATA XREF: DataMap::utoi(icu_56::UnicodeString const &)+20r
					; RBDataMap::~RBDataMap(void)+2Er ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: DataMap::utoi(icu_56::UnicodeString const &)+BAp
					; __ehhandler$??1RBDataMap@@UAE@XZ+Fp ...
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near
					; CODE XREF: DataMap::utoi(icu_56::UnicodeString const &)+ABp
					; RBDataMap::RBDataMap(void)+FFp ...
		extrn ___CxxFrameHandler3:near
					; CODE XREF: __ehhandler$??1RBDataMap@@UAE@XZ+19j
					; __ehhandler$??0RBDataMap@@QAE@XZ+19j	...
; void __cdecl icu_56::UMemory::operator delete(void *)
		extrn __imp_??3UMemory@icu_56@@SAXPAX@Z:near
					; CODE XREF: icu_56::Hashtable::`scalar	deleting destructor'(uint)+43p
					; __unwindfunclet$??0RBDataMap@@QAE@XZ$1+9p ...
; _DWORD __thiscall icu_56::Hashtable::~Hashtable(icu_56::Hashtable *__hidden this)
		extrn __imp_??1Hashtable@icu_56@@QAE@XZ:near
					; CODE XREF: icu_56::Hashtable::`scalar	deleting destructor'(uint)+28p
					; DATA XREF: icu_56::Hashtable::`scalar	deleting destructor'(uint)+28r
; void (__cdecl	*__thiscall icu_56::Hashtable::setValueDeleter(icu_56::Hashtable *__hidden this, void (__cdecl *)(void *)))(void *)
		extrn __imp_?setValueDeleter@Hashtable@icu_56@@QAEP6AXPAX@ZP6AX0@Z@Z:near
					; CODE XREF: RBDataMap::RBDataMap(void)+DEp
					; RBDataMap::RBDataMap(UResourceBundle *,UErrorCode &)+D7p ...
; _DWORD __thiscall icu_56::Hashtable::Hashtable(icu_56::Hashtable *__hidden this, signed __int8, enum UErrorCode *)
		extrn __imp_??0Hashtable@icu_56@@QAE@CAAW4UErrorCode@@@Z:near
					; CODE XREF: RBDataMap::RBDataMap(void)+96p
					; RBDataMap::RBDataMap(UResourceBundle *,UErrorCode &)+8Fp ...
; void *__cdecl	static icu_56::UMemory::operator new(unsigned int)
		extrn __imp_??2UMemory@icu_56@@SAPAXI@Z:near
					; CODE XREF: RBDataMap::RBDataMap(void)+65p
					; RBDataMap::RBDataMap(UResourceBundle *,UErrorCode &)+5Ep ...
		extrn _ures_close_56:near
					; CODE XREF: RBDataMap::init(UResourceBundle *,UErrorCode &)+1B3p
					; RBDataMap::init(UResourceBundle *,UResourceBundle *,UErrorCode &)+200p
; _DWORD __thiscall icu_56::UnicodeString::~UnicodeString(icu_56::UnicodeString	*__hidden this)
		extrn __imp_??1UnicodeString@icu_56@@UAE@XZ:near
					; CODE XREF: RBDataMap::init(UResourceBundle *,UErrorCode &)+19Dp
					; __unwindfunclet$?init@RBDataMap@@QAEXPAUUResourceBundle@@AAW4UErrorCode@@@Z$1+8p ...
; void *__thiscall icu_56::Hashtable::put(icu_56::Hashtable *__hidden this, const struct icu_56::UnicodeString *, void *, enum UErrorCode *)
		extrn __imp_?put@Hashtable@icu_56@@QAEPAXABVUnicodeString@2@PAXAAW4UErrorCode@@@Z:near
					; CODE XREF: RBDataMap::init(UResourceBundle *,UErrorCode &)+181p
					; RBDataMap::init(UResourceBundle *,UResourceBundle *,UErrorCode &)+1C3p
					; DATA XREF: ...
; _DWORD __thiscall __high icu_56::UnicodeString::UnicodeString(const char *, int, enum	icu_56::UnicodeString::EInvariant)
		extrn __imp_??0UnicodeString@icu_56@@QAE@PBDHW4EInvariant@01@@Z:near
					; CODE XREF: RBDataMap::init(UResourceBundle *,UErrorCode &)+14Ep
					; RBDataMap::getItem(char const	*,UErrorCode &)+6Ep
					; DATA XREF: ...
		extrn _ures_getKey_56:near
					; CODE XREF: RBDataMap::init(UResourceBundle *,UErrorCode &)+13Fp
; _DWORD __thiscall icu_56::ResourceBundle::ResourceBundle(icu_56::ResourceBundle *__hidden this, struct UResourceBundle *, enum UErrorCode *)
		extrn __imp_??0ResourceBundle@icu_56@@QAE@PAUUResourceBundle@@AAW4UErrorCode@@@Z:near
					; CODE XREF: RBDataMap::init(UResourceBundle *,UErrorCode &)+E4p
					; RBDataMap::init(UResourceBundle *,UResourceBundle *,UErrorCode &)+12Fp
					; DATA XREF: ...
		extrn _ures_getByIndex_56:near
					; CODE XREF: RBDataMap::init(UResourceBundle *,UErrorCode &)+9Fp
					; RBDataMap::init(UResourceBundle *,UResourceBundle *,UErrorCode &)+CFp
		extrn _ures_getSize_56:near
					; CODE XREF: RBDataMap::init(UResourceBundle *,UErrorCode &)+7Ep
					; RBDataMap::init(UResourceBundle *,UResourceBundle *,UErrorCode &)+7Ap ...
; void __thiscall icu_56::Hashtable::removeAll(icu_56::Hashtable *__hidden this)
		extrn __imp_?removeAll@Hashtable@icu_56@@QAEXXZ:near
					; CODE XREF: RBDataMap::init(UResourceBundle *,UErrorCode &)+54p
					; RBDataMap::init(UResourceBundle *,UResourceBundle *,UErrorCode &)+54p
					; DATA XREF: ...
; public: virtual void * __thiscall icu_56::ResourceBundle::`scalar deleting destructor'(unsigned int)
		extrn ??_GResourceBundle@icu_56@@UAEPAXI@Z_0:near
; public: virtual void * __thiscall icu_56::ResourceBundle::`vector deleting destructor'(unsigned int)
		extrn ??_EResourceBundle@icu_56@@UAEPAXI@Z:near	; weak
					; DATA XREF: .rdata:const icu_56::ResourceBundle::`local vftable'o
; public: virtual void * __thiscall icu_56::ResourceBundle::getDynamicClassID(void)const
		extrn ?getDynamicClassID@ResourceBundle@icu_56@@UBEPAXXZ:near
					; DATA XREF: .rdata:00000EA0o
; _DWORD __thiscall icu_56::ResourceBundle::~ResourceBundle(icu_56::ResourceBundle *__hidden this)
		extrn __imp_??1ResourceBundle@icu_56@@UAE@XZ:near
					; CODE XREF: icu_56::ResourceBundle::`scalar deleting destructor'(uint)+28p
					; DATA XREF: icu_56::ResourceBundle::`scalar deleting destructor'(uint)+28r
; _DWORD __thiscall icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString *__hidden this, const wchar_t *,	int)
		extrn __imp_??0UnicodeString@icu_56@@QAE@PB_WH@Z:near
					; CODE XREF: RBDataMap::init(UResourceBundle *,UResourceBundle *,UErrorCode &)+190p
					; DATA XREF: RBDataMap::init(UResourceBundle *,UResourceBundle *,UErrorCode &)+190r
		extrn _ures_getStringByIndex_56:near
					; CODE XREF: RBDataMap::init(UResourceBundle *,UResourceBundle *,UErrorCode &)+EAp
; void *__thiscall icu_56::Hashtable::get(icu_56::Hashtable *__hidden this, const struct icu_56::UnicodeString *)
		extrn __imp_?get@Hashtable@icu_56@@QBEPAXABVUnicodeString@2@@Z:near
					; CODE XREF: RBDataMap::getItem(char const *,UErrorCode	&)+8Ep
					; DATA XREF: RBDataMap::getItem(char const *,UErrorCode	&)+8Er
; _DWORD __thiscall icu_56::UnicodeString::UnicodeString(icu_56::UnicodeString *__hidden this)
		extrn __imp_??0UnicodeString@icu_56@@QAE@XZ:near
					; CODE XREF: RBDataMap::getString(char const *,UErrorCode &)+98p
					; icu_56::UnicodeString::`local	vftable	constructor closure'(void)+28p ...
; struct icu_56::UnicodeString __thiscall __high icu_56::ResourceBundle::getString(enum	UErrorCode *)
		extrn __imp_?getString@ResourceBundle@icu_56@@QBE?AVUnicodeString@2@AAW4UErrorCode@@@Z:near
					; CODE XREF: RBDataMap::getString(char const *,UErrorCode &)+70p
					; DATA XREF: RBDataMap::getString(char const *,UErrorCode &)+70r
; int __thiscall icu_56::ResourceBundle::getInt(icu_56::ResourceBundle *__hidden this, enum UErrorCode *)
		extrn __imp_?getInt@ResourceBundle@icu_56@@QBEHAAW4UErrorCode@@@Z:near
					; CODE XREF: RBDataMap::getInt28(char const *,UErrorCode &)+62p
					; DATA XREF: RBDataMap::getInt28(char const *,UErrorCode &)+62r
; unsigned int __thiscall icu_56::ResourceBundle::getUInt(icu_56::ResourceBundle *__hidden this, enum UErrorCode *)
		extrn __imp_?getUInt@ResourceBundle@icu_56@@QBEIAAW4UErrorCode@@@Z:near
					; CODE XREF: RBDataMap::getUInt28(char const *,UErrorCode &)+62p
					; DATA XREF: RBDataMap::getUInt28(char const *,UErrorCode &)+62r
; const	int *__thiscall	icu_56::ResourceBundle::getIntVector(icu_56::ResourceBundle *__hidden this, int	*, enum	UErrorCode *)
		extrn __imp_?getIntVector@ResourceBundle@icu_56@@QBEPBHAAHAAW4UErrorCode@@@Z:near
					; CODE XREF: RBDataMap::getIntVector(int &,char	const *,UErrorCode &)+66p
					; DATA XREF: RBDataMap::getIntVector(int &,char	const *,UErrorCode &)+66r
; const	unsigned __int8	*__thiscall icu_56::ResourceBundle::getBinary(icu_56::ResourceBundle *__hidden this, int *, enum UErrorCode *)
		extrn __imp_?getBinary@ResourceBundle@icu_56@@QBEPBEAAHAAW4UErrorCode@@@Z:near
					; CODE XREF: RBDataMap::getBinary(int &,char const *,UErrorCode	&)+66p
					; DATA XREF: RBDataMap::getBinary(int &,char const *,UErrorCode	&)+66r
; void __cdecl icu_56::UMemory::operator delete[](void *)
		extrn __imp_??_VUMemory@icu_56@@SAXPAX@Z:near
					; CODE XREF: __unwindfunclet$?getStringArray@RBDataMap@@UBEPBVUnicodeString@icu_56@@AAHPBDAAW4UErrorCode@@@Z$0+9p
					; icu_56::UnicodeString::`vector deleting destructor'(uint)+54p
					; DATA XREF: ...
; __declspec(dllimport)	public:	class icu_56::UnicodeString & __thiscall icu_56::UnicodeString::operator=(class	icu_56::UnicodeString &&)
		extrn __imp_??4UnicodeString@icu_56@@QAEAAV01@$$QAV01@@Z:near
					; CODE XREF: RBDataMap::getStringArray(int &,char const	*,UErrorCode &)+1FAp
					; RBDataMap::getIntArray(int &,char const *,UErrorCode &)+15Bp
					; DATA XREF: ...
; struct icu_56::UnicodeString __thiscall __high icu_56::ResourceBundle::getStringEx(int, enum UErrorCode *)
		extrn __imp_?getStringEx@ResourceBundle@icu_56@@QBE?AVUnicodeString@2@HAAW4UErrorCode@@@Z:near
					; CODE XREF: RBDataMap::getStringArray(int &,char const	*,UErrorCode &)+1C2p
					; RBDataMap::getIntArray(int &,char const *,UErrorCode &)+129p
					; DATA XREF: ...
; void __stdcall `eh vector constructor	iterator'(void *, unsigned int, int, void (__thiscall *)(void *), void (__thiscall *)(void *))
		extrn ??_L@YGXPAXIHP6EX0@Z1@Z:near
					; CODE XREF: RBDataMap::getStringArray(int &,char const	*,UErrorCode &)+156p
; void *__cdecl	static icu_56::UMemory::operator new[](unsigned	int)
		extrn __imp_??_UUMemory@icu_56@@SAPAXI@Z:near
					; CODE XREF: RBDataMap::getStringArray(int &,char const	*,UErrorCode &)+F7p
					; DATA XREF: RBDataMap::getStringArray(int &,char const	*,UErrorCode &)+F7r
; void *__cdecl	operator new[](unsigned	int)
		extrn ??_U@YAPAXI@Z:near
					; CODE XREF: RBDataMap::getStringArray(int &,char const	*,UErrorCode &)+C2p
					; RBDataMap::getIntArray(int &,char const *,UErrorCode &)+C2p
; int __thiscall icu_56::ResourceBundle::getSize(icu_56::ResourceBundle	*__hidden this)
		extrn __imp_?getSize@ResourceBundle@icu_56@@QBEHXZ:near
					; CODE XREF: RBDataMap::getStringArray(int &,char const	*,UErrorCode &)+8Bp
					; RBDataMap::getIntArray(int &,char const *,UErrorCode &)+8Bp
					; DATA XREF: ...
; public: virtual void * __thiscall icu_56::UnicodeString::getDynamicClassID(void)const
		extrn ?getDynamicClassID@UnicodeString@icu_56@@UBEPAXXZ:near
					; DATA XREF: .rdata:00001E60o
; public: virtual void __thiscall icu_56::UnicodeString::extractBetween(int, int, class	icu_56::UnicodeString &)const
		extrn ?extractBetween@UnicodeString@icu_56@@UBEXHHAAV12@@Z:near
					; DATA XREF: .rdata:00001E64o
; public: virtual void __thiscall icu_56::UnicodeString::handleReplaceBetween(int, int,	class icu_56::UnicodeString const &)
		extrn ?handleReplaceBetween@UnicodeString@icu_56@@UAEXHHABV12@@Z:near
					; DATA XREF: .rdata:00001E68o
; public: virtual void __thiscall icu_56::UnicodeString::copy(int, int,	int)
		extrn ?copy@UnicodeString@icu_56@@UAEXHHH@Z:near
					; DATA XREF: .rdata:00001E6Co
; public: virtual signed char __thiscall icu_56::UnicodeString::hasMetaData(void)const
		extrn ?hasMetaData@UnicodeString@icu_56@@UBECXZ:near
					; DATA XREF: .rdata:00001E70o
; public: virtual class	icu_56::Replaceable * __thiscall icu_56::UnicodeString::clone(void)const
		extrn ?clone@UnicodeString@icu_56@@UBEPAVReplaceable@2@XZ:near
					; DATA XREF: .rdata:00001E74o
; protected: virtual int __thiscall icu_56::UnicodeString::getLength(void)const
		extrn ?getLength@UnicodeString@icu_56@@MBEHXZ:near
					; DATA XREF: .rdata:00001E78o
; protected: virtual wchar_t __thiscall	icu_56::UnicodeString::getCharAt(int)const
		extrn ?getCharAt@UnicodeString@icu_56@@MBE_WH@Z:near
					; DATA XREF: .rdata:00001E7Co
; protected: virtual int __thiscall icu_56::UnicodeString::getChar32At(int)const
		extrn ?getChar32At@UnicodeString@icu_56@@MBEHH@Z:near
					; DATA XREF: .rdata:00001E80o


		end
