;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	F10EEE0A4E2301B2BA93B62603D902CB
; Input	CRC32 :	16FD338A

; File Name   :	D:\compspace\objfiles\firefox\gentest\genres32.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl genres32(int, char *Source)
		public _genres32
_genres32	proc near

var_30C		= byte ptr -30Ch
File		= dword	ptr -248h
var_23D		= byte ptr -23Dh
Dest		= byte ptr -23Ch
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Source		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 30Ch
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_30C]
		mov	ecx, 0C3h ; 'Ã'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	eax, ds:??_C@_0BC@GCCPAB@ooooooooooooooooo?$AA@	; `string'
		mov	[ebp+var_1C], eax
		mov	ecx, ds:dword_328
		mov	[ebp+var_18], ecx
		mov	edx, ds:dword_32C
		mov	[ebp+var_14], edx
		mov	eax, ds:dword_330
		mov	[ebp+var_10], eax
		mov	cx, ds:word_334
		mov	[ebp+var_C], cx
		xor	eax, eax
		mov	[ebp+var_A], ax
		mov	eax, [ebp+Source]
		push	eax		; Source
		lea	ecx, [ebp+Dest]
		push	ecx		; Dest
		call	_strcpy
		add	esp, 8
		lea	eax, [ebp+Dest]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		movsx	ecx, [ebp+eax+var_23D]
		cmp	ecx, 5Ch ; '\'
		jz	short loc_9E
		push	offset ??_C@_01KICIPPFI@?2?$AA@	; "\\"
		lea	eax, [ebp+Dest]
		push	eax		; Dest
		call	_strcat
		add	esp, 8

loc_9E:					; CODE XREF: _genres32+88j
		push	offset ??_C@_0BA@JPJFPBFM@testtable32?4txt?$AA@	; "testtable32.txt"
		lea	eax, [ebp+Dest]
		push	eax		; Dest
		call	_strcat
		add	esp, 8
		mov	esi, esp
		push	offset ??_C@_01NOFIACDB@w?$AA@ ; "w"
		lea	eax, [ebp+Dest]
		push	eax		; Filename
		call	dword ptr ds:__imp__fopen
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+File], eax
		mov	esi, esp
		push	offset ??_C@_0BL@GHFHLNEL@Generating?5testtable32?4txt?$AA@ ; "Generating testtable32.txt"
		call	dword ptr ds:__imp__puts
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	[ebp+File], 0
		jnz	short loc_135
		mov	esi, esp
		lea	eax, [ebp+Dest]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		push	offset ??_C@_0CL@JEAIBBLK@?$CFs?3?5Couldn?8t?5create?5resource?5tes@ ; "%s: Couldn't create resource test file "...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, 1
		jmp	loc_236
; ---------------------------------------------------------------------------

loc_135:				; CODE XREF: _genres32+F4j
		lea	eax, [ebp+var_1C]
		mov	[ebp+var_28], eax
		jmp	short loc_146
; ---------------------------------------------------------------------------

loc_13D:				; CODE XREF: _genres32+150j
		mov	eax, [ebp+var_28]
		add	eax, 1
		mov	[ebp+var_28], eax

loc_146:				; CODE XREF: _genres32+13Bj
		mov	eax, [ebp+var_28]
		movsx	ecx, byte ptr [eax]
		test	ecx, ecx
		jz	short loc_152
		jmp	short loc_13D
; ---------------------------------------------------------------------------

loc_152:				; CODE XREF: _genres32+14Ej
		mov	esi, esp
		mov	eax, [ebp+File]
		push	eax		; File
		push	offset ??_C@_0O@KJAKBKEE@testtable32?5?$HL?$AA@	; "testtable32 {"
		call	dword ptr ds:__imp__fputs
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_34], 0
		jmp	short loc_182
; ---------------------------------------------------------------------------

loc_179:				; CODE XREF: _genres32+1F8j
		mov	eax, [ebp+var_34]
		add	eax, 1
		mov	[ebp+var_34], eax

loc_182:				; CODE XREF: _genres32+177j
		cmp	[ebp+var_34], 101D0h
		jge	short loc_1FD
		mov	eax, [ebp+var_34]
		cdq
		mov	ecx, 0Ah
		idiv	ecx
		test	edx, edx
		jnz	short loc_1C2
		mov	esi, esp
		mov	eax, [ebp+var_34]
		push	eax
		lea	ecx, [ebp+var_1C]
		push	ecx
		push	offset ??_C@_0O@OEPLGCEG@?$CFs?$HL?$CC?2U?$CF08x?$CC?$HN?6?$AA@	; "%s{\"\\U%08x\"}\n"
		mov	edx, [ebp+File]
		push	edx		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_1E8
; ---------------------------------------------------------------------------

loc_1C2:				; CODE XREF: _genres32+198j
		mov	esi, esp
		mov	eax, [ebp+var_34]
		push	eax
		lea	ecx, [ebp+var_1C]
		push	ecx
		push	offset ??_C@_0M@ELGJOMJO@?$CFs?3int?$HL?$CFd?$HN?6?$AA@	; "%s:int{%d}\n"
		mov	edx, [ebp+File]
		push	edx		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1E8:				; CODE XREF: _genres32+1C0j
		mov	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_1C]
		push	ecx
		call	_incKey
		add	esp, 8
		jmp	loc_179
; ---------------------------------------------------------------------------

loc_1FD:				; CODE XREF: _genres32+189j
		mov	esi, esp
		mov	eax, [ebp+File]
		push	eax		; File
		push	offset ??_C@_01CELHOKLL@?$HN?$AA@ ; "}"
		call	dword ptr ds:__imp__fputs
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+File]
		push	eax		; File
		call	dword ptr ds:__imp__fclose
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		xor	eax, eax

loc_236:				; CODE XREF: _genres32+130j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN16
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 30Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_genres32	endp

; ---------------------------------------------------------------------------
		align 4
$LN16		dd 2			; DATA XREF: _genres32+23Ao
		dd offset $LN15
$LN15		dd 0FFFFFFE4h, 14h	; DATA XREF: .text:0000026Co
		dd offset $LN13		; "key"
		dd 0FFFFFDC4h, 200h
		dd offset $LN14		; "file"
$LN14		db 'file',0             ; DATA XREF: .text:00000284o
$LN13		db 'key',0              ; DATA XREF: .text:00000278o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 294h
		public ??_C@_01CELHOKLL@?$HN?$AA@
; char `string'[2]
??_C@_01CELHOKLL@?$HN?$AA@ db '}',0     ; DATA XREF: _genres32+206o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 298h
		public ??_C@_0M@ELGJOMJO@?$CFs?3int?$HL?$CFd?$HN?6?$AA@
; char `string'[]
??_C@_0M@ELGJOMJO@?$CFs?3int?$HL?$CFd?$HN?6?$AA@ db '%s:int{%d}',0Ah,0
					; DATA XREF: _genres32+1CCo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2A4h
		public ??_C@_0O@OEPLGCEG@?$CFs?$HL?$CC?2U?$CF08x?$CC?$HN?6?$AA@
; char `string'[]
??_C@_0O@OEPLGCEG@?$CFs?$HL?$CC?2U?$CF08x?$CC?$HN?6?$AA@ db '%s{"\U%08x"}',0Ah,0
					; DATA XREF: _genres32+1A4o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2B4h
		public ??_C@_0O@KJAKBKEE@testtable32?5?$HL?$AA@
; char `string'[]
??_C@_0O@KJAKBKEE@testtable32?5?$HL?$AA@ db 'testtable32 {',0 ; DATA XREF: _genres32+15Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2C4h
		public ??_C@_0CL@JEAIBBLK@?$CFs?3?5Couldn?8t?5create?5resource?5tes@
; char `string'[]
??_C@_0CL@JEAIBBLK@?$CFs?3?5Couldn?8t?5create?5resource?5tes@ db '%s: Couldn',27h,'t create resource test file %s',0Ah,0
					; DATA XREF: _genres32+103o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 2F0h
		public ??_C@_0BL@GHFHLNEL@Generating?5testtable32?4txt?$AA@
; char `string'[]
??_C@_0BL@GHFHLNEL@Generating?5testtable32?4txt?$AA@ db	'Generating testtable32.txt',0
					; DATA XREF: _genres32+D8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 30Ch
		public ??_C@_01NOFIACDB@w?$AA@
; char `string'[2]
??_C@_01NOFIACDB@w?$AA@	db 'w',0        ; DATA XREF: _genres32+B4o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 310h
		public ??_C@_0BA@JPJFPBFM@testtable32?4txt?$AA@
; char `string'[]
??_C@_0BA@JPJFPBFM@testtable32?4txt?$AA@ db 'testtable32.txt',0
					; DATA XREF: _genres32:loc_9Eo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 320h
		public ??_C@_01KICIPPFI@?2?$AA@
; char `string'[]
??_C@_01KICIPPFI@?2?$AA@ db '\',0       ; DATA XREF: _genres32+8Ao
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 324h
		public ??_C@_0BC@GCCPAB@ooooooooooooooooo?$AA@
; `string'
??_C@_0BC@GCCPAB@ooooooooooooooooo?$AA@	dd 6F6F6F6Fh ; DATA XREF: _genres32+28r
dword_328	dd 6F6F6F6Fh		; DATA XREF: _genres32+30r
dword_32C	dd 6F6F6F6Fh		; DATA XREF: _genres32+39r
dword_330	dd 6F6F6F6Fh		; DATA XREF: _genres32+42r
word_334	dw 6Fh			; DATA XREF: _genres32+4Ar
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 338h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 33Ch
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 340h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_incKey		proc near		; CODE XREF: _genres32+1F0p

var_CC		= byte ptr -0CCh
var_5		= byte ptr -5
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd

loc_35E:				; CODE XREF: _incKey:loc_390j
		mov	eax, [ebp+arg_4]
		cmp	eax, [ebp+arg_0]
		jbe	short loc_392
		mov	eax, [ebp+arg_4]
		sub	eax, 1
		mov	[ebp+arg_4], eax
		mov	ecx, [ebp+arg_4]
		mov	dl, [ecx]
		mov	[ebp+var_5], dl
		movsx	eax, [ebp+var_5]
		cmp	eax, 6Fh ; 'o'
		jnz	short loc_38A
		mov	eax, [ebp+arg_4]
		mov	byte ptr [eax],	31h ; '1'
		jmp	short loc_392
; ---------------------------------------------------------------------------
		jmp	short loc_390
; ---------------------------------------------------------------------------

loc_38A:				; CODE XREF: _incKey+3Ej
		mov	eax, [ebp+arg_4]
		mov	byte ptr [eax],	6Fh ; 'o'

loc_390:				; CODE XREF: _incKey+48j
		jmp	short loc_35E
; ---------------------------------------------------------------------------

loc_392:				; CODE XREF: _incKey+24j _incKey+46j
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_incKey		endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
; int __cdecl _fclose(FILE *File)
		extrn __imp__fclose:near ; CODE	XREF: _genres32+224p
					; DATA XREF: _genres32+224r
; int __cdecl _fputs(const char	*Str, FILE *File)
		extrn __imp__fputs:near	; CODE XREF: _genres32+160p
					; _genres32+20Bp
					; DATA XREF: ...
; int _fprintf(FILE *File, const char *Format, ...)
		extrn __imp__fprintf:near ; CODE XREF: _genres32+11Bp
					; _genres32+1B0p ...
; FILE *__cdecl	___iob_func()
		extrn __imp____iob_func:near ; CODE XREF: _genres32+10Ap
					; DATA XREF: _genres32+10Ar
; int __cdecl _puts(const char *Str)
		extrn __imp__puts:near	; CODE XREF: _genres32+DDp
					; DATA XREF: _genres32+DDr
; FILE *__cdecl	_fopen(const char *Filename, const char	*Mode)
		extrn __imp__fopen:near	; CODE XREF: _genres32+C0p
					; DATA XREF: _genres32+C0r
; char *__cdecl	strcat(char *Dest, const char *Source)
		extrn _strcat:near	; CODE XREF: _genres32+96p
					; _genres32+AAp
; size_t __cdecl strlen(const char *Str)
		extrn _strlen:near	; CODE XREF: _genres32+75p
; char *__cdecl	strcpy(char *Dest, const char *Source)
		extrn _strcpy:near	; CODE XREF: _genres32+66p
		extrn ___security_cookie:near ;	DATA XREF: _genres32+1Er
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near ;	CODE XREF: _genres32+24Fp
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _genres32+240p
		extrn __RTC_CheckEsp:near ; CODE XREF: _genres32+CBp
					; _genres32+E8p ...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo


		end
