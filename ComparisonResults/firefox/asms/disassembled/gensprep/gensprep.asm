;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	E2A9EB4993B798F87B9083D826AD662E
; Input	CRC32 :	7B705A02

; File Name   :	D:\compspace\objfiles\firefox\gensprep\gensprep.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		public ??_C@_07GAJMMAJO@unicode?$AA@
; `string'
??_C@_07GAJMMAJO@unicode?$AA@ db 'unicode',0 ; DATA XREF: .data:000001A0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8
		public ??_C@_0L@LLFALIFM@check?9bidi?$AA@
; char `string'[]
??_C@_0L@LLFALIFM@check?9bidi?$AA@ db 'check-bidi',0 ; DATA XREF: .data:0000018Co
					; _strprepProfileLineFn+106o ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 14h
		public ??_C@_0BA@KEOMKGFI@norm?9correction?$AA@
; `string'
??_C@_0BA@KEOMKGFI@norm?9correction?$AA@ db 'norm-correction',0 ; DATA XREF: .data:00000178o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 24h
		public ??_C@_0O@CBFPFGOI@normalization?$AA@
; `string'
??_C@_0O@CBFPFGOI@normalization?$AA@ db	'normalization',0 ; DATA XREF: .data:off_164o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 34h
		public ??_C@_0M@BJHCIPFI@bundle?9name?$AA@
; `string'
??_C@_0M@BJHCIPFI@bundle?9name?$AA@ db 'bundle-name',0 ; DATA XREF: .data:00000150o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 40h
		public ??_C@_0L@JMMPKMPC@icudatadir?$AA@
; `string'
??_C@_0L@JMMPKMPC@icudatadir?$AA@ db 'icudatadir',0 ; DATA XREF: .data:0000013Co
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 4Ch
		public ??_C@_09CMGPLHNH@sourcedir?$AA@
; `string'
??_C@_09CMGPLHNH@sourcedir?$AA@	db 'sourcedir',0 ; DATA XREF: .data:00000128o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 58h
		public ??_C@_07HIFNFPHK@destdir?$AA@
; `string'
??_C@_07HIFNFPHK@destdir?$AA@ db 'destdir',0 ; DATA XREF: .data:00000114o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 60h
		public ??_C@_09JHBDCMB@copyright?$AA@
; `string'
??_C@_09JHBDCMB@copyright?$AA@ db 'copyright',0 ; DATA XREF: .data:00000100o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6Ch
		public ??_C@_07KBAMPNJK@verbose?$AA@
; `string'
??_C@_07KBAMPNJK@verbose?$AA@ db 'verbose',0 ; DATA XREF: .data:000000ECo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 74h
		public ??_C@_04PCJFHION@help?$AA@
; `string'
??_C@_04PCJFHION@help?$AA@ db 'help',0  ; DATA XREF: .data:_optionso
					; .data:000000D8o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 7Ch
		public ??_C@_0L@DKDHAHEG@TYPE_LIMIT?$AA@
; `string'
??_C@_0L@DKDHAHEG@TYPE_LIMIT?$AA@ db 'TYPE_LIMIT',0 ; DATA XREF: .data:000000BCo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 88h
		public ??_C@_06FKDAMKFP@DELETE?$AA@
; `string'
??_C@_06FKDAMKFP@DELETE?$AA@ db	'DELETE',0 ; DATA XREF: .data:000000B8o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 90h
		public ??_C@_0L@MKLPCMOG@PROHIBITED?$AA@
; `string'
??_C@_0L@MKLPCMOG@PROHIBITED?$AA@ db 'PROHIBITED',0 ; DATA XREF: .data:SubStro
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9Ch
		public ??_C@_03HMCGBKKA@MAP?$AA@
; `string'
??_C@_03HMCGBKKA@MAP?$AA@ dd 50414Dh	; DATA XREF: .data:off_B0o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A0h
		public ??_C@_0L@EGJECNPE@UNASSIGNED?$AA@
; `string'
??_C@_0L@EGJECNPE@UNASSIGNED?$AA@ db 'UNASSIGNED',0 ; DATA XREF: .data:_usprepTypeNameso
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 0ACh
; char *usprepTypeNames
_usprepTypeNames dd offset ??_C@_0L@EGJECNPE@UNASSIGNED?$AA@
					; DATA XREF: _strprepProfileLineFn+18Fr
					; "UNASSIGNED"
; char *off_B0
off_B0		dd offset ??_C@_03HMCGBKKA@MAP?$AA@ ; DATA XREF: _strprepProfileLineFn+2EDr
					; `string'
; char *SubStr
SubStr		dd offset ??_C@_0L@MKLPCMOG@PROHIBITED?$AA@
					; DATA XREF: _strprepProfileLineFn+23Er
					; "PROHIBITED"
		dd offset ??_C@_06FKDAMKFP@DELETE?$AA@ ; "DELETE"
		dd offset ??_C@_0L@DKDHAHEG@TYPE_LIMIT?$AA@ ; "TYPE_LIMIT"
		public _haveCopyright
_haveCopyright	db 1			; DATA XREF: _main+125w
		align 4
_options	dd offset ??_C@_04PCJFHION@help?$AA@ ; DATA XREF: _main+8Fo
					; "help"
		dd 3 dup(0)
		db 68h,	0
byte_D6		db 0			; DATA XREF: _main+EBr
		align 4
		dd offset ??_C@_04PCJFHION@help?$AA@ ; "help"
		dd 3 dup(0)
		db 3Fh,	0
byte_EA		db 0			; DATA XREF: _main+F6r
		align 4
		dd offset ??_C@_07KBAMPNJK@verbose?$AA@	; "verbose"
		dd 3 dup(0)
		db 76h,	0
byte_FE		db 0			; DATA XREF: _main:loc_2CEr
		align 10h
		dd offset ??_C@_09JHBDCMB@copyright?$AA@ ; "copyright"
		align 10h
		db 63h,	0
byte_112	db 0			; DATA XREF: _main+120r
		align 4
		dd offset ??_C@_07HIFNFPHK@destdir?$AA@	; "destdir"
dword_118	dd 0			; DATA XREF: _main+62w	_main+132r
		dd 2 dup(0)
		dd offset off_164
		dd offset ??_C@_09CMGPLHNH@sourcedir?$AA@ ; "sourcedir"
dword_12C	dd 0			; DATA XREF: _main+67w	_main+12Ar
		dd 2 dup(0)
		dd offset byte_173
		dd offset ??_C@_0L@JMMPKMPC@icudatadir?$AA@ ; "icudatadir"
dword_140	dd 0			; DATA XREF: _main+1B0r
		dd 2 dup(0)
		db 69h,	1
byte_14E	db 0			; DATA XREF: _main:loc_35Dr
		align 10h
		dd offset ??_C@_0M@BJHCIPFI@bundle?9name?$AA@ ;	"bundle-name"
dword_154	dd 0			; DATA XREF: _main+7Bw	_main+13Ar
		align 10h
off_160		dd offset off_160+2	; DATA XREF: .data:off_160o
off_164		dd offset ??_C@_0O@CBFPFGOI@normalization?$AA@ ; DATA XREF: .data:00000124o
					; "normalization"
dword_168	dd 0			; DATA XREF: _main+85w	_main+14Dr
dword_16C	dd 0			; DATA XREF: .data:00000188o
		db 3 dup(0)
byte_173	db 0			; DATA XREF: .data:00000138o
		db 6Eh,	1
byte_176	db 0			; DATA XREF: _main+142r _main:loc_4B0r ...
		align 4
		dd offset ??_C@_0BA@KEOMKGFI@norm?9correction?$AA@ ; "norm-correction"
dword_17C	dd 0			; DATA XREF: _main:loc_30Fr
		dd 2 dup(0)
		dd offset dword_16C+1
		dd offset ??_C@_0L@LLFALIFM@check?9bidi?$AA@ ; "check-bidi"
		dd 3 dup(0)
		db 6Bh,	0
byte_19E	db 0			; DATA XREF: _main:loc_576r
					; _strprepProfileLineFn+137w
		align 10h
		dd offset ??_C@_07GAJMMAJO@unicode?$AA@	; "unicode"
dword_1A4	dd 0			; DATA XREF: _main+71w	_main:loc_376r
		align 10h
		db 75h,	1
byte_1B2	db 0			; DATA XREF: _main:loc_33Dr
		align 4
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
		assume cs:_bss
		;org 1B4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
		public _beVerbose
_beVerbose	db ?			; DATA XREF: _main+11Bw
		align 4
_bss		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1B8h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public _main
_main		proc near

var_12C		= byte ptr -12Ch
var_68		= dword	ptr -68h
var_5C		= dword	ptr -5Ch
var_50		= dword	ptr -50h
Source		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
Str		= dword	ptr -14h
Dest		= dword	ptr -8
argc		= dword	ptr  8
argv		= dword	ptr  0Ch
envp		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 12Ch
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_12C]
		mov	ecx, 4Bh ; 'K'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+Dest], 0
		mov	[ebp+Str], 0
		mov	[ebp+var_20], 0
		mov	[ebp+var_2C], 0
		mov	[ebp+var_38], 0
		mov	[ebp+Source], 0
		mov	[ebp+var_50], 0
		mov	[ebp+var_5C], 0
		mov	[ebp+var_68], 0
		call	_u_getDataDirectory_56
		mov	ds:dword_118, eax
		mov	ds:dword_12C, offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
		mov	ds:dword_1A4, offset ??_C@_01GBGANLPD@0?$AA@ ; `string'
		mov	ds:dword_154, offset ??_C@_05JKEMNJNG@sprep?$AA@ ; "sprep"
		mov	ds:dword_168, offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
		push	offset _options
		push	0Ch
		mov	eax, [ebp+argv]
		push	eax
		mov	ecx, [ebp+argc]
		push	ecx
		call	_u_parseArgs
		add	esp, 10h
		mov	[ebp+argc], eax
		cmp	[ebp+argc], 0
		jge	short loc_29D
		mov	eax, [ebp+argc]
		neg	eax
		mov	esi, esp
		mov	ecx, [ebp+argv]
		mov	edx, [ecx+eax*4]
		push	edx
		push	offset ??_C@_0CF@BGPNLJEE@error?5in?5command?5line?5argument?5?$CC@ ; "error in	command	line argument \"%s\"\n"
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_29D:				; CODE XREF: _main+ADj
		cmp	[ebp+argc], 0
		jl	short loc_2B9
		movsx	eax, ds:byte_D6
		test	eax, eax
		jnz	short loc_2B9
		movsx	eax, ds:byte_EA
		test	eax, eax
		jz	short loc_2CE

loc_2B9:				; CODE XREF: _main+E9j	_main+F4j
		mov	eax, [ebp+argv]
		push	eax
		mov	ecx, [ebp+argc]
		push	ecx
		call	_printHelp
		add	esp, 8
		jmp	loc_5C5
; ---------------------------------------------------------------------------

loc_2CE:				; CODE XREF: _main+FFj
		mov	al, ds:byte_FE
		mov	ds:_beVerbose, al
		mov	al, ds:byte_112
		mov	ds:_haveCopyright, al
		mov	eax, ds:dword_12C
		mov	[ebp+Str], eax
		mov	eax, ds:dword_118
		mov	[ebp+var_20], eax
		mov	eax, ds:dword_154
		mov	[ebp+var_38], eax
		movsx	eax, ds:byte_176
		test	eax, eax
		jz	short loc_30F
		mov	eax, ds:dword_168
		mov	[ebp+var_2C], eax
		jmp	short loc_317
; ---------------------------------------------------------------------------

loc_30F:				; CODE XREF: _main+14Bj
		mov	eax, ds:dword_17C
		mov	[ebp+var_2C], eax

loc_317:				; CODE XREF: _main+155j
		cmp	[ebp+argc], 2
		jge	short loc_334
		mov	eax, [ebp+argv]
		push	eax
		mov	ecx, [ebp+argc]
		push	ecx
		call	_printHelp
		add	esp, 8
		jmp	loc_5C5
; ---------------------------------------------------------------------------
		jmp	short loc_33D
; ---------------------------------------------------------------------------

loc_334:				; CODE XREF: _main+163j
		mov	eax, [ebp+argv]
		mov	ecx, [eax+4]
		mov	[ebp+Source], ecx

loc_33D:				; CODE XREF: _main+17Aj
		movsx	eax, ds:byte_1B2
		test	eax, eax
		jnz	short loc_35D
		mov	eax, [ebp+argv]
		push	eax
		mov	ecx, [ebp+argc]
		push	ecx
		call	_printHelp
		add	esp, 8
		jmp	loc_5C5
; ---------------------------------------------------------------------------

loc_35D:				; CODE XREF: _main+18Ej
		movsx	eax, ds:byte_14E
		test	eax, eax
		jz	short loc_376
		mov	eax, ds:dword_140
		push	eax
		call	_u_setDataDirectory_56
		add	esp, 4

loc_376:				; CODE XREF: _main+1AEj
		mov	eax, ds:dword_1A4
		push	eax
		call	_setUnicodeVersion
		add	esp, 4
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		add	eax, 12Ch
		push	eax
		call	_uprv_malloc_56
		add	esp, 4
		mov	[ebp+Dest], eax
		mov	esi, esp
		push	5Ch ; '\'       ; Val
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	dword ptr ds:__imp__strchr
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jnz	short loc_3FB
		mov	esi, esp
		push	2Fh ; '/'       ; Val
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	dword ptr ds:__imp__strchr
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jnz	short loc_3FB
		mov	eax, [ebp+Dest]
		mov	byte ptr [eax],	2Eh ; '.'
		mov	eax, [ebp+Dest]
		mov	byte ptr [eax+1], 5Ch ;	'\'
		mov	eax, [ebp+Str]
		push	eax		; Source
		mov	ecx, [ebp+Dest]
		add	ecx, 2
		push	ecx		; Dest
		call	_strcpy
		add	esp, 8
		jmp	short loc_40B
; ---------------------------------------------------------------------------

loc_3FB:				; CODE XREF: _main+203j _main+21Fj
		mov	eax, [ebp+Str]
		push	eax		; Source
		mov	ecx, [ebp+Dest]
		push	ecx		; Dest
		call	_strcpy
		add	esp, 8

loc_40B:				; CODE XREF: _main+241j
		mov	eax, [ebp+Dest]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		add	eax, [ebp+Dest]
		mov	[ebp+var_50], eax
		mov	eax, [ebp+var_50]
		cmp	eax, [ebp+Dest]
		jbe	short loc_440
		mov	eax, [ebp+var_50]
		movsx	ecx, byte ptr [eax-1]
		cmp	ecx, 5Ch ; '\'
		jz	short loc_440
		mov	eax, [ebp+var_50]
		mov	byte ptr [eax],	5Ch ; '\'
		mov	ecx, [ebp+var_50]
		add	ecx, 1
		mov	[ebp+var_50], ecx

loc_440:				; CODE XREF: _main+26Bj _main+277j
		call	_init
		mov	eax, [ebp+Source]
		push	eax		; Source
		mov	ecx, [ebp+var_50]
		push	ecx		; Dest
		call	_strcpy
		add	esp, 8
		lea	eax, [ebp+var_68]
		push	eax		; int
		push	0		; char
		mov	ecx, [ebp+Dest]
		push	ecx		; Format
		call	_parseMappings
		add	esp, 0Ch
		cmp	[ebp+var_68], 0
		jle	short loc_4B0
		mov	eax, [ebp+var_68]
		push	eax
		call	_u_errorName_56
		add	esp, 4
		mov	esi, esp
		push	eax
		mov	ecx, [ebp+Dest]
		push	ecx
		push	offset ??_C@_0DA@CDGGEKBJ@Could?5not?5open?5file?5?$CFs?5for?5readi@ ; "Could not open file %s for reading. Err"...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_68]
		jmp	loc_5C5
; ---------------------------------------------------------------------------

loc_4B0:				; CODE XREF: _main+2B3j
		movsx	eax, ds:byte_176
		test	eax, eax
		jz	loc_576
		mov	eax, [ebp+var_2C]
		push	eax		; Source
		mov	ecx, [ebp+Dest]
		push	ecx		; Dest
		call	_strcpy
		add	esp, 8
		mov	eax, [ebp+Dest]
		push	eax		; Str
		call	_strlen
		add	esp, 4
		add	eax, [ebp+Dest]
		mov	[ebp+var_50], eax
		mov	eax, [ebp+var_50]
		cmp	eax, [ebp+Dest]
		jbe	short loc_504
		mov	eax, [ebp+var_50]
		movsx	ecx, byte ptr [eax-1]
		cmp	ecx, 5Ch ; '\'
		jz	short loc_504
		mov	eax, [ebp+var_50]
		mov	byte ptr [eax],	5Ch ; '\'
		mov	ecx, [ebp+var_50]
		add	ecx, 1
		mov	[ebp+var_50], ecx

loc_504:				; CODE XREF: _main+32Fj _main+33Bj
		mov	eax, [ebp+var_50]
		mov	byte ptr [eax],	5Ch ; '\'
		mov	ecx, [ebp+var_50]
		add	ecx, 1
		mov	[ebp+var_50], ecx
		push	offset ??_C@_0BN@FJCMKHF@NormalizationCorrections?4txt?$AA@ ; "NormalizationCorrections.txt"
		mov	eax, [ebp+var_50]
		push	eax		; Dest
		call	_strcpy
		add	esp, 8
		lea	eax, [ebp+var_68]
		push	eax		; int
		mov	ecx, [ebp+Dest]
		push	ecx		; Format
		call	_parseNormalizationCorrections
		add	esp, 8
		cmp	[ebp+var_68], 0
		jle	short loc_56D
		mov	esi, esp
		mov	eax, [ebp+Dest]
		push	eax
		push	offset ??_C@_0CF@GHJMDFJG@Could?5not?5open?5file?5?$CFs?5for?5readi@ ; "Could not open file %s for reading \n"
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_68]
		jmp	short loc_5C5
; ---------------------------------------------------------------------------

loc_56D:				; CODE XREF: _main+380j
		mov	eax, [ebp+var_5C]
		or	eax, 1
		mov	[ebp+var_5C], eax

loc_576:				; CODE XREF: _main+301j
		movsx	eax, ds:byte_19E
		test	eax, eax
		jz	short loc_58A
		mov	eax, [ebp+var_5C]
		or	eax, 2
		mov	[ebp+var_5C], eax

loc_58A:				; CODE XREF: _main+3C7j
		mov	eax, [ebp+var_5C]
		push	eax
		call	_setOptions
		add	esp, 4
		cmp	[ebp+var_68], 0
		jg	short loc_5B1
		mov	eax, [ebp+var_38]
		push	eax
		mov	ecx, [ebp+var_20]
		push	ecx
		call	_generateData
		add	esp, 8
		call	_cleanUpData

loc_5B1:				; CODE XREF: _main+3E2j
		mov	eax, [ebp+Dest]
		push	eax
		call	_uprv_free_56
		add	esp, 4
		call	_u_cleanup_56
		mov	eax, [ebp+var_68]

loc_5C5:				; CODE XREF: _main+111j _main+175j ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN23
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 12Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_main		endp

; ---------------------------------------------------------------------------
		align 4
$LN23		dd 1			; DATA XREF: _main+411o
		dd offset $LN22
$LN22		dd 0FFFFFF98h, 4	; DATA XREF: .text:000005F0o
		dd offset $LN21		; "errorCode"
$LN21		db 'errorCode',0        ; DATA XREF: .text:000005FCo
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 60Ch
		public ??_C@_0CF@GHJMDFJG@Could?5not?5open?5file?5?$CFs?5for?5readi@
; char `string'[]
??_C@_0CF@GHJMDFJG@Could?5not?5open?5file?5?$CFs?5for?5readi@ db 'Could not open file %s for reading ',0Ah,0
					; DATA XREF: _main+388o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 634h
		public ??_C@_0BN@FJCMKHF@NormalizationCorrections?4txt?$AA@
; char `string'[]
??_C@_0BN@FJCMKHF@NormalizationCorrections?4txt?$AA@ db	'NormalizationCorrections.txt',0
					; DATA XREF: _main+35Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 654h
		public ??_C@_0DA@CDGGEKBJ@Could?5not?5open?5file?5?$CFs?5for?5readi@
; char `string'[]
??_C@_0DA@CDGGEKBJ@Could?5not?5open?5file?5?$CFs?5for?5readi@ db 'Could not open file %s for reading. Error: %s ',0Ah,0
					; DATA XREF: _main+2C8o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 684h
		public ??_C@_0CF@BGPNLJEE@error?5in?5command?5line?5argument?5?$CC@
; char `string'[]
??_C@_0CF@BGPNLJEE@error?5in?5command?5line?5argument?5?$CC@ db	'error in command line argument "%s"',0Ah,0
					; DATA XREF: _main+BDo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6ACh
		public ??_C@_05JKEMNJNG@sprep?$AA@
; `string'
??_C@_05JKEMNJNG@sprep?$AA@ db 'sprep',0 ; DATA XREF: _main+7Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 6B4h
		public ??_C@_01GBGANLPD@0?$AA@
; `string'
??_C@_01GBGANLPD@0?$AA@	db 30h,	0	; DATA XREF: _main+71o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 6B8h
		public ??_C@_00CNPNBAHC@?$AA@
; `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: _main+67o	_main+85o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 6BCh
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 6C0h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 6C4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_printHelp	proc near		; CODE XREF: _main+109p _main+16Dp ...

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		push	offset ??_C@_0JI@DMEKMENM@Usage?3?5?$CFs?5?$FL?9options?$FN?5?$FLfile_name?$FN@	; "Usage: %s [-options]	[file_name]\n\nRea"...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	offset ??_C@_0JI@BPOBICIF@Options?3?6?7?9h?5or?5?9?$DP?5or?5?9?9help?5?5?5?5@ ;	"Options:\n\t-h	or -? or --help	      pr"...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		call	_u_getDataDirectory_56
		mov	esi, esp
		push	eax
		push	offset ??_C@_0BHD@PMHHOGAL@?7?9d?5or?5?9?9destdir?5?5?5?5?5?5?5?5?5?5destin@ ; "\t-d or	--destdir	   destination "...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	offset ??_C@_0OD@EIKMCMPL@?7?9n?5or?5?9?9normalize?5?5?5?5?5?5?5?5turn?5o@ ; "\t-n or --normalize	 turn on the "...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	offset ??_C@_0BBL@NHGGMAGK@?7?9m?5or?5?9?9norm?9correction?5?5use?5No@ ; "\t-m or --norm-correction  use Normaliz"...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	offset ??_C@_0LF@CNCLFNBM@?7?9k?5or?5?9?9check?9bidi?5?5?5?5?5?5?5turn?5o@ ; "\t-k or --check-bidi	 turn on the "...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		xor	eax, eax
		cmp	[ebp+arg_0], 0
		setl	al
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_printHelp	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 808h
		public ??_C@_0LF@CNCLFNBM@?7?9k?5or?5?9?9check?9bidi?5?5?5?5?5?5?5turn?5o@
; char `string'[]
??_C@_0LF@CNCLFNBM@?7?9k?5or?5?9?9check?9bidi?5?5?5?5?5?5?5turn?5o@ db 9,'-k or --check-bidi       turn on the option for checking for BiD'
					; DATA XREF: _printHelp+FEo
		db 'i in the profile',0Ah
		db 9,'-u or --unicode          version of Unicode to be used with this'
		db ' profile followed by the version',0Ah,0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 8C0h
		public ??_C@_0BBL@NHGGMAGK@?7?9m?5or?5?9?9norm?9correction?5?5use?5No@
; char `string'[]
??_C@_0BBL@NHGGMAGK@?7?9m?5or?5?9?9norm?9correction?5?5use?5No@	db 9,'-m or --norm-correction  use NormalizationCorrections.txt from t'
					; DATA XREF: _printHelp+D4o
		db 'he given path',0Ah
		db 9,'                         when the input file contains a normaliz'
		db 'ation directive.',0Ah
		db 9,'                         unlike -n/--normalize, this option does'
		db ' not force the',0Ah
		db 9,'                         normalization.',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 9DCh
		public ??_C@_0OD@EIKMCMPL@?7?9n?5or?5?9?9normalize?5?5?5?5?5?5?5?5turn?5o@
; char `string'[]
??_C@_0OD@EIKMCMPL@?7?9n?5or?5?9?9normalize?5?5?5?5?5?5?5?5turn?5o@ db 9,'-n or --normalize        turn on the option for normalization an'
					; DATA XREF: _printHelp+AAo
		db 'd include mappings',0Ah
		db 9,'                         from NormalizationCorrections.txt from '
		db 'the given path,',0Ah
		db 9,'                         e.g: /test/icu/source/data/unidata',0Ah,0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 0AC0h
		public ??_C@_0BHD@PMHHOGAL@?7?9d?5or?5?9?9destdir?5?5?5?5?5?5?5?5?5?5destin@
; char `string'[]
??_C@_0BHD@PMHHOGAL@?7?9d?5or?5?9?9destdir?5?5?5?5?5?5?5?5?5?5destin@ db 9,'-d or --destdir          destination directory, followed by the '
					; DATA XREF: _printHelp+80o
		db 'path',0Ah
		db 9,'-s or --sourcedir        source directory of ICU data, followed '
		db 'by the path',0Ah
		db 9,'-b or --bundle-name      generate the ouput data file with the n'
		db 'ame specified',0Ah
		db 9,'-i or --icudatadir       directory for locating any needed inter'
		db 'mediate data files,',0Ah
		db 9,'                         followed by path, defaults to %s',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 0C34h
		public ??_C@_0JI@BPOBICIF@Options?3?6?7?9h?5or?5?9?$DP?5or?5?9?9help?5?5?5?5@
; char `string'[]
??_C@_0JI@BPOBICIF@Options?3?6?7?9h?5or?5?9?$DP?5or?5?9?9help?5?5?5?5@ db 'Options:',0Ah
					; DATA XREF: _printHelp+50o
		db 9,'-h or -? or --help       print this usage text',0Ah
		db 9,'-v or --verbose          verbose output',0Ah
		db 9,'-c or --copyright        include a copyright notice',0Ah,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 0CCCh
		public ??_C@_0JI@DMEKMENM@Usage?3?5?$CFs?5?$FL?9options?$FN?5?$FLfile_name?$FN@
; char `string'[]
??_C@_0JI@DMEKMENM@Usage?3?5?$CFs?5?$FL?9options?$FN?5?$FLfile_name?$FN@ db 'Usage: %s [-options] [file_name]',0Ah
					; DATA XREF: _printHelp+26o
		db 0Ah
		db 'Read the files specified and',0Ah
		db 'create a binary file [package-name]_[bundle-name].spp with the St'
		db 'ringPrep profile data',0Ah
		db 0Ah,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0D64h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl parseNormalizationCorrections(char *Format, int)
_parseNormalizationCorrections proc near ; CODE	XREF: _main+374p

var_E8		= byte ptr -0E8h
var_24		= byte ptr -24h
Format		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0E8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E8]
		mov	ecx, 3Ah ; ':'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_4], 0
		jz	short loc_D90
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jle	short loc_D95

loc_D90:				; CODE XREF: _parseNormalizationCorrections+22j
		jmp	loc_E16
; ---------------------------------------------------------------------------

loc_D95:				; CODE XREF: _parseNormalizationCorrections+2Aj
		mov	eax, [ebp+arg_4]
		push	eax
		push	0
		push	offset _normalizationCorrectionsLineFn
		push	4
		lea	ecx, [ebp+var_24]
		push	ecx
		push	3Bh ; ';'
		mov	edx, [ebp+Format]
		push	edx
		call	_u_parseDelimitedFile
		add	esp, 1Ch
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jle	short loc_E16
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 4
		jz	short loc_E16
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	_u_errorName_56
		add	esp, 4
		mov	esi, esp
		push	eax
		mov	edx, [ebp+Format]
		push	edx		; Format
		push	offset ??_C@_0DI@DEGGMNCB@gensprep?5error?3?5u_parseDelimited@ ; "gensprep error: u_parseDelimitedFile(\""...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx		; Code
		call	dword ptr ds:__imp__exit
; ---------------------------------------------------------------------------
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_E16:				; CODE XREF: _parseNormalizationCorrections:loc_D90j
					; _parseNormalizationCorrections+56j ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN8
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_parseNormalizationCorrections endp

; ---------------------------------------------------------------------------
		align 4
$LN8		dd 1			; DATA XREF: _parseNormalizationCorrections+B6o
		dd offset $LN7
$LN7		dd 0FFFFFFDCh, 20h	; DATA XREF: .text:00000E40o
		dd offset $LN6		; "fields"
$LN6		db 'fields',0           ; DATA XREF: .text:00000E4Co
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0E58h
		public ??_C@_0DI@DEGGMNCB@gensprep?5error?3?5u_parseDelimited@
; char `string'[]
??_C@_0DI@DEGGMNCB@gensprep?5error?3?5u_parseDelimited@	db 'gensprep error: u_parseDelimitedFile("%s") failed - %s',0Ah,0
					; DATA XREF: _parseNormalizationCorrections+75o
					; _parseMappings+7Fo
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 0E90h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_normalizationCorrectionsLineFn	proc near ; DATA XREF: _parseNormalizationCorrections+37o

var_1B4		= byte ptr -1B4h
var_F0		= byte ptr -0F0h
var_EF		= byte ptr -0EFh
var_E4		= byte ptr -0E4h
var_E3		= byte ptr -0E3h
var_D8		= dword	ptr -0D8h
Format		= dword	ptr -0CCh
var_C0		= dword	ptr -0C0h
EndPtr		= dword	ptr -0B4h
var_A8		= byte ptr -0A8h
var_4		= dword	ptr -4
arg_4		= dword	ptr  0Ch
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 1B4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_1B4]
		mov	ecx, 6Dh ; 'm'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	esi, esp
		push	10h		; Radix
		lea	eax, [ebp+EndPtr]
		push	eax		; EndPtr
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		push	edx		; Str
		call	dword ptr ds:__imp__strtoul
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+Format], eax
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jle	short loc_F2C
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		push	offset ??_C@_0EE@LNADDJOJ@gensprep?3?5error?5parsing?5Normaliz@	; "gensprep: error parsing NormalizationCo"...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx		; Code
		call	dword ptr ds:__imp__exit
; ---------------------------------------------------------------------------
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_F2C:				; CODE XREF: _normalizationCorrectionsLineFn+55j
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+8]
		mov	[ebp+var_C0], ecx
		mov	eax, [ebp+arg_C]
		push	eax
		push	28h ; '('
		lea	ecx, [ebp+var_A8]
		push	ecx
		mov	edx, [ebp+var_C0]
		push	edx
		call	_u_parseCodePoints
		add	esp, 10h
		mov	[ebp+var_D8], eax
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+18h]
		push	ecx
		lea	edx, [ebp+var_E4]
		push	edx
		call	_u_versionFromString_56
		add	esp, 8
		push	offset ??_C@_05FJFNHAJ@3?42?40?$AA@ ; "3.2.0"
		lea	eax, [ebp+var_F0]
		push	eax
		call	_u_versionFromString_56
		add	esp, 8
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jle	short loc_FE1
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		call	_u_errorName_56
		add	esp, 4
		mov	esi, esp
		push	eax
		mov	edx, [ebp+Format]
		push	edx		; Format
		push	offset ??_C@_0EF@PJBMCDKG@gensprep?5error?5parsing?5Normaliza@ ; "gensprep error parsing NormalizationCor"...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx		; Code
		call	dword ptr ds:__imp__exit
; ---------------------------------------------------------------------------
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_FE1:				; CODE XREF: _normalizationCorrectionsLineFn+FAj
		movzx	eax, [ebp+var_E4]
		movzx	ecx, [ebp+var_F0]
		cmp	eax, ecx
		jg	short loc_1017
		movzx	eax, [ebp+var_E4]
		movzx	ecx, [ebp+var_F0]
		cmp	eax, ecx
		jnz	short loc_103A
		movzx	eax, [ebp+var_E3]
		movzx	ecx, [ebp+var_EF]
		cmp	eax, ecx
		jle	short loc_103A

loc_1017:				; CODE XREF: _normalizationCorrectionsLineFn+161j
		mov	eax, [ebp+arg_C]
		push	eax
		push	1
		mov	ecx, [ebp+var_D8]
		push	ecx
		lea	edx, [ebp+var_A8]
		push	edx
		mov	eax, [ebp+Format]
		push	eax
		call	_storeMapping
		add	esp, 14h

loc_103A:				; CODE XREF: _normalizationCorrectionsLineFn+173j
					; _normalizationCorrectionsLineFn+185j
		lea	eax, [ebp+var_E4]
		push	eax
		call	_setUnicodeVersionNC
		add	esp, 4
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN12
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1B4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_normalizationCorrectionsLineFn	endp

; ---------------------------------------------------------------------------
$LN12		dd 4			; DATA XREF: _normalizationCorrectionsLineFn+1BDo
		dd offset $LN11
$LN11		dd 0FFFFFF58h, 0A0h	; DATA XREF: .text:0000107Co
		dd offset $LN7_0	; "mapping"
		dd 0FFFFFF4Ch, 4
		dd offset $LN8_0	; "end"
		dd 0FFFFFF1Ch, 4
		dd offset $LN9		; "version"
		dd 0FFFFFF10h, 4
		dd offset $LN10		; "thisVersion"
$LN10		db 'thisVersion',0      ; DATA XREF: .text:000010ACo
$LN9		db 'version',0          ; DATA XREF: .text:000010A0o
$LN8_0		db 'end',0              ; DATA XREF: .text:00001094o
$LN7_0		db 'mapping',0          ; DATA XREF: .text:00001088o
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 10D0h
		public ??_C@_0EF@PJBMCDKG@gensprep?5error?5parsing?5Normaliza@
; char `string'[]
??_C@_0EF@PJBMCDKG@gensprep?5error?5parsing?5Normaliza@	db 'gensprep error parsing NormalizationCorrections.txt of U+%04lx - '
					; DATA XREF: _normalizationCorrectionsLineFn+114o
		db '%s',0Ah,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1118h
		public ??_C@_05FJFNHAJ@3?42?40?$AA@
; `string'
??_C@_05FJFNHAJ@3?42?40?$AA@ db	'3.2.0',0 ; DATA XREF: _normalizationCorrectionsLineFn+E0o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 1120h
		public ??_C@_0EE@LNADDJOJ@gensprep?3?5error?5parsing?5Normaliz@
; char `string'[]
??_C@_0EE@LNADDJOJ@gensprep?3?5error?5parsing?5Normaliz@ db 'gensprep: error parsing NormalizationCorrections.txt mapping at %'
					; DATA XREF: _normalizationCorrectionsLineFn+5Fo
		db 's',0Ah,0
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1164h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl parseMappings(char *Format, char,	int)
_parseMappings	proc near		; CODE XREF: _main+2A7p

var_E0		= byte ptr -0E0h
var_1C		= byte ptr -1Ch
Format		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0E0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_E0]
		mov	ecx, 38h ; '8'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_8], 0
		jz	short loc_1190
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0
		jle	short loc_1195

loc_1190:				; CODE XREF: _parseMappings+22j
		jmp	loc_1220
; ---------------------------------------------------------------------------

loc_1195:				; CODE XREF: _parseMappings+2Aj
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+Format]
		push	ecx
		push	offset _strprepProfileLineFn
		push	3
		lea	edx, [ebp+var_1C]
		push	edx
		push	3Bh ; ';'
		mov	eax, [ebp+Format]
		push	eax
		call	_u_parseDelimitedFile
		add	esp, 1Ch
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0
		jle	short loc_1220
		movsx	eax, [ebp+arg_4]
		test	eax, eax
		jnz	short loc_11CE
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 4
		jz	short loc_1220

loc_11CE:				; CODE XREF: _parseMappings+60j
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		push	ecx
		call	_u_errorName_56
		add	esp, 4
		mov	esi, esp
		push	eax
		mov	edx, [ebp+Format]
		push	edx		; Format
		push	offset ??_C@_0DI@DEGGMNCB@gensprep?5error?3?5u_parseDelimited@ ; "gensprep error: u_parseDelimitedFile(\""...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax]
		push	ecx		; Code
		call	dword ptr ds:__imp__exit
; ---------------------------------------------------------------------------
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1220:				; CODE XREF: _parseMappings:loc_1190j
					; _parseMappings+58j ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN9_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0E0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_parseMappings	endp

; ---------------------------------------------------------------------------
		align 4
$LN9_0		dd 1			; DATA XREF: _parseMappings+C0o
		dd offset $LN8_1
$LN8_1		dd 0FFFFFFE4h, 18h	; DATA XREF: .text:0000124Co
		dd offset $LN7_1	; "fields"
$LN7_1		db 'fields',0           ; DATA XREF: .text:00001258o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1264h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_strprepProfileLineFn proc near		; DATA XREF: _parseMappings+39o

var_1D8		= byte ptr -1D8h
Str1		= dword	ptr -114h
Format		= dword	ptr -108h
var_FC		= dword	ptr -0FCh
var_F0		= dword	ptr -0F0h
Str		= dword	ptr -0E4h
var_D8		= dword	ptr -0D8h
var_CC		= dword	ptr -0CCh
var_C0		= dword	ptr -0C0h
EndPtr		= dword	ptr -0B4h
var_A8		= byte ptr -0A8h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 1D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_1D8]
		mov	ecx, 76h ; 'v'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	[ebp+var_F0], 0
		mov	[ebp+var_FC], 0
		mov	eax, [ebp+arg_0]
		mov	[ebp+Format], eax
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	_u_skipWhitespace
		add	esp, 4
		mov	[ebp+Str1], eax
		mov	eax, [ebp+Str1]
		movsx	ecx, byte ptr [eax]
		cmp	ecx, 40h ; '@'
		jnz	loc_13D9
		mov	eax, [ebp+Str1]
		add	eax, 1
		mov	[ebp+Str1], eax
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+4]
		sub	ecx, [ebp+Str1]
		mov	[ebp+var_D8], ecx
		cmp	[ebp+var_D8], 9
		jl	short loc_134E
		push	1
		mov	eax, [ebp+Str1]
		push	eax
		call	_uprv_checkValidMemory
		add	esp, 8
		push	1
		push	offset ??_C@_09MMDNNKKJ@normalize?$AA@ ; "normalize"
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	esi, esp
		push	9		; MaxCount
		push	offset ??_C@_09MMDNNKKJ@normalize?$AA@ ; "normalize"
		mov	ecx, [ebp+Str1]
		push	ecx		; Str1
		call	dword ptr ds:__imp__strncmp
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jnz	short loc_134E
		mov	ds:byte_176, 1
		jmp	loc_16BE
; ---------------------------------------------------------------------------
		jmp	loc_13D9
; ---------------------------------------------------------------------------

loc_134E:				; CODE XREF: _strprepProfileLineFn+93j
					; _strprepProfileLineFn+D7j
		cmp	[ebp+var_D8], 0Ah
		jl	short loc_13A9
		push	1
		mov	eax, [ebp+Str1]
		push	eax
		call	_uprv_checkValidMemory
		add	esp, 8
		push	1
		push	offset ??_C@_0L@LLFALIFM@check?9bidi?$AA@ ; "check-bidi"
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	esi, esp
		push	0Ah		; MaxCount
		push	offset ??_C@_0L@LLFALIFM@check?9bidi?$AA@ ; "check-bidi"
		mov	ecx, [ebp+Str1]
		push	ecx		; Str1
		call	dword ptr ds:__imp__strncmp
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jnz	short loc_13A9
		mov	ds:byte_19E, 1
		jmp	loc_16BE
; ---------------------------------------------------------------------------
		jmp	short loc_13D9
; ---------------------------------------------------------------------------

loc_13A9:				; CODE XREF: _strprepProfileLineFn+F1j
					; _strprepProfileLineFn+135j
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		push	offset ??_C@_0CH@PDKPCGHF@gensprep?5error?5parsing?5a?5directi@	; "gensprep error parsing a directive %s."
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_13D9:				; CODE XREF: _strprepProfileLineFn+65j
					; _strprepProfileLineFn+E5j ...
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+10h]
		mov	[ebp+Str], ecx
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+8]
		mov	[ebp+var_C0], ecx
		mov	esi, esp
		mov	eax, ds:_usprepTypeNames
		push	eax		; SubStr
		mov	ecx, [ebp+Str]
		push	ecx		; Str
		call	dword ptr ds:__imp__strstr
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	loc_14A0
		mov	eax, [ebp+arg_C]
		push	eax
		lea	ecx, [ebp+var_FC]
		push	ecx
		lea	edx, [ebp+var_F0]
		push	edx
		mov	eax, [ebp+Str1]
		push	eax
		call	_u_parseCodePointRange
		add	esp, 10h
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jle	short loc_147F
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		call	_u_errorName_56
		add	esp, 4
		mov	esi, esp
		push	eax
		push	offset ??_C@_0CN@OOIHADBD@Could?5not?5parse?5code?5point?5range@ ; "Could not parse code point range. Error"...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	loc_16BE
; ---------------------------------------------------------------------------

loc_147F:				; CODE XREF: _strprepProfileLineFn+1DBj
		mov	eax, [ebp+arg_C]
		push	eax
		push	0
		mov	ecx, [ebp+var_FC]
		push	ecx
		mov	edx, [ebp+var_F0]
		push	edx
		call	_storeRange
		add	esp, 10h
		jmp	loc_1654
; ---------------------------------------------------------------------------

loc_14A0:				; CODE XREF: _strprepProfileLineFn+1AEj
		mov	esi, esp
		mov	eax, ds:SubStr
		push	eax		; SubStr
		mov	ecx, [ebp+Str]
		push	ecx		; Str
		call	dword ptr ds:__imp__strstr
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	loc_154F
		mov	eax, [ebp+arg_C]
		push	eax
		lea	ecx, [ebp+var_FC]
		push	ecx
		lea	edx, [ebp+var_F0]
		push	edx
		mov	eax, [ebp+Str1]
		push	eax
		call	_u_parseCodePointRange
		add	esp, 10h
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jle	short loc_152E
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		call	_u_errorName_56
		add	esp, 4
		mov	esi, esp
		push	eax
		push	offset ??_C@_0CN@OOIHADBD@Could?5not?5parse?5code?5point?5range@ ; "Could not parse code point range. Error"...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	loc_16BE
; ---------------------------------------------------------------------------

loc_152E:				; CODE XREF: _strprepProfileLineFn+28Aj
		mov	eax, [ebp+arg_C]
		push	eax
		push	2
		mov	ecx, [ebp+var_FC]
		push	ecx
		mov	edx, [ebp+var_F0]
		push	edx
		call	_storeRange
		add	esp, 10h
		jmp	loc_1654
; ---------------------------------------------------------------------------

loc_154F:				; CODE XREF: _strprepProfileLineFn+25Dj
		mov	esi, esp
		mov	eax, ds:off_B0
		push	eax		; SubStr
		mov	ecx, [ebp+Str]
		push	ecx		; Str
		call	dword ptr ds:__imp__strstr
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	loc_164B
		mov	esi, esp
		push	10h		; Radix
		lea	eax, [ebp+EndPtr]
		push	eax		; EndPtr
		mov	ecx, [ebp+Str1]
		push	ecx		; Str
		call	dword ptr ds:__imp__strtoul
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_CC], eax
		mov	eax, [ebp+EndPtr]
		cmp	eax, [ebp+Str1]
		jbe	short loc_15BA
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+EndPtr]
		cmp	ecx, [eax+4]
		jz	short loc_1604

loc_15BA:				; CODE XREF: _strprepProfileLineFn+346j
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		push	offset ??_C@_0CJ@EJMINABD@gensprep?3?5syntax?5error?5in?5field?5@ ; "gensprep: syntax error in field 0 at %s"...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 9
		mov	esi, esp
		push	9		; Code
		call	dword ptr ds:__imp__exit
; ---------------------------------------------------------------------------
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1604:				; CODE XREF: _strprepProfileLineFn+354j
		mov	eax, [ebp+arg_C]
		push	eax
		push	28h ; '('
		lea	ecx, [ebp+var_A8]
		push	ecx
		mov	edx, [ebp+var_C0]
		push	edx
		call	_u_parseCodePoints
		add	esp, 10h
		mov	[ebp+var_D8], eax
		mov	eax, [ebp+arg_C]
		push	eax
		push	1
		mov	ecx, [ebp+var_D8]
		push	ecx
		lea	edx, [ebp+var_A8]
		push	edx
		mov	eax, [ebp+var_CC]
		push	eax
		call	_storeMapping
		add	esp, 14h
		jmp	short loc_1654
; ---------------------------------------------------------------------------

loc_164B:				; CODE XREF: _strprepProfileLineFn+30Cj
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 3

loc_1654:				; CODE XREF: _strprepProfileLineFn+237j
					; _strprepProfileLineFn+2E6j ...
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jle	short loc_16BE
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx
		call	_u_errorName_56
		add	esp, 4
		mov	esi, esp
		push	eax
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+10h]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		push	edx
		mov	eax, [ebp+Format]
		push	eax		; Format
		push	offset ??_C@_0DF@HOEOGPDN@gensprep?5error?5parsing?5?5?$CFs?5line?5@ ; "gensprep error parsing	%s line	%s at %"...
		mov	edi, esp
		call	dword ptr ds:__imp____iob_func
		cmp	edi, esp
		call	__RTC_CheckEsp
		add	eax, 40h ; '@'
		push	eax		; File
		call	dword ptr ds:__imp__fprintf
		add	esp, 18h
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	eax, [ebp+arg_C]
		mov	ecx, [eax]
		push	ecx		; Code
		call	dword ptr ds:__imp__exit
; ---------------------------------------------------------------------------
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_16BE:				; CODE XREF: _strprepProfileLineFn+E0j
					; _strprepProfileLineFn+13Ej ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN24
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 1D8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_strprepProfileLineFn endp

; ---------------------------------------------------------------------------
		align 10h
$LN24		dd 4			; DATA XREF: _strprepProfileLineFn+45Eo
		dd offset $LN23_0
$LN23_0		dd 0FFFFFF58h, 0A0h	; DATA XREF: .text:000016F4o
		dd offset $LN19		; "mapping"
		dd 0FFFFFF4Ch, 4
		dd offset $LN20		; "end"
		dd 0FFFFFF10h, 4
		dd offset $LN21_0	; "rangeStart"
		dd 0FFFFFF04h, 4
		dd offset $LN22_0	; "rangeEnd"
$LN22_0		db 'rangeEnd',0         ; DATA XREF: .text:00001724o
$LN21_0		db 'rangeStart',0       ; DATA XREF: .text:00001718o
$LN20		db 'end',0              ; DATA XREF: .text:0000170Co
$LN19		db 'mapping',0          ; DATA XREF: .text:00001700o
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1748h
		public ??_C@_0DF@HOEOGPDN@gensprep?5error?5parsing?5?5?$CFs?5line?5@
; char `string'[]
??_C@_0DF@HOEOGPDN@gensprep?5error?5parsing?5?5?$CFs?5line?5@ db 'gensprep error parsing  %s line %s at %s. Error: %s',0Ah,0
					; DATA XREF: _strprepProfileLineFn+41Do
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1780h
		public ??_C@_0CJ@EJMINABD@gensprep?3?5syntax?5error?5in?5field?5@
; char `string'[]
??_C@_0CJ@EJMINABD@gensprep?3?5syntax?5error?5in?5field?5@ db 'gensprep: syntax error in field 0 at %s',0Ah,0
					; DATA XREF: _strprepProfileLineFn+35Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 17ACh
		public ??_C@_0CN@OOIHADBD@Could?5not?5parse?5code?5point?5range@
; char `string'[]
??_C@_0CN@OOIHADBD@Could?5not?5parse?5code?5point?5range@ db 'Could not parse code point range. Error: %s',0Ah,0
					; DATA XREF: _strprepProfileLineFn+1EEo
					; _strprepProfileLineFn+29Do
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 17DCh
		public ??_C@_0CH@PDKPCGHF@gensprep?5error?5parsing?5a?5directi@
; char `string'[]
??_C@_0CH@PDKPCGHF@gensprep?5error?5parsing?5a?5directi@ db 'gensprep error parsing a directive %s.',0
					; DATA XREF: _strprepProfileLineFn+14Do
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 1804h
		public ??_C@_09MMDNNKKJ@normalize?$AA@
; char `string'[]
??_C@_09MMDNNKKJ@normalize?$AA@	db 'normalize',0 ; DATA XREF: _strprepProfileLineFn+A8o
					; _strprepProfileLineFn+B9o
_rdata		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn _u_cleanup_56:near ; CODE	XREF: _main+405p
		extrn _uprv_free_56:near ; CODE	XREF: _main+3FDp
		extrn _cleanUpData:near	; CODE XREF: _main+3F4p
		extrn _generateData:near ; CODE	XREF: _main+3ECp
		extrn _setOptions:near	; CODE XREF: _main+3D6p
		extrn _u_errorName_56:near ; CODE XREF:	_main+2B9p
					; _parseNormalizationCorrections+66p ...
		extrn _init:near	; CODE XREF: _main:loc_440p
; char *__cdecl	strcpy(char *Dest, const char *Source)
		extrn _strcpy:near	; CODE XREF: _main+239p _main+24Bp ...
; char *__cdecl	_strchr(const char *Str, int Val)
		extrn __imp__strchr:near ; CODE	XREF: _main+1F1p _main+20Dp
					; DATA XREF: ...
		extrn _uprv_malloc_56:near ; CODE XREF:	_main+1DEp
; size_t __cdecl strlen(const char *Str)
		extrn _strlen:near	; CODE XREF: _main+1D0p _main+257p ...
		extrn _setUnicodeVersion:near ;	CODE XREF: _main+1C4p
		extrn _u_setDataDirectory_56:near ; CODE XREF: _main+1B6p
; int _fprintf(FILE *File, const char *Format, ...)
		extrn __imp__fprintf:near ; CODE XREF: _main+D5p _main+2E0p ...
; FILE *__cdecl	___iob_func()
		extrn __imp____iob_func:near ; CODE XREF: _main+C4p _main+2CFp ...
		extrn _u_parseArgs:near	; CODE XREF: _main+9Ep
		extrn _u_getDataDirectory_56:near ; CODE XREF: _main+5Dp
					; _printHelp+78p
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _main+417p
					; _parseNormalizationCorrections+BCp ...
		extrn __RTC_CheckEsp:near ; CODE XREF: _main+CCp _main+E0p ...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
; void __cdecl __noreturn _exit(int Code)
		extrn __imp__exit:near	; CODE XREF: _parseNormalizationCorrections+A5p
					; _normalizationCorrectionsLineFn+8Fp ...
		extrn _u_parseDelimitedFile:near
					; CODE XREF: _parseNormalizationCorrections+48p
					; _parseMappings+4Ap
		extrn _setUnicodeVersionNC:near
					; CODE XREF: _normalizationCorrectionsLineFn+1B1p
		extrn _storeMapping:near ; CODE	XREF: _normalizationCorrectionsLineFn+1A2p
					; _strprepProfileLineFn+3DDp
		extrn _u_versionFromString_56:near
					; CODE XREF: _normalizationCorrectionsLineFn+D8p
					; _normalizationCorrectionsLineFn+ECp
		extrn _u_parseCodePoints:near
					; CODE XREF: _normalizationCorrectionsLineFn+BCp
					; _strprepProfileLineFn+3B4p
; unsigned __int32 __cdecl _strtoul(const char *Str, char **EndPtr, int	Radix)
		extrn __imp__strtoul:near ; CODE XREF: _normalizationCorrectionsLineFn+39p
					; _strprepProfileLineFn+324p
					; DATA XREF: ...
		extrn ___security_cookie:near
					; DATA XREF: _normalizationCorrectionsLineFn+1Er
					; _strprepProfileLineFn+1Er
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: _normalizationCorrectionsLineFn+1D2p
					; _strprepProfileLineFn+473p
		extrn _storeRange:near	; CODE XREF: _strprepProfileLineFn+22Fp
					; _strprepProfileLineFn+2DEp
		extrn _u_parseCodePointRange:near ; CODE XREF: _strprepProfileLineFn+1CDp
					; _strprepProfileLineFn+27Cp
; char *__cdecl	_strstr(const char *Str, const char *SubStr)
		extrn __imp__strstr:near ; CODE	XREF: _strprepProfileLineFn+19Cp
					; _strprepProfileLineFn+24Bp ...
; int __cdecl _strncmp(const char *Str1, const char *Str2, size_t MaxCount)
		extrn __imp__strncmp:near ; CODE XREF: _strprepProfileLineFn+C5p
					; _strprepProfileLineFn+123p
					; DATA XREF: ...
		extrn _uprv_checkValidMemory:near ; CODE XREF: _strprepProfileLineFn+9Ep
					; _strprepProfileLineFn+ADp ...
		extrn _u_skipWhitespace:near ; CODE XREF: _strprepProfileLineFn+4Bp


		end
