;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	C150CD473CEDC3B856C0B0DAD874808E
; Input	CRC32 :	D681FB19

; File Name   :	D:\compspace\objfiles\firefox\genrb\ustr.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ustr_init
_ustr_init	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+8], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+4], 0
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_ustr_init	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 44h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 48h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ustr_initChars(int, char *, int, int)
		public _ustr_initChars
_ustr_initChars	proc near

var_DC		= dword	ptr -0DCh
var_14		= word ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0DCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_DC]
		mov	ecx, 37h ; '7'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jle	short loc_7E
		jmp	loc_143
; ---------------------------------------------------------------------------

loc_7E:					; CODE XREF: _ustr_initChars+2Bj
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+8], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+4], 0
		cmp	[ebp+arg_8], 0FFFFFFFFh
		jnz	short loc_B0
		mov	eax, [ebp+arg_4]
		push	eax		; char *
		call	_strlen
		add	esp, 4
		mov	[ebp+arg_8], eax

loc_B0:					; CODE XREF: _ustr_initChars+53j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+8]
		cmp	ecx, [ebp+arg_8]
		jge	short loc_104
		cmp	[ebp+arg_8], 80h ; '€'
		jge	short loc_D0
		mov	[ebp+var_DC], 80h ; '€'
		jmp	short loc_E3
; ---------------------------------------------------------------------------

loc_D0:					; CODE XREF: _ustr_initChars+76j
		mov	eax, [ebp+arg_8]
		lea	ecx, [eax+eax+80h]
		and	ecx, 0FFFFFF80h
		mov	[ebp+var_DC], ecx

loc_E3:					; CODE XREF: _ustr_initChars+82j
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+var_DC]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ustr_resize
		add	esp, 0Ch
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jle	short loc_104
		jmp	short loc_143
; ---------------------------------------------------------------------------

loc_104:				; CODE XREF: _ustr_initChars+6Dj
					; _ustr_initChars+B4j
		jmp	short loc_10F
; ---------------------------------------------------------------------------

loc_106:				; CODE XREF: _ustr_initChars+F5j
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax

loc_10F:				; CODE XREF: _ustr_initChars:loc_104j
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_8]
		jge	short loc_143
		push	1
		lea	eax, [ebp+var_14]
		push	eax
		mov	ecx, [ebp+arg_4]
		add	ecx, [ebp+var_8]
		push	ecx
		call	_u_charsToUChars_56
		add	esp, 0Ch
		mov	eax, [ebp+arg_C]
		push	eax
		movzx	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ustr_ucat
		add	esp, 0Ch
		jmp	short loc_106
; ---------------------------------------------------------------------------

loc_143:				; CODE XREF: _ustr_initChars+2Dj
					; _ustr_initChars+B6j ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN14
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0DCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ustr_initChars	endp

; ---------------------------------------------------------------------------
$LN14		dd 1			; DATA XREF: _ustr_initChars+FBo
		dd offset $LN13
$LN13		dd 0FFFFFFECh, 2	; DATA XREF: .text:0000016Co
		dd offset $LN12		; "charToAppend"
$LN12		db 'charToAppend',0     ; DATA XREF: .text:00000178o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 18Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ustr_deinit
_ustr_deinit	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_0], 0
		jz	short loc_1DB
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx
		call	_uprv_free_56
		add	esp, 4
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+8], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+4], 0

loc_1DB:				; CODE XREF: _ustr_deinit+22j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ustr_deinit	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 1F0h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ustr_cpy
_ustr_cpy	proc near

var_C4		= dword	ptr -0C4h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C4]
		mov	ecx, 31h ; '1'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0
		jg	short loc_21E
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+arg_4]
		jnz	short loc_223

loc_21E:				; CODE XREF: _ustr_cpy+24j
		jmp	loc_2DC
; ---------------------------------------------------------------------------

loc_223:				; CODE XREF: _ustr_cpy+2Cj
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	edx, [eax+8]
		cmp	edx, [ecx+4]
		jge	short loc_280
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax+4], 80h ; '€'
		jge	short loc_249
		mov	[ebp+var_C4], 80h ; '€'
		jmp	short loc_25F
; ---------------------------------------------------------------------------

loc_249:				; CODE XREF: _ustr_cpy+4Bj
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+4]
		lea	eax, [edx+edx+80h]
		and	eax, 0FFFFFF80h
		mov	[ebp+var_C4], eax

loc_25F:				; CODE XREF: _ustr_cpy+57j
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+var_C4]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		call	_ustr_resize
		add	esp, 0Ch
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0
		jle	short loc_280
		jmp	short loc_2DC
; ---------------------------------------------------------------------------

loc_280:				; CODE XREF: _ustr_cpy+3Fj
					; _ustr_cpy+8Cj
		mov	eax, [ebp+arg_4]
		cmp	dword ptr [eax], 0
		jz	short loc_290
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax], 0
		jnz	short loc_292

loc_290:				; CODE XREF: _ustr_cpy+96j
		jmp	short loc_2DC
; ---------------------------------------------------------------------------

loc_292:				; CODE XREF: _ustr_cpy+9Ej
		push	1
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+4]
		shl	eax, 1
		push	eax		; size_t
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		push	edx		; void *
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		push	ecx		; void *
		call	_memcpy
		add	esp, 0Ch
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		xor	edx, edx
		mov	[eax+ecx*2], dx

loc_2DC:				; CODE XREF: _ustr_cpy:loc_21Ej
					; _ustr_cpy+8Ej ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ustr_cpy	endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 2F0h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ustr_setlen
_ustr_setlen	proc near

var_C4		= dword	ptr -0C4h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C4]
		mov	ecx, 31h ; '1'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0
		jle	short loc_318
		jmp	short loc_386
; ---------------------------------------------------------------------------

loc_318:				; CODE XREF: _ustr_setlen+24j
		mov	eax, [ebp+arg_4]
		add	eax, 1
		mov	ecx, [ebp+arg_0]
		cmp	[ecx+8], eax
		jge	short loc_36F
		cmp	[ebp+arg_4], 80h ; '€'
		jge	short loc_33B
		mov	[ebp+var_C4], 80h ; '€'
		jmp	short loc_34E
; ---------------------------------------------------------------------------

loc_33B:				; CODE XREF: _ustr_setlen+3Dj
		mov	eax, [ebp+arg_4]
		lea	ecx, [eax+eax+80h]
		and	ecx, 0FFFFFF80h
		mov	[ebp+var_C4], ecx

loc_34E:				; CODE XREF: _ustr_setlen+49j
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+var_C4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ustr_resize
		add	esp, 0Ch
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0
		jle	short loc_36F
		jmp	short loc_386
; ---------------------------------------------------------------------------

loc_36F:				; CODE XREF: _ustr_setlen+34j
					; _ustr_setlen+7Bj
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	[eax+4], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		xor	edx, edx
		mov	eax, [ebp+arg_4]
		mov	[ecx+eax*2], dx

loc_386:				; CODE XREF: _ustr_setlen+26j
					; _ustr_setlen+7Dj
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ustr_setlen	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 39Ch
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ustr_cat
_ustr_cat	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+4]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ustr_ncat
		add	esp, 10h
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ustr_cat	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 3ECh
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ustr_ncat
_ustr_ncat	proc near		; CODE XREF: _ustr_cat+31p

var_C4		= dword	ptr -0C4h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C4]
		mov	ecx, 31h ; '1'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jg	short loc_41A
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+arg_4]
		jnz	short loc_41F

loc_41A:				; CODE XREF: _ustr_ncat+24j
		jmp	loc_4DD
; ---------------------------------------------------------------------------

loc_41F:				; CODE XREF: _ustr_ncat+2Cj
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		add	ecx, [ebp+arg_8]
		mov	edx, [ebp+arg_0]
		cmp	[edx+8], ecx
		jge	short loc_487
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		add	ecx, [ebp+arg_8]
		cmp	ecx, 80h ; '€'
		jge	short loc_44D
		mov	[ebp+var_C4], 80h ; '€'
		jmp	short loc_466
; ---------------------------------------------------------------------------

loc_44D:				; CODE XREF: _ustr_ncat+53j
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		mov	ecx, [ebp+arg_8]
		lea	edx, [ecx+eax*2+80h]
		and	edx, 0FFFFFF80h
		mov	[ebp+var_C4], edx

loc_466:				; CODE XREF: _ustr_ncat+5Fj
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+var_C4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ustr_resize
		add	esp, 0Ch
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jle	short loc_487
		jmp	short loc_4DD
; ---------------------------------------------------------------------------

loc_487:				; CODE XREF: _ustr_ncat+42j
					; _ustr_ncat+97j
		push	1
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	edx, [ebp+arg_8]
		shl	edx, 1
		push	edx		; size_t
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax]
		push	ecx		; void *
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		lea	eax, [edx+eax*2]
		push	eax		; void *
		call	_memcpy
		add	esp, 0Ch
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+arg_4]
		add	ecx, [edx+4]
		mov	eax, [ebp+arg_0]
		mov	[eax+4], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		xor	edx, edx
		mov	[eax+ecx*2], dx

loc_4DD:				; CODE XREF: _ustr_ncat:loc_41Aj
					; _ustr_ncat+99j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ustr_ncat	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4F4h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ustr_ucat
_ustr_ucat	proc near		; CODE XREF: _ustr_initChars+EDp
					; _ustr_u32cat+50p ...

var_C4		= dword	ptr -0C4h
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C4]
		mov	ecx, 31h ; '1'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0
		jle	short loc_51F
		jmp	loc_5CF
; ---------------------------------------------------------------------------

loc_51F:				; CODE XREF: _ustr_ucat+24j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		add	ecx, 1
		mov	edx, [ebp+arg_0]
		cmp	[edx+8], ecx
		jge	short loc_584
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		add	ecx, 1
		cmp	ecx, 80h ; '€'
		jge	short loc_54D
		mov	[ebp+var_C4], 80h ; '€'
		jmp	short loc_563
; ---------------------------------------------------------------------------

loc_54D:				; CODE XREF: _ustr_ucat+4Bj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		lea	ecx, [eax+eax+81h]
		and	ecx, 0FFFFFF80h
		mov	[ebp+var_C4], ecx

loc_563:				; CODE XREF: _ustr_ucat+57j
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+var_C4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_ustr_resize
		add	esp, 0Ch
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0
		jle	short loc_584
		jmp	short loc_5CF
; ---------------------------------------------------------------------------

loc_584:				; CODE XREF: _ustr_ucat+3Aj
					; _ustr_ucat+8Cj
		push	1
		lea	eax, [ebp+arg_4]
		push	eax
		call	_uprv_checkValidMemory
		add	esp, 8
		push	2		; size_t
		lea	ecx, [ebp+arg_4]
		push	ecx		; void *
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		lea	eax, [edx+eax*2]
		push	eax		; void *
		call	_memcpy
		add	esp, 0Ch
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		add	ecx, 1
		mov	edx, [ebp+arg_0]
		mov	[edx+4], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		xor	edx, edx
		mov	[eax+ecx*2], dx

loc_5CF:				; CODE XREF: _ustr_ucat+26j
					; _ustr_ucat+8Ej
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ustr_ucat	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 5E4h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _ustr_u32cat
_ustr_u32cat	proc near

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_4], 10FFFFh
		jle	short loc_616
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 0Ch
		jmp	short loc_673
; ---------------------------------------------------------------------------

loc_616:				; CODE XREF: _ustr_u32cat+25j
		cmp	[ebp+arg_4], 0FFFFh
		jle	short loc_65E
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		sar	ecx, 0Ah
		add	ecx, 0D7C0h
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ustr_ucat
		add	esp, 0Ch
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		and	ecx, 3FFh
		or	ecx, 0DC00h
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ustr_ucat
		add	esp, 0Ch
		jmp	short loc_673
; ---------------------------------------------------------------------------

loc_65E:				; CODE XREF: _ustr_u32cat+39j
		mov	eax, [ebp+arg_8]
		push	eax
		movzx	ecx, word ptr [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ustr_ucat
		add	esp, 0Ch

loc_673:				; CODE XREF: _ustr_u32cat+30j
					; _ustr_u32cat+78j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ustr_u32cat	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 688h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ustr_uscat(int, void *, int, int)
		public _ustr_uscat
_ustr_uscat	proc near

var_C4		= dword	ptr -0C4h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C4h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C4]
		mov	ecx, 31h ; '1'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jle	short loc_6B3
		jmp	loc_76A
; ---------------------------------------------------------------------------

loc_6B3:				; CODE XREF: _ustr_uscat+24j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		add	ecx, [ebp+arg_8]
		mov	edx, [ebp+arg_0]
		cmp	[edx+8], ecx
		jge	short loc_71B
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		add	ecx, [ebp+arg_8]
		cmp	ecx, 80h ; '€'
		jge	short loc_6E1
		mov	[ebp+var_C4], 80h ; '€'
		jmp	short loc_6FA
; ---------------------------------------------------------------------------

loc_6E1:				; CODE XREF: _ustr_uscat+4Bj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		mov	ecx, [ebp+arg_8]
		lea	edx, [ecx+eax*2+80h]
		and	edx, 0FFFFFF80h
		mov	[ebp+var_C4], edx

loc_6FA:				; CODE XREF: _ustr_uscat+57j
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+var_C4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	_ustr_resize
		add	esp, 0Ch
		mov	eax, [ebp+arg_C]
		cmp	dword ptr [eax], 0
		jle	short loc_71B
		jmp	short loc_76A
; ---------------------------------------------------------------------------

loc_71B:				; CODE XREF: _ustr_uscat+3Aj
					; _ustr_uscat+8Fj
		push	1
		mov	eax, [ebp+arg_4]
		push	eax
		call	_uprv_checkValidMemory
		add	esp, 8
		mov	ecx, [ebp+arg_8]
		shl	ecx, 1
		push	ecx		; size_t
		mov	edx, [ebp+arg_4]
		push	edx		; void *
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		lea	ecx, [eax+ecx*2]
		push	ecx		; void *
		call	_memcpy
		add	esp, 0Ch
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		add	ecx, [ebp+arg_8]
		mov	edx, [ebp+arg_0]
		mov	[edx+4], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+4]
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		xor	edx, edx
		mov	[eax+ecx*2], dx

loc_76A:				; CODE XREF: _ustr_uscat+26j
					; _ustr_uscat+91j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C4h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ustr_uscat	endp

; ---------------------------------------------------------------------------
		align 10h
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 780h
		assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing,	gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_ustr_resize	proc near		; CODE XREF: _ustr_initChars+A6p
					; _ustr_cpy+7Ep ...

var_C0		= byte ptr -0C0h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0C0h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_C0]
		mov	ecx, 30h ; '0'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		cmp	dword ptr [eax], 0
		jle	short loc_7A8
		jmp	short loc_7F3
; ---------------------------------------------------------------------------

loc_7A8:				; CODE XREF: _ustr_resize+24j
		mov	eax, [ebp+arg_4]
		lea	ecx, [eax+eax+2]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		push	eax
		call	_uprv_realloc_56
		add	esp, 8
		mov	ecx, [ebp+arg_0]
		mov	[ecx], eax
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax], 0
		jnz	short loc_7EA
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 7
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+8], 0
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [ecx+4], 0
		jmp	short loc_7F3
; ---------------------------------------------------------------------------

loc_7EA:				; CODE XREF: _ustr_resize+49j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	[eax+8], ecx

loc_7F3:				; CODE XREF: _ustr_resize+26j
					; _ustr_resize+68j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0C0h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_ustr_resize	endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn _u_charsToUChars_56:near ; CODE XREF: _ustr_initChars+D8p
; size_t __cdecl strlen(const char *)
		extrn _strlen:near	; CODE XREF: _ustr_initChars+59p
		extrn __RTC_CheckEsp:near ; CODE XREF: _ustr_initChars+113p
					; _ustr_deinit+5Ap ...
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _ustr_initChars+101p
		extrn _uprv_free_56:near ; CODE	XREF: _ustr_deinit+2Ap
; void *__cdecl	memcpy(void *, const void *, size_t)
		extrn _memcpy:near	; CODE XREF: _ustr_cpy+C7p
					; _ustr_ncat+C6p ...
		extrn _uprv_checkValidMemory:near ; CODE XREF: _ustr_cpy+AAp
					; _ustr_ncat+A3p ...
		extrn _uprv_realloc_56:near ; CODE XREF: _ustr_resize+36p


		end
