;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	5A74F839CB6E072041844F5A8AEF9BD6
; Input	CRC32 :	A2DBB3F6

; File Name   :	D:\compspace\objfiles\firefox\genrb\rle.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; includelib "MSVCRTD"

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
_ESCAPE		dw 0A5A5h		; DATA XREF: _encodeRunShort+4Dr
					; _encodeRunShort+63r ...
_ESCAPE_BYTE	db 0A5h			; DATA XREF: _encodeRunByte+57r
					; _encodeRunByte+6Ar ...
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _usArrayToRLEString
_usArrayToRLEString proc near

var_108		= byte ptr -108h
var_44		= word ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= word ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_108]
		mov	ecx, 42h ; 'B'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_C]
		mov	ecx, [ebp+arg_8]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_8]
		cmp	eax, [ebp+var_8]
		jnb	loc_12B
		mov	eax, [ebp+arg_4]
		sar	eax, 10h
		mov	ecx, [ebp+arg_8]
		mov	[ecx], ax
		mov	edx, [ebp+arg_8]
		add	edx, 2
		mov	[ebp+arg_8], edx
		mov	eax, [ebp+arg_8]
		cmp	eax, [ebp+var_8]
		jnb	loc_120
		mov	eax, [ebp+arg_0]
		mov	cx, [eax]
		mov	[ebp+var_20], cx
		mov	[ebp+var_2C], 1
		mov	[ebp+var_38], 1
		mov	eax, [ebp+arg_8]
		mov	cx, word ptr [ebp+arg_4]
		mov	[eax], cx
		mov	edx, [ebp+arg_8]
		add	edx, 2
		mov	[ebp+arg_8], edx
		jmp	short loc_97
; ---------------------------------------------------------------------------

loc_8E:					; CODE XREF: _usArrayToRLEString:loc_FCj
		mov	eax, [ebp+var_38]
		add	eax, 1
		mov	[ebp+var_38], eax

loc_97:					; CODE XREF: _usArrayToRLEString+88j
		mov	eax, [ebp+var_38]
		cmp	eax, [ebp+arg_4]
		jge	short loc_FE
		mov	eax, [ebp+var_38]
		mov	ecx, [ebp+arg_0]
		mov	dx, [ecx+eax*2]
		mov	[ebp+var_44], dx
		movzx	eax, [ebp+var_44]
		movzx	ecx, [ebp+var_20]
		cmp	eax, ecx
		jnz	short loc_CD
		cmp	[ebp+var_2C], 0FFFFh
		jge	short loc_CD
		mov	eax, [ebp+var_2C]
		add	eax, 1
		mov	[ebp+var_2C], eax
		jmp	short loc_FC
; ---------------------------------------------------------------------------

loc_CD:					; CODE XREF: _usArrayToRLEString+B3j
					; _usArrayToRLEString+BCj
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+var_2C]
		push	ecx
		movzx	edx, [ebp+var_20]
		push	edx
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		call	_encodeRunShort
		add	esp, 14h
		mov	[ebp+arg_8], eax
		mov	ax, [ebp+var_44]
		mov	[ebp+var_20], ax
		mov	[ebp+var_2C], 1

loc_FC:					; CODE XREF: _usArrayToRLEString+C7j
		jmp	short loc_8E
; ---------------------------------------------------------------------------

loc_FE:					; CODE XREF: _usArrayToRLEString+99j
		mov	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+var_2C]
		push	ecx
		movzx	edx, [ebp+var_20]
		push	edx
		mov	eax, [ebp+var_8]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		call	_encodeRunShort
		add	esp, 14h
		mov	[ebp+arg_8], eax
		jmp	short loc_129
; ---------------------------------------------------------------------------

loc_120:				; CODE XREF: _usArrayToRLEString+57j
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0Fh

loc_129:				; CODE XREF: _usArrayToRLEString+11Aj
		jmp	short loc_134
; ---------------------------------------------------------------------------

loc_12B:				; CODE XREF: _usArrayToRLEString+36j
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0Fh

loc_134:				; CODE XREF: _usArrayToRLEString:loc_129j
		mov	eax, [ebp+arg_8]
		sub	eax, [ebp+var_14]
		sar	eax, 1
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 108h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_usArrayToRLEString endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 150h
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 154h
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 158h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_encodeRunShort	proc near		; CODE XREF: _usArrayToRLEString+DEp
					; _usArrayToRLEString+10Fp

var_D8		= byte ptr -0D8h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= word ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0D8h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_D8]
		mov	ecx, 36h ; '6'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		cmp	[ebp+arg_C], 4
		jge	loc_21B
		mov	[ebp+var_14], 0
		jmp	short loc_199
; ---------------------------------------------------------------------------

loc_190:				; CODE XREF: _encodeRunShort+B9j
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax

loc_199:				; CODE XREF: _encodeRunShort+36j
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+arg_C]
		jge	short loc_216
		movzx	eax, [ebp+arg_8]
		movzx	ecx, _ESCAPE
		cmp	eax, ecx
		jnz	short loc_1E2
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+arg_4]
		jnb	short loc_1D0
		mov	eax, [ebp+arg_0]
		mov	cx, _ESCAPE
		mov	[eax], cx
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx
		jmp	short loc_1D9
; ---------------------------------------------------------------------------

loc_1D0:				; CODE XREF: _encodeRunShort+5Ej
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0Fh

loc_1D9:				; CODE XREF: _encodeRunShort+76j
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax

loc_1E2:				; CODE XREF: _encodeRunShort+56j
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+arg_4]
		jnb	short loc_1FF
		mov	eax, [ebp+arg_0]
		mov	cx, [ebp+arg_8]
		mov	[eax], cx
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx
		jmp	short loc_208
; ---------------------------------------------------------------------------

loc_1FF:				; CODE XREF: _encodeRunShort+90j
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0Fh

loc_208:				; CODE XREF: _encodeRunShort+A5j
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		jmp	loc_190
; ---------------------------------------------------------------------------

loc_216:				; CODE XREF: _encodeRunShort+47j
		jmp	loc_330
; ---------------------------------------------------------------------------

loc_21B:				; CODE XREF: _encodeRunShort+29j
		movzx	eax, _ESCAPE
		cmp	[ebp+arg_C], eax
		jnz	short loc_2A0
		movzx	eax, [ebp+arg_8]
		movzx	ecx, _ESCAPE
		cmp	eax, ecx
		jnz	short loc_268
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+arg_4]
		jnb	short loc_256
		mov	eax, [ebp+arg_0]
		mov	cx, _ESCAPE
		mov	[eax], cx
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx
		jmp	short loc_25F
; ---------------------------------------------------------------------------

loc_256:				; CODE XREF: _encodeRunShort+E4j
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0Fh

loc_25F:				; CODE XREF: _encodeRunShort+FCj
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax

loc_268:				; CODE XREF: _encodeRunShort+DCj
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+arg_4]
		jnb	short loc_285
		mov	eax, [ebp+arg_0]
		mov	cx, [ebp+arg_8]
		mov	[eax], cx
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx
		jmp	short loc_28E
; ---------------------------------------------------------------------------

loc_285:				; CODE XREF: _encodeRunShort+116j
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0Fh

loc_28E:				; CODE XREF: _encodeRunShort+12Bj
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_C]
		sub	eax, 1
		mov	[ebp+arg_C], eax

loc_2A0:				; CODE XREF: _encodeRunShort+CDj
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+arg_4]
		jnb	short loc_2C0
		mov	eax, [ebp+arg_0]
		mov	cx, _ESCAPE
		mov	[eax], cx
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx
		jmp	short loc_2C9
; ---------------------------------------------------------------------------

loc_2C0:				; CODE XREF: _encodeRunShort+14Ej
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0Fh

loc_2C9:				; CODE XREF: _encodeRunShort+166j
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+arg_4]
		jnb	short loc_2EF
		mov	eax, [ebp+arg_0]
		mov	cx, word ptr [ebp+arg_C]
		mov	[eax], cx
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx
		jmp	short loc_2F8
; ---------------------------------------------------------------------------

loc_2EF:				; CODE XREF: _encodeRunShort+180j
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0Fh

loc_2F8:				; CODE XREF: _encodeRunShort+195j
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+arg_4]
		jnb	short loc_31E
		mov	eax, [ebp+arg_0]
		mov	cx, [ebp+arg_8]
		mov	[eax], cx
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx
		jmp	short loc_327
; ---------------------------------------------------------------------------

loc_31E:				; CODE XREF: _encodeRunShort+1AFj
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0Fh

loc_327:				; CODE XREF: _encodeRunShort+1C4j
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax

loc_330:				; CODE XREF: _encodeRunShort:loc_216j
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_encodeRunShort	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 33Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _byteArrayToRLEString
_byteArrayToRLEString proc near

var_114		= byte ptr -114h
var_4D		= byte ptr -4Dh
var_44		= dword	ptr -44h
var_38		= byte ptr -38h
var_37		= byte ptr -37h
var_2C		= dword	ptr -2Ch
var_1D		= byte ptr -1Dh
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 114h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_114]
		mov	ecx, 45h ; 'E'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_C]
		mov	ecx, [ebp+arg_8]
		lea	edx, [ecx+eax*2]
		mov	[ebp+var_14], edx
		mov	eax, [ebp+arg_8]
		cmp	eax, [ebp+var_14]
		jnb	loc_492
		mov	eax, [ebp+arg_4]
		sar	eax, 10h
		mov	ecx, [ebp+arg_8]
		mov	[ecx], ax
		mov	edx, [ebp+arg_8]
		add	edx, 2
		mov	[ebp+arg_8], edx
		mov	eax, [ebp+arg_8]
		cmp	eax, [ebp+var_14]
		jnb	loc_487
		mov	eax, [ebp+arg_0]
		mov	cl, [eax]
		mov	[ebp+var_1D], cl
		mov	[ebp+var_2C], 1
		mov	[ebp+var_38], 0
		xor	eax, eax
		mov	[ebp+var_37], al
		mov	[ebp+var_44], 1
		mov	eax, [ebp+arg_8]
		mov	cx, word ptr [ebp+arg_4]
		mov	[eax], cx
		mov	edx, [ebp+arg_8]
		add	edx, 2
		mov	[ebp+arg_8], edx
		jmp	short loc_3D6
; ---------------------------------------------------------------------------

loc_3CD:				; CODE XREF: _byteArrayToRLEString:loc_43Aj
		mov	eax, [ebp+var_44]
		add	eax, 1
		mov	[ebp+var_44], eax

loc_3D6:				; CODE XREF: _byteArrayToRLEString+8Fj
		mov	eax, [ebp+var_44]
		cmp	eax, [ebp+arg_4]
		jge	short loc_43C
		mov	eax, [ebp+arg_0]
		add	eax, [ebp+var_44]
		mov	cl, [eax]
		mov	[ebp+var_4D], cl
		movzx	eax, [ebp+var_4D]
		movzx	ecx, [ebp+var_1D]
		cmp	eax, ecx
		jnz	short loc_409
		cmp	[ebp+var_2C], 0FFh
		jge	short loc_409
		mov	eax, [ebp+var_2C]
		add	eax, 1
		mov	[ebp+var_2C], eax
		jmp	short loc_43A
; ---------------------------------------------------------------------------

loc_409:				; CODE XREF: _byteArrayToRLEString+B7j
					; _byteArrayToRLEString+C0j
		mov	eax, [ebp+arg_10]
		push	eax
		lea	ecx, [ebp+var_38]
		push	ecx
		mov	edx, [ebp+var_2C]
		push	edx
		movzx	eax, [ebp+var_1D]
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		call	_encodeRunByte
		add	esp, 18h
		mov	[ebp+arg_8], eax
		mov	al, [ebp+var_4D]
		mov	[ebp+var_1D], al
		mov	[ebp+var_2C], 1

loc_43A:				; CODE XREF: _byteArrayToRLEString+CBj
		jmp	short loc_3CD
; ---------------------------------------------------------------------------

loc_43C:				; CODE XREF: _byteArrayToRLEString+A0j
		mov	eax, [ebp+arg_10]
		push	eax
		lea	ecx, [ebp+var_38]
		push	ecx
		mov	edx, [ebp+var_2C]
		push	edx
		movzx	eax, [ebp+var_1D]
		push	eax
		mov	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		call	_encodeRunByte
		add	esp, 18h
		mov	[ebp+arg_8], eax
		movzx	eax, [ebp+var_38]
		test	eax, eax
		jz	short loc_485
		mov	eax, [ebp+arg_10]
		push	eax
		lea	ecx, [ebp+var_38]
		push	ecx
		push	0
		mov	edx, [ebp+var_14]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		call	_appendEncodedByte
		add	esp, 14h
		mov	[ebp+arg_8], eax

loc_485:				; CODE XREF: _byteArrayToRLEString+12Aj
		jmp	short loc_490
; ---------------------------------------------------------------------------

loc_487:				; CODE XREF: _byteArrayToRLEString+57j
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0Fh

loc_490:				; CODE XREF: _byteArrayToRLEString:loc_485j
		jmp	short loc_49B
; ---------------------------------------------------------------------------

loc_492:				; CODE XREF: _byteArrayToRLEString+36j
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0Fh

loc_49B:				; CODE XREF: _byteArrayToRLEString:loc_490j
		mov	eax, [ebp+arg_8]
		sub	eax, [ebp+var_8]
		sar	eax, 1
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN15
		call	@_RTC_CheckStackVars@8
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 114h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_byteArrayToRLEString endp

; ---------------------------------------------------------------------------
$LN15		dd 1			; DATA XREF: _byteArrayToRLEString+16Bo
		dd offset $LN14
$LN14		dd 0FFFFFFC8h, 2	; DATA XREF: .text:000004CCo
		dd offset $LN13		; "state"
$LN13		db 'state',0            ; DATA XREF: .text:000004D8o
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 4E4h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_appendEncodedByte proc	near		; CODE XREF: _byteArrayToRLEString+13Ep
					; _encodeRunByte+7Ap ...

var_CC		= byte ptr -0CCh
var_8		= word ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_10], 0
		jz	short loc_510
		mov	eax, [ebp+arg_10]
		cmp	dword ptr [eax], 0
		jle	short loc_514

loc_510:				; CODE XREF: _appendEncodedByte+22j
		xor	eax, eax
		jmp	short loc_57D
; ---------------------------------------------------------------------------

loc_514:				; CODE XREF: _appendEncodedByte+2Aj
		mov	eax, [ebp+arg_C]
		movzx	ecx, byte ptr [eax]
		test	ecx, ecx
		jz	short loc_56B
		mov	eax, [ebp+arg_C]
		movzx	ecx, byte ptr [eax+1]
		shl	ecx, 8
		movzx	edx, [ebp+arg_8]
		and	edx, 0FFh
		or	ecx, edx
		mov	[ebp+var_8], cx
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+arg_4]
		jnb	short loc_555
		mov	eax, [ebp+arg_0]
		mov	cx, [ebp+var_8]
		mov	[eax], cx
		mov	edx, [ebp+arg_0]
		add	edx, 2
		mov	[ebp+arg_0], edx
		jmp	short loc_55E
; ---------------------------------------------------------------------------

loc_555:				; CODE XREF: _appendEncodedByte+5Aj
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0Fh

loc_55E:				; CODE XREF: _appendEncodedByte+6Fj
		mov	eax, [ebp+arg_C]
		mov	byte ptr [eax],	0
		mov	eax, [ebp+arg_0]
		jmp	short loc_57D
; ---------------------------------------------------------------------------
		jmp	short loc_57D
; ---------------------------------------------------------------------------

loc_56B:				; CODE XREF: _appendEncodedByte+38j
		mov	eax, [ebp+arg_C]
		mov	byte ptr [eax],	1
		mov	eax, [ebp+arg_C]
		mov	cl, [ebp+arg_8]
		mov	[eax+1], cl
		mov	eax, [ebp+arg_0]

loc_57D:				; CODE XREF: _appendEncodedByte+2Ej
					; _appendEncodedByte+83j ...
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn
_appendEncodedByte endp

_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 584h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_encodeRunByte	proc near		; CODE XREF: _byteArrayToRLEString+E6p
					; _byteArrayToRLEString+119p

var_CC		= byte ptr -0CCh
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0CCh
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_CC]
		mov	ecx, 33h ; '3'
		mov	eax, 0CCCCCCCCh
		rep stosd
		cmp	[ebp+arg_14], 0
		jz	short loc_5B0
		mov	eax, [ebp+arg_14]
		cmp	dword ptr [eax], 0
		jle	short loc_5B7

loc_5B0:				; CODE XREF: _encodeRunByte+22j
		xor	eax, eax
		jmp	loc_6FD
; ---------------------------------------------------------------------------

loc_5B7:				; CODE XREF: _encodeRunByte+2Aj
		cmp	[ebp+arg_C], 4
		jge	short loc_630
		mov	[ebp+var_8], 0
		jmp	short loc_5CF
; ---------------------------------------------------------------------------

loc_5C6:				; CODE XREF: _encodeRunByte+A5j
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax

loc_5CF:				; CODE XREF: _encodeRunByte+40j
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_C]
		jge	short loc_62B
		movzx	eax, [ebp+arg_8]
		movzx	ecx, _ESCAPE_BYTE
		cmp	eax, ecx
		jnz	short loc_609
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+arg_10]
		push	ecx
		movzx	edx, _ESCAPE_BYTE
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_appendEncodedByte
		add	esp, 14h
		mov	[ebp+arg_0], eax

loc_609:				; CODE XREF: _encodeRunByte+60j
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+arg_10]
		push	ecx
		movzx	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_appendEncodedByte
		add	esp, 14h
		mov	[ebp+arg_0], eax
		jmp	short loc_5C6
; ---------------------------------------------------------------------------

loc_62B:				; CODE XREF: _encodeRunByte+51j
		jmp	loc_6FA
; ---------------------------------------------------------------------------

loc_630:				; CODE XREF: _encodeRunByte+37j
		movzx	eax, _ESCAPE_BYTE
		cmp	[ebp+arg_C], eax
		jnz	short loc_697
		movzx	eax, [ebp+arg_8]
		movzx	ecx, _ESCAPE_BYTE
		cmp	eax, ecx
		jnz	short loc_66E
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+arg_10]
		push	ecx
		movzx	edx, _ESCAPE_BYTE
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_appendEncodedByte
		add	esp, 14h
		mov	[ebp+arg_0], eax

loc_66E:				; CODE XREF: _encodeRunByte+C5j
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+arg_10]
		push	ecx
		movzx	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_appendEncodedByte
		add	esp, 14h
		mov	[ebp+arg_0], eax
		mov	eax, [ebp+arg_C]
		sub	eax, 1
		mov	[ebp+arg_C], eax

loc_697:				; CODE XREF: _encodeRunByte+B6j
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+arg_10]
		push	ecx
		movzx	edx, _ESCAPE_BYTE
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_appendEncodedByte
		add	esp, 14h
		mov	[ebp+arg_0], eax
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+arg_10]
		push	ecx
		movzx	edx, byte ptr [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_appendEncodedByte
		add	esp, 14h
		mov	[ebp+arg_0], eax
		mov	eax, [ebp+arg_14]
		push	eax
		mov	ecx, [ebp+arg_10]
		push	ecx
		movzx	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	_appendEncodedByte
		add	esp, 14h
		mov	[ebp+arg_0], eax

loc_6FA:				; CODE XREF: _encodeRunByte:loc_62Bj
		mov	eax, [ebp+arg_0]

loc_6FD:				; CODE XREF: _encodeRunByte+2Ej
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 0CCh
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_encodeRunByte	endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 714h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _rleStringToUCharArray
_rleStringToUCharArray proc near

var_114		= byte ptr -114h
var_50		= dword	ptr -50h
var_44		= word ptr -44h
var_38		= dword	ptr -38h
var_2C		= word ptr -2Ch
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 114h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_114]
		mov	ecx, 45h ; 'E'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	[ebp+var_14], 0
		mov	[ebp+var_20], 2
		cmp	[ebp+arg_10], 0
		jz	short loc_755
		mov	eax, [ebp+arg_10]
		cmp	dword ptr [eax], 0
		jle	short loc_75C

loc_755:				; CODE XREF: _rleStringToUCharArray+37j
		xor	eax, eax
		jmp	loc_8B7
; ---------------------------------------------------------------------------

loc_75C:				; CODE XREF: _rleStringToUCharArray+3Fj
		cmp	[ebp+arg_4], 0FFFFFFFFh
		jnz	short loc_771
		mov	eax, [ebp+arg_0]
		push	eax
		call	_u_strlen_56
		add	esp, 4
		mov	[ebp+arg_4], eax

loc_771:				; CODE XREF: _rleStringToUCharArray+4Cj
		cmp	[ebp+arg_4], 2
		jg	short loc_781
		mov	eax, 2
		jmp	loc_8B7
; ---------------------------------------------------------------------------

loc_781:				; CODE XREF: _rleStringToUCharArray+61j
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		shl	ecx, 10h
		mov	edx, [ebp+arg_0]
		movzx	eax, word ptr [edx+2]
		or	ecx, eax
		mov	[ebp+var_8], ecx
		cmp	[ebp+arg_8], 0
		jnz	short loc_7A4
		mov	eax, [ebp+var_8]
		jmp	loc_8B7
; ---------------------------------------------------------------------------

loc_7A4:				; CODE XREF: _rleStringToUCharArray+86j
		mov	eax, [ebp+arg_C]
		cmp	eax, [ebp+var_8]
		jge	short loc_7BD
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0Fh
		mov	eax, [ebp+var_8]
		jmp	loc_8B7
; ---------------------------------------------------------------------------

loc_7BD:				; CODE XREF: _rleStringToUCharArray+96j
		jmp	short loc_7C8
; ---------------------------------------------------------------------------

loc_7BF:				; CODE XREF: _rleStringToUCharArray:loc_89Ej
		mov	eax, [ebp+var_20]
		add	eax, 1
		mov	[ebp+var_20], eax

loc_7C8:				; CODE XREF: _rleStringToUCharArray:loc_7BDj
		mov	eax, [ebp+var_20]
		cmp	eax, [ebp+arg_4]
		jge	loc_8A3
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+arg_0]
		mov	dx, [ecx+eax*2]
		mov	[ebp+var_2C], dx
		movzx	eax, [ebp+var_2C]
		movzx	ecx, _ESCAPE
		cmp	eax, ecx
		jnz	loc_887
		mov	eax, [ebp+var_20]
		add	eax, 1
		mov	[ebp+var_20], eax
		mov	ecx, [ebp+var_20]
		mov	edx, [ebp+arg_0]
		mov	ax, [edx+ecx*2]
		mov	[ebp+var_2C], ax
		movzx	eax, [ebp+var_2C]
		movzx	ecx, _ESCAPE
		cmp	eax, ecx
		jnz	short loc_834
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_8]
		mov	dx, [ebp+var_2C]
		mov	[ecx+eax*2], dx
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		jmp	short loc_885
; ---------------------------------------------------------------------------

loc_834:				; CODE XREF: _rleStringToUCharArray+105j
		movzx	eax, [ebp+var_2C]
		mov	[ebp+var_38], eax
		mov	eax, [ebp+var_20]
		add	eax, 1
		mov	[ebp+var_20], eax
		mov	ecx, [ebp+var_20]
		mov	edx, [ebp+arg_0]
		mov	ax, [edx+ecx*2]
		mov	[ebp+var_44], ax
		mov	[ebp+var_50], 0
		jmp	short loc_864
; ---------------------------------------------------------------------------

loc_85B:				; CODE XREF: _rleStringToUCharArray+16Fj
		mov	eax, [ebp+var_50]
		add	eax, 1
		mov	[ebp+var_50], eax

loc_864:				; CODE XREF: _rleStringToUCharArray+145j
		mov	eax, [ebp+var_50]
		cmp	eax, [ebp+var_38]
		jge	short loc_885
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_8]
		mov	dx, [ebp+var_44]
		mov	[ecx+eax*2], dx
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax
		jmp	short loc_85B
; ---------------------------------------------------------------------------

loc_885:				; CODE XREF: _rleStringToUCharArray+11Ej
					; _rleStringToUCharArray+156j
		jmp	short loc_89E
; ---------------------------------------------------------------------------

loc_887:				; CODE XREF: _rleStringToUCharArray+DBj
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_8]
		mov	dx, [ebp+var_2C]
		mov	[ecx+eax*2], dx
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	[ebp+var_14], eax

loc_89E:				; CODE XREF: _rleStringToUCharArray:loc_885j
		jmp	loc_7BF
; ---------------------------------------------------------------------------

loc_8A3:				; CODE XREF: _rleStringToUCharArray+BAj
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_8]
		jz	short loc_8B4
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 5

loc_8B4:				; CODE XREF: _rleStringToUCharArray+195j
		mov	eax, [ebp+var_8]

loc_8B7:				; CODE XREF: _rleStringToUCharArray+43j
					; _rleStringToUCharArray+68j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 114h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_rleStringToUCharArray endp

; ---------------------------------------------------------------------------
		align 4
_text		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 8CCh
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _rleStringToByteArray
_rleStringToByteArray proc near

var_130		= dword	ptr -130h
var_68		= dword	ptr -68h
var_59		= byte ptr -59h
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= word ptr -20h
var_11		= byte ptr -11h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 130h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_130]
		mov	ecx, 4Ch ; 'L'
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	[ebp+var_8], 0
		mov	[ebp+var_11], 1
		xor	eax, eax
		mov	[ebp+var_20], ax
		mov	[ebp+var_2C], 0
		mov	[ebp+var_38], 0
		mov	[ebp+var_44], 2
		mov	[ebp+var_50], 0
		cmp	[ebp+arg_10], 0
		jz	short loc_925
		mov	eax, [ebp+arg_10]
		cmp	dword ptr [eax], 0
		jle	short loc_92C

loc_925:				; CODE XREF: _rleStringToByteArray+4Fj
		xor	eax, eax
		jmp	loc_AF1
; ---------------------------------------------------------------------------

loc_92C:				; CODE XREF: _rleStringToByteArray+57j
		cmp	[ebp+arg_4], 0FFFFFFFFh
		jnz	short loc_941
		mov	eax, [ebp+arg_0]
		push	eax
		call	_u_strlen_56
		add	esp, 4
		mov	[ebp+arg_4], eax

loc_941:				; CODE XREF: _rleStringToByteArray+64j
		cmp	[ebp+arg_4], 2
		jg	short loc_951
		mov	eax, 2
		jmp	loc_AF1
; ---------------------------------------------------------------------------

loc_951:				; CODE XREF: _rleStringToByteArray+79j
		mov	eax, [ebp+arg_0]
		movzx	ecx, word ptr [eax]
		shl	ecx, 10h
		mov	edx, [ebp+arg_0]
		movzx	eax, word ptr [edx+2]
		or	ecx, eax
		mov	[ebp+var_8], ecx
		cmp	[ebp+arg_8], 0
		jnz	short loc_974
		mov	eax, [ebp+var_8]
		jmp	loc_AF1
; ---------------------------------------------------------------------------

loc_974:				; CODE XREF: _rleStringToByteArray+9Ej
		mov	eax, [ebp+arg_C]
		cmp	eax, [ebp+var_8]
		jge	short loc_98D
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0Fh
		mov	eax, [ebp+var_8]
		jmp	loc_AF1
; ---------------------------------------------------------------------------

loc_98D:				; CODE XREF: _rleStringToByteArray+AEj
					; _rleStringToByteArray:loc_AC0j
		mov	eax, [ebp+var_50]
		cmp	eax, [ebp+arg_C]
		jge	loc_AC5
		movsx	eax, [ebp+var_11]
		test	eax, eax
		jz	short loc_9C8
		mov	eax, [ebp+var_44]
		mov	ecx, [ebp+arg_0]
		mov	dx, [ecx+eax*2]
		mov	[ebp+var_20], dx
		mov	eax, [ebp+var_44]
		add	eax, 1
		mov	[ebp+var_44], eax
		movzx	eax, [ebp+var_20]
		sar	eax, 8
		mov	[ebp+var_59], al
		mov	[ebp+var_11], 0
		jmp	short loc_9D8
; ---------------------------------------------------------------------------

loc_9C8:				; CODE XREF: _rleStringToByteArray+D3j
		movzx	eax, [ebp+var_20]
		and	eax, 0FFh
		mov	[ebp+var_59], al
		mov	[ebp+var_11], 1

loc_9D8:				; CODE XREF: _rleStringToByteArray+FAj
		mov	eax, [ebp+var_2C]
		mov	[ebp+var_130], eax
		cmp	[ebp+var_130], 0
		jz	short loc_A01
		cmp	[ebp+var_130], 1
		jz	short loc_A32
		cmp	[ebp+var_130], 2
		jz	short loc_A71
		jmp	loc_AC0
; ---------------------------------------------------------------------------

loc_A01:				; CODE XREF: _rleStringToByteArray+11Cj
		movzx	eax, [ebp+var_59]
		movzx	ecx, _ESCAPE_BYTE
		cmp	eax, ecx
		jnz	short loc_A19
		mov	[ebp+var_2C], 1
		jmp	short loc_A2D
; ---------------------------------------------------------------------------

loc_A19:				; CODE XREF: _rleStringToByteArray+142j
		mov	eax, [ebp+arg_8]
		add	eax, [ebp+var_50]
		mov	cl, [ebp+var_59]
		mov	[eax], cl
		mov	edx, [ebp+var_50]
		add	edx, 1
		mov	[ebp+var_50], edx

loc_A2D:				; CODE XREF: _rleStringToByteArray+14Bj
		jmp	loc_AC0
; ---------------------------------------------------------------------------

loc_A32:				; CODE XREF: _rleStringToByteArray+125j
		movzx	eax, [ebp+var_59]
		movzx	ecx, _ESCAPE_BYTE
		cmp	eax, ecx
		jnz	short loc_A61
		mov	eax, [ebp+arg_8]
		add	eax, [ebp+var_50]
		mov	cl, _ESCAPE_BYTE
		mov	[eax], cl
		mov	edx, [ebp+var_50]
		add	edx, 1
		mov	[ebp+var_50], edx
		mov	[ebp+var_2C], 0
		jmp	short loc_A6F
; ---------------------------------------------------------------------------

loc_A61:				; CODE XREF: _rleStringToByteArray+173j
		movzx	eax, [ebp+var_59]
		mov	[ebp+var_38], eax
		mov	[ebp+var_2C], 2

loc_A6F:				; CODE XREF: _rleStringToByteArray+193j
		jmp	short loc_AC0
; ---------------------------------------------------------------------------

loc_A71:				; CODE XREF: _rleStringToByteArray+12Ej
		mov	[ebp+var_68], 0
		jmp	short loc_A83
; ---------------------------------------------------------------------------

loc_A7A:				; CODE XREF: _rleStringToByteArray:loc_AB7j
		mov	eax, [ebp+var_68]
		add	eax, 1
		mov	[ebp+var_68], eax

loc_A83:				; CODE XREF: _rleStringToByteArray+1ACj
		mov	eax, [ebp+var_68]
		cmp	eax, [ebp+var_38]
		jge	short loc_AB9
		mov	eax, [ebp+var_50]
		cmp	eax, [ebp+arg_C]
		jge	short loc_AA9
		mov	eax, [ebp+arg_8]
		add	eax, [ebp+var_50]
		mov	cl, [ebp+var_59]
		mov	[eax], cl
		mov	edx, [ebp+var_50]
		add	edx, 1
		mov	[ebp+var_50], edx
		jmp	short loc_AB7
; ---------------------------------------------------------------------------

loc_AA9:				; CODE XREF: _rleStringToByteArray+1C5j
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0Fh
		mov	eax, [ebp+var_50]
		jmp	short loc_AF1
; ---------------------------------------------------------------------------

loc_AB7:				; CODE XREF: _rleStringToByteArray+1DBj
		jmp	short loc_A7A
; ---------------------------------------------------------------------------

loc_AB9:				; CODE XREF: _rleStringToByteArray+1BDj
		mov	[ebp+var_2C], 0

loc_AC0:				; CODE XREF: _rleStringToByteArray+130j
					; _rleStringToByteArray:loc_A2Dj ...
		jmp	loc_98D
; ---------------------------------------------------------------------------

loc_AC5:				; CODE XREF: _rleStringToByteArray+C7j
		cmp	[ebp+var_2C], 0
		jz	short loc_AD8
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 5
		xor	eax, eax
		jmp	short loc_AF1
; ---------------------------------------------------------------------------

loc_AD8:				; CODE XREF: _rleStringToByteArray+1FDj
		mov	eax, [ebp+var_44]
		cmp	eax, [ebp+arg_4]
		jz	short loc_AEE
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 5
		mov	eax, [ebp+var_50]
		jmp	short loc_AF1
; ---------------------------------------------------------------------------

loc_AEE:				; CODE XREF: _rleStringToByteArray+212j
		mov	eax, [ebp+var_50]

loc_AF1:				; CODE XREF: _rleStringToByteArray+5Bj
					; _rleStringToByteArray+80j ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 130h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_rleStringToByteArray endp

_text		ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __RTC_CheckEsp:near ; CODE XREF: _usArrayToRLEString+143p
					; _byteArrayToRLEString+183p ...
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn @_RTC_CheckStackVars@8:near ; CODE XREF: _byteArrayToRLEString+171p
		extrn _u_strlen_56:near	; CODE XREF: _rleStringToUCharArray+52p
					; _rleStringToByteArray+6Ap


		end
