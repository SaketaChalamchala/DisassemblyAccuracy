;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	4FF300B98C536708496760F8B36B19C5
; Input	CRC32 :	83B55D63

; File Name   :	D:\compspace\objfiles\firefox\gfx2d\DrawTargetDual.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; must resolve:	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
; must resolve:	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
; must resolve:	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
; must resolve:	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
; must resolve:	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
; char _SG70167[]
$SG70167	db 'Failure to allocate a similar DrawTargetDual. Size: ',0
					; DATA XREF: mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::SurfaceFormat)+14Ao
					; mozilla::gfx::DrawTarget::PopLayer(void)+15w	...
		align 4
$SG36821	db 'Assertion failure: %s, at %s:%d',0Ah,0
					; DATA XREF: .xdata$x:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5o
					; .xdata$x:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4o ...
		align 4
$SG36827	db 'Hit MOZ_CRASH(%s) at %s:%d',0Ah,0 ; DATA XREF: .rdata:0000932Co
					; .rdata$r:00009550o
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 78h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	mozilla::gfx::DrawTargetDual::DrawSurface(struct mozilla::gfx::SourceSurface *,	int, int, int, int)
		public ?DrawSurface@DrawTargetDual@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@1ABUDrawSurfaceOptions@23@ABUDrawOptions@23@@Z
?DrawSurface@DrawTargetDual@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@1ABUDrawSurfaceOptions@23@ABUDrawOptions@23@@Z proc near
					; DATA XREF: .rdata:00009248o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; struct mozilla::gfx::SourceSurface *
		lea	ecx, [ebp+var_10] ; this
		call	??0DualSurface@gfx@mozilla@@QAE@PAVSourceSurface@12@@Z ; mozilla::gfx::DualSurface::DualSurface(mozilla::gfx::SourceSurface *)
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_18], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+var_10]
		push	edx
		mov	eax, [ebp+var_18]
		mov	edx, [eax]
		mov	ecx, [ebp+var_18]
		mov	eax, [edx+2Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_1C], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+var_C]
		push	edx
		mov	eax, [ebp+var_1C]
		mov	edx, [eax]
		mov	ecx, [ebp+var_1C]
		mov	eax, [edx+2Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_4
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	esi
		add	esp, 1Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	14h
?DrawSurface@DrawTargetDual@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@1ABUDrawSurfaceOptions@23@ABUDrawOptions@23@@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN5_4		dd 1			; DATA XREF: mozilla::gfx::DrawTargetDual::DrawSurface(mozilla::gfx::SourceSurface *,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::DrawSurfaceOptions const	&,mozilla::gfx::DrawOptions const &)+A4o
		dd offset $LN4_2
$LN4_2		dd 0FFFFFFF0h, 8	; DATA XREF: .text$mn:00000140o
		dd offset $LN3_2	; "surface"
$LN3_2		db 'surface',0          ; DATA XREF: .text$mn:0000014Co

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	mozilla::gfx::DrawTargetDual::MaskSurface(struct mozilla::gfx::Pattern *, struct mozilla::gfx::SourceSurface *,	int, int, int)
		public ?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z
?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z proc near
					; DATA XREF: .rdata:0000927Co

var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_8C		= byte ptr -8Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 9Ch
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_A8]
		mov	ecx, 27h ; '''
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; struct mozilla::gfx::Pattern *
		lea	ecx, [ebp+var_8C] ; this
		call	??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z ; mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern	const &)
		mov	[ebp+var_4], 0
		mov	ecx, [ebp+arg_4]
		push	ecx		; struct mozilla::gfx::SourceSurface *
		lea	ecx, [ebp+var_9C] ; this
		call	??0DualSurface@gfx@mozilla@@QAE@PAVSourceSurface@12@@Z ; mozilla::gfx::DualSurface::DualSurface(mozilla::gfx::SourceSurface *)
		mov	ecx, [ebp+var_14]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_A4], eax
		mov	esi, esp
		mov	edx, [ebp+arg_10]
		push	edx
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+var_9C]
		push	edx
		mov	eax, [ebp+var_24]
		push	eax
		mov	ecx, [ebp+var_A4]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_A4]
		mov	eax, [edx+60h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_A8], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+var_98]
		push	ecx
		mov	edx, [ebp+var_20]
		push	edx
		mov	eax, [ebp+var_A8]
		mov	edx, [eax]
		mov	ecx, [ebp+var_A8]
		mov	eax, [edx+60h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_8C] ; this
		call	??1DualPattern@gfx@mozilla@@QAE@XZ ; mozilla::gfx::DualPattern::~DualPattern(void)
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN8_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 0A8h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	14h
?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN8_0		dd 2			; DATA XREF: mozilla::gfx::DrawTargetDual::MaskSurface(mozilla::gfx::Pattern const &,mozilla::gfx::SourceSurface *,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::DrawOptions	const &)+107o
		dd offset $LN7_0
$LN7_0		dd 0FFFFFF74h, 74h	; DATA XREF: .text$mn:0000029Co
		dd offset $LN4_3	; "source"
		dd 0FFFFFF64h, 8
		dd offset $LN5_5	; "mask"
$LN5_5		db 'mask',0             ; DATA XREF: .text$mn:000002B4o
$LN4_3		db 'source',0           ; DATA XREF: .text$mn:000002A8o
		align 8

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	mozilla::gfx::DrawTargetDual::DrawSurfaceWithShadow(struct mozilla::gfx::SourceSurface *, int, int, int, int, char)
		public ?DrawSurfaceWithShadow@DrawTargetDual@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUColor@23@1MW4CompositionOp@23@@Z
?DrawSurfaceWithShadow@DrawTargetDual@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUColor@23@1MW4CompositionOp@23@@Z proc near
					; DATA XREF: .rdata:00009250o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= byte ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; struct mozilla::gfx::SourceSurface *
		lea	ecx, [ebp+var_10] ; this
		call	??0DualSurface@gfx@mozilla@@QAE@PAVSourceSurface@12@@Z ; mozilla::gfx::DualSurface::DualSurface(mozilla::gfx::SourceSurface *)
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_18], eax
		mov	esi, esp
		movzx	ecx, [ebp+arg_14]
		push	ecx
		push	ecx
		movss	xmm0, [ebp+arg_10]
		movss	[esp+28h+var_28], xmm0
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+var_10]
		push	edx
		mov	eax, [ebp+var_18]
		mov	edx, [eax]
		mov	ecx, [ebp+var_18]
		mov	eax, [edx+34h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_1C], eax
		mov	esi, esp
		movzx	ecx, [ebp+arg_14]
		push	ecx
		push	ecx
		movss	xmm0, [ebp+arg_10]
		movss	[esp+2Ch+var_2C], xmm0
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+var_C]
		push	edx
		mov	eax, [ebp+var_1C]
		mov	edx, [eax]
		mov	ecx, [ebp+var_1C]
		mov	eax, [edx+34h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_6
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	esi
		add	esp, 1Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	18h
?DrawSurfaceWithShadow@DrawTargetDual@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUColor@23@1MW4CompositionOp@23@@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN5_6		dd 1			; DATA XREF: mozilla::gfx::DrawTargetDual::DrawSurfaceWithShadow(mozilla::gfx::SourceSurface *,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float> const	&,mozilla::gfx::Color const &,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float> const &,float,mozilla::gfx::CompositionOp)+BCo
		dd offset $LN4_4
$LN4_4		dd 0FFFFFFF0h, 8	; DATA XREF: .text$mn:000003A8o
		dd offset $LN3_3	; "surface"
$LN3_3		db 'surface',0          ; DATA XREF: .text$mn:000003B4o
		db 8 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	mozilla::gfx::DrawTargetDual::CopySurface(struct mozilla::gfx::SourceSurface *,	int, int)
		public ?CopySurface@DrawTargetDual@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z
?CopySurface@DrawTargetDual@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z proc near
					; DATA XREF: .rdata:00009258o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; struct mozilla::gfx::SourceSurface *
		lea	ecx, [ebp+var_10] ; this
		call	??0DualSurface@gfx@mozilla@@QAE@PAVSourceSurface@12@@Z ; mozilla::gfx::DualSurface::DualSurface(mozilla::gfx::SourceSurface *)
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_18], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+var_10]
		push	eax
		mov	ecx, [ebp+var_18]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_18]
		mov	eax, [edx+3Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_1C], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+var_1C]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_1C]
		mov	eax, [edx+3Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_7
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	esi
		add	esp, 1Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?CopySurface@DrawTargetDual@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN5_7		dd 1			; DATA XREF: mozilla::gfx::DrawTargetDual::CopySurface(mozilla::gfx::SourceSurface *,mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const &,mozilla::gfx::IntPointTyped<mozilla::gfx::UnknownUnits> const &)+94o
		dd offset $LN4_5
$LN4_5		dd 0FFFFFFF0h, 8	; DATA XREF: .text$mn:00000480o
		dd offset $LN3_4	; "surface"
$LN3_4		db 'surface',0          ; DATA XREF: .text$mn:0000048Co

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	mozilla::gfx::DrawTargetDual::FillRect(int, struct mozilla::gfx::Pattern *, int)
		public ?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z
?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z proc near
					; DATA XREF: .rdata:00009260o

var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_8C		= byte ptr -8Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 8Ch
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_98]
		mov	ecx, 23h ; '#'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_4]
		push	eax		; struct mozilla::gfx::Pattern *
		lea	ecx, [ebp+var_8C] ; this
		call	??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z ; mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern	const &)
		mov	[ebp+var_4], 0
		mov	ecx, [ebp+var_14]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_94], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+var_24]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_94]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_94]
		mov	eax, [edx+44h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_98], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+var_20]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_98]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_98]
		mov	eax, [edx+44h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_8C] ; this
		call	??1DualPattern@gfx@mozilla@@QAE@XZ ; mozilla::gfx::DualPattern::~DualPattern(void)
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7_1
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 98h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN7_1		dd 1			; DATA XREF: mozilla::gfx::DrawTargetDual::FillRect(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::Pattern const &,mozilla::gfx::DrawOptions const &)+E2o
		dd offset $LN6
$LN6		dd 0FFFFFF74h, 74h	; DATA XREF: .text$mn:000005B8o
		dd offset $LN4_6	; "pattern"
$LN4_6		db 'pattern',0          ; DATA XREF: .text$mn:000005C4o
		db 8 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	mozilla::gfx::DrawTargetDual::StrokeRect(int, struct mozilla::gfx::Pattern *, int, int)
		public ?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z
?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z proc near
					; DATA XREF: .rdata:00009264o

var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_8C		= byte ptr -8Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 8Ch
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_98]
		mov	ecx, 23h ; '#'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_4]
		push	eax		; struct mozilla::gfx::Pattern *
		lea	ecx, [ebp+var_8C] ; this
		call	??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z ; mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern	const &)
		mov	[ebp+var_4], 0
		mov	ecx, [ebp+var_14]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_94], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+var_24]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_94]
		mov	eax, [edx]
		mov	ecx, [ebp+var_94]
		mov	edx, [eax+48h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_98], eax
		mov	esi, esp
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+var_20]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_98]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_98]
		mov	eax, [edx+48h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_8C] ; this
		call	??1DualPattern@gfx@mozilla@@QAE@XZ ; mozilla::gfx::DualPattern::~DualPattern(void)
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7_2
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 98h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	10h
?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN7_2		dd 1			; DATA XREF: mozilla::gfx::DrawTargetDual::StrokeRect(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float>	const &,mozilla::gfx::Pattern const &,mozilla::gfx::StrokeOptions const	&,mozilla::gfx::DrawOptions const &)+EAo
		dd offset $LN6_0
$LN6_0		dd 0FFFFFF74h, 74h	; DATA XREF: .text$mn:00000700o
		dd offset $LN4_7	; "pattern"
$LN4_7		db 'pattern',0          ; DATA XREF: .text$mn:0000070Co

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	mozilla::gfx::DrawTargetDual::StrokeLine(int, int, struct mozilla::gfx::Pattern	*, int,	int)
		public ?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z
?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z proc near
					; DATA XREF: .rdata:00009268o

var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_8C		= byte ptr -8Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 8Ch
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_98]
		mov	ecx, 23h ; '#'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_8]
		push	eax		; struct mozilla::gfx::Pattern *
		lea	ecx, [ebp+var_8C] ; this
		call	??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z ; mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern	const &)
		mov	[ebp+var_4], 0
		mov	ecx, [ebp+var_14]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_94], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+var_24]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_94]
		mov	edx, [eax]
		mov	ecx, [ebp+var_94]
		mov	eax, [edx+4Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_98], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+var_20]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_98]
		mov	edx, [eax]
		mov	ecx, [ebp+var_98]
		mov	eax, [edx+4Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_8C] ; this
		call	??1DualPattern@gfx@mozilla@@QAE@XZ ; mozilla::gfx::DualPattern::~DualPattern(void)
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7_3
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 98h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	14h
?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN7_3		dd 1			; DATA XREF: mozilla::gfx::DrawTargetDual::StrokeLine(mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::Pattern const	&,mozilla::gfx::StrokeOptions const &,mozilla::gfx::DrawOptions	const &)+F2o
		dd offset $LN6_1
$LN6_1		dd 0FFFFFF74h, 74h	; DATA XREF: .text$mn:00000848o
		dd offset $LN4_8	; "pattern"
$LN4_8		db 'pattern',0          ; DATA XREF: .text$mn:00000854o
		db 8 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall mozilla::gfx::DrawTargetDual::Stroke(mozilla::gfx::DrawTargetDual *this, const struct	Path *,	const struct mozilla::gfx::Pattern *, const struct mozilla::gfx::StrokeOptions *, const	struct mozilla::gfx::DrawOptions *)
		public ?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z
?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z proc near
					; DATA XREF: .rdata:0000926Co

var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_8C		= byte ptr -8Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 8Ch
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_98]
		mov	ecx, 23h ; '#'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_4]
		push	eax		; struct mozilla::gfx::Pattern *
		lea	ecx, [ebp+var_8C] ; this
		call	??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z ; mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern	const &)
		mov	[ebp+var_4], 0
		mov	ecx, [ebp+var_14]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_94], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+var_24]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_94]
		mov	eax, [edx]
		mov	ecx, [ebp+var_94]
		mov	edx, [eax+50h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_98], eax
		mov	esi, esp
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+var_20]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_98]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_98]
		mov	eax, [edx+50h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_8C] ; this
		call	??1DualPattern@gfx@mozilla@@QAE@XZ ; mozilla::gfx::DualPattern::~DualPattern(void)
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7_4
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 98h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	10h
?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN7_4		dd 1			; DATA XREF: mozilla::gfx::DrawTargetDual::Stroke(mozilla::gfx::Path const *,mozilla::gfx::Pattern const &,mozilla::gfx::StrokeOptions const &,mozilla::gfx::DrawOptions const &)+EAo
		dd offset $LN6_2
$LN6_2		dd 0FFFFFF74h, 74h	; DATA XREF: .text$mn:00000990o
		dd offset $LN4_9	; "pattern"
$LN4_9		db 'pattern',0          ; DATA XREF: .text$mn:0000099Co

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall mozilla::gfx::DrawTargetDual::Fill(mozilla::gfx::DrawTargetDual *this, const struct Path *, const struct mozilla::gfx::Pattern *, const struct mozilla::gfx::DrawOptions *)
		public ?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z
?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z proc near
					; DATA XREF: .rdata:00009270o

var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_8C		= byte ptr -8Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 8Ch
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_98]
		mov	ecx, 23h ; '#'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_4]
		push	eax		; struct mozilla::gfx::Pattern *
		lea	ecx, [ebp+var_8C] ; this
		call	??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z ; mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern	const &)
		mov	[ebp+var_4], 0
		mov	ecx, [ebp+var_14]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_94], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+var_24]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_94]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_94]
		mov	eax, [edx+54h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_98], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+var_20]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_98]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_98]
		mov	eax, [edx+54h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_8C] ; this
		call	??1DualPattern@gfx@mozilla@@QAE@XZ ; mozilla::gfx::DualPattern::~DualPattern(void)
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7_5
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 98h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN7_5		dd 1			; DATA XREF: mozilla::gfx::DrawTargetDual::Fill(mozilla::gfx::Path const *,mozilla::gfx::Pattern const &,mozilla::gfx::DrawOptions const &)+E2o
		dd offset $LN6_3
$LN6_3		dd 0FFFFFF74h, 74h	; DATA XREF: .text$mn:00000AC8o
		dd offset $LN4_10	; "pattern"
$LN4_10		db 'pattern',0          ; DATA XREF: .text$mn:00000AD4o
		db 8 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall mozilla::gfx::DrawTargetDual::FillGlyphs(mozilla::gfx::DrawTargetDual	*this, struct mozilla::gfx::ScaledFont *, const	struct mozilla::gfx::GlyphBuffer *, const struct mozilla::gfx::Pattern *, const	struct mozilla::gfx::DrawOptions *, const struct mozilla::gfx::GlyphRenderingOptions *)
		public ?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z
?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z proc near
					; DATA XREF: .rdata:00009274o

var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_8C		= byte ptr -8Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 8Ch
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_98]
		mov	ecx, 23h ; '#'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_8]
		push	eax		; struct mozilla::gfx::Pattern *
		lea	ecx, [ebp+var_8C] ; this
		call	??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z ; mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern	const &)
		mov	[ebp+var_4], 0
		mov	ecx, [ebp+var_14]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_94], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+var_24]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_94]
		mov	edx, [eax]
		mov	ecx, [ebp+var_94]
		mov	eax, [edx+58h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_98], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_10]
		push	ecx
		mov	edx, [ebp+arg_C]
		push	edx
		mov	eax, [ebp+var_20]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_98]
		mov	edx, [eax]
		mov	ecx, [ebp+var_98]
		mov	eax, [edx+58h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_8C] ; this
		call	??1DualPattern@gfx@mozilla@@QAE@XZ ; mozilla::gfx::DualPattern::~DualPattern(void)
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7_6
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 98h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	14h
?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN7_6		dd 1			; DATA XREF: mozilla::gfx::DrawTargetDual::FillGlyphs(mozilla::gfx::ScaledFont *,mozilla::gfx::GlyphBuffer const &,mozilla::gfx::Pattern const &,mozilla::gfx::DrawOptions const &,mozilla::gfx::GlyphRenderingOptions const *)+F2o
		dd offset $LN6_4
$LN6_4		dd 0FFFFFF74h, 74h	; DATA XREF: .text$mn:00000C18o
		dd offset $LN4_11	; "pattern"
$LN4_11		db 'pattern',0          ; DATA XREF: .text$mn:00000C24o
		db 8 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall mozilla::gfx::DrawTargetDual::Mask(mozilla::gfx::DrawTargetDual *this, const struct mozilla::gfx::Pattern *, const struct mozilla::gfx::Pattern *, const struct mozilla::gfx::DrawOptions *)
		public ?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z
?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z proc near
					; DATA XREF: .rdata:00009278o

var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_108		= byte ptr -108h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_8C		= byte ptr -8Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 108h
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_114]
		mov	ecx, 42h ; 'B'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; struct mozilla::gfx::Pattern *
		lea	ecx, [ebp+var_8C] ; this
		call	??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z ; mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern	const &)
		mov	[ebp+var_4], 0
		mov	ecx, [ebp+arg_4]
		push	ecx		; struct mozilla::gfx::Pattern *
		lea	ecx, [ebp+var_108] ; this
		call	??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z ; mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern	const &)
		mov	byte ptr [ebp+var_4], 1
		mov	ecx, [ebp+var_14]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_110], eax
		mov	esi, esp
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+var_A0]
		push	eax
		mov	ecx, [ebp+var_24]
		push	ecx
		mov	edx, [ebp+var_110]
		mov	eax, [edx]
		mov	ecx, [ebp+var_110]
		mov	edx, [eax+5Ch]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_14]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_114], eax
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+var_9C]
		push	ecx
		mov	edx, [ebp+var_20]
		push	edx
		mov	eax, [ebp+var_114]
		mov	edx, [eax]
		mov	ecx, [ebp+var_114]
		mov	eax, [edx+5Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	byte ptr [ebp+var_4], 0
		lea	ecx, [ebp+var_108] ; this
		call	??1DualPattern@gfx@mozilla@@QAE@XZ ; mozilla::gfx::DualPattern::~DualPattern(void)
		mov	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_8C] ; this
		call	??1DualPattern@gfx@mozilla@@QAE@XZ ; mozilla::gfx::DualPattern::~DualPattern(void)
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN9
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 114h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN9		dd 2			; DATA XREF: mozilla::gfx::DrawTargetDual::Mask(mozilla::gfx::Pattern const &,mozilla::gfx::Pattern const &,mozilla::gfx::DrawOptions const &)+10Ao
		dd offset $LN8_1
$LN8_1		dd 0FFFFFF74h, 74h	; DATA XREF: .text$mn:00000D80o
		dd offset $LN5_8	; "source"
		dd 0FFFFFEF8h, 74h
		dd offset $LN6_5	; "mask"
$LN6_5		db 'mask',0             ; DATA XREF: .text$mn:00000D98o
$LN5_8		db 'source',0           ; DATA XREF: .text$mn:00000D8Co

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	mozilla::gfx::DrawTargetDual::PushLayer(char, int, struct mozilla::gfx::SourceSurface *, int, int, char)
		public ?PushLayer@DrawTargetDual@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z
?PushLayer@DrawTargetDual@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z proc near
					; DATA XREF: .rdata:0000928Co

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= byte ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= byte ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_8]
		push	eax		; struct mozilla::gfx::SourceSurface *
		lea	ecx, [ebp+var_10] ; this
		call	??0DualSurface@gfx@mozilla@@QAE@PAVSourceSurface@12@@Z ; mozilla::gfx::DualSurface::DualSurface(mozilla::gfx::SourceSurface *)
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_18], eax
		mov	esi, esp
		movzx	ecx, [ebp+arg_14]
		push	ecx
		mov	edx, [ebp+arg_10]
		push	edx
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+var_10]
		push	ecx
		push	ecx
		movss	xmm0, [ebp+arg_4]
		movss	[esp+34h+var_34], xmm0
		movzx	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_18]
		mov	edx, [eax]
		mov	ecx, [ebp+var_18]
		mov	eax, [edx+70h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_1C], eax
		mov	esi, esp
		movzx	ecx, [ebp+arg_14]
		push	ecx
		mov	edx, [ebp+arg_10]
		push	edx
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+var_C]
		push	ecx
		push	ecx
		movss	xmm0, [ebp+arg_4]
		movss	[esp+38h+var_38], xmm0
		movzx	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_1C]
		mov	edx, [eax]
		mov	ecx, [ebp+var_1C]
		mov	eax, [edx+70h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_9
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	esi
		add	esp, 1Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	18h
?PushLayer@DrawTargetDual@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z endp

; ---------------------------------------------------------------------------
$LN5_9		dd 1			; DATA XREF: mozilla::gfx::DrawTargetDual::PushLayer(bool,float,mozilla::gfx::SourceSurface *,mozilla::gfx::Matrix const &,mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const	&,bool)+BEo
		dd offset $LN4_12
$LN4_12		dd 0FFFFFFF0h, 8	; DATA XREF: .text$mn:00000E88o
		dd offset $LN3_5	; "mask"
$LN3_5		db 'mask',0             ; DATA XREF: .text$mn:00000E94o
		db 0Bh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual struct already_AddRefed<class	mozilla::gfx::DrawTarget> __thiscall mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(struct mozilla::gfx::IntSizeTyped<struct mozilla::gfx::UnknownUnits>	const &, enum  mozilla::gfx::SurfaceFormat)const
		public ?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z
?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z	proc near
					; DATA XREF: .rdata:000092A0o

var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= byte ptr -0F4h
var_F0		= byte ptr -0F0h
var_30		= byte ptr -30h
var_2C		= byte ptr -2Ch
var_24		= byte ptr -24h
var_18		= byte ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 114h
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_120]
		mov	ecx, 45h ; 'E'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	[ebp+var_F8], 0
		mov	ecx, [ebp+var_10]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_FC], eax
		mov	esi, esp
		movzx	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		lea	edx, [ebp+var_2C]
		push	edx
		mov	eax, [ebp+var_FC]
		mov	edx, [eax]
		mov	ecx, [ebp+var_FC]
		mov	eax, [edx+84h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_100], eax
		mov	ecx, [ebp+var_100]
		mov	[ebp+var_104], ecx
		mov	[ebp+var_4], 1
		mov	edx, [ebp+var_104]
		push	edx
		lea	ecx, [ebp+var_18]
		call	??$?0VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@@Z ; RefPtr<mozilla::gfx::DrawTarget>::RefPtr<mozilla::gfx::DrawTarget>(already_AddRefed<mozilla::gfx::DrawTarget> &&)
		mov	byte ptr [ebp+var_4], 3
		lea	ecx, [ebp+var_2C]
		call	??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ	; already_AddRefed<mozilla::gfx::DrawTarget>::~already_AddRefed<mozilla::gfx::DrawTarget>(void)
		mov	ecx, [ebp+var_10]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_108], eax
		mov	esi, esp
		movzx	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		lea	edx, [ebp+var_30]
		push	edx
		mov	eax, [ebp+var_108]
		mov	edx, [eax]
		mov	ecx, [ebp+var_108]
		mov	eax, [edx+84h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_10C], eax
		mov	ecx, [ebp+var_10C]
		mov	[ebp+var_110], ecx
		mov	byte ptr [ebp+var_4], 4
		mov	edx, [ebp+var_110]
		push	edx
		lea	ecx, [ebp+var_24]
		call	??$?0VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@@Z ; RefPtr<mozilla::gfx::DrawTarget>::RefPtr<mozilla::gfx::DrawTarget>(already_AddRefed<mozilla::gfx::DrawTarget> &&)
		mov	byte ptr [ebp+var_4], 6
		lea	ecx, [ebp+var_30]
		call	??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ	; already_AddRefed<mozilla::gfx::DrawTarget>::~already_AddRefed<mozilla::gfx::DrawTarget>(void)
		lea	ecx, [ebp+var_18]
		call	??B?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator mozilla::gfx::DrawTarget *(void)
		test	eax, eax
		jz	short loc_FEE
		lea	ecx, [ebp+var_24]
		call	??B?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator mozilla::gfx::DrawTarget *(void)
		test	eax, eax
		jnz	loc_107C

loc_FEE:				; CODE XREF: mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::SurfaceFormat)+134j
		mov	eax, [ebp+arg_4]
		push	eax
		push	offset $SG70167	; "Failure to allocate a similar DrawTarge"...
		push	0FFFFFFFFh
		push	0
		call	?DefaultOptions@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@SAH_N@Z ; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::DefaultOptions(bool)
		add	esp, 4
		push	eax
		lea	ecx, [ebp+var_F0]
		call	??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z ; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Log<2,mozilla::gfx::BasicLogger>(int,mozilla::gfx::LogReason)
		mov	[ebp+var_114], eax
		mov	ecx, [ebp+var_114]
		mov	[ebp+var_118], ecx
		mov	byte ptr [ebp+var_4], 7
		mov	ecx, [ebp+var_118]
		call	??6?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEAAV012@QBD@Z ; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::operator<<(char const * const)
		mov	ecx, eax
		call	??$?6HU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEAAV012@ABU?$BaseSize@HU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@12@@Z ; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::operator<<<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>>(mozilla::gfx::BaseSize<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>> const &)
		mov	byte ptr [ebp+var_4], 6
		lea	ecx, [ebp+var_F0]
		call	??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ ; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::~Log<2,mozilla::gfx::BasicLogger>(void)
		push	0
		mov	ecx, [ebp+arg_0]
		call	??0?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@P80@AEXNM@Z@Z ; already_AddRefed<mozilla::gfx::DrawTarget>::already_AddRefed<mozilla::gfx::DrawTarget>(void (already_AddRefed<mozilla::gfx::DrawTarget>::*)(double,float))
		mov	edx, [ebp+var_F8]
		or	edx, 1
		mov	[ebp+var_F8], edx
		mov	byte ptr [ebp+var_4], 3
		lea	ecx, [ebp+var_24]
		call	??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ ;	RefPtr<mozilla::gfx::DrawTarget>::~RefPtr<mozilla::gfx::DrawTarget>(void)
		mov	byte ptr [ebp+var_4], 0
		lea	ecx, [ebp+var_18]
		call	??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ ;	RefPtr<mozilla::gfx::DrawTarget>::~RefPtr<mozilla::gfx::DrawTarget>(void)
		mov	eax, [ebp+arg_0]
		jmp	short loc_10F1
; ---------------------------------------------------------------------------

loc_107C:				; CODE XREF: mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::SurfaceFormat)+140j
		lea	eax, [ebp+var_24]
		push	eax
		lea	ecx, [ebp+var_18]
		push	ecx
		lea	edx, [ebp+var_F4]
		push	edx
		call	??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z ;	mozilla::MakeAndAddRef<mozilla::gfx::DrawTargetDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget>	&>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)
		add	esp, 0Ch
		mov	[ebp+var_11C], eax
		mov	eax, [ebp+var_11C]
		mov	[ebp+var_120], eax
		mov	byte ptr [ebp+var_4], 8
		mov	ecx, [ebp+var_120]
		push	ecx
		mov	ecx, [ebp+arg_0]
		call	??$?0VDrawTargetDual@gfx@mozilla@@@?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@@Z ; already_AddRefed<mozilla::gfx::DrawTarget>::already_AddRefed<mozilla::gfx::DrawTarget>(already_AddRefed<mozilla::gfx::DrawTargetDual> &&)
		mov	edx, [ebp+var_F8]
		or	edx, 1
		mov	[ebp+var_F8], edx
		mov	byte ptr [ebp+var_4], 6
		lea	ecx, [ebp+var_F4]
		call	??1?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAE@XZ ; already_AddRefed<mozilla::gfx::DrawTargetDual>::~already_AddRefed<mozilla::gfx::DrawTargetDual>(void)
		mov	byte ptr [ebp+var_4], 3
		lea	ecx, [ebp+var_24]
		call	??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ ;	RefPtr<mozilla::gfx::DrawTarget>::~RefPtr<mozilla::gfx::DrawTarget>(void)
		mov	byte ptr [ebp+var_4], 0
		lea	ecx, [ebp+var_18]
		call	??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ ;	RefPtr<mozilla::gfx::DrawTarget>::~RefPtr<mozilla::gfx::DrawTarget>(void)
		mov	eax, [ebp+arg_0]

loc_10F1:				; CODE XREF: mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::SurfaceFormat)+1D2j
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN17_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		add	esp, 120h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z	endp

; ---------------------------------------------------------------------------
		align 4
$LN17_0		dd 2			; DATA XREF: mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::SurfaceFormat)+24Do
		dd offset $LN16
$LN16		dd 0FFFFFFE8h, 4	; DATA XREF: .text$mn:00001128o
		dd offset $LN13
		dd 0FFFFFFDCh, 4
		dd offset $LN14
$LN14		dd 427464h		; DATA XREF: .text$mn:00001140o
$LN13		dd 417464h		; DATA XREF: .text$mn:00001134o
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 114Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z$0 proc near
					; DATA XREF: .xdata$x:00008A04o
		lea	ecx, [ebp-8Ch]	; this
		jmp	??1DualPattern@gfx@mozilla@@QAE@XZ ; mozilla::gfx::DualPattern::~DualPattern(void)
__unwindfunclet$?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z proc near
					; DATA XREF: mozilla::gfx::DrawTargetDual::MaskSurface(mozilla::gfx::Pattern const &,mozilla::gfx::SourceSurface *,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::DrawOptions	const &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0A8h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z$0 proc near
					; DATA XREF: .xdata$x:000089FCo
		lea	ecx, [ebp-8Ch]	; this
		jmp	??1DualPattern@gfx@mozilla@@QAE@XZ ; mozilla::gfx::DualPattern::~DualPattern(void)
__unwindfunclet$?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z	proc near
					; DATA XREF: mozilla::gfx::DrawTargetDual::FillRect(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::Pattern const &,mozilla::gfx::DrawOptions const &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-98h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z	endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0 proc near
					; DATA XREF: .xdata$x:000089F4o
		lea	ecx, [ebp-8Ch]	; this
		jmp	??1DualPattern@gfx@mozilla@@QAE@XZ ; mozilla::gfx::DualPattern::~DualPattern(void)
__unwindfunclet$?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z proc near
					; DATA XREF: mozilla::gfx::DrawTargetDual::StrokeRect(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float>	const &,mozilla::gfx::Pattern const &,mozilla::gfx::StrokeOptions const	&,mozilla::gfx::DrawOptions const &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-98h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0 proc near
					; DATA XREF: .xdata$x:000089ECo
		lea	ecx, [ebp-8Ch]	; this
		jmp	??1DualPattern@gfx@mozilla@@QAE@XZ ; mozilla::gfx::DualPattern::~DualPattern(void)
__unwindfunclet$?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z	proc near
					; DATA XREF: mozilla::gfx::DrawTargetDual::StrokeLine(mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::Pattern const	&,mozilla::gfx::StrokeOptions const &,mozilla::gfx::DrawOptions	const &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-98h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z	endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0 proc near
					; DATA XREF: .xdata$x:000089E4o
		lea	ecx, [ebp-8Ch]	; this
		jmp	??1DualPattern@gfx@mozilla@@QAE@XZ ; mozilla::gfx::DualPattern::~DualPattern(void)
__unwindfunclet$?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z proc near
					; DATA XREF: mozilla::gfx::DrawTargetDual::Stroke(mozilla::gfx::Path const *,mozilla::gfx::Pattern const &,mozilla::gfx::StrokeOptions const &,mozilla::gfx::DrawOptions const &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-98h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z$0 proc near
					; DATA XREF: .xdata$x:000089DCo
		lea	ecx, [ebp-8Ch]	; this
		jmp	??1DualPattern@gfx@mozilla@@QAE@XZ ; mozilla::gfx::DualPattern::~DualPattern(void)
__unwindfunclet$?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z	proc near
					; DATA XREF: mozilla::gfx::DrawTargetDual::Fill(mozilla::gfx::Path const *,mozilla::gfx::Pattern const &,mozilla::gfx::DrawOptions const &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-98h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z	endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z$0	proc near
					; DATA XREF: .xdata$x:000089D4o
		lea	ecx, [ebp-8Ch]	; this
		jmp	??1DualPattern@gfx@mozilla@@QAE@XZ ; mozilla::gfx::DualPattern::~DualPattern(void)
__unwindfunclet$?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z$0	endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z proc near
					; DATA XREF: mozilla::gfx::DrawTargetDual::FillGlyphs(mozilla::gfx::ScaledFont *,mozilla::gfx::GlyphBuffer const &,mozilla::gfx::Pattern const &,mozilla::gfx::DrawOptions const &,mozilla::gfx::GlyphRenderingOptions const *)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-98h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z$0 proc near
					; DATA XREF: .xdata$x:00008A0Co
		lea	ecx, [ebp-8Ch]	; this
		jmp	??1DualPattern@gfx@mozilla@@QAE@XZ ; mozilla::gfx::DualPattern::~DualPattern(void)
__unwindfunclet$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z$1 proc near
					; DATA XREF: .xdata$x:00008A14o
		lea	ecx, [ebp-108h]	; this
		jmp	??1DualPattern@gfx@mozilla@@QAE@XZ ; mozilla::gfx::DualPattern::~DualPattern(void)
__unwindfunclet$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z proc near
					; DATA XREF: mozilla::gfx::DrawTargetDual::Mask(mozilla::gfx::Pattern const &,mozilla::gfx::Pattern const &,mozilla::gfx::DrawOptions const &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-114h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$0 proc near
					; DATA XREF: .xdata$x:00008B68o
		lea	ecx, [ebp-2Ch]
		jmp	??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ	; already_AddRefed<mozilla::gfx::DrawTarget>::~already_AddRefed<mozilla::gfx::DrawTarget>(void)
__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$1 proc near
					; DATA XREF: .xdata$x:00008B70o
					; .xdata$x:00008B78o
		lea	ecx, [ebp-18h]
		jmp	??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ ;	RefPtr<mozilla::gfx::DrawTarget>::~RefPtr<mozilla::gfx::DrawTarget>(void)
__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$2 proc near
					; DATA XREF: .xdata$x:00008B80o
		lea	ecx, [ebp-30h]
		jmp	??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ	; already_AddRefed<mozilla::gfx::DrawTarget>::~already_AddRefed<mozilla::gfx::DrawTarget>(void)
__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$2 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$3 proc near
					; DATA XREF: .xdata$x:00008B88o
					; .xdata$x:00008B90o
		lea	ecx, [ebp-24h]
		jmp	??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ ;	RefPtr<mozilla::gfx::DrawTarget>::~RefPtr<mozilla::gfx::DrawTarget>(void)
__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$3 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$4 proc near
					; DATA XREF: .xdata$x:00008B98o
		lea	ecx, [ebp-0F0h]
		jmp	??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ ; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::~Log<2,mozilla::gfx::BasicLogger>(void)
__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$4 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$5 proc near
					; DATA XREF: .xdata$x:00008B60o
		mov	eax, [ebp-0F8h]
		and	eax, 1
		jz	locret_1338
		and	dword ptr [ebp-0F8h], 0FFFFFFFEh
		mov	ecx, [ebp+8]
		jmp	??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ	; already_AddRefed<mozilla::gfx::DrawTarget>::~already_AddRefed<mozilla::gfx::DrawTarget>(void)
; ---------------------------------------------------------------------------

locret_1338:				; CODE XREF: __unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$5+9j
		retn
__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$5 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$6 proc near
					; DATA XREF: .xdata$x:00008BA0o
		lea	ecx, [ebp-0F4h]
		jmp	??1?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAE@XZ ; already_AddRefed<mozilla::gfx::DrawTargetDual>::~already_AddRefed<mozilla::gfx::DrawTargetDual>(void)
__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$6 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z proc near
					; DATA XREF: mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::SurfaceFormat)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-120h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1364h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall RefPtr<class mozilla::gfx::DrawTarget>::RefPtr<class mozilla::gfx::DrawTarget>(struct already_AddRefed<class mozilla::gfx::DrawTarget> &&)
		public ??$?0VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@@Z
??$?0VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@@Z proc near
					; CODE XREF: mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::SurfaceFormat)+ABp
					; mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const &,mozilla::gfx::SurfaceFormat)+119p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+arg_0]
		call	?take@?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAEPAVDrawTarget@gfx@mozilla@@XZ ; already_AddRefed<mozilla::gfx::DrawTarget>::take(void)
		mov	ecx, [ebp+var_4]
		mov	[ecx], eax
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??$?0VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1394h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall already_AddRefed<class mozilla::gfx::DrawTarget>::already_AddRefed<class mozilla::gfx::DrawTarget>(struct already_AddRefed<class mozilla::gfx::DrawTargetDual> &&)
		public ??$?0VDrawTargetDual@gfx@mozilla@@@?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@@Z
??$?0VDrawTargetDual@gfx@mozilla@@@?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@@Z proc near
					; CODE XREF: mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::SurfaceFormat)+20Bp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+arg_0]
		call	?take@?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAEPAVDrawTargetDual@gfx@mozilla@@XZ ; already_AddRefed<mozilla::gfx::DrawTargetDual>::take(void)
		mov	ecx, [ebp+var_4]
		mov	[ecx], eax
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??$?0VDrawTargetDual@gfx@mozilla@@@?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 13C4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall RefPtr<class mozilla::gfx::SourceSurface>::RefPtr<class mozilla::gfx::SourceSurface>(struct already_AddRefed<class	mozilla::gfx::SourceSurface> &&)
		public ??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z
??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z proc near
					; CODE XREF: mozilla::gfx::SourceSurfaceDual::SourceSurfaceDual(mozilla::gfx::DrawTarget *,mozilla::gfx::DrawTarget *)+8Cp
					; mozilla::gfx::SourceSurfaceDual::SourceSurfaceDual(mozilla::gfx::DrawTarget *,mozilla::gfx::DrawTarget *)+CEp ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+arg_0]
		call	?take@?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAEPAVSourceSurface@gfx@mozilla@@XZ ; already_AddRefed<mozilla::gfx::SourceSurface>::take(void)
		mov	ecx, [ebp+var_4]
		mov	[ecx], eax
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 13F4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall already_AddRefed<class mozilla::gfx::SourceSurface>::already_AddRefed<class mozilla::gfx::SourceSurface>(struct already_AddRefed<class mozilla::gfx::SourceSurfaceDual> &&)
		public ??$?0VSourceSurfaceDual@gfx@mozilla@@@?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@@Z
??$?0VSourceSurfaceDual@gfx@mozilla@@@?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@@Z	proc near
					; CODE XREF: mozilla::gfx::DrawTargetDual::Snapshot(void)+74p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+arg_0]
		call	?take@?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAEPAVSourceSurfaceDual@gfx@mozilla@@XZ ; already_AddRefed<mozilla::gfx::SourceSurfaceDual>::take(void)
		mov	ecx, [ebp+var_4]
		mov	[ecx], eax
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??$?0VSourceSurfaceDual@gfx@mozilla@@@?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1424h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	mozilla::gfx::Log<2, struct mozilla::gfx::BasicLogger> & __thiscall mozilla::gfx::Log<2, struct	mozilla::gfx::BasicLogger>::operator<<<int, struct mozilla::gfx::IntSizeTyped<struct mozilla::gfx::UnknownUnits>>(struct mozilla::gfx::BaseSize<int, struct mozilla::gfx::IntSizeTyped<struct mozilla::gfx::UnknownUnits>> const &)
		public ??$?6HU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEAAV012@ABU?$BaseSize@HU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@12@@Z
??$?6HU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEAAV012@ABU?$BaseSize@HU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@12@@Z proc near
					; CODE XREF: mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::SurfaceFormat)+18Ap

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		push	esi
		push	edi
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	?LogIt@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ	; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::LogIt(void)
		movzx	eax, al
		test	eax, eax
		jz	short loc_14C0
		cmp	[ebp+var_4], 0
		jz	short loc_145D
		mov	ecx, [ebp+var_4]
		add	ecx, 10h
		mov	[ebp+var_8], ecx
		jmp	short loc_1464
; ---------------------------------------------------------------------------

loc_145D:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::operator<<<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>>(mozilla::gfx::BaseSize<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>> const &)+2Cj
		mov	[ebp+var_8], 0

loc_1464:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::operator<<<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>>(mozilla::gfx::BaseSize<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>> const &)+37j
		push	offset ??_C@_01PKGAHCOL@?$CJ?$AA@ ; Str
		mov	esi, esp
		mov	edx, [ebp+arg_0]
		mov	eax, [edx+4]
		push	eax		; Str
		push	offset ??_C@_01IHBHIGKO@?0?$AA@	; `string'
		mov	edi, esp
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		push	edx
		push	offset ??_C@_05EHMGNGKA@Size?$CI?$AA@ ;	"Size("
		mov	eax, [ebp+var_8]
		push	eax		; int
		call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
		add	esp, 8
		mov	ecx, eax
		call	dword ptr ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z	; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
		cmp	edi, esp
		call	__RTC_CheckEsp
		push	eax		; int
		call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
		add	esp, 8
		mov	ecx, eax
		call	dword ptr ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z	; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax		; int
		call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
		add	esp, 8

loc_14C0:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::operator<<<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>>(mozilla::gfx::BaseSize<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>> const &)+26j
		mov	eax, [ebp+var_4]
		pop	edi
		pop	esi
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??$?6HU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEAAV012@ABU?$BaseSize@HU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@12@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 14D8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl std::operator<<<std::char_traits<char>>(int, char	*Str)
		public ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z proc near
					; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::operator<<<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>>(mozilla::gfx::BaseSize<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>> const &)+64p
					; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::operator<<<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>>(mozilla::gfx::BaseSize<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>> const &)+7Cp ...

var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_7D		= byte ptr -7Dh
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_65		= byte ptr -65h
var_64		= dword	ptr -64h
var_60		= qword	ptr -60h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch

; FUNCTION CHUNK AT 0000185C SIZE 00000009 BYTES
; FUNCTION CHUNK AT 0000186C SIZE 00000068 BYTES

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
		mov	eax, large fs:0
		push	eax
		push	ecx
		sub	esp, 78h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_88]
		mov	ecx, 1Eh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_14], 0
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	?length@?$char_traits@D@std@@SAIPBD@Z ;	std::char_traits<char>::length(char const *)
		add	esp, 4
		xor	ecx, ecx
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	ecx, [ebp+arg_0]
		add	ecx, [eax+4]	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?width@ios_base@std@@QBE_JXZ	; std::ios_base::width(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_50], eax
		mov	[ebp+var_4C], edx
		cmp	[ebp+var_4C], 0
		jl	short loc_15B9
		jg	short loc_155F
		cmp	[ebp+var_50], 0
		jbe	short loc_15B9

loc_155F:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+7Fj
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	ecx, [ebp+arg_0]
		add	ecx, [edx+4]	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?width@ios_base@std@@QBE_JXZ	; std::ios_base::width(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_58], eax
		mov	[ebp+var_54], edx
		mov	eax, [ebp+var_54]
		cmp	eax, [ebp+var_18]
		jl	short loc_15B9
		jg	short loc_1591
		mov	ecx, [ebp+var_58]
		cmp	ecx, [ebp+var_1C]
		jbe	short loc_15B9

loc_1591:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+AFj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	ecx, [ebp+arg_0]
		add	ecx, [eax+4]	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?width@ios_base@std@@QBE_JXZ	; std::ios_base::width(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		sub	eax, [ebp+var_1C]
		sbb	edx, [ebp+var_18]
		mov	dword ptr [ebp+var_60],	eax
		mov	dword ptr [ebp+var_60+4], edx
		jmp	short loc_15C2
; ---------------------------------------------------------------------------

loc_15B9:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+7Dj
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+85j ...
		xorpd	xmm0, xmm0
		movlpd	[ebp+var_60], xmm0

loc_15C2:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+DFj
		mov	ecx, dword ptr [ebp+var_60]
		mov	[ebp+var_24], ecx
		mov	edx, dword ptr [ebp+var_60+4]
		mov	[ebp+var_20], edx
		mov	eax, [ebp+arg_0]
		push	eax
		lea	ecx, [ebp+var_30]
		call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)
		mov	[ebp+var_4], 0
		lea	ecx, [ebp+var_30]
		call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char>>::sentry::operator bool(void)
		movzx	ecx, al
		test	ecx, ecx
		jnz	short loc_15FE
		mov	edx, [ebp+var_14]
		or	edx, 4
		mov	[ebp+var_14], edx
		jmp	loc_186C
; ---------------------------------------------------------------------------

loc_15FE:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+116j
		mov	byte ptr [ebp+var_4], 1
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx	; this
		call	dword ptr ds:__imp_?flags@ios_base@std@@QBEHXZ ; std::ios_base::flags(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_64], eax
		mov	eax, [ebp+var_64]
		and	eax, 1C0h
		cmp	eax, 40h ; '@'
		jz	loc_16E9
		jmp	short loc_1646
; ---------------------------------------------------------------------------

loc_1634:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *):loc_16E4j
		mov	ecx, [ebp+var_24]
		sub	ecx, 1
		mov	edx, [ebp+var_20]
		sbb	edx, 0
		mov	[ebp+var_24], ecx
		mov	[ebp+var_20], edx

loc_1646:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+15Aj
		cmp	[ebp+var_20], 0
		jl	loc_16E9
		jg	short loc_165C
		cmp	[ebp+var_24], 0
		jbe	loc_16E9

loc_165C:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+178j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx
		call	dword ptr ds:__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char>>::fill(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_65], al
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_6C], eax
		mov	esi, esp
		movzx	eax, [ebp+var_65]
		push	eax
		mov	ecx, [ebp+var_6C]
		call	dword ptr ds:__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_70], eax
		mov	ecx, [ebp+var_70]
		mov	[ebp+var_38], ecx
		call	?eof@?$char_traits@D@std@@SAHXZ	; std::char_traits<char>::eof(void)
		mov	[ebp+var_3C], eax
		lea	edx, [ebp+var_38]
		push	edx
		lea	eax, [ebp+var_3C]
		push	eax
		call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type(int const &,int const &)
		add	esp, 8
		movzx	ecx, al
		test	ecx, ecx
		jz	short loc_16E4
		mov	edx, [ebp+var_14]
		or	edx, 4
		mov	[ebp+var_14], edx
		jmp	short loc_16E9
; ---------------------------------------------------------------------------

loc_16E4:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1FFj
		jmp	loc_1634
; ---------------------------------------------------------------------------

loc_16E9:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+154j
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+172j	...
		cmp	[ebp+var_14], 0
		jnz	short loc_174B
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_74], eax
		mov	esi, esp
		mov	eax, [ebp+var_18]
		push	eax
		mov	ecx, [ebp+var_1C]
		push	ecx
		mov	edx, [ebp+Str]
		push	edx
		mov	ecx, [ebp+var_74]
		call	dword ptr ds:__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ;	std::basic_streambuf<char,std::char_traits<char>>::sputn(char const *,__int64)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_7C], eax
		mov	[ebp+var_78], edx
		mov	eax, [ebp+var_7C]
		cmp	eax, [ebp+var_1C]
		jnz	short loc_1742
		mov	ecx, [ebp+var_78]
		cmp	ecx, [ebp+var_18]
		jz	short loc_174B

loc_1742:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+260j
		mov	edx, [ebp+var_14]
		or	edx, 4
		mov	[ebp+var_14], edx

loc_174B:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+215j
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+268j
		cmp	[ebp+var_14], 0
		jnz	loc_1814
		jmp	short loc_1769
; ---------------------------------------------------------------------------

loc_1757:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *):loc_180Fj
		mov	eax, [ebp+var_24]
		sub	eax, 1
		mov	ecx, [ebp+var_20]
		sbb	ecx, 0
		mov	[ebp+var_24], eax
		mov	[ebp+var_20], ecx

loc_1769:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+27Dj
		cmp	[ebp+var_20], 0
		jl	loc_1814
		jg	short loc_177F
		cmp	[ebp+var_24], 0
		jbe	loc_1814

loc_177F:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+29Bj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	ecx, [ebp+arg_0]
		add	ecx, [eax+4]
		mov	esi, esp
		call	dword ptr ds:__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char>>::fill(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_7D], al
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	ecx, [ebp+arg_0]
		add	ecx, [edx+4]
		mov	esi, esp
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_84], eax
		mov	esi, esp
		movzx	eax, [ebp+var_7D]
		push	eax
		mov	ecx, [ebp+var_84]
		call	dword ptr ds:__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_88], eax
		mov	ecx, [ebp+var_88]
		mov	[ebp+var_40], ecx
		call	?eof@?$char_traits@D@std@@SAHXZ	; std::char_traits<char>::eof(void)
		mov	[ebp+var_44], eax
		lea	edx, [ebp+var_40]
		push	edx
		lea	eax, [ebp+var_44]
		push	eax
		call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type(int const &,int const &)
		add	esp, 8
		movzx	ecx, al
		test	ecx, ecx
		jz	short loc_180F
		mov	edx, [ebp+var_14]
		or	edx, 4
		mov	[ebp+var_14], edx
		jmp	short loc_1814
; ---------------------------------------------------------------------------

loc_180F:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+32Aj
		jmp	loc_1757
; ---------------------------------------------------------------------------

loc_1814:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+277j
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+295j	...
		mov	esi, esp
		push	0
		push	0		; __int64
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	ecx, edx	; this
		call	dword ptr ds:__imp_?width@ios_base@std@@QAE_J_J@Z ; std::ios_base::width(__int64)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_185C
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z endp


; =============== S U B	R O U T	I N E =======================================


__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0 proc near
					; DATA XREF: .xdata$x:00008D7Co
		mov	esi, esp
		push	1
		push	4
		mov	eax, [ebp+8]
		mov	ecx, [eax]
		mov	edx, [ebp+8]
		add	edx, [ecx+4]
		mov	ecx, edx
		call	dword ptr ds:__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z	; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, offset $LN23_0
		retn
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0 endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z

loc_185C:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+35Cj
		mov	[ebp+var_4], 0
		jmp	short loc_186C
; END OF FUNCTION CHUNK	FOR ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z

; =============== S U B	R O U T	I N E =======================================


$LN23_0		proc near		; DATA XREF: __catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0+20o
		mov	dword ptr [ebp-4], 0
$LN23_0		endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z

loc_186C:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+121j
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+38Bj
		mov	esi, esp
		push	0
		mov	eax, [ebp+var_14]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	ecx, [ebp+arg_0]
		add	ecx, [edx+4]
		call	dword ptr ds:__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z	; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_48], eax
		mov	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_30]
		call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ;	std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)
		mov	eax, [ebp+var_48]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN32
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 88h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
; END OF FUNCTION CHUNK	FOR ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
; ---------------------------------------------------------------------------
$LN32		dd 1			; DATA XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+3D0o
		dd offset $LN31
$LN31		dd 0FFFFFFD0h, 8	; DATA XREF: .text$mn:000018D8o
		dd offset $LN29
$LN29		dd 6B4F5Fh		; DATA XREF: .text$mn:000018E4o
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 18ECh
; COMDAT (pick associative to section at 14D8)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2 proc near
					; DATA XREF: .xdata$x:00008D98o
		lea	ecx, [ebp-30h]
		jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ;	std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z	proc near
					; DATA XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-8Ch]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
		jmp	___CxxFrameHandler3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1914h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; class	RefPtr<class mozilla::gfx::DrawTarget> & __cdecl mozilla::Forward<class	RefPtr<class mozilla::gfx::DrawTarget> &>(class	RefPtr<class mozilla::gfx::DrawTarget> &)
		public ??$Forward@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@@mozilla@@YAAAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV1@@Z
??$Forward@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@@mozilla@@YAAAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV1@@Z proc near
					; CODE XREF: mozilla::MakeAndAddRef<mozilla::gfx::DrawTargetDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)+64p
					; mozilla::MakeAndAddRef<mozilla::gfx::DrawTargetDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)+78p ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		pop	ebp
		retn
??$Forward@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@@mozilla@@YAAAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV1@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 191Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct already_AddRefed<class	mozilla::gfx::DrawTargetDual> __cdecl mozilla::MakeAndAddRef<class mozilla::gfx::DrawTargetDual, class RefPtr<class mozilla::gfx::DrawTarget> &, class RefPtr<class mozilla::gfx::DrawTarget> &>(class RefPtr<class mozilla::gfx::DrawTarget> &, class RefPtr<class mozilla::gfx::DrawTarget> &)
		public ??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z
??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z proc near
					; CODE XREF: mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::SurfaceFormat)+1E3p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 1Ch
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_28], eax
		mov	[ebp+var_24], eax
		mov	[ebp+var_20], eax
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_24], 0
		push	44h ; 'D'       ; unsigned int
		call	??2@YAPAXI@Z	; operator new(uint)
		add	esp, 4
		mov	[ebp+var_20], eax
		mov	[ebp+var_4], 1
		cmp	[ebp+var_20], 0
		jz	short loc_19B1
		mov	eax, [ebp+arg_8]
		push	eax
		call	??$Forward@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@@mozilla@@YAAAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV1@@Z ; mozilla::Forward<RefPtr<mozilla::gfx::DrawTarget> &>(RefPtr<mozilla::gfx::DrawTarget> &)
		add	esp, 4
		mov	ecx, eax
		call	??B?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator mozilla::gfx::DrawTarget *(void)
		push	eax		; struct mozilla::gfx::DrawTarget *
		mov	ecx, [ebp+arg_4]
		push	ecx
		call	??$Forward@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@@mozilla@@YAAAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV1@@Z ; mozilla::Forward<RefPtr<mozilla::gfx::DrawTarget> &>(RefPtr<mozilla::gfx::DrawTarget> &)
		add	esp, 4
		mov	ecx, eax
		call	??B?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator mozilla::gfx::DrawTarget *(void)
		push	eax		; struct mozilla::gfx::DrawTarget *
		mov	ecx, [ebp+var_20] ; this
		call	??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z	; mozilla::gfx::DrawTargetDual::DrawTargetDual(mozilla::gfx::DrawTarget	*,mozilla::gfx::DrawTarget *)
		mov	[ebp+var_28], eax
		jmp	short loc_19B8
; ---------------------------------------------------------------------------

loc_19B1:				; CODE XREF: mozilla::MakeAndAddRef<mozilla::gfx::DrawTargetDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)+5Ej
		mov	[ebp+var_28], 0

loc_19B8:				; CODE XREF: mozilla::MakeAndAddRef<mozilla::gfx::DrawTargetDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)+93j
		mov	edx, [ebp+var_28]
		mov	[ebp+var_1C], edx
		mov	byte ptr [ebp+var_4], 0
		mov	eax, [ebp+var_1C]
		push	eax
		lea	ecx, [ebp+var_14]
		call	??0?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAE@PAVDrawTargetDual@gfx@mozilla@@@Z ; RefPtr<mozilla::gfx::DrawTargetDual>::RefPtr<mozilla::gfx::DrawTargetDual>(mozilla::gfx::DrawTargetDual *)
		mov	[ebp+var_4], 2
		mov	ecx, [ebp+arg_0]
		push	ecx
		lea	ecx, [ebp+var_14]
		call	?forget@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@XZ ; RefPtr<mozilla::gfx::DrawTargetDual>::forget(void)
		mov	edx, [ebp+var_24]
		or	edx, 1
		mov	[ebp+var_24], edx
		mov	byte ptr [ebp+var_4], 0
		lea	ecx, [ebp+var_14]
		call	??1?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAE@XZ ; RefPtr<mozilla::gfx::DrawTargetDual>::~RefPtr<mozilla::gfx::DrawTargetDual>(void)
		mov	eax, [ebp+arg_0]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN12_1
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 28h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN12_1		dd 1			; DATA XREF: mozilla::MakeAndAddRef<mozilla::gfx::DrawTargetDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)+E1o
		dd offset $LN11_0
$LN11_0		dd 0FFFFFFECh, 4	; DATA XREF: .text$mn:00001A28o
		dd offset $LN9_2
$LN9_2		db 70h,	0		; DATA XREF: .text$mn:00001A34o
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 1A3Ch
; COMDAT (pick associative to section at 191C)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$0	proc near
					; DATA XREF: .xdata$x:00008D40o
		mov	eax, [ebp-20h]
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		retn
__unwindfunclet$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$0	endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$1	proc near
					; DATA XREF: .xdata$x:00008D48o
		lea	ecx, [ebp-14h]
		jmp	??1?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAE@XZ ; RefPtr<mozilla::gfx::DrawTargetDual>::~RefPtr<mozilla::gfx::DrawTargetDual>(void)
__unwindfunclet$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$1	endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$2	proc near
					; DATA XREF: .xdata$x:00008D38o
		mov	eax, [ebp-24h]
		and	eax, 1
		jz	$LN8_3
		and	dword ptr [ebp-24h], 0FFFFFFFEh
		mov	ecx, [ebp+8]
		jmp	??1?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAE@XZ ; already_AddRefed<mozilla::gfx::DrawTargetDual>::~already_AddRefed<mozilla::gfx::DrawTargetDual>(void)
; ---------------------------------------------------------------------------

$LN8_3:					; CODE XREF: __unwindfunclet$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$2+6j
		retn
__unwindfunclet$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$2	endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z proc near
					; DATA XREF: mozilla::MakeAndAddRef<mozilla::gfx::DrawTargetDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-20h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z
		jmp	___CxxFrameHandler3
__ehhandler$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A84h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct already_AddRefed<class	mozilla::gfx::SourceSurfaceDual> __cdecl mozilla::MakeAndAddRef<class mozilla::gfx::SourceSurfaceDual, class RefPtr<class mozilla::gfx::DrawTarget> &, class RefPtr<class mozilla::gfx::DrawTarget> &>(class RefPtr<class mozilla::gfx::DrawTarget> &, class RefPtr<class mozilla::gfx::DrawTarget> &)
		public ??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z
??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z proc near
					; CODE XREF: mozilla::gfx::DrawTargetDual::Snapshot(void)+55p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 1Ch
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_28], eax
		mov	[ebp+var_24], eax
		mov	[ebp+var_20], eax
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_24], 0
		push	18h		; unsigned int
		call	??2@YAPAXI@Z	; operator new(uint)
		add	esp, 4
		mov	[ebp+var_20], eax
		mov	[ebp+var_4], 1
		cmp	[ebp+var_20], 0
		jz	short loc_1B19
		mov	eax, [ebp+arg_8]
		push	eax
		call	??$Forward@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@@mozilla@@YAAAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV1@@Z ; mozilla::Forward<RefPtr<mozilla::gfx::DrawTarget> &>(RefPtr<mozilla::gfx::DrawTarget> &)
		add	esp, 4
		mov	ecx, eax
		call	??B?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator mozilla::gfx::DrawTarget *(void)
		push	eax		; struct mozilla::gfx::DrawTarget *
		mov	ecx, [ebp+arg_4]
		push	ecx
		call	??$Forward@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@@mozilla@@YAAAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV1@@Z ; mozilla::Forward<RefPtr<mozilla::gfx::DrawTarget> &>(RefPtr<mozilla::gfx::DrawTarget> &)
		add	esp, 4
		mov	ecx, eax
		call	??B?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator mozilla::gfx::DrawTarget *(void)
		push	eax		; struct mozilla::gfx::DrawTarget *
		mov	ecx, [ebp+var_20] ; this
		call	??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z ; mozilla::gfx::SourceSurfaceDual::SourceSurfaceDual(mozilla::gfx::DrawTarget *,mozilla::gfx::DrawTarget *)
		mov	[ebp+var_28], eax
		jmp	short loc_1B20
; ---------------------------------------------------------------------------

loc_1B19:				; CODE XREF: mozilla::MakeAndAddRef<mozilla::gfx::SourceSurfaceDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget>	&>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)+5Ej
		mov	[ebp+var_28], 0

loc_1B20:				; CODE XREF: mozilla::MakeAndAddRef<mozilla::gfx::SourceSurfaceDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget>	&>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)+93j
		mov	edx, [ebp+var_28]
		mov	[ebp+var_1C], edx
		mov	byte ptr [ebp+var_4], 0
		mov	eax, [ebp+var_1C]
		push	eax
		lea	ecx, [ebp+var_14]
		call	??0?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAE@PAVSourceSurfaceDual@gfx@mozilla@@@Z ; RefPtr<mozilla::gfx::SourceSurfaceDual>::RefPtr<mozilla::gfx::SourceSurfaceDual>(mozilla::gfx::SourceSurfaceDual *)
		mov	[ebp+var_4], 2
		mov	ecx, [ebp+arg_0]
		push	ecx
		lea	ecx, [ebp+var_14]
		call	?forget@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@XZ ; RefPtr<mozilla::gfx::SourceSurfaceDual>::forget(void)
		mov	edx, [ebp+var_24]
		or	edx, 1
		mov	[ebp+var_24], edx
		mov	byte ptr [ebp+var_4], 0
		lea	ecx, [ebp+var_14]
		call	??1?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAE@XZ ; RefPtr<mozilla::gfx::SourceSurfaceDual>::~RefPtr<mozilla::gfx::SourceSurfaceDual>(void)
		mov	eax, [ebp+arg_0]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN12_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 28h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z endp

; ---------------------------------------------------------------------------
		align 4
$LN12_0		dd 1			; DATA XREF: mozilla::MakeAndAddRef<mozilla::gfx::SourceSurfaceDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget>	&>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)+E1o
		dd offset $LN11
$LN11		dd 0FFFFFFECh, 4	; DATA XREF: .text$mn:00001B90o
		dd offset $LN9_0
$LN9_0		db 70h,	0		; DATA XREF: .text$mn:00001B9Co
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 1BA4h
; COMDAT (pick associative to section at 1A84)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$0 proc near
					; DATA XREF: .xdata$x:00008BE4o
		mov	eax, [ebp-20h]
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		retn
__unwindfunclet$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$1 proc near
					; DATA XREF: .xdata$x:00008BECo
		lea	ecx, [ebp-14h]
		jmp	??1?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAE@XZ ; RefPtr<mozilla::gfx::SourceSurfaceDual>::~RefPtr<mozilla::gfx::SourceSurfaceDual>(void)
__unwindfunclet$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$2 proc near
					; DATA XREF: .xdata$x:00008BDCo
		mov	eax, [ebp-24h]
		and	eax, 1
		jz	$LN8_2
		and	dword ptr [ebp-24h], 0FFFFFFFEh
		mov	ecx, [ebp+8]
		jmp	??1?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAE@XZ ; already_AddRefed<mozilla::gfx::SourceSurfaceDual>::~already_AddRefed<mozilla::gfx::SourceSurfaceDual>(void)
; ---------------------------------------------------------------------------

$LN8_2:					; CODE XREF: __unwindfunclet$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$2+6j
		retn
__unwindfunclet$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$2 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z	proc near
					; DATA XREF: mozilla::MakeAndAddRef<mozilla::gfx::SourceSurfaceDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget>	&>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-20h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z
		jmp	___CxxFrameHandler3
__ehhandler$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1BECh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; char * __cdecl std::_Allocate<char>(unsigned int, char *)
		public ??$_Allocate@D@std@@YAPADIPAD@Z
??$_Allocate@D@std@@YAPADIPAD@Z	proc near
					; CODE XREF: std::allocator<char>::allocate(uint)+14p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_1C07
		jmp	short loc_1C31
; ---------------------------------------------------------------------------

loc_1C07:				; CODE XREF: std::_Allocate<char>(uint,char *)+17j
		cmp	[ebp+arg_0], 0FFFFFFFFh
		ja	short loc_1C22
		mov	eax, [ebp+arg_0]
		push	eax		; unsigned int
		call	??2@YAPAXI@Z	; operator new(uint)
		add	esp, 4
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_1C31

loc_1C22:				; CODE XREF: std::_Allocate<char>(uint,char *)+1Fj
		mov	esi, esp
		call	dword ptr ds:__imp_?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1C31:				; CODE XREF: std::_Allocate<char>(uint,char *)+19j
					; std::_Allocate<char>(uint,char *)+34j
		mov	eax, [ebp+var_4]
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??$_Allocate@D@std@@YAPADIPAD@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1C44h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct std::_Container_proxy * __cdecl std::_Allocate<struct std::_Container_proxy>(unsigned int, struct std::_Container_proxy *)
		public ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
					; CODE XREF: std::allocator<std::_Container_proxy>::allocate(uint)+14p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_1C5F
		jmp	short loc_1C8F
; ---------------------------------------------------------------------------

loc_1C5F:				; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+17j
		cmp	[ebp+arg_0], 1FFFFFFFh
		ja	short loc_1C80
		mov	eax, [ebp+arg_0]
		shl	eax, 3
		push	eax		; unsigned int
		call	??2@YAPAXI@Z	; operator new(uint)
		add	esp, 4
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_1C8F

loc_1C80:				; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+22j
		mov	esi, esp
		call	dword ptr ds:__imp_?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1C8F:				; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+19j
					; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+3Aj
		mov	eax, [ebp+var_4]
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1CA4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl std::_Debug_pointer<char>(int, wchar_t *,	unsigned int)
		public ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+1Cp
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+22p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		cmp	[ebp+arg_0], 0
		jnz	short loc_1CCD
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax		; unsigned int
		mov	ecx, [ebp+arg_4]
		push	ecx		; wchar_t *
		push	offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
		call	dword ptr ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const	*,wchar_t const	*,uint)
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1CCD:				; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+8j
		pop	esi
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1CD8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; char * __cdecl std::addressof<char>(char &)
		public ??$addressof@D@std@@YAPADAAD@Z
??$addressof@D@std@@YAPADAAD@Z proc near
					; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+27p
					; std::_String_val<std::_Simple_types<char>>::_Myptr(void)+27p	...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		pop	ebp
		retn
??$addressof@D@std@@YAPADAAD@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1CE0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::_Wrap_alloc<std::allocator<char>>::construct<char *,char *	&>(void	*, int)
		public ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+5Ep
					; $LN19+4Bp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_4]
		push	eax
		call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
		add	esp, 4
		push	eax		; int
		mov	ecx, [ebp+arg_0]
		push	ecx		; void *
		mov	edx, [ebp+var_4]
		push	edx		; int
		call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ;	std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)
		add	esp, 0Ch
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D1Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::allocator<char>::construct<char *,char * &>(void *, int)
		public ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
					; CODE XREF: std::allocator_traits<std::allocator<char>>::construct<char *,char	* &>(std::allocator<char> &,char * *,char * &)+17p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 10h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; void *
		push	4		; unsigned int
		call	??2@YAPAXIPAX@Z	; operator new(uint,void *)
		add	esp, 8
		mov	[ebp+var_18], eax
		mov	[ebp+var_4], 0
		cmp	[ebp+var_18], 0
		jz	short loc_1D8E
		mov	ecx, [ebp+arg_4]
		push	ecx
		call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
		add	esp, 4
		mov	edx, [ebp+var_18]
		mov	eax, [eax]
		mov	[edx], eax
		mov	ecx, [ebp+var_18]
		mov	[ebp+var_1C], ecx
		jmp	short loc_1D95
; ---------------------------------------------------------------------------

loc_1D8E:				; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+55j
		mov	[ebp+var_1C], 0

loc_1D95:				; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+70j
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_14], edx
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 1Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 1DC0h
; COMDAT (pick associative to section at 1D1C)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
					; DATA XREF: .xdata$x:00008E2Co
		mov	eax, [ebp+8]
		push	eax
		mov	eax, [ebp-18h]
		push	eax		; void *
		call	??3@YAXPAX0@Z	; operator delete(void *,void *)
		add	esp, 8
		retn
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
					; DATA XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-14h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
		jmp	___CxxFrameHandler3
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp

_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1DECh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(int, void	*, int)
		public ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
					; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char *	&)+23p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		push	eax
		call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
		add	esp, 4
		push	eax		; int
		mov	ecx, [ebp+arg_4]
		push	ecx		; void *
		mov	ecx, [ebp+arg_0]
		call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char	* &>(char * *,char * &)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1E14h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
		public ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+49p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 10h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; void *
		push	8		; unsigned int
		call	??2@YAPAXIPAX@Z	; operator new(uint,void *)
		add	esp, 8
		mov	[ebp+var_18], eax
		mov	[ebp+var_4], 0
		cmp	[ebp+var_18], 0
		jz	short loc_1E8C
		mov	ecx, [ebp+arg_4]
		push	ecx
		call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
		add	esp, 4
		mov	edx, [eax]
		mov	eax, [eax+4]
		mov	ecx, [ebp+var_18]
		mov	[ecx], edx
		mov	[ecx+4], eax
		mov	edx, [ebp+var_18]
		mov	[ebp+var_1C], edx
		jmp	short loc_1E93
; ---------------------------------------------------------------------------

loc_1E8C:				; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+55j
		mov	[ebp+var_1C], 0

loc_1E93:				; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+76j
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_14], eax
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 1Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 1EBCh
; COMDAT (pick associative to section at 1E14)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
					; DATA XREF: .xdata$x:00008E00o
		mov	eax, [ebp+8]
		push	eax
		mov	eax, [ebp-18h]
		push	eax		; void *
		call	??3@YAXPAX0@Z	; operator delete(void *,void *)
		add	esp, 8
		retn
__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc	near
					; DATA XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-14h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp

_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1EE8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::_Wrap_alloc<class std::allocator<char>>::destroy<char *>(char * *)
		public ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc	near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+4Fp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_4]
		push	ecx
		call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)
		add	esp, 8
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F18h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::allocator<char>::destroy<char *>(char * *)
		public ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
					; CODE XREF: std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char *	*)+Ap

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	esp, ebp
		pop	ebp
		retn	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F2Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static void __cdecl std::allocator_traits<class std::allocator<char>>::destroy<char *>(class std::allocator<char> &, char * *)
		public ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
					; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)+16p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ;	std::allocator<char>::destroy<char *>(char * *)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F44h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::allocator<struct	std::_Container_proxy>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
		public ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+3Ep

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	esp, ebp
		pop	ebp
		retn	4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F58h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; char * & __cdecl std::forward<char * &>(char * &)
		public ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
					; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char *	&)+12p
					; std::allocator<char>::construct<char *,char *	&>(char	* *,char * &)+5Bp ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		pop	ebp
		retn
??$forward@AAPAD@std@@YAAAPADAAPAD@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F60h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct std::_Container_proxy && __cdecl std::forward<struct std::_Container_proxy>(struct std::_Container_proxy &)
		public ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc	near
					; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+5Bp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		pop	ebp
		retn
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F68h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; class	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>> && __cdecl std::forward<class std::basic_string<char, struct	std::char_traits<char>,	class std::allocator<char>>>(class std::basic_string<char, struct std::char_traits<char>, class	std::allocator<char>> &)
		public ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+3Cp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		pop	ebp
		retn
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1F70h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::Atomic<unsigned int, 2, void>::Atomic<unsigned int, 2, void>(unsigned int)
		public ??0?$Atomic@I$01X@mozilla@@QAE@I@Z
??0?$Atomic@I$01X@mozilla@@QAE@I@Z proc	near
					; CODE XREF: mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::RefCounted<mozilla::gfx::SourceSurface,0>(void)+13p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_4]
		call	??0?$AtomicBaseIncDec@I$01@detail@mozilla@@QAE@I@Z ; mozilla::detail::AtomicBaseIncDec<uint,2>::AtomicBaseIncDec<uint,2>(uint)
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0?$Atomic@I$01X@mozilla@@QAE@I@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1FA0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::detail::AtomicBase<unsigned int, 2>::AtomicBase<unsigned int, 2>(unsigned	int)
		public ??0?$AtomicBase@I$01@detail@mozilla@@QAE@I@Z
??0?$AtomicBase@I$01@detail@mozilla@@QAE@I@Z proc near
					; CODE XREF: mozilla::detail::AtomicBaseIncDec<uint,2>::AtomicBaseIncDec<uint,2>(uint)+15p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		call	?convert@?$ToStorageTypeArgument@I@detail@mozilla@@SAII@Z ; mozilla::detail::ToStorageTypeArgument<uint>::convert(uint)
		add	esp, 4
		push	eax
		mov	ecx, [ebp+var_4]
		call	??0?$atomic@I@std@@QAE@I@Z ; std::atomic<uint>::atomic<uint>(uint)
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0?$AtomicBase@I$01@detail@mozilla@@QAE@I@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1FD8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::detail::AtomicBaseIncDec<unsigned	int, 2>::AtomicBaseIncDec<unsigned int,	2>(unsigned int)
		public ??0?$AtomicBaseIncDec@I$01@detail@mozilla@@QAE@I@Z
??0?$AtomicBaseIncDec@I$01@detail@mozilla@@QAE@I@Z proc	near
					; CODE XREF: mozilla::Atomic<uint,2,void>::Atomic<uint,2,void>(uint)+15p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_4]
		call	??0?$AtomicBase@I$01@detail@mozilla@@QAE@I@Z ; mozilla::detail::AtomicBase<uint,2>::AtomicBase<uint,2>(uint)
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0?$AtomicBaseIncDec@I$01@detail@mozilla@@QAE@I@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2008h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::external::AtomicRefCounted<class mozilla::gfx::SourceSurface>::AtomicRefCounted<class mozilla::gfx::SourceSurface>(void)
		public ??0?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ
??0?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ proc near
					; CODE XREF: mozilla::gfx::SourceSurface::SourceSurface(void)+33p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	??0?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@IAE@XZ	; mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::RefCounted<mozilla::gfx::SourceSurface,0>(void)
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2030h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::gfx::BaseRect<int, struct	mozilla::gfx::IntRectTyped<struct mozilla::gfx::UnknownUnits>, struct mozilla::gfx::IntPointTyped<struct mozilla::gfx::UnknownUnits>, struct mozilla::gfx::IntSizeTyped<struct mozilla::gfx::UnknownUnits>, struct mozilla::gfx::IntMarginTyped<struct mozilla::gfx::UnknownUnits>>::BaseRect<int, struct mozilla::gfx::IntRectTyped<struct mozilla::gfx::UnknownUnits>, struct	mozilla::gfx::IntPointTyped<struct mozilla::gfx::UnknownUnits>,	struct mozilla::gfx::IntSizeTyped<struct mozilla::gfx::UnknownUnits>, struct mozilla::gfx::IntMarginTyped<struct mozilla::gfx::UnknownUnits>>(void)
		public ??0?$BaseRect@HU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@U?$IntMarginTyped@UUnknownUnits@gfx@mozilla@@@23@@gfx@mozilla@@QAE@XZ
??0?$BaseRect@HU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@U?$IntMarginTyped@UUnknownUnits@gfx@mozilla@@@23@@gfx@mozilla@@QAE@XZ proc near
					; CODE XREF: mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits>::IntRectTyped<mozilla::gfx::UnknownUnits>(void)+11p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax], 0
		mov	ecx, [ebp+var_4]
		mov	dword ptr [ecx+4], 0
		mov	edx, [ebp+var_4]
		mov	dword ptr [edx+8], 0
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+0Ch], 0
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
??0?$BaseRect@HU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@U?$IntMarginTyped@UUnknownUnits@gfx@mozilla@@@23@@gfx@mozilla@@QAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 206Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::gfx::IntRectTyped<struct mozilla::gfx::UnknownUnits>::IntRectTyped<struct	mozilla::gfx::UnknownUnits>(void)
		public ??0?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@QAE@XZ
??0?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@QAE@XZ proc near
					; CODE XREF: mozilla::gfx::DrawTarget::DrawTarget(void)+68p
					; mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern const &)+F2p ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	??0?$BaseRect@HU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@U?$IntMarginTyped@UUnknownUnits@gfx@mozilla@@@23@@gfx@mozilla@@QAE@XZ ; mozilla::gfx::BaseRect<int,mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits>,mozilla::gfx::IntPointTyped<mozilla::gfx::UnknownUnits>,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>,mozilla::gfx::IntMarginTyped<mozilla::gfx::UnknownUnits>>::BaseRect<int,mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits>,mozilla::gfx::IntPointTyped<mozilla::gfx::UnknownUnits>,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>,mozilla::gfx::IntMarginTyped<mozilla::gfx::UnknownUnits>>(void)
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2094h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::gfx::Log<2, struct mozilla::gfx::BasicLogger>::Log<2, struct mozilla::gfx::BasicLogger>(int, enum	 mozilla::gfx::LogReason)
		public ??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z
??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z proc	near
					; CODE XREF: mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::SurfaceFormat)+162p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z
		mov	eax, large fs:0
		push	eax
		push	ecx
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		push	1
		push	3
		mov	ecx, [ebp+var_10]
		call	??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ;	std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>(int)
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax+0B0h], 0
		mov	ecx, [ebp+var_10]
		mov	byte ptr [ecx+0B8h], 0
		mov	edx, [ebp+arg_4]
		push	edx
		push	2		; int
		call	?ShouldOutputMessage@BasicLogger@gfx@mozilla@@SA_NH@Z ;	mozilla::gfx::BasicLogger::ShouldOutputMessage(int)
		add	esp, 4
		movzx	eax, al
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	ecx, [ebp+var_10]
		call	?Init@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@AAEXH_NW4LogReason@23@@Z	; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 2130h
; COMDAT (pick associative to section at 2094)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z$0 proc near
					; DATA XREF: .xdata$x:00008CACo
		mov	ecx, [ebp-10h]
		jmp	??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ;	std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`vbase destructor(void)
__unwindfunclet$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z proc near
					; DATA XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Log<2,mozilla::gfx::BasicLogger>(int,mozilla::gfx::LogReason)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-8]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2154h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; protected: __thiscall	mozilla::detail::RefCounted<class mozilla::gfx::DrawTarget, 1>::RefCounted<class mozilla::gfx::DrawTarget, 1>(void)
		public ??0?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ
??0?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ proc near
					; CODE XREF: mozilla::RefCounted<mozilla::gfx::DrawTarget>::RefCounted<mozilla::gfx::DrawTarget>(void)+11p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
??0?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2174h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::RefCounted<class mozilla::gfx::DrawTarget>::RefCounted<class mozilla::gfx::DrawTarget>(void)
		public ??0?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ
??0?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ proc near
					; CODE XREF: mozilla::gfx::DrawTarget::DrawTarget(void)+33p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	??0?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ ; mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::RefCounted<mozilla::gfx::DrawTarget,1>(void)
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 219Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; protected: __thiscall	mozilla::detail::RefCounted<class mozilla::gfx::SourceSurface, 0>::RefCounted<class mozilla::gfx::SourceSurface, 0>(void)
		public ??0?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@IAE@XZ
??0?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@IAE@XZ	proc near
					; CODE XREF: mozilla::external::AtomicRefCounted<mozilla::gfx::SourceSurface>::AtomicRefCounted<mozilla::gfx::SourceSurface>(void)+11p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		push	0
		mov	ecx, [ebp+var_4]
		call	??0?$Atomic@I$01X@mozilla@@QAE@I@Z ; mozilla::Atomic<uint,2,void>::Atomic<uint,2,void>(uint)
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@IAE@XZ	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 21C8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall RefPtr<class mozilla::gfx::DrawTarget>::RefPtr<class mozilla::gfx::DrawTarget>(class mozilla::gfx::DrawTarget *)
		public ??0?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@PAVDrawTarget@gfx@mozilla@@@Z
??0?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@PAVDrawTarget@gfx@mozilla@@@Z proc near
					; CODE XREF: mozilla::gfx::DrawTargetDual::DrawTargetDual(mozilla::gfx::DrawTarget *,mozilla::gfx::DrawTarget *)+4Fp
					; mozilla::gfx::DrawTargetDual::DrawTargetDual(mozilla::gfx::DrawTarget	*,mozilla::gfx::DrawTarget *)+62p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	[eax], ecx
		mov	edx, [ebp+var_4]
		cmp	dword ptr [edx], 0
		jz	short loc_21F4
		mov	eax, [ebp+var_4]
		mov	ecx, [eax]
		push	ecx
		call	?AddRef@?$AddRefTraits@VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@SAXPAVDrawTarget@gfx@mozilla@@@Z ;	RefPtr<mozilla::gfx::DrawTarget>::AddRefTraits<mozilla::gfx::DrawTarget>::AddRef(mozilla::gfx::DrawTarget *)
		add	esp, 4

loc_21F4:				; CODE XREF: RefPtr<mozilla::gfx::DrawTarget>::RefPtr<mozilla::gfx::DrawTarget>(mozilla::gfx::DrawTarget *)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@PAVDrawTarget@gfx@mozilla@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2208h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall RefPtr<class mozilla::gfx::DrawTargetDual>::RefPtr<class mozilla::gfx::DrawTargetDual>(class mozilla::gfx::DrawTargetDual *)
		public ??0?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAE@PAVDrawTargetDual@gfx@mozilla@@@Z
??0?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAE@PAVDrawTargetDual@gfx@mozilla@@@Z proc near
					; CODE XREF: mozilla::MakeAndAddRef<mozilla::gfx::DrawTargetDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)+ADp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	[eax], ecx
		mov	edx, [ebp+var_4]
		cmp	dword ptr [edx], 0
		jz	short loc_2234
		mov	eax, [ebp+var_4]
		mov	ecx, [eax]
		push	ecx
		call	?AddRef@?$AddRefTraits@VDrawTargetDual@gfx@mozilla@@@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@SAXPAVDrawTargetDual@gfx@mozilla@@@Z ; RefPtr<mozilla::gfx::DrawTargetDual>::AddRefTraits<mozilla::gfx::DrawTargetDual>::AddRef(mozilla::gfx::DrawTargetDual *)
		add	esp, 4

loc_2234:				; CODE XREF: RefPtr<mozilla::gfx::DrawTargetDual>::RefPtr<mozilla::gfx::DrawTargetDual>(mozilla::gfx::DrawTargetDual *)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAE@PAVDrawTargetDual@gfx@mozilla@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2248h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall RefPtr<class mozilla::gfx::SourceSurface>::RefPtr<class mozilla::gfx::SourceSurface>(class	mozilla::gfx::SourceSurface *)
		public ??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z
??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z proc near
					; CODE XREF: mozilla::gfx::SurfacePattern::SurfacePattern(mozilla::gfx::SourceSurface *,mozilla::gfx::ExtendMode,mozilla::gfx::Matrix const &,mozilla::gfx::Filter,mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const	&)+4Fp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	[eax], ecx
		mov	edx, [ebp+var_4]
		cmp	dword ptr [edx], 0
		jz	short loc_2274
		mov	eax, [ebp+var_4]
		mov	ecx, [eax]
		push	ecx
		call	?AddRef@?$AddRefTraits@VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@SAXPAVSourceSurface@gfx@mozilla@@@Z ; RefPtr<mozilla::gfx::SourceSurface>::AddRefTraits<mozilla::gfx::SourceSurface>::AddRef(mozilla::gfx::SourceSurface *)
		add	esp, 4

loc_2274:				; CODE XREF: RefPtr<mozilla::gfx::SourceSurface>::RefPtr<mozilla::gfx::SourceSurface>(mozilla::gfx::SourceSurface *)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2288h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall RefPtr<class mozilla::gfx::SourceSurfaceDual>::RefPtr<class mozilla::gfx::SourceSurfaceDual>(class	mozilla::gfx::SourceSurfaceDual	*)
		public ??0?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAE@PAVSourceSurfaceDual@gfx@mozilla@@@Z
??0?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAE@PAVSourceSurfaceDual@gfx@mozilla@@@Z proc near
					; CODE XREF: mozilla::MakeAndAddRef<mozilla::gfx::SourceSurfaceDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget>	&>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)+ADp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	[eax], ecx
		mov	edx, [ebp+var_4]
		cmp	dword ptr [edx], 0
		jz	short loc_22B4
		mov	eax, [ebp+var_4]
		mov	ecx, [eax]
		push	ecx
		call	?AddRef@?$AddRefTraits@VSourceSurfaceDual@gfx@mozilla@@@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@SAXPAVSourceSurfaceDual@gfx@mozilla@@@Z ; RefPtr<mozilla::gfx::SourceSurfaceDual>::AddRefTraits<mozilla::gfx::SourceSurfaceDual>::AddRef(mozilla::gfx::SourceSurfaceDual *)
		add	esp, 4

loc_22B4:				; CODE XREF: RefPtr<mozilla::gfx::SourceSurfaceDual>::RefPtr<mozilla::gfx::SourceSurfaceDual>(mozilla::gfx::SourceSurfaceDual *)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAE@PAVSourceSurfaceDual@gfx@mozilla@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 22C8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char,	class std::allocator<char>>>::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(class std::allocator<char> const &)
		public ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z	proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+27p
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+42p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
		mov	eax, large fs:0
		push	eax
		push	ecx
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	ecx, [ebp+var_10]
		call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ;	std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)
		mov	[ebp+var_4], 0
		mov	ecx, [ebp+var_10]
		call	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ	; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 2334h
; COMDAT (pick associative to section at 22C8)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
					; DATA XREF: .xdata$x:0000864Co
		mov	ecx, [ebp-10h]
		jmp	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ;	std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
					; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char>	const &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-8]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2358h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::_String_val<struct std::_Simple_types<char>>(void)
		public ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char>	const &)+30p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_4] ; this
		call	dword ptr ds:__imp_??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+14h], 0
		mov	ecx, [ebp+var_4]
		mov	dword ptr [ecx+18h], 0
		mov	eax, [ebp+var_4]
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 23A0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::_Wrap_alloc<class std::allocator<char>>::_Wrap_alloc<class std::allocator<char>>(void)
		public ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)+11p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 23C8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::allocator<char>::allocator<char>(void)
		public ??0?$allocator@D@std@@QAE@XZ
??0?$allocator@D@std@@QAE@XZ proc near	; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)+11p
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+39p ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
??0?$allocator@D@std@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 23E0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::allocator<struct std::_Container_proxy>::allocator<struct std::_Container_proxy>(void)
		public ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc	near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+23p
					; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+1Ep

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 23F8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall already_AddRefed<class mozilla::gfx::DrawTarget>::already_AddRefed<class mozilla::gfx::DrawTarget>(void (__thiscall already_AddRefed<class	mozilla::gfx::DrawTarget>::*)(double, float))
		public ??0?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@P80@AEXNM@Z@Z
??0?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@P80@AEXNM@Z@Z proc	near
					; CODE XREF: mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::SurfaceFormat)+1A3p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn	4
??0?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@P80@AEXNM@Z@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2418h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall already_AddRefed<class mozilla::gfx::DrawTargetDual>::already_AddRefed<class mozilla::gfx::DrawTargetDual>(class mozilla::gfx::DrawTargetDual *)
		public ??0?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAE@PAVDrawTargetDual@gfx@mozilla@@@Z
??0?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAE@PAVDrawTargetDual@gfx@mozilla@@@Z proc	near
					; CODE XREF: RefPtr<mozilla::gfx::DrawTargetDual>::forget(void)+3Ep

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	[eax], ecx
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn	4
??0?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAE@PAVDrawTargetDual@gfx@mozilla@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2438h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall already_AddRefed<class mozilla::gfx::SourceSurfaceDual>::already_AddRefed<class mozilla::gfx::SourceSurfaceDual>(class mozilla::gfx::SourceSurfaceDual *)
		public ??0?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAE@PAVSourceSurfaceDual@gfx@mozilla@@@Z
??0?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAE@PAVSourceSurfaceDual@gfx@mozilla@@@Z proc near
					; CODE XREF: RefPtr<mozilla::gfx::SourceSurfaceDual>::forget(void)+3Ep

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	[eax], ecx
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn	4
??0?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAE@PAVSourceSurfaceDual@gfx@mozilla@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2458h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::atomic<unsigned int>::atomic<unsigned	int>(unsigned int)
		public ??0?$atomic@I@std@@QAE@I@Z
??0?$atomic@I@std@@QAE@I@Z proc	near	; CODE XREF: mozilla::detail::AtomicBase<uint,2>::AtomicBase<uint,2>(uint)+1Ep

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_4]
		call	??4atomic_uint@std@@QAEII@Z ; std::atomic_uint::operator=(uint)
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0?$atomic@I@std@@QAE@I@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2488h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>	&&)
		public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z proc near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+CAp
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+159p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		lea	eax, [ebp+var_8+3]
		push	eax
		mov	ecx, [ebp+arg_0]
		call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
		push	eax
		mov	ecx, [ebp+var_4]
		call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z	; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
		push	0		; Size
		push	0		; char
		mov	ecx, [ebp+var_4]
		call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &)
		add	esp, 4
		push	eax
		mov	ecx, [ebp+var_4]
		call	?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z	; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)
		mov	eax, [ebp+var_4]
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 24E8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char *Str)
		public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
					; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Flush(void)+84p
					; std::_Generic_error_category::message(int)+57p ...

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Str		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 8
		mov	[ebp+var_14], 0CCCCCCCCh
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		lea	ecx, [ebp+var_14+3]
		call	??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
		push	eax
		mov	ecx, [ebp+var_10]
		call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z	; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
		mov	[ebp+var_4], 0
		push	0		; Size
		push	0		; char
		mov	ecx, [ebp+var_10]
		call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
		mov	eax, [ebp+Str]
		push	eax		; Str
		mov	ecx, [ebp+var_10]
		call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 2574h
; COMDAT (pick associative to section at 24E8)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
					; DATA XREF: .xdata$x:000086D0o
		mov	ecx, [ebp-10h]
		jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
					; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0Ch]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2598h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void *Src, size_t Size)
		public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z proc	near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+BEp
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+14Dp

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 8
		mov	[ebp+var_14], 0CCCCCCCCh
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		lea	ecx, [ebp+var_14+3]
		call	??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
		push	eax
		mov	ecx, [ebp+var_10]
		call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z	; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
		mov	[ebp+var_4], 0
		push	0		; Size
		push	0		; char
		mov	ecx, [ebp+var_10]
		call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
		mov	eax, [ebp+Size]
		push	eax		; Size
		mov	ecx, [ebp+Src]
		push	ecx		; Src
		mov	ecx, [ebp+var_10]
		call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char	const *,uint)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 2628h
; COMDAT (pick associative to section at 2598)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z$0 proc near
					; DATA XREF: .xdata$x:000086A4o
		mov	ecx, [ebp-10h]
		jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z proc near
					; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *,uint)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0Ch]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 264Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
		public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+179p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
		mov	eax, large fs:0
		push	eax
		sub	esp, 8
		mov	[ebp+var_14], 0CCCCCCCCh
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		lea	ecx, [ebp+var_14+3]
		call	??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
		push	eax
		mov	ecx, [ebp+var_10]
		call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z	; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
		mov	[ebp+var_4], 0
		push	0		; Size
		push	0		; char
		mov	ecx, [ebp+var_10]
		call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 26CCh
; COMDAT (pick associative to section at 264C)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
					; DATA XREF: .xdata$x:00008678o
		mov	ecx, [ebp-10h]
		jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc	near
					; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0Ch]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 26F0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::basic_stringbuf<char,	struct std::char_traits<char>, class std::allocator<char>>::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>(int)
		public ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z proc	near
					; CODE XREF: std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>(int)+D4p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
		mov	eax, large fs:0
		push	eax
		push	ecx
		push	esi
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_10]
		call	dword ptr ds:__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char>>::basic_streambuf<char,std::char_traits<char>>(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], offset	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@	; const	std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`vftable'
		mov	ecx, [ebp+var_10]
		add	ecx, 40h ; '@'
		call	??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	ecx, [ebp+var_10]
		call	?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Getstate(int)
		push	eax		; int
		push	0		; Size
		push	0		; Src
		mov	ecx, [ebp+var_10]
		call	?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char	const *,uint,int)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	esi
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 278Ch
; COMDAT (pick associative to section at 26F0)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0 proc near
					; DATA XREF: .xdata$x:00008C4Co
		mov	esi, esp
		mov	ecx, [ebp-10h]
		call	dword ptr ds:__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char>>::~basic_streambuf<char,std::char_traits<char>>(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z proc near
					; DATA XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(int)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0Ch]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 27BCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::basic_stringstream<char, struct std::char_traits<char>, class	std::allocator<char>>::basic_stringstream<char,	struct std::char_traits<char>, class std::allocator<char>>(int)
		public ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z proc near
					; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Log<2,mozilla::gfx::BasicLogger>(int,mozilla::gfx::LogReason)+34p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 8
		push	esi
		mov	[ebp+var_14], 0CCCCCCCCh
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	[ebp+var_14], 0
		cmp	[ebp+arg_4], 0
		jz	short loc_2838
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], offset	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; const std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`vbtable'{for `std::basic_istream<char,std::char_traits<char>>'}
		mov	ecx, [ebp+var_10]
		mov	dword ptr [ecx+10h], offset ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; const std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`vbtable'{for `std::basic_ostream<char,std::char_traits<char>>'}
		mov	ecx, [ebp+var_10]
		add	ecx, 68h ; 'h'
		mov	esi, esp
		call	dword ptr ds:__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ;	std::basic_ios<char,std::char_traits<char>>::basic_ios<char,std::char_traits<char>>(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0
		mov	edx, [ebp+var_14]
		or	edx, 1
		mov	[ebp+var_14], edx

loc_2838:				; CODE XREF: std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>(int)+42j
		mov	esi, esp
		push	0
		mov	eax, [ebp+var_10]
		add	eax, 18h
		push	eax
		mov	ecx, [ebp+var_10]
		call	dword ptr ds:__imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::basic_iostream<char,std::char_traits<char>>::basic_iostream<char,std::char_traits<char>>(std::basic_streambuf<char,std::char_traits<char>> *)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 1
		mov	ecx, [ebp+var_10]
		mov	edx, [ecx]
		mov	eax, [edx+4]
		mov	ecx, [ebp+var_10]
		mov	dword ptr [ecx+eax], offset ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; const std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`vftable'
		mov	edx, [ebp+var_10]
		mov	eax, [edx]
		mov	ecx, [eax+4]
		sub	ecx, 68h ; 'h'
		mov	edx, [ebp+var_10]
		mov	eax, [edx]
		mov	edx, [eax+4]
		mov	eax, [ebp+var_10]
		mov	[eax+edx-4], ecx
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	ecx, [ebp+var_10]
		add	ecx, 18h
		call	??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(int)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	esi
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 28BCh
; COMDAT (pick associative to section at 27BC)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0	proc near
					; DATA XREF: .xdata$x:00008C18o
		mov	eax, [ebp-14h]
		and	eax, 1
		jz	$LN5_10
		and	dword ptr [ebp-14h], 0FFFFFFFEh
		mov	ecx, [ebp-10h]
		add	ecx, 68h ; 'h'
		mov	esi, esp
		call	dword ptr ds:__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ;	std::basic_ios<char,std::char_traits<char>>::~basic_ios<char,std::char_traits<char>>(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
; ---------------------------------------------------------------------------

$LN5_10:				; CODE XREF: __unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0+6j
		retn
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0	endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1	proc near
					; DATA XREF: .xdata$x:00008C20o
		mov	ecx, [ebp-10h]
		add	ecx, 20h ; ' '
		mov	esi, esp
		call	dword ptr ds:__imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char>>::~basic_iostream<char,std::char_traits<char>>(void)
		cmp	esi, esp
		jmp	__RTC_CheckEsp
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1	endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z proc near
					; DATA XREF: std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>(int)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-10h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2914h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::fpos<int>::fpos<int>(__int64)
		public ??0?$fpos@H@std@@QAE@_J@Z
??0?$fpos@H@std@@QAE@_J@Z proc near	; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+3A2p
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+2BFp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	[eax], ecx
		mov	edx, [ebp+arg_4]
		mov	[eax+4], edx
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+8], 0
		mov	dword ptr [eax+0Ch], 0
		mov	ecx, [ebp+var_4]
		mov	dword ptr [ecx+10h], 0
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn	8
??0?$fpos@H@std@@QAE@_J@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2954h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall mozilla::gfx::DrawTarget::DrawTarget(mozilla::gfx::DrawTarget *__hidden this)
		public ??0DrawTarget@gfx@mozilla@@QAE@XZ
??0DrawTarget@gfx@mozilla@@QAE@XZ proc near
					; CODE XREF: mozilla::gfx::DrawTargetDual::DrawTargetDual(mozilla::gfx::DrawTarget *,mozilla::gfx::DrawTarget *)+30p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0DrawTarget@gfx@mozilla@@QAE@XZ
		mov	eax, large fs:0
		push	eax
		push	ecx
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	ecx, [ebp+var_10]
		add	ecx, 4
		call	??0?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ ; mozilla::RefCounted<mozilla::gfx::DrawTarget>::RefCounted<mozilla::gfx::DrawTarget>(void)
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], offset	??_7DrawTarget@gfx@mozilla@@6B@	; const	mozilla::gfx::DrawTarget::`vftable'
		mov	ecx, [ebp+var_10]
		add	ecx, 8		; this
		call	??0UserData@gfx@mozilla@@QAE@XZ	; mozilla::gfx::UserData::UserData(void)
		mov	byte ptr [ebp+var_4], 1
		mov	ecx, [ebp+var_10]
		add	ecx, 10h	; this
		call	??0Matrix@gfx@mozilla@@QAE@XZ ;	mozilla::gfx::Matrix::Matrix(void)
		mov	ecx, [ebp+var_10]
		add	ecx, 28h ; '('
		call	??0?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@QAE@XZ ; mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits>::IntRectTyped<mozilla::gfx::UnknownUnits>(void)
		mov	ecx, [ebp+var_10]
		mov	dl, [ecx+38h]
		and	dl, 0FEh
		mov	eax, [ebp+var_10]
		mov	[eax+38h], dl
		mov	ecx, [ebp+var_10]
		mov	dl, [ecx+38h]
		and	dl, 0FDh
		mov	eax, [ebp+var_10]
		mov	[eax+38h], dl
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0DrawTarget@gfx@mozilla@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 2A04h
; COMDAT (pick associative to section at 2954)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0DrawTarget@gfx@mozilla@@QAE@XZ$0 proc near
					; DATA XREF: .xdata$x:00008838o
		mov	ecx, [ebp-10h]
		add	ecx, 4
		jmp	??1?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ ; mozilla::RefCounted<mozilla::gfx::DrawTarget>::~RefCounted<mozilla::gfx::DrawTarget>(void)
__unwindfunclet$??0DrawTarget@gfx@mozilla@@QAE@XZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0DrawTarget@gfx@mozilla@@QAE@XZ$1 proc near
					; DATA XREF: .xdata$x:00008840o
		mov	ecx, [ebp-10h]
		add	ecx, 8		; this
		jmp	??1UserData@gfx@mozilla@@QAE@XZ	; mozilla::gfx::UserData::~UserData(void)
__unwindfunclet$??0DrawTarget@gfx@mozilla@@QAE@XZ$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0DrawTarget@gfx@mozilla@@QAE@XZ proc near
					; DATA XREF: mozilla::gfx::DrawTarget::DrawTarget(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-8]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0DrawTarget@gfx@mozilla@@QAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??0DrawTarget@gfx@mozilla@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2A38h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall mozilla::gfx::DrawTargetDual::DrawTargetDual(mozilla::gfx::DrawTargetDual *this, struct mozilla::gfx::DrawTarget *,	struct mozilla::gfx::DrawTarget	*)
		public ??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z
??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z	proc near
					; CODE XREF: mozilla::MakeAndAddRef<mozilla::gfx::DrawTargetDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)+8Bp

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z
		mov	eax, large fs:0
		push	eax
		push	ecx
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	ecx, [ebp+var_10] ; this
		call	??0DrawTarget@gfx@mozilla@@QAE@XZ ; mozilla::gfx::DrawTarget::DrawTarget(void)
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], offset	??_7DrawTargetDual@gfx@mozilla@@6B@ ; const mozilla::gfx::DrawTargetDual::`vftable'
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	ecx, [ebp+var_10]
		add	ecx, 3Ch ; '<'
		call	??0?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@PAVDrawTarget@gfx@mozilla@@@Z ; RefPtr<mozilla::gfx::DrawTarget>::RefPtr<mozilla::gfx::DrawTarget>(mozilla::gfx::DrawTarget *)
		mov	byte ptr [ebp+var_4], 1
		mov	edx, [ebp+arg_4]
		push	edx
		mov	ecx, [ebp+var_10]
		add	ecx, 40h ; '@'
		call	??0?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@PAVDrawTarget@gfx@mozilla@@@Z ; RefPtr<mozilla::gfx::DrawTarget>::RefPtr<mozilla::gfx::DrawTarget>(mozilla::gfx::DrawTarget *)
		mov	byte ptr [ebp+var_4], 2
		mov	ecx, [ebp+arg_0]
		call	?GetFormat@DrawTarget@gfx@mozilla@@QBE?AW4SurfaceFormat@23@XZ ;	mozilla::gfx::DrawTarget::GetFormat(void)
		mov	ecx, [ebp+var_10]
		mov	[ecx+39h], al
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 2AD8h
; COMDAT (pick associative to section at 2A38)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$0 proc near
					; DATA XREF: .xdata$x:00008964o
		mov	ecx, [ebp-10h]	; this
		jmp	??1DrawTarget@gfx@mozilla@@UAE@XZ ; mozilla::gfx::DrawTarget::~DrawTarget(void)
__unwindfunclet$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$1 proc near
					; DATA XREF: .xdata$x:0000896Co
		mov	ecx, [ebp-10h]
		add	ecx, 3Ch ; '<'
		jmp	??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ ;	RefPtr<mozilla::gfx::DrawTarget>::~RefPtr<mozilla::gfx::DrawTarget>(void)
__unwindfunclet$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$2 proc near
					; DATA XREF: .xdata$x:00008974o
		mov	ecx, [ebp-10h]
		add	ecx, 40h ; '@'
		jmp	??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ ;	RefPtr<mozilla::gfx::DrawTarget>::~RefPtr<mozilla::gfx::DrawTarget>(void)
__unwindfunclet$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$2 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z proc near
					; DATA XREF: mozilla::gfx::DrawTargetDual::DrawTargetDual(mozilla::gfx::DrawTarget *,mozilla::gfx::DrawTarget *)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-8]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2B14h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::DualPattern *this, const struct mozilla::gfx::Pattern *)
		public ??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z
??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z proc near
					; CODE XREF: mozilla::gfx::DrawTargetDual::MaskSurface(mozilla::gfx::Pattern const &,mozilla::gfx::SourceSurface *,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::DrawOptions	const &)+4Ep
					; mozilla::gfx::DrawTargetDual::FillRect(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::Pattern const &,mozilla::gfx::DrawOptions const &)+4Ep ...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 50h
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_5C]
		mov	ecx, 14h
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	eax, [ebp+var_10]
		mov	byte ptr [eax+70h], 0
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	esi, esp
		mov	ecx, [ebp+arg_0]
		mov	eax, [edx+4]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	al, 1
		jz	short loc_2B87
		mov	ecx, [ebp+var_10]
		mov	edx, [ebp+arg_0]
		mov	[ecx+6Ch], edx
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+arg_0]
		mov	[eax+68h], ecx
		jmp	loc_2CE2
; ---------------------------------------------------------------------------

loc_2B87:				; CODE XREF: mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern const	&)+5Aj
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_14], edx
		mov	ecx, [ebp+var_14]
		add	ecx, 4
		call	??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ ;	RefPtr<mozilla::gfx::SourceSurface>::operator->(void)
		mov	[ebp+var_54], eax
		mov	eax, [ebp+var_54]
		mov	edx, [eax]
		mov	esi, esp
		mov	ecx, [ebp+var_54]
		mov	eax, [edx+4]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	al, 8
		jz	short loc_2BCC
		mov	ecx, [ebp+var_10]
		mov	edx, [ebp+arg_0]
		mov	[ecx+6Ch], edx
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+arg_0]
		mov	[eax+68h], ecx
		jmp	loc_2CE2
; ---------------------------------------------------------------------------

loc_2BCC:				; CODE XREF: mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern const	&)+9Fj
		mov	ecx, [ebp+var_14]
		add	ecx, 4
		call	?get@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::SourceSurface>::get(void)
		mov	[ebp+var_18], eax
		mov	ecx, [ebp+var_10]
		call	?addr@?$ClassStorage@VSurfacePattern@gfx@mozilla@@@gfx@mozilla@@QAEPAVSurfacePattern@23@XZ ; mozilla::gfx::ClassStorage<mozilla::gfx::SurfacePattern>::addr(void)
		mov	[ebp+var_24], eax
		mov	edx, [ebp+var_24]
		push	edx		; void *
		push	34h ; '4'       ; unsigned int
		call	??2@YAPAXIPAX@Z	; operator new(uint,void *)
		add	esp, 8
		mov	[ebp+var_20], eax
		mov	[ebp+var_4], 0
		cmp	[ebp+var_20], 0
		jz	short loc_2C3C
		lea	ecx, [ebp+var_34]
		call	??0?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@QAE@XZ ; mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits>::IntRectTyped<mozilla::gfx::UnknownUnits>(void)
		push	eax
		mov	eax, [ebp+var_14]
		movzx	ecx, byte ptr [eax+9]
		push	ecx
		mov	edx, [ebp+var_14]
		add	edx, 0Ch
		push	edx
		mov	eax, [ebp+var_14]
		movzx	ecx, byte ptr [eax+8]
		push	ecx
		mov	ecx, [ebp+var_18]
		add	ecx, 10h
		call	??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ ;	RefPtr<mozilla::gfx::SourceSurface>::operator mozilla::gfx::SourceSurface *(void)
		push	eax
		mov	ecx, [ebp+var_20]
		call	??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z ; mozilla::gfx::SurfacePattern::SurfacePattern(mozilla::gfx::SourceSurface *,mozilla::gfx::ExtendMode,mozilla::gfx::Matrix const &,mozilla::gfx::Filter,mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const &)
		mov	[ebp+var_58], eax
		jmp	short loc_2C43
; ---------------------------------------------------------------------------

loc_2C3C:				; CODE XREF: mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern const	&)+EDj
		mov	[ebp+var_58], 0

loc_2C43:				; CODE XREF: mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern const	&)+126j
		mov	edx, [ebp+var_58]
		mov	[ebp+var_1C], edx
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_1C]
		mov	[eax+68h], ecx
		mov	ecx, [ebp+var_10]
		add	ecx, 34h ; '4'
		call	?addr@?$ClassStorage@VSurfacePattern@gfx@mozilla@@@gfx@mozilla@@QAEPAVSurfacePattern@23@XZ ; mozilla::gfx::ClassStorage<mozilla::gfx::SurfacePattern>::addr(void)
		mov	[ebp+var_40], eax
		mov	edx, [ebp+var_40]
		push	edx		; void *
		push	34h ; '4'       ; unsigned int
		call	??2@YAPAXIPAX@Z	; operator new(uint,void *)
		add	esp, 8
		mov	[ebp+var_3C], eax
		mov	[ebp+var_4], 1
		cmp	[ebp+var_3C], 0
		jz	short loc_2CBE
		lea	ecx, [ebp+var_50]
		call	??0?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@QAE@XZ ; mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits>::IntRectTyped<mozilla::gfx::UnknownUnits>(void)
		push	eax
		mov	eax, [ebp+var_14]
		movzx	ecx, byte ptr [eax+9]
		push	ecx
		mov	edx, [ebp+var_14]
		add	edx, 0Ch
		push	edx
		mov	eax, [ebp+var_14]
		movzx	ecx, byte ptr [eax+8]
		push	ecx
		mov	ecx, [ebp+var_18]
		add	ecx, 14h
		call	??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ ;	RefPtr<mozilla::gfx::SourceSurface>::operator mozilla::gfx::SourceSurface *(void)
		push	eax
		mov	ecx, [ebp+var_3C]
		call	??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z ; mozilla::gfx::SurfacePattern::SurfacePattern(mozilla::gfx::SourceSurface *,mozilla::gfx::ExtendMode,mozilla::gfx::Matrix const &,mozilla::gfx::Filter,mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const &)
		mov	[ebp+var_5C], eax
		jmp	short loc_2CC5
; ---------------------------------------------------------------------------

loc_2CBE:				; CODE XREF: mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern const	&)+16Fj
		mov	[ebp+var_5C], 0

loc_2CC5:				; CODE XREF: mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern const	&)+1A8j
		mov	edx, [ebp+var_5C]
		mov	[ebp+var_38], edx
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_38]
		mov	[eax+6Ch], ecx
		mov	edx, [ebp+var_10]
		mov	byte ptr [edx+70h], 1

loc_2CE2:				; CODE XREF: mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern const	&)+6Ej
					; mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern const &)+B3j
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		add	esp, 5Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 2D04h
; COMDAT (pick associative to section at 2B14)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z$0 proc	near
					; DATA XREF: .xdata$x:00008C78o
		mov	eax, [ebp-24h]
		push	eax
		mov	eax, [ebp-20h]
		push	eax		; void *
		call	??3@YAXPAX0@Z	; operator delete(void *,void *)
		add	esp, 8
		retn
__unwindfunclet$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z$1 proc	near
					; DATA XREF: .xdata$x:00008C80o
		mov	eax, [ebp-40h]
		push	eax
		mov	eax, [ebp-3Ch]
		push	eax		; void *
		call	??3@YAXPAX0@Z	; operator delete(void *,void *)
		add	esp, 8
		retn
__unwindfunclet$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z proc near
					; DATA XREF: mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern const	&)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-5Ch]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2D44h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall mozilla::gfx::DualSurface::DualSurface(mozilla::gfx::DualSurface *this, struct mozilla::gfx::SourceSurface *)
		public ??0DualSurface@gfx@mozilla@@QAE@PAVSourceSurface@12@@Z
??0DualSurface@gfx@mozilla@@QAE@PAVSourceSurface@12@@Z proc near
					; CODE XREF: mozilla::gfx::DrawTargetDual::DrawSurface(mozilla::gfx::SourceSurface *,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::DrawSurfaceOptions const	&,mozilla::gfx::DrawOptions const &)+2Bp
					; mozilla::gfx::DrawTargetDual::MaskSurface(mozilla::gfx::Pattern const	&,mozilla::gfx::SourceSurface *,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::DrawOptions const &)+64p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		push	esi
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		cmp	[ebp+arg_0], 0
		jnz	short loc_2D77
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+4], 0
		mov	ecx, [ebp+var_4]
		mov	dword ptr [ecx], 0
		jmp	short loc_2DCB
; ---------------------------------------------------------------------------

loc_2D77:				; CODE XREF: mozilla::gfx::DualSurface::DualSurface(mozilla::gfx::SourceSurface	*)+1Cj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	esi, esp
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+4]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	al, 8
		jz	short loc_2DA4
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	[eax+4], ecx
		mov	edx, [ebp+var_4]
		mov	eax, [ebp+arg_0]
		mov	[edx], eax
		jmp	short loc_2DCB
; ---------------------------------------------------------------------------

loc_2DA4:				; CODE XREF: mozilla::gfx::DualSurface::DualSurface(mozilla::gfx::SourceSurface	*)+4Bj
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_8], ecx
		mov	ecx, [ebp+var_8]
		add	ecx, 10h
		call	??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ ;	RefPtr<mozilla::gfx::SourceSurface>::operator mozilla::gfx::SourceSurface *(void)
		mov	edx, [ebp+var_4]
		mov	[edx], eax
		mov	ecx, [ebp+var_8]
		add	ecx, 14h
		call	??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ ;	RefPtr<mozilla::gfx::SourceSurface>::operator mozilla::gfx::SourceSurface *(void)
		mov	ecx, [ebp+var_4]
		mov	[ecx+4], eax

loc_2DCB:				; CODE XREF: mozilla::gfx::DualSurface::DualSurface(mozilla::gfx::SourceSurface	*)+31j
					; mozilla::gfx::DualSurface::DualSurface(mozilla::gfx::SourceSurface *)+5Ej
		mov	eax, [ebp+var_4]
		pop	esi
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0DualSurface@gfx@mozilla@@QAE@PAVSourceSurface@12@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2DE0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall mozilla::gfx::Matrix::Matrix(mozilla::gfx::Matrix *__hidden	this)
		public ??0Matrix@gfx@mozilla@@QAE@XZ
??0Matrix@gfx@mozilla@@QAE@XZ proc near	; CODE XREF: mozilla::gfx::DrawTarget::DrawTarget(void)+5Dp

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		movss	xmm0, ds:__real@3f800000
		movss	dword ptr [eax], xmm0
		mov	ecx, [ebp+var_4]
		movss	xmm0, ds:__real@00000000
		movss	dword ptr [ecx+4], xmm0
		mov	edx, [ebp+var_4]
		movss	xmm0, ds:__real@00000000
		movss	dword ptr [edx+8], xmm0
		mov	eax, [ebp+var_4]
		movss	xmm0, ds:__real@3f800000
		movss	dword ptr [eax+0Ch], xmm0
		mov	ecx, [ebp+var_4]
		movss	xmm0, ds:__real@00000000
		movss	dword ptr [ecx+10h], xmm0
		mov	edx, [ebp+var_4]
		movss	xmm0, ds:__real@00000000
		movss	dword ptr [edx+14h], xmm0
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
??0Matrix@gfx@mozilla@@QAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2E54h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall mozilla::gfx::Pattern::Pattern(mozilla::gfx::Pattern *__hidden this)
		public ??0Pattern@gfx@mozilla@@IAE@XZ
??0Pattern@gfx@mozilla@@IAE@XZ proc near
					; CODE XREF: mozilla::gfx::SurfacePattern::SurfacePattern(mozilla::gfx::SourceSurface *,mozilla::gfx::ExtendMode,mozilla::gfx::Matrix const &,mozilla::gfx::Filter,mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const	&)+30p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax], offset	??_7Pattern@gfx@mozilla@@6B@ ; const mozilla::gfx::Pattern::`vftable'
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
??0Pattern@gfx@mozilla@@IAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2E74h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall mozilla::gfx::SourceSurface::SourceSurface(mozilla::gfx::SourceSurface *__hidden this)
		public ??0SourceSurface@gfx@mozilla@@QAE@XZ
??0SourceSurface@gfx@mozilla@@QAE@XZ proc near
					; CODE XREF: mozilla::gfx::SourceSurfaceDual::SourceSurfaceDual(mozilla::gfx::DrawTarget *,mozilla::gfx::DrawTarget *)+46p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0SourceSurface@gfx@mozilla@@QAE@XZ
		mov	eax, large fs:0
		push	eax
		push	ecx
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	ecx, [ebp+var_10]
		add	ecx, 4
		call	??0?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ ; mozilla::external::AtomicRefCounted<mozilla::gfx::SourceSurface>::AtomicRefCounted<mozilla::gfx::SourceSurface>(void)
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], offset	??_7SourceSurface@gfx@mozilla@@6B@ ; const mozilla::gfx::SourceSurface::`vftable'
		mov	ecx, [ebp+var_10]
		add	ecx, 8		; this
		call	??0UserData@gfx@mozilla@@QAE@XZ	; mozilla::gfx::UserData::UserData(void)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0SourceSurface@gfx@mozilla@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 2EECh
; COMDAT (pick associative to section at 2E74)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0SourceSurface@gfx@mozilla@@QAE@XZ$0 proc near
					; DATA XREF: .xdata$x:0000880Co
		mov	ecx, [ebp-10h]
		add	ecx, 4
		jmp	??1?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ ; mozilla::external::AtomicRefCounted<mozilla::gfx::SourceSurface>::~AtomicRefCounted<mozilla::gfx::SourceSurface>(void)
__unwindfunclet$??0SourceSurface@gfx@mozilla@@QAE@XZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0SourceSurface@gfx@mozilla@@QAE@XZ proc near
					; DATA XREF: mozilla::gfx::SourceSurface::SourceSurface(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-8]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0SourceSurface@gfx@mozilla@@QAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??0SourceSurface@gfx@mozilla@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2F14h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall mozilla::gfx::SourceSurfaceDual::SourceSurfaceDual(mozilla::gfx::SourceSurfaceDual *this, struct mozilla::gfx::DrawTarget *, struct	mozilla::gfx::DrawTarget *)
		public ??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z
??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z proc	near
					; CODE XREF: mozilla::MakeAndAddRef<mozilla::gfx::SourceSurfaceDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget>	&>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)+8Bp

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 1Ch
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_28], eax
		mov	[ebp+var_24], eax
		mov	[ebp+var_20], eax
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	ecx, [ebp+var_10] ; this
		call	??0SourceSurface@gfx@mozilla@@QAE@XZ ; mozilla::gfx::SourceSurface::SourceSurface(void)
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], offset	??_7SourceSurfaceDual@gfx@mozilla@@6B@ ; const mozilla::gfx::SourceSurfaceDual::`vftable'
		mov	esi, esp
		lea	ecx, [ebp+var_14]
		push	ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	ecx, [ebp+arg_0]
		mov	edx, [eax+14h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_20], eax
		mov	byte ptr [ebp+var_4], 1
		mov	ecx, [ebp+var_20]
		push	ecx
		mov	ecx, [ebp+var_10]
		add	ecx, 10h
		call	??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z ;	RefPtr<mozilla::gfx::SourceSurface>::RefPtr<mozilla::gfx::SourceSurface>(already_AddRefed<mozilla::gfx::SourceSurface> &&)
		mov	byte ptr [ebp+var_4], 3
		lea	ecx, [ebp+var_14]
		call	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ ; already_AddRefed<mozilla::gfx::SourceSurface>::~already_AddRefed<mozilla::gfx::SourceSurface>(void)
		mov	esi, esp
		lea	edx, [ebp+var_18]
		push	edx
		mov	eax, [ebp+arg_4]
		mov	edx, [eax]
		mov	ecx, [ebp+arg_4]
		mov	eax, [edx+14h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_24], eax
		mov	ecx, [ebp+var_24]
		mov	[ebp+var_28], ecx
		mov	byte ptr [ebp+var_4], 4
		mov	edx, [ebp+var_28]
		push	edx
		mov	ecx, [ebp+var_10]
		add	ecx, 14h
		call	??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z ;	RefPtr<mozilla::gfx::SourceSurface>::RefPtr<mozilla::gfx::SourceSurface>(already_AddRefed<mozilla::gfx::SourceSurface> &&)
		mov	byte ptr [ebp+var_4], 6
		lea	ecx, [ebp+var_18]
		call	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ ; already_AddRefed<mozilla::gfx::SourceSurface>::~already_AddRefed<mozilla::gfx::SourceSurface>(void)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	esi
		add	esp, 28h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 301Ch
; COMDAT (pick associative to section at 2F14)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$0 proc near
					; DATA XREF: .xdata$x:000088F8o
		mov	ecx, [ebp-10h]	; this
		jmp	??1SourceSurface@gfx@mozilla@@UAE@XZ ; mozilla::gfx::SourceSurface::~SourceSurface(void)
__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$1 proc near
					; DATA XREF: .xdata$x:00008900o
		lea	ecx, [ebp-14h]
		jmp	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ ; already_AddRefed<mozilla::gfx::SourceSurface>::~already_AddRefed<mozilla::gfx::SourceSurface>(void)
__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$2 proc near
					; DATA XREF: .xdata$x:00008908o
					; .xdata$x:00008910o
		mov	ecx, [ebp-10h]
		add	ecx, 10h
		jmp	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ ; RefPtr<mozilla::gfx::SourceSurface>::~RefPtr<mozilla::gfx::SourceSurface>(void)
__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$2 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$3 proc near
					; DATA XREF: .xdata$x:00008918o
		lea	ecx, [ebp-18h]
		jmp	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ ; already_AddRefed<mozilla::gfx::SourceSurface>::~already_AddRefed<mozilla::gfx::SourceSurface>(void)
__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$3 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$4 proc near
					; DATA XREF: .xdata$x:00008920o
					; .xdata$x:00008928o
		mov	ecx, [ebp-10h]
		add	ecx, 14h
		jmp	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ ; RefPtr<mozilla::gfx::SourceSurface>::~RefPtr<mozilla::gfx::SourceSurface>(void)
__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$4 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z proc near
					; DATA XREF: mozilla::gfx::SourceSurfaceDual::SourceSurfaceDual(mozilla::gfx::DrawTarget *,mozilla::gfx::DrawTarget *)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-24h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3068h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::gfx::SurfacePattern::SurfacePattern(class	mozilla::gfx::SourceSurface *, enum  mozilla::gfx::ExtendMode, class mozilla::gfx::Matrix const	&, enum	 mozilla::gfx::Filter, struct mozilla::gfx::IntRectTyped<struct	mozilla::gfx::UnknownUnits> const &)
		public ??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z
??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z proc near
					; CODE XREF: mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern const	&)+11Ep
					; mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern const &)+1A0p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z
		mov	eax, large fs:0
		push	eax
		push	ecx
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	ecx, [ebp+var_10] ; this
		call	??0Pattern@gfx@mozilla@@IAE@XZ ; mozilla::gfx::Pattern::Pattern(void)
		mov	[ebp+var_4], 0
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], offset	??_7SurfacePattern@gfx@mozilla@@6B@ ; const mozilla::gfx::SurfacePattern::`vftable'
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	ecx, [ebp+var_10]
		add	ecx, 4
		call	??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z ; RefPtr<mozilla::gfx::SourceSurface>::RefPtr<mozilla::gfx::SourceSurface>(mozilla::gfx::SourceSurface *)
		mov	edx, [ebp+var_10]
		mov	al, [ebp+arg_4]
		mov	[edx+8], al
		mov	ecx, [ebp+var_10]
		mov	dl, [ebp+arg_C]
		mov	[ecx+9], dl
		mov	eax, [ebp+var_10]
		add	eax, 0Ch
		mov	ecx, [ebp+arg_8]
		mov	edx, [ecx]
		mov	[eax], edx
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	edx, [ecx+8]
		mov	[eax+8], edx
		mov	edx, [ecx+0Ch]
		mov	[eax+0Ch], edx
		mov	edx, [ecx+10h]
		mov	[eax+10h], edx
		mov	ecx, [ecx+14h]
		mov	[eax+14h], ecx
		mov	edx, [ebp+var_10]
		add	edx, 24h ; '$'
		mov	eax, [ebp+arg_10]
		mov	ecx, [eax]
		mov	[edx], ecx
		mov	ecx, [eax+4]
		mov	[edx+4], ecx
		mov	ecx, [eax+8]
		mov	[edx+8], ecx
		mov	eax, [eax+0Ch]
		mov	[edx+0Ch], eax
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	14h
??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 3140h
; COMDAT (pick associative to section at 3068)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z$0 proc near
					; DATA XREF: .xdata$x:00008788o
		mov	ecx, [ebp-10h]	; this
		jmp	??1Pattern@gfx@mozilla@@UAE@XZ ; mozilla::gfx::Pattern::~Pattern(void)
__unwindfunclet$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z	proc near
					; DATA XREF: mozilla::gfx::SurfacePattern::SurfacePattern(mozilla::gfx::SourceSurface *,mozilla::gfx::ExtendMode,mozilla::gfx::Matrix const &,mozilla::gfx::Filter,mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const	&)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-8]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3164h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall mozilla::gfx::UserData::UserData(mozilla::gfx::UserData *__hidden this)
		public ??0UserData@gfx@mozilla@@QAE@XZ
??0UserData@gfx@mozilla@@QAE@XZ	proc near
					; CODE XREF: mozilla::gfx::DrawTarget::DrawTarget(void)+4Ep
					; mozilla::gfx::SourceSurface::SourceSurface(void)+4Ep

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax], 0
		mov	ecx, [ebp+var_4]
		mov	dword ptr [ecx+4], 0
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
??0UserData@gfx@mozilla@@QAE@XZ	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 318Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall std::_Container_proxy::_Container_proxy(std::_Container_proxy *__hidden this)
		public ??0_Container_proxy@std@@QAE@XZ
??0_Container_proxy@std@@QAE@XZ	proc near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+3Ap

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax], 0
		mov	ecx, [ebp+var_4]
		mov	dword ptr [ecx+4], 0
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
??0_Container_proxy@std@@QAE@XZ	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 31B4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall std::_Generic_error_category::_Generic_error_category(std::_Generic_error_category *__hidden this)
		public ??0_Generic_error_category@std@@QAE@XZ
??0_Generic_error_category@std@@QAE@XZ proc near
					; CODE XREF: std::_Iostream_error_category::_Iostream_error_category(void)+11p
					; std::_System_error_category::_System_error_category(void)+11p ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??0error_category@std@@QAE@XZ ;	std::error_category::error_category(void)
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax], offset	??_7_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`vftable'
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0_Generic_error_category@std@@QAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 31E4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall std::_Iostream_error_category::_Iostream_error_category(std::_Iostream_error_category *__hidden this)
		public ??0_Iostream_error_category@std@@QAE@XZ
??0_Iostream_error_category@std@@QAE@XZ	proc near
					; CODE XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax], offset	??_7_Iostream_error_category@std@@6B@ ;	const std::_Iostream_error_category::`vftable'
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0_Iostream_error_category@std@@QAE@XZ	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3214h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::_Sentry_base::_Sentry_base(class std::basic_ostream<char,	struct std::char_traits<char>> &)
		public ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z proc near
					; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+35p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	[eax], ecx
		mov	edx, [ebp+var_4]
		mov	eax, [edx]
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		add	ecx, [edx+4]
		mov	esi, esp
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_3298
		mov	eax, [ebp+var_4]
		mov	ecx, [eax]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		mov	ecx, [ebp+var_C]
		add	ecx, [eax+4]
		mov	esi, esp
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_10], eax
		mov	ecx, [ebp+var_10]
		mov	edx, [ecx]
		mov	esi, esp
		mov	ecx, [ebp+var_10]
		mov	eax, [edx+4]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_3298:				; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::_Sentry_base(std::basic_ostream<char,std::char_traits<char>> &)+47j
		mov	eax, [ebp+var_4]
		pop	esi
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 32ACh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall std::_System_error_category::_System_error_category(std::_System_error_category *__hidden this)
		public ??0_System_error_category@std@@QAE@XZ
??0_System_error_category@std@@QAE@XZ proc near
					; CODE XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax], offset	??_7_System_error_category@std@@6B@ ; const std::_System_error_category::`vftable'
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0_System_error_category@std@@QAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 32DCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall std::error_category::error_category(std::error_category *__hidden this)
		public ??0error_category@std@@QAE@XZ
??0error_category@std@@QAE@XZ proc near	; CODE XREF: std::_Generic_error_category::_Generic_error_category(void)+11p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax], offset	??_7error_category@std@@6B@ ; const std::error_category::`vftable'
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
??0error_category@std@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 32FCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall std::error_condition::error_condition(std::error_condition *this, int, const struct	std::error_category *)
		public ??0error_condition@std@@QAE@HABVerror_category@1@@Z
??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
					; CODE XREF: std::_System_error_category::default_error_condition(int)+36p
					; std::_System_error_category::default_error_condition(int)+4Fp ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	[eax], ecx
		mov	edx, [ebp+var_4]
		mov	eax, [ebp+arg_4]
		mov	[edx+4], eax
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3324h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::sentry::sentry(class std::basic_ostream<char, struct std::char_traits<char>> &)
		public ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z proc near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+FDp

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
		mov	eax, large fs:0
		push	eax
		push	ecx
		push	esi
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_10]
		call	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::_Sentry_base(std::basic_ostream<char,std::char_traits<char>>	&)
		mov	[ebp+var_4], 0
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	ecx, [ebp+arg_0]
		add	ecx, [edx+4]	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		movzx	eax, al
		test	eax, eax
		jz	short loc_33F2
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	ecx, [ebp+arg_0]
		add	ecx, [edx+4]
		mov	esi, esp
		call	dword ptr ds:__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::tie(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_33F2
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx
		call	dword ptr ds:__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::tie(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	eax, [ebp+arg_0]
		jz	short loc_33F2
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx
		call	dword ptr ds:__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::tie(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	ecx, eax
		call	dword ptr ds:__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char>>::flush(void)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_33F2:				; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+60j
					; std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+7Ej ...
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx	; this
		call	dword ptr ds:__imp_?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_10]
		mov	[ecx+4], al
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	esi
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 343Ch
; COMDAT (pick associative to section at 3324)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0 proc near
					; DATA XREF: .xdata$x:00008DD4o
		mov	ecx, [ebp-10h]
		jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::~_Sentry_base(void)
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z	proc near
					; DATA XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0Ch]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3460h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::external::AtomicRefCounted<class mozilla::gfx::SourceSurface>::~AtomicRefCounted<class mozilla::gfx::SourceSurface>(void)
		public ??1?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ
??1?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ proc near
					; CODE XREF: __unwindfunclet$??0SourceSurface@gfx@mozilla@@QAE@XZ$0+6j
					; mozilla::gfx::SourceSurface::~SourceSurface(void)+55p ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	??1?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@IAE@XZ	; mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::~RefCounted<mozilla::gfx::SourceSurface,0>(void)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3484h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::gfx::Log<2, struct mozilla::gfx::BasicLogger>::~Log<2, struct mozilla::gfx::BasicLogger>(void)
		public ??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ
??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ proc	near
					; CODE XREF: mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::SurfaceFormat)+199p
					; __unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$4+6j

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ
		mov	eax, large fs:0
		push	eax
		push	ecx
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	[ebp+var_4], 0
		mov	ecx, [ebp+var_10]
		call	?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ ; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Flush(void)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, [ebp+var_10]
		call	??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ;	std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`vbase destructor(void)
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 34E8h
; COMDAT (pick associative to section at 3484)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ$0 proc near
					; DATA XREF: .xdata$x:00008CD8o
		mov	ecx, [ebp-10h]
		jmp	??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ;	std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`vbase destructor(void)
__unwindfunclet$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ proc near
					; DATA XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::~Log<2,mozilla::gfx::BasicLogger>(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-8]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 350Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; protected: __thiscall	mozilla::detail::RefCounted<class mozilla::gfx::DrawTarget, 1>::~RefCounted<class mozilla::gfx::DrawTarget, 1>(void)
		public ??1?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ
??1?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ proc near
					; CODE XREF: mozilla::RefCounted<mozilla::gfx::DrawTarget>::~RefCounted<mozilla::gfx::DrawTarget>(void)+11p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx

loc_351A:				; CODE XREF: mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::~RefCounted<mozilla::gfx::DrawTarget,1>(void)+10j
		xor	eax, eax
		jnz	short loc_351A
		mov	esp, ebp
		pop	ebp
		retn
??1?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3524h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::RefCounted<class mozilla::gfx::DrawTarget>::~RefCounted<class mozilla::gfx::DrawTarget>(void)
		public ??1?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ
??1?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ proc near
					; CODE XREF: __unwindfunclet$??0DrawTarget@gfx@mozilla@@QAE@XZ$0+6j
					; mozilla::gfx::DrawTarget::~DrawTarget(void)+55p ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	??1?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ ; mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::~RefCounted<mozilla::gfx::DrawTarget,1>(void)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3548h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; protected: __thiscall	mozilla::detail::RefCounted<class mozilla::gfx::SourceSurface, 0>::~RefCounted<class mozilla::gfx::SourceSurface, 0>(void)
		public ??1?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@IAE@XZ
??1?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@IAE@XZ	proc near
					; CODE XREF: mozilla::external::AtomicRefCounted<mozilla::gfx::SourceSurface>::~AtomicRefCounted<mozilla::gfx::SourceSurface>(void)+11p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx

loc_3556:				; CODE XREF: mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::~RefCounted<mozilla::gfx::SourceSurface,0>(void)+10j
		xor	eax, eax
		jnz	short loc_3556
		mov	esp, ebp
		pop	ebp
		retn
??1?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@IAE@XZ	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3560h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall RefPtr<class mozilla::gfx::DrawTarget>::~RefPtr<class mozilla::gfx::DrawTarget>(void)
		public ??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ
??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ proc near
					; CODE XREF: mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::SurfaceFormat)+1BEp
					; mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const &,mozilla::gfx::SurfaceFormat)+1CAp ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		cmp	dword ptr [eax], 0
		jz	short loc_3584
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx]
		push	edx
		call	?Release@?$AddRefTraits@VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@SAXPAVDrawTarget@gfx@mozilla@@@Z ; RefPtr<mozilla::gfx::DrawTarget>::AddRefTraits<mozilla::gfx::DrawTarget>::Release(mozilla::gfx::DrawTarget *)
		add	esp, 4

loc_3584:				; CODE XREF: RefPtr<mozilla::gfx::DrawTarget>::~RefPtr<mozilla::gfx::DrawTarget>(void)+14j
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3594h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall RefPtr<class mozilla::gfx::DrawTargetDual>::~RefPtr<class mozilla::gfx::DrawTargetDual>(void)
		public ??1?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAE@XZ
??1?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAE@XZ proc near
					; CODE XREF: mozilla::MakeAndAddRef<mozilla::gfx::DrawTargetDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)+D5p
					; __unwindfunclet$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$1+3j

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		cmp	dword ptr [eax], 0
		jz	short loc_35B8
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx]
		push	edx
		call	?Release@?$AddRefTraits@VDrawTargetDual@gfx@mozilla@@@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@SAXPAVDrawTargetDual@gfx@mozilla@@@Z ; RefPtr<mozilla::gfx::DrawTargetDual>::AddRefTraits<mozilla::gfx::DrawTargetDual>::Release(mozilla::gfx::DrawTargetDual *)
		add	esp, 4

loc_35B8:				; CODE XREF: RefPtr<mozilla::gfx::DrawTargetDual>::~RefPtr<mozilla::gfx::DrawTargetDual>(void)+14j
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 35C8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall RefPtr<class mozilla::gfx::SourceSurface>::~RefPtr<class mozilla::gfx::SourceSurface>(void)
		public ??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ
??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ proc near
					; CODE XREF: __unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$2+6j
					; __unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$4+6j ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		cmp	dword ptr [eax], 0
		jz	short loc_35EC
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx]
		push	edx
		call	?Release@?$AddRefTraits@VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@SAXPAVSourceSurface@gfx@mozilla@@@Z	; RefPtr<mozilla::gfx::SourceSurface>::AddRefTraits<mozilla::gfx::SourceSurface>::Release(mozilla::gfx::SourceSurface *)
		add	esp, 4

loc_35EC:				; CODE XREF: RefPtr<mozilla::gfx::SourceSurface>::~RefPtr<mozilla::gfx::SourceSurface>(void)+14j
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 35FCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall RefPtr<class mozilla::gfx::SourceSurfaceDual>::~RefPtr<class mozilla::gfx::SourceSurfaceDual>(void)
		public ??1?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAE@XZ
??1?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAE@XZ proc near
					; CODE XREF: mozilla::MakeAndAddRef<mozilla::gfx::SourceSurfaceDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget>	&>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)+D5p
					; __unwindfunclet$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$1+3j

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		cmp	dword ptr [eax], 0
		jz	short loc_3620
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx]
		push	edx
		call	?Release@?$AddRefTraits@VSourceSurfaceDual@gfx@mozilla@@@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@SAXPAVSourceSurfaceDual@gfx@mozilla@@@Z ; RefPtr<mozilla::gfx::SourceSurfaceDual>::AddRefTraits<mozilla::gfx::SourceSurfaceDual>::Release(mozilla::gfx::SourceSurfaceDual *)
		add	esp, 4

loc_3620:				; CODE XREF: RefPtr<mozilla::gfx::SourceSurfaceDual>::~RefPtr<mozilla::gfx::SourceSurfaceDual>(void)+14j
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3630h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char,	class std::allocator<char>>>::~_String_alloc<0,	struct std::_String_base_types<char, class std::allocator<char>>>(void)
		public ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
					; CODE XREF: __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0+3j
					; __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z$0+3j ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)
		mov	ecx, [ebp+var_4]
		call	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ;	std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 365Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::~_String_val<struct std::_Simple_types<char>>(void)
		public ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
					; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0+3j
					; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+19p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_4] ; this
		call	dword ptr ds:__imp_??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 368Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall already_AddRefed<class mozilla::gfx::DrawTarget>::~already_AddRefed<class mozilla::gfx::DrawTarget>(void)
		public ??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ
??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ	proc near
					; CODE XREF: mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::SurfaceFormat)+B7p
					; mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const &,mozilla::gfx::SurfaceFormat)+125p ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx

loc_369A:				; CODE XREF: already_AddRefed<mozilla::gfx::DrawTarget>::~already_AddRefed<mozilla::gfx::DrawTarget>(void)+10j
		xor	eax, eax
		jnz	short loc_369A
		mov	esp, ebp
		pop	ebp
		retn
??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 36A4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall already_AddRefed<class mozilla::gfx::DrawTargetDual>::~already_AddRefed<class mozilla::gfx::DrawTargetDual>(void)
		public ??1?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAE@XZ
??1?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAE@XZ proc near
					; CODE XREF: mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::SurfaceFormat)+229p
					; __unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$6+6j	...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx

loc_36B2:				; CODE XREF: already_AddRefed<mozilla::gfx::DrawTargetDual>::~already_AddRefed<mozilla::gfx::DrawTargetDual>(void)+10j
		xor	eax, eax
		jnz	short loc_36B2
		mov	esp, ebp
		pop	ebp
		retn
??1?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 36BCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall already_AddRefed<class mozilla::gfx::SourceSurface>::~already_AddRefed<class mozilla::gfx::SourceSurface>(void)
		public ??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ
??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ proc	near
					; CODE XREF: mozilla::gfx::SourceSurfaceDual::SourceSurfaceDual(mozilla::gfx::DrawTarget *,mozilla::gfx::DrawTarget *)+98p
					; mozilla::gfx::SourceSurfaceDual::SourceSurfaceDual(mozilla::gfx::DrawTarget *,mozilla::gfx::DrawTarget *)+DAp ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx

loc_36CA:				; CODE XREF: already_AddRefed<mozilla::gfx::SourceSurface>::~already_AddRefed<mozilla::gfx::SourceSurface>(void)+10j
		xor	eax, eax
		jnz	short loc_36CA
		mov	esp, ebp
		pop	ebp
		retn
??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 36D4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall already_AddRefed<class mozilla::gfx::SourceSurfaceDual>::~already_AddRefed<class mozilla::gfx::SourceSurfaceDual>(void)
		public ??1?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAE@XZ
??1?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAE@XZ proc near
					; CODE XREF: __unwindfunclet$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$2+13j
					; mozilla::gfx::DrawTargetDual::Snapshot(void)+89p ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx

loc_36E2:				; CODE XREF: already_AddRefed<mozilla::gfx::SourceSurfaceDual>::~already_AddRefed<mozilla::gfx::SourceSurfaceDual>(void)+10j
		xor	eax, eax
		jnz	short loc_36E2
		mov	esp, ebp
		pop	ebp
		retn
??1?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 36ECh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
		public ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
					; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Flush(void)+A0p
					; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Flush(void)+AFp ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		push	0		; Size
		push	1		; char
		mov	ecx, [ebp+var_4]
		call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
		mov	ecx, [ebp+var_4]
		call	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 371Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual __thiscall std::basic_stringbuf<char,	struct std::char_traits<char>, class std::allocator<char>>::~basic_stringbuf<char, struct std::char_traits<char>, class	std::allocator<char>>(void)
		public ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ proc near
					; CODE XREF: std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream<char,std::char_traits<char>,std::allocator<char>>(void)+45p
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`scalar deleting destructor'(uint)+11p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax], offset	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@	; const	std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`vftable'
		mov	ecx, [ebp+var_4]
		call	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ;	std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char>>::~basic_streambuf<char,std::char_traits<char>>(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3760h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual __thiscall std::basic_stringstream<char, struct std::char_traits<char>, class	std::allocator<char>>::~basic_stringstream<char, struct	std::char_traits<char>,	class std::allocator<char>>(void)
		public ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ proc near
					; CODE XREF: std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`vbase destructor(void)+15p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [eax-68h]
		mov	edx, [ecx+4]
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+edx-68h], offset	??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; const std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`vftable'
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx-68h]
		mov	eax, [edx+4]
		sub	eax, 68h ; 'h'
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx-68h]
		mov	ecx, [edx+4]
		mov	edx, [ebp+var_4]
		mov	[edx+ecx-6Ch], eax
		mov	ecx, [ebp+var_4]
		sub	ecx, 50h ; 'P'
		call	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(void)
		mov	ecx, [ebp+var_4]
		sub	ecx, 48h ; 'H'
		mov	esi, esp
		call	dword ptr ds:__imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_iostream<char,std::char_traits<char>>::~basic_iostream<char,std::char_traits<char>>(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 37D0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall mozilla::gfx::DrawTarget::~DrawTarget(mozilla::gfx::DrawTarget *__hidden this)
		public ??1DrawTarget@gfx@mozilla@@UAE@XZ
??1DrawTarget@gfx@mozilla@@UAE@XZ proc near
					; CODE XREF: __unwindfunclet$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$0+3j
					; mozilla::gfx::DrawTargetDual::~DrawTargetDual(void)+58p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??1DrawTarget@gfx@mozilla@@UAE@XZ
		mov	eax, large fs:0
		push	eax
		push	ecx
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], offset	??_7DrawTarget@gfx@mozilla@@6B@	; const	mozilla::gfx::DrawTarget::`vftable'
		mov	[ebp+var_4], 0
		mov	ecx, [ebp+var_10]
		add	ecx, 8		; this
		call	??1UserData@gfx@mozilla@@QAE@XZ	; mozilla::gfx::UserData::~UserData(void)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, [ebp+var_10]
		add	ecx, 4
		call	??1?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ ; mozilla::RefCounted<mozilla::gfx::DrawTarget>::~RefCounted<mozilla::gfx::DrawTarget>(void)
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1DrawTarget@gfx@mozilla@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 3844h
; COMDAT (pick associative to section at 37D0)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??1DrawTarget@gfx@mozilla@@UAE@XZ$0 proc near
					; DATA XREF: .xdata$x:0000886Co
		mov	ecx, [ebp-10h]
		add	ecx, 4
		jmp	??1?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ ; mozilla::RefCounted<mozilla::gfx::DrawTarget>::~RefCounted<mozilla::gfx::DrawTarget>(void)
__unwindfunclet$??1DrawTarget@gfx@mozilla@@UAE@XZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??1DrawTarget@gfx@mozilla@@UAE@XZ proc near
					; DATA XREF: mozilla::gfx::DrawTarget::~DrawTarget(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-8]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??1DrawTarget@gfx@mozilla@@UAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??1DrawTarget@gfx@mozilla@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 386Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall mozilla::gfx::DrawTargetDual::~DrawTargetDual(mozilla::gfx::DrawTargetDual *__hidden this)
		public ??1DrawTargetDual@gfx@mozilla@@UAE@XZ
??1DrawTargetDual@gfx@mozilla@@UAE@XZ proc near
					; CODE XREF: mozilla::gfx::DrawTargetDual::`scalar deleting destructor'(uint)+11p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??1DrawTargetDual@gfx@mozilla@@UAE@XZ
		mov	eax, large fs:0
		push	eax
		push	ecx
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	[ebp+var_4], 1
		mov	ecx, [ebp+var_10]
		add	ecx, 40h ; '@'
		call	??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ ;	RefPtr<mozilla::gfx::DrawTarget>::~RefPtr<mozilla::gfx::DrawTarget>(void)
		mov	byte ptr [ebp+var_4], 0
		mov	ecx, [ebp+var_10]
		add	ecx, 3Ch ; '<'
		call	??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ ;	RefPtr<mozilla::gfx::DrawTarget>::~RefPtr<mozilla::gfx::DrawTarget>(void)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, [ebp+var_10] ; this
		call	??1DrawTarget@gfx@mozilla@@UAE@XZ ; mozilla::gfx::DrawTarget::~DrawTarget(void)
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1DrawTargetDual@gfx@mozilla@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 38E4h
; COMDAT (pick associative to section at 386C)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??1DrawTargetDual@gfx@mozilla@@UAE@XZ$0	proc near
					; DATA XREF: .xdata$x:00008BA8o
		mov	ecx, [ebp-10h]	; this
		jmp	??1DrawTarget@gfx@mozilla@@UAE@XZ ; mozilla::gfx::DrawTarget::~DrawTarget(void)
__unwindfunclet$??1DrawTargetDual@gfx@mozilla@@UAE@XZ$0	endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??1DrawTargetDual@gfx@mozilla@@UAE@XZ$1	proc near
					; DATA XREF: .xdata$x:00008BB0o
		mov	ecx, [ebp-10h]
		add	ecx, 3Ch ; '<'
		jmp	??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ ;	RefPtr<mozilla::gfx::DrawTarget>::~RefPtr<mozilla::gfx::DrawTarget>(void)
__unwindfunclet$??1DrawTargetDual@gfx@mozilla@@UAE@XZ$1	endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??1DrawTargetDual@gfx@mozilla@@UAE@XZ proc near
					; DATA XREF: mozilla::gfx::DrawTargetDual::~DrawTargetDual(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-8]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??1DrawTargetDual@gfx@mozilla@@UAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??1DrawTargetDual@gfx@mozilla@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3914h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall mozilla::gfx::DualPattern::~DualPattern(mozilla::gfx::DualPattern *__hidden	this)
		public ??1DualPattern@gfx@mozilla@@QAE@XZ
??1DualPattern@gfx@mozilla@@QAE@XZ proc	near
					; CODE XREF: mozilla::gfx::DrawTargetDual::MaskSurface(mozilla::gfx::Pattern const &,mozilla::gfx::SourceSurface *,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::DrawOptions	const &)+FEp
					; mozilla::gfx::DrawTargetDual::FillRect(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::Pattern const &,mozilla::gfx::DrawOptions const &)+D9p ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		movzx	ecx, byte ptr [eax+70h]
		test	ecx, ecx
		jz	short loc_3968
		mov	esi, esp
		push	0
		mov	edx, [ebp+var_4]
		mov	eax, [edx+68h]
		mov	ecx, [ebp+var_4]
		mov	edx, [eax]
		mov	ecx, [ecx+68h]
		mov	eax, [edx]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	0
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+6Ch]
		mov	eax, [ebp+var_4]
		mov	edx, [edx]
		mov	ecx, [eax+6Ch]
		mov	eax, [edx]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_3968:				; CODE XREF: mozilla::gfx::DualPattern::~DualPattern(void)+18j
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1DualPattern@gfx@mozilla@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3978h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall mozilla::gfx::Pattern::~Pattern(mozilla::gfx::Pattern *__hidden this)
		public ??1Pattern@gfx@mozilla@@UAE@XZ
??1Pattern@gfx@mozilla@@UAE@XZ proc near
					; CODE XREF: __unwindfunclet$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z$0+3j
					; mozilla::gfx::SurfacePattern::~SurfacePattern(void)+49p ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax], offset	??_7Pattern@gfx@mozilla@@6B@ ; const mozilla::gfx::Pattern::`vftable'
		mov	esp, ebp
		pop	ebp
		retn
??1Pattern@gfx@mozilla@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3994h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall mozilla::gfx::SourceSurface::~SourceSurface(mozilla::gfx::SourceSurface *__hidden this)
		public ??1SourceSurface@gfx@mozilla@@UAE@XZ
??1SourceSurface@gfx@mozilla@@UAE@XZ proc near
					; CODE XREF: __unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$0+3j
					; mozilla::gfx::SourceSurfaceDual::~SourceSurfaceDual(void)+58p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??1SourceSurface@gfx@mozilla@@UAE@XZ
		mov	eax, large fs:0
		push	eax
		push	ecx
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], offset	??_7SourceSurface@gfx@mozilla@@6B@ ; const mozilla::gfx::SourceSurface::`vftable'
		mov	[ebp+var_4], 0
		mov	ecx, [ebp+var_10]
		add	ecx, 8		; this
		call	??1UserData@gfx@mozilla@@QAE@XZ	; mozilla::gfx::UserData::~UserData(void)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, [ebp+var_10]
		add	ecx, 4
		call	??1?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ ; mozilla::external::AtomicRefCounted<mozilla::gfx::SourceSurface>::~AtomicRefCounted<mozilla::gfx::SourceSurface>(void)
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1SourceSurface@gfx@mozilla@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 3A08h
; COMDAT (pick associative to section at 3994)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??1SourceSurface@gfx@mozilla@@UAE@XZ$0 proc near
					; DATA XREF: .xdata$x:000087E0o
		mov	ecx, [ebp-10h]
		add	ecx, 4
		jmp	??1?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ ; mozilla::external::AtomicRefCounted<mozilla::gfx::SourceSurface>::~AtomicRefCounted<mozilla::gfx::SourceSurface>(void)
__unwindfunclet$??1SourceSurface@gfx@mozilla@@UAE@XZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??1SourceSurface@gfx@mozilla@@UAE@XZ proc near
					; DATA XREF: mozilla::gfx::SourceSurface::~SourceSurface(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-8]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??1SourceSurface@gfx@mozilla@@UAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??1SourceSurface@gfx@mozilla@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3A30h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall mozilla::gfx::SourceSurfaceDual::~SourceSurfaceDual(mozilla::gfx::SourceSurfaceDual	*__hidden this)
		public ??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ
??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ proc near
					; CODE XREF: mozilla::gfx::SourceSurfaceDual::`scalar deleting destructor'(uint)+11p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ
		mov	eax, large fs:0
		push	eax
		push	ecx
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	[ebp+var_4], 1
		mov	ecx, [ebp+var_10]
		add	ecx, 14h
		call	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ ; RefPtr<mozilla::gfx::SourceSurface>::~RefPtr<mozilla::gfx::SourceSurface>(void)
		mov	byte ptr [ebp+var_4], 0
		mov	ecx, [ebp+var_10]
		add	ecx, 10h
		call	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ ; RefPtr<mozilla::gfx::SourceSurface>::~RefPtr<mozilla::gfx::SourceSurface>(void)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, [ebp+var_10] ; this
		call	??1SourceSurface@gfx@mozilla@@UAE@XZ ; mozilla::gfx::SourceSurface::~SourceSurface(void)
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 3AA8h
; COMDAT (pick associative to section at 3A30)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ$0 proc	near
					; DATA XREF: .xdata$x:00008930o
		mov	ecx, [ebp-10h]	; this
		jmp	??1SourceSurface@gfx@mozilla@@UAE@XZ ; mozilla::gfx::SourceSurface::~SourceSurface(void)
__unwindfunclet$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ$1 proc	near
					; DATA XREF: .xdata$x:00008938o
		mov	ecx, [ebp-10h]
		add	ecx, 10h
		jmp	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ ; RefPtr<mozilla::gfx::SourceSurface>::~RefPtr<mozilla::gfx::SourceSurface>(void)
__unwindfunclet$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ proc near
					; DATA XREF: mozilla::gfx::SourceSurfaceDual::~SourceSurfaceDual(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-8]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3AD8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall mozilla::gfx::SurfacePattern::~SurfacePattern(mozilla::gfx::SurfacePattern *__hidden this)
		public ??1SurfacePattern@gfx@mozilla@@UAE@XZ
??1SurfacePattern@gfx@mozilla@@UAE@XZ proc near
					; CODE XREF: mozilla::gfx::SurfacePattern::`scalar deleting destructor'(uint)+11p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??1SurfacePattern@gfx@mozilla@@UAE@XZ
		mov	eax, large fs:0
		push	eax
		push	ecx
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	[ebp+var_4], 0
		mov	ecx, [ebp+var_10]
		add	ecx, 4
		call	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ ; RefPtr<mozilla::gfx::SourceSurface>::~RefPtr<mozilla::gfx::SourceSurface>(void)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, [ebp+var_10] ; this
		call	??1Pattern@gfx@mozilla@@UAE@XZ ; mozilla::gfx::Pattern::~Pattern(void)
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1SurfacePattern@gfx@mozilla@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 3B40h
; COMDAT (pick associative to section at 3AD8)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??1SurfacePattern@gfx@mozilla@@UAE@XZ$0	proc near
					; DATA XREF: .xdata$x:000087B4o
		mov	ecx, [ebp-10h]	; this
		jmp	??1Pattern@gfx@mozilla@@UAE@XZ ; mozilla::gfx::Pattern::~Pattern(void)
__unwindfunclet$??1SurfacePattern@gfx@mozilla@@UAE@XZ$0	endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??1SurfacePattern@gfx@mozilla@@UAE@XZ proc near
					; DATA XREF: mozilla::gfx::SurfacePattern::~SurfacePattern(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-8]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??1SurfacePattern@gfx@mozilla@@UAE@XZ
		jmp	___CxxFrameHandler3
__ehhandler$??1SurfacePattern@gfx@mozilla@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3B64h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall mozilla::gfx::UserData::~UserData(mozilla::gfx::UserData *__hidden this)
		public ??1UserData@gfx@mozilla@@QAE@XZ
??1UserData@gfx@mozilla@@QAE@XZ	proc near
					; CODE XREF: __unwindfunclet$??0DrawTarget@gfx@mozilla@@QAE@XZ$1+6j
					; mozilla::gfx::DrawTarget::~DrawTarget(void)+43p ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	?Destroy@UserData@gfx@mozilla@@QAEXXZ ;	mozilla::gfx::UserData::Destroy(void)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1UserData@gfx@mozilla@@QAE@XZ	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3B88h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall std::_Generic_error_category::~_Generic_error_category(std::_Generic_error_category	*__hidden this)
		public ??1_Generic_error_category@std@@UAE@XZ
??1_Generic_error_category@std@@UAE@XZ proc near
					; CODE XREF: std::_Iostream_error_category::~_Iostream_error_category(void)+11p
					; std::_System_error_category::~_System_error_category(void)+11p ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??1error_category@std@@UAE@XZ ;	std::error_category::~error_category(void)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1_Generic_error_category@std@@UAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3BACh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall std::_Iostream_error_category::~_Iostream_error_category(std::_Iostream_error_category *__hidden this)
		public ??1_Iostream_error_category@std@@UAE@XZ
??1_Iostream_error_category@std@@UAE@XZ	proc near
					; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+11p
					; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1_Iostream_error_category@std@@UAE@XZ	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3BD0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::_Sentry_base::~_Sentry_base(void)
		public ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ proc near
					; CODE XREF: __unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0+3j
					; std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+3Cp

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		add	ecx, [eax+4]
		mov	esi, esp
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_3C4E
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx]
		mov	[ebp+var_C], edx
		mov	eax, [ebp+var_C]
		mov	ecx, [eax]
		mov	edx, [ebp+var_C]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_10]
		mov	edx, [eax]
		mov	esi, esp
		mov	ecx, [ebp+var_10]
		mov	eax, [edx+8]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_3C4E:				; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::~_Sentry_base(void)+3Fj
		pop	esi
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3C60h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall std::_System_error_category::~_System_error_category(std::_System_error_category *__hidden this)
		public ??1_System_error_category@std@@UAE@XZ
??1_System_error_category@std@@UAE@XZ proc near
					; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+11p
					; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1_System_error_category@std@@UAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3C84h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall std::error_category::~error_category(std::error_category *__hidden this)
		public ??1error_category@std@@UAE@XZ
??1error_category@std@@UAE@XZ proc near	; CODE XREF: std::_Generic_error_category::~_Generic_error_category(void)+11p
					; std::error_category::`scalar deleting	destructor'(uint)+11p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax], offset	??_7error_category@std@@6B@ ; const std::error_category::`vftable'
		mov	esp, ebp
		pop	ebp
		retn
??1error_category@std@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3CA0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::sentry::~sentry(void)
		public ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ proc near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+3C4p
					; __unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2+3j

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	esi, esp
		call	dword ptr ds:__imp_?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		movzx	eax, al
		test	eax, eax
		jnz	short loc_3CD9
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		mov	ecx, [ecx]
		call	dword ptr ds:__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ;	std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_3CD9:				; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+23j
		mov	ecx, [ebp+var_4]
		call	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::~_Sentry_base(void)
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3CF0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int, void	*)
		public ??2@YAPAXIPAX@Z
??2@YAPAXIPAX@Z	proc near		; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+3Fp
					; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+3Fp ...

arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		pop	ebp
		retn
??2@YAPAXIPAX@Z	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3CF8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX0@Z
??3@YAXPAX0@Z	proc near		; CODE XREF: __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0+8p
					; __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0+8p ...
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
??3@YAXPAX0@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3D00h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: unsigned int __thiscall std::atomic_uint::operator=(unsigned int)
		public ??4atomic_uint@std@@QAEII@Z
??4atomic_uint@std@@QAEII@Z proc near	; CODE XREF: std::atomic<uint>::atomic<uint>(uint)+15p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; unsigned int
		mov	ecx, [ebp+var_4]
		push	ecx		; struct std::atomic_uint *
		call	?atomic_store@std@@YAXPAUatomic_uint@1@I@Z ; std::atomic_store(std::atomic_uint	*,uint)
		add	esp, 8
		mov	eax, [ebp+arg_0]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??4atomic_uint@std@@QAEII@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3D34h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::operator<<(char	*Str)
		public ??6?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEAAV012@QBD@Z
??6?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEAAV012@QBD@Z proc near
					; CODE XREF: mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::SurfaceFormat)+183p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
Str		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	?LogIt@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ	; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::LogIt(void)
		movzx	eax, al
		test	eax, eax
		jz	short loc_3D82
		cmp	[ebp+var_4], 0
		jz	short loc_3D6B
		mov	ecx, [ebp+var_4]
		add	ecx, 10h
		mov	[ebp+var_8], ecx
		jmp	short loc_3D72
; ---------------------------------------------------------------------------

loc_3D6B:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::operator<<(char const * const)+2Aj
		mov	[ebp+var_8], 0

loc_3D72:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::operator<<(char const * const)+35j
		mov	edx, [ebp+Str]
		push	edx		; Str
		mov	eax, [ebp+var_8]
		push	eax		; int
		call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
		add	esp, 8

loc_3D82:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::operator<<(char const * const)+24j
		mov	eax, [ebp+var_4]
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??6?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEAAV012@QBD@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3D98h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: bool __thiscall std::error_category::operator==(class	std::error_category const &)const
		public ??8error_category@std@@QBE_NABV01@@Z
??8error_category@std@@QBE_NABV01@@Z proc near
					; CODE XREF: std::error_condition::operator==(std::error_condition const &)+2Bp
					; std::error_category::equivalent(std::error_code const	&,int)+23p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		cmp	eax, [ebp+arg_0]
		jnz	short loc_3DC0
		mov	[ebp+var_8], 1
		jmp	short loc_3DC7
; ---------------------------------------------------------------------------

loc_3DC0:				; CODE XREF: std::error_category::operator==(std::error_category const &)+1Dj
		mov	[ebp+var_8], 0

loc_3DC7:				; CODE XREF: std::error_category::operator==(std::error_category const &)+26j
		mov	al, byte ptr [ebp+var_8]
		mov	esp, ebp
		pop	ebp
		retn	4
??8error_category@std@@QBE_NABV01@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3DD0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::error_condition::operator==(std::error_condition *)
		public ??8error_condition@std@@QBE_NABV01@@Z
??8error_condition@std@@QBE_NABV01@@Z proc near
					; CODE XREF: std::error_category::equivalent(int,std::error_condition const &)+43p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		push	esi
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+arg_0] ; this
		call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
		push	eax
		mov	ecx, [ebp+var_4] ; this
		call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
		mov	ecx, eax
		call	??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
		movzx	eax, al
		test	eax, eax
		jz	short loc_3E26
		mov	ecx, [ebp+var_4] ; this
		call	?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
		mov	esi, eax
		mov	ecx, [ebp+arg_0] ; this
		call	?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
		cmp	esi, eax
		jnz	short loc_3E26
		mov	[ebp+var_8], 1
		jmp	short loc_3E2D
; ---------------------------------------------------------------------------

loc_3E26:				; CODE XREF: std::error_condition::operator==(std::error_condition const &)+35j
					; std::error_condition::operator==(std::error_condition	const &)+4Bj
		mov	[ebp+var_8], 0

loc_3E2D:				; CODE XREF: std::error_condition::operator==(std::error_condition const &)+54j
		mov	al, byte ptr [ebp+var_8]
		pop	esi
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??8error_condition@std@@QBE_NABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3E44h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall RefPtr<class mozilla::gfx::DrawTarget>::operator class mozilla::gfx::DrawTarget *(void)const
		public ??B?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ
??B?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	proc near
					; CODE XREF: mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::SurfaceFormat)+12Dp
					; mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const &,mozilla::gfx::SurfaceFormat)+139p ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	?get@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ ; RefPtr<mozilla::gfx::DrawTarget>::get(void)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??B?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3E68h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall RefPtr<class mozilla::gfx::SourceSurface>::operator class mozilla::gfx::SourceSurface *(void)const
		public ??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ
??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ proc near
					; CODE XREF: mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern const	&)+115p
					; mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern const &)+197p ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	?get@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::SourceSurface>::get(void)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3E8Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::fpos<int>::operator __int64(void)const
		public ??B?$fpos@H@std@@QBE_JXZ
??B?$fpos@H@std@@QBE_JXZ proc near	; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+2Bp

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+var_4]
		mov	edx, [eax]
		add	edx, [ecx+8]
		mov	esi, [eax+4]
		adc	esi, [ecx+0Ch]
		mov	eax, edx
		mov	edx, esi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
??B?$fpos@H@std@@QBE_JXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3EB8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::sentry::operator bool(void)const
		public ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ proc near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+10Cp

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	al, [eax+4]
		mov	esp, ebp
		pop	ebp
		retn
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3ED0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	mozilla::gfx::DrawTarget * __thiscall RefPtr<class mozilla::gfx::DrawTarget>::operator->(void)const
		public ??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ
??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	proc near
					; CODE XREF: mozilla::gfx::DrawTargetDual::DrawSurface(mozilla::gfx::SourceSurface *,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::DrawSurfaceOptions const	&,mozilla::gfx::DrawOptions const &)+36p
					; mozilla::gfx::DrawTargetDual::DrawSurface(mozilla::gfx::SourceSurface	*,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::DrawSurfaceOptions const &,mozilla::gfx::DrawOptions const &)+6Ep ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx

loc_3EDE:				; CODE XREF: RefPtr<mozilla::gfx::DrawTarget>::operator->(void)+10j
		xor	eax, eax
		jnz	short loc_3EDE
		mov	ecx, [ebp+var_4]
		call	?get@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ ; RefPtr<mozilla::gfx::DrawTarget>::get(void)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3EF8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	mozilla::gfx::SourceSurface * __thiscall RefPtr<class mozilla::gfx::SourceSurface>::operator->(void)const
		public ??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ
??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ proc near
					; CODE XREF: mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern const	&)+7Fp
					; mozilla::gfx::SourceSurfaceDual::GetDataSurface(void)+2Cp ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx

loc_3F06:				; CODE XREF: RefPtr<mozilla::gfx::SourceSurface>::operator->(void)+10j
		xor	eax, eax
		jnz	short loc_3F06
		mov	ecx, [ebp+var_4]
		call	?get@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::SourceSurface>::get(void)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3F20h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: unsigned int __thiscall mozilla::detail::AtomicBaseIncDec<unsigned int, 2>::operator++(void)
		public ??E?$AtomicBaseIncDec@I$01@detail@mozilla@@QAEIXZ
??E?$AtomicBaseIncDec@I$01@detail@mozilla@@QAEIXZ proc near
					; CODE XREF: mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::AddRef(void)+15p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		push	eax
		call	?inc@?$IntrinsicIncDec@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@@Z ; mozilla::detail::IntrinsicIncDec<uint,2>::inc(std::atomic<uint> &)
		add	esp, 4
		add	eax, 1
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??E?$AtomicBaseIncDec@I$01@detail@mozilla@@QAEIXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3F4Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: unsigned int __thiscall mozilla::detail::AtomicBaseIncDec<unsigned int, 2>::operator--(void)
		public ??F?$AtomicBaseIncDec@I$01@detail@mozilla@@QAEIXZ
??F?$AtomicBaseIncDec@I$01@detail@mozilla@@QAEIXZ proc near
					; CODE XREF: mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::Release(void)+28p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		push	eax
		call	?dec@?$IntrinsicIncDec@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@@Z ; mozilla::detail::IntrinsicIncDec<uint,2>::dec(std::atomic<uint> &)
		add	esp, 4
		sub	eax, 1
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??F?$AtomicBaseIncDec@I$01@detail@mozilla@@QAEIXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3F78h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::basic_stringstream<char,	struct std::char_traits<char>, class std::allocator<char>>::`vbase destructor(void)
		public ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ proc near
					; CODE XREF: __unwindfunclet$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z$0+3j
					; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::~Log<2,mozilla::gfx::BasicLogger>(void)+46p ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		add	ecx, 68h ; 'h'
		call	??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream<char,std::char_traits<char>,std::allocator<char>>(void)
		mov	ecx, [ebp+var_4]
		add	ecx, 68h ; 'h'
		mov	esi, esp
		call	dword ptr ds:__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ;	std::basic_ios<char,std::char_traits<char>>::~basic_ios<char,std::char_traits<char>>(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	byte public 'CODE' use32
		assume cs:_text$mn
		;org 3FB8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; [thunk]:public: virtual void * __thiscall std::basic_stringstream<char, struct std::char_traits<char>, class std::allocator<char>>::`vector deleting destructor'`vtordisp{4294967292, 0}' (unsigned int)
		public ??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z proc near
					; DATA XREF: .rdata:const std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`vftable'o
		sub	ecx, [ecx-4]
		jmp	??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`vector deleting destructor'(uint)
??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 3FC0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::`scalar deleting destructor'(unsigned int)
		public ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_3FEA
		mov	ecx, [ebp+var_4]
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_3FEA:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`scalar deleting destructor'(uint)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4000h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall std::basic_stringstream<char, struct std::char_traits<char>, class std::allocator<char>>::`scalar deleting destructor'(unsigned int)
		public ??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		sub	ecx, 68h ; 'h'
		call	??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ;	std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`vbase destructor(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_4030
		mov	ecx, [ebp+var_4]
		sub	ecx, 68h ; 'h'
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_4030:				; CODE XREF: std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`scalar	deleting destructor'(uint)+1Fj
		mov	eax, [ebp+var_4]
		sub	eax, 68h ; 'h'
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4048h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall mozilla::gfx::DrawTarget::`scalar deleting destructor'(unsigned int)
		public ??_GDrawTarget@gfx@mozilla@@UAEPAXI@Z
??_GDrawTarget@gfx@mozilla@@UAEPAXI@Z proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??1DrawTarget@gfx@mozilla@@UAE@XZ ; mozilla::gfx::DrawTarget::~DrawTarget(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_4072
		mov	ecx, [ebp+var_4]
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_4072:				; CODE XREF: mozilla::gfx::DrawTarget::`scalar deleting	destructor'(uint)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GDrawTarget@gfx@mozilla@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4088h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall mozilla::gfx::DrawTargetDual::`scalar deleting destructor'(unsigned int)
		public ??_GDrawTargetDual@gfx@mozilla@@UAEPAXI@Z
??_GDrawTargetDual@gfx@mozilla@@UAEPAXI@Z proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??1DrawTargetDual@gfx@mozilla@@UAE@XZ ;	mozilla::gfx::DrawTargetDual::~DrawTargetDual(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_40B2
		mov	ecx, [ebp+var_4]
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_40B2:				; CODE XREF: mozilla::gfx::DrawTargetDual::`scalar deleting destructor'(uint)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GDrawTargetDual@gfx@mozilla@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 40C8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall mozilla::gfx::Pattern::`scalar deleting destructor'(unsigned int)
		public ??_GPattern@gfx@mozilla@@UAEPAXI@Z
??_GPattern@gfx@mozilla@@UAEPAXI@Z proc	near

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??1Pattern@gfx@mozilla@@UAE@XZ ; mozilla::gfx::Pattern::~Pattern(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_40F2
		mov	ecx, [ebp+var_4]
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_40F2:				; CODE XREF: mozilla::gfx::Pattern::`scalar deleting destructor'(uint)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GPattern@gfx@mozilla@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4108h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall mozilla::gfx::SourceSurface::`scalar deleting destructor'(unsigned int)
		public ??_GSourceSurface@gfx@mozilla@@UAEPAXI@Z
??_GSourceSurface@gfx@mozilla@@UAEPAXI@Z proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??1SourceSurface@gfx@mozilla@@UAE@XZ ; mozilla::gfx::SourceSurface::~SourceSurface(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_4132
		mov	ecx, [ebp+var_4]
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_4132:				; CODE XREF: mozilla::gfx::SourceSurface::`scalar deleting destructor'(uint)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GSourceSurface@gfx@mozilla@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4148h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall mozilla::gfx::SourceSurfaceDual::`scalar deleting destructor'(unsigned int)
		public ??_GSourceSurfaceDual@gfx@mozilla@@UAEPAXI@Z
??_GSourceSurfaceDual@gfx@mozilla@@UAEPAXI@Z proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ ; mozilla::gfx::SourceSurfaceDual::~SourceSurfaceDual(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_4172
		mov	ecx, [ebp+var_4]
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_4172:				; CODE XREF: mozilla::gfx::SourceSurfaceDual::`scalar deleting destructor'(uint)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GSourceSurfaceDual@gfx@mozilla@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4188h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall mozilla::gfx::SurfacePattern::`scalar deleting destructor'(unsigned int)
		public ??_GSurfacePattern@gfx@mozilla@@UAEPAXI@Z
??_GSurfacePattern@gfx@mozilla@@UAEPAXI@Z proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??1SurfacePattern@gfx@mozilla@@UAE@XZ ;	mozilla::gfx::SurfacePattern::~SurfacePattern(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_41B2
		mov	ecx, [ebp+var_4]
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_41B2:				; CODE XREF: mozilla::gfx::SurfacePattern::`scalar deleting destructor'(uint)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_GSurfacePattern@gfx@mozilla@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 41C8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall std::_Generic_error_category::`scalar deleting destructor'(unsigned int)
		public ??_G_Generic_error_category@std@@UAEPAXI@Z
??_G_Generic_error_category@std@@UAEPAXI@Z proc	near

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_41F2
		mov	ecx, [ebp+var_4]
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_41F2:				; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_G_Generic_error_category@std@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4208h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall std::_Iostream_error_category::`scalar deleting destructor'(unsigned int)
		public ??_G_Iostream_error_category@std@@UAEPAXI@Z
??_G_Iostream_error_category@std@@UAEPAXI@Z proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??1_Iostream_error_category@std@@UAE@XZ	; std::_Iostream_error_category::~_Iostream_error_category(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_4232
		mov	ecx, [ebp+var_4]
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_4232:				; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_G_Iostream_error_category@std@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4248h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall std::_System_error_category::`scalar deleting destructor'(unsigned int)
		public ??_G_System_error_category@std@@UAEPAXI@Z
??_G_System_error_category@std@@UAEPAXI@Z proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??1_System_error_category@std@@UAE@XZ ;	std::_System_error_category::~_System_error_category(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_4272
		mov	ecx, [ebp+var_4]
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_4272:				; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_G_System_error_category@std@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4288h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall std::error_category::`scalar deleting destructor'(unsigned int)
		public ??_Gerror_category@std@@UAEPAXI@Z
??_Gerror_category@std@@UAEPAXI@Z proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??1error_category@std@@UAE@XZ ;	std::error_category::~error_category(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_42B2
		mov	ecx, [ebp+var_4]
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_42B2:				; CODE XREF: std::error_category::`scalar deleting destructor'(uint)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_Gerror_category@std@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$di	segment	para public 'CODE' use32
		assume cs:_text$di
		;org 42C8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl `dynamic	initializer for	'public: static class std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc	near
					; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Generic_object$initializer$)(void)o
		push	ebp
		mov	ebp, esp
		mov	ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
		call	??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
		push	offset ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; void (__cdecl *)()
		call	_atexit
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$di	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$di	segment	para public 'CODE' use32
		assume cs:_text$di
		;org 42ECh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl `dynamic	initializer for	'public: static class std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
					; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Iostream_object$initializer$)(void)o
		push	ebp
		mov	ebp, esp
		mov	ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
		call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category(void)
		push	offset ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; void (__cdecl *)()
		call	_atexit
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$di	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$di	segment	para public 'CODE' use32
		assume cs:_text$di
		;org 4310h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl `dynamic	initializer for	'public: static class std::_System_error_category std::_Error_objects<int>::_System_object''(void)
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
					; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_System_object$initializer$)(void)o
		push	ebp
		mov	ebp, esp
		mov	ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
		call	??0_System_error_category@std@@QAE@XZ ;	std::_System_error_category::_System_error_category(void)
		push	offset ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ	; void (__cdecl	*)()
		call	_atexit
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$di	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$di	segment	para public 'CODE' use32
		assume cs:_text$di
		;org 4334h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl `dynamic	initializer for	'public: static class std::locale::id std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id''(void)
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc	near
					; DATA XREF: .CRT$XCU:void (*std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id$initializer$)(void)o
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, esp
		push	0		; unsigned int
		mov	ecx, offset ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; this
		call	dword ptr ds:__imp_??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp

_text$di	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$di	segment	para public 'CODE' use32
		assume cs:_text$di
		;org 4358h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl `dynamic	initializer for	'public: static class std::locale::id std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id''(void)
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
					; DATA XREF: .CRT$XCU:void (*std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id$initializer$)(void)o
		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, esp
		push	0		; unsigned int
		mov	ecx, offset ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; this
		call	dword ptr ds:__imp_??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp

_text$di	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$di	segment	para public 'CODE' use32
		assume cs:_text$di
		;org 437Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl std::`dynamic initializer for 'allocator_arg''(void)
??__Eallocator_arg@std@@YAXXZ proc near	; DATA XREF: .CRT$XCU:_allocator_arg$initializer$o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		xor	eax, eax
		mov	byte ptr [ebp+var_4+3],	al
		mov	esp, ebp
		pop	ebp
		retn
??__Eallocator_arg@std@@YAXXZ endp

_text$di	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$di	segment	para public 'CODE' use32
		assume cs:_text$di
		;org 4390h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl std::`dynamic initializer for 'piecewise_construct''(void)
??__Epiecewise_construct@std@@YAXXZ proc near
					; DATA XREF: .CRT$XCU:_piecewise_construct$initializer$o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		xor	eax, eax
		mov	byte ptr [ebp+var_4+3],	al
		mov	esp, ebp
		pop	ebp
		retn
??__Epiecewise_construct@std@@YAXXZ endp

_text$di	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$yd	segment	para public 'CODE' use32
		assume cs:_text$yd
		;org 43A4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl `dynamic	atexit destructor for 'public: static std::_Generic_error_category std::_Error_objects<int>::_Generic_object''()
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc	near
					; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+Do
		push	ebp
		mov	ebp, esp
		mov	ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
		call	??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$yd	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$yd	segment	para public 'CODE' use32
		assume cs:_text$yd
		;org 43BCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl `dynamic	atexit destructor for 'public: static std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''()
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
					; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+Do
		push	ebp
		mov	ebp, esp
		mov	ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
		call	??1_Iostream_error_category@std@@UAE@XZ	; std::_Iostream_error_category::~_Iostream_error_category(void)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$yd	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$yd	segment	para public 'CODE' use32
		assume cs:_text$yd
		;org 43D4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl `dynamic	atexit destructor for 'public: static std::_System_error_category std::_Error_objects<int>::_System_object''()
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
					; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+Do
		push	ebp
		mov	ebp, esp
		mov	ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
		call	??1_System_error_category@std@@UAE@XZ ;	std::_System_error_category::~_System_error_category(void)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$yd	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 43ECh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static void __cdecl RefPtr<class mozilla::gfx::DrawTarget>::AddRefTraits<class mozilla::gfx::DrawTarget>::AddRef(class mozilla::gfx::DrawTarget *)
		public ?AddRef@?$AddRefTraits@VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@SAXPAVDrawTarget@gfx@mozilla@@@Z
?AddRef@?$AddRefTraits@VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@SAXPAVDrawTarget@gfx@mozilla@@@Z proc near
					; CODE XREF: RefPtr<mozilla::gfx::DrawTarget>::RefPtr<mozilla::gfx::DrawTarget>(mozilla::gfx::DrawTarget *)+24p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	eax
		call	?AddRefTraitsAddRefHelper@?$RefPtr@VDrawTarget@gfx@mozilla@@@@CAXPAVDrawTarget@gfx@mozilla@@@Z ; RefPtr<mozilla::gfx::DrawTarget>::AddRefTraitsAddRefHelper(mozilla::gfx::DrawTarget *)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?AddRef@?$AddRefTraits@VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@SAXPAVDrawTarget@gfx@mozilla@@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4404h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static void __cdecl RefPtr<class mozilla::gfx::DrawTargetDual>::AddRefTraits<class mozilla::gfx::DrawTargetDual>::AddRef(class mozilla::gfx::DrawTargetDual *)
		public ?AddRef@?$AddRefTraits@VDrawTargetDual@gfx@mozilla@@@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@SAXPAVDrawTargetDual@gfx@mozilla@@@Z
?AddRef@?$AddRefTraits@VDrawTargetDual@gfx@mozilla@@@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@SAXPAVDrawTargetDual@gfx@mozilla@@@Z proc near
					; CODE XREF: RefPtr<mozilla::gfx::DrawTargetDual>::RefPtr<mozilla::gfx::DrawTargetDual>(mozilla::gfx::DrawTargetDual *)+24p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	eax
		call	?AddRefTraitsAddRefHelper@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@CAXPAVDrawTargetDual@gfx@mozilla@@@Z ; RefPtr<mozilla::gfx::DrawTargetDual>::AddRefTraitsAddRefHelper(mozilla::gfx::DrawTargetDual *)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?AddRef@?$AddRefTraits@VDrawTargetDual@gfx@mozilla@@@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@SAXPAVDrawTargetDual@gfx@mozilla@@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 441Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static void __cdecl RefPtr<class mozilla::gfx::SourceSurface>::AddRefTraits<class mozilla::gfx::SourceSurface>::AddRef(class mozilla::gfx::SourceSurface *)
		public ?AddRef@?$AddRefTraits@VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@SAXPAVSourceSurface@gfx@mozilla@@@Z
?AddRef@?$AddRefTraits@VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@SAXPAVSourceSurface@gfx@mozilla@@@Z proc near
					; CODE XREF: RefPtr<mozilla::gfx::SourceSurface>::RefPtr<mozilla::gfx::SourceSurface>(mozilla::gfx::SourceSurface *)+24p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	eax
		call	?AddRefTraitsAddRefHelper@?$RefPtr@VSourceSurface@gfx@mozilla@@@@CAXPAVSourceSurface@gfx@mozilla@@@Z ; RefPtr<mozilla::gfx::SourceSurface>::AddRefTraitsAddRefHelper(mozilla::gfx::SourceSurface *)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?AddRef@?$AddRefTraits@VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@SAXPAVSourceSurface@gfx@mozilla@@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4434h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static void __cdecl RefPtr<class mozilla::gfx::SourceSurfaceDual>::AddRefTraits<class	mozilla::gfx::SourceSurfaceDual>::AddRef(class mozilla::gfx::SourceSurfaceDual *)
		public ?AddRef@?$AddRefTraits@VSourceSurfaceDual@gfx@mozilla@@@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@SAXPAVSourceSurfaceDual@gfx@mozilla@@@Z
?AddRef@?$AddRefTraits@VSourceSurfaceDual@gfx@mozilla@@@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@SAXPAVSourceSurfaceDual@gfx@mozilla@@@Z proc	near
					; CODE XREF: RefPtr<mozilla::gfx::SourceSurfaceDual>::RefPtr<mozilla::gfx::SourceSurfaceDual>(mozilla::gfx::SourceSurfaceDual *)+24p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	eax
		call	?AddRefTraitsAddRefHelper@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@CAXPAVSourceSurfaceDual@gfx@mozilla@@@Z ; RefPtr<mozilla::gfx::SourceSurfaceDual>::AddRefTraitsAddRefHelper(mozilla::gfx::SourceSurfaceDual *)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?AddRef@?$AddRefTraits@VSourceSurfaceDual@gfx@mozilla@@@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@SAXPAVSourceSurfaceDual@gfx@mozilla@@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 444Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall mozilla::detail::RefCounted<class mozilla::gfx::DrawTarget, 1>::AddRef(void)const
		public ?AddRef@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ
?AddRef@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ proc near
					; CODE XREF: RefPtr<mozilla::gfx::DrawTarget>::AddRefTraitsAddRefHelper(mozilla::gfx::DrawTarget *)+9p
					; RefPtr<mozilla::gfx::DrawTargetDual>::AddRefTraitsAddRefHelper(mozilla::gfx::DrawTargetDual *)+9p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx

loc_445A:				; CODE XREF: mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::AddRef(void)+10j
		xor	eax, eax
		jnz	short loc_445A
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx]
		add	edx, 1
		mov	eax, [ebp+var_4]
		mov	[eax], edx
		mov	esp, ebp
		pop	ebp
		retn
?AddRef@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4470h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall mozilla::detail::RefCounted<class mozilla::gfx::SourceSurface, 0>::AddRef(void)const
		public ?AddRef@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ
?AddRef@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ proc near
					; CODE XREF: RefPtr<mozilla::gfx::SourceSurface>::AddRefTraitsAddRefHelper(mozilla::gfx::SourceSurface *)+9p
					; RefPtr<mozilla::gfx::SourceSurfaceDual>::AddRefTraitsAddRefHelper(mozilla::gfx::SourceSurfaceDual *)+9p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx

loc_447E:				; CODE XREF: mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::AddRef(void)+10j
		xor	eax, eax
		jnz	short loc_447E
		mov	ecx, [ebp+var_4]
		call	??E?$AtomicBaseIncDec@I$01@detail@mozilla@@QAEIXZ ; mozilla::detail::AtomicBaseIncDec<uint,2>::operator++(void)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?AddRef@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4498h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; private: static void __cdecl RefPtr<class mozilla::gfx::DrawTarget>::AddRefTraitsAddRefHelper(class mozilla::gfx::DrawTarget *)
		public ?AddRefTraitsAddRefHelper@?$RefPtr@VDrawTarget@gfx@mozilla@@@@CAXPAVDrawTarget@gfx@mozilla@@@Z
?AddRefTraitsAddRefHelper@?$RefPtr@VDrawTarget@gfx@mozilla@@@@CAXPAVDrawTarget@gfx@mozilla@@@Z proc near
					; CODE XREF: RefPtr<mozilla::gfx::DrawTarget>::AddRefTraits<mozilla::gfx::DrawTarget>::AddRef(mozilla::gfx::DrawTarget *)+7p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		add	ecx, 4
		call	?AddRef@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ ; mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::AddRef(void)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?AddRefTraitsAddRefHelper@?$RefPtr@VDrawTarget@gfx@mozilla@@@@CAXPAVDrawTarget@gfx@mozilla@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 44B0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; private: static void __cdecl RefPtr<class mozilla::gfx::DrawTargetDual>::AddRefTraitsAddRefHelper(class mozilla::gfx::DrawTargetDual *)
		public ?AddRefTraitsAddRefHelper@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@CAXPAVDrawTargetDual@gfx@mozilla@@@Z
?AddRefTraitsAddRefHelper@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@CAXPAVDrawTargetDual@gfx@mozilla@@@Z proc near
					; CODE XREF: RefPtr<mozilla::gfx::DrawTargetDual>::AddRefTraits<mozilla::gfx::DrawTargetDual>::AddRef(mozilla::gfx::DrawTargetDual *)+7p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		add	ecx, 4
		call	?AddRef@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ ; mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::AddRef(void)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?AddRefTraitsAddRefHelper@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@CAXPAVDrawTargetDual@gfx@mozilla@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 44C8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; private: static void __cdecl RefPtr<class mozilla::gfx::SourceSurface>::AddRefTraitsAddRefHelper(class mozilla::gfx::SourceSurface *)
		public ?AddRefTraitsAddRefHelper@?$RefPtr@VSourceSurface@gfx@mozilla@@@@CAXPAVSourceSurface@gfx@mozilla@@@Z
?AddRefTraitsAddRefHelper@?$RefPtr@VSourceSurface@gfx@mozilla@@@@CAXPAVSourceSurface@gfx@mozilla@@@Z proc near
					; CODE XREF: RefPtr<mozilla::gfx::SourceSurface>::AddRefTraits<mozilla::gfx::SourceSurface>::AddRef(mozilla::gfx::SourceSurface	*)+7p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		add	ecx, 4
		call	?AddRef@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ ; mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::AddRef(void)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?AddRefTraitsAddRefHelper@?$RefPtr@VSourceSurface@gfx@mozilla@@@@CAXPAVSourceSurface@gfx@mozilla@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 44E0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; private: static void __cdecl RefPtr<class mozilla::gfx::SourceSurfaceDual>::AddRefTraitsAddRefHelper(class mozilla::gfx::SourceSurfaceDual *)
		public ?AddRefTraitsAddRefHelper@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@CAXPAVSourceSurfaceDual@gfx@mozilla@@@Z
?AddRefTraitsAddRefHelper@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@CAXPAVSourceSurfaceDual@gfx@mozilla@@@Z proc near
					; CODE XREF: RefPtr<mozilla::gfx::SourceSurfaceDual>::AddRefTraits<mozilla::gfx::SourceSurfaceDual>::AddRef(mozilla::gfx::SourceSurfaceDual *)+7p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		add	ecx, 4
		call	?AddRef@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ ; mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::AddRef(void)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?AddRefTraitsAddRefHelper@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@CAXPAVSourceSurfaceDual@gfx@mozilla@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 44F8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; private: static void __cdecl RefPtr<class mozilla::gfx::DrawTarget>::AddRefTraitsReleaseHelper(class mozilla::gfx::DrawTarget	*)
		public ?AddRefTraitsReleaseHelper@?$RefPtr@VDrawTarget@gfx@mozilla@@@@CAXPAVDrawTarget@gfx@mozilla@@@Z
?AddRefTraitsReleaseHelper@?$RefPtr@VDrawTarget@gfx@mozilla@@@@CAXPAVDrawTarget@gfx@mozilla@@@Z	proc near
					; CODE XREF: RefPtr<mozilla::gfx::DrawTarget>::AddRefTraits<mozilla::gfx::DrawTarget>::Release(mozilla::gfx::DrawTarget	*)+7p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		add	ecx, 4
		call	?Release@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ ; mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::Release(void)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?AddRefTraitsReleaseHelper@?$RefPtr@VDrawTarget@gfx@mozilla@@@@CAXPAVDrawTarget@gfx@mozilla@@@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4510h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; private: static void __cdecl RefPtr<class mozilla::gfx::DrawTargetDual>::AddRefTraitsReleaseHelper(class mozilla::gfx::DrawTargetDual	*)
		public ?AddRefTraitsReleaseHelper@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@CAXPAVDrawTargetDual@gfx@mozilla@@@Z
?AddRefTraitsReleaseHelper@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@CAXPAVDrawTargetDual@gfx@mozilla@@@Z	proc near
					; CODE XREF: RefPtr<mozilla::gfx::DrawTargetDual>::AddRefTraits<mozilla::gfx::DrawTargetDual>::Release(mozilla::gfx::DrawTargetDual *)+7p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		add	ecx, 4
		call	?Release@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ ; mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::Release(void)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?AddRefTraitsReleaseHelper@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@CAXPAVDrawTargetDual@gfx@mozilla@@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4528h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; private: static void __cdecl RefPtr<class mozilla::gfx::SourceSurface>::AddRefTraitsReleaseHelper(class mozilla::gfx::SourceSurface *)
		public ?AddRefTraitsReleaseHelper@?$RefPtr@VSourceSurface@gfx@mozilla@@@@CAXPAVSourceSurface@gfx@mozilla@@@Z
?AddRefTraitsReleaseHelper@?$RefPtr@VSourceSurface@gfx@mozilla@@@@CAXPAVSourceSurface@gfx@mozilla@@@Z proc near
					; CODE XREF: RefPtr<mozilla::gfx::SourceSurface>::AddRefTraits<mozilla::gfx::SourceSurface>::Release(mozilla::gfx::SourceSurface *)+7p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		add	ecx, 4
		call	?Release@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ ;	mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::Release(void)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?AddRefTraitsReleaseHelper@?$RefPtr@VSourceSurface@gfx@mozilla@@@@CAXPAVSourceSurface@gfx@mozilla@@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4540h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; private: static void __cdecl RefPtr<class mozilla::gfx::SourceSurfaceDual>::AddRefTraitsReleaseHelper(class mozilla::gfx::SourceSurfaceDual *)
		public ?AddRefTraitsReleaseHelper@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@CAXPAVSourceSurfaceDual@gfx@mozilla@@@Z
?AddRefTraitsReleaseHelper@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@CAXPAVSourceSurfaceDual@gfx@mozilla@@@Z proc near
					; CODE XREF: RefPtr<mozilla::gfx::SourceSurfaceDual>::AddRefTraits<mozilla::gfx::SourceSurfaceDual>::Release(mozilla::gfx::SourceSurfaceDual *)+7p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		add	ecx, 4
		call	?Release@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ ;	mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::Release(void)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?AddRefTraitsReleaseHelper@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@CAXPAVSourceSurfaceDual@gfx@mozilla@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4558h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: bool __thiscall mozilla::gfx::Log<2, struct mozilla::gfx::BasicLogger>::AutoPrefix(void)const
		public ?AutoPrefix@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ
?AutoPrefix@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ proc near
					; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason)+57p

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+0B0h]
		and	ecx, 2
		jz	short loc_4583
		mov	byte ptr [ebp+var_8+3],	1
		jmp	short loc_4587
; ---------------------------------------------------------------------------

loc_4583:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::AutoPrefix(void)+23j
		mov	byte ptr [ebp+var_8+3],	0

loc_4587:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::AutoPrefix(void)+29j
		mov	al, byte ptr [ebp+var_8+3]
		mov	esp, ebp
		pop	ebp
		retn
?AutoPrefix@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4590h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void __thiscall mozilla::gfx::DrawTargetDual::ClearRect(struct mozilla::gfx::RectTyped<struct	mozilla::gfx::UnknownUnits, float> const &)
		public ?ClearRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z
?ClearRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z proc near
					; DATA XREF: .rdata:00009254o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_8], eax
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+38h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_C], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		mov	ecx, [ebp+var_C]
		mov	edx, [eax+38h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?ClearRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4610h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void __thiscall mozilla::gfx::DrawTarget::CopyRect(struct mozilla::gfx::IntRectTyped<struct mozilla::gfx::UnknownUnits> const	&, struct mozilla::gfx::IntPointTyped<struct mozilla::gfx::UnknownUnits> const &)
		public ?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z
?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z proc near
					; DATA XREF: .rdata:0000917Co
					; .rdata:0000925Co

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 1Ch
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_28], eax
		mov	[ebp+var_24], eax
		mov	[ebp+var_20], eax
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	esi, esp
		lea	eax, [ebp+var_20]
		push	eax
		mov	ecx, [ebp+var_10]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_10]
		mov	eax, [edx+14h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_24], eax
		mov	ecx, [ebp+var_24]
		mov	[ebp+var_28], ecx
		mov	[ebp+var_4], 0
		mov	edx, [ebp+var_28]
		push	edx
		lea	ecx, [ebp+var_18]
		call	??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z ;	RefPtr<mozilla::gfx::SourceSurface>::RefPtr<mozilla::gfx::SourceSurface>(already_AddRefed<mozilla::gfx::SourceSurface> &&)
		mov	byte ptr [ebp+var_4], 2
		lea	ecx, [ebp+var_20]
		call	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ ; already_AddRefed<mozilla::gfx::SourceSurface>::~already_AddRefed<mozilla::gfx::SourceSurface>(void)
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		lea	ecx, [ebp+var_18]
		call	??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ ;	RefPtr<mozilla::gfx::SourceSurface>::operator mozilla::gfx::SourceSurface *(void)
		push	eax
		mov	edx, [ebp+var_10]
		mov	eax, [edx]
		mov	ecx, [ebp+var_10]
		mov	edx, [eax+3Ch]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_18]
		call	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ ; RefPtr<mozilla::gfx::SourceSurface>::~RefPtr<mozilla::gfx::SourceSurface>(void)
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN8
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	esi
		add	esp, 28h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z endp

; ---------------------------------------------------------------------------
$LN8		dd 1			; DATA XREF: mozilla::gfx::DrawTarget::CopyRect(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const &,mozilla::gfx::IntPointTyped<mozilla::gfx::UnknownUnits> const &)+BFo
		dd offset $LN7
$LN7		dd 0FFFFFFE8h, 4	; DATA XREF: .text$mn:000046FCo
		dd offset $LN5_2	; "source"
$LN5_2		db 'source',0           ; DATA XREF: .text$mn:00004708o
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 4714h
; COMDAT (pick associative to section at 4610)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$0 proc near
					; DATA XREF: .xdata$x:00008898o
		lea	ecx, [ebp-20h]
		jmp	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ ; already_AddRefed<mozilla::gfx::SourceSurface>::~already_AddRefed<mozilla::gfx::SourceSurface>(void)
__unwindfunclet$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$1 proc near
					; DATA XREF: .xdata$x:000088A0o
					; .xdata$x:000088A8o
		lea	ecx, [ebp-18h]
		jmp	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ ; RefPtr<mozilla::gfx::SourceSurface>::~RefPtr<mozilla::gfx::SourceSurface>(void)
__unwindfunclet$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z	proc near
					; DATA XREF: mozilla::gfx::DrawTarget::CopyRect(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const &,mozilla::gfx::IntPointTyped<mozilla::gfx::UnknownUnits> const &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-24h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z
		jmp	___CxxFrameHandler3
__ehhandler$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4740h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static void __cdecl mozilla::gfx::BasicLogger::CrashAction(enum  mozilla::gfx::LogReason)
		public ?CrashAction@BasicLogger@gfx@mozilla@@SAXW4LogReason@23@@Z
?CrashAction@BasicLogger@gfx@mozilla@@SAXW4LogReason@23@@Z proc	near
					; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::WriteLog(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&)+70p
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
?CrashAction@BasicLogger@gfx@mozilla@@SAXW4LogReason@23@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4748h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual struct already_AddRefed<class	mozilla::gfx::FilterNode> __thiscall mozilla::gfx::DrawTargetDual::CreateFilter(enum  mozilla::gfx::FilterType)
		public ?CreateFilter@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z
?CreateFilter@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z proc near
					; DATA XREF: .rdata:000092B4o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	[ebp+var_8], 0
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_C], eax
		mov	esi, esp
		movzx	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		mov	ecx, [ebp+var_C]
		mov	edx, [eax+98h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		or	eax, 1
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_0]
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?CreateFilter@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 47BCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual struct already_AddRefed<class	mozilla::gfx::GradientStops> __thiscall	mozilla::gfx::DrawTargetDual::CreateGradientStops(struct mozilla::gfx::GradientStop *, unsigned	int, enum  mozilla::gfx::ExtendMode)const
		public ?CreateGradientStops@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z
?CreateGradientStops@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z proc near
					; DATA XREF: .rdata:000092B0o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	[ebp+var_8], 0
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_C], eax
		mov	esi, esp
		movzx	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_C]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_C]
		mov	eax, [edx+94h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_8]
		or	ecx, 1
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	10h
?CreateGradientStops@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4838h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual struct already_AddRefed<class	mozilla::gfx::PathBuilder> __thiscall mozilla::gfx::DrawTargetDual::CreatePathBuilder(enum  mozilla::gfx::FillRule)const
		public ?CreatePathBuilder@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z
?CreatePathBuilder@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z proc near
					; DATA XREF: .rdata:000092ACo

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	[ebp+var_8], 0
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_C], eax
		mov	esi, esp
		movzx	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		mov	ecx, [ebp+var_C]
		mov	edx, [eax+90h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		or	eax, 1
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_0]
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?CreatePathBuilder@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 48ACh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual struct already_AddRefed<class	mozilla::gfx::DrawTarget> __thiscall mozilla::gfx::DrawTarget::CreateShadowDrawTarget(struct mozilla::gfx::IntSizeTyped<struct mozilla::gfx::UnknownUnits> const &, enum  mozilla::gfx::SurfaceFormat, float)const
		public ?CreateShadowDrawTarget@DrawTarget@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@M@Z
?CreateShadowDrawTarget@DrawTarget@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@M@Z proc near
					; DATA XREF: .rdata:000091C8o
					; .rdata:000092A8o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		push	esi
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	[ebp+var_8], 0
		mov	esi, esp
		movzx	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_4]
		mov	edx, [eax]
		mov	ecx, [ebp+var_4]
		mov	eax, [edx+84h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_8]
		or	ecx, 1
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		pop	esi
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	10h
?CreateShadowDrawTarget@DrawTarget@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@M@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4910h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual struct already_AddRefed<class	mozilla::gfx::SourceSurface> __thiscall	mozilla::gfx::DrawTargetDual::CreateSourceSurfaceFromData(unsigned char	*, struct mozilla::gfx::IntSizeTyped<struct mozilla::gfx::UnknownUnits>	const &, int, enum  mozilla::gfx::SurfaceFormat)const
		public ?CreateSourceSurfaceFromData@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z
?CreateSourceSurfaceFromData@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z proc	near
					; DATA XREF: .rdata:00009294o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	[ebp+var_8], 0
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_C], eax
		mov	esi, esp
		movzx	eax, [ebp+arg_10]
		push	eax
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		mov	ecx, [ebp+var_C]
		mov	edx, [eax+78h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		or	eax, 1
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_0]
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	14h
?CreateSourceSurfaceFromData@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 498Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual struct already_AddRefed<class	mozilla::gfx::SourceSurface> __thiscall	mozilla::gfx::DrawTargetDual::CreateSourceSurfaceFromNativeSurface(struct mozilla::gfx::NativeSurface const &)const
		public ?CreateSourceSurfaceFromNativeSurface@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z
?CreateSourceSurfaceFromNativeSurface@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z	proc near
					; DATA XREF: .rdata:0000929Co

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	[ebp+var_8], 0
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_C], eax
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		mov	ecx, [ebp+var_C]
		mov	edx, [eax+80h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		or	eax, 1
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_0]
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?CreateSourceSurfaceFromNativeSurface@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4A00h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static int __cdecl mozilla::gfx::Log<2, struct mozilla::gfx::BasicLogger>::DefaultOptions(bool)
		public ?DefaultOptions@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@SAH_N@Z
?DefaultOptions@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@SAH_N@Z proc near
					; CODE XREF: mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::SurfaceFormat)+153p

var_4		= dword	ptr -4
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		movzx	eax, [ebp+arg_0]
		test	eax, eax
		jz	short loc_4A1C
		mov	[ebp+var_4], 4
		jmp	short loc_4A23
; ---------------------------------------------------------------------------

loc_4A1C:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::DefaultOptions(bool)+11j
		mov	[ebp+var_4], 0

loc_4A23:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::DefaultOptions(bool)+1Aj
		mov	eax, [ebp+var_4]
		or	eax, 2
		mov	esp, ebp
		pop	ebp
		retn
?DefaultOptions@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@SAH_N@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4A30h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall mozilla::gfx::UserData::Destroy(mozilla::gfx::UserData *__hidden this)
		public ?Destroy@UserData@gfx@mozilla@@QAEXXZ
?Destroy@UserData@gfx@mozilla@@QAEXXZ proc near
					; CODE XREF: mozilla::gfx::UserData::~UserData(void)+11p

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		push	esi
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	[ebp+var_8], 0
		jmp	short loc_4A5A
; ---------------------------------------------------------------------------

loc_4A51:				; CODE XREF: mozilla::gfx::UserData::Destroy(void):loc_4AA0j
		mov	eax, [ebp+var_8]
		add	eax, 1
		mov	[ebp+var_8], eax

loc_4A5A:				; CODE XREF: mozilla::gfx::UserData::Destroy(void)+1Fj
		mov	ecx, [ebp+var_4]
		mov	edx, [ebp+var_8]
		cmp	edx, [ecx]
		jge	short loc_4AA2
		imul	eax, [ebp+var_8], 0Ch
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+4]
		cmp	dword ptr [edx+eax+8], 0
		jz	short loc_4AA0
		imul	eax, [ebp+var_8], 0Ch
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+4]
		mov	esi, esp
		mov	eax, [edx+eax+4]
		push	eax
		imul	ecx, [ebp+var_8], 0Ch
		mov	edx, [ebp+var_4]
		mov	eax, [edx+4]
		mov	ecx, [eax+ecx+8]
		call	ecx
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_4AA0:				; CODE XREF: mozilla::gfx::UserData::Destroy(void)+43j
		jmp	short loc_4A51
; ---------------------------------------------------------------------------

loc_4AA2:				; CODE XREF: mozilla::gfx::UserData::Destroy(void)+32j
		mov	esi, esp
		mov	edx, [ebp+var_4]
		mov	eax, [edx+4]
		push	eax		; Memory
		call	dword ptr ds:__imp__free
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		mov	dword ptr [ecx+4], 0
		mov	edx, [ebp+var_4]
		mov	dword ptr [edx], 0
		pop	esi
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?Destroy@UserData@gfx@mozilla@@QAEXXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4AE0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void __thiscall mozilla::gfx::DrawTargetDual::DrawFilter(class mozilla::gfx::FilterNode *, struct mozilla::gfx::RectTyped<struct mozilla::gfx::UnknownUnits, float> const &, struct mozilla::gfx::PointTyped<struct mozilla::gfx::UnknownUnits, float> const &, struct mozilla::gfx::DrawOptions const &)
		public ?DrawFilter@DrawTargetDual@gfx@mozilla@@UAEXPAVFilterNode@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z
?DrawFilter@DrawTargetDual@gfx@mozilla@@UAEXPAVFilterNode@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z proc near
					; DATA XREF: .rdata:0000924Co

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_8], eax
		mov	esi, esp
		mov	eax, [ebp+arg_C]
		push	eax
		mov	ecx, [ebp+arg_8]
		push	ecx
		mov	edx, [ebp+arg_4]
		push	edx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+30h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_C], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_C]
		push	ecx
		mov	edx, [ebp+arg_8]
		push	edx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		mov	ecx, [ebp+var_C]
		mov	edx, [eax+30h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	10h
?DrawFilter@DrawTargetDual@gfx@mozilla@@UAEXPAVFilterNode@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4B78h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall mozilla::gfx::Log<2, struct mozilla::gfx::BasicLogger>::Flush(void)
		public ?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ
?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ proc near
					; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::~Log<2,mozilla::gfx::BasicLogger>(void)+37p

var_54		= byte ptr -54h
var_34		= byte ptr -34h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ
		mov	eax, large fs:0
		push	eax
		sub	esp, 48h
		push	edi
		push	ecx
		lea	edi, [ebp+var_54]
		mov	ecx, 12h
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_10], eax
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_14], ecx
		mov	ecx, [ebp+var_14]
		call	?LogIt@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ	; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::LogIt(void)
		movzx	eax, al
		test	eax, eax
		jnz	short loc_4BC6
		jmp	short loc_4C2C
; ---------------------------------------------------------------------------

loc_4BC6:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Flush(void)+4Aj
		lea	ecx, [ebp+var_34]
		push	ecx
		mov	ecx, [ebp+var_14]
		call	?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(void)
		mov	[ebp+var_4], 0
		lea	ecx, [ebp+var_34]
		call	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)
		movzx	edx, al
		test	edx, edx
		jnz	short loc_4BF4
		lea	eax, [ebp+var_34]
		push	eax
		mov	ecx, [ebp+var_14]
		call	?WriteLog@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::WriteLog(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)

loc_4BF4:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Flush(void)+6Ej
		push	offset ??_C@_00CNPNBAHC@?$AA@ ;	Str
		lea	ecx, [ebp+var_54]
		call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
		mov	byte ptr [ebp+var_4], 1
		lea	ecx, [ebp+var_54]
		push	ecx
		mov	ecx, [ebp+var_14]
		call	?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
		mov	byte ptr [ebp+var_4], 0
		lea	ecx, [ebp+var_54]
		call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
		mov	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_34]
		call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)

loc_4C2C:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Flush(void)+4Cj
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN10
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		mov	ecx, [ebp+var_10]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 54h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ endp

; ---------------------------------------------------------------------------
		align 4
$LN10		dd 1			; DATA XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Flush(void)+B8o
		dd offset $LN9_1
$LN9_1		db 0CCh			; DATA XREF: .text$mn:00004C68o
		db 3 dup(0FFh)
		dd 1Ch
		dd offset $LN7_7
; ---------------------------------------------------------------------------

$LN7_7:					; DATA XREF: .text$mn:00004C74o
		jnb	short loc_4CEE
		jb	short $+2
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 4C7Ch
; COMDAT (pick associative to section at 4B78)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ$0 proc near
					; CODE XREF: .text$mn:00004C7Aj
					; DATA XREF: .xdata$x:00008D04o
		lea	ecx, [ebp-34h]
		jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
__unwindfunclet$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ$1 proc near
					; DATA XREF: .xdata$x:00008D0Co
		lea	ecx, [ebp-54h]
		jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
__unwindfunclet$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ proc	near
					; DATA XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Flush(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-50h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	ecx, [edx-4]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ
		jmp	___CxxFrameHandler3
__ehhandler$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4CB4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall mozilla::gfx::DrawTargetDual::Flush(mozilla::gfx::DrawTargetDual *__hidden this)
		public ?Flush@DrawTargetDual@gfx@mozilla@@UAEXXZ
?Flush@DrawTargetDual@gfx@mozilla@@UAEXXZ proc near ; DATA XREF: .rdata:00009240o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		mov	edx, [eax]
		mov	esi, esp
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+24h]

loc_4CEE:				; CODE XREF: .text$mn:$LN7_7j
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_C], eax
		mov	ecx, [ebp+var_C]
		mov	edx, [ecx]
		mov	esi, esp
		mov	ecx, [ebp+var_C]
		mov	eax, [edx+24h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?Flush@DrawTargetDual@gfx@mozilla@@UAEXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4D2Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual enum	mozilla::gfx::BackendType __thiscall mozilla::gfx::DrawTargetDual::GetBackendType(void)const
		public ?GetBackendType@DrawTargetDual@gfx@mozilla@@UBE?AW4BackendType@23@XZ
?GetBackendType@DrawTargetDual@gfx@mozilla@@UBE?AW4BackendType@23@XZ proc near
					; DATA XREF: .rdata:00009228o

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		push	esi
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		mov	edx, [eax]
		mov	esi, esp
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+0Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?GetBackendType@DrawTargetDual@gfx@mozilla@@UBE?AW4BackendType@23@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4D78h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual struct already_AddRefed<class	mozilla::gfx::DataSourceSurface> __thiscall mozilla::gfx::SourceSurfaceDual::GetDataSurface(void)
		public ?GetDataSurface@SourceSurfaceDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@XZ
?GetDataSurface@SourceSurfaceDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@XZ proc near
					; DATA XREF: .rdata:0000920Co

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	[ebp+var_8], 0
		mov	ecx, [ebp+var_4]
		add	ecx, 10h
		call	??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ ;	RefPtr<mozilla::gfx::SourceSurface>::operator->(void)
		mov	[ebp+var_C], eax
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_C]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_C]
		mov	eax, [edx+14h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_8]
		or	ecx, 1
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?GetDataSurface@SourceSurfaceDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4DE4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: enum	mozilla::gfx::SurfaceFormat __thiscall mozilla::gfx::DrawTarget::GetFormat(void)const
		public ?GetFormat@DrawTarget@gfx@mozilla@@QBE?AW4SurfaceFormat@23@XZ
?GetFormat@DrawTarget@gfx@mozilla@@QBE?AW4SurfaceFormat@23@XZ proc near
					; CODE XREF: mozilla::gfx::DrawTargetDual::DrawTargetDual(mozilla::gfx::DrawTarget *,mozilla::gfx::DrawTarget *)+6Ep
					; mozilla::gfx::DrawTarget::IsCurrentGroupOpaque(void)+1Ap

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	al, [eax+39h]
		mov	esp, ebp
		pop	ebp
		retn
?GetFormat@DrawTarget@gfx@mozilla@@QBE?AW4SurfaceFormat@23@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4DFCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual enum	mozilla::gfx::SurfaceFormat __thiscall mozilla::gfx::SourceSurfaceDual::GetFormat(void)const
		public ?GetFormat@SourceSurfaceDual@gfx@mozilla@@UBE?AW4SurfaceFormat@23@XZ
?GetFormat@SourceSurfaceDual@gfx@mozilla@@UBE?AW4SurfaceFormat@23@XZ proc near
					; DATA XREF: .rdata:00009204o

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		push	esi
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		add	ecx, 10h
		call	??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ ;	RefPtr<mozilla::gfx::SourceSurface>::operator->(void)
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		mov	edx, [eax]
		mov	esi, esp
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+0Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?GetFormat@SourceSurfaceDual@gfx@mozilla@@UBE?AW4SurfaceFormat@23@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4E48h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall mozilla::gfx::DrawTarget::GetNativeSurface(enum  mozilla::gfx::NativeSurfaceType)
		public ?GetNativeSurface@DrawTarget@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z
?GetNativeSurface@DrawTarget@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z proc near
					; DATA XREF: .rdata:000091DCo

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		xor	eax, eax
		mov	esp, ebp
		pop	ebp
		retn	4
?GetNativeSurface@DrawTarget@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4E60h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall mozilla::gfx::DrawTargetDual::GetNativeSurface(enum	 mozilla::gfx::NativeSurfaceType)
		public ?GetNativeSurface@DrawTargetDual@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z
?GetNativeSurface@DrawTargetDual@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z proc near
					; DATA XREF: .rdata:000092BCo

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		xor	eax, eax
		mov	esp, ebp
		pop	ebp
		retn	4
?GetNativeSurface@DrawTargetDual@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4E78h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall mozilla::gfx::SourceSurface::GetNativeSurface(enum	mozilla::gfx::NativeSurfaceType)
		public ?GetNativeSurface@SourceSurface@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z
?GetNativeSurface@SourceSurface@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z proc near
					; DATA XREF: .rdata:00009130o
					; .rdata:00009210o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		xor	eax, eax
		mov	esp, ebp
		pop	ebp
		retn	4
?GetNativeSurface@SourceSurface@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4E90h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual struct mozilla::gfx::IntSizeTyped<struct mozilla::gfx::UnknownUnits> __thiscall mozilla::gfx::DrawTargetDual::GetSize(void)
		public ?GetSize@DrawTargetDual@gfx@mozilla@@UAE?AU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@XZ
?GetSize@DrawTargetDual@gfx@mozilla@@UAE?AU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@XZ proc near
					; DATA XREF: .rdata:00009234o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		push	esi
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_8], eax
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+18h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		pop	esi
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?GetSize@DrawTargetDual@gfx@mozilla@@UAE?AU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4EE4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual struct mozilla::gfx::IntSizeTyped<struct mozilla::gfx::UnknownUnits> __thiscall mozilla::gfx::SourceSurfaceDual::GetSize(void)const
		public ?GetSize@SourceSurfaceDual@gfx@mozilla@@UBE?AU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@XZ
?GetSize@SourceSurfaceDual@gfx@mozilla@@UBE?AU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@XZ proc near
					; DATA XREF: .rdata:00009200o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		push	esi
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		add	ecx, 10h
		call	??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ ;	RefPtr<mozilla::gfx::SourceSurface>::operator->(void)
		mov	[ebp+var_8], eax
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+8]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		pop	esi
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?GetSize@SourceSurfaceDual@gfx@mozilla@@UBE?AU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4F38h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual enum	mozilla::gfx::DrawTargetType __thiscall	mozilla::gfx::DrawTargetDual::GetType(void)const
		public ?GetType@DrawTargetDual@gfx@mozilla@@UBE?AW4DrawTargetType@23@XZ
?GetType@DrawTargetDual@gfx@mozilla@@UBE?AW4DrawTargetType@23@XZ proc near
					; DATA XREF: .rdata:00009224o

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		push	esi
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		mov	edx, [eax]
		mov	esi, esp
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+8]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?GetType@DrawTargetDual@gfx@mozilla@@UBE?AW4DrawTargetType@23@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4F84h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual enum	mozilla::gfx::SurfaceType __thiscall mozilla::gfx::SourceSurfaceDual::GetType(void)const
		public ?GetType@SourceSurfaceDual@gfx@mozilla@@UBE?AW4SurfaceType@23@XZ
?GetType@SourceSurfaceDual@gfx@mozilla@@UBE?AW4SurfaceType@23@XZ proc near
					; DATA XREF: .rdata:000091FCo

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	al, 8
		mov	esp, ebp
		pop	ebp
		retn
?GetType@SourceSurfaceDual@gfx@mozilla@@UBE?AW4SurfaceType@23@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4F98h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual enum	mozilla::gfx::PatternType __thiscall mozilla::gfx::SurfacePattern::GetType(void)const
		public ?GetType@SurfacePattern@gfx@mozilla@@UBE?AW4PatternType@23@XZ
?GetType@SurfacePattern@gfx@mozilla@@UBE?AW4PatternType@23@XZ proc near
					; DATA XREF: .rdata:00009110o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	al, 1
		mov	esp, ebp
		pop	ebp
		retn
?GetType@SurfacePattern@gfx@mozilla@@UBE?AW4PatternType@23@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4FACh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall mozilla::gfx::SourceSurface::GuaranteePersistance(mozilla::gfx::SourceSurface	*__hidden this)
		public ?GuaranteePersistance@SourceSurface@gfx@mozilla@@MAEXXZ
?GuaranteePersistance@SourceSurface@gfx@mozilla@@MAEXXZ	proc near
					; DATA XREF: .rdata:00009134o
					; .rdata:00009214o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	esp, ebp
		pop	ebp
		retn
?GuaranteePersistance@SourceSurface@gfx@mozilla@@MAEXXZ	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 4FC0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; private: void	__thiscall mozilla::gfx::Log<2,	struct mozilla::gfx::BasicLogger>::Init(int, bool, enum	 mozilla::gfx::LogReason)
		public ?Init@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@AAEXH_NW4LogReason@23@@Z
?Init@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@AAEXH_NW4LogReason@23@@Z	proc near
					; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Log<2,mozilla::gfx::BasicLogger>(int,mozilla::gfx::LogReason)+70p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	[eax+0B0h], ecx
		mov	edx, [ebp+var_4]
		mov	eax, [ebp+arg_8]
		mov	[edx+0B4h], eax
		mov	ecx, [ebp+var_4]
		mov	dl, [ebp+arg_4]
		mov	[ecx+0B8h], dl
		mov	eax, [ebp+var_4]
		movzx	ecx, byte ptr [eax+0B8h]
		test	ecx, ecx
		jz	loc_5147
		mov	ecx, [ebp+var_4]
		call	?AutoPrefix@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ ; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::AutoPrefix(void)
		movzx	edx, al
		test	edx, edx
		jz	loc_50BD
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+0B0h]
		and	ecx, 4
		jz	short loc_5073
		cmp	[ebp+var_4], 0
		jz	short loc_5046
		mov	edx, [ebp+var_4]
		add	edx, 10h
		mov	[ebp+var_8], edx
		jmp	short loc_504D
; ---------------------------------------------------------------------------

loc_5046:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason)+79j
		mov	[ebp+var_8], 0

loc_504D:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason)+84j
		mov	esi, esp
		push	2
		push	offset ??_C@_04HGKILAJC@?$FLGFX?$AA@ ; "[GFX"
		mov	eax, [ebp+var_8]
		push	eax		; int
		call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
		add	esp, 8
		mov	ecx, eax
		call	dword ptr ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z	; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_50BD
; ---------------------------------------------------------------------------

loc_5073:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason)+73j
		cmp	[ebp+var_4], 0
		jz	short loc_5084
		mov	ecx, [ebp+var_4]
		add	ecx, 10h
		mov	[ebp+var_C], ecx
		jmp	short loc_508B
; ---------------------------------------------------------------------------

loc_5084:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason)+B7j
		mov	[ebp+var_C], 0

loc_508B:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason)+C2j
		push	offset ??_C@_01JOAMLHOP@?9?$AA@	; Str
		mov	esi, esp
		push	2
		push	offset ??_C@_04HGKILAJC@?$FLGFX?$AA@ ; "[GFX"
		mov	edx, [ebp+var_C]
		push	edx		; int
		call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
		add	esp, 8
		mov	ecx, eax
		call	dword ptr ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z	; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax		; int
		call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
		add	esp, 8

loc_50BD:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason)+61j
					; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason)+B1j
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+0B0h]
		and	ecx, 8
		jz	short loc_511E
		mov	ecx, [ebp+var_4]
		call	?ValidReason@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ ;	mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::ValidReason(void)
		movzx	edx, al
		test	edx, edx
		jz	short loc_511E
		cmp	[ebp+var_4], 0
		jz	short loc_50EB
		mov	eax, [ebp+var_4]
		add	eax, 10h
		mov	[ebp+var_10], eax
		jmp	short loc_50F2
; ---------------------------------------------------------------------------

loc_50EB:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason)+11Ej
		mov	[ebp+var_10], 0

loc_50F2:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason)+129j
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+0B4h]
		push	edx
		push	offset ??_C@_01CLKCMJKC@?5?$AA@	; Str
		mov	eax, [ebp+var_10]
		push	eax		; int
		call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
		add	esp, 8
		mov	ecx, eax
		call	dword ptr ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z	; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_511E:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason)+109j
					; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason)+118j
		cmp	[ebp+var_4], 0
		jz	short loc_512F
		mov	ecx, [ebp+var_4]
		add	ecx, 10h
		mov	[ebp+var_14], ecx
		jmp	short loc_5136
; ---------------------------------------------------------------------------

loc_512F:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason)+162j
		mov	[ebp+var_14], 0

loc_5136:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason)+16Dj
		push	offset ??_C@_03FLKELDHI@?$FN?3?5?$AA@ ;	Str
		mov	edx, [ebp+var_14]
		push	edx		; int
		call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
		add	esp, 8

loc_5147:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason)+4Ej
		pop	esi
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?Init@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@AAEXH_NW4LogReason@23@@Z	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5158h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; bool __thiscall mozilla::gfx::DrawTarget::IsCurrentGroupOpaque(mozilla::gfx::DrawTarget *__hidden this)
		public ?IsCurrentGroupOpaque@DrawTarget@gfx@mozilla@@UAE_NXZ
?IsCurrentGroupOpaque@DrawTarget@gfx@mozilla@@UAE_NXZ proc near
					; DATA XREF: .rdata:000091ECo

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	?GetFormat@DrawTarget@gfx@mozilla@@QBE?AW4SurfaceFormat@23@XZ ;	mozilla::gfx::DrawTarget::GetFormat(void)
		cmp	al, 1
		jnz	short loc_5184
		mov	[ebp+var_8], 1
		jmp	short loc_518B
; ---------------------------------------------------------------------------

loc_5184:				; CODE XREF: mozilla::gfx::DrawTarget::IsCurrentGroupOpaque(void)+21j
		mov	[ebp+var_8], 0

loc_518B:				; CODE XREF: mozilla::gfx::DrawTarget::IsCurrentGroupOpaque(void)+2Aj
		mov	al, byte ptr [ebp+var_8]
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?IsCurrentGroupOpaque@DrawTarget@gfx@mozilla@@UAE_NXZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 519Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; bool __thiscall mozilla::gfx::DrawTargetDual::IsCurrentGroupOpaque(mozilla::gfx::DrawTargetDual *__hidden this)
		public ?IsCurrentGroupOpaque@DrawTargetDual@gfx@mozilla@@UAE_NXZ
?IsCurrentGroupOpaque@DrawTargetDual@gfx@mozilla@@UAE_NXZ proc near
					; DATA XREF: .rdata:000092CCo

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		push	esi
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		mov	edx, [eax]
		mov	esi, esp
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+0B0h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?IsCurrentGroupOpaque@DrawTargetDual@gfx@mozilla@@UAE_NXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 51ECh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; bool __thiscall mozilla::gfx::DrawTarget::IsDualDrawTarget(mozilla::gfx::DrawTarget *__hidden	this)
		public ?IsDualDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ
?IsDualDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ proc near ; DATA XREF: .rdata:000091E0o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		xor	al, al
		mov	esp, ebp
		pop	ebp
		retn
?IsDualDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5200h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; bool __thiscall mozilla::gfx::DrawTargetDual::IsDualDrawTarget(mozilla::gfx::DrawTargetDual *__hidden	this)
		public ?IsDualDrawTarget@DrawTargetDual@gfx@mozilla@@UBE_NXZ
?IsDualDrawTarget@DrawTargetDual@gfx@mozilla@@UBE_NXZ proc near
					; DATA XREF: .rdata:000092C0o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	al, 1
		mov	esp, ebp
		pop	ebp
		retn
?IsDualDrawTarget@DrawTargetDual@gfx@mozilla@@UBE_NXZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5214h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; bool __thiscall mozilla::gfx::DrawTarget::IsRecording(mozilla::gfx::DrawTarget *__hidden this)
		public ?IsRecording@DrawTarget@gfx@mozilla@@UBE_NXZ
?IsRecording@DrawTarget@gfx@mozilla@@UBE_NXZ proc near ; DATA XREF: .rdata:0000914Co
					; .rdata:0000922Co

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		xor	al, al
		mov	esp, ebp
		pop	ebp
		retn
?IsRecording@DrawTarget@gfx@mozilla@@UBE_NXZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5228h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; bool __thiscall mozilla::gfx::DrawTarget::IsTiledDrawTarget(mozilla::gfx::DrawTarget *__hidden this)
		public ?IsTiledDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ
?IsTiledDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ proc	near ; DATA XREF: .rdata:000091E4o
					; .rdata:000092C4o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		xor	al, al
		mov	esp, ebp
		pop	ebp
		retn
?IsTiledDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 523Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; bool __thiscall mozilla::gfx::DrawTarget::IsValid(mozilla::gfx::DrawTarget *__hidden this)
		public ?IsValid@DrawTarget@gfx@mozilla@@UBE_NXZ
?IsValid@DrawTarget@gfx@mozilla@@UBE_NXZ proc near ; DATA XREF:	.rdata:00009140o
					; .rdata:00009220o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	al, 1
		mov	esp, ebp
		pop	ebp
		retn
?IsValid@DrawTarget@gfx@mozilla@@UBE_NXZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5250h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; bool __thiscall mozilla::gfx::SourceSurface::IsValid(mozilla::gfx::SourceSurface *__hidden this)
		public ?IsValid@SourceSurface@gfx@mozilla@@UBE_NXZ
?IsValid@SourceSurface@gfx@mozilla@@UBE_NXZ proc near ;	DATA XREF: .rdata:00009128o
					; .rdata:00009208o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	al, 1
		mov	esp, ebp
		pop	ebp
		retn
?IsValid@SourceSurface@gfx@mozilla@@UBE_NXZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5264h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual bool __thiscall mozilla::gfx::DrawTarget::LockBits(unsigned char * *,	struct mozilla::gfx::IntSizeTyped<struct mozilla::gfx::UnknownUnits> *,	int *, enum  mozilla::gfx::SurfaceFormat *, struct mozilla::gfx::IntPointTyped<struct mozilla::gfx::UnknownUnits> *)
		public ?LockBits@DrawTarget@gfx@mozilla@@UAE_NPAPAEPAU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@PAHPAW4SurfaceFormat@23@PAU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z
?LockBits@DrawTarget@gfx@mozilla@@UAE_NPAPAEPAU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@PAHPAW4SurfaceFormat@23@PAU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z proc near
					; DATA XREF: .rdata:00009158o
					; .rdata:00009238o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		xor	al, al
		mov	esp, ebp
		pop	ebp
		retn	14h
?LockBits@DrawTarget@gfx@mozilla@@UAE_NPAPAEPAU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@PAHPAW4SurfaceFormat@23@PAU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 527Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: bool __thiscall mozilla::gfx::Log<2, struct mozilla::gfx::BasicLogger>::LogIt(void)const
		public ?LogIt@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ
?LogIt@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ	proc near
					; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::operator<<<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>>(mozilla::gfx::BaseSize<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>> const &)+1Cp
					; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::operator<<(char const	* const)+1Ap ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	al, [eax+0B8h]
		mov	esp, ebp
		pop	ebp
		retn
?LogIt@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5298h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: bool __thiscall mozilla::gfx::Log<2, struct mozilla::gfx::BasicLogger>::NoNewline(void)const
		public ?NoNewline@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ
?NoNewline@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ proc near
					; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::WriteLog(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&)+20p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	eax, [eax+0B0h]
		and	eax, 1
		mov	esp, ebp
		pop	ebp
		retn
?NoNewline@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 52B8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual struct already_AddRefed<class	mozilla::gfx::SourceSurface> __thiscall	mozilla::gfx::DrawTargetDual::OptimizeSourceSurface(class mozilla::gfx::SourceSurface *)const
		public ?OptimizeSourceSurface@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z
?OptimizeSourceSurface@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z proc near
					; DATA XREF: .rdata:00009298o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	[ebp+var_8], 0
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_C], eax
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		mov	ecx, [ebp+var_C]
		mov	edx, [eax+7Ch]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_8]
		or	eax, 1
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_0]
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?OptimizeSourceSurface@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5328h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static void __cdecl mozilla::gfx::BasicLogger::OutputMessage(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>	const &, int, bool)
		public ?OutputMessage@BasicLogger@gfx@mozilla@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z
?OutputMessage@BasicLogger@gfx@mozilla@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z proc near
					; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::WriteLog(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&)+2Fp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, dword ptr ds:?sGfxLogLevel@LoggingPrefs@gfx@mozilla@@2HA ;	int mozilla::gfx::LoggingPrefs::sGfxLogLevel
		cmp	eax, [ebp+arg_4]
		jl	short loc_5389
		cmp	dword ptr ds:?sGfxLogLevel@LoggingPrefs@gfx@mozilla@@2HA, 4 ; int mozilla::gfx::LoggingPrefs::sGfxLogLevel
		jge	short loc_534D
		cmp	[ebp+arg_4], 3
		jge	short loc_5389

loc_534D:				; CODE XREF: mozilla::gfx::BasicLogger::OutputMessage(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&,int,bool)+1Dj
		movzx	ecx, [ebp+arg_8]
		test	ecx, ecx
		jz	short loc_535E
		mov	[ebp+var_4], offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
		jmp	short loc_5365
; ---------------------------------------------------------------------------

loc_535E:				; CODE XREF: mozilla::gfx::BasicLogger::OutputMessage(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&,int,bool)+2Bj
		mov	[ebp+var_4], offset ??_C@_01EEMJAFIK@?6?$AA@ ; `string'

loc_5365:				; CODE XREF: mozilla::gfx::BasicLogger::OutputMessage(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&,int,bool)+34j
		mov	esi, esp
		mov	edx, [ebp+var_4]
		push	edx
		mov	ecx, [ebp+arg_0]
		call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
		push	eax
		push	offset ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@	; "%s%s"
		call	dword ptr ds:__imp__printf
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_5389:				; CODE XREF: mozilla::gfx::BasicLogger::OutputMessage(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&,int,bool)+14j
					; mozilla::gfx::BasicLogger::OutputMessage(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,int,bool)+23j
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?OutputMessage@BasicLogger@gfx@mozilla@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5398h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall mozilla::gfx::DrawTargetDual::PopClip(mozilla::gfx::DrawTargetDual *__hidden this)
		public ?PopClip@DrawTargetDual@gfx@mozilla@@UAEXXZ
?PopClip@DrawTargetDual@gfx@mozilla@@UAEXXZ proc near ;	DATA XREF: .rdata:00009288o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		mov	edx, [eax]
		mov	esi, esp
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+6Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_C], eax
		mov	ecx, [ebp+var_C]
		mov	edx, [ecx]
		mov	esi, esp
		mov	ecx, [ebp+var_C]
		mov	eax, [edx+6Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?PopClip@DrawTargetDual@gfx@mozilla@@UAEXXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5410h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall mozilla::gfx::DrawTarget::PopLayer(mozilla::gfx::DrawTarget *__hidden	this)
		public ?PopLayer@DrawTarget@gfx@mozilla@@UAEXXZ
?PopLayer@DrawTarget@gfx@mozilla@@UAEXXZ proc near ; DATA XREF:	.rdata:000091B0o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		push	edi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx

loc_5420:				; CODE XREF: mozilla::gfx::DrawTarget::PopLayer(void)+12j
					; mozilla::gfx::DrawTarget::PopLayer(void)+4Bj
		xor	eax, eax
		jnz	short loc_5420

loc_5424:				; CODE XREF: mozilla::gfx::DrawTarget::PopLayer(void)+47j
		int	3		; Trap to Debugger
		mov	dword ptr $SG70167, 3E6h ; "Failure to allocate	a similar DrawTarge"...
		mov	esi, esp
		push	3		; uExitCode
		mov	edi, esp
		call	dword ptr ds:__imp__GetCurrentProcess@0	; GetCurrentProcess()
		cmp	edi, esp
		call	__RTC_CheckEsp
		push	eax		; hProcess
		call	dword ptr ds:__imp__TerminateProcess@8 ; TerminateProcess(x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		call	_MOZ_NoReturn
		xor	ecx, ecx
		jnz	short loc_5424
		xor	edx, edx
		jnz	short loc_5420
		pop	edi
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?PopLayer@DrawTarget@gfx@mozilla@@UAEXXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5470h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall mozilla::gfx::DrawTargetDual::PopLayer(mozilla::gfx::DrawTargetDual *__hidden	this)
		public ?PopLayer@DrawTargetDual@gfx@mozilla@@UAEXXZ
?PopLayer@DrawTargetDual@gfx@mozilla@@UAEXXZ proc near ; DATA XREF: .rdata:00009290o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_8], eax
		mov	eax, [ebp+var_8]
		mov	edx, [eax]
		mov	esi, esp
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+74h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_C], eax
		mov	ecx, [ebp+var_C]
		mov	edx, [ecx]
		mov	esi, esp
		mov	ecx, [ebp+var_C]
		mov	eax, [edx+74h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?PopLayer@DrawTargetDual@gfx@mozilla@@UAEXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 54E8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall mozilla::gfx::DrawTargetDual::PushClip(mozilla::gfx::DrawTargetDual *this, const struct Path *)
		public ?PushClip@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@@Z
?PushClip@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@@Z	proc near
					; DATA XREF: .rdata:00009280o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_8], eax
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+64h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_C], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		mov	ecx, [ebp+var_C]
		mov	edx, [eax+64h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?PushClip@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@@Z	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5568h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void __thiscall mozilla::gfx::DrawTargetDual::PushClipRect(struct mozilla::gfx::RectTyped<struct mozilla::gfx::UnknownUnits, float> const &)
		public ?PushClipRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z
?PushClipRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z	proc near
					; DATA XREF: .rdata:00009284o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_8], eax
		mov	esi, esp
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+68h]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_C], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		mov	ecx, [ebp+var_C]
		mov	edx, [eax+68h]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?PushClipRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 55E8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void __thiscall mozilla::gfx::DrawTarget::PushLayer(bool, float, class mozilla::gfx::SourceSurface *,	class mozilla::gfx::Matrix const &, struct mozilla::gfx::IntRectTyped<struct mozilla::gfx::UnknownUnits> const &, bool)
		public ?PushLayer@DrawTarget@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z
?PushLayer@DrawTarget@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z	proc near
					; DATA XREF: .rdata:000091ACo

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		push	edi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx

loc_55F8:				; CODE XREF: mozilla::gfx::DrawTarget::PushLayer(bool,float,mozilla::gfx::SourceSurface	*,mozilla::gfx::Matrix const &,mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const &,bool)+12j
					; mozilla::gfx::DrawTarget::PushLayer(bool,float,mozilla::gfx::SourceSurface *,mozilla::gfx::Matrix const &,mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const &,bool)+4Bj
		xor	eax, eax
		jnz	short loc_55F8

loc_55FC:				; CODE XREF: mozilla::gfx::DrawTarget::PushLayer(bool,float,mozilla::gfx::SourceSurface	*,mozilla::gfx::Matrix const &,mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const &,bool)+47j
		int	3		; Trap to Debugger
		mov	dword ptr $SG70167, 3DFh ; "Failure to allocate	a similar DrawTarge"...
		mov	esi, esp
		push	3		; uExitCode
		mov	edi, esp
		call	dword ptr ds:__imp__GetCurrentProcess@0	; GetCurrentProcess()
		cmp	edi, esp
		call	__RTC_CheckEsp
		push	eax		; hProcess
		call	dword ptr ds:__imp__TerminateProcess@8 ; TerminateProcess(x,x)
		cmp	esi, esp
		call	__RTC_CheckEsp
		call	_MOZ_NoReturn
		xor	ecx, ecx
		jnz	short loc_55FC
		xor	edx, edx
		jnz	short loc_55F8
		pop	edi
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	18h
?PushLayer@DrawTarget@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5648h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static void __cdecl RefPtr<class mozilla::gfx::DrawTarget>::AddRefTraits<class mozilla::gfx::DrawTarget>::Release(class mozilla::gfx::DrawTarget *)
		public ?Release@?$AddRefTraits@VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@SAXPAVDrawTarget@gfx@mozilla@@@Z
?Release@?$AddRefTraits@VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@SAXPAVDrawTarget@gfx@mozilla@@@Z proc near
					; CODE XREF: RefPtr<mozilla::gfx::DrawTarget>::~RefPtr<mozilla::gfx::DrawTarget>(void)+1Cp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	eax
		call	?AddRefTraitsReleaseHelper@?$RefPtr@VDrawTarget@gfx@mozilla@@@@CAXPAVDrawTarget@gfx@mozilla@@@Z	; RefPtr<mozilla::gfx::DrawTarget>::AddRefTraitsReleaseHelper(mozilla::gfx::DrawTarget *)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?Release@?$AddRefTraits@VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@SAXPAVDrawTarget@gfx@mozilla@@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5660h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static void __cdecl RefPtr<class mozilla::gfx::DrawTargetDual>::AddRefTraits<class mozilla::gfx::DrawTargetDual>::Release(class mozilla::gfx::DrawTargetDual *)
		public ?Release@?$AddRefTraits@VDrawTargetDual@gfx@mozilla@@@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@SAXPAVDrawTargetDual@gfx@mozilla@@@Z
?Release@?$AddRefTraits@VDrawTargetDual@gfx@mozilla@@@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@SAXPAVDrawTargetDual@gfx@mozilla@@@Z proc	near
					; CODE XREF: RefPtr<mozilla::gfx::DrawTargetDual>::~RefPtr<mozilla::gfx::DrawTargetDual>(void)+1Cp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	eax
		call	?AddRefTraitsReleaseHelper@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@CAXPAVDrawTargetDual@gfx@mozilla@@@Z	; RefPtr<mozilla::gfx::DrawTargetDual>::AddRefTraitsReleaseHelper(mozilla::gfx::DrawTargetDual *)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?Release@?$AddRefTraits@VDrawTargetDual@gfx@mozilla@@@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@SAXPAVDrawTargetDual@gfx@mozilla@@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5678h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static void __cdecl RefPtr<class mozilla::gfx::SourceSurface>::AddRefTraits<class mozilla::gfx::SourceSurface>::Release(class	mozilla::gfx::SourceSurface *)
		public ?Release@?$AddRefTraits@VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@SAXPAVSourceSurface@gfx@mozilla@@@Z
?Release@?$AddRefTraits@VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@SAXPAVSourceSurface@gfx@mozilla@@@Z	proc near
					; CODE XREF: RefPtr<mozilla::gfx::SourceSurface>::~RefPtr<mozilla::gfx::SourceSurface>(void)+1Cp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	eax
		call	?AddRefTraitsReleaseHelper@?$RefPtr@VSourceSurface@gfx@mozilla@@@@CAXPAVSourceSurface@gfx@mozilla@@@Z ;	RefPtr<mozilla::gfx::SourceSurface>::AddRefTraitsReleaseHelper(mozilla::gfx::SourceSurface *)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?Release@?$AddRefTraits@VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@SAXPAVSourceSurface@gfx@mozilla@@@Z	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5690h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static void __cdecl RefPtr<class mozilla::gfx::SourceSurfaceDual>::AddRefTraits<class	mozilla::gfx::SourceSurfaceDual>::Release(class	mozilla::gfx::SourceSurfaceDual	*)
		public ?Release@?$AddRefTraits@VSourceSurfaceDual@gfx@mozilla@@@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@SAXPAVSourceSurfaceDual@gfx@mozilla@@@Z
?Release@?$AddRefTraits@VSourceSurfaceDual@gfx@mozilla@@@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@SAXPAVSourceSurfaceDual@gfx@mozilla@@@Z proc near
					; CODE XREF: RefPtr<mozilla::gfx::SourceSurfaceDual>::~RefPtr<mozilla::gfx::SourceSurfaceDual>(void)+1Cp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	eax
		call	?AddRefTraitsReleaseHelper@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@CAXPAVSourceSurfaceDual@gfx@mozilla@@@Z ;	RefPtr<mozilla::gfx::SourceSurfaceDual>::AddRefTraitsReleaseHelper(mozilla::gfx::SourceSurfaceDual *)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?Release@?$AddRefTraits@VSourceSurfaceDual@gfx@mozilla@@@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@SAXPAVSourceSurfaceDual@gfx@mozilla@@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 56A8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall mozilla::detail::RefCounted<class mozilla::gfx::DrawTarget, 1>::Release(void)const
		public ?Release@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ
?Release@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ proc near
					; CODE XREF: RefPtr<mozilla::gfx::DrawTarget>::AddRefTraitsReleaseHelper(mozilla::gfx::DrawTarget *)+9p
					; RefPtr<mozilla::gfx::DrawTargetDual>::AddRefTraitsReleaseHelper(mozilla::gfx::DrawTargetDual *)+9p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx

loc_56CC:				; CODE XREF: mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::Release(void)+26j
		xor	eax, eax
		jnz	short loc_56CC
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx]
		sub	edx, 1
		mov	[ebp+var_14], edx
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+var_14]
		mov	[eax], ecx
		mov	edx, [ebp+var_14]
		mov	[ebp+var_8], edx
		cmp	[ebp+var_8], 0
		jnz	short loc_573C
		cmp	[ebp+var_4], 0
		jz	short loc_5700
		mov	eax, [ebp+var_4]
		sub	eax, 4
		mov	[ebp+var_18], eax
		jmp	short loc_5707
; ---------------------------------------------------------------------------

loc_5700:				; CODE XREF: mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::Release(void)+4Bj
		mov	[ebp+var_18], 0

loc_5707:				; CODE XREF: mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::Release(void)+56j
		mov	ecx, [ebp+var_18]
		mov	[ebp+var_10], ecx
		mov	edx, [ebp+var_10]
		mov	[ebp+var_C], edx
		cmp	[ebp+var_C], 0
		jz	short loc_5735
		mov	esi, esp
		push	1
		mov	eax, [ebp+var_C]
		mov	edx, [eax]
		mov	ecx, [ebp+var_C]
		mov	eax, [edx]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_1C], eax
		jmp	short loc_573C
; ---------------------------------------------------------------------------

loc_5735:				; CODE XREF: mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::Release(void)+6Fj
		mov	[ebp+var_1C], 0

loc_573C:				; CODE XREF: mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::Release(void)+45j
					; mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::Release(void)+8Bj
		pop	esi
		add	esp, 1Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?Release@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 574Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall mozilla::detail::RefCounted<class mozilla::gfx::SourceSurface, 0>::Release(void)const
		public ?Release@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ
?Release@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ proc near
					; CODE XREF: RefPtr<mozilla::gfx::SourceSurface>::AddRefTraitsReleaseHelper(mozilla::gfx::SourceSurface	*)+9p
					; RefPtr<mozilla::gfx::SourceSurfaceDual>::AddRefTraitsReleaseHelper(mozilla::gfx::SourceSurfaceDual *)+9p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx

loc_576D:				; CODE XREF: mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::Release(void)+23j
		xor	eax, eax
		jnz	short loc_576D
		mov	ecx, [ebp+var_4]
		call	??F?$AtomicBaseIncDec@I$01@detail@mozilla@@QAEIXZ ; mozilla::detail::AtomicBaseIncDec<uint,2>::operator--(void)
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jnz	short loc_57CF
		cmp	[ebp+var_4], 0
		jz	short loc_5793
		mov	ecx, [ebp+var_4]
		sub	ecx, 4
		mov	[ebp+var_14], ecx
		jmp	short loc_579A
; ---------------------------------------------------------------------------

loc_5793:				; CODE XREF: mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::Release(void)+3Aj
		mov	[ebp+var_14], 0

loc_579A:				; CODE XREF: mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::Release(void)+45j
		mov	edx, [ebp+var_14]
		mov	[ebp+var_10], edx
		mov	eax, [ebp+var_10]
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_57C8
		mov	esi, esp
		push	1
		mov	ecx, [ebp+var_C]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_C]
		mov	eax, [edx]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_18], eax
		jmp	short loc_57CF
; ---------------------------------------------------------------------------

loc_57C8:				; CODE XREF: mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::Release(void)+5Ej
		mov	[ebp+var_18], 0

loc_57CF:				; CODE XREF: mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::Release(void)+34j
					; mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::Release(void)+7Aj
		pop	esi
		add	esp, 18h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?Release@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 57E0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall mozilla::gfx::DrawTarget::ReleaseBits(mozilla::gfx::DrawTarget *this,	unsigned __int8	*)
		public ?ReleaseBits@DrawTarget@gfx@mozilla@@UAEXPAE@Z
?ReleaseBits@DrawTarget@gfx@mozilla@@UAEXPAE@Z proc near ; DATA	XREF: .rdata:0000915Co
					; .rdata:0000923Co

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	esp, ebp
		pop	ebp
		retn	4
?ReleaseBits@DrawTarget@gfx@mozilla@@UAEXPAE@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 57F4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall mozilla::gfx::DrawTarget::SetPermitSubpixelAA(mozilla::gfx::DrawTarget *this,	bool)
		public ?SetPermitSubpixelAA@DrawTarget@gfx@mozilla@@UAEX_N@Z
?SetPermitSubpixelAA@DrawTarget@gfx@mozilla@@UAEX_N@Z proc near
					; DATA XREF: .rdata:000091F0o
					; .rdata:000092D0o

var_4		= dword	ptr -4
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	al, [ebp+arg_0]
		and	al, 1
		shl	al, 1
		mov	ecx, [ebp+var_4]
		mov	dl, [ecx+38h]
		and	dl, 0FDh
		or	dl, al
		mov	eax, [ebp+var_4]
		mov	[eax+38h], dl
		mov	esp, ebp
		pop	ebp
		retn	4
?SetPermitSubpixelAA@DrawTarget@gfx@mozilla@@UAEX_N@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5820h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall mozilla::gfx::DrawTarget::SetTransform(mozilla::gfx::DrawTarget *this, const struct mozilla::gfx::Matrix *)
		public ?SetTransform@DrawTarget@gfx@mozilla@@UAEXABVMatrix@23@@Z
?SetTransform@DrawTarget@gfx@mozilla@@UAEXABVMatrix@23@@Z proc near
					; DATA XREF: .rdata:000091D8o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		add	eax, 10h
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	[eax], edx
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	edx, [ecx+8]
		mov	[eax+8], edx
		mov	edx, [ecx+0Ch]
		mov	[eax+0Ch], edx
		mov	edx, [ecx+10h]
		mov	[eax+10h], edx
		mov	ecx, [ecx+14h]
		mov	[eax+14h], ecx
		mov	edx, [ebp+var_4]
		mov	al, [edx+38h]
		or	al, 1
		mov	ecx, [ebp+var_4]
		mov	[ecx+38h], al
		mov	esp, ebp
		pop	ebp
		retn	4
?SetTransform@DrawTarget@gfx@mozilla@@UAEXABVMatrix@23@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5870h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __thiscall mozilla::gfx::DrawTargetDual::SetTransform(mozilla::gfx::DrawTargetDual *this, const struct mozilla::gfx::Matrix *)
		public ?SetTransform@DrawTargetDual@gfx@mozilla@@UAEXABVMatrix@23@@Z
?SetTransform@DrawTargetDual@gfx@mozilla@@UAEXABVMatrix@23@@Z proc near
					; DATA XREF: .rdata:000092B8o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		add	eax, 10h
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	[eax], edx
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	edx, [ecx+8]
		mov	[eax+8], edx
		mov	edx, [ecx+0Ch]
		mov	[eax+0Ch], edx
		mov	edx, [ecx+10h]
		mov	[eax+10h], edx
		mov	ecx, [ecx+14h]
		mov	[eax+14h], ecx
		mov	ecx, [ebp+var_4]
		add	ecx, 3Ch ; '<'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_8], eax
		mov	esi, esp
		mov	edx, [ebp+arg_0]
		push	edx
		mov	eax, [ebp+var_8]
		mov	edx, [eax]
		mov	ecx, [ebp+var_8]
		mov	eax, [edx+9Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		add	ecx, 40h ; '@'
		call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)
		mov	[ebp+var_C], eax
		mov	esi, esp
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		mov	ecx, [ebp+var_C]
		mov	edx, [eax+9Ch]
		call	edx
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?SetTransform@DrawTargetDual@gfx@mozilla@@UAEXABVMatrix@23@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5924h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; bool __cdecl mozilla::gfx::BasicLogger::ShouldOutputMessage(int)
		public ?ShouldOutputMessage@BasicLogger@gfx@mozilla@@SA_NH@Z
?ShouldOutputMessage@BasicLogger@gfx@mozilla@@SA_NH@Z proc near
					; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Log<2,mozilla::gfx::BasicLogger>(int,mozilla::gfx::LogReason)+5Dp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, dword ptr ds:?sGfxLogLevel@LoggingPrefs@gfx@mozilla@@2HA ;	int mozilla::gfx::LoggingPrefs::sGfxLogLevel
		cmp	eax, [ebp+arg_0]
		jl	short loc_5944
		cmp	dword ptr ds:?sGfxLogLevel@LoggingPrefs@gfx@mozilla@@2HA, 4 ; int mozilla::gfx::LoggingPrefs::sGfxLogLevel
		jge	short loc_5940
		cmp	[ebp+arg_0], 3
		jge	short loc_5944

loc_5940:				; CODE XREF: mozilla::gfx::BasicLogger::ShouldOutputMessage(int)+14j
		mov	al, 1
		jmp	short loc_5946
; ---------------------------------------------------------------------------

loc_5944:				; CODE XREF: mozilla::gfx::BasicLogger::ShouldOutputMessage(int)+Bj
					; mozilla::gfx::BasicLogger::ShouldOutputMessage(int)+1Aj
		xor	al, al

loc_5946:				; CODE XREF: mozilla::gfx::BasicLogger::ShouldOutputMessage(int)+1Ej
		pop	ebp
		retn
?ShouldOutputMessage@BasicLogger@gfx@mozilla@@SA_NH@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5948h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual struct already_AddRefed<class	mozilla::gfx::SourceSurface> __thiscall	mozilla::gfx::DrawTargetDual::Snapshot(void)
		public ?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ
?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ	proc near
					; DATA XREF: .rdata:00009230o

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ
		mov	eax, large fs:0
		push	eax
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_20], eax
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	[ebp+var_18], 0
		mov	eax, [ebp+var_10]
		add	eax, 40h ; '@'
		push	eax
		mov	ecx, [ebp+var_10]
		add	ecx, 3Ch ; '<'
		push	ecx
		lea	edx, [ebp+var_14]
		push	edx
		call	??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z ; mozilla::MakeAndAddRef<mozilla::gfx::SourceSurfaceDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget>	&)
		add	esp, 0Ch
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_20], eax
		mov	[ebp+var_4], 1
		mov	ecx, [ebp+var_20]
		push	ecx
		mov	ecx, [ebp+arg_0]
		call	??$?0VSourceSurfaceDual@gfx@mozilla@@@?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@@Z	; already_AddRefed<mozilla::gfx::SourceSurface>::already_AddRefed<mozilla::gfx::SourceSurface>(already_AddRefed<mozilla::gfx::SourceSurfaceDual> &&)
		mov	edx, [ebp+var_18]
		or	edx, 1
		mov	[ebp+var_18], edx
		mov	byte ptr [ebp+var_4], 0
		lea	ecx, [ebp+var_14]
		call	??1?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAE@XZ ; already_AddRefed<mozilla::gfx::SourceSurfaceDual>::~already_AddRefed<mozilla::gfx::SourceSurfaceDual>(void)
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 20h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 59F4h
; COMDAT (pick associative to section at 5948)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$0 proc near
					; DATA XREF: .xdata$x:000089A8o
		lea	ecx, [ebp-14h]
		jmp	??1?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAE@XZ ; already_AddRefed<mozilla::gfx::SourceSurfaceDual>::~already_AddRefed<mozilla::gfx::SourceSurfaceDual>(void)
__unwindfunclet$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$0 endp


; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$1 proc near
					; DATA XREF: .xdata$x:000089A0o
		mov	eax, [ebp-18h]
		and	eax, 1
		jz	$LN5_3
		and	dword ptr [ebp-18h], 0FFFFFFFEh
		mov	ecx, [ebp+8]
		jmp	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ ; already_AddRefed<mozilla::gfx::SourceSurface>::~already_AddRefed<mozilla::gfx::SourceSurface>(void)
; ---------------------------------------------------------------------------

$LN5_3:					; CODE XREF: __unwindfunclet$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$1+6j
		retn
__unwindfunclet$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$1 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ proc near
					; DATA XREF: mozilla::gfx::DrawTargetDual::Snapshot(void)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-18h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ
		jmp	___CxxFrameHandler3
__ehhandler$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ endp

_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5A30h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; bool __thiscall mozilla::gfx::DrawTarget::SupportsRegionClipping(mozilla::gfx::DrawTarget *__hidden this)
		public ?SupportsRegionClipping@DrawTarget@gfx@mozilla@@UBE_NXZ
?SupportsRegionClipping@DrawTarget@gfx@mozilla@@UBE_NXZ	proc near
					; DATA XREF: .rdata:000091E8o
					; .rdata:000092C8o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	al, 1
		mov	esp, ebp
		pop	ebp
		retn
?SupportsRegionClipping@DrawTarget@gfx@mozilla@@UBE_NXZ	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5A44h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: bool __thiscall mozilla::gfx::Log<2, struct mozilla::gfx::BasicLogger>::ValidReason(void)const
		public ?ValidReason@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ
?ValidReason@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ proc near
					; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason)+10Ep
					; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::WriteLog(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+5Ap

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		cmp	dword ptr [eax+0B4h], 0FFFFFFFFh
		jle	short loc_5A7C
		mov	ecx, [ebp+var_4]
		cmp	dword ptr [ecx+0B4h], 65h ; 'e'
		jge	short loc_5A7C
		mov	[ebp+var_8], 1
		jmp	short loc_5A83
; ---------------------------------------------------------------------------

loc_5A7C:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::ValidReason(void)+21j
					; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::ValidReason(void)+2Dj
		mov	[ebp+var_8], 0

loc_5A83:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::ValidReason(void)+36j
		mov	al, byte ptr [ebp+var_8]
		mov	esp, ebp
		pop	ebp
		retn
?ValidReason@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5A8Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; private: void	__thiscall mozilla::gfx::Log<2,	struct mozilla::gfx::BasicLogger>::WriteLog(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
		public ?WriteLog@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
?WriteLog@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z proc near
					; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Flush(void)+77p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	?LogIt@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ	; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::LogIt(void)
		movzx	eax, al
		test	eax, eax
		jz	short loc_5B04
		mov	ecx, [ebp+var_4]
		call	?NoNewline@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ ; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::NoNewline(void)
		movzx	ecx, al
		push	ecx
		push	2
		mov	edx, [ebp+arg_0]
		push	edx
		call	?OutputMessage@BasicLogger@gfx@mozilla@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z ; mozilla::gfx::BasicLogger::OutputMessage(std::basic_string<char,std::char_traits<char>,std::allocator<char>>	const &,int,bool)
		add	esp, 0Ch
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+0B0h]
		and	ecx, 4
		jz	short loc_5AD5

loc_5AD1:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::WriteLog(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&)+47j
		xor	edx, edx
		jnz	short loc_5AD1

loc_5AD5:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::WriteLog(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&)+43j
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+0B0h]
		and	ecx, 8
		jz	short loc_5B04
		mov	ecx, [ebp+var_4]
		call	?ValidReason@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ ;	mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::ValidReason(void)
		movzx	edx, al
		test	edx, edx
		jz	short loc_5B04
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+0B4h]
		push	ecx
		call	?CrashAction@BasicLogger@gfx@mozilla@@SAXW4LogReason@23@@Z ; mozilla::gfx::BasicLogger::CrashAction(mozilla::gfx::LogReason)
		add	esp, 4

loc_5B04:				; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::WriteLog(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&)+1Bj
					; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::WriteLog(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+55j ...
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?WriteLog@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5B14h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::_String_alloc<0,	struct std::_String_base_types<char, class std::allocator<char>>>::_Alloc_proxy(void)
		public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ	proc near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char>	const &)+3Fp

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		lea	ecx, [ebp+var_C+3]
		call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
		push	1
		lea	ecx, [ebp+var_C+3]
		call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z	; std::allocator<std::_Container_proxy>::allocate(uint)
		mov	ecx, [ebp+var_4]
		mov	[ecx], eax
		lea	ecx, [ebp+var_18] ; this
		call	??0_Container_proxy@std@@QAE@XZ	; std::_Container_proxy::_Container_proxy(void)
		push	eax		; int
		mov	edx, [ebp+var_4]
		mov	eax, [edx]
		push	eax		; void *
		lea	ecx, [ebp+var_C+3]
		call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx]
		mov	eax, [ebp+var_4]
		mov	[edx], eax
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		add	esp, 18h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ	endp

; ---------------------------------------------------------------------------
		align 4
$LN5_0		dd 1			; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+5Co
		dd offset $LN4_0
$LN4_0		dd 0FFFFFFF7h, 1	; DATA XREF: .text$mn:00005B90o
		dd offset $LN3_0	; "_Alproxy"
$LN3_0		db '_Alproxy',0         ; DATA XREF: .text$mn:00005B9Co
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5BACh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Assign_rv(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &&)
		public ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z
?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z	proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+48p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_0]
		cmp	dword ptr [eax+18h], 10h
		jnb	short loc_5BEE
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+14h]
		add	edx, 1
		push	edx		; Size
		mov	eax, [ebp+arg_0]
		add	eax, 4
		push	eax		; Src
		mov	ecx, [ebp+var_4]
		add	ecx, 4
		push	ecx		; Dst
		call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
		add	esp, 0Ch
		jmp	short loc_5C19
; ---------------------------------------------------------------------------

loc_5BEE:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+1Ej
		mov	edx, [ebp+arg_0]
		add	edx, 4
		push	edx		; int
		mov	eax, [ebp+var_4]
		add	eax, 4
		push	eax		; void *
		lea	ecx, [ebp+var_8+3]
		push	ecx
		mov	ecx, [ebp+var_4]
		call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
		mov	ecx, eax
		call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char	*,char * &>(char * *,char * &)
		mov	edx, [ebp+arg_0]
		mov	dword ptr [edx+4], 0

loc_5C19:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+40j
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+14h]
		mov	[eax+14h], edx
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx+18h]
		mov	[eax+18h], edx
		push	0		; Size
		push	0		; char
		mov	ecx, [ebp+arg_0]
		call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z	endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5C50h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; unsigned long	__cdecl	std::_Atomic_fetch_add_4(unsigned long volatile	*, unsigned long, enum	std::memory_order)
		public ?_Atomic_fetch_add_4@std@@YAKPCKKW4memory_order@1@@Z
?_Atomic_fetch_add_4@std@@YAKPCKKW4memory_order@1@@Z proc near
					; CODE XREF: std::_Atomic_fetch_sub_4(ulong volatile *,ulong,std::memory_order)+11p
					; std::atomic_fetch_add_explicit(std::atomic_uint *,uint,std::memory_order)+Fp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 5	; switch 6 cases
		ja	short loc_5CC6	; jumptable 00005C6B default case
		mov	ecx, [ebp+var_4]
		jmp	ds:$LN12[ecx*4]	; switch jump
; ---------------------------------------------------------------------------

$LN5:					; CODE XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+1Bj
					; DATA XREF: .text$mn:$LN12o
		mov	edx, [ebp+arg_4] ; jumptable 00005C6B case 0
		push	edx		; unsigned __int32
		mov	eax, [ebp+arg_0]
		push	eax		; volatile unsigned __int32 *
		call	?_Fetch_add_relaxed_4@std@@YAKPCKK@Z ; std::_Fetch_add_relaxed_4(ulong volatile	*,ulong)
		add	esp, 8
		jmp	loc_5D4E
; ---------------------------------------------------------------------------

$LN4:					; CODE XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+1Bj
					; DATA XREF: .text$mn:$LN12o
		mov	ecx, [ebp+arg_4] ; jumptable 00005C6B cases 1,2
		push	ecx		; unsigned __int32
		mov	edx, [ebp+arg_0]
		push	edx		; volatile unsigned __int32 *
		call	?_Fetch_add_acquire_4@std@@YAKPCKK@Z ; std::_Fetch_add_acquire_4(ulong volatile	*,ulong)
		add	esp, 8
		jmp	loc_5D4E
; ---------------------------------------------------------------------------

$LN3:					; CODE XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+1Bj
					; DATA XREF: .text$mn:$LN12o
		mov	eax, [ebp+arg_4] ; jumptable 00005C6B case 3
		push	eax		; unsigned __int32
		mov	ecx, [ebp+arg_0]
		push	ecx		; volatile unsigned __int32 *
		call	?_Fetch_add_release_4@std@@YAKPCKK@Z ; std::_Fetch_add_release_4(ulong volatile	*,ulong)
		add	esp, 8
		jmp	loc_5D4E
; ---------------------------------------------------------------------------

$LN2:					; CODE XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+1Bj
					; DATA XREF: .text$mn:$LN12o
		mov	edx, [ebp+arg_4] ; jumptable 00005C6B cases 4,5
		push	edx		; unsigned __int32
		mov	eax, [ebp+arg_0]
		push	eax		; volatile unsigned __int32 *
		call	?_Fetch_add_seq_cst_4@std@@YAKPCKK@Z ; std::_Fetch_add_seq_cst_4(ulong volatile	*,ulong)
		add	esp, 8
		jmp	loc_5D4E
; ---------------------------------------------------------------------------

loc_5CC6:				; CODE XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+16j
		mov	esi, esp	; jumptable 00005C6B default case
		push	698h		; unsigned int
		push	offset ??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
		push	offset ??_C@_1CK@BEGEBJJG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@ ; "Invalid memory_order"
		call	dword ptr ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const	*,wchar_t const	*,uint)
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, offset ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ ; "Standard C++ Libraries Invalid Argument"
		test	ecx, ecx
		jz	short loc_5CF4
		xor	edx, edx
		jnz	short loc_5D24

loc_5CF4:				; CODE XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+9Ej
		mov	esi, esp
		push	offset ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; "\"Standard C++ Libraries Invalid Argume"...
		push	offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
		push	0
		push	698h
		push	offset ??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
		push	2
		call	dword ptr ds:__imp___CrtDbgReportW
		add	esp, 18h
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	eax, 1
		jnz	short loc_5D24
		int	3		; Trap to Debugger

loc_5D24:				; CODE XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+A2j
					; std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+D1j
		mov	esi, esp
		push	0
		push	698h
		push	offset ??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
		push	offset ??_C@_1DC@FMPHIJPC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAf?$AAe?$AAt?$AAc?$AAh?$AA_?$AAa?$AAd?$AAd?$AA_?$AA4?$AA?$AA@ ;	"std::_Atomic_fetch_add_4"
		push	offset ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; "\"invalid argument\""
		call	dword ptr ds:__imp___invalid_parameter
		add	esp, 14h
		cmp	esi, esp
		call	__RTC_CheckEsp
		xor	eax, eax

loc_5D4E:				; CODE XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+32j
					; std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+47j ...
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?_Atomic_fetch_add_4@std@@YAKPCKKW4memory_order@1@@Z endp

; ---------------------------------------------------------------------------
		align 10h
$LN12		dd offset $LN5		; DATA XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+1Br
		dd offset $LN4		; jump table for switch	statement
		dd offset $LN4
		dd offset $LN3
		dd offset $LN2
		dd offset $LN2
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5D78h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; unsigned long	__cdecl	std::_Atomic_fetch_sub_4(unsigned long volatile	*, unsigned long, enum	std::memory_order)
		public ?_Atomic_fetch_sub_4@std@@YAKPCKKW4memory_order@1@@Z
?_Atomic_fetch_sub_4@std@@YAKPCKKW4memory_order@1@@Z proc near
					; CODE XREF: std::atomic_fetch_sub_explicit(std::atomic_uint *,uint,std::memory_order)+Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		push	eax
		xor	ecx, ecx
		sub	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	?_Atomic_fetch_add_4@std@@YAKPCKKW4memory_order@1@@Z ; std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?_Atomic_fetch_sub_4@std@@YAKPCKKW4memory_order@1@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5D9Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl std::_Atomic_store_4(unsigned long volatile *, unsigned long, enum  std::memory_order)
		public ?_Atomic_store_4@std@@YAXPCKKW4memory_order@1@@Z
?_Atomic_store_4@std@@YAXPCKKW4memory_order@1@@Z proc near
					; CODE XREF: std::atomic_store_explicit(std::atomic_uint *,uint,std::memory_order)+Fp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jz	short loc_5DC2
		cmp	[ebp+var_4], 3
		jz	short loc_5DD7
		cmp	[ebp+var_4], 5
		jz	short loc_5DEC
		jmp	short loc_5E01
; ---------------------------------------------------------------------------

loc_5DC2:				; CODE XREF: std::_Atomic_store_4(ulong	volatile *,ulong,std::memory_order)+16j
		mov	ecx, [ebp+arg_4]
		push	ecx		; unsigned __int32
		mov	edx, [ebp+arg_0]
		push	edx		; volatile unsigned __int32 *
		call	?_Store_relaxed_4@std@@YAXPCKK@Z ; std::_Store_relaxed_4(ulong volatile	*,ulong)
		add	esp, 8
		jmp	loc_5E87
; ---------------------------------------------------------------------------

loc_5DD7:				; CODE XREF: std::_Atomic_store_4(ulong	volatile *,ulong,std::memory_order)+1Cj
		mov	eax, [ebp+arg_4]
		push	eax		; unsigned __int32
		mov	ecx, [ebp+arg_0]
		push	ecx		; volatile unsigned __int32 *
		call	?_Store_release_4@std@@YAXPCKK@Z ; std::_Store_release_4(ulong volatile	*,ulong)
		add	esp, 8
		jmp	loc_5E87
; ---------------------------------------------------------------------------

loc_5DEC:				; CODE XREF: std::_Atomic_store_4(ulong	volatile *,ulong,std::memory_order)+22j
		mov	edx, [ebp+arg_4]
		push	edx		; unsigned __int32
		mov	eax, [ebp+arg_0]
		push	eax		; volatile unsigned __int32 *
		call	?_Store_seq_cst_4@std@@YAXPCKK@Z ; std::_Store_seq_cst_4(ulong volatile	*,ulong)
		add	esp, 8
		jmp	loc_5E87
; ---------------------------------------------------------------------------

loc_5E01:				; CODE XREF: std::_Atomic_store_4(ulong	volatile *,ulong,std::memory_order)+24j
		mov	esi, esp
		push	577h		; unsigned int
		push	offset ??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
		push	offset ??_C@_1CK@BEGEBJJG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@ ; "Invalid memory_order"
		call	dword ptr ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const	*,wchar_t const	*,uint)
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, offset ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ ; "Standard C++ Libraries Invalid Argument"
		test	ecx, ecx
		jz	short loc_5E2F
		xor	edx, edx
		jnz	short loc_5E5F

loc_5E2F:				; CODE XREF: std::_Atomic_store_4(ulong	volatile *,ulong,std::memory_order)+8Dj
		mov	esi, esp
		push	offset ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; "\"Standard C++ Libraries Invalid Argume"...
		push	offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
		push	0
		push	577h
		push	offset ??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
		push	2
		call	dword ptr ds:__imp___CrtDbgReportW
		add	esp, 18h
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	eax, 1
		jnz	short loc_5E5F
		int	3		; Trap to Debugger

loc_5E5F:				; CODE XREF: std::_Atomic_store_4(ulong	volatile *,ulong,std::memory_order)+91j
					; std::_Atomic_store_4(ulong volatile *,ulong,std::memory_order)+C0j
		mov	esi, esp
		push	0
		push	577h
		push	offset ??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
		push	offset ??_C@_1CK@BEBCCGEN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAs?$AAt?$AAo?$AAr?$AAe?$AA_?$AA4?$AA?$AA@ ; "std::_Atomic_store_4"
		push	offset ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; "\"invalid argument\""
		call	dword ptr ds:__imp___invalid_parameter
		add	esp, 14h
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_5E87:				; CODE XREF: std::_Atomic_store_4(ulong	volatile *,ulong,std::memory_order)+36j
					; std::_Atomic_store_4(ulong volatile *,ulong,std::memory_order)+4Bj ...
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?_Atomic_store_4@std@@YAXPCKKW4memory_order@1@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5E98h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Copy(unsigned int, unsigned int)
		public ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+4Cp

var_38		= byte ptr -38h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_25		= byte ptr -25h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

; FUNCTION CHUNK AT 00005FDF SIZE 00000009 BYTES

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
		mov	eax, large fs:0
		push	eax
		push	ecx
		sub	esp, 28h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_38]
		mov	ecx, 0Ah
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_0]
		or	eax, 0Fh
		mov	[ebp+var_18], eax
		mov	ecx, [ebp+var_14]
		call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
		cmp	eax, [ebp+var_18]
		jnb	short loc_5EF6
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_18], ecx
		jmp	short loc_5F48
; ---------------------------------------------------------------------------

loc_5EF6:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+54j
		mov	eax, [ebp+var_18]
		xor	edx, edx
		mov	ecx, 3
		div	ecx
		mov	edx, [ebp+var_14]
		mov	ecx, [edx+18h]
		shr	ecx, 1
		cmp	ecx, eax
		ja	short loc_5F10
		jmp	short loc_5F48
; ---------------------------------------------------------------------------

loc_5F10:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+74j
		mov	edx, [ebp+var_14]
		mov	esi, [edx+18h]
		shr	esi, 1
		mov	ecx, [ebp+var_14]
		call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
		sub	eax, esi
		mov	ecx, [ebp+var_14]
		cmp	[ecx+18h], eax
		ja	short loc_5F3D
		mov	edx, [ebp+var_14]
		mov	eax, [edx+18h]
		shr	eax, 1
		mov	ecx, [ebp+var_14]
		add	eax, [ecx+18h]
		mov	[ebp+var_18], eax
		jmp	short loc_5F48
; ---------------------------------------------------------------------------

loc_5F3D:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+90j
		mov	ecx, [ebp+var_14]
		call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
		mov	[ebp+var_18], eax

loc_5F48:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+5Cj
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+76j ...
		mov	[ebp+var_4], 0
		lea	edx, [ebp+var_25]
		push	edx
		mov	ecx, [ebp+var_14]
		call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+var_18]
		add	eax, 1
		push	eax
		mov	ecx, [ebp+var_2C]
		call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
		mov	[ebp+var_30], eax
		mov	ecx, [ebp+var_30]
		mov	[ebp+var_20], ecx
		jmp	short loc_5FDF
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp


; =============== S U B	R O U T	I N E =======================================


__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
					; DATA XREF: .xdata$x:00008704o

; FUNCTION CHUNK AT 00005FC9 SIZE 00000009 BYTES
; FUNCTION CHUNK AT 00005FD9 SIZE 00000006 BYTES

		mov	[ebp-10h], esp
		mov	edx, [ebp+8]
		mov	[ebp-18h], edx
		mov	byte ptr [ebp-4], 2
		lea	eax, [ebp-26h]
		push	eax
		mov	ecx, [ebp-14h]
		call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
		mov	[ebp-34h], eax
		mov	ecx, [ebp-18h]
		add	ecx, 1
		push	ecx
		mov	ecx, [ebp-34h]
		call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
		mov	[ebp-38h], eax
		mov	edx, [ebp-38h]
		mov	[ebp-20h], edx
		jmp	short loc_5FC9
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
					; DATA XREF: .xdata$x:00008714o
		push	0		; Size
		push	1		; char
		mov	ecx, [ebp-14h]
		call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
		push	0
		push	0
		call	__CxxThrowException@8 ;	_CxxThrowException(x,x)
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 endp

; ---------------------------------------------------------------------------
		mov	eax, offset $LN17
		retn
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0

loc_5FC9:				; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+34j
		mov	dword ptr [ebp-4], 1
		jmp	short loc_5FD9
; END OF FUNCTION CHUNK	FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0

; =============== S U B	R O U T	I N E =======================================


$LN17		proc near		; DATA XREF: .text$mn:00005FC3o
		mov	dword ptr [ebp-4], 1
$LN17		endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0

loc_5FD9:				; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+58j
		mov	eax, offset $LN19
		retn
; END OF FUNCTION CHUNK	FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z

loc_5FDF:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+DEj
		mov	[ebp+var_4], 0FFFFFFFFh
		jmp	short loc_5FEF
; END OF FUNCTION CHUNK	FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z

; =============== S U B	R O U T	I N E =======================================


$LN19		proc near		; DATA XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:loc_5FD9o
		mov	dword ptr [ebp-4], 0FFFFFFFFh

loc_5FEF:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+14Ej
		cmp	dword ptr [ebp+0Ch], 0
		jbe	short loc_600E
		mov	eax, [ebp+0Ch]
		push	eax		; Size
		mov	ecx, [ebp-14h]
		call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
		push	eax		; Src
		mov	ecx, [ebp-20h]
		push	ecx		; Dst
		call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
		add	esp, 0Ch

loc_600E:				; CODE XREF: $LN19+Bj
		push	0		; Size
		push	1		; char
		mov	ecx, [ebp-14h]
		call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
		lea	edx, [ebp-20h]
		push	edx		; int
		mov	eax, [ebp-14h]
		add	eax, 4
		push	eax		; void *
		lea	ecx, [ebp-27h]
		push	ecx
		mov	ecx, [ebp-14h]
		call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
		mov	ecx, eax
		call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char	*,char * &>(char * *,char * &)
		mov	edx, [ebp-14h]
		mov	eax, [ebp-18h]
		mov	[edx+18h], eax
		mov	ecx, [ebp+0Ch]
		push	ecx
		mov	ecx, [ebp-14h]
		call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN23
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp-0Ch]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 38h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
$LN19		endp ; sp-analysis failed

; ---------------------------------------------------------------------------
$LN23		dd 1			; DATA XREF: $LN19+69o
		dd offset $LN22
$LN22		dd 0FFFFFFE0h, 4	; DATA XREF: .text$mn:00006080o
		dd offset $LN20		; "_Ptr"
$LN20		db '_Ptr',0             ; DATA XREF: .text$mn:0000608Co
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 6098h
; COMDAT (pick associative to section at 5E98)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
					; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-3Ch]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
		jmp	___CxxFrameHandler3
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 60B4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Eos(unsigned int)
		public ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc	near
					; CODE XREF: $LN19+60p
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+98p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	byte ptr [ebp+var_8+3],	0
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	[eax+14h], ecx
		lea	edx, [ebp+var_8+3]
		push	edx
		mov	ecx, [ebp+var_4]
		call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
		add	eax, [ebp+arg_0]
		push	eax
		call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign(char &,char const &)
		add	esp, 8
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6100h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; unsigned __int32 __cdecl std::_Fetch_add_acquire_4(volatile unsigned __int32 *, unsigned __int32)
		public ?_Fetch_add_acquire_4@std@@YAKPCKK@Z
?_Fetch_add_acquire_4@std@@YAKPCKK@Z proc near
					; CODE XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+3Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		lock xadd [ecx], eax
		pop	ebp
		retn
?_Fetch_add_acquire_4@std@@YAKPCKK@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6110h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; unsigned __int32 __cdecl std::_Fetch_add_relaxed_4(volatile unsigned __int32 *, unsigned __int32)
		public ?_Fetch_add_relaxed_4@std@@YAKPCKK@Z
?_Fetch_add_relaxed_4@std@@YAKPCKK@Z proc near
					; CODE XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+2Ap

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		lock xadd [ecx], eax
		pop	ebp
		retn
?_Fetch_add_relaxed_4@std@@YAKPCKK@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6120h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; unsigned __int32 __cdecl std::_Fetch_add_release_4(volatile unsigned __int32 *, unsigned __int32)
		public ?_Fetch_add_release_4@std@@YAKPCKK@Z
?_Fetch_add_release_4@std@@YAKPCKK@Z proc near
					; CODE XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+54p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		lock xadd [ecx], eax
		pop	ebp
		retn
?_Fetch_add_release_4@std@@YAKPCKK@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6130h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; unsigned __int32 __cdecl std::_Fetch_add_seq_cst_4(volatile unsigned __int32 *, unsigned __int32)
		public ?_Fetch_add_seq_cst_4@std@@YAKPCKK@Z
?_Fetch_add_seq_cst_4@std@@YAKPCKK@Z proc near
					; CODE XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+69p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		lock xadd [ecx], eax
		pop	ebp
		retn
?_Fetch_add_seq_cst_4@std@@YAKPCKK@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6140h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::_String_alloc<0,	struct std::_String_base_types<char, class std::allocator<char>>>::_Free_proxy(void)
		public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+11p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		lea	ecx, [ebp+var_C+3]
		call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
		mov	esi, esp
		mov	ecx, [ebp+var_4] ; this
		call	dword ptr ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ ;	std::_Container_base12::_Orphan_all(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_4]
		mov	ecx, [eax]
		push	ecx
		lea	ecx, [ebp+var_C+3]
		call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
		push	1		; int
		mov	edx, [ebp+var_4]
		mov	eax, [edx]
		push	eax		; void *
		lea	ecx, [ebp+var_C+3]
		call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
		mov	ecx, [ebp+var_4]
		mov	dword ptr [ecx], 0
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_1
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	esi
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp

; ---------------------------------------------------------------------------
$LN5_1		dd 1			; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+60o
		dd offset $LN4_1
$LN4_1		dd 0FFFFFFF7h, 1	; DATA XREF: .text$mn:000061C0o
		dd offset $LN3_1	; "_Alproxy"
$LN3_1		db '_Alproxy',0         ; DATA XREF: .text$mn:000061CCo
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 61DCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: struct std::_Wrap_alloc<class	std::allocator<char>> __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Getal(void)const
		public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+1Ep
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+57p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+arg_0]
		call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)
		mov	eax, [ebp+arg_0]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6208h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; private: int __thiscall std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::_Getstate(int)
		public ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z proc	near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(int)+62p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jnz	short loc_6237
		mov	ecx, [ebp+var_8]
		or	ecx, 4
		mov	[ebp+var_8], ecx

loc_6237:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Getstate(int)+24j
		mov	edx, [ebp+arg_0]
		and	edx, 2
		jnz	short loc_6248
		mov	eax, [ebp+var_8]
		or	eax, 2
		mov	[ebp+var_8], eax

loc_6248:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Getstate(int)+35j
		mov	ecx, [ebp+arg_0]
		and	ecx, 8
		jz	short loc_6259
		mov	edx, [ebp+var_8]
		or	edx, 8
		mov	[ebp+var_8], edx

loc_6259:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Getstate(int)+46j
		mov	eax, [ebp+arg_0]
		and	eax, 4
		jz	short loc_626A
		mov	ecx, [ebp+var_8]
		or	ecx, 10h
		mov	[ebp+var_8], ecx

loc_626A:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Getstate(int)+57j
		mov	eax, [ebp+var_8]
		mov	esp, ebp
		pop	ebp
		retn	4
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6274h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Grow(unsigned int, bool)
		public ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+78p
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+66p

var_C		= dword	ptr -0Ch
Size		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+Size], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
		cmp	eax, [ebp+arg_0]
		jnb	short loc_62A7
		mov	ecx, [ebp+var_4]
		call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)

loc_62A7:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+29j
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+18h]
		cmp	ecx, [ebp+arg_0]
		jnb	short loc_62C7
		mov	edx, [ebp+var_4]
		mov	eax, [edx+14h]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	ecx, [ebp+var_4]
		call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)
		jmp	short loc_6311
; ---------------------------------------------------------------------------

loc_62C7:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+3Cj
		movzx	edx, [ebp+arg_4]
		test	edx, edx
		jz	short loc_6301
		cmp	[ebp+arg_0], 10h
		jnb	short loc_6301
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		cmp	ecx, [eax+14h]
		jnb	short loc_62E8
		mov	edx, [ebp+arg_0]
		mov	[ebp+Size], edx
		jmp	short loc_62F1
; ---------------------------------------------------------------------------

loc_62E8:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+6Aj
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+14h]
		mov	[ebp+Size], ecx

loc_62F1:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+72j
		mov	edx, [ebp+Size]
		push	edx		; Size
		push	1		; char
		mov	ecx, [ebp+var_4]
		call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
		jmp	short loc_6311
; ---------------------------------------------------------------------------

loc_6301:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+59j
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+5Fj
		cmp	[ebp+arg_0], 0
		jnz	short loc_6311
		push	0
		mov	ecx, [ebp+var_4]
		call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)

loc_6311:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+51j
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+8Bj ...
		cmp	[ebp+arg_0], 0
		jbe	short loc_6320
		mov	[ebp+var_C], 1
		jmp	short loc_6327
; ---------------------------------------------------------------------------

loc_6320:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+A1j
		mov	[ebp+var_C], 0

loc_6327:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+AAj
		mov	al, byte ptr [ebp+var_C]
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 633Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(void *Src, size_t	Size, int)
		public ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z proc	near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(int)+6Fp
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&)+32p

var_C		= dword	ptr -0Ch
Dst		= dword	ptr -8
var_4		= dword	ptr -4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+Dst], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+38h], 0
		mov	ecx, [ebp+var_4]
		mov	edx, [ebp+arg_8]
		mov	[ecx+3Ch], edx
		cmp	[ebp+Size], 0
		jz	loc_6471
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+3Ch]
		and	ecx, 6
		cmp	ecx, 6
		jz	loc_6471
		mov	edx, [ebp+Size]
		push	edx
		mov	ecx, [ebp+var_4]
		add	ecx, 40h ; '@'
		call	?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
		mov	[ebp+Dst], eax
		mov	eax, [ebp+Size]
		push	eax		; Size
		mov	ecx, [ebp+Src]
		push	ecx		; Src
		mov	edx, [ebp+Dst]
		push	edx		; Dst
		call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
		add	esp, 0Ch
		mov	eax, [ebp+Dst]
		add	eax, [ebp+Size]
		mov	ecx, [ebp+var_4]
		mov	[ecx+38h], eax
		mov	edx, [ebp+var_4]
		mov	eax, [edx+3Ch]
		and	eax, 4
		jnz	short loc_63E8
		mov	ecx, [ebp+Dst]
		add	ecx, [ebp+Size]
		mov	esi, esp
		push	ecx
		mov	edx, [ebp+Dst]
		push	edx
		mov	eax, [ebp+Dst]
		push	eax
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setg(char *,char *,char *)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_63E8:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char	const *,uint,int)+89j
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+3Ch]
		and	edx, 2
		jnz	short loc_6462
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+3Ch]
		and	ecx, 18h
		jz	short loc_6409
		mov	edx, [ebp+Dst]
		add	edx, [ebp+Size]
		mov	[ebp+var_C], edx
		jmp	short loc_640F
; ---------------------------------------------------------------------------

loc_6409:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char	const *,uint,int)+C0j
		mov	eax, [ebp+Dst]
		mov	[ebp+var_C], eax

loc_640F:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char	const *,uint,int)+CBj
		mov	ecx, [ebp+Dst]
		add	ecx, [ebp+Size]
		mov	esi, esp
		push	ecx
		mov	edx, [ebp+var_C]
		push	edx
		mov	eax, [ebp+Dst]
		push	eax
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setp(char *,char *,char *)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jnz	short loc_6462
		mov	esi, esp
		mov	ecx, [ebp+Dst]
		push	ecx
		push	0
		mov	edx, [ebp+Dst]
		push	edx
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setg(char *,char *,char *)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_6462:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char	const *,uint,int)+B5j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char const *,uint,int)+108j
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+3Ch]
		or	ecx, 1
		mov	edx, [ebp+var_4]
		mov	[edx+3Ch], ecx

loc_6471:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char	const *,uint,int)+36j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char const *,uint,int)+48j
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6484h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Inside(char const *)
		public ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+31p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		cmp	[ebp+arg_0], 0
		jz	short loc_64B8
		mov	ecx, [ebp+var_4]
		call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
		cmp	[ebp+arg_0], eax
		jb	short loc_64B8
		mov	ecx, [ebp+var_4]
		call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
		mov	ecx, [ebp+var_4]
		add	eax, [ecx+14h]
		cmp	eax, [ebp+arg_0]
		ja	short loc_64BE

loc_64B8:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+12j
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+1Fj
		xor	al, al
		jmp	short loc_64C0
; ---------------------------------------------------------------------------
		jmp	short loc_64C0
; ---------------------------------------------------------------------------

loc_64BE:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+32j
		mov	al, 1

loc_64C0:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+36j
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+38j
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 64D0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: char * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)
		public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
					; CODE XREF: $LN19+14p
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+2Bp ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		cmp	dword ptr [eax+18h], 10h
		jb	short loc_6504
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+4]
		push	edx
		call	??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
		add	esp, 4
		mov	[ebp+var_8], eax
		jmp	short loc_650D
; ---------------------------------------------------------------------------

loc_6504:				; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+1Ej
		mov	eax, [ebp+var_4]
		add	eax, 4
		mov	[ebp+var_8], eax

loc_650D:				; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+32j
		mov	eax, [ebp+var_8]
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6520h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: char const * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)const
		public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+8Bp
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)+11p

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		cmp	dword ptr [eax+18h], 10h
		jb	short loc_6554
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+4]
		push	edx
		call	??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
		add	esp, 4
		mov	[ebp+var_8], eax
		jmp	short loc_655D
; ---------------------------------------------------------------------------

loc_6554:				; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+1Ej
		mov	eax, [ebp+var_4]
		add	eax, 4
		mov	[ebp+var_8], eax

loc_655D:				; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+32j
		mov	eax, [ebp+var_8]
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6570h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl std::_Store_relaxed_4(volatile unsigned __int32 *, unsigned __int32)
		public ?_Store_relaxed_4@std@@YAXPCKK@Z
?_Store_relaxed_4@std@@YAXPCKK@Z proc near
					; CODE XREF: std::_Atomic_store_4(ulong	volatile *,ulong,std::memory_order)+2Ep

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	[eax], ecx
		pop	ebp
		retn
?_Store_relaxed_4@std@@YAXPCKK@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6580h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl std::_Store_release_4(volatile unsigned __int32 *, unsigned __int32)
		public ?_Store_release_4@std@@YAXPCKK@Z
?_Store_release_4@std@@YAXPCKK@Z proc near
					; CODE XREF: std::_Atomic_store_4(ulong	volatile *,ulong,std::memory_order)+43p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	[eax], ecx
		pop	ebp
		retn
?_Store_release_4@std@@YAXPCKK@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6590h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl std::_Store_seq_cst_4(volatile unsigned __int32 *, unsigned __int32)
		public ?_Store_seq_cst_4@std@@YAXPCKK@Z
?_Store_seq_cst_4@std@@YAXPCKK@Z proc near
					; CODE XREF: std::_Atomic_store_4(ulong	volatile *,ulong,std::memory_order)+58p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+arg_0]
		xchg	eax, [ecx]
		pop	ebp
		retn
?_Store_seq_cst_4@std@@YAXPCKK@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 65A0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(char, size_t	Size)
		public ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+33p
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+55p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= byte ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		movzx	eax, [ebp+arg_0]
		test	eax, eax
		jnz	short loc_65C8
		jmp	short loc_663B
; ---------------------------------------------------------------------------

loc_65C8:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+24j
		mov	ecx, [ebp+var_4]
		cmp	dword ptr [ecx+18h], 10h
		jb	short loc_663B
		mov	edx, [ebp+var_4]
		mov	eax, [edx+4]
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+var_4]
		add	ecx, 4
		push	ecx
		lea	edx, [ebp+var_C+3]
		push	edx
		mov	ecx, [ebp+var_4]
		call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
		mov	ecx, eax
		call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)
		cmp	[ebp+Size], 0
		jbe	short loc_661A
		mov	eax, [ebp+Size]
		push	eax		; Size
		mov	ecx, [ebp+var_8]
		push	ecx
		call	??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
		add	esp, 4
		push	eax		; Src
		mov	edx, [ebp+var_4]
		add	edx, 4
		push	edx		; Dst
		call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
		add	esp, 0Ch

loc_661A:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+58j
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+18h]
		add	ecx, 1
		push	ecx		; int
		mov	edx, [ebp+var_8]
		push	edx		; void *
		lea	eax, [ebp+var_C+2]
		push	eax
		mov	ecx, [ebp+var_4]
		call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
		mov	ecx, eax
		call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)

loc_663B:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+26j
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+2Fj
		mov	ecx, [ebp+var_4]
		mov	dword ptr [ecx+18h], 0Fh
		mov	edx, [ebp+Size]
		push	edx
		mov	ecx, [ebp+var_4]
		call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6664h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; protected: void __thiscall std::basic_stringbuf<char,	struct std::char_traits<char>, class std::allocator<char>>::_Tidy(void)
		public ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ proc near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(void)+1Bp
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&)+11p

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		push	esi
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+3Ch]
		and	ecx, 1
		jz	short loc_66FF
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_66B4
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::epptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_8], eax
		jmp	short loc_66C9
; ---------------------------------------------------------------------------

loc_66B4:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)+37j
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::egptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_8], eax

loc_66C9:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)+4Ej
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+var_8]
		sub	edx, eax
		push	edx		; int
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax		; void *
		mov	ecx, [ebp+var_4]
		add	ecx, 40h ; '@'
		call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)

loc_66FF:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)+21j
		mov	esi, esp
		push	0
		push	0
		push	0
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setg(char *,char *,char *)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	0
		push	0
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char>>::setp(char *,char *)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+38h], 0
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+3Ch]
		and	edx, 0FFFFFFFEh
		mov	eax, [ebp+var_4]
		mov	[eax+3Ch], edx
		pop	esi
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6758h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xlen(void)const
		public ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc	near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+2Ep

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	esi, esp
		push	offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
		call	dword ptr ds:__imp_?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 678Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xran(void)const
		public ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc	near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+27p
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+1Cp	...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	esi, esp
		push	offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
		call	dword ptr ds:__imp_?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 67C0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static unsigned int __cdecl mozilla::detail::IntrinsicAddSub<unsigned	int, 2>::add(struct std::atomic<unsigned int> &, unsigned int)
		public ?add@?$IntrinsicAddSub@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@I@Z
?add@?$IntrinsicAddSub@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@I@Z proc near
					; CODE XREF: mozilla::detail::IntrinsicIncDec<uint,2>::inc(std::atomic<uint> &)+9p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	5
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		call	?fetch_add@atomic_uint@std@@QAEIIW4memory_order@2@@Z ; std::atomic_uint::fetch_add(uint,std::memory_order)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?add@?$IntrinsicAddSub@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@I@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 67DCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	mozilla::gfx::SurfacePattern * __thiscall mozilla::gfx::ClassStorage<class mozilla::gfx::SurfacePattern>::addr(void)
		public ?addr@?$ClassStorage@VSurfacePattern@gfx@mozilla@@@gfx@mozilla@@QAEPAVSurfacePattern@23@XZ
?addr@?$ClassStorage@VSurfacePattern@gfx@mozilla@@@gfx@mozilla@@QAEPAVSurfacePattern@23@XZ proc	near
					; CODE XREF: mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern const	&)+C9p
					; mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern const &)+14Bp

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
?addr@?$ClassStorage@VSurfacePattern@gfx@mozilla@@@gfx@mozilla@@QAEPAVSurfacePattern@23@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 67F4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: char * __thiscall std::_Wrap_alloc<class std::allocator<char>>::allocate(unsigned int)
		public ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+D0p
					; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+26p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_4]
		call	?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6820h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: char * __thiscall std::allocator<char>::allocate(unsigned int)
		public ?allocate@?$allocator@D@std@@QAEPADI@Z
?allocate@?$allocator@D@std@@QAEPADI@Z proc near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char	const *,uint,int)+58p
					; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)+15p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		push	0
		mov	eax, [ebp+arg_0]
		push	eax
		call	??$_Allocate@D@std@@YAPADIPAD@Z	; std::_Allocate<char>(uint,char *)
		add	esp, 8
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?allocate@?$allocator@D@std@@QAEPADI@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 684Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: struct std::_Container_proxy * __thiscall std::allocator<struct std::_Container_proxy>::allocate(unsigned int)
		public ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z	proc near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+2Dp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		push	0
		mov	eax, [ebp+arg_0]
		push	eax
		call	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)
		add	esp, 8
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6878h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>> & __thiscall	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>>::assign(class std::basic_string<char, struct	std::char_traits<char>,	class std::allocator<char>> const &, unsigned int, unsigned int)
		public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+56p

Size		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+Size], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+arg_0]
		call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
		cmp	eax, [ebp+arg_4]
		jnb	short loc_68A4
		mov	ecx, [ebp+var_4]
		call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)

loc_68A4:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+22j
		mov	ecx, [ebp+arg_0]
		call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
		sub	eax, [ebp+arg_4]
		mov	[ebp+Size], eax
		mov	eax, [ebp+arg_8]
		cmp	eax, [ebp+Size]
		jnb	short loc_68C0
		mov	ecx, [ebp+arg_8]
		mov	[ebp+Size], ecx

loc_68C0:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+40j
		mov	edx, [ebp+var_4]
		cmp	edx, [ebp+arg_0]
		jnz	short loc_68E7
		mov	eax, [ebp+arg_4]
		add	eax, [ebp+Size]
		push	eax
		mov	ecx, [ebp+var_4]
		call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)
		mov	ecx, [ebp+arg_4]
		push	ecx
		push	0
		mov	ecx, [ebp+var_4]
		call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)
		jmp	short loc_6929
; ---------------------------------------------------------------------------

loc_68E7:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+4Ej
		push	0
		mov	edx, [ebp+Size]
		push	edx
		mov	ecx, [ebp+var_4]
		call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
		movzx	eax, al
		test	eax, eax
		jz	short loc_6929
		mov	ecx, [ebp+Size]
		push	ecx		; Size
		mov	ecx, [ebp+arg_0]
		call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
		add	eax, [ebp+arg_4]
		push	eax		; Src
		mov	ecx, [ebp+var_4]
		call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
		push	eax		; Dst
		call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
		add	esp, 0Ch
		mov	edx, [ebp+Size]
		push	edx
		mov	ecx, [ebp+var_4]
		call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)

loc_6929:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+6Dj
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&,uint,uint)+82j
		mov	eax, [ebp+var_4]
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 693Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char *Str)
		public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+61p

var_4		= dword	ptr -4
Str		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		push	490h		; unsigned int
		push	offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
		mov	eax, [ebp+Str]
		push	eax		; int
		call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char	const *,wchar_t	const *,uint)
		add	esp, 0Ch
		mov	ecx, [ebp+Str]
		push	ecx		; Str
		call	?length@?$char_traits@D@std@@SAIPBD@Z ;	std::char_traits<char>::length(char const *)
		add	esp, 4
		push	eax		; Size
		mov	edx, [ebp+Str]
		push	edx		; Src
		mov	ecx, [ebp+var_4]
		call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char	const *,uint)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 698Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(void *Src, size_t Size)
		public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *,uint)+65p
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+38p

var_4		= dword	ptr -4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		cmp	[ebp+Size], 0
		jz	short loc_69B6
		push	47Fh		; unsigned int
		push	offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
		mov	eax, [ebp+Src]
		push	eax		; int
		call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char	const *,wchar_t	const *,uint)
		add	esp, 0Ch

loc_69B6:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+12j
		mov	ecx, [ebp+Src]
		push	ecx
		mov	ecx, [ebp+var_4]
		call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
		movzx	edx, al
		test	edx, edx
		jz	short loc_69E9
		mov	eax, [ebp+Size]
		push	eax
		mov	ecx, [ebp+var_4]
		call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
		mov	ecx, [ebp+Src]
		sub	ecx, eax
		push	ecx
		mov	edx, [ebp+var_4]
		push	edx
		mov	ecx, [ebp+var_4]
		call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
		jmp	short loc_6A26
; ---------------------------------------------------------------------------

loc_69E9:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+3Bj
		push	0
		mov	eax, [ebp+Size]
		push	eax
		mov	ecx, [ebp+var_4]
		call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
		movzx	ecx, al
		test	ecx, ecx
		jz	short loc_6A23
		mov	edx, [ebp+Size]
		push	edx		; Size
		mov	eax, [ebp+Src]
		push	eax		; Src
		mov	ecx, [ebp+var_4]
		call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
		push	eax		; Dst
		call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
		add	esp, 0Ch
		mov	ecx, [ebp+Size]
		push	ecx
		mov	ecx, [ebp+var_4]
		call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)

loc_6A23:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+70j
		mov	eax, [ebp+var_4]

loc_6A26:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+5Bj
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6A38h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static void __cdecl std::char_traits<char>::assign(char &, char const	&)
		public ?assign@?$char_traits@D@std@@SAXAADABD@Z
?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+34p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	dl, [ecx]
		mov	[eax], dl
		pop	ebp
		retn
?assign@?$char_traits@D@std@@SAXAADABD@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6A48h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; unsigned int __cdecl std::atomic_fetch_add_explicit(struct std::atomic_uint *, unsigned int, enum  std::memory_order)
		public ?atomic_fetch_add_explicit@std@@YAIPAUatomic_uint@1@IW4memory_order@1@@Z
?atomic_fetch_add_explicit@std@@YAIPAUatomic_uint@1@IW4memory_order@1@@Z proc near
					; CODE XREF: std::atomic_uint::fetch_add(uint,std::memory_order)+1Ap

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	?_Atomic_fetch_add_4@std@@YAKPCKKW4memory_order@1@@Z ; std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?atomic_fetch_add_explicit@std@@YAIPAUatomic_uint@1@IW4memory_order@1@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6A68h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; unsigned int __cdecl std::atomic_fetch_sub_explicit(struct std::atomic_uint *, unsigned int, enum  std::memory_order)
		public ?atomic_fetch_sub_explicit@std@@YAIPAUatomic_uint@1@IW4memory_order@1@@Z
?atomic_fetch_sub_explicit@std@@YAIPAUatomic_uint@1@IW4memory_order@1@@Z proc near
					; CODE XREF: std::atomic_uint::fetch_sub(uint,std::memory_order)+1Ap

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	?_Atomic_fetch_sub_4@std@@YAKPCKKW4memory_order@1@@Z ; std::_Atomic_fetch_sub_4(ulong volatile *,ulong,std::memory_order)
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?atomic_fetch_sub_explicit@std@@YAIPAUatomic_uint@1@IW4memory_order@1@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6A88h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl std::atomic_store(struct	std::atomic_uint *, unsigned int)
		public ?atomic_store@std@@YAXPAUatomic_uint@1@I@Z
?atomic_store@std@@YAXPAUatomic_uint@1@I@Z proc	near
					; CODE XREF: std::atomic_uint::operator=(uint)+16p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	5
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		call	?atomic_store_explicit@std@@YAXPAUatomic_uint@1@IW4memory_order@1@@Z ; std::atomic_store_explicit(std::atomic_uint *,uint,std::memory_order)
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?atomic_store@std@@YAXPAUatomic_uint@1@I@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6AA8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl std::atomic_store_explicit(struct std::atomic_uint *, unsigned int, enum	 std::memory_order)
		public ?atomic_store_explicit@std@@YAXPAUatomic_uint@1@IW4memory_order@1@@Z
?atomic_store_explicit@std@@YAXPAUatomic_uint@1@IW4memory_order@1@@Z proc near
					; CODE XREF: std::atomic_store(std::atomic_uint	*,uint)+Dp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		call	?_Atomic_store_4@std@@YAXPCKKW4memory_order@1@@Z ; std::_Atomic_store_4(ulong volatile *,ulong,std::memory_order)
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?atomic_store_explicit@std@@YAXPAUatomic_uint@1@IW4memory_order@1@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6AC8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: char const * __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::c_str(void)const
		public ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ proc near
					; CODE XREF: mozilla::gfx::BasicLogger::OutputMessage(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&,int,bool)+46p
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&)+29p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6AECh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct std::error_category *__thiscall std::error_code::category(std::error_code *__hidden this)
		public ?category@error_code@std@@QBEABVerror_category@2@XZ
?category@error_code@std@@QBEABVerror_category@2@XZ proc near
					; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+1Ap

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	eax, [eax+4]
		mov	esp, ebp
		pop	ebp
		retn
?category@error_code@std@@QBEABVerror_category@2@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6B04h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct std::error_category *__thiscall std::error_condition::category(std::error_condition *__hidden this)
		public ?category@error_condition@std@@QBEABVerror_category@2@XZ
?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
					; CODE XREF: std::error_condition::operator==(std::error_condition const &)+1Bp
					; std::error_condition::operator==(std::error_condition	const &)+24p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	eax, [eax+4]
		mov	esp, ebp
		pop	ebp
		retn
?category@error_condition@std@@QBEABVerror_category@2@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6B1Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static unsigned int __cdecl mozilla::detail::ToStorageTypeArgument<unsigned int>::convert(unsigned int)
		public ?convert@?$ToStorageTypeArgument@I@detail@mozilla@@SAII@Z
?convert@?$ToStorageTypeArgument@I@detail@mozilla@@SAII@Z proc near
					; CODE XREF: mozilla::detail::AtomicBase<uint,2>::AtomicBase<uint,2>(uint)+12p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		pop	ebp
		retn
?convert@?$ToStorageTypeArgument@I@detail@mozilla@@SAII@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6B24h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl std::char_traits<char>::copy(void	*Dst, void *Src, size_t	Size)
		public ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near ; CODE XREF: $LN19+1Ep
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char const *,uint,int)+6Cp ...

var_4		= dword	ptr -4
Dst		= dword	ptr  8
Src		= dword	ptr  0Ch
Size		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		cmp	[ebp+Size], 0
		jnz	short loc_6B3D
		mov	eax, [ebp+Dst]
		mov	[ebp+var_4], eax
		jmp	short loc_6B54
; ---------------------------------------------------------------------------

loc_6B3D:				; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+Fj
		mov	ecx, [ebp+Size]
		push	ecx		; Size
		mov	edx, [ebp+Src]
		push	edx		; Src
		mov	eax, [ebp+Dst]
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	[ebp+var_4], eax

loc_6B54:				; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+17j
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6B68h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::_Wrap_alloc<std::allocator<char>>::deallocate(void	*, int)
		public ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+96p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_4]
		push	eax		; int
		mov	ecx, [ebp+arg_0]
		push	ecx		; void *
		mov	ecx, [ebp+var_4]
		call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6B98h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::allocator<char>::deallocate(void *, int)
		public ?deallocate@?$allocator@D@std@@QAEXPADI@Z
?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)+96p
					; std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)+19p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6BC4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::allocator<std::_Container_proxy>::deallocate(void *, int)
		public ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc	near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+4Ep

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6BF0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static unsigned int __cdecl mozilla::detail::IntrinsicIncDec<unsigned	int, 2>::dec(struct std::atomic<unsigned int> &)
		public ?dec@?$IntrinsicIncDec@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@@Z
?dec@?$IntrinsicIncDec@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@@Z proc near
					; CODE XREF: mozilla::detail::AtomicBaseIncDec<uint,2>::operator--(void)+12p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	1
		mov	eax, [ebp+arg_0]
		push	eax
		call	?sub@?$IntrinsicAddSub@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@I@Z ;	mozilla::detail::IntrinsicAddSub<uint,2>::sub(std::atomic<uint>	&,uint)
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?dec@?$IntrinsicIncDec@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6C0Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual class	std::error_condition __thiscall	std::_System_error_category::default_error_condition(int)const
		public ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
					; DATA XREF: .rdata:00008EFCo

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax		; int
		call	dword ptr ds:__imp_?_Syserror_map@std@@YAPBDH@Z	; std::_Syserror_map(int)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_6C4E
		call	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category(void)
		push	eax		; struct std::error_category *
		mov	ecx, [ebp+arg_4]
		push	ecx		; int
		mov	ecx, [ebp+arg_0] ; this
		call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
		mov	eax, [ebp+arg_0]
		jmp	short loc_6C63
; ---------------------------------------------------------------------------
		jmp	short loc_6C63
; ---------------------------------------------------------------------------

loc_6C4E:				; CODE XREF: std::_System_error_category::default_error_condition(int)+27j
		call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category(void)
		push	eax		; struct std::error_category *
		mov	edx, [ebp+arg_4]
		push	edx		; int
		mov	ecx, [ebp+arg_0] ; this
		call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
		mov	eax, [ebp+arg_0]

loc_6C63:				; CODE XREF: std::_System_error_category::default_error_condition(int)+3Ej
					; std::_System_error_category::default_error_condition(int)+40j
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6C74h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual class	std::error_condition __thiscall	std::error_category::default_error_condition(int)const
		public ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
					; DATA XREF: .rdata:00008E6Co
					; .rdata:00008E88o ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		push	eax		; struct std::error_category *
		mov	ecx, [ebp+arg_4]
		push	ecx		; int
		mov	ecx, [ebp+arg_0] ; this
		call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
		mov	eax, [ebp+arg_0]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6CA8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::empty(void)const
		public ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ proc near
					; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Flush(void)+64p

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		cmp	dword ptr [eax+14h], 0
		jnz	short loc_6CD1
		mov	[ebp+var_8], 1
		jmp	short loc_6CD8
; ---------------------------------------------------------------------------

loc_6CD1:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)+1Ej
		mov	[ebp+var_8], 0

loc_6CD8:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)+27j
		mov	al, byte ptr [ebp+var_8]
		mov	esp, ebp
		pop	ebp
		retn
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6CE0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static int __cdecl std::char_traits<char>::eof(void)
		public ?eof@?$char_traits@D@std@@SAHXZ
?eof@?$char_traits@D@std@@SAHXZ	proc near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1E2p
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+30Dp	...
		push	ebp
		mov	ebp, esp
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
?eof@?$char_traits@D@std@@SAHXZ	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6CE8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static bool __cdecl std::char_traits<char>::eq(char const &, char const &)
		public ?eq@?$char_traits@D@std@@SA_NABD0@Z
?eq@?$char_traits@D@std@@SA_NABD0@Z proc near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)+B0p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		movsx	ecx, byte ptr [eax]
		mov	edx, [ebp+arg_4]
		movsx	eax, byte ptr [edx]
		cmp	ecx, eax
		jnz	short loc_6D0C
		mov	[ebp+var_4], 1
		jmp	short loc_6D13
; ---------------------------------------------------------------------------

loc_6D0C:				; CODE XREF: std::char_traits<char>::eq(char const &,char const	&)+19j
		mov	[ebp+var_4], 0

loc_6D13:				; CODE XREF: std::char_traits<char>::eq(char const &,char const	&)+22j
		mov	al, byte ptr [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
?eq@?$char_traits@D@std@@SA_NABD0@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6D1Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static bool __cdecl std::char_traits<char>::eq_int_type(int const &, int const &)
		public ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z proc near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1F2p
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+31Dp	...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	edx, [eax]
		cmp	edx, [ecx]
		jnz	short loc_6D3C
		mov	[ebp+var_4], 1
		jmp	short loc_6D43
; ---------------------------------------------------------------------------

loc_6D3C:				; CODE XREF: std::char_traits<char>::eq_int_type(int const &,int const &)+15j
		mov	[ebp+var_4], 0

loc_6D43:				; CODE XREF: std::char_traits<char>::eq_int_type(int const &,int const &)+1Ej
		mov	al, byte ptr [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6D4Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; bool __thiscall std::error_category::equivalent(std::error_category *this, const struct std::error_code *, int)
		public ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
					; DATA XREF: .rdata:00008E70o
					; .rdata:00008E8Co ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+arg_0] ; this
		call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category(void)
		push	eax
		mov	ecx, [ebp+var_4]
		call	??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
		movzx	eax, al
		test	eax, eax
		jz	short loc_6D91
		mov	ecx, [ebp+arg_0] ; this
		call	?value@error_code@std@@QBEHXZ ;	std::error_code::value(void)
		cmp	eax, [ebp+arg_4]
		jnz	short loc_6D91
		mov	[ebp+var_8], 1
		jmp	short loc_6D98
; ---------------------------------------------------------------------------

loc_6D91:				; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+2Dj
					; std::error_category::equivalent(std::error_code const	&,int)+3Aj
		mov	[ebp+var_8], 0

loc_6D98:				; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+43j
		mov	al, byte ptr [ebp+var_8]
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6DACh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; bool __thiscall std::error_category::equivalent(std::error_category *this, int, const	struct std::error_condition *)
		public ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
					; DATA XREF: .rdata:00008E74o
					; .rdata:00008E90o ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_4]
		push	eax		; std::error_condition *
		mov	esi, esp
		mov	ecx, [ebp+arg_0]
		push	ecx
		lea	edx, [ebp+var_C]
		push	edx
		mov	eax, [ebp+var_4]
		mov	edx, [eax]
		mov	ecx, [ebp+var_4]
		mov	eax, [edx+0Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, eax
		call	??8error_condition@std@@QBE_NABV01@@Z ;	std::error_condition::operator==(std::error_condition const &)
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6E08h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>> & __thiscall	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int)
		public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Ap

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+14h]
		cmp	ecx, [ebp+arg_0]
		jnb	short loc_6E29
		mov	ecx, [ebp+var_4]
		call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)

loc_6E29:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+17j
		mov	edx, [ebp+arg_0]
		push	edx
		mov	ecx, [ebp+var_4]
		call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6E48h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>> & __thiscall	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int,	unsigned int)
		public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+68p

var_C		= dword	ptr -0Ch
Dst		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+Dst], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+14h]
		cmp	ecx, [ebp+arg_0]
		jnb	short loc_6E79
		mov	ecx, [ebp+var_4]
		call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)

loc_6E79:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+27j
		mov	edx, [ebp+var_4]
		mov	eax, [edx+14h]
		sub	eax, [ebp+arg_0]
		cmp	eax, [ebp+arg_4]
		ja	short loc_6E95
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	ecx, [ebp+var_4]
		call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
		jmp	short loc_6EDB
; ---------------------------------------------------------------------------

loc_6E95:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+3Dj
		cmp	[ebp+arg_4], 0
		jbe	short loc_6EDB
		mov	ecx, [ebp+var_4]
		call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
		add	eax, [ebp+arg_0]
		mov	[ebp+Dst], eax
		mov	edx, [ebp+var_4]
		mov	eax, [edx+14h]
		sub	eax, [ebp+arg_4]
		mov	[ebp+var_C], eax
		mov	ecx, [ebp+var_C]
		sub	ecx, [ebp+arg_0]
		push	ecx		; Size
		mov	edx, [ebp+Dst]
		add	edx, [ebp+arg_4]
		push	edx		; Src
		mov	eax, [ebp+Dst]
		push	eax		; Dst
		call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
		add	esp, 0Ch
		mov	ecx, [ebp+var_C]
		push	ecx
		mov	ecx, [ebp+var_4]
		call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)

loc_6EDB:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+4Bj
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+51j
		mov	eax, [ebp+var_4]
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6EF0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: unsigned int __thiscall std::atomic_uint::fetch_add(unsigned int, enum  std::memory_order)
		public ?fetch_add@atomic_uint@std@@QAEIIW4memory_order@2@@Z
?fetch_add@atomic_uint@std@@QAEIIW4memory_order@2@@Z proc near
					; CODE XREF: mozilla::detail::IntrinsicAddSub<uint,2>::add(std::atomic<uint> &,uint)+Cp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_4]
		push	edx
		call	?atomic_fetch_add_explicit@std@@YAIPAUatomic_uint@1@IW4memory_order@1@@Z ; std::atomic_fetch_add_explicit(std::atomic_uint *,uint,std::memory_order)
		add	esp, 0Ch
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?fetch_add@atomic_uint@std@@QAEIIW4memory_order@2@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6F24h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: unsigned int __thiscall std::atomic_uint::fetch_sub(unsigned int, enum  std::memory_order)
		public ?fetch_sub@atomic_uint@std@@QAEIIW4memory_order@2@@Z
?fetch_sub@atomic_uint@std@@QAEIIW4memory_order@2@@Z proc near
					; CODE XREF: mozilla::detail::IntrinsicAddSub<uint,2>::sub(std::atomic<uint> &,uint)+Cp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	edx, [ebp+var_4]
		push	edx
		call	?atomic_fetch_sub_explicit@std@@YAIPAUatomic_uint@1@IW4memory_order@1@@Z ; std::atomic_fetch_sub_explicit(std::atomic_uint *,uint,std::memory_order)
		add	esp, 0Ch
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?fetch_sub@atomic_uint@std@@QAEIIW4memory_order@2@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6F58h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: struct already_AddRefed<class	mozilla::gfx::DrawTargetDual> __thiscall RefPtr<class mozilla::gfx::DrawTargetDual>::forget(void)
		public ?forget@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@XZ
?forget@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@XZ proc	near
					; CODE XREF: mozilla::MakeAndAddRef<mozilla::gfx::DrawTargetDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)+C0p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		mov	[ebp+var_14], 0
		mov	[ebp+var_C], 0
		lea	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+var_4]
		call	?swap@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAEXAAPAVDrawTargetDual@gfx@mozilla@@@Z ;	RefPtr<mozilla::gfx::DrawTargetDual>::swap(mozilla::gfx::DrawTargetDual	* &)
		mov	ecx, [ebp+var_C]
		push	ecx
		mov	ecx, [ebp+arg_0]
		call	??0?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAE@PAVDrawTargetDual@gfx@mozilla@@@Z ; already_AddRefed<mozilla::gfx::DrawTargetDual>::already_AddRefed<mozilla::gfx::DrawTargetDual>(mozilla::gfx::DrawTargetDual *)
		mov	edx, [ebp+var_14]
		or	edx, 1
		mov	[ebp+var_14], edx
		mov	eax, [ebp+arg_0]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7_9
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?forget@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@XZ endp

; ---------------------------------------------------------------------------
$LN7_9		dd 1			; DATA XREF: RefPtr<mozilla::gfx::DrawTargetDual>::forget(void)+53o
		dd offset $LN6_7
$LN6_7		dd 0FFFFFFF4h, 4	; DATA XREF: .text$mn:00006FCCo
		dd offset $LN5_12	; "temp"
$LN5_12		db 'temp',0             ; DATA XREF: .text$mn:00006FD8o
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 6FE4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: struct already_AddRefed<class	mozilla::gfx::SourceSurfaceDual> __thiscall RefPtr<class mozilla::gfx::SourceSurfaceDual>::forget(void)
		public ?forget@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@XZ
?forget@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@XZ proc near
					; CODE XREF: mozilla::MakeAndAddRef<mozilla::gfx::SourceSurfaceDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget>	&>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)+C0p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		mov	[ebp+var_14], 0
		mov	[ebp+var_C], 0
		lea	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+var_4]
		call	?swap@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAEXAAPAVSourceSurfaceDual@gfx@mozilla@@@Z ; RefPtr<mozilla::gfx::SourceSurfaceDual>::swap(mozilla::gfx::SourceSurfaceDual * &)
		mov	ecx, [ebp+var_C]
		push	ecx
		mov	ecx, [ebp+arg_0]
		call	??0?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAE@PAVSourceSurfaceDual@gfx@mozilla@@@Z ; already_AddRefed<mozilla::gfx::SourceSurfaceDual>::already_AddRefed<mozilla::gfx::SourceSurfaceDual>(mozilla::gfx::SourceSurfaceDual	*)
		mov	edx, [ebp+var_14]
		or	edx, 1
		mov	[ebp+var_14], edx
		mov	eax, [ebp+arg_0]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN7_8
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?forget@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@XZ endp

; ---------------------------------------------------------------------------
$LN7_8		dd 1			; DATA XREF: RefPtr<mozilla::gfx::SourceSurfaceDual>::forget(void)+53o
		dd offset $LN6_6
$LN6_6		dd 0FFFFFFF4h, 4	; DATA XREF: .text$mn:00007058o
		dd offset $LN5_11	; "temp"
$LN5_11		db 'temp',0             ; DATA XREF: .text$mn:00007064o
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7070h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct std::error_category *__cdecl std::generic_category()
		public ?generic_category@std@@YAABVerror_category@1@XZ
?generic_category@std@@YAABVerror_category@1@XZ	proc near
					; CODE XREF: std::_System_error_category::default_error_condition(int)+29p
		push	ebp
		mov	ebp, esp
		mov	eax, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
		pop	ebp
		retn
?generic_category@std@@YAABVerror_category@1@XZ	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 707Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	mozilla::gfx::DrawTarget * __thiscall RefPtr<class mozilla::gfx::DrawTarget>::get(void)const
		public ?get@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ
?get@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ proc near
					; CODE XREF: RefPtr<mozilla::gfx::DrawTarget>::operator	mozilla::gfx::DrawTarget *(void)+11p
					; RefPtr<mozilla::gfx::DrawTarget>::operator->(void)+15p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	eax, [eax]
		mov	esp, ebp
		pop	ebp
		retn
?get@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7094h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	mozilla::gfx::SourceSurface * __thiscall RefPtr<class mozilla::gfx::SourceSurface>::get(void)const
		public ?get@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ
?get@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ	proc near
					; CODE XREF: mozilla::gfx::DualPattern::DualPattern(mozilla::gfx::Pattern const	&)+BEp
					; RefPtr<mozilla::gfx::SourceSurface>::operator	mozilla::gfx::SourceSurface *(void)+11p ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	eax, [eax]
		mov	esp, ebp
		pop	ebp
		retn
?get@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 70ACh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static unsigned int __cdecl mozilla::detail::IntrinsicIncDec<unsigned	int, 2>::inc(struct std::atomic<unsigned int> &)
		public ?inc@?$IntrinsicIncDec@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@@Z
?inc@?$IntrinsicIncDec@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@@Z proc near
					; CODE XREF: mozilla::detail::AtomicBaseIncDec<uint,2>::operator++(void)+12p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	1
		mov	eax, [ebp+arg_0]
		push	eax
		call	?add@?$IntrinsicAddSub@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@I@Z ;	mozilla::detail::IntrinsicAddSub<uint,2>::add(std::atomic<uint>	&,uint)
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?inc@?$IntrinsicIncDec@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 70C8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl std::char_traits<char>::length(char *Str)
		public ?length@?$char_traits@D@std@@SAIPBD@Z
?length@?$char_traits@D@std@@SAIPBD@Z proc near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+49p
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+28p

var_4		= dword	ptr -4
Str		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+Str]
		movsx	ecx, byte ptr [eax]
		test	ecx, ecx
		jnz	short loc_70E6
		mov	[ebp+var_4], 0
		jmp	short loc_70F5
; ---------------------------------------------------------------------------

loc_70E6:				; CODE XREF: std::char_traits<char>::length(char const *)+13j
		mov	edx, [ebp+Str]
		push	edx		; Str
		call	_strlen
		add	esp, 4
		mov	[ebp+var_4], eax

loc_70F5:				; CODE XREF: std::char_traits<char>::length(char const *)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?length@?$char_traits@D@std@@SAIPBD@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7108h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<char>>::max_size(void)const
		public ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+28p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		push	eax
		call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z	; std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)
		add	esp, 4
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7130h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: unsigned int __thiscall std::allocator<char>::max_size(void)const
		public ?max_size@?$allocator@D@std@@QBEIXZ
?max_size@?$allocator@D@std@@QBEIXZ proc near
					; CODE XREF: std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char>	const &)+6p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		or	eax, 0FFFFFFFFh
		mov	esp, ebp
		pop	ebp
		retn
?max_size@?$allocator@D@std@@QBEIXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7148h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<char>>::max_size(class	std::allocator<char> const &)
		public ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z	proc near
					; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::max_size(void)+12p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		call	?max_size@?$allocator@D@std@@QBEIXZ ; std::allocator<char>::max_size(void)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 715Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::max_size(void)const
		public ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+4Cp
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+83p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		lea	eax, [ebp+var_C+3]
		push	eax
		mov	ecx, [ebp+var_4]
		call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
		mov	ecx, eax
		call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char>>::max_size(void)
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 1
		ja	short loc_719B
		mov	[ebp+var_10], 1
		jmp	short loc_71A4
; ---------------------------------------------------------------------------

loc_719B:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+34j
		mov	ecx, [ebp+var_8]
		sub	ecx, 1
		mov	[ebp+var_10], ecx

loc_71A4:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+3Dj
		mov	eax, [ebp+var_10]
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 71B8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual class	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Generic_error_category::message(int)const
		public ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
					; CODE XREF: std::_Iostream_error_category::message(int)+4Cp
					; DATA XREF: .rdata:00008E84o

Str		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+Str], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		mov	[ebp+var_C], 0
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax		; int
		call	dword ptr ds:__imp_?_Syserror_map@std@@YAPBDH@Z	; std::_Syserror_map(int)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_7201
		mov	ecx, [ebp+var_8]
		mov	[ebp+Str], ecx
		jmp	short loc_7208
; ---------------------------------------------------------------------------

loc_7201:				; CODE XREF: std::_Generic_error_category::message(int)+3Fj
		mov	[ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@	; "unknown error"

loc_7208:				; CODE XREF: std::_Generic_error_category::message(int)+47j
		mov	edx, [ebp+Str]
		push	edx		; Str
		mov	ecx, [ebp+arg_0]
		call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
		mov	eax, [ebp+var_C]
		or	eax, 1
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_0]
		pop	esi
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7234h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual class	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Iostream_error_category::message(int)const
		public ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc	near
					; DATA XREF: .rdata:00008EB8o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	[ebp+var_8], 0
		cmp	[ebp+arg_4], 1
		jnz	short loc_7275
		push	offset ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ ; "iostream stream error"
		mov	ecx, [ebp+arg_0]
		call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
		mov	eax, [ebp+var_8]
		or	eax, 1
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_0]
		jmp	short loc_7291
; ---------------------------------------------------------------------------
		jmp	short loc_7291
; ---------------------------------------------------------------------------

loc_7275:				; CODE XREF: std::_Iostream_error_category::message(int)+22j
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	ecx, [ebp+var_4]
		call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
		mov	eax, [ebp+var_8]
		or	eax, 1
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_0]

loc_7291:				; CODE XREF: std::_Iostream_error_category::message(int)+3Dj
					; std::_Iostream_error_category::message(int)+3Fj
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 72A4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual class	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_System_error_category::message(int)const
		public ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
					; DATA XREF: .rdata:00008EF8o

Str		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+Str], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		mov	[ebp+var_C], 0
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax		; int
		call	dword ptr ds:__imp_?_Winerror_map@std@@YAPBDH@Z	; std::_Winerror_map(int)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_72ED
		mov	ecx, [ebp+var_8]
		mov	[ebp+Str], ecx
		jmp	short loc_72F4
; ---------------------------------------------------------------------------

loc_72ED:				; CODE XREF: std::_System_error_category::message(int)+3Fj
		mov	[ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@	; "unknown error"

loc_72F4:				; CODE XREF: std::_System_error_category::message(int)+47j
		mov	edx, [ebp+Str]
		push	edx		; Str
		mov	ecx, [ebp+arg_0]
		call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
		mov	eax, [ebp+var_C]
		or	eax, 1
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_0]
		pop	esi
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7320h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl std::char_traits<char>::move(void	*Dst, void *Src, size_t	Size)
		public ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+38p
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+7Fp

var_4		= dword	ptr -4
Dst		= dword	ptr  8
Src		= dword	ptr  0Ch
Size		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		cmp	[ebp+Size], 0
		jnz	short loc_733A
		mov	eax, [ebp+Dst]
		mov	[ebp+var_4], eax
		jmp	short loc_735B
; ---------------------------------------------------------------------------

loc_733A:				; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+10j
		mov	esi, esp
		mov	ecx, [ebp+Size]
		push	ecx		; Size
		mov	edx, [ebp+Src]
		push	edx		; Src
		mov	eax, [ebp+Dst]
		push	eax		; Dst
		call	dword ptr ds:__imp__memmove
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], eax

loc_735B:				; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+18j
		mov	eax, [ebp+var_4]
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?move@?$char_traits@D@std@@SAPADPADPBDI@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7370h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	char *__thiscall std::_Generic_error_category::name(std::_Generic_error_category *__hidden this)
		public ?name@_Generic_error_category@std@@UBEPBDXZ
?name@_Generic_error_category@std@@UBEPBDXZ proc near ;	DATA XREF: .rdata:00008E80o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, offset ??_C@_07DCLBNMLN@generic?$AA@ ; "generic"
		mov	esp, ebp
		pop	ebp
		retn
?name@_Generic_error_category@std@@UBEPBDXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7388h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	char *__thiscall std::_Iostream_error_category::name(std::_Iostream_error_category *__hidden this)
		public ?name@_Iostream_error_category@std@@UBEPBDXZ
?name@_Iostream_error_category@std@@UBEPBDXZ proc near ; DATA XREF: .rdata:00008EB4o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, offset ??_C@_08LLGCOLLL@iostream?$AA@ ; "iostream"
		mov	esp, ebp
		pop	ebp
		retn
?name@_Iostream_error_category@std@@UBEPBDXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 73A0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	char *__thiscall std::_System_error_category::name(std::_System_error_category *__hidden this)
		public ?name@_System_error_category@std@@UBEPBDXZ
?name@_System_error_category@std@@UBEPBDXZ proc	near ; DATA XREF: .rdata:00008EF4o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, offset ??_C@_06FHFOAHML@system?$AA@ ; "system"
		mov	esp, ebp
		pop	ebp
		retn
?name@_System_error_category@std@@UBEPBDXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 73B8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static int __cdecl std::char_traits<char>::not_eof(int const &)
		public ?not_eof@?$char_traits@D@std@@SAHABH@Z
?not_eof@?$char_traits@D@std@@SAHABH@Z proc near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+66p
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)+12Cp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		call	?eof@?$char_traits@D@std@@SAHXZ	; std::char_traits<char>::eof(void)
		mov	ecx, [ebp+arg_0]
		cmp	[ecx], eax
		jz	short loc_73E2
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	[ebp+var_4], eax
		jmp	short loc_7401
; ---------------------------------------------------------------------------

loc_73E2:				; CODE XREF: std::char_traits<char>::not_eof(int const &)+1Ej
		call	?eof@?$char_traits@D@std@@SAHXZ	; std::char_traits<char>::eof(void)
		test	eax, eax
		jnz	short loc_73F4
		mov	[ebp+var_8], 1
		jmp	short loc_73FB
; ---------------------------------------------------------------------------

loc_73F4:				; CODE XREF: std::char_traits<char>::not_eof(int const &)+31j
		mov	[ebp+var_8], 0

loc_73FB:				; CODE XREF: std::char_traits<char>::not_eof(int const &)+3Aj
		mov	ecx, [ebp+var_8]
		mov	[ebp+var_4], ecx

loc_7401:				; CODE XREF: std::char_traits<char>::not_eof(int const &)+28j
		mov	eax, [ebp+var_4]
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?not_eof@?$char_traits@D@std@@SAHABH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7414h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; protected: virtual int __thiscall std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::overflow(int)
		public ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z proc near
					; DATA XREF: .rdata:000092F0o

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
Src		= dword	ptr -18h
Dst		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
Size		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	ebx
		push	esi
		push	edi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_24], eax
		mov	[ebp+var_20], eax
		mov	[ebp+var_1C], eax
		mov	[ebp+Src], eax
		mov	[ebp+Dst], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+Size], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+3Ch]
		and	ecx, 2
		jz	short loc_7457
		call	?eof@?$char_traits@D@std@@SAHXZ	; std::char_traits<char>::eof(void)
		jmp	loc_77F6
; ---------------------------------------------------------------------------
		jmp	short loc_7487
; ---------------------------------------------------------------------------

loc_7457:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+35j
		call	?eof@?$char_traits@D@std@@SAHXZ	; std::char_traits<char>::eof(void)
		mov	[ebp+var_1C], eax
		lea	edx, [ebp+arg_0]
		push	edx
		lea	eax, [ebp+var_1C]
		push	eax
		call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type(int const &,int const &)
		add	esp, 8
		movzx	ecx, al
		test	ecx, ecx
		jz	short loc_7487
		lea	edx, [ebp+arg_0]
		push	edx
		call	?not_eof@?$char_traits@D@std@@SAHABH@Z ; std::char_traits<char>::not_eof(int const &)
		add	esp, 4
		jmp	loc_77F6
; ---------------------------------------------------------------------------

loc_7487:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+41j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+60j
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+3Ch]
		and	ecx, 8
		jz	short loc_7501
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_7501
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+var_4]
		cmp	eax, [edx+38h]
		jnb	short loc_7501
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::epptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	eax
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+38h]
		push	ecx
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pbase(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		push	eax
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setp(char *,char *,char *)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_7501:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+7Cj
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+92j ...
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_7570
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, eax
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::epptr(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		cmp	esi, eax
		jnb	short loc_7570
		lea	edx, [ebp+arg_0]
		push	edx
		call	?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type(int const &)
		add	esp, 4
		mov	bl, al
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Pninc(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[eax], bl
		mov	eax, [ebp+arg_0]
		jmp	loc_77F6
; ---------------------------------------------------------------------------
		jmp	loc_77F6
; ---------------------------------------------------------------------------

loc_7570:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+101j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+12Bj
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jnz	short loc_758F
		mov	[ebp+var_20], 0
		jmp	short loc_75BA
; ---------------------------------------------------------------------------

loc_758F:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+170j
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::epptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, eax
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		sub	esi, eax
		mov	[ebp+var_20], esi

loc_75BA:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+179j
		mov	eax, [ebp+var_20]
		mov	[ebp+Size], eax
		mov	ecx, [ebp+Size]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+var_C]
		shr	edx, 1
		cmp	edx, 20h ; ' '
		jnb	short loc_75D9
		mov	[ebp+var_24], 20h ; ' '
		jmp	short loc_75E1
; ---------------------------------------------------------------------------

loc_75D9:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+1BAj
		mov	eax, [ebp+var_C]
		shr	eax, 1
		mov	[ebp+var_24], eax

loc_75E1:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+1C3j
		mov	ecx, [ebp+var_24]
		mov	[ebp+var_10], ecx

loc_75E7:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+1EEj
		cmp	[ebp+var_10], 0
		jbe	short loc_7604
		mov	edx, 7FFFFFFFh
		sub	edx, [ebp+var_10]
		cmp	edx, [ebp+var_C]
		jnb	short loc_7604
		mov	eax, [ebp+var_10]
		shr	eax, 1
		mov	[ebp+var_10], eax
		jmp	short loc_75E7
; ---------------------------------------------------------------------------

loc_7604:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+1D7j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+1E4j
		cmp	[ebp+var_10], 0
		jnz	short loc_7614
		call	?eof@?$char_traits@D@std@@SAHXZ	; std::char_traits<char>::eof(void)
		jmp	loc_77F6
; ---------------------------------------------------------------------------

loc_7614:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+1F4j
		mov	ecx, [ebp+var_C]
		add	ecx, [ebp+var_10]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+var_C]
		push	edx
		mov	ecx, [ebp+var_4]
		add	ecx, 40h ; '@'
		call	?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
		mov	[ebp+Dst], eax
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+Src], eax
		cmp	[ebp+Size], 0
		jbe	short loc_765E
		mov	eax, [ebp+Size]
		push	eax		; Size
		mov	ecx, [ebp+Src]
		push	ecx		; Src
		mov	edx, [ebp+Dst]
		push	edx		; Dst
		call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
		add	esp, 0Ch

loc_765E:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+234j
		cmp	[ebp+Size], 0
		jnz	short loc_76D9
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+Dst]
		mov	[eax+38h], ecx
		mov	edx, [ebp+Dst]
		add	edx, [ebp+var_C]
		mov	esi, esp
		push	edx
		mov	eax, [ebp+Dst]
		push	eax
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char>>::setp(char *,char *)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+3Ch]
		and	edx, 4
		jz	short loc_76B3
		mov	esi, esp
		mov	eax, [ebp+Dst]
		push	eax
		push	0
		mov	ecx, [ebp+Dst]
		push	ecx
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setg(char *,char *,char *)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_76D4
; ---------------------------------------------------------------------------

loc_76B3:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+27Fj
		mov	edx, [ebp+Dst]
		add	edx, 1
		mov	esi, esp
		push	edx
		mov	eax, [ebp+Dst]
		push	eax
		mov	ecx, [ebp+Dst]
		push	ecx
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setg(char *,char *,char *)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_76D4:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+29Dj
		jmp	loc_77A4
; ---------------------------------------------------------------------------

loc_76D9:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+24Ej
		mov	edx, [ebp+var_4]
		mov	eax, [edx+38h]
		sub	eax, [ebp+Src]
		add	eax, [ebp+Dst]
		mov	ecx, [ebp+var_4]
		mov	[ecx+38h], eax
		mov	edx, [ebp+Dst]
		add	edx, [ebp+var_C]
		mov	esi, esp
		push	edx
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		sub	eax, [ebp+Src]
		add	eax, [ebp+Dst]
		push	eax
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pbase(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		sub	eax, [ebp+Src]
		add	eax, [ebp+Dst]
		push	eax
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setp(char *,char *,char *)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+3Ch]
		and	ecx, 4
		jz	short loc_775F
		mov	esi, esp
		mov	edx, [ebp+Dst]
		push	edx
		push	0
		mov	eax, [ebp+Dst]
		push	eax
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setg(char *,char *,char *)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_77A4
; ---------------------------------------------------------------------------

loc_775F:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+32Bj
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		add	eax, 1
		mov	esi, esp
		push	eax
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		sub	eax, [ebp+Src]
		add	eax, [ebp+Dst]
		push	eax
		mov	ecx, [ebp+Dst]
		push	ecx
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setg(char *,char *,char *)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_77A4:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int):loc_76D4j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+349j
		mov	edx, [ebp+var_4]
		mov	eax, [edx+3Ch]
		and	eax, 1
		jz	short loc_77C2
		mov	ecx, [ebp+Size]
		push	ecx		; int
		mov	edx, [ebp+Src]
		push	edx		; void *
		mov	ecx, [ebp+var_4]
		add	ecx, 40h ; '@'
		call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)

loc_77C2:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+399j
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+3Ch]
		or	ecx, 1
		mov	edx, [ebp+var_4]
		mov	[edx+3Ch], ecx
		lea	eax, [ebp+arg_0]
		push	eax
		call	?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type(int const &)
		add	esp, 4
		mov	bl, al
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Pninc(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[eax], bl
		mov	eax, [ebp+arg_0]

loc_77F6:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+3Cj
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+6Ej ...
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 24h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 780Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; protected: virtual int __thiscall std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::pbackfail(int)
		public ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z proc	near
					; DATA XREF: .rdata:000092F4o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		push	edi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	loc_78D6
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, eax
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		cmp	esi, eax
		jbe	short loc_78D6
		call	?eof@?$char_traits@D@std@@SAHXZ	; std::char_traits<char>::eof(void)
		mov	[ebp+var_8], eax
		lea	eax, [ebp+arg_0]
		push	eax
		lea	ecx, [ebp+var_8]
		push	ecx
		call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type(int const &,int const &)
		add	esp, 8
		movzx	edx, al
		test	edx, edx
		jnz	short loc_78DF
		lea	eax, [ebp+arg_0]
		push	eax
		call	?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type(int const &)
		add	esp, 4
		mov	byte ptr [ebp+var_C+3],	al
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, 1
		imul	edx, ecx, -1
		add	eax, edx
		push	eax
		lea	eax, [ebp+var_C+3]
		push	eax
		call	?eq@?$char_traits@D@std@@SA_NABD0@Z ; std::char_traits<char>::eq(char const &,char const &)
		add	esp, 8
		movzx	ecx, al
		test	ecx, ecx
		jnz	short loc_78DF
		mov	edx, [ebp+var_4]
		mov	eax, [edx+3Ch]
		and	eax, 2
		jz	short loc_78DF

loc_78D6:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)+31j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)+5Fj
		call	?eof@?$char_traits@D@std@@SAHXZ	; std::char_traits<char>::eof(void)
		jmp	short loc_7940
; ---------------------------------------------------------------------------
		jmp	short loc_7940
; ---------------------------------------------------------------------------

loc_78DF:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)+7Ej
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)+BDj ...
		mov	esi, esp
		push	0FFFFFFFFh
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char>>::gbump(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		call	?eof@?$char_traits@D@std@@SAHXZ	; std::char_traits<char>::eof(void)
		mov	[ebp+var_10], eax
		lea	ecx, [ebp+arg_0]
		push	ecx
		lea	edx, [ebp+var_10]
		push	edx
		call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type(int const &,int const &)
		add	esp, 8
		movzx	eax, al
		test	eax, eax
		jnz	short loc_7934
		lea	ecx, [ebp+arg_0]
		push	ecx
		call	?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type(int const &)
		add	esp, 4
		mov	bl, al
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[eax], bl

loc_7934:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)+104j
		lea	edx, [ebp+arg_0]
		push	edx
		call	?not_eof@?$char_traits@D@std@@SAHABH@Z ; std::char_traits<char>::not_eof(int const &)
		add	esp, 4

loc_7940:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)+CFj
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)+D1j
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7954h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; protected: virtual class std::fpos<int> __thiscall std::basic_stringbuf<char,	struct std::char_traits<char>, class std::allocator<char>>::seekoff(__int64, int, int)
		public ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z proc near
					; DATA XREF: .rdata:0000930Co

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	esi
		push	edi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_79BB
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		cmp	[ecx+38h], eax
		jnb	short loc_79BB
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+var_4]
		mov	[edx+38h], eax

loc_79BB:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+33j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+4Dj
		mov	eax, [ebp+arg_10]
		and	eax, 1
		jz	loc_7B87
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	loc_7B87
		cmp	[ebp+arg_C], 2
		jnz	short loc_7A12
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+38h]
		sub	edx, eax
		mov	eax, edx
		cdq
		add	eax, [ebp+arg_4]
		adc	edx, [ebp+arg_8]
		mov	[ebp+arg_4], eax
		mov	[ebp+arg_8], edx
		jmp	short loc_7A70
; ---------------------------------------------------------------------------

loc_7A12:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+91j
		cmp	[ebp+arg_C], 1
		jnz	short loc_7A59
		mov	eax, [ebp+arg_10]
		and	eax, 2
		jnz	short loc_7A59
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, eax
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		sub	esi, eax
		mov	eax, esi
		cdq
		add	eax, [ebp+arg_4]
		adc	edx, [ebp+arg_8]
		mov	[ebp+arg_4], eax
		mov	[ebp+arg_8], edx
		jmp	short loc_7A70
; ---------------------------------------------------------------------------

loc_7A59:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+C2j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+CAj
		cmp	[ebp+arg_C], 0
		jz	short loc_7A70
		mov	ecx, dword ptr ds:__imp_?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
		mov	edx, [ecx]
		mov	[ebp+arg_4], edx
		mov	eax, [ecx+4]
		mov	[ebp+arg_8], eax

loc_7A70:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+BCj
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+103j ...
		cmp	[ebp+arg_8], 0
		jl	loc_7B72
		jg	short loc_7A86
		cmp	[ebp+arg_4], 0
		jb	loc_7B72

loc_7A86:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+126j
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+38h]
		sub	edx, eax
		mov	eax, edx
		cdq
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], edx
		mov	eax, [ebp+arg_8]
		cmp	eax, [ebp+var_8]
		jg	loc_7B72
		jl	short loc_7AC3
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [ebp+var_C]
		ja	loc_7B72

loc_7AC3:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+161j
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, eax
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		sub	esi, eax
		mov	eax, esi
		cdq
		add	eax, [ebp+arg_4]
		adc	edx, [ebp+arg_8]
		mov	esi, esp
		push	eax
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char>>::gbump(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+arg_10]
		and	edx, 2
		jz	short loc_7B70
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_7B70
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::epptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	eax
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		push	eax
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pbase(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		push	eax
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setp(char *,char *,char *)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_7B70:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+1B9j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+1CFj
		jmp	short loc_7B82
; ---------------------------------------------------------------------------

loc_7B72:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+120j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+12Cj ...
		mov	eax, dword ptr ds:__imp_?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
		mov	ecx, [eax]
		mov	[ebp+arg_4], ecx
		mov	edx, [eax+4]
		mov	[ebp+arg_8], edx

loc_7B82:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int):loc_7B70j
		jmp	loc_7CEB
; ---------------------------------------------------------------------------

loc_7B87:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+6Dj
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+87j
		mov	eax, [ebp+arg_10]
		and	eax, 2
		jz	loc_7CD3
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	loc_7CD3
		cmp	[ebp+arg_C], 2
		jnz	short loc_7BDE
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+38h]
		sub	edx, eax
		mov	eax, edx
		cdq
		add	eax, [ebp+arg_4]
		adc	edx, [ebp+arg_8]
		mov	[ebp+arg_4], eax
		mov	[ebp+arg_8], edx
		jmp	short loc_7C33
; ---------------------------------------------------------------------------

loc_7BDE:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+25Dj
		cmp	[ebp+arg_C], 1
		jnz	short loc_7C1D
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, eax
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		sub	esi, eax
		mov	eax, esi
		cdq
		add	eax, [ebp+arg_4]
		adc	edx, [ebp+arg_8]
		mov	[ebp+arg_4], eax
		mov	[ebp+arg_8], edx
		jmp	short loc_7C33
; ---------------------------------------------------------------------------

loc_7C1D:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+28Ej
		cmp	[ebp+arg_C], 0
		jz	short loc_7C33
		mov	eax, dword ptr ds:__imp_?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
		mov	ecx, [eax]
		mov	[ebp+arg_4], ecx
		mov	edx, [eax+4]
		mov	[ebp+arg_8], edx

loc_7C33:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+288j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+2C7j ...
		cmp	[ebp+arg_8], 0
		jl	loc_7CC0
		jg	short loc_7C45
		cmp	[ebp+arg_4], 0
		jb	short loc_7CC0

loc_7C45:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+2E9j
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+38h]
		sub	edx, eax
		mov	eax, edx
		cdq
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], edx
		mov	eax, [ebp+arg_8]
		cmp	eax, [ebp+var_10]
		jg	short loc_7CC0
		jl	short loc_7C7A
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [ebp+var_14]
		ja	short loc_7CC0

loc_7C7A:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+31Cj
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, eax
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		sub	esi, eax
		mov	eax, esi
		cdq
		add	eax, [ebp+arg_4]
		adc	edx, [ebp+arg_8]
		mov	esi, esp
		push	eax
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char>>::pbump(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_7CD1
; ---------------------------------------------------------------------------

loc_7CC0:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+2E3j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+2EFj ...
		mov	edx, dword ptr ds:__imp_?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
		mov	eax, [edx]
		mov	[ebp+arg_4], eax
		mov	ecx, [edx+4]
		mov	[ebp+arg_8], ecx

loc_7CD1:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+36Aj
		jmp	short loc_7CEB
; ---------------------------------------------------------------------------

loc_7CD3:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+239j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+253j
		mov	edx, [ebp+arg_4]
		or	edx, [ebp+arg_8]
		jz	short loc_7CEB
		mov	eax, dword ptr ds:__imp_?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
		mov	ecx, [eax]
		mov	[ebp+arg_4], ecx
		mov	edx, [eax+4]
		mov	[ebp+arg_8], edx

loc_7CEB:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int):loc_7B82j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int):loc_7CD1j ...
		mov	eax, [ebp+arg_8]
		push	eax
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	ecx, [ebp+arg_0]
		call	??0?$fpos@H@std@@QAE@_J@Z ; std::fpos<int>::fpos<int>(__int64)
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	14h
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7D10h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; protected: virtual class std::fpos<int> __thiscall std::basic_stringbuf<char,	struct std::char_traits<char>, class std::allocator<char>>::seekpos(class std::fpos<int>, int)
		public ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z proc near
					; DATA XREF: .rdata:00009310o

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_1C		= dword	ptr  24h

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		push	esi
		push	edi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_20], eax
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		lea	ecx, [ebp+arg_4]
		call	??B?$fpos@H@std@@QBE_JXZ ; std::fpos<int>::operator __int64(void)
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], edx
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_7D8E
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		cmp	[ecx+38h], eax
		jnb	short loc_7D8E
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+var_4]
		mov	[edx+38h], eax

loc_7D8E:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+4Aj
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+64j
		mov	eax, dword ptr ds:__imp_?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
		mov	[ebp+var_10], eax
		mov	ecx, [ebp+var_10]
		mov	edx, [ebp+var_C]
		cmp	edx, [ecx]
		jnz	short loc_7DB0
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_8]
		cmp	ecx, [eax+4]
		jnz	short loc_7DB0
		jmp	loc_7FC4
; ---------------------------------------------------------------------------

loc_7DB0:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+8Ej
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+99j
		mov	edx, [ebp+arg_1C]
		and	edx, 1
		jz	loc_7EED
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	loc_7EED
		cmp	[ebp+var_8], 0
		jl	loc_7ED8
		jg	short loc_7DEC
		cmp	[ebp+var_C], 0
		jb	loc_7ED8

loc_7DEC:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+D0j
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+38h]
		sub	edx, eax
		mov	eax, edx
		cdq
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], edx
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+var_14]
		jg	loc_7ED8
		jl	short loc_7E29
		mov	ecx, [ebp+var_C]
		cmp	ecx, [ebp+var_18]
		ja	loc_7ED8

loc_7E29:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+10Bj
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, eax
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		sub	esi, eax
		mov	eax, esi
		cdq
		add	eax, [ebp+var_C]
		adc	edx, [ebp+var_8]
		mov	esi, esp
		push	eax
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char>>::gbump(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+arg_1C]
		and	edx, 2
		jz	short loc_7ED6
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_7ED6
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::epptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		push	eax
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		push	eax
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pbase(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		push	eax
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setp(char *,char *,char *)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_7ED6:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+163j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+179j
		jmp	short loc_7EE8
; ---------------------------------------------------------------------------

loc_7ED8:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+CAj
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+D6j ...
		mov	eax, dword ptr ds:__imp_?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
		mov	ecx, [eax]
		mov	[ebp+var_C], ecx
		mov	edx, [eax+4]
		mov	[ebp+var_8], edx

loc_7EE8:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int):loc_7ED6j
		jmp	loc_7FC4
; ---------------------------------------------------------------------------

loc_7EED:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+A6j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+C0j
		mov	eax, [ebp+arg_1C]
		and	eax, 2
		jz	loc_7FB3
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	loc_7FB3
		cmp	[ebp+var_8], 0
		jl	loc_7FA0
		jg	short loc_7F25
		cmp	[ebp+var_C], 0
		jb	short loc_7FA0

loc_7F25:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+20Dj
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+38h]
		sub	edx, eax
		mov	eax, edx
		cdq
		mov	[ebp+var_20], eax
		mov	[ebp+var_1C], edx
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+var_1C]
		jg	short loc_7FA0
		jl	short loc_7F5A
		mov	ecx, [ebp+var_C]
		cmp	ecx, [ebp+var_20]
		ja	short loc_7FA0

loc_7F5A:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+240j
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, eax
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		sub	esi, eax
		mov	eax, esi
		cdq
		add	eax, [ebp+var_C]
		adc	edx, [ebp+var_8]
		mov	esi, esp
		push	eax
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char>>::pbump(int)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_7FB1
; ---------------------------------------------------------------------------

loc_7FA0:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+207j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+213j ...
		mov	edx, dword ptr ds:__imp_?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
		mov	eax, [edx]
		mov	[ebp+var_C], eax
		mov	ecx, [edx+4]
		mov	[ebp+var_8], ecx

loc_7FB1:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+28Ej
		jmp	short loc_7FC4
; ---------------------------------------------------------------------------

loc_7FB3:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+1E3j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+1FDj
		mov	edx, dword ptr ds:__imp_?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
		mov	eax, [edx]
		mov	[ebp+var_C], eax
		mov	ecx, [edx+4]
		mov	[ebp+var_8], ecx

loc_7FC4:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+9Bj
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int):loc_7EE8j ...
		mov	edx, [ebp+var_8]
		push	edx
		mov	eax, [ebp+var_C]
		push	eax
		mov	ecx, [ebp+arg_0]
		call	??0?$fpos@H@std@@QAE@_J@Z ; std::fpos<int>::fpos<int>(__int64)
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		add	esp, 20h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	20h
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 7FECh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::size(void)const
		public ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+1Ap
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&,uint,uint)+2Fp ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	eax, [eax+14h]
		mov	esp, ebp
		pop	ebp
		retn
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8004h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::str(class std::basic_string<char, struct std::char_traits<char>, class	std::allocator<char>> const &)
		public ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z proc near
					; CODE XREF: std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(std::basic_string<char,std::char_traits<char>,std::allocator<char>>	const &)+18p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ;	std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+3Ch]
		push	ecx		; int
		mov	ecx, [ebp+arg_0]
		call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
		push	eax		; Size
		mov	ecx, [ebp+arg_0]
		call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
		push	eax		; Src
		mov	ecx, [ebp+var_4]
		call	?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char	const *,uint,int)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 804Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>> __thiscall std::basic_stringbuf<char, struct	std::char_traits<char>,	class std::allocator<char>>::str(void)const
		public ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ	proc near
					; CODE XREF: std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(void)+28p

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_70		= byte ptr -70h
var_4C		= byte ptr -4Ch
var_28		= byte ptr -28h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 7Ch
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_7C]
		mov	ecx, 1Fh
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	[ebp+var_8], ecx
		mov	[ebp+var_78], 0
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+3Ch]
		and	ecx, 2
		jnz	loc_8139
		mov	esi, esp
		mov	ecx, [ebp+var_8]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	loc_8139
		mov	esi, esp
		mov	ecx, [ebp+var_8]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+var_8]
		cmp	[edx+38h], eax
		jnb	short loc_80D3
		mov	esi, esp
		mov	ecx, [ebp+var_8]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_7C], eax
		jmp	short loc_80DC
; ---------------------------------------------------------------------------

loc_80D3:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+6Ej
		mov	eax, [ebp+var_8]
		mov	ecx, [eax+38h]
		mov	[ebp+var_7C], ecx

loc_80DC:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+85j
		mov	esi, esp
		mov	ecx, [ebp+var_8]
		call	dword ptr ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pbase(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+var_7C]
		sub	edx, eax
		push	edx		; Size
		mov	esi, esp
		mov	ecx, [ebp+var_8]
		call	dword ptr ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pbase(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax		; Src
		lea	ecx, [ebp+var_28]
		call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *,uint)
		lea	eax, [ebp+var_28]
		push	eax
		mov	ecx, [ebp+arg_0]
		call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)
		mov	ecx, [ebp+var_78]
		or	ecx, 1
		mov	[ebp+var_78], ecx
		lea	ecx, [ebp+var_28]
		call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
		mov	eax, [ebp+arg_0]
		jmp	loc_81EA
; ---------------------------------------------------------------------------
		jmp	loc_81EA
; ---------------------------------------------------------------------------

loc_8139:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+36j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+50j
		mov	edx, [ebp+var_8]
		mov	eax, [edx+3Ch]
		and	eax, 4
		jnz	short loc_81C2
		mov	esi, esp
		mov	ecx, [ebp+var_8]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_81C2
		mov	esi, esp
		mov	ecx, [ebp+var_8]
		call	dword ptr ds:__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::egptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, eax
		mov	edi, esp
		mov	ecx, [ebp+var_8]
		call	dword ptr ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		sub	esi, eax
		push	esi		; Size
		mov	esi, esp
		mov	ecx, [ebp+var_8]
		call	dword ptr ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax		; Src
		lea	ecx, [ebp+var_4C]
		call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *,uint)
		lea	ecx, [ebp+var_4C]
		push	ecx
		mov	ecx, [ebp+arg_0]
		call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)
		mov	edx, [ebp+var_78]
		or	edx, 1
		mov	[ebp+var_78], edx
		lea	ecx, [ebp+var_4C]
		call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
		mov	eax, [ebp+arg_0]
		jmp	short loc_81EA
; ---------------------------------------------------------------------------
		jmp	short loc_81EA
; ---------------------------------------------------------------------------

loc_81C2:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+F6j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+10Cj
		lea	ecx, [ebp+var_70]
		call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
		lea	eax, [ebp+var_70]
		push	eax
		mov	ecx, [ebp+arg_0]
		call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)
		mov	ecx, [ebp+var_78]
		or	ecx, 1
		mov	[ebp+var_78], ecx
		lea	ecx, [ebp+var_70]
		call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
		mov	eax, [ebp+arg_0]

loc_81EA:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+E3j
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+E8j ...
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN18
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		pop	esi
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 7Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ	endp

; ---------------------------------------------------------------------------
		align 4
$LN18		dd 3			; DATA XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+1A2o
		dd offset $LN17_1
$LN17_1		dd 0FFFFFFD8h, 1Ch	; DATA XREF: .text$mn:0000821Co
		dd offset $LN14_0	; "_Str"
		dd 0FFFFFFB4h, 1Ch
		dd offset $LN15		; "_Str"
		db 90h
		db 3 dup(0FFh)
		dd 1Ch
		dd offset $LN16_0	; "_Nul"
$LN16_0		db '_Nul',0             ; DATA XREF: .text$mn:00008240o
$LN15		db '_Str',0             ; DATA XREF: .text$mn:00008234o
$LN14_0		db '_Str',0             ; DATA XREF: .text$mn:00008228o
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8254h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::basic_stringstream<char,	struct std::char_traits<char>, class std::allocator<char>>::str(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
		public ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z proc near
					; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Flush(void)+94p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_4]
		add	ecx, 18h
		call	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8284h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>> __thiscall std::basic_stringstream<char, struct std::char_traits<char>, class std::allocator<char>>::str(void)const
		public ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ proc	near
					; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Flush(void)+55p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	[ebp+var_8], 0
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_4]
		add	ecx, 18h
		call	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ	; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)
		mov	ecx, [ebp+var_8]
		or	ecx, 1
		mov	[ebp+var_8], ecx
		mov	eax, [ebp+arg_0]
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 82D0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static unsigned int __cdecl mozilla::detail::IntrinsicAddSub<unsigned	int, 2>::sub(struct std::atomic<unsigned int> &, unsigned int)
		public ?sub@?$IntrinsicAddSub@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@I@Z
?sub@?$IntrinsicAddSub@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@I@Z proc near
					; CODE XREF: mozilla::detail::IntrinsicIncDec<uint,2>::dec(std::atomic<uint> &)+9p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	5
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		call	?fetch_sub@atomic_uint@std@@QAEIIW4memory_order@2@@Z ; std::atomic_uint::fetch_sub(uint,std::memory_order)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?sub@?$IntrinsicAddSub@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@I@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 82ECh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall RefPtr<class mozilla::gfx::DrawTargetDual>::swap(class mozilla::gfx::DrawTargetDual *	&)
		public ?swap@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAEXAAPAVDrawTargetDual@gfx@mozilla@@@Z
?swap@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAEXAAPAVDrawTargetDual@gfx@mozilla@@@Z proc near
					; CODE XREF: RefPtr<mozilla::gfx::DrawTargetDual>::forget(void)+32p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_4]
		mov	ecx, [eax]
		mov	[edx], ecx
		mov	edx, [ebp+var_4]
		mov	eax, [ebp+var_8]
		mov	[edx], eax
		mov	esp, ebp
		pop	ebp
		retn	4
?swap@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAEXAAPAVDrawTargetDual@gfx@mozilla@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8324h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall RefPtr<class mozilla::gfx::SourceSurfaceDual>::swap(class mozilla::gfx::SourceSurfaceDual * &)
		public ?swap@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAEXAAPAVSourceSurfaceDual@gfx@mozilla@@@Z
?swap@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAEXAAPAVSourceSurfaceDual@gfx@mozilla@@@Z proc near
					; CODE XREF: RefPtr<mozilla::gfx::SourceSurfaceDual>::forget(void)+32p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_4]
		mov	ecx, [eax]
		mov	[edx], ecx
		mov	edx, [ebp+var_4]
		mov	eax, [ebp+var_8]
		mov	[edx], eax
		mov	esp, ebp
		pop	ebp
		retn	4
?swap@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAEXAAPAVSourceSurfaceDual@gfx@mozilla@@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 835Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct std::error_category *__cdecl std::system_category()
		public ?system_category@std@@YAABVerror_category@1@XZ
?system_category@std@@YAABVerror_category@1@XZ proc near
					; CODE XREF: std::_System_error_category::default_error_condition(int):loc_6C4Ep
		push	ebp
		mov	ebp, esp
		mov	eax, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_System_error_category std::_Error_objects<int>::_System_object
		pop	ebp
		retn
?system_category@std@@YAABVerror_category@1@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8368h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	mozilla::gfx::DrawTarget * __thiscall already_AddRefed<class mozilla::gfx::DrawTarget>::take(void)
		public ?take@?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAEPAVDrawTarget@gfx@mozilla@@XZ
?take@?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAEPAVDrawTarget@gfx@mozilla@@XZ proc near
					; CODE XREF: RefPtr<mozilla::gfx::DrawTarget>::RefPtr<mozilla::gfx::DrawTarget>(already_AddRefed<mozilla::gfx::DrawTarget> &&)+11p

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+var_4]
		mov	dword ptr [edx], 0
		mov	eax, [ebp+var_8]
		mov	esp, ebp
		pop	ebp
		retn
?take@?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAEPAVDrawTarget@gfx@mozilla@@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8398h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	mozilla::gfx::DrawTargetDual * __thiscall already_AddRefed<class mozilla::gfx::DrawTargetDual>::take(void)
		public ?take@?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAEPAVDrawTargetDual@gfx@mozilla@@XZ
?take@?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAEPAVDrawTargetDual@gfx@mozilla@@XZ proc near
					; CODE XREF: already_AddRefed<mozilla::gfx::DrawTarget>::already_AddRefed<mozilla::gfx::DrawTarget>(already_AddRefed<mozilla::gfx::DrawTargetDual> &&)+11p

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+var_4]
		mov	dword ptr [edx], 0
		mov	eax, [ebp+var_8]
		mov	esp, ebp
		pop	ebp
		retn
?take@?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAEPAVDrawTargetDual@gfx@mozilla@@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 83C8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	mozilla::gfx::SourceSurface * __thiscall already_AddRefed<class	mozilla::gfx::SourceSurface>::take(void)
		public ?take@?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAEPAVSourceSurface@gfx@mozilla@@XZ
?take@?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAEPAVSourceSurface@gfx@mozilla@@XZ proc	near
					; CODE XREF: RefPtr<mozilla::gfx::SourceSurface>::RefPtr<mozilla::gfx::SourceSurface>(already_AddRefed<mozilla::gfx::SourceSurface> &&)+11p

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+var_4]
		mov	dword ptr [edx], 0
		mov	eax, [ebp+var_8]
		mov	esp, ebp
		pop	ebp
		retn
?take@?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAEPAVSourceSurface@gfx@mozilla@@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 83F8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	mozilla::gfx::SourceSurfaceDual	* __thiscall already_AddRefed<class mozilla::gfx::SourceSurfaceDual>::take(void)
		public ?take@?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAEPAVSourceSurfaceDual@gfx@mozilla@@XZ
?take@?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAEPAVSourceSurfaceDual@gfx@mozilla@@XZ proc	near
					; CODE XREF: already_AddRefed<mozilla::gfx::SourceSurface>::already_AddRefed<mozilla::gfx::SourceSurface>(already_AddRefed<mozilla::gfx::SourceSurfaceDual> &&)+11p

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+var_4]
		mov	dword ptr [edx], 0
		mov	eax, [ebp+var_8]
		mov	esp, ebp
		pop	ebp
		retn
?take@?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAEPAVSourceSurfaceDual@gfx@mozilla@@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8428h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static char __cdecl std::char_traits<char>::to_char_type(int const &)
		public ?to_char_type@?$char_traits@D@std@@SADABH@Z
?to_char_type@?$char_traits@D@std@@SADABH@Z proc near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+131p
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+3C1p ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	al, [eax]
		pop	ebp
		retn
?to_char_type@?$char_traits@D@std@@SADABH@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8434h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static int __cdecl std::char_traits<char>::to_int_type(char const &)
		public ?to_int_type@?$char_traits@D@std@@SAHABD@Z
?to_int_type@?$char_traits@D@std@@SAHABD@Z proc	near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)+72p
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)+17Cp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		movzx	eax, byte ptr [eax]
		pop	ebp
		retn
?to_int_type@?$char_traits@D@std@@SAHABD@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8440h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; protected: virtual int __thiscall std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::underflow(void)
		public ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ proc near
					; DATA XREF: .rdata:000092FCo

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		push	edi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jnz	short loc_8475
		call	?eof@?$char_traits@D@std@@SAHXZ	; std::char_traits<char>::eof(void)
		jmp	loc_85C4
; ---------------------------------------------------------------------------
		jmp	loc_85C4
; ---------------------------------------------------------------------------

loc_8475:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)+24j
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, eax
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::egptr(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		cmp	esi, eax
		jnb	short loc_84C4
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax
		call	?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type(char const &)
		add	esp, 4
		jmp	loc_85C4
; ---------------------------------------------------------------------------
		jmp	loc_85C4
; ---------------------------------------------------------------------------

loc_84C4:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)+5Dj
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+3Ch]
		and	ecx, 4
		jnz	short loc_8529
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_8529
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, eax
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		cmp	esi, eax
		ja	short loc_8538
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+var_4]
		cmp	[edx+38h], eax
		ja	short loc_8538

loc_8529:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)+8Dj
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)+A3j
		call	?eof@?$char_traits@D@std@@SAHXZ	; std::char_traits<char>::eof(void)
		jmp	loc_85C4
; ---------------------------------------------------------------------------
		jmp	loc_85C4
; ---------------------------------------------------------------------------

loc_8538:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)+CDj
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)+E7j
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_4]
		cmp	[ecx+38h], eax
		jnb	short loc_856A
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	edx, [ebp+var_4]
		mov	[edx+38h], eax

loc_856A:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)+110j
		mov	esi, esp
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+38h]
		push	ecx
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		push	eax
		mov	edi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
		cmp	edi, esp
		call	__RTC_CheckEsp
		push	eax
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setg(char *,char *,char *)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		call	dword ptr ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax
		call	?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type(char const &)
		add	esp, 4

loc_85C4:				; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)+2Bj
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)+30j ...
		pop	edi
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 85D4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall std::error_code::value(std::error_code	*__hidden this)
		public ?value@error_code@std@@QBEHXZ
?value@error_code@std@@QBEHXZ proc near	; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+32p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	eax, [eax]
		mov	esp, ebp
		pop	ebp
		retn
?value@error_code@std@@QBEHXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 85ECh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall std::error_condition::value(std::error_condition *__hidden this)
		public ?value@error_condition@std@@QBEHXZ
?value@error_condition@std@@QBEHXZ proc	near
					; CODE XREF: std::error_condition::operator==(std::error_condition const &)+3Ap
					; std::error_condition::operator==(std::error_condition	const &)+44p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	eax, [eax]
		mov	esp, ebp
		pop	ebp
		retn
?value@error_condition@std@@QBEHXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 8604h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _MOZ_NoReturn
_MOZ_NoReturn	proc near		; CODE XREF: mozilla::gfx::DrawTarget::PopLayer(void)+40p
					; mozilla::gfx::DrawTarget::PushLayer(bool,float,mozilla::gfx::SourceSurface *,mozilla::gfx::Matrix const &,mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const &,bool)+40p
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
_MOZ_NoReturn	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 860Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _hypot
_hypot		proc near

var_14		= qword	ptr -14h
var_C		= qword	ptr -0Ch
arg_0		= qword	ptr  8
arg_8		= qword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, esp
		sub	esp, 8
		movsd	xmm0, [ebp+arg_8]
		movsd	[esp+0Ch+var_C], xmm0
		sub	esp, 8
		movsd	xmm0, [ebp+arg_0]
		movsd	[esp+14h+var_14], xmm0
		call	dword ptr ds:__imp___hypot
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_hypot		endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8648h
; COMDAT (pick associative to section at 22C8)
__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008658o
		dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
__ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z dd	19930522h, 1
					; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z+11o
		dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8674h
; COMDAT (pick associative to section at 264C)
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ dd	0FFFFFFFFh
					; DATA XREF: .xdata$x:00008684o
		dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ dd 19930522h, 1
					; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ+11o
		dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 86A0h
; COMDAT (pick associative to section at 2598)
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:000086B0o
		dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z	dd 19930522h, 1
					; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z+11o
		dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 86CCh
; COMDAT (pick associative to section at 24E8)
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:000086DCo
		dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z+11o
		dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 86F8h
; COMDAT (pick associative to section at 5E98)
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 dd offset $SG36821+8
					; DATA XREF: .xdata$x:00008780o
					; "n failure: %s, at %s:%d\n"
		dd 2 dup(0)
		dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 dd offset $SG36821+8
					; DATA XREF: .xdata$x:0000876Co
					; "n failure: %s, at %s:%d\n"
		dd 2 dup(0)
		dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z dd 0FFFFFFFFh, 0
					; DATA XREF: .xdata$x:00008740o
		dd 0FFFFFFFFh, 0
		dd 1, 0
		dd 1, 0
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z dd 19930522h,	4
					; DATA XREF: __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z+11o
		dd offset __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
		dd 2
		dd offset __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
		dd 3 dup(0)
		dd 1
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z dd	2 dup(2), 3, 1
					; DATA XREF: .xdata$x:00008748o
		dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
		dd 2 dup(0)
		dd 3, 1
		dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8784h
; COMDAT (pick associative to section at 3068)
__unwindtable$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008794o
		dd offset __unwindfunclet$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z$0
__ehfuncinfo$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z+11o
		dd offset __unwindtable$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 87B0h
; COMDAT (pick associative to section at 3AD8)
__unwindtable$??1SurfacePattern@gfx@mozilla@@UAE@XZ dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:000087C0o
		dd offset __unwindfunclet$??1SurfacePattern@gfx@mozilla@@UAE@XZ$0
__ehfuncinfo$??1SurfacePattern@gfx@mozilla@@UAE@XZ dd 19930522h, 1
					; DATA XREF: __ehhandler$??1SurfacePattern@gfx@mozilla@@UAE@XZ+11o
		dd offset __unwindtable$??1SurfacePattern@gfx@mozilla@@UAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 87DCh
; COMDAT (pick associative to section at 3994)
__unwindtable$??1SourceSurface@gfx@mozilla@@UAE@XZ dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:000087ECo
		dd offset __unwindfunclet$??1SourceSurface@gfx@mozilla@@UAE@XZ$0
__ehfuncinfo$??1SourceSurface@gfx@mozilla@@UAE@XZ dd 19930522h,	1
					; DATA XREF: __ehhandler$??1SourceSurface@gfx@mozilla@@UAE@XZ+11o
		dd offset __unwindtable$??1SourceSurface@gfx@mozilla@@UAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8808h
; COMDAT (pick associative to section at 2E74)
__unwindtable$??0SourceSurface@gfx@mozilla@@QAE@XZ dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008818o
		dd offset __unwindfunclet$??0SourceSurface@gfx@mozilla@@QAE@XZ$0
__ehfuncinfo$??0SourceSurface@gfx@mozilla@@QAE@XZ dd 19930522h,	1
					; DATA XREF: __ehhandler$??0SourceSurface@gfx@mozilla@@QAE@XZ+11o
		dd offset __unwindtable$??0SourceSurface@gfx@mozilla@@QAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8834h
; COMDAT (pick associative to section at 2954)
__unwindtable$??0DrawTarget@gfx@mozilla@@QAE@XZ	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:0000884Co
		dd offset __unwindfunclet$??0DrawTarget@gfx@mozilla@@QAE@XZ$0
		align 10h
		dd offset __unwindfunclet$??0DrawTarget@gfx@mozilla@@QAE@XZ$1
__ehfuncinfo$??0DrawTarget@gfx@mozilla@@QAE@XZ dd 19930522h, 2
					; DATA XREF: __ehhandler$??0DrawTarget@gfx@mozilla@@QAE@XZ+11o
		dd offset __unwindtable$??0DrawTarget@gfx@mozilla@@QAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8868h
; COMDAT (pick associative to section at 37D0)
__unwindtable$??1DrawTarget@gfx@mozilla@@UAE@XZ	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008878o
		dd offset __unwindfunclet$??1DrawTarget@gfx@mozilla@@UAE@XZ$0
__ehfuncinfo$??1DrawTarget@gfx@mozilla@@UAE@XZ dd 19930522h, 1
					; DATA XREF: __ehhandler$??1DrawTarget@gfx@mozilla@@UAE@XZ+11o
		dd offset __unwindtable$??1DrawTarget@gfx@mozilla@@UAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8894h
; COMDAT (pick associative to section at 4610)
__unwindtable$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:000088B4o
		dd offset __unwindfunclet$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$0
		align 10h
		dd offset __unwindfunclet$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$1
		dd 0FFFFFFFFh
		dd offset __unwindfunclet$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$1
__ehfuncinfo$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z dd 19930522h, 3
					; DATA XREF: __ehhandler$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z+11o
		dd offset __unwindtable$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 88D0h
; COMDAT (pick associative to section at 2F14)
__ehfuncinfo$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z	dd 19930522h, 7
					; DATA XREF: __ehhandler$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z+11o
		dd offset __unwindtable$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z
		dd 5 dup(0)
		dd 1
__unwindtable$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:000088D8o
		dd offset __unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$0
		align 10h
		dd offset __unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$1
		dd 1
		dd offset __unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$2
		align 10h
		dd offset __unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$2
		dd 3
		dd offset __unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$3
		dd 4
		dd offset __unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$4
		dd 3
		dd offset __unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$4
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 892Ch
; COMDAT (pick associative to section at 3A30)
__unwindtable$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008944o
		dd offset __unwindfunclet$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ$0
		align 8
		dd offset __unwindfunclet$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ$1
__ehfuncinfo$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ dd 19930522h, 2
					; DATA XREF: __ehhandler$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ+11o
		dd offset __unwindtable$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8960h
; COMDAT (pick associative to section at 2A38)
__unwindtable$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008980o
		dd offset __unwindfunclet$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$0
		dd 0
		dd offset __unwindfunclet$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$1
		dd 1
		dd offset __unwindfunclet$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$2
__ehfuncinfo$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z dd	19930522h, 3
					; DATA XREF: __ehhandler$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z+11o
		dd offset __unwindtable$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 899Ch
; COMDAT (pick associative to section at 5948)
__unwindtable$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:000089B4o
		dd offset __unwindfunclet$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$1
		align 8
		dd offset __unwindfunclet$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$0
__ehfuncinfo$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ dd	19930522h, 2
					; DATA XREF: __ehhandler$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ+11o
		dd offset __unwindtable$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 89D0h
__unwindtable$?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008A68o
		dd offset __unwindfunclet$?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z$0
__unwindtable$?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008A8Co
		dd offset __unwindfunclet$?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z$0
__unwindtable$?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008AB0o
		dd offset __unwindfunclet$?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0
__unwindtable$?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008AD4o
		dd offset __unwindfunclet$?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0
__unwindtable$?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008AF8o
		dd offset __unwindfunclet$?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0
__unwindtable$?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008B1Co
		dd offset __unwindfunclet$?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z$0
__unwindtable$?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008B40o
		dd offset __unwindfunclet$?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z$0
__unwindtable$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008A44o
		dd offset __unwindfunclet$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z$0
		dd 0
		dd offset __unwindfunclet$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z$1
__ehfuncinfo$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z dd	19930522h, 9
					; DATA XREF: __ehhandler$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z+14o
		dd offset __unwindtable$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z
		dd 5 dup(0)
		dd 1
__ehfuncinfo$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z dd 19930522h, 2
					; DATA XREF: __ehhandler$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z+1Eo
		dd offset __unwindtable$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z
		dd 5 dup(0)
		dd 1
__ehfuncinfo$?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z+1Eo
		dd offset __unwindtable$?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z
		align 20h
		dd 1
__ehfuncinfo$?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z+1Eo
		dd offset __unwindtable$?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z
		dd 5 dup(0)
		dd 1
__ehfuncinfo$?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z+1Eo
		dd offset __unwindtable$?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z
		dd 5 dup(0)
		dd 1
__ehfuncinfo$?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z+1Eo
		dd offset __unwindtable$?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z
		dd 5 dup(0)
		dd 1
__ehfuncinfo$?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z+1Eo
		dd offset __unwindtable$?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z
		dd 5 dup(0)
		dd 1
__ehfuncinfo$?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z+1Eo
		dd offset __unwindtable$?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z
		dd 5 dup(0)
		dd 1
__ehfuncinfo$?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z+1Eo
		dd offset __unwindtable$?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z
		dd 5 dup(0)
		dd 1
__unwindtable$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008A20o
		dd offset __unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$5
		align 8
		dd offset __unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$0
		dd 1
		dd offset __unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$1
		align 8
		dd offset __unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$1
		dd 3
		dd offset __unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$2
		dd 4
		dd offset __unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$3
		dd 3
		dd offset __unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$3
		dd 6
		dd offset __unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$4
		dd 6
		dd offset __unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$6
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8BA4h
; COMDAT (pick associative to section at 386C)
__unwindtable$??1DrawTargetDual@gfx@mozilla@@UAE@XZ dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008BBCo
		dd offset __unwindfunclet$??1DrawTargetDual@gfx@mozilla@@UAE@XZ$0
		align 10h
		dd offset __unwindfunclet$??1DrawTargetDual@gfx@mozilla@@UAE@XZ$1
__ehfuncinfo$??1DrawTargetDual@gfx@mozilla@@UAE@XZ dd 19930522h, 2
					; DATA XREF: __ehhandler$??1DrawTargetDual@gfx@mozilla@@UAE@XZ+11o
		dd offset __unwindtable$??1DrawTargetDual@gfx@mozilla@@UAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8BD8h
; COMDAT (pick associative to section at 1A84)
__unwindtable$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008BF8o
		dd offset __unwindfunclet$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$2
		dd 0
		dd offset __unwindfunclet$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$0
		dd 0
		dd offset __unwindfunclet$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$1
__ehfuncinfo$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z dd 19930522h, 3
					; DATA XREF: __ehhandler$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z+11o
		dd offset __unwindtable$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8C14h
; COMDAT (pick associative to section at 27BC)
__unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008C2Co
		dd offset __unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
		align 10h
		dd offset __unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1
__ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z dd 19930522h, 2
					; DATA XREF: __ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z+11o
		dd offset __unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8C48h
; COMDAT (pick associative to section at 26F0)
__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008C58o
		dd offset __unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
__ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z	dd 19930522h, 1
					; DATA XREF: __ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z+11o
		dd offset __unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8C74h
; COMDAT (pick associative to section at 2B14)
__unwindtable$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008C8Co
		dd offset __unwindfunclet$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z$0
		dd 0FFFFFFFFh
		dd offset __unwindfunclet$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z$1
__ehfuncinfo$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z dd 19930522h, 2
					; DATA XREF: __ehhandler$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z+11o
		dd offset __unwindtable$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8CA8h
; COMDAT (pick associative to section at 2094)
__unwindtable$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008CB8o
		dd offset __unwindfunclet$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z$0
__ehfuncinfo$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z	dd 19930522h, 1
					; DATA XREF: __ehhandler$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z+11o
		dd offset __unwindtable$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8CD4h
; COMDAT (pick associative to section at 3484)
__unwindtable$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008CE4o
		dd offset __unwindfunclet$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ$0
__ehfuncinfo$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ	dd 19930522h, 1
					; DATA XREF: __ehhandler$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ+11o
		dd offset __unwindtable$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8D00h
; COMDAT (pick associative to section at 4B78)
__unwindtable$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ dd	0FFFFFFFFh
					; DATA XREF: .xdata$x:00008D18o
		dd offset __unwindfunclet$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ$0
		dd 0
		dd offset __unwindfunclet$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ$1
__ehfuncinfo$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ dd 19930522h, 2
					; DATA XREF: __ehhandler$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ+1Bo
		dd offset __unwindtable$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8D34h
; COMDAT (pick associative to section at 191C)
__unwindtable$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008D54o
		dd offset __unwindfunclet$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$2
		align 10h
		dd offset __unwindfunclet$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$0
		align 8
		dd offset __unwindfunclet$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$1
__ehfuncinfo$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z dd 19930522h, 3
					; DATA XREF: __ehhandler$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z+11o
		dd offset __unwindtable$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8D70h
; COMDAT (pick associative to section at 14D8)
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 dd offset $SG36821+8
					; DATA XREF: .xdata$x:00008D90o
					; "n failure: %s, at %s:%d\n"
		dd 2 dup(0)
		dd offset __catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z dd 2 dup(1), 2, 1
					; DATA XREF: .xdata$x:00008DBCo
		dd offset __catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008DB4o
		dd offset __unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
		dd 4 dup(0)
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z dd 19930522h, 3
					; DATA XREF: __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z+14o
		dd offset __unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
		dd 1
		dd offset __tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
		dd 3 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8DD0h
; COMDAT (pick associative to section at 3324)
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008DE0o
		dd offset __unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z+11o
		dd offset __unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8DFCh
; COMDAT (pick associative to section at 1E14)
__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z dd	0FFFFFFFFh
					; DATA XREF: .xdata$x:00008E0Co
		dd offset __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
__ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z+11o
		dd offset __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 8E28h
; COMDAT (pick associative to section at 1D1C)
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00008E38o
		dd offset __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z+11o
		dd offset __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
		assume cs:_bss
		;org 8E54h
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
_allocator_arg	db ?
_piecewise_construct db	?
		align 4
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	byte public 'DATA' use32
		assume cs:_rdata
		;org 8E58h
; COMDAT (pick any)
		public ??_C@_00CNPNBAHC@?$AA@
; char `string'
??_C@_00CNPNBAHC@?$AA@ db 0		; DATA XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Flush(void):loc_4BF4o
					; mozilla::gfx::BasicLogger::OutputMessage(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,int,bool)+2Do
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8E5Ch
; COMDAT (pick largest)
		dd offset ??_R4error_category@std@@6B@ ; const std::error_category::`RTTI Complete Object Locator'
		public ??_7error_category@std@@6B@
; const	std::error_category::`vftable'
??_7error_category@std@@6B@ dd offset ??_Eerror_category@std@@UAEPAXI@Z
					; DATA XREF: std::error_category::error_category(void)+11o
					; std::error_category::~error_category(void)+11o
					; std::error_category::`vector deleting	destructor'(uint)
		dd offset __purecall
		dd offset __purecall
		dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
		dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
		dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z	; std::error_category::equivalent(int,std::error_condition const &)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8E78h
; COMDAT (pick largest)
		dd offset ??_R4_Generic_error_category@std@@6B@	; const	std::_Generic_error_category::`RTTI Complete Object Locator'
		public ??_7_Generic_error_category@std@@6B@
; const	std::_Generic_error_category::`vftable'
??_7_Generic_error_category@std@@6B@ dd	offset ??_E_Generic_error_category@std@@UAEPAXI@Z
					; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+19o
					; std::_Generic_error_category::`vector	deleting destructor'(uint)
		dd offset ?name@_Generic_error_category@std@@UBEPBDXZ ;	std::_Generic_error_category::name(void)
		dd offset ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
		dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
		dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
		dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z	; std::error_category::equivalent(int,std::error_condition const &)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8E94h
; COMDAT (pick any)
		public ??_C@_07DCLBNMLN@generic?$AA@
; `string'
??_C@_07DCLBNMLN@generic?$AA@ db 'generic',0
					; DATA XREF: std::_Generic_error_category::name(void)+Eo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8E9Ch
; COMDAT (pick any)
		public ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
; `string'
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ db 'unknown error',0
					; DATA XREF: std::_Generic_error_category::message(int):loc_7201o
					; std::_System_error_category::message(int):loc_72EDo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8EACh
; COMDAT (pick largest)
		dd offset ??_R4_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
		public ??_7_Iostream_error_category@std@@6B@
; const	std::_Iostream_error_category::`vftable'
??_7_Iostream_error_category@std@@6B@ dd offset	??_E_Iostream_error_category@std@@UAEPAXI@Z
					; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+19o
					; std::_Iostream_error_category::`vector deleting destructor'(uint)
		dd offset ?name@_Iostream_error_category@std@@UBEPBDXZ ; std::_Iostream_error_category::name(void)
		dd offset ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message(int)
		dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
		dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
		dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z	; std::error_category::equivalent(int,std::error_condition const &)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8EC8h
; COMDAT (pick any)
		public ??_C@_08LLGCOLLL@iostream?$AA@
; `string'
??_C@_08LLGCOLLL@iostream?$AA@ db 'iostream',0
					; DATA XREF: std::_Iostream_error_category::name(void)+Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8ED4h
; COMDAT (pick any)
		public ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
; char `string'[]
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	db 'iostream stream error',0
					; DATA XREF: std::_Iostream_error_category::message(int)+24o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8EECh
; COMDAT (pick largest)
		dd offset ??_R4_System_error_category@std@@6B@ ; const std::_System_error_category::`RTTI Complete Object Locator'
		public ??_7_System_error_category@std@@6B@
; const	std::_System_error_category::`vftable'
??_7_System_error_category@std@@6B@ dd offset ??_E_System_error_category@std@@UAEPAXI@Z
					; DATA XREF: std::_System_error_category::_System_error_category(void)+19o
					; std::_System_error_category::`vector deleting	destructor'(uint)
		dd offset ?name@_System_error_category@std@@UBEPBDXZ ; std::_System_error_category::name(void)
		dd offset ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message(int)
		dd offset ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition(int)
		dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
		dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z	; std::error_category::equivalent(int,std::error_condition const &)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8F08h
; COMDAT (pick any)
		public ??_C@_06FHFOAHML@system?$AA@
; `string'
??_C@_06FHFOAHML@system?$AA@ db	'system',0
					; DATA XREF: std::_System_error_category::name(void)+Eo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 8F10h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
		public ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A dd ?
					; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o
					; `dynamic atexit destructor for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o ...
_bss		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 8F14h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
		public ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
; std::_Iostream_error_category	std::_Error_objects<int>::_Iostream_object
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A dd ?
					; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
					; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
_bss		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 8F18h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
		public ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
; std::_System_error_category std::_Error_objects<int>::_System_object
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A dd	?
					; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o
					; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o ...
_bss		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 8F1Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
		public ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
; std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A dd ?
					; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+8o
_bss		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 8F20h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
		public ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
; std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A dd ?
					; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+8o
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 8F24h
; COMDAT (pick any)
		public ??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
; wchar_t `string'
??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
					; DATA XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+7Do
					; std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+B7o ...
		unicode	0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
		unicode	0, <clude\xatomic.h>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8FB8h
; COMDAT (pick any)
		public ??_C@_1CK@BEGEBJJG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@
; wchar_t `string'
??_C@_1CK@BEGEBJJG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@:
					; DATA XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+82o
					; std::_Atomic_store_4(ulong volatile *,ulong,std::memory_order)+71o
		unicode	0, <Invalid memory_order>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 8FE4h
; COMDAT (pick any)
		public ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
; `string'
??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ db 'Standard C++ Libraries Invalid Argument',0
					; DATA XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+97o
					; std::_Atomic_store_4(ulong volatile *,ulong,std::memory_order)+86o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 900Ch
; COMDAT (pick any)
		public ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
; `string'
??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@:
					; DATA XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+A6o
					; std::_Atomic_store_4(ulong volatile *,ulong,std::memory_order)+95o
		unicode	0, <"Standard C++ Libraries Invalid Argument" && 0>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 906Ch
; COMDAT (pick any)
		public ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
; `string'
??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@:
					; DATA XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+ABo
					; std::_Atomic_store_4(ulong volatile *,ulong,std::memory_order)+9Ao
		unicode	0, <%s>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9074h
; COMDAT (pick any)
		public ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
; `string'
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@:
					; DATA XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+E7o
					; std::_Atomic_store_4(ulong volatile *,ulong,std::memory_order)+D6o
		unicode	0, <"invalid argument">,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 909Ch
; COMDAT (pick any)
		public ??_C@_1CK@BEBCCGEN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAs?$AAt?$AAo?$AAr?$AAe?$AA_?$AA4?$AA?$AA@
; `string'
??_C@_1CK@BEBCCGEN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAs?$AAt?$AAo?$AAr?$AAe?$AA_?$AA4?$AA?$AA@:
					; DATA XREF: std::_Atomic_store_4(ulong	volatile *,ulong,std::memory_order)+D1o
		unicode	0, <std::_Atomic_store_4>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 90C8h
; COMDAT (pick any)
		public ??_C@_1DC@FMPHIJPC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAf?$AAe?$AAt?$AAc?$AAh?$AA_?$AAa?$AAd?$AAd?$AA_?$AA4?$AA?$AA@
; `string'
??_C@_1DC@FMPHIJPC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAf?$AAe?$AAt?$AAc?$AAh?$AA_?$AAa?$AAd?$AAd?$AA_?$AA4?$AA?$AA@:
					; DATA XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+E2o
		unicode	0, <std::_Atomic_fetch_add_4>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 90FCh
; COMDAT (pick largest)
		dd offset ??_R4Pattern@gfx@mozilla@@6B@	; const	mozilla::gfx::Pattern::`RTTI Complete Object Locator'
		public ??_7Pattern@gfx@mozilla@@6B@
; const	mozilla::gfx::Pattern::`vftable'
??_7Pattern@gfx@mozilla@@6B@ dd	offset ??_EPattern@gfx@mozilla@@UAEPAXI@Z
					; DATA XREF: mozilla::gfx::Pattern::Pattern(void)+11o
					; mozilla::gfx::Pattern::~Pattern(void)+11o
					; mozilla::gfx::Pattern::`vector deleting destructor'(uint)
		dd offset __purecall
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9108h
; COMDAT (pick largest)
		dd offset ??_R4SurfacePattern@gfx@mozilla@@6B@ ; const mozilla::gfx::SurfacePattern::`RTTI Complete Object Locator'
		public ??_7SurfacePattern@gfx@mozilla@@6B@
; const	mozilla::gfx::SurfacePattern::`vftable'
??_7SurfacePattern@gfx@mozilla@@6B@ dd offset ??_ESurfacePattern@gfx@mozilla@@UAEPAXI@Z
					; DATA XREF: mozilla::gfx::SurfacePattern::SurfacePattern(mozilla::gfx::SourceSurface *,mozilla::gfx::ExtendMode,mozilla::gfx::Matrix const &,mozilla::gfx::Filter,mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const	&)+3Fo
					; mozilla::gfx::SurfacePattern::`vector	deleting destructor'(uint)
		dd offset ?GetType@SurfacePattern@gfx@mozilla@@UBE?AW4PatternType@23@XZ	; mozilla::gfx::SurfacePattern::GetType(void)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9114h
; COMDAT (pick largest)
		dd offset ??_R4SourceSurface@gfx@mozilla@@6B@ ;	const mozilla::gfx::SourceSurface::`RTTI Complete Object Locator'
		public ??_7SourceSurface@gfx@mozilla@@6B@
; const	mozilla::gfx::SourceSurface::`vftable'
??_7SourceSurface@gfx@mozilla@@6B@ dd offset ??_ESourceSurface@gfx@mozilla@@UAEPAXI@Z
					; DATA XREF: mozilla::gfx::SourceSurface::SourceSurface(void)+42o
					; mozilla::gfx::SourceSurface::~SourceSurface(void)+30o
					; mozilla::gfx::SourceSurface::`vector deleting	destructor'(uint)
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
		dd offset ?IsValid@SourceSurface@gfx@mozilla@@UBE_NXZ ;	mozilla::gfx::SourceSurface::IsValid(void)
		dd offset __purecall
		dd offset ?GetNativeSurface@SourceSurface@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z ; mozilla::gfx::SourceSurface::GetNativeSurface(mozilla::gfx::NativeSurfaceType)
		dd offset ?GuaranteePersistance@SourceSurface@gfx@mozilla@@MAEXXZ ; mozilla::gfx::SourceSurface::GuaranteePersistance(void)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9138h
; COMDAT (pick largest)
		dd offset ??_R4DrawTarget@gfx@mozilla@@6B@ ; const mozilla::gfx::DrawTarget::`RTTI Complete Object Locator'
		public ??_7DrawTarget@gfx@mozilla@@6B@
; const	mozilla::gfx::DrawTarget::`vftable'
??_7DrawTarget@gfx@mozilla@@6B@	dd offset ??_EDrawTarget@gfx@mozilla@@UAEPAXI@Z
					; DATA XREF: mozilla::gfx::DrawTarget::DrawTarget(void)+42o
					; mozilla::gfx::DrawTarget::~DrawTarget(void)+30o
					; mozilla::gfx::DrawTarget::`vector deleting destructor'(uint)
		dd offset ?IsValid@DrawTarget@gfx@mozilla@@UBE_NXZ ; mozilla::gfx::DrawTarget::IsValid(void)
		dd offset __purecall
		dd offset __purecall
		dd offset ?IsRecording@DrawTarget@gfx@mozilla@@UBE_NXZ ; mozilla::gfx::DrawTarget::IsRecording(void)
		dd offset __purecall
		dd offset __purecall
		dd offset ?LockBits@DrawTarget@gfx@mozilla@@UAE_NPAPAEPAU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@PAHPAW4SurfaceFormat@23@PAU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z ; mozilla::gfx::DrawTarget::LockBits(uchar * *,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> *,int	*,mozilla::gfx::SurfaceFormat *,mozilla::gfx::IntPointTyped<mozilla::gfx::UnknownUnits>	*)
		dd offset ?ReleaseBits@DrawTarget@gfx@mozilla@@UAEXPAE@Z ; mozilla::gfx::DrawTarget::ReleaseBits(uchar *)
		dd offset __purecall
		dd offset ?DrawCapturedDT@DrawTarget@gfx@mozilla@@UAEXPAVDrawTargetCapture@23@ABVMatrix@23@@Z ;	mozilla::gfx::DrawTarget::DrawCapturedDT(mozilla::gfx::DrawTargetCapture *,mozilla::gfx::Matrix	const &)
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
		dd offset ?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z ;	mozilla::gfx::DrawTarget::CopyRect(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::IntPointTyped<mozilla::gfx::UnknownUnits> const	&)
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
		dd offset ?PushLayer@DrawTarget@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z ; mozilla::gfx::DrawTarget::PushLayer(bool,float,mozilla::gfx::SourceSurface *,mozilla::gfx::Matrix const &,mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const &,bool)
		dd offset ?PopLayer@DrawTarget@gfx@mozilla@@UAEXXZ ; mozilla::gfx::DrawTarget::PopLayer(void)
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
		dd offset ?CreateCaptureDT@DrawTarget@gfx@mozilla@@UAE?AU?$already_AddRefed@VDrawTargetCapture@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z ; mozilla::gfx::DrawTarget::CreateCaptureDT(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const &)
		dd offset ?CreateShadowDrawTarget@DrawTarget@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@M@Z ;	mozilla::gfx::DrawTarget::CreateShadowDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>	const &,mozilla::gfx::SurfaceFormat,float)
		dd offset __purecall
		dd offset __purecall
		dd offset __purecall
		dd offset ?SetTransform@DrawTarget@gfx@mozilla@@UAEXABVMatrix@23@@Z ; mozilla::gfx::DrawTarget::SetTransform(mozilla::gfx::Matrix const	&)
		dd offset ?GetNativeSurface@DrawTarget@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z ; mozilla::gfx::DrawTarget::GetNativeSurface(mozilla::gfx::NativeSurfaceType)
		dd offset ?IsDualDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ ; mozilla::gfx::DrawTarget::IsDualDrawTarget(void)
		dd offset ?IsTiledDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ ; mozilla::gfx::DrawTarget::IsTiledDrawTarget(void)
		dd offset ?SupportsRegionClipping@DrawTarget@gfx@mozilla@@UBE_NXZ ; mozilla::gfx::DrawTarget::SupportsRegionClipping(void)
		dd offset ?IsCurrentGroupOpaque@DrawTarget@gfx@mozilla@@UAE_NXZ	; mozilla::gfx::DrawTarget::IsCurrentGroupOpaque(void)
		dd offset ?SetPermitSubpixelAA@DrawTarget@gfx@mozilla@@UAEX_N@Z	; mozilla::gfx::DrawTarget::SetPermitSubpixelAA(bool)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 91F4h
; COMDAT (pick largest)
		dd offset ??_R4SourceSurfaceDual@gfx@mozilla@@6B@ ; const mozilla::gfx::SourceSurfaceDual::`RTTI Complete Object Locator'
		public ??_7SourceSurfaceDual@gfx@mozilla@@6B@
; const	mozilla::gfx::SourceSurfaceDual::`vftable'
??_7SourceSurfaceDual@gfx@mozilla@@6B@ dd offset ??_ESourceSurfaceDual@gfx@mozilla@@UAEPAXI@Z
					; DATA XREF: mozilla::gfx::SourceSurfaceDual::SourceSurfaceDual(mozilla::gfx::DrawTarget *,mozilla::gfx::DrawTarget *)+55o
					; mozilla::gfx::SourceSurfaceDual::`vector deleting destructor'(uint)
		dd offset ?GetType@SourceSurfaceDual@gfx@mozilla@@UBE?AW4SurfaceType@23@XZ ; mozilla::gfx::SourceSurfaceDual::GetType(void)
		dd offset ?GetSize@SourceSurfaceDual@gfx@mozilla@@UBE?AU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@XZ ; mozilla::gfx::SourceSurfaceDual::GetSize(void)
		dd offset ?GetFormat@SourceSurfaceDual@gfx@mozilla@@UBE?AW4SurfaceFormat@23@XZ ; mozilla::gfx::SourceSurfaceDual::GetFormat(void)
		dd offset ?IsValid@SourceSurface@gfx@mozilla@@UBE_NXZ ;	mozilla::gfx::SourceSurface::IsValid(void)
		dd offset ?GetDataSurface@SourceSurfaceDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@XZ ; mozilla::gfx::SourceSurfaceDual::GetDataSurface(void)
		dd offset ?GetNativeSurface@SourceSurface@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z ; mozilla::gfx::SourceSurface::GetNativeSurface(mozilla::gfx::NativeSurfaceType)
		dd offset ?GuaranteePersistance@SourceSurface@gfx@mozilla@@MAEXXZ ; mozilla::gfx::SourceSurface::GuaranteePersistance(void)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9218h
; COMDAT (pick largest)
		dd offset ??_R4DrawTargetDual@gfx@mozilla@@6B@ ; const mozilla::gfx::DrawTargetDual::`RTTI Complete Object Locator'
		public ??_7DrawTargetDual@gfx@mozilla@@6B@
; const	mozilla::gfx::DrawTargetDual::`vftable'
??_7DrawTargetDual@gfx@mozilla@@6B@ dd offset ??_EDrawTargetDual@gfx@mozilla@@UAEPAXI@Z
					; DATA XREF: mozilla::gfx::DrawTargetDual::DrawTargetDual(mozilla::gfx::DrawTarget *,mozilla::gfx::DrawTarget *)+3Fo
					; mozilla::gfx::DrawTargetDual::`vector	deleting destructor'(uint)
		dd offset ?IsValid@DrawTarget@gfx@mozilla@@UBE_NXZ ; mozilla::gfx::DrawTarget::IsValid(void)
		dd offset ?GetType@DrawTargetDual@gfx@mozilla@@UBE?AW4DrawTargetType@23@XZ ; mozilla::gfx::DrawTargetDual::GetType(void)
		dd offset ?GetBackendType@DrawTargetDual@gfx@mozilla@@UBE?AW4BackendType@23@XZ ; mozilla::gfx::DrawTargetDual::GetBackendType(void)
		dd offset ?IsRecording@DrawTarget@gfx@mozilla@@UBE_NXZ ; mozilla::gfx::DrawTarget::IsRecording(void)
		dd offset ?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ ; mozilla::gfx::DrawTargetDual::Snapshot(void)
		dd offset ?GetSize@DrawTargetDual@gfx@mozilla@@UAE?AU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@XZ ;	mozilla::gfx::DrawTargetDual::GetSize(void)
		dd offset ?LockBits@DrawTarget@gfx@mozilla@@UAE_NPAPAEPAU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@PAHPAW4SurfaceFormat@23@PAU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z ; mozilla::gfx::DrawTarget::LockBits(uchar * *,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> *,int	*,mozilla::gfx::SurfaceFormat *,mozilla::gfx::IntPointTyped<mozilla::gfx::UnknownUnits>	*)
		dd offset ?ReleaseBits@DrawTarget@gfx@mozilla@@UAEXPAE@Z ; mozilla::gfx::DrawTarget::ReleaseBits(uchar *)
		dd offset ?Flush@DrawTargetDual@gfx@mozilla@@UAEXXZ ; mozilla::gfx::DrawTargetDual::Flush(void)
		dd offset ?DrawCapturedDT@DrawTarget@gfx@mozilla@@UAEXPAVDrawTargetCapture@23@ABVMatrix@23@@Z ;	mozilla::gfx::DrawTarget::DrawCapturedDT(mozilla::gfx::DrawTargetCapture *,mozilla::gfx::Matrix	const &)
		dd offset ?DrawSurface@DrawTargetDual@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@1ABUDrawSurfaceOptions@23@ABUDrawOptions@23@@Z ; mozilla::gfx::DrawTargetDual::DrawSurface(mozilla::gfx::SourceSurface *,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::DrawSurfaceOptions	const &,mozilla::gfx::DrawOptions const	&)
		dd offset ?DrawFilter@DrawTargetDual@gfx@mozilla@@UAEXPAVFilterNode@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z ; mozilla::gfx::DrawTargetDual::DrawFilter(mozilla::gfx::FilterNode *,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::DrawOptions	const &)
		dd offset ?DrawSurfaceWithShadow@DrawTargetDual@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUColor@23@1MW4CompositionOp@23@@Z ; mozilla::gfx::DrawTargetDual::DrawSurfaceWithShadow(mozilla::gfx::SourceSurface *,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>	const &,mozilla::gfx::Color const &,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float> const &,float,mozilla::gfx::CompositionOp)
		dd offset ?ClearRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z ; mozilla::gfx::DrawTargetDual::ClearRect(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &)
		dd offset ?CopySurface@DrawTargetDual@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z ; mozilla::gfx::DrawTargetDual::CopySurface(mozilla::gfx::SourceSurface *,mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::IntPointTyped<mozilla::gfx::UnknownUnits> const	&)
		dd offset ?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z ;	mozilla::gfx::DrawTarget::CopyRect(mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const	&,mozilla::gfx::IntPointTyped<mozilla::gfx::UnknownUnits> const	&)
		dd offset ?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z ;	mozilla::gfx::DrawTargetDual::FillRect(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::Pattern const &,mozilla::gfx::DrawOptions const &)
		dd offset ?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z ; mozilla::gfx::DrawTargetDual::StrokeRect(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::Pattern const &,mozilla::gfx::StrokeOptions const &,mozilla::gfx::DrawOptions const &)
		dd offset ?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z ;	mozilla::gfx::DrawTargetDual::StrokeLine(mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::Pattern const &,mozilla::gfx::StrokeOptions const &,mozilla::gfx::DrawOptions const &)
		dd offset ?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z ; mozilla::gfx::DrawTargetDual::Stroke(mozilla::gfx::Path const *,mozilla::gfx::Pattern const &,mozilla::gfx::StrokeOptions	const &,mozilla::gfx::DrawOptions const	&)
		dd offset ?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z ;	mozilla::gfx::DrawTargetDual::Fill(mozilla::gfx::Path const *,mozilla::gfx::Pattern const &,mozilla::gfx::DrawOptions const &)
		dd offset ?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z	; mozilla::gfx::DrawTargetDual::FillGlyphs(mozilla::gfx::ScaledFont *,mozilla::gfx::GlyphBuffer	const &,mozilla::gfx::Pattern const &,mozilla::gfx::DrawOptions	const &,mozilla::gfx::GlyphRenderingOptions const *)
		dd offset ?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z ; mozilla::gfx::DrawTargetDual::Mask(mozilla::gfx::Pattern const &,mozilla::gfx::Pattern const &,mozilla::gfx::DrawOptions const &)
		dd offset ?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z ; mozilla::gfx::DrawTargetDual::MaskSurface(mozilla::gfx::Pattern const &,mozilla::gfx::SourceSurface *,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::DrawOptions const &)
		dd offset ?PushClip@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@@Z ; mozilla::gfx::DrawTargetDual::PushClip(mozilla::gfx::Path const *)
		dd offset ?PushClipRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z ; mozilla::gfx::DrawTargetDual::PushClipRect(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &)
		dd offset ?PopClip@DrawTargetDual@gfx@mozilla@@UAEXXZ ;	mozilla::gfx::DrawTargetDual::PopClip(void)
		dd offset ?PushLayer@DrawTargetDual@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z ;	mozilla::gfx::DrawTargetDual::PushLayer(bool,float,mozilla::gfx::SourceSurface *,mozilla::gfx::Matrix const &,mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const &,bool)
		dd offset ?PopLayer@DrawTargetDual@gfx@mozilla@@UAEXXZ ; mozilla::gfx::DrawTargetDual::PopLayer(void)
		dd offset ?CreateSourceSurfaceFromData@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z ; mozilla::gfx::DrawTargetDual::CreateSourceSurfaceFromData(uchar *,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>	const &,int,mozilla::gfx::SurfaceFormat)
		dd offset ?OptimizeSourceSurface@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z ; mozilla::gfx::DrawTargetDual::OptimizeSourceSurface(mozilla::gfx::SourceSurface *)
		dd offset ?CreateSourceSurfaceFromNativeSurface@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z ; mozilla::gfx::DrawTargetDual::CreateSourceSurfaceFromNativeSurface(mozilla::gfx::NativeSurface const &)
		dd offset ?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z ; mozilla::gfx::DrawTargetDual::CreateSimilarDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const &,mozilla::gfx::SurfaceFormat)
		dd offset ?CreateCaptureDT@DrawTarget@gfx@mozilla@@UAE?AU?$already_AddRefed@VDrawTargetCapture@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z ; mozilla::gfx::DrawTarget::CreateCaptureDT(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits> const &)
		dd offset ?CreateShadowDrawTarget@DrawTarget@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@M@Z ;	mozilla::gfx::DrawTarget::CreateShadowDrawTarget(mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>	const &,mozilla::gfx::SurfaceFormat,float)
		dd offset ?CreatePathBuilder@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z ; mozilla::gfx::DrawTargetDual::CreatePathBuilder(mozilla::gfx::FillRule)
		dd offset ?CreateGradientStops@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z ; mozilla::gfx::DrawTargetDual::CreateGradientStops(mozilla::gfx::GradientStop	*,uint,mozilla::gfx::ExtendMode)
		dd offset ?CreateFilter@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z ; mozilla::gfx::DrawTargetDual::CreateFilter(mozilla::gfx::FilterType)
		dd offset ?SetTransform@DrawTargetDual@gfx@mozilla@@UAEXABVMatrix@23@@Z	; mozilla::gfx::DrawTargetDual::SetTransform(mozilla::gfx::Matrix const	&)
		dd offset ?GetNativeSurface@DrawTargetDual@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z	; mozilla::gfx::DrawTargetDual::GetNativeSurface(mozilla::gfx::NativeSurfaceType)
		dd offset ?IsDualDrawTarget@DrawTargetDual@gfx@mozilla@@UBE_NXZ	; mozilla::gfx::DrawTargetDual::IsDualDrawTarget(void)
		dd offset ?IsTiledDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ ; mozilla::gfx::DrawTarget::IsTiledDrawTarget(void)
		dd offset ?SupportsRegionClipping@DrawTarget@gfx@mozilla@@UBE_NXZ ; mozilla::gfx::DrawTarget::SupportsRegionClipping(void)
		dd offset ?IsCurrentGroupOpaque@DrawTargetDual@gfx@mozilla@@UAE_NXZ ; mozilla::gfx::DrawTargetDual::IsCurrentGroupOpaque(void)
		dd offset ?SetPermitSubpixelAA@DrawTarget@gfx@mozilla@@UAEX_N@Z	; mozilla::gfx::DrawTarget::SetPermitSubpixelAA(bool)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 92D4h
; COMDAT (pick any)
		public ??_C@_01EEMJAFIK@?6?$AA@
; `string'
??_C@_01EEMJAFIK@?6?$AA@ db 0Ah, 0	; DATA XREF: mozilla::gfx::BasicLogger::OutputMessage(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&,int,bool):loc_535Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 92D8h
; COMDAT (pick any)
		public ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
; char `string'[]
??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@ db '%s%s',0
					; DATA XREF: mozilla::gfx::BasicLogger::OutputMessage(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&,int,bool)+4Co
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 92E0h
; COMDAT (pick largest)
		dd offset ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; const std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`RTTI Complete Object Locator'
		public ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
; const	std::basic_stringbuf<char, struct std::char_traits<char>, class	std::allocator<char>>::`vftable'
??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@	dd offset ??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
					; DATA XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(int)+4Ao
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(void)+12o
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`vector deleting destructor'(uint)
		dd offset ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Lock(void)
		dd offset ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Unlock(void)
		dd offset ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)
		dd offset ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)
		dd offset ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ; std::basic_streambuf<char,std::char_traits<char>>::showmanyc(void)
		dd offset ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)
		dd offset ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char>>::uflow(void)
		dd offset ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ;	std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)
		dd offset ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ;	std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)
		dd offset ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)
		dd offset ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)
		dd offset ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ; std::basic_streambuf<char,std::char_traits<char>>::setbuf(char *,__int64)
		dd offset ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ;	std::basic_streambuf<char,std::char_traits<char>>::sync(void)
		dd offset ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<char,std::char_traits<char>>::imbue(std::locale const	&)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9320h
; COMDAT (pick largest)
		dd offset ??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ;	const std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`RTTI Complete	Object Locator'
		public ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
; const	std::basic_stringstream<char, struct std::char_traits<char>, class std::allocator<char>>::`vftable'
??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ dd offset ??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
					; DATA XREF: std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>(int)+A9o
					; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream<char,std::char_traits<char>,std::allocator<char>>(void)+1Bo
_rdata		ends			; [thunk]:std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`vector deleting destructor'`vtordisp{4294967292,0}' (uint)

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9328h
; COMDAT (pick any)
		public ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
; const	std::basic_stringstream<char, struct std::char_traits<char>, class std::allocator<char>>::`vbtable'{for `std::basic_istream<char, struct std::char_traits<char>>'}
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ dd	0
					; DATA XREF: std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>(int)+47o
		dd offset $SG36827+0Ch	; "H(%s) at %s:%d\n"
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9330h
; COMDAT (pick any)
		public ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
; const	std::basic_stringstream<char, struct std::char_traits<char>, class std::allocator<char>>::`vbtable'{for `std::basic_ostream<char, struct std::char_traits<char>>'}
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ dd	0
					; DATA XREF: std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>(int)+50o
		dd offset $SG36821+20h	; ""
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 9338h
; COMDAT (pick any)
		public ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
; wchar_t `string'
??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
					; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+13o
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+19o
		unicode	0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
		unicode	0, <clude\xstring>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 93C8h
; COMDAT (pick any)
		public ??_C@_04HGKILAJC@?$FLGFX?$AA@
; char `string'[]
??_C@_04HGKILAJC@?$FLGFX?$AA@ db '[GFX',0
					; DATA XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason)+91o
					; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason)+D4o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 93D0h
; COMDAT (pick any)
		public ??_C@_01JOAMLHOP@?9?$AA@
; char `string'[]
??_C@_01JOAMLHOP@?9?$AA@ db 2Dh, 0	; DATA XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason):loc_508Bo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 93D4h
; COMDAT (pick any)
		public ??_C@_01CLKCMJKC@?5?$AA@
; char `string'[]
??_C@_01CLKCMJKC@?5?$AA@ db 20h, 0	; DATA XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason)+13Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 93D8h
; COMDAT (pick any)
		public ??_C@_03FLKELDHI@?$FN?3?5?$AA@
; char `string'[]
??_C@_03FLKELDHI@?$FN?3?5?$AA@ dd 203A5Dh
					; DATA XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::Init(int,bool,mozilla::gfx::LogReason):loc_5136o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 93DCh
; COMDAT (pick any)
		public ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
; char `string'[]
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ db 'string too long',0
					; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+11o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 93ECh
; COMDAT (pick any)
		public ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
; char `string'[]
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ db 'invalid string position',0
					; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+11o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9404h
; COMDAT (pick any)
		public ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
; wchar_t `string'
??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@:
					; DATA XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+14o
		unicode	0, <invalid null pointer>,0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9430h
; COMDAT (pick any)
		public ??_C@_01PKGAHCOL@?$CJ?$AA@
; char `string'[]
??_C@_01PKGAHCOL@?$CJ?$AA@ db 29h, 0	; DATA XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::operator<<<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>>(mozilla::gfx::BaseSize<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>> const &):loc_1464o
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9434h
; COMDAT (pick any)
		public ??_C@_01IHBHIGKO@?0?$AA@
; `string'
??_C@_01IHBHIGKO@?0?$AA@ db 2Ch, 0	; DATA XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::operator<<<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>>(mozilla::gfx::BaseSize<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>> const &)+4Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 9438h
; COMDAT (pick any)
		public ??_C@_05EHMGNGKA@Size?$CI?$AA@
; char `string'[]
??_C@_05EHMGNGKA@Size?$CI?$AA@ db 'Size(',0
					; DATA XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::operator<<<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>>(mozilla::gfx::BaseSize<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>> const &)+5Bo
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9440h
; COMDAT (pick any)
		public ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
; const	std::basic_stringbuf<char, struct std::char_traits<char>, class	std::allocator<char>>::`RTTI Complete Object Locator'
??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ dd 3 dup(0)
					; DATA XREF: .rdata:000092E0o
		dd offset ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>> `RTTI Type Descriptor'
		dd offset ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data$r		segment	para public 'DATA' use32
		assume cs:_data$r
		;org 9454h
; COMDAT (pick any)
		public ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
; class	std::basic_stringbuf<char, struct std::char_traits<char>, class	std::allocator<char>> `RTTI Type Descriptor'
??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:0000944Co
					; .rdata$r:std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?av?Basic_str	db '.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@st'
		db 'd@@',0
		align 4
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 94A4h
; COMDAT (pick any)
		public ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
; std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::`RTTI Class Hierarchy Descriptor'
??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 dd 2 dup(0)
					; DATA XREF: .rdata$r:00009450o
					; .rdata$r:000094D8o
		dd 2
		dd offset ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 94B4h
; COMDAT (pick any)
		public ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
; std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::`RTTI Base Class Array'
??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 dd offset ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
					; DATA XREF: .rdata$r:000094B0o
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`RTTI	Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char>>::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 94C0h
; COMDAT (pick any)
		public ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
; std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::`RTTI Base Class Descriptor at	(0, -1,	0, 64)'
??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8	dd offset ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
					; DATA XREF: .rdata$r:std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`RTTI Base Class Array'o
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>> `RTTI Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 94DCh
; COMDAT (pick any)
		public ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
; std::basic_streambuf<char, struct std::char_traits<char>>::`RTTI Base	Class Descriptor at (0,	-1, 0, 64)'
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 dd offset ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
					; DATA XREF: .rdata$r:000094B8o
					; .rdata$r:std::basic_streambuf<char,std::char_traits<char>>::`RTTI Base Class Array'o
					; std::basic_streambuf<char,std::char_traits<char>> `RTTI Type Descriptor'
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8	; std::basic_streambuf<char,std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 94F8h
; COMDAT (pick any)
		public ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
; class	std::basic_streambuf<char, struct std::char_traits<char>> `RTTI	Type Descriptor'
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:std::basic_streambuf<char,std::char_traits<char>>::`RTTI Base Class Descriptor at	(0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?av?Basic_s_0	db '.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@',0
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9534h
; COMDAT (pick any)
		public ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
; std::basic_streambuf<char, struct std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 dd 2 dup(0)
					; DATA XREF: .rdata$r:000094F4o
		dd 1
		dd offset ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8	; std::basic_streambuf<char,std::char_traits<char>>::`RTTI Base	Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9544h
; COMDAT (pick any)
		public ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
; std::basic_streambuf<char, struct std::char_traits<char>>::`RTTI Base	Class Array'
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 dd offset	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
					; DATA XREF: .rdata$r:00009540o
					; std::basic_streambuf<char,std::char_traits<char>>::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 954Ch
; COMDAT (pick any)
		public ??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
; const	std::basic_stringstream<char, struct std::char_traits<char>, class std::allocator<char>>::`RTTI	Complete Object	Locator'
??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ dd 0
					; DATA XREF: .rdata:00009320o
		dd offset $SG36827+0Ch	; "H(%s) at %s:%d\n"
		dd 4
		dd offset ??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8	; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>> `RTTI Type Descriptor'
		dd offset ??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data$r		segment	para public 'DATA' use32
		assume cs:_data$r
		;org 9560h
; COMDAT (pick any)
		public ??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
; class	std::basic_stringstream<char, struct std::char_traits<char>, class std::allocator<char>> `RTTI Type Descriptor'
??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 dd offset	??_7type_info@@6B@
					; DATA XREF: .rdata$r:00009558o
					; .rdata$r:std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?av?Basic_s_1	db '.?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@'
		db '@std@@',0
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 95B0h
; COMDAT (pick any)
		public ??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
; std::basic_stringstream<char,	struct std::char_traits<char>, class std::allocator<char>>::`RTTI Class	Hierarchy Descriptor'
??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 dd 0
					; DATA XREF: .rdata$r:0000955Co
					; .rdata$r:00009604o
		dd 3, 0Ah
		dd offset ??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 95C0h
; COMDAT (pick any)
		public ??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
; std::basic_stringstream<char,	struct std::char_traits<char>, class std::allocator<char>>::`RTTI Base Class Array'
??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 dd offset ??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
					; DATA XREF: .rdata$r:000095BCo
					; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8	; std::basic_iostream<char,std::char_traits<char>>::`RTTI Base Class Descriptor	at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char>>::`RTTI	Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char>>::`RTTI Base Class Descriptor at	(0,0,4,80)'
		dd offset ??_R1A@A@3EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
		dd offset ??_R17A@3EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI	Base Class Descriptor at (8,0,4,64)'
		dd offset ??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8	; std::basic_ostream<char,std::char_traits<char>>::`RTTI Base Class Descriptor at (16,-1,0,64)'
		dd offset ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char>>::`RTTI Base Class Descriptor at	(0,0,4,80)'
		dd offset ??_R1A@A@3EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
		dd offset ??_R17A@3EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI	Base Class Descriptor at (8,0,4,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 95ECh
; COMDAT (pick any)
		public ??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
; std::basic_stringstream<char,	struct std::char_traits<char>, class std::allocator<char>>::`RTTI Base Class Descriptor	at (0, -1, 0, 64)'
??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 dd offset ??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
					; DATA XREF: .rdata$r:std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`RTTI Base Class Array'o
					; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>> `RTTI Type Descriptor'
		dd 9, 0
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9608h
; COMDAT (pick any)
		public ??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
; std::basic_iostream<char, struct std::char_traits<char>>::`RTTI Base Class Descriptor	at (0, -1, 0, 64)'
??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 dd offset	??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8
					; DATA XREF: .rdata$r:000095C4o
					; .rdata$r:std::basic_iostream<char,std::char_traits<char>>::`RTTI Base	Class Array'o
					; std::basic_iostream<char,std::char_traits<char>> `RTTI Type Descriptor'
		dd 8, 0
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 9624h
; COMDAT (pick any)
		public ??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8
; class	std::basic_iostream<char, struct std::char_traits<char>> `RTTI Type Descriptor'
??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:std::basic_iostream<char,std::char_traits<char>>::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?av?Basic_ios	db '.?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@',0
		align 10h
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9660h
; COMDAT (pick any)
		public ??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
; std::basic_iostream<char, struct std::char_traits<char>>::`RTTI Class	Hierarchy Descriptor'
??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 dd	0 ; DATA XREF: .rdata$r:00009620o
		dd 3, 9
		dd offset ??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char>>::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9670h
; COMDAT (pick any)
		public ??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
; std::basic_iostream<char, struct std::char_traits<char>>::`RTTI Base Class Array'
??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 dd	offset ??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
					; DATA XREF: .rdata$r:0000966Co
					; std::basic_iostream<char,std::char_traits<char>>::`RTTI Base Class Descriptor	at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char>>::`RTTI	Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char>>::`RTTI Base Class Descriptor at	(0,0,4,80)'
		dd offset ??_R1A@A@3EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
		dd offset ??_R17A@3EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI	Base Class Descriptor at (8,0,4,64)'
		dd offset ??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8	; std::basic_ostream<char,std::char_traits<char>>::`RTTI Base Class Descriptor at (16,-1,0,64)'
		dd offset ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char>>::`RTTI Base Class Descriptor at	(0,0,4,80)'
		dd offset ??_R1A@A@3EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
		dd offset ??_R17A@3EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI	Base Class Descriptor at (8,0,4,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9698h
; COMDAT (pick any)
		public ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
; std::basic_istream<char, struct std::char_traits<char>>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 dd	offset ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
					; DATA XREF: .rdata$r:000095C8o
					; .rdata$r:00009674o ...
					; std::basic_istream<char,std::char_traits<char>> `RTTI	Type Descriptor'
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 ;	std::basic_istream<char,std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 96B4h
; COMDAT (pick any)
		public ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
; class	std::basic_istream<char, struct	std::char_traits<char>>	`RTTI Type Descriptor'
??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8	dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:std::basic_istream<char,std::char_traits<char>>::`RTTI Base Class	Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?av?Basic_ist	db '.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@',0
		align 10h
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 96F0h
; COMDAT (pick any)
		public ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
; std::basic_istream<char, struct std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 dd 2 dup(0)
					; DATA XREF: .rdata$r:000096B0o
		dd 4
		dd offset ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 ;	std::basic_istream<char,std::char_traits<char>>::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9700h
; COMDAT (pick any)
		public ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
; std::basic_istream<char, struct std::char_traits<char>>::`RTTI Base Class Array'
??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 dd offset ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
					; DATA XREF: .rdata$r:000096FCo
					; std::basic_istream<char,std::char_traits<char>>::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char>>::`RTTI Base Class Descriptor at	(0,0,4,80)'
		dd offset ??_R1A@A@3EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
		dd offset ??_R17A@3EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI	Base Class Descriptor at (8,0,4,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9714h
; COMDAT (pick any)
		public ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
; std::basic_ios<char, struct std::char_traits<char>>::`RTTI Base Class	Descriptor at (0, 0, 4,	80)'
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8	dd offset ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
					; DATA XREF: .rdata$r:000095CCo
					; .rdata$r:000095DCo ...
					; std::basic_ios<char,std::char_traits<char>> `RTTI Type Descriptor'
		dd 2, 2	dup(0)
		dd 4, 50h
		dd offset ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 9730h
; COMDAT (pick any)
		public ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
; class	std::basic_ios<char, struct std::char_traits<char>> `RTTI Type Descriptor'
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:std::basic_ios<char,std::char_traits<char>>::`RTTI Base Class Descriptor at (0,0,4,80)'o
					; .rdata$r:std::basic_ios<char,std::char_traits<char>>::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?av?Basic_i_0	db '.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@',0
		align 4
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9768h
; COMDAT (pick any)
		public ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
; std::basic_ios<char, struct std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	dd 2 dup(0) ; DATA XREF: .rdata$r:0000972Co
					; .rdata$r:000097A0o
		dd 3
		dd offset ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char>>::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9778h
; COMDAT (pick any)
		public ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
; std::basic_ios<char, struct std::char_traits<char>>::`RTTI Base Class	Array'
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	dd offset ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
					; DATA XREF: .rdata$r:00009774o
					; std::basic_ios<char,std::char_traits<char>>::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@ios_base@std@@8	; std::ios_base::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R17?0A@EA@?$_Iosb@H@std@@8	; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9788h
; COMDAT (pick any)
		public ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
; std::basic_ios<char, struct std::char_traits<char>>::`RTTI Base Class	Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 dd offset ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
					; DATA XREF: .rdata$r:std::basic_ios<char,std::char_traits<char>>::`RTTI Base Class Array'o
					; std::basic_ios<char,std::char_traits<char>> `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 97A4h
; COMDAT (pick any)
		public ??_R1A@?0A@EA@ios_base@std@@8
; std::ios_base::`RTTI Base Class Descriptor at	(0, -1,	0, 64)'
??_R1A@?0A@EA@ios_base@std@@8 dd offset	??_R0?AVios_base@std@@@8
					; DATA XREF: .rdata$r:0000977Co
					; .rdata$r:std::ios_base::`RTTI	Base Class Array'o
					; std::ios_base	`RTTI Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3ios_base@std@@8 ; std::ios_base::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 97C0h
; COMDAT (pick any)
		public ??_R0?AVios_base@std@@@8
; class	std::ios_base `RTTI Type Descriptor'
??_R0?AVios_base@std@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:std::ios_base::`RTTI Base	Class Descriptor at (0,-1,0,64)'o
					; .rdata$r:std::ios_base::`RTTI	Base Class Descriptor at (0,0,4,64)'o
					; const	type_info::`vftable'
		align 8
a_?avios_base@s	db '.?AVios_base@std@@',0
		align 4
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 97DCh
; COMDAT (pick any)
		public ??_R3ios_base@std@@8
; std::ios_base::`RTTI Class Hierarchy Descriptor'
??_R3ios_base@std@@8 dd	2 dup(0)	; DATA XREF: .rdata$r:000097BCo
					; .rdata$r:0000987Co
		dd 2
		dd offset ??_R2ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 97ECh
; COMDAT (pick any)
		public ??_R2ios_base@std@@8
; std::ios_base::`RTTI Base Class Array'
??_R2ios_base@std@@8 dd	offset ??_R1A@?0A@EA@ios_base@std@@8 ; DATA XREF: .rdata$r:000097E8o
					; std::ios_base::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R17?0A@EA@?$_Iosb@H@std@@8	; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 97F8h
; COMDAT (pick any)
		public ??_R17?0A@EA@?$_Iosb@H@std@@8
; std::_Iosb<int>::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
??_R17?0A@EA@?$_Iosb@H@std@@8 dd offset	??_R0?AV?$_Iosb@H@std@@@8
					; DATA XREF: .rdata$r:00009780o
					; .rdata$r:000097F0o
					; std::_Iosb<int> `RTTI	Type Descriptor'
		align 10h
		dd 8, 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3?$_Iosb@H@std@@8	; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 9814h
; COMDAT (pick any)
		public ??_R0?AV?$_Iosb@H@std@@@8
; class	std::_Iosb<int>	`RTTI Type Descriptor'
??_R0?AV?$_Iosb@H@std@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:std::_Iosb<int>::`RTTI Base Class	Descriptor at (8,-1,0,64)'o
					; .rdata$r:std::_Iosb<int>::`RTTI Base Class Descriptor	at (0,-1,0,64)'o ...
					; const	type_info::`vftable'
		dd 0
a_?av?_iosb@h@s	db '.?AV?$_Iosb@H@std@@',0
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9830h
; COMDAT (pick any)
		public ??_R3?$_Iosb@H@std@@8
; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
??_R3?$_Iosb@H@std@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00009810o
					; .rdata$r:00009860o ...
		dd 1
		dd offset ??_R2?$_Iosb@H@std@@8	; std::_Iosb<int>::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9840h
; COMDAT (pick any)
		public ??_R2?$_Iosb@H@std@@8
; std::_Iosb<int>::`RTTI Base Class Array'
??_R2?$_Iosb@H@std@@8 dd offset	??_R1A@?0A@EA@?$_Iosb@H@std@@8
					; DATA XREF: .rdata$r:0000983Co
					; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9848h
; COMDAT (pick any)
		public ??_R1A@?0A@EA@?$_Iosb@H@std@@8
; std::_Iosb<int>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@?$_Iosb@H@std@@8 dd offset ??_R0?AV?$_Iosb@H@std@@@8
					; DATA XREF: .rdata$r:std::_Iosb<int>::`RTTI Base Class	Array'o
					; std::_Iosb<int> `RTTI	Type Descriptor'
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3?$_Iosb@H@std@@8	; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9864h
; COMDAT (pick any)
		public ??_R1A@A@3EA@ios_base@std@@8
; std::ios_base::`RTTI Base Class Descriptor at	(0, 0, 4, 64)'
??_R1A@A@3EA@ios_base@std@@8 dd	offset ??_R0?AVios_base@std@@@8
					; DATA XREF: .rdata$r:000095D0o
					; .rdata$r:000095E0o ...
					; std::ios_base	`RTTI Type Descriptor'
		dd 1, 2	dup(0)
		dd 4, 40h
		dd offset ??_R3ios_base@std@@8 ; std::ios_base::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9880h
; COMDAT (pick any)
		public ??_R17A@3EA@?$_Iosb@H@std@@8
; std::_Iosb<int>::`RTTI Base Class Descriptor at (8, 0, 4, 64)'
??_R17A@3EA@?$_Iosb@H@std@@8 dd	offset ??_R0?AV?$_Iosb@H@std@@@8
					; DATA XREF: .rdata$r:000095D4o
					; .rdata$r:000095E4o ...
					; std::_Iosb<int> `RTTI	Type Descriptor'
		align 8
		dd 8, 0
		dd 4, 40h
		dd offset ??_R3?$_Iosb@H@std@@8	; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 989Ch
; COMDAT (pick any)
		public ??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
; std::basic_ostream<char, struct std::char_traits<char>>::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 dd offset	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
					; DATA XREF: .rdata$r:000095D8o
					; .rdata$r:00009684o
					; std::basic_ostream<char,std::char_traits<char>> `RTTI	Type Descriptor'
		dd 3, 10h, 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ;	std::basic_ostream<char,std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 98B8h
; COMDAT (pick any)
		public ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
; class	std::basic_ostream<char, struct	std::char_traits<char>>	`RTTI Type Descriptor'
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8	dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:std::basic_ostream<char,std::char_traits<char>>::`RTTI Base Class	Descriptor at (16,-1,0,64)'o
					; .rdata$r:std::basic_ostream<char,std::char_traits<char>>::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?av?Basic_ost	db '.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@',0
		align 4
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 98F4h
; COMDAT (pick any)
		public ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
; std::basic_ostream<char, struct std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 dd 2 dup(0)
					; DATA XREF: .rdata$r:000098B4o
					; .rdata$r:00009930o
		dd 4
		dd offset ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ;	std::basic_ostream<char,std::char_traits<char>>::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9904h
; COMDAT (pick any)
		public ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
; std::basic_ostream<char, struct std::char_traits<char>>::`RTTI Base Class Array'
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 dd offset ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
					; DATA XREF: .rdata$r:00009900o
					; std::basic_ostream<char,std::char_traits<char>>::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char>>::`RTTI Base Class Descriptor at	(0,0,4,80)'
		dd offset ??_R1A@A@3EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
		dd offset ??_R17A@3EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI	Base Class Descriptor at (8,0,4,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9918h
; COMDAT (pick any)
		public ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
; std::basic_ostream<char, struct std::char_traits<char>>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 dd	offset ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
					; DATA XREF: .rdata$r:std::basic_ostream<char,std::char_traits<char>>::`RTTI Base Class	Array'o
					; std::basic_ostream<char,std::char_traits<char>> `RTTI	Type Descriptor'
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ;	std::basic_ostream<char,std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9934h
; COMDAT (pick any)
		public ??_R4error_category@std@@6B@
; const	std::error_category::`RTTI Complete Object Locator'
??_R4error_category@std@@6B@ dd	3 dup(0) ; DATA	XREF: .rdata:00008E5Co
		dd offset ??_R0?AVerror_category@std@@@8 ; std::error_category `RTTI Type Descriptor'
		dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 9948h
; COMDAT (pick any)
		public ??_R0?AVerror_category@std@@@8
; class	std::error_category `RTTI Type Descriptor'
??_R0?AVerror_category@std@@@8 dd offset ??_7type_info@@6B@ ; DATA XREF: .rdata$r:00009940o
					; .rdata$r:std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?averror_cate	db '.?AVerror_category@std@@',0
		align 4
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 996Ch
; COMDAT (pick any)
		public ??_R3error_category@std@@8
; std::error_category::`RTTI Class Hierarchy Descriptor'
??_R3error_category@std@@8 dd 2	dup(0)	; DATA XREF: .rdata$r:00009944o
					; .rdata$r:0000999Co
		dd 1
		dd offset ??_R2error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 997Ch
; COMDAT (pick any)
		public ??_R2error_category@std@@8
; std::error_category::`RTTI Base Class	Array'
??_R2error_category@std@@8 dd offset ??_R1A@?0A@EA@error_category@std@@8
					; DATA XREF: .rdata$r:00009978o
					; std::error_category::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9984h
; COMDAT (pick any)
		public ??_R1A@?0A@EA@error_category@std@@8
; std::error_category::`RTTI Base Class	Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@error_category@std@@8 dd offset ??_R0?AVerror_category@std@@@8
					; DATA XREF: .rdata$r:std::error_category::`RTTI Base Class Array'o
					; .rdata$r:000099F4o ...
					; std::error_category `RTTI Type Descriptor'
		align 10h
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 99A0h
; COMDAT (pick any)
		public ??_R4_Generic_error_category@std@@6B@
; const	std::_Generic_error_category::`RTTI Complete Object Locator'
??_R4_Generic_error_category@std@@6B@ dd 3 dup(0) ; DATA XREF: .rdata:00008E78o
		dd offset ??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category `RTTI Type Descriptor'
		dd offset ??_R3_Generic_error_category@std@@8 ;	std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 99B4h
; COMDAT (pick any)
		public ??_R0?AV_Generic_error_category@std@@@8
; class	std::_Generic_error_category `RTTI Type	Descriptor'
??_R0?AV_Generic_error_category@std@@@8	dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:000099ACo
					; .rdata$r:std::_Generic_error_category::`RTTI Base Class Descriptor at	(0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?av_generic_e	db '.?AV_Generic_error_category@std@@',0
		align 10h
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 99E0h
; COMDAT (pick any)
		public ??_R3_Generic_error_category@std@@8
; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
??_R3_Generic_error_category@std@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:000099B0o
					; .rdata$r:00009A14o
		dd 2
		dd offset ??_R2_Generic_error_category@std@@8 ;	std::_Generic_error_category::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 99F0h
; COMDAT (pick any)
		public ??_R2_Generic_error_category@std@@8
; std::_Generic_error_category::`RTTI Base Class Array'
??_R2_Generic_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8
					; DATA XREF: .rdata$r:000099ECo
					; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@error_category@std@@8 ;	std::error_category::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 99FCh
; COMDAT (pick any)
		public ??_R1A@?0A@EA@_Generic_error_category@std@@8
; std::_Generic_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@_Generic_error_category@std@@8 dd	offset ??_R0?AV_Generic_error_category@std@@@8
					; DATA XREF: .rdata$r:std::_Generic_error_category::`RTTI Base Class Array'o
					; .rdata$r:00009A6Co ...
					; std::_Generic_error_category `RTTI Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3_Generic_error_category@std@@8 ;	std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9A18h
; COMDAT (pick any)
		public ??_R4_Iostream_error_category@std@@6B@
; const	std::_Iostream_error_category::`RTTI Complete Object Locator'
??_R4_Iostream_error_category@std@@6B@ dd 3 dup(0) ; DATA XREF:	.rdata:00008EACo
		dd offset ??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category `RTTI Type Descriptor'
		dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 9A2Ch
; COMDAT (pick any)
		public ??_R0?AV_Iostream_error_category@std@@@8
; class	std::_Iostream_error_category `RTTI Type Descriptor'
??_R0?AV_Iostream_error_category@std@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00009A24o
					; .rdata$r:std::_Iostream_error_category::`RTTI	Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?av_iostream_	db '.?AV_Iostream_error_category@std@@',0
		align 4
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9A58h
; COMDAT (pick any)
		public ??_R3_Iostream_error_category@std@@8
; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
??_R3_Iostream_error_category@std@@8 dd	2 dup(0) ; DATA	XREF: .rdata$r:00009A28o
					; .rdata$r:00009A90o
		dd 3
		dd offset ??_R2_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9A68h
; COMDAT (pick any)
		public ??_R2_Iostream_error_category@std@@8
; std::_Iostream_error_category::`RTTI Base Class Array'
??_R2_Iostream_error_category@std@@8 dd	offset ??_R1A@?0A@EA@_Iostream_error_category@std@@8
					; DATA XREF: .rdata$r:00009A64o
					; std::_Iostream_error_category::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@error_category@std@@8 ;	std::error_category::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9A78h
; COMDAT (pick any)
		public ??_R1A@?0A@EA@_Iostream_error_category@std@@8
; std::_Iostream_error_category::`RTTI Base Class Descriptor at	(0, -1,	0, 64)'
??_R1A@?0A@EA@_Iostream_error_category@std@@8 dd offset	??_R0?AV_Iostream_error_category@std@@@8
					; DATA XREF: .rdata$r:std::_Iostream_error_category::`RTTI Base	Class Array'o
					; std::_Iostream_error_category	`RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9A94h
; COMDAT (pick any)
		public ??_R4_System_error_category@std@@6B@
; const	std::_System_error_category::`RTTI Complete Object Locator'
??_R4_System_error_category@std@@6B@ dd	3 dup(0) ; DATA	XREF: .rdata:00008EECo
		dd offset ??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category `RTTI Type Descriptor'
		dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 9AA8h
; COMDAT (pick any)
		public ??_R0?AV_System_error_category@std@@@8
; class	std::_System_error_category `RTTI Type Descriptor'
??_R0?AV_System_error_category@std@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00009AA0o
					; .rdata$r:std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?av_system_er	db '.?AV_System_error_category@std@@',0
		align 4
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9AD4h
; COMDAT (pick any)
		public ??_R3_System_error_category@std@@8
; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
??_R3_System_error_category@std@@8 dd 2	dup(0) ; DATA XREF: .rdata$r:00009AA4o
					; .rdata$r:00009B0Co
		dd 3
		dd offset ??_R2_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9AE4h
; COMDAT (pick any)
		public ??_R2_System_error_category@std@@8
; std::_System_error_category::`RTTI Base Class	Array'
??_R2_System_error_category@std@@8 dd offset ??_R1A@?0A@EA@_System_error_category@std@@8
					; DATA XREF: .rdata$r:00009AE0o
					; std::_System_error_category::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@error_category@std@@8 ;	std::error_category::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9AF4h
; COMDAT (pick any)
		public ??_R1A@?0A@EA@_System_error_category@std@@8
; std::_System_error_category::`RTTI Base Class	Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@_System_error_category@std@@8 dd offset ??_R0?AV_System_error_category@std@@@8
					; DATA XREF: .rdata$r:std::_System_error_category::`RTTI Base Class Array'o
					; std::_System_error_category `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9B10h
; COMDAT (pick any)
		public ??_R4SourceSurface@gfx@mozilla@@6B@
; const	mozilla::gfx::SourceSurface::`RTTI Complete Object Locator'
??_R4SourceSurface@gfx@mozilla@@6B@ dd 3 dup(0)	; DATA XREF: .rdata:00009114o
		dd offset ??_R0?AVSourceSurface@gfx@mozilla@@@8	; mozilla::gfx::SourceSurface `RTTI Type Descriptor'
		dd offset ??_R3SourceSurface@gfx@mozilla@@8 ; mozilla::gfx::SourceSurface::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 9B24h
; COMDAT (pick any)
		public ??_R0?AVSourceSurface@gfx@mozilla@@@8
; class	mozilla::gfx::SourceSurface `RTTI Type Descriptor'
??_R0?AVSourceSurface@gfx@mozilla@@@8 dd offset	??_7type_info@@6B@
					; DATA XREF: .rdata$r:00009B1Co
					; .rdata$r:mozilla::gfx::SourceSurface::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avsourcesurf	db '.?AVSourceSurface@gfx@mozilla@@',0
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9B4Ch
; COMDAT (pick any)
		public ??_R3SourceSurface@gfx@mozilla@@8
; mozilla::gfx::SourceSurface::`RTTI Class Hierarchy Descriptor'
??_R3SourceSurface@gfx@mozilla@@8 dd 2 dup(0) ;	DATA XREF: .rdata$r:00009B20o
					; .rdata$r:00009B84o
		dd 3
		dd offset ??_R2SourceSurface@gfx@mozilla@@8 ; mozilla::gfx::SourceSurface::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9B5Ch
; COMDAT (pick any)
		public ??_R2SourceSurface@gfx@mozilla@@8
; mozilla::gfx::SourceSurface::`RTTI Base Class	Array'
??_R2SourceSurface@gfx@mozilla@@8 dd offset ??_R1A@?0A@EA@SourceSurface@gfx@mozilla@@8
					; DATA XREF: .rdata$r:00009B58o
					; mozilla::gfx::SourceSurface::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8 ; mozilla::external::AtomicRefCounted<mozilla::gfx::SourceSurface>::`RTTI Base Class	Descriptor at (4,-1,0,64)'
		dd offset ??_R13?0A@EA@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8 ; mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::`RTTI Base	Class Descriptor at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9B6Ch
; COMDAT (pick any)
		public ??_R1A@?0A@EA@SourceSurface@gfx@mozilla@@8
; mozilla::gfx::SourceSurface::`RTTI Base Class	Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@SourceSurface@gfx@mozilla@@8 dd offset ??_R0?AVSourceSurface@gfx@mozilla@@@8
					; DATA XREF: .rdata$r:mozilla::gfx::SourceSurface::`RTTI Base Class Array'o
					; .rdata$r:00009FA4o
					; mozilla::gfx::SourceSurface `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3SourceSurface@gfx@mozilla@@8 ; mozilla::gfx::SourceSurface::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9B88h
; COMDAT (pick any)
		public ??_R13?0A@EA@?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8
; mozilla::external::AtomicRefCounted<class mozilla::gfx::SourceSurface>::`RTTI	Base Class Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8 dd offset ??_R0?AV?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@@8
					; DATA XREF: .rdata$r:00009B60o
					; .rdata$r:00009FA8o
					; mozilla::external::AtomicRefCounted<mozilla::gfx::SourceSurface> `RTTI Type Descriptor'
		dd 1, 4, 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8 ; mozilla::external::AtomicRefCounted<mozilla::gfx::SourceSurface>::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data$r		segment	para public 'DATA' use32
		assume cs:_data$r
		;org 9BA4h
; COMDAT (pick any)
		public ??_R0?AV?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@@8
; class	mozilla::external::AtomicRefCounted<class mozilla::gfx::SourceSurface> `RTTI Type Descriptor'
??_R0?AV?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@@8 dd	offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:mozilla::external::AtomicRefCounted<mozilla::gfx::SourceSurface>::`RTTI Base Class Descriptor at (4,-1,0,64)'o
					; .rdata$r:mozilla::external::AtomicRefCounted<mozilla::gfx::SourceSurface>::`RTTI Base	Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?av?Atomicref	db '.?AV?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozi'
		db 'lla@@',0
		align 4
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9BF4h
; COMDAT (pick any)
		public ??_R3?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8
; mozilla::external::AtomicRefCounted<class mozilla::gfx::SourceSurface>::`RTTI	Class Hierarchy	Descriptor'
??_R3?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8 dd 2 dup(0)
					; DATA XREF: .rdata$r:00009BA0o
					; .rdata$r:00009C28o
		dd 2
		dd offset ??_R2?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8 ; mozilla::external::AtomicRefCounted<mozilla::gfx::SourceSurface>::`RTTI Base Class	Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9C04h
; COMDAT (pick any)
		public ??_R2?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8
; mozilla::external::AtomicRefCounted<class mozilla::gfx::SourceSurface>::`RTTI	Base Class Array'
??_R2?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8 dd offset ??_R1A@?0A@EA@?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8
					; DATA XREF: .rdata$r:00009C00o
					; mozilla::external::AtomicRefCounted<mozilla::gfx::SourceSurface>::`RTTI Base Class Descriptor	at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8	; mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9C10h
; COMDAT (pick any)
		public ??_R1A@?0A@EA@?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8
; mozilla::external::AtomicRefCounted<class mozilla::gfx::SourceSurface>::`RTTI	Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8 dd offset ??_R0?AV?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@@8
					; DATA XREF: .rdata$r:mozilla::external::AtomicRefCounted<mozilla::gfx::SourceSurface>::`RTTI Base Class Array'o
					; mozilla::external::AtomicRefCounted<mozilla::gfx::SourceSurface> `RTTI Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8 ; mozilla::external::AtomicRefCounted<mozilla::gfx::SourceSurface>::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9C2Ch
; COMDAT (pick any)
		public ??_R1A@?0A@EA@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8
; mozilla::detail::RefCounted<class mozilla::gfx::SourceSurface, 0>::`RTTI Base	Class Descriptor at (0,	-1, 0, 64)'
??_R1A@?0A@EA@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8 dd offset	??_R0?AV?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@@8
					; DATA XREF: .rdata$r:00009C08o
					; .rdata$r:mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::`RTTI Base Class	Array'o
					; mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0> `RTTI Type	Descriptor'
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8 ; mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data$r		segment	para public 'DATA' use32
		assume cs:_data$r
		;org 9C48h
; COMDAT (pick any)
		public ??_R0?AV?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@@8
; class	mozilla::detail::RefCounted<class mozilla::gfx::SourceSurface, 0> `RTTI	Type Descriptor'
??_R0?AV?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::`RTTI	Base Class Descriptor at (0,-1,0,64)'o
					; .rdata$r:mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::`RTTI Base Class	Descriptor at (4,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?av?Refcounte	db '.?AV?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@'
		db '@',0
		align 4
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9C94h
; COMDAT (pick any)
		public ??_R3?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8
; mozilla::detail::RefCounted<class mozilla::gfx::SourceSurface, 0>::`RTTI Class Hierarchy Descriptor'
??_R3?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8 dd	2 dup(0)
					; DATA XREF: .rdata$r:00009C44o
					; .rdata$r:00009CC4o
		dd 1
		dd offset ??_R2?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8 ; mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::`RTTI Base	Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9CA4h
; COMDAT (pick any)
		public ??_R2?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8
; mozilla::detail::RefCounted<class mozilla::gfx::SourceSurface, 0>::`RTTI Base	Class Array'
??_R2?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8 dd	offset ??_R1A@?0A@EA@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8
					; DATA XREF: .rdata$r:00009CA0o
					; mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9CACh
; COMDAT (pick any)
		public ??_R13?0A@EA@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8
; mozilla::detail::RefCounted<class mozilla::gfx::SourceSurface, 0>::`RTTI Base	Class Descriptor at (4,	-1, 0, 64)'
??_R13?0A@EA@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8 dd	offset ??_R0?AV?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@@8
					; DATA XREF: .rdata$r:00009B64o
					; .rdata$r:00009FACo
					; mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0> `RTTI Type	Descriptor'
		dd 0
		dd 4, 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8 ; mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9CC8h
; COMDAT (pick any)
		public ??_R4DrawTarget@gfx@mozilla@@6B@
; const	mozilla::gfx::DrawTarget::`RTTI	Complete Object	Locator'
??_R4DrawTarget@gfx@mozilla@@6B@ dd 3 dup(0) ; DATA XREF: .rdata:00009138o
		dd offset ??_R0?AVDrawTarget@gfx@mozilla@@@8 ; mozilla::gfx::DrawTarget	`RTTI Type Descriptor'
		dd offset ??_R3DrawTarget@gfx@mozilla@@8 ; mozilla::gfx::DrawTarget::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 9CDCh
; COMDAT (pick any)
		public ??_R0?AVDrawTarget@gfx@mozilla@@@8
; class	mozilla::gfx::DrawTarget `RTTI Type Descriptor'
??_R0?AVDrawTarget@gfx@mozilla@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00009CD4o
					; .rdata$r:mozilla::gfx::DrawTarget::`RTTI Base	Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avdrawtarget	db '.?AVDrawTarget@gfx@mozilla@@',0
		align 4
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9D04h
; COMDAT (pick any)
		public ??_R3DrawTarget@gfx@mozilla@@8
; mozilla::gfx::DrawTarget::`RTTI Class	Hierarchy Descriptor'
??_R3DrawTarget@gfx@mozilla@@8 dd 2 dup(0) ; DATA XREF:	.rdata$r:00009CD8o
					; .rdata$r:00009D3Co
		dd 3
		dd offset ??_R2DrawTarget@gfx@mozilla@@8 ; mozilla::gfx::DrawTarget::`RTTI Base	Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9D14h
; COMDAT (pick any)
		public ??_R2DrawTarget@gfx@mozilla@@8
; mozilla::gfx::DrawTarget::`RTTI Base Class Array'
??_R2DrawTarget@gfx@mozilla@@8 dd offset ??_R1A@?0A@EA@DrawTarget@gfx@mozilla@@8
					; DATA XREF: .rdata$r:00009D10o
					; mozilla::gfx::DrawTarget::`RTTI Base Class Descriptor	at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8 ; mozilla::RefCounted<mozilla::gfx::DrawTarget>::`RTTI	Base Class Descriptor at (4,-1,0,64)'
		dd offset ??_R13?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8 ; mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::`RTTI Base Class Descriptor at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9D24h
; COMDAT (pick any)
		public ??_R1A@?0A@EA@DrawTarget@gfx@mozilla@@8
; mozilla::gfx::DrawTarget::`RTTI Base Class Descriptor	at (0, -1, 0, 64)'
??_R1A@?0A@EA@DrawTarget@gfx@mozilla@@8	dd offset ??_R0?AVDrawTarget@gfx@mozilla@@@8
					; DATA XREF: .rdata$r:mozilla::gfx::DrawTarget::`RTTI Base Class Array'o
					; .rdata$r:0000A024o
					; mozilla::gfx::DrawTarget `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3DrawTarget@gfx@mozilla@@8 ; mozilla::gfx::DrawTarget::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9D40h
; COMDAT (pick any)
		public ??_R13?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8
; mozilla::RefCounted<class mozilla::gfx::DrawTarget>::`RTTI Base Class	Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8 dd offset ??_R0?AV?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@@8
					; DATA XREF: .rdata$r:00009D18o
					; .rdata$r:0000A028o
					; mozilla::RefCounted<mozilla::gfx::DrawTarget>	`RTTI Type Descriptor'
		dd 1, 4, 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8 ; mozilla::RefCounted<mozilla::gfx::DrawTarget>::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 9D5Ch
; COMDAT (pick any)
		public ??_R0?AV?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@@8
; class	mozilla::RefCounted<class mozilla::gfx::DrawTarget> `RTTI Type Descriptor'
??_R0?AV?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:mozilla::RefCounted<mozilla::gfx::DrawTarget>::`RTTI Base	Class Descriptor at (4,-1,0,64)'o
					; .rdata$r:mozilla::RefCounted<mozilla::gfx::DrawTarget>::`RTTI	Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?av?Refcoun_0	db '.?AV?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@',0
		align 4
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9D9Ch
; COMDAT (pick any)
		public ??_R3?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8
; mozilla::RefCounted<class mozilla::gfx::DrawTarget>::`RTTI Class Hierarchy Descriptor'
??_R3?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8 dd 2 dup(0)
					; DATA XREF: .rdata$r:00009D58o
					; .rdata$r:00009DD0o
		dd 2
		dd offset ??_R2?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8 ; mozilla::RefCounted<mozilla::gfx::DrawTarget>::`RTTI	Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9DACh
; COMDAT (pick any)
		public ??_R2?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8
; mozilla::RefCounted<class mozilla::gfx::DrawTarget>::`RTTI Base Class	Array'
??_R2?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8 dd offset ??_R1A@?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8
					; DATA XREF: .rdata$r:00009DA8o
					; mozilla::RefCounted<mozilla::gfx::DrawTarget>::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8 ; mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9DB8h
; COMDAT (pick any)
		public ??_R1A@?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8
; mozilla::RefCounted<class mozilla::gfx::DrawTarget>::`RTTI Base Class	Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8	dd offset ??_R0?AV?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@@8
					; DATA XREF: .rdata$r:mozilla::RefCounted<mozilla::gfx::DrawTarget>::`RTTI Base	Class Array'o
					; mozilla::RefCounted<mozilla::gfx::DrawTarget>	`RTTI Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8 ; mozilla::RefCounted<mozilla::gfx::DrawTarget>::`RTTI	Class Hierarchy	Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9DD4h
; COMDAT (pick any)
		public ??_R1A@?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8
; mozilla::detail::RefCounted<class mozilla::gfx::DrawTarget, 1>::`RTTI	Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8 dd offset ??_R0?AV?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@@8
					; DATA XREF: .rdata$r:00009DB0o
					; .rdata$r:mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::`RTTI Base Class Array'o
					; mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1> `RTTI	Type Descriptor'
		align 10h
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8 ; mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment 'qword' can not be represented in assembly
_data$r		segment	para public 'DATA' use32
		assume cs:_data$r
		;org 9DF0h
; COMDAT (pick any)
		public ??_R0?AV?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@@8
; class	mozilla::detail::RefCounted<class mozilla::gfx::DrawTarget, 1> `RTTI Type Descriptor'
??_R0?AV?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@@8 dd	offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::`RTTI Base Class	Descriptor at (0,-1,0,64)'o
					; .rdata$r:mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::`RTTI Base Class Descriptor	at (4,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?av?Refcoun_1	db '.?AV?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@',0
		align 4
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9E38h
; COMDAT (pick any)
		public ??_R3?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8
; mozilla::detail::RefCounted<class mozilla::gfx::DrawTarget, 1>::`RTTI	Class Hierarchy	Descriptor'
??_R3?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8 dd 2 dup(0)
					; DATA XREF: .rdata$r:00009DECo
					; .rdata$r:00009E68o
		dd 1
		dd offset ??_R2?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8 ; mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9E48h
; COMDAT (pick any)
		public ??_R2?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8
; mozilla::detail::RefCounted<class mozilla::gfx::DrawTarget, 1>::`RTTI	Base Class Array'
??_R2?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8 dd offset ??_R1A@?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8
					; DATA XREF: .rdata$r:00009E44o
					; mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 10h
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9E50h
; COMDAT (pick any)
		public ??_R13?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8
; mozilla::detail::RefCounted<class mozilla::gfx::DrawTarget, 1>::`RTTI	Base Class Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8 dd offset ??_R0?AV?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@@8
					; DATA XREF: .rdata$r:00009D1Co
					; .rdata$r:0000A02Co
					; mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1> `RTTI	Type Descriptor'
		align 8
		dd 4, 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8 ; mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9E6Ch
; COMDAT (pick any)
		public ??_R4Pattern@gfx@mozilla@@6B@
; const	mozilla::gfx::Pattern::`RTTI Complete Object Locator'
??_R4Pattern@gfx@mozilla@@6B@ dd 3 dup(0) ; DATA XREF: .rdata:000090FCo
		dd offset ??_R0?AVPattern@gfx@mozilla@@@8 ; mozilla::gfx::Pattern `RTTI	Type Descriptor'
		dd offset ??_R3Pattern@gfx@mozilla@@8 ;	mozilla::gfx::Pattern::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 9E80h
; COMDAT (pick any)
		public ??_R0?AVPattern@gfx@mozilla@@@8
; class	mozilla::gfx::Pattern `RTTI Type Descriptor'
??_R0?AVPattern@gfx@mozilla@@@8	dd offset ??_7type_info@@6B@ ; DATA XREF: .rdata$r:00009E78o
					; .rdata$r:mozilla::gfx::Pattern::`RTTI	Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 8
a_?avpattern@gf	db '.?AVPattern@gfx@mozilla@@',0
		align 4
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9EA4h
; COMDAT (pick any)
		public ??_R3Pattern@gfx@mozilla@@8
; mozilla::gfx::Pattern::`RTTI Class Hierarchy Descriptor'
??_R3Pattern@gfx@mozilla@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00009E7Co
					; .rdata$r:00009ED4o
		dd 1
		dd offset ??_R2Pattern@gfx@mozilla@@8 ;	mozilla::gfx::Pattern::`RTTI Base Class	Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9EB4h
; COMDAT (pick any)
		public ??_R2Pattern@gfx@mozilla@@8
; mozilla::gfx::Pattern::`RTTI Base Class Array'
??_R2Pattern@gfx@mozilla@@8 dd offset ??_R1A@?0A@EA@Pattern@gfx@mozilla@@8
					; DATA XREF: .rdata$r:00009EB0o
					; mozilla::gfx::Pattern::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9EBCh
; COMDAT (pick any)
		public ??_R1A@?0A@EA@Pattern@gfx@mozilla@@8
; mozilla::gfx::Pattern::`RTTI Base Class Descriptor at	(0, -1,	0, 64)'
??_R1A@?0A@EA@Pattern@gfx@mozilla@@8 dd	offset ??_R0?AVPattern@gfx@mozilla@@@8
					; DATA XREF: .rdata$r:mozilla::gfx::Pattern::`RTTI Base	Class Array'o
					; .rdata$r:00009F2Co
					; mozilla::gfx::Pattern	`RTTI Type Descriptor'
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3Pattern@gfx@mozilla@@8 ;	mozilla::gfx::Pattern::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9ED8h
; COMDAT (pick any)
		public ??_R4SurfacePattern@gfx@mozilla@@6B@
; const	mozilla::gfx::SurfacePattern::`RTTI Complete Object Locator'
??_R4SurfacePattern@gfx@mozilla@@6B@ dd	3 dup(0) ; DATA	XREF: .rdata:00009108o
		dd offset ??_R0?AVSurfacePattern@gfx@mozilla@@@8 ; mozilla::gfx::SurfacePattern	`RTTI Type Descriptor'
		dd offset ??_R3SurfacePattern@gfx@mozilla@@8 ; mozilla::gfx::SurfacePattern::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 9EECh
; COMDAT (pick any)
		public ??_R0?AVSurfacePattern@gfx@mozilla@@@8
; class	mozilla::gfx::SurfacePattern `RTTI Type	Descriptor'
??_R0?AVSurfacePattern@gfx@mozilla@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00009EE4o
					; .rdata$r:mozilla::gfx::SurfacePattern::`RTTI Base Class Descriptor at	(0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avsurfacepat	db '.?AVSurfacePattern@gfx@mozilla@@',0
		align 4
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9F18h
; COMDAT (pick any)
		public ??_R3SurfacePattern@gfx@mozilla@@8
; mozilla::gfx::SurfacePattern::`RTTI Class Hierarchy Descriptor'
??_R3SurfacePattern@gfx@mozilla@@8 dd 2	dup(0) ; DATA XREF: .rdata$r:00009EE8o
					; .rdata$r:00009F4Co
		dd 2
		dd offset ??_R2SurfacePattern@gfx@mozilla@@8 ; mozilla::gfx::SurfacePattern::`RTTI Base	Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9F28h
; COMDAT (pick any)
		public ??_R2SurfacePattern@gfx@mozilla@@8
; mozilla::gfx::SurfacePattern::`RTTI Base Class Array'
??_R2SurfacePattern@gfx@mozilla@@8 dd offset ??_R1A@?0A@EA@SurfacePattern@gfx@mozilla@@8
					; DATA XREF: .rdata$r:00009F24o
					; mozilla::gfx::SurfacePattern::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@Pattern@gfx@mozilla@@8 ; mozilla::gfx::Pattern::`RTTI Base Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9F34h
; COMDAT (pick any)
		public ??_R1A@?0A@EA@SurfacePattern@gfx@mozilla@@8
; mozilla::gfx::SurfacePattern::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@SurfacePattern@gfx@mozilla@@8 dd offset ??_R0?AVSurfacePattern@gfx@mozilla@@@8
					; DATA XREF: .rdata$r:mozilla::gfx::SurfacePattern::`RTTI Base Class Array'o
					; mozilla::gfx::SurfacePattern `RTTI Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3SurfacePattern@gfx@mozilla@@8 ; mozilla::gfx::SurfacePattern::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9F50h
; COMDAT (pick any)
		public ??_R4SourceSurfaceDual@gfx@mozilla@@6B@
; const	mozilla::gfx::SourceSurfaceDual::`RTTI Complete	Object Locator'
??_R4SourceSurfaceDual@gfx@mozilla@@6B@	dd 3 dup(0) ; DATA XREF: .rdata:000091F4o
		dd offset ??_R0?AVSourceSurfaceDual@gfx@mozilla@@@8 ; mozilla::gfx::SourceSurfaceDual `RTTI Type Descriptor'
		dd offset ??_R3SourceSurfaceDual@gfx@mozilla@@8	; mozilla::gfx::SourceSurfaceDual::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 9F64h
; COMDAT (pick any)
		public ??_R0?AVSourceSurfaceDual@gfx@mozilla@@@8
; class	mozilla::gfx::SourceSurfaceDual	`RTTI Type Descriptor'
??_R0?AVSourceSurfaceDual@gfx@mozilla@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00009F5Co
					; .rdata$r:mozilla::gfx::SourceSurfaceDual::`RTTI Base Class Descriptor	at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avsourcesu_0	db '.?AVSourceSurfaceDual@gfx@mozilla@@',0
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9F90h
; COMDAT (pick any)
		public ??_R3SourceSurfaceDual@gfx@mozilla@@8
; mozilla::gfx::SourceSurfaceDual::`RTTI Class Hierarchy Descriptor'
??_R3SourceSurfaceDual@gfx@mozilla@@8 dd 2 dup(0) ; DATA XREF: .rdata$r:00009F60o
					; .rdata$r:00009FCCo
		dd 4
		dd offset ??_R2SourceSurfaceDual@gfx@mozilla@@8	; mozilla::gfx::SourceSurfaceDual::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9FA0h
; COMDAT (pick any)
		public ??_R2SourceSurfaceDual@gfx@mozilla@@8
; mozilla::gfx::SourceSurfaceDual::`RTTI Base Class Array'
??_R2SourceSurfaceDual@gfx@mozilla@@8 dd offset	??_R1A@?0A@EA@SourceSurfaceDual@gfx@mozilla@@8
					; DATA XREF: .rdata$r:00009F9Co
					; mozilla::gfx::SourceSurfaceDual::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@SourceSurface@gfx@mozilla@@8 ; mozilla::gfx::SourceSurface::`RTTI Base Class Descriptor	at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8 ; mozilla::external::AtomicRefCounted<mozilla::gfx::SourceSurface>::`RTTI Base Class	Descriptor at (4,-1,0,64)'
		dd offset ??_R13?0A@EA@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8 ; mozilla::detail::RefCounted<mozilla::gfx::SourceSurface,0>::`RTTI Base	Class Descriptor at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9FB4h
; COMDAT (pick any)
		public ??_R1A@?0A@EA@SourceSurfaceDual@gfx@mozilla@@8
; mozilla::gfx::SourceSurfaceDual::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@SourceSurfaceDual@gfx@mozilla@@8 dd offset ??_R0?AVSourceSurfaceDual@gfx@mozilla@@@8
					; DATA XREF: .rdata$r:mozilla::gfx::SourceSurfaceDual::`RTTI Base Class	Array'o
					; mozilla::gfx::SourceSurfaceDual `RTTI	Type Descriptor'
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3SourceSurfaceDual@gfx@mozilla@@8	; mozilla::gfx::SourceSurfaceDual::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 9FD0h
; COMDAT (pick any)
		public ??_R4DrawTargetDual@gfx@mozilla@@6B@
; const	mozilla::gfx::DrawTargetDual::`RTTI Complete Object Locator'
??_R4DrawTargetDual@gfx@mozilla@@6B@ dd	3 dup(0) ; DATA	XREF: .rdata:00009218o
		dd offset ??_R0?AVDrawTargetDual@gfx@mozilla@@@8 ; mozilla::gfx::DrawTargetDual	`RTTI Type Descriptor'
		dd offset ??_R3DrawTargetDual@gfx@mozilla@@8 ; mozilla::gfx::DrawTargetDual::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 9FE4h
; COMDAT (pick any)
		public ??_R0?AVDrawTargetDual@gfx@mozilla@@@8
; class	mozilla::gfx::DrawTargetDual `RTTI Type	Descriptor'
??_R0?AVDrawTargetDual@gfx@mozilla@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00009FDCo
					; .rdata$r:mozilla::gfx::DrawTargetDual::`RTTI Base Class Descriptor at	(0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?avdrawtarg_0	db '.?AVDrawTargetDual@gfx@mozilla@@',0
		align 10h
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0A010h
; COMDAT (pick any)
		public ??_R3DrawTargetDual@gfx@mozilla@@8
; mozilla::gfx::DrawTargetDual::`RTTI Class Hierarchy Descriptor'
??_R3DrawTargetDual@gfx@mozilla@@8 dd 2	dup(0) ; DATA XREF: .rdata$r:00009FE0o
					; .rdata$r:0000A04Co
		dd 4
		dd offset ??_R2DrawTargetDual@gfx@mozilla@@8 ; mozilla::gfx::DrawTargetDual::`RTTI Base	Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0A020h
; COMDAT (pick any)
		public ??_R2DrawTargetDual@gfx@mozilla@@8
; mozilla::gfx::DrawTargetDual::`RTTI Base Class Array'
??_R2DrawTargetDual@gfx@mozilla@@8 dd offset ??_R1A@?0A@EA@DrawTargetDual@gfx@mozilla@@8
					; DATA XREF: .rdata$r:0000A01Co
					; mozilla::gfx::DrawTargetDual::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@DrawTarget@gfx@mozilla@@8 ; mozilla::gfx::DrawTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R13?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8 ; mozilla::RefCounted<mozilla::gfx::DrawTarget>::`RTTI	Base Class Descriptor at (4,-1,0,64)'
		dd offset ??_R13?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8 ; mozilla::detail::RefCounted<mozilla::gfx::DrawTarget,1>::`RTTI Base Class Descriptor at (4,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 0A034h
; COMDAT (pick any)
		public ??_R1A@?0A@EA@DrawTargetDual@gfx@mozilla@@8
; mozilla::gfx::DrawTargetDual::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@DrawTargetDual@gfx@mozilla@@8 dd offset ??_R0?AVDrawTargetDual@gfx@mozilla@@@8
					; DATA XREF: .rdata$r:mozilla::gfx::DrawTargetDual::`RTTI Base Class Array'o
					; mozilla::gfx::DrawTargetDual `RTTI Type Descriptor'
		dd 3, 0
		dd 0FFFFFFFFh, 0
		dd offset $SG36821+8	; "n failure: %s, at %s:%d\n"
		dd offset ??_R3DrawTargetDual@gfx@mozilla@@8 ; mozilla::gfx::DrawTargetDual::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 0A050h
; COMDAT (pick any)
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 0A054h
; COMDAT (pick any)
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A058h
; COMDAT (pick any)
		public __real@00000000
__real@00000000	dd 0			; DATA XREF: mozilla::gfx::Matrix::Matrix(void)+20r
					; mozilla::gfx::Matrix::Matrix(void)+30r ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 0A05Ch
; COMDAT (pick any)
		public __real@3f800000
__real@3f800000	dd 3F800000h		; DATA XREF: mozilla::gfx::Matrix::Matrix(void)+11r
					; mozilla::gfx::Matrix::Matrix(void)+40r
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_CRT$XCU	segment	dword public 'DATA' use32
		assume cs:_CRT$XCU
		;org 0A060h
_piecewise_construct$initializer$ dd offset ??__Epiecewise_construct@std@@YAXXZ	; std::`dynamic	initializer for	'piecewise_construct''(void)
_allocator_arg$initializer$ dd offset ??__Eallocator_arg@std@@YAXXZ ; std::`dynamic initializer	for 'allocator_arg''(void)
_CRT$XCU	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_CRT$XCU	segment	dword public 'DATA' use32
		assume cs:_CRT$XCU
		;org 0A068h
; COMDAT (pick associative to section at 8F10)
; public: static void (__cdecl *std::_Error_objects<int>::_Generic_object$initializer$)(void)
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
_CRT$XCU	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_CRT$XCU	segment	dword public 'DATA' use32
		assume cs:_CRT$XCU
		;org 0A06Ch
; COMDAT (pick associative to section at 8F14)
; public: static void (__cdecl *std::_Error_objects<int>::_Iostream_object$initializer$)(void)
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA	dd offset ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
_CRT$XCU	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_CRT$XCU	segment	dword public 'DATA' use32
		assume cs:_CRT$XCU
		;org 0A070h
; COMDAT (pick associative to section at 8F18)
; public: static void (__cdecl *std::_Error_objects<int>::_System_object$initializer$)(void)
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset	??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic initializer	for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)
_CRT$XCU	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_CRT$XCU	segment	dword public 'DATA' use32
		assume cs:_CRT$XCU
		;org 0A074h
; COMDAT (pick associative to section at 8F1C)
; public: static void (__cdecl *std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct	std::char_traits<char>,	class std::allocator<char>>>>::id$initializer$)(void)
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)
_CRT$XCU	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_CRT$XCU	segment	dword public 'DATA' use32
		assume cs:_CRT$XCU
		;org 0A078h
; COMDAT (pick associative to section at 8F20)
; public: static void (__cdecl *std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id$initializer$)(void)
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)
_CRT$XCU	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __purecall:near	; DATA XREF: .rdata:00008E64o
					; .rdata:00008E68o ...
; void *__cdecl	operator new(unsigned int)
		extrn ??2@YAPAXI@Z:near	; CODE XREF: mozilla::MakeAndAddRef<mozilla::gfx::DrawTargetDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)+48p
					; mozilla::MakeAndAddRef<mozilla::gfx::SourceSurfaceDual,RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &>(RefPtr<mozilla::gfx::DrawTarget> &,RefPtr<mozilla::gfx::DrawTarget> &)+48p ...
; void __cdecl operator	delete(void *)
		extrn ??3@YAXPAX@Z:near	; CODE XREF: __unwindfunclet$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$0+4p
					; __unwindfunclet$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$0+4p ...
; int __cdecl atexit(void (__cdecl *)())
		extrn _atexit:near	; CODE XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+12p
					; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+12p ...
		extrn __imp___invalid_parameter:near
					; CODE XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+ECp
					; std::_Atomic_store_4(ulong volatile *,ulong,std::memory_order)+DBp
					; DATA XREF: ...
; void __cdecl _free(void *Memory)
		extrn __imp__free:near	; CODE XREF: mozilla::gfx::UserData::Destroy(void)+7Bp
					; DATA XREF: mozilla::gfx::UserData::Destroy(void)+7Br
		extrn __imp___hypot:near ; CODE	XREF: _hypot+20p
					; DATA XREF: _hypot+20r
; void *__cdecl	_memmove(void *Dst, const void *Src, size_t Size)
		extrn __imp__memmove:near
					; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+28p
					; DATA XREF: std::char_traits<char>::move(char *,char const *,uint)+28r
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+25p
; size_t __cdecl strlen(const char *Str)
		extrn _strlen:near	; CODE XREF: std::char_traits<char>::length(char const *)+22p
; bool __cdecl std::uncaught_exception()
		extrn __imp_?uncaught_exception@std@@YA_NXZ:near
					; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+11p
					; DATA XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+11r
; int _printf(const char *Format, ...)
		extrn __imp__printf:near
					; CODE XREF: mozilla::gfx::BasicLogger::OutputMessage(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&,int,bool)+51p
					; DATA XREF: mozilla::gfx::BasicLogger::OutputMessage(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&,int,bool)+51r
		extrn __imp___CrtDbgReportW:near
					; CODE XREF: std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+BEp
					; std::_Atomic_store_4(ulong volatile *,ulong,std::memory_order)+ADp
					; DATA XREF: ...
; void __cdecl std::_Debug_message(const wchar_t *, const wchar_t *, unsigned int)
		extrn __imp_?_Debug_message@std@@YAXPB_W0I@Z:near
					; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+19p
					; std::_Atomic_fetch_add_4(ulong volatile *,ulong,std::memory_order)+87p ...
; _DWORD __thiscall std::_Container_base12::_Container_base12(std::_Container_base12 *__hidden this)
		extrn __imp_??0_Container_base12@std@@QAE@XZ:near
					; CODE XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+14p
					; DATA XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+14r
; _DWORD __thiscall std::_Container_base12::~_Container_base12(std::_Container_base12 *__hidden	this)
		extrn __imp_??1_Container_base12@std@@QAE@XZ:near
					; CODE XREF: std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)+14p
					; DATA XREF: std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)+14r
; void __thiscall std::_Container_base12::_Orphan_all(std::_Container_base12 *__hidden this)
		extrn __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ:near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+28p
					; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+28r
; void __cdecl std::_Xbad_alloc()
		extrn __imp_?_Xbad_alloc@std@@YAXXZ:near
					; CODE XREF: std::_Allocate<char>(uint,char *)+38p
					; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+3Ep
					; DATA XREF: ...
; void __cdecl std::_Xlength_error(const char *)
		extrn __imp_?_Xlength_error@std@@YAXPBD@Z:near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+16p
					; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+16r
; void __cdecl std::_Xout_of_range(const char *)
		extrn __imp_?_Xout_of_range@std@@YAXPBD@Z:near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+16p
					; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+16r
; _DWORD __thiscall std::locale::id::id(std::locale::id	*__hidden this,	unsigned int)
		extrn __imp_??0id@locale@std@@QAE@I@Z:near
					; CODE XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+Dp
					; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+Dp
					; DATA XREF: ...
; public: virtual void * __thiscall std::error_category::`vector deleting destructor'(unsigned int)
		extrn ??_Eerror_category@std@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:const std::error_category::`vftable'o
; const	char *__cdecl std::_Syserror_map(int)
		extrn __imp_?_Syserror_map@std@@YAPBDH@Z:near
					; CODE XREF: std::_System_error_category::default_error_condition(int)+15p
					; std::_Generic_error_category::message(int)+28p
					; DATA XREF: ...
; const	char *__cdecl std::_Winerror_map(int)
		extrn __imp_?_Winerror_map@std@@YAPBDH@Z:near
					; CODE XREF: std::_System_error_category::message(int)+28p
					; DATA XREF: std::_System_error_category::message(int)+28r
; public: virtual void * __thiscall std::_Generic_error_category::`vector deleting destructor'(unsigned int)
		extrn ??_E_Generic_error_category@std@@UAEPAXI@Z:near ;	weak
					; DATA XREF: .rdata:const std::_Generic_error_category::`vftable'o
; public: virtual void * __thiscall std::_Iostream_error_category::`vector deleting destructor'(unsigned int)
		extrn ??_E_Iostream_error_category@std@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:const std::_Iostream_error_category::`vftable'o
; public: virtual void * __thiscall std::_System_error_category::`vector deleting destructor'(unsigned int)
		extrn ??_E_System_error_category@std@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:const std::_System_error_category::`vftable'o
; bool __thiscall std::ios_base::good(std::ios_base *__hidden this)
		extrn __imp_?good@ios_base@std@@QBE_NXZ:near
					; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+4Ep
					; std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+DDp
					; DATA XREF: ...
; int __thiscall std::ios_base::flags(std::ios_base *__hidden this)
		extrn __imp_?flags@ios_base@std@@QBEHXZ:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+139p
					; DATA XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+139r
; __int64 __thiscall std::ios_base::width(std::ios_base	*__hidden this)
		extrn __imp_?width@ios_base@std@@QBE_JXZ:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+66p
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+94p ...
; __int64 __thiscall std::ios_base::width(std::ios_base	*__hidden this,	__int64)
		extrn __imp_?width@ios_base@std@@QAE_J_J@Z:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+34Fp
					; DATA XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+34Fr
; __declspec(dllimport)	protected: __thiscall std::basic_streambuf<char, struct	std::char_traits<char>>::basic_streambuf<char, struct std::char_traits<char>>(void)
		extrn __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(int)+33p
					; DATA XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(int)+33r
; __declspec(dllimport)	public:	virtual	__thiscall std::basic_streambuf<char, struct std::char_traits<char>>::~basic_streambuf<char, struct std::char_traits<char>>(void)
		extrn __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ:near
					; CODE XREF: __unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0+5p
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(void)+25p
					; DATA XREF: ...
; __declspec(dllimport)	public:	int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::sputc(char)
		extrn __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1CCp
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+2F1p
					; DATA XREF: ...
; __declspec(dllimport)	public:	__int64	__thiscall std::basic_streambuf<char, struct std::char_traits<char>>::sputn(char const *, __int64)
		extrn __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+247p
					; DATA XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+247r
; __declspec(dllimport)	protected: char	* __thiscall std::basic_streambuf<char,	struct std::char_traits<char>>::eback(void)const
		extrn __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)+6Ap
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)+82p ...
; __declspec(dllimport)	protected: char	* __thiscall std::basic_streambuf<char,	struct std::char_traits<char>>::gptr(void)const
		extrn __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char	const *,uint,int)+F9p
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+368p ...
; __declspec(dllimport)	protected: char	* __thiscall std::basic_streambuf<char,	struct std::char_traits<char>>::pbase(void)const
		extrn __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+CFp
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+2FEp ...
; __declspec(dllimport)	protected: char	* __thiscall std::basic_streambuf<char,	struct std::char_traits<char>>::pptr(void)const
		extrn __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)+28p
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+83p ...
; __declspec(dllimport)	protected: char	* __thiscall std::basic_streambuf<char,	struct std::char_traits<char>>::egptr(void)const
		extrn __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)+55p
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+113p ...
; __declspec(dllimport)	protected: void	__thiscall std::basic_streambuf<char, struct std::char_traits<char>>::gbump(int)
		extrn __imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z:near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)+DAp
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+1A6p ...
; __declspec(dllimport)	protected: void	__thiscall std::basic_streambuf<char, struct std::char_traits<char>>::setg(char	*, char	*, char	*)
		extrn __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z:near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char	const *,uint,int)+9Fp
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char const *,uint,int)+119p ...
; __declspec(dllimport)	protected: char	* __thiscall std::basic_streambuf<char,	struct std::char_traits<char>>::epptr(void)const
		extrn __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)+3Ep
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+B3p ...
; __declspec(dllimport)	protected: void	__thiscall std::basic_streambuf<char, struct std::char_traits<char>>::pbump(int)
		extrn __imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z:near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+35Dp
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+281p
					; DATA XREF: ...
; __declspec(dllimport)	protected: void	__thiscall std::basic_streambuf<char, struct std::char_traits<char>>::setp(char	*, char	*)
		extrn __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z:near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)+BCp
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+269p
					; DATA XREF: ...
; __declspec(dllimport)	protected: void	__thiscall std::basic_streambuf<char, struct std::char_traits<char>>::setp(char	*, char	*, char	*)
		extrn __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z:near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char	const *,uint,int)+E7p
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+E0p ...
; __declspec(dllimport)	protected: char	* __thiscall std::basic_streambuf<char,	struct std::char_traits<char>>::_Pninc(void)
		extrn __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:near
					; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+140p
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+3D0p
					; DATA XREF: ...
; __declspec(dllimport)	public:	virtual	__thiscall std::basic_ios<char,	struct std::char_traits<char>>::~basic_ios<char, struct	std::char_traits<char>>(void)
		extrn __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ:near
					; CODE XREF: __unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0+18p
					; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`vbase destructor(void)+22p
					; DATA XREF: ...
; __declspec(dllimport)	public:	void __thiscall	std::basic_ios<char, struct std::char_traits<char>>::setstate(int, bool)
		extrn __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:near
					; CODE XREF: __catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0+13p
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+3A7p
					; DATA XREF: ...
; __declspec(dllimport)	public:	class std::basic_ostream<char, struct std::char_traits<char>> *	__thiscall std::basic_ios<char,	struct std::char_traits<char>>::tie(void)const
		extrn __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:near
					; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+6Fp
					; std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+8Fp ...
; __declspec(dllimport)	public:	class std::basic_streambuf<char, struct	std::char_traits<char>>	* __thiscall std::basic_ios<char, struct std::char_traits<char>>::rdbuf(void)const
		extrn __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1B2p
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+226p	...
; __declspec(dllimport)	public:	char __thiscall	std::basic_ios<char, struct std::char_traits<char>>::fill(void)const
		extrn __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+193p
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+2B4p
					; DATA XREF: ...
; __declspec(dllimport)	protected: __thiscall std::basic_ios<char, struct std::char_traits<char>>::basic_ios<char, struct std::char_traits<char>>(void)
		extrn __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ:near
					; CODE XREF: std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>(int)+5Fp
					; DATA XREF: std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>(int)+5Fr
; __declspec(dllimport)	public:	void __thiscall	std::basic_ostream<char, struct	std::char_traits<char>>::_Osfx(void)
		extrn __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:near
					; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+2Cp
					; DATA XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+2Cr
; __declspec(dllimport)	public:	class std::basic_ostream<char, struct std::char_traits<char>> &	__thiscall std::basic_ostream<char, struct std::char_traits<char>>::operator<<(int)
		extrn __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:near
					; CODE XREF: mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::operator<<<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>>(mozilla::gfx::BaseSize<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>> const &)+6Ep
					; mozilla::gfx::Log<2,mozilla::gfx::BasicLogger>::operator<<<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>>(mozilla::gfx::BaseSize<int,mozilla::gfx::IntSizeTyped<mozilla::gfx::UnknownUnits>> const &)+86p ...
; __declspec(dllimport)	public:	class std::basic_ostream<char, struct std::char_traits<char>> &	__thiscall std::basic_ostream<char, struct std::char_traits<char>>::flush(void)
		extrn __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:near
					; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+C1p
					; DATA XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+C1r
; __declspec(dllimport)	public:	__thiscall std::basic_iostream<char, struct std::char_traits<char>>::basic_iostream<char, struct std::char_traits<char>>(class std::basic_streambuf<char, struct std::char_traits<char>> *)
		extrn __imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z:near
					; CODE XREF: std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>(int)+8Ap
					; DATA XREF: std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>(int)+8Ar
; __declspec(dllimport)	public:	virtual	__thiscall std::basic_iostream<char, struct std::char_traits<char>>::~basic_iostream<char, struct std::char_traits<char>>(void)
		extrn __imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ:near
					; CODE XREF: __unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1+8p
					; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream<char,std::char_traits<char>,std::allocator<char>>(void)+52p
					; DATA XREF: ...
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn __imp__TerminateProcess@8:near
					; CODE XREF: mozilla::gfx::DrawTarget::PopLayer(void)+33p
					; mozilla::gfx::DrawTarget::PushLayer(bool,float,mozilla::gfx::SourceSurface *,mozilla::gfx::Matrix const &,mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const &,bool)+33p
					; DATA XREF: ...
; HANDLE __stdcall GetCurrentProcess()
		extrn __imp__GetCurrentProcess@0:near
					; CODE XREF: mozilla::gfx::DrawTarget::PopLayer(void)+25p
					; mozilla::gfx::DrawTarget::PushLayer(bool,float,mozilla::gfx::SourceSurface *,mozilla::gfx::Matrix const &,mozilla::gfx::IntRectTyped<mozilla::gfx::UnknownUnits> const &,bool)+25p
					; DATA XREF: ...
; public: virtual void * __thiscall mozilla::gfx::Pattern::`vector deleting destructor'(unsigned int)
		extrn ??_EPattern@gfx@mozilla@@UAEPAXI@Z:near ;	weak
					; DATA XREF: .rdata:const mozilla::gfx::Pattern::`vftable'o
; public: virtual void * __thiscall mozilla::gfx::SurfacePattern::`vector deleting destructor'(unsigned int)
		extrn ??_ESurfacePattern@gfx@mozilla@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:const mozilla::gfx::SurfacePattern::`vftable'o
; public: virtual void * __thiscall mozilla::gfx::SourceSurface::`vector deleting destructor'(unsigned int)
		extrn ??_ESourceSurface@gfx@mozilla@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:const mozilla::gfx::SourceSurface::`vftable'o
; public: virtual void __thiscall mozilla::gfx::DrawTarget::DrawCapturedDT(class mozilla::gfx::DrawTargetCapture *, class mozilla::gfx::Matrix const &)
		extrn ?DrawCapturedDT@DrawTarget@gfx@mozilla@@UAEXPAVDrawTargetCapture@23@ABVMatrix@23@@Z:near
					; DATA XREF: .rdata:00009164o
					; .rdata:00009244o
; public: virtual struct already_AddRefed<class	mozilla::gfx::DrawTargetCapture> __thiscall mozilla::gfx::DrawTarget::CreateCaptureDT(struct mozilla::gfx::IntSizeTyped<struct mozilla::gfx::UnknownUnits> const &)
		extrn ?CreateCaptureDT@DrawTarget@gfx@mozilla@@UAE?AU?$already_AddRefed@VDrawTargetCapture@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z:near
					; DATA XREF: .rdata:000091C4o
					; .rdata:000092A4o
; public: virtual void * __thiscall mozilla::gfx::DrawTarget::`vector deleting destructor'(unsigned int)
		extrn ??_EDrawTarget@gfx@mozilla@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:const mozilla::gfx::DrawTarget::`vftable'o
; public: virtual void * __thiscall mozilla::gfx::SourceSurfaceDual::`vector deleting destructor'(unsigned int)
		extrn ??_ESourceSurfaceDual@gfx@mozilla@@UAEPAXI@Z:near	; weak
					; DATA XREF: .rdata:const mozilla::gfx::SourceSurfaceDual::`vftable'o
; public: virtual void * __thiscall mozilla::gfx::DrawTargetDual::`vector deleting destructor'(unsigned int)
		extrn ??_EDrawTargetDual@gfx@mozilla@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:const mozilla::gfx::DrawTargetDual::`vftable'o
; public: virtual void * __thiscall std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::`vector deleting destructor'(unsigned int)
		extrn ??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:const std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`vftable'o
; public: virtual void * __thiscall std::basic_stringstream<char, struct std::char_traits<char>, class std::allocator<char>>::`vector deleting destructor'(unsigned int)
		extrn ??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:near ; weak
					; CODE XREF: [thunk]:std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::`vector	deleting destructor'`vtordisp{4294967292,0}' (uint)+3j
; public: virtual void __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::_Lock(void)
		extrn ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:near
					; DATA XREF: .rdata:000092E8o
; public: virtual void __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::_Unlock(void)
		extrn ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:near
					; DATA XREF: .rdata:000092ECo
; protected: virtual void __thiscall std::basic_streambuf<char,	struct std::char_traits<char>>::imbue(class std::locale	const &)
		extrn ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z:near
					; DATA XREF: .rdata:0000931Co
; protected: virtual class std::basic_streambuf<char, struct std::char_traits<char>> * __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::setbuf(char *, __int64)
		extrn ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z:near
					; DATA XREF: .rdata:00009314o
; protected: virtual __int64 __thiscall	std::basic_streambuf<char, struct std::char_traits<char>>::showmanyc(void)
		extrn ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ:near
					; DATA XREF: .rdata:000092F8o
; protected: virtual int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::sync(void)
		extrn ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:near
					; DATA XREF: .rdata:00009318o
; protected: virtual int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::uflow(void)
		extrn ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:near
					; DATA XREF: .rdata:00009300o
; protected: virtual __int64 __thiscall	std::basic_streambuf<char, struct std::char_traits<char>>::xsgetn(char *, __int64)
		extrn ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z:near
					; DATA XREF: .rdata:00009304o
; protected: virtual __int64 __thiscall	std::basic_streambuf<char, struct std::char_traits<char>>::xsputn(char const *,	__int64)
		extrn ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z:near
					; DATA XREF: .rdata:00009308o
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near
					; CODE XREF: mozilla::gfx::DrawTargetDual::DrawSurface(mozilla::gfx::SourceSurface *,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::DrawSurfaceOptions const	&,mozilla::gfx::DrawOptions const &)+AAp
					; mozilla::gfx::DrawTargetDual::MaskSurface(mozilla::gfx::Pattern const	&,mozilla::gfx::SourceSurface *,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::DrawOptions const &)+10Dp ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: mozilla::gfx::DrawTargetDual::MaskSurface(mozilla::gfx::Pattern const &,mozilla::gfx::SourceSurface *,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::DrawOptions	const &)+126p
					; mozilla::gfx::DrawTargetDual::FillRect(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::Pattern const &,mozilla::gfx::DrawOptions const &)+101p ...
; __stdcall _CxxThrowException(x, x)
		extrn __CxxThrowException@8:near
					; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1+10p
		extrn __RTC_CheckEsp:near
					; CODE XREF: mozilla::gfx::DrawTargetDual::DrawSurface(mozilla::gfx::SourceSurface *,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::DrawSurfaceOptions const	&,mozilla::gfx::DrawOptions const &)+63p
					; mozilla::gfx::DrawTargetDual::DrawSurface(mozilla::gfx::SourceSurface	*,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::DrawSurfaceOptions const &,mozilla::gfx::DrawOptions const &)+9Bp ...
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn ___CxxFrameHandler3:near
					; CODE XREF: __ehhandler$?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z+23j
					; __ehhandler$?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z+23j ...
; __declspec(dllimport)	__int64	const std::_BADOFF
		extrn __imp_?_BADOFF@std@@3_JB:near
					; DATA XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+10Br
					; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int):loc_7B72r ...
; const	type_info::`vftable'
		extrn ??_7type_info@@6B@:near
					; DATA XREF: .data$r:std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>> `RTTI Type Descriptor'o
					; .data$r:std::basic_streambuf<char,std::char_traits<char>> `RTTI Type Descriptor'o ...
; public: static int mozilla::gfx::LoggingPrefs::sGfxLogLevel
		extrn ?sGfxLogLevel@LoggingPrefs@gfx@mozilla@@2HA:near
					; DATA XREF: mozilla::gfx::BasicLogger::OutputMessage(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&,int,bool)+Cr
					; mozilla::gfx::BasicLogger::OutputMessage(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,int,bool)+16r ...
		extrn ___security_cookie:near
					; DATA XREF: mozilla::gfx::DrawTargetDual::MaskSurface(mozilla::gfx::Pattern const &,mozilla::gfx::SourceSurface *,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::DrawOptions	const &)+2Dr
					; mozilla::gfx::DrawTargetDual::FillRect(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &,mozilla::gfx::Pattern const &,mozilla::gfx::DrawOptions const &)+2Dr ...
		extrn __fltused:near


		end
