;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	D0100E2C100910EF84ED0A1891456FE6
; Input	CRC32 :	AC28D36F

; File Name   :	D:\compspace\objfiles\firefox\gfx2d\Matrix.obj
; Format      :	COFF (X386MAGIC)
; includelib "msvcprtd"
; must resolve:	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
; must resolve:	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
; must resolve:	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
; includelib "MSVCRTD"
; includelib "OLDNAMES"

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
$SG40038	dd 5D203Bh		; DATA XREF: mozilla::gfx::operator<<(std::basic_ostream<char,std::char_traits<char>> &,mozilla::gfx::Matrix const &)+1Ao
$SG40039	dd offset aRtionFailureSA
					; DATA XREF: mozilla::gfx::operator<<(std::basic_ostream<char,std::char_traits<char>> &,mozilla::gfx::Matrix const &)+2Fo
					; "rtion failure: %s, at %s:%d\n"
; char _SG40040[]
$SG40040	dd offset loc_203A+1	; DATA XREF: mozilla::gfx::operator<<(std::basic_ostream<char,std::char_traits<char>> &,mozilla::gfx::Matrix const &)+44o
; char _SG40041[]
$SG40041	dd offset aRtionFailureSA
					; DATA XREF: mozilla::gfx::operator<<(std::basic_ostream<char,std::char_traits<char>> &,mozilla::gfx::Matrix const &)+59o
					; "rtion failure: %s, at %s:%d\n"
; char _SG40042[]
$SG40042	dd offset loc_203A+1	; DATA XREF: mozilla::gfx::operator<<(std::basic_ostream<char,std::char_traits<char>> &,mozilla::gfx::Matrix const &)+6Eo
$SG40043	dd offset aRtionFailureSA
					; DATA XREF: mozilla::gfx::operator<<(std::basic_ostream<char,std::char_traits<char>> &,mozilla::gfx::Matrix const &)+83o
					; "rtion failure: %s, at %s:%d\n"
; char _SG40044[]
$SG40044	dd offset loc_205B	; DATA XREF: mozilla::gfx::operator<<(std::basic_ostream<char,std::char_traits<char>> &,mozilla::gfx::Matrix const &)+9Ao
$SG4889		dd 65737341h
aRtionFailureSA	db 'rtion failure: %s, at %s:%d',0Ah,0 ; DATA XREF: .rdata:$SG40039o
					; .rdata:$SG40041o ...
		align 10h
$SG4895		db 'Hit MOZ_CRASH(%s) at %s:%d',0Ah,0
					; DATA XREF: .xdata$x:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5o
					; .xdata$x:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4o ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 5Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; bool __cdecl mozilla::gfx::FuzzyEqual(float, float, float)
?FuzzyEqual@gfx@mozilla@@YA_NMMM@Z proc	near
					; CODE XREF: mozilla::gfx::NudgeToInteger(float	*)+96p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		movss	xmm0, [ebp+arg_0]
		addss	xmm0, [ebp+arg_8]
		comiss	xmm0, [ebp+arg_4]
		jb	short loc_87
		movss	xmm0, [ebp+arg_0]
		subss	xmm0, [ebp+arg_8]
		movss	xmm1, [ebp+arg_4]
		comiss	xmm1, xmm0
		jb	short loc_87
		mov	al, 1
		jmp	short loc_89
; ---------------------------------------------------------------------------

loc_87:					; CODE XREF: mozilla::gfx::FuzzyEqual(float,float,float)+11j
					; mozilla::gfx::FuzzyEqual(float,float,float)+25j
		xor	al, al

loc_89:					; CODE XREF: mozilla::gfx::FuzzyEqual(float,float,float)+29j
		pop	ebp
		retn
?FuzzyEqual@gfx@mozilla@@YA_NMMM@Z endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl mozilla::gfx::NudgeToInteger(float *)
?NudgeToInteger@gfx@mozilla@@YAXPAM@Z proc near
					; CODE XREF: mozilla::gfx::Matrix::NudgeToIntegers(void)+12p
					; mozilla::gfx::Matrix::NudgeToIntegers(void)+21p ...

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		movss	xmm0, dword ptr	[eax]
		addss	xmm0, ds:__real@3f000000
		push	ecx
		movss	[esp+0Ch+var_C], xmm0
		call	_floorf
		add	esp, 4
		fstp	[ebp+var_4]
		movss	xmm0, [ebp+var_4]
		ucomiss	xmm0, ds:__real@00000000
		lahf
		test	ah, 44h
		jp	short loc_E1
		movss	xmm0, ds:__real@358637bd
		movss	[ebp+var_8], xmm0
		jmp	short loc_FF
; ---------------------------------------------------------------------------

loc_E1:					; CODE XREF: mozilla::gfx::NudgeToInteger(float	*)+44j
		movss	xmm0, [ebp+var_4]
		mulss	xmm0, ds:__real@358637bd
		push	ecx		; float
		movss	[esp+0Ch+var_C], xmm0
		call	?fabs@@YAMM@Z	; fabs(float)
		add	esp, 4
		fstp	[ebp+var_8]

loc_FF:					; CODE XREF: mozilla::gfx::NudgeToInteger(float	*)+53j
		push	ecx
		movss	xmm0, [ebp+var_8]
		movss	[esp+0Ch+var_C], xmm0
		mov	ecx, [ebp+arg_0]
		push	ecx
		movss	xmm0, dword ptr	[ecx]
		movss	[esp+10h+var_10], xmm0
		push	ecx
		movss	xmm0, [ebp+var_4]
		movss	[esp+14h+var_14], xmm0
		call	?FuzzyEqual@gfx@mozilla@@YA_NMMM@Z ; mozilla::gfx::FuzzyEqual(float,float,float)
		add	esp, 0Ch
		movzx	edx, al
		test	edx, edx
		jz	short loc_13D
		mov	eax, [ebp+arg_0]
		movss	xmm0, [ebp+var_4]
		movss	dword ptr [eax], xmm0

loc_13D:				; CODE XREF: mozilla::gfx::NudgeToInteger(float	*)+A3j
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?NudgeToInteger@gfx@mozilla@@YAXPAM@Z endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl mozilla::gfx::operator<<(int, char *Str)
		public ??6gfx@mozilla@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV23@ABVMatrix@01@@Z
??6gfx@mozilla@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV23@ABVMatrix@01@@Z	proc near

var_4C		= dword	ptr -4Ch
var_44		= dword	ptr -44h
var_3C		= dword	ptr -3Ch
var_34		= dword	ptr -34h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		push	edi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		push	offset $SG40038
		mov	esi, esp
		mov	eax, [ebp+Str]
		push	ecx
		movss	xmm0, dword ptr	[eax+14h]
		movss	[esp+24h+var_24], xmm0
		push	offset $SG40039
		mov	edi, esp
		mov	ecx, [ebp+Str]
		push	ecx
		movss	xmm0, dword ptr	[ecx+10h]
		movss	[esp+2Ch+var_2C], xmm0
		push	offset $SG40040	; Str
		mov	ebx, esp
		mov	edx, [ebp+Str]
		push	ecx		; Str
		movss	xmm0, dword ptr	[edx+0Ch]
		movss	[esp+34h+var_34], xmm0
		push	offset $SG40041	; Str
		mov	eax, esp
		mov	ecx, [ebp+Str]
		push	ecx		; Str
		movss	xmm0, dword ptr	[ecx+8]
		movss	[esp+3Ch+var_3C], xmm0
		push	offset $SG40042	; Str
		mov	ecx, esp
		mov	edx, [ebp+Str]
		push	ecx		; Str
		movss	xmm0, dword ptr	[edx+4]
		movss	[esp+44h+var_44], xmm0
		push	offset $SG40043
		mov	edx, esp
		mov	[ebp+var_4], esi
		mov	esi, [ebp+Str]
		push	ecx
		movss	xmm0, dword ptr	[esi]
		movss	[esp+4Ch+var_4C], xmm0
		push	offset $SG40044	; Str
		mov	esi, [ebp+arg_0]
		push	esi		; int
		mov	[ebp+var_8], eax
		mov	[ebp+var_C], ecx
		mov	[ebp+var_10], edx
		call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
		add	esp, 8
		mov	ecx, eax
		call	dword ptr ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z	; std::basic_ostream<char,std::char_traits<char>>::operator<<(float)
		mov	esi, [ebp+var_10]
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax		; int
		call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
		add	esp, 8
		mov	ecx, eax
		call	dword ptr ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z	; std::basic_ostream<char,std::char_traits<char>>::operator<<(float)
		mov	esi, [ebp+var_C]
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax		; int
		call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
		add	esp, 8
		mov	ecx, eax
		call	dword ptr ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z	; std::basic_ostream<char,std::char_traits<char>>::operator<<(float)
		mov	esi, [ebp+var_8]
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax		; int
		call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
		add	esp, 8
		mov	ecx, eax
		call	dword ptr ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z	; std::basic_ostream<char,std::char_traits<char>>::operator<<(float)
		cmp	ebx, esp
		call	__RTC_CheckEsp
		push	eax		; int
		call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
		add	esp, 8
		mov	ecx, eax
		call	dword ptr ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z	; std::basic_ostream<char,std::char_traits<char>>::operator<<(float)
		cmp	edi, esp
		call	__RTC_CheckEsp
		push	eax		; int
		call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
		add	esp, 8
		mov	ecx, eax
		call	dword ptr ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z	; std::basic_ostream<char,std::char_traits<char>>::operator<<(float)
		mov	esi, [ebp+var_4]
		cmp	esi, esp
		call	__RTC_CheckEsp
		push	eax		; int
		call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
		add	esp, 8
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??6gfx@mozilla@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV23@ABVMatrix@01@@Z	endp

; ---------------------------------------------------------------------------
		db 0Fh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: struct mozilla::gfx::RectTyped<struct	mozilla::gfx::UnknownUnits, float> __thiscall mozilla::gfx::Matrix::TransformBounds(struct mozilla::gfx::RectTyped<struct mozilla::gfx::UnknownUnits, float> const &)const
		public ?TransformBounds@Matrix@gfx@mozilla@@QBE?AU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU423@@Z
?TransformBounds@Matrix@gfx@mozilla@@QBE?AU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU423@@Z proc near

var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_84		= byte ptr -84h
var_7C		= byte ptr -7Ch
var_74		= byte ptr -74h
var_6C		= byte ptr -6Ch
var_64		= byte ptr -64h
var_5C		= byte ptr -5Ch
var_54		= byte ptr -54h
var_4C		= byte ptr -4Ch
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 84h
		push	edi
		push	ecx
		lea	edi, [ebp+var_84]
		mov	ecx, 21h ; '!'
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		mov	[ebp+var_4], eax
		mov	[ebp+var_8], ecx
		push	offset ??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@XZ	; mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>::PointTyped<mozilla::gfx::UnknownUnits,float>(void)
		push	4
		push	8
		lea	eax, [ebp+var_30]
		push	eax
		call	??_H@YGXPAXIHP6EPAX0@Z@Z ; `vector constructor iterator'(void *,uint,int,void * (*)(void *))
		lea	ecx, [ebp+var_4C]
		push	ecx
		mov	ecx, [ebp+arg_4]
		call	?TopLeft@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@XZ ; mozilla::gfx::BaseRect<float,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::SizeTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::MarginTyped<mozilla::gfx::UnknownUnits,float>>::TopLeft(void)
		push	eax
		lea	edx, [ebp+var_54]
		push	edx
		mov	ecx, [ebp+var_8]
		call	??DMatrix@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABU312@@Z ; mozilla::gfx::Matrix::operator*(mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float> const &)
		mov	ecx, [eax]
		mov	edx, [eax+4]
		mov	eax, 8
		imul	eax, 0
		mov	[ebp+eax+var_30], ecx
		mov	[ebp+eax+var_2C], edx
		lea	ecx, [ebp+var_5C]
		push	ecx
		mov	ecx, [ebp+arg_4]
		call	?TopRight@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@XZ ; mozilla::gfx::BaseRect<float,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::SizeTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::MarginTyped<mozilla::gfx::UnknownUnits,float>>::TopRight(void)
		push	eax
		lea	edx, [ebp+var_64]
		push	edx
		mov	ecx, [ebp+var_8]
		call	??DMatrix@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABU312@@Z ; mozilla::gfx::Matrix::operator*(mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float> const &)
		mov	ecx, [eax]
		mov	edx, [eax+4]
		mov	eax, 8
		shl	eax, 0
		mov	[ebp+eax+var_30], ecx
		mov	[ebp+eax+var_2C], edx
		lea	ecx, [ebp+var_6C]
		push	ecx
		mov	ecx, [ebp+arg_4]
		call	?BottomLeft@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@XZ ; mozilla::gfx::BaseRect<float,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::SizeTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::MarginTyped<mozilla::gfx::UnknownUnits,float>>::BottomLeft(void)
		push	eax
		lea	edx, [ebp+var_74]
		push	edx
		mov	ecx, [ebp+var_8]
		call	??DMatrix@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABU312@@Z ; mozilla::gfx::Matrix::operator*(mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float> const &)
		mov	ecx, [eax]
		mov	edx, [eax+4]
		mov	eax, 8
		shl	eax, 1
		mov	[ebp+eax+var_30], ecx
		mov	[ebp+eax+var_2C], edx
		lea	ecx, [ebp+var_7C]
		push	ecx
		mov	ecx, [ebp+arg_4]
		call	?BottomRight@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@XZ ;	mozilla::gfx::BaseRect<float,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::SizeTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::MarginTyped<mozilla::gfx::UnknownUnits,float>>::BottomRight(void)
		push	eax
		lea	edx, [ebp+var_84]
		push	edx
		mov	ecx, [ebp+var_8]
		call	??DMatrix@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABU312@@Z ; mozilla::gfx::Matrix::operator*(mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float> const &)
		mov	ecx, [eax]
		mov	edx, [eax+4]
		mov	eax, 8
		imul	eax, 3
		mov	[ebp+eax+var_30], ecx
		mov	[ebp+eax+var_2C], edx
		mov	ecx, 8
		imul	edx, ecx, 0
		movss	xmm0, [ebp+edx+var_30]
		movss	[ebp+var_3C], xmm0
		movss	xmm0, [ebp+var_3C]
		movss	[ebp+var_38], xmm0
		mov	eax, 8
		imul	ecx, eax, 0
		movss	xmm0, [ebp+ecx+var_2C]
		movss	[ebp+var_44], xmm0
		movss	xmm0, [ebp+var_44]
		movss	[ebp+var_40], xmm0
		mov	[ebp+var_C], 1
		jmp	short loc_3FF
; ---------------------------------------------------------------------------

loc_3F6:				; CODE XREF: mozilla::gfx::Matrix::TransformBounds(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &):loc_479j
		mov	edx, [ebp+var_C]
		add	edx, 1
		mov	[ebp+var_C], edx

loc_3FF:				; CODE XREF: mozilla::gfx::Matrix::TransformBounds(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &)+138j
		cmp	[ebp+var_C], 4
		jge	short loc_47E
		mov	eax, [ebp+var_C]
		movss	xmm0, [ebp+var_38]
		comiss	xmm0, [ebp+eax*8+var_30]
		jbe	short loc_422
		mov	ecx, [ebp+var_C]
		movss	xmm0, [ebp+ecx*8+var_30]
		movss	[ebp+var_38], xmm0

loc_422:				; CODE XREF: mozilla::gfx::Matrix::TransformBounds(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &)+156j
		mov	edx, [ebp+var_C]
		movss	xmm0, [ebp+edx*8+var_30]
		comiss	xmm0, [ebp+var_3C]
		jbe	short loc_43F
		mov	eax, [ebp+var_C]
		movss	xmm0, [ebp+eax*8+var_30]
		movss	[ebp+var_3C], xmm0

loc_43F:				; CODE XREF: mozilla::gfx::Matrix::TransformBounds(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &)+173j
		mov	ecx, [ebp+var_C]
		movss	xmm0, [ebp+var_40]
		comiss	xmm0, [ebp+ecx*8+var_2C]
		jbe	short loc_45C
		mov	edx, [ebp+var_C]
		movss	xmm0, [ebp+edx*8+var_2C]
		movss	[ebp+var_40], xmm0

loc_45C:				; CODE XREF: mozilla::gfx::Matrix::TransformBounds(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &)+190j
		mov	eax, [ebp+var_C]
		movss	xmm0, [ebp+eax*8+var_2C]
		comiss	xmm0, [ebp+var_44]
		jbe	short loc_479
		mov	ecx, [ebp+var_C]
		movss	xmm0, [ebp+ecx*8+var_2C]
		movss	[ebp+var_44], xmm0

loc_479:				; CODE XREF: mozilla::gfx::Matrix::TransformBounds(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &)+1ADj
		jmp	loc_3F6
; ---------------------------------------------------------------------------

loc_47E:				; CODE XREF: mozilla::gfx::Matrix::TransformBounds(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &)+147j
		movss	xmm0, [ebp+var_44]
		subss	xmm0, [ebp+var_40]
		push	ecx
		movss	[esp+8Ch+var_8C], xmm0
		movss	xmm0, [ebp+var_3C]
		subss	xmm0, [ebp+var_38]
		push	ecx
		movss	[esp+90h+var_90], xmm0
		push	ecx
		movss	xmm0, [ebp+var_40]
		movss	[esp+94h+var_94], xmm0
		push	ecx
		movss	xmm0, [ebp+var_38]
		movss	[esp+98h+var_98], xmm0
		mov	ecx, [ebp+arg_0]
		call	??0?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@MMMM@Z ; mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float>::RectTyped<mozilla::gfx::UnknownUnits,float>(float,float,float,float)
		mov	eax, [ebp+arg_0]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN12
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		mov	ecx, [ebp+var_4]
		xor	ecx, ebp
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		add	esp, 84h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?TransformBounds@Matrix@gfx@mozilla@@QBE?AU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU423@@Z endp

; ---------------------------------------------------------------------------
		align 10h
$LN12		dd 1			; DATA XREF: mozilla::gfx::Matrix::TransformBounds(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &)+207o
		dd offset $LN11
$LN11		dd 0FFFFFFD0h, 20h	; DATA XREF: .text$mn:000004F4o
		dd offset $LN10		; "quad"
$LN10		db 'quad',0             ; DATA XREF: .text$mn:00000500o
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static class mozilla::gfx::Matrix __cdecl mozilla::gfx::Matrix::Rotation(float)
		public ?Rotation@Matrix@gfx@mozilla@@SA?AV123@M@Z
?Rotation@Matrix@gfx@mozilla@@SA?AV123@M@Z proc	near

var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		push	edi
		lea	edi, [ebp+var_28]
		mov	ecx, 0Ah
		mov	eax, 0CCCCCCCCh
		rep stosd
		lea	ecx, [ebp+var_1C] ; this
		call	??0Matrix@gfx@mozilla@@QAE@XZ ;	mozilla::gfx::Matrix::Matrix(void)
		push	ecx
		movss	xmm0, [ebp+arg_4]
		movss	[esp+30h+var_30], xmm0
		call	_sinf
		add	esp, 4
		fstp	[ebp+var_24]
		push	ecx
		movss	xmm0, [ebp+arg_4]
		movss	[esp+30h+var_30], xmm0
		call	_cosf
		add	esp, 4
		fstp	[ebp+var_28]
		movss	xmm0, [ebp+var_28]
		movss	[ebp+var_1C], xmm0
		movss	xmm0, [ebp+var_24]
		movss	[ebp+var_18], xmm0
		movss	xmm0, [ebp+var_24]
		xorps	xmm0, ds:__xmm@80000000800000008000000080000000
		movss	[ebp+var_14], xmm0
		movss	xmm0, [ebp+var_28]
		movss	[ebp+var_10], xmm0
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_1C]
		mov	[eax], ecx
		mov	edx, [ebp+var_18]
		mov	[eax+4], edx
		mov	ecx, [ebp+var_14]
		mov	[eax+8], ecx
		mov	edx, [ebp+var_10]
		mov	[eax+0Ch], edx
		mov	ecx, [ebp+var_C]
		mov	[eax+10h], ecx
		mov	edx, [ebp+var_8]
		mov	[eax+14h], edx
		mov	eax, [ebp+arg_0]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_2
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	edi
		add	esp, 28h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?Rotation@Matrix@gfx@mozilla@@SA?AV123@M@Z endp

; ---------------------------------------------------------------------------
		align 10h
$LN5_2		dd 1			; DATA XREF: mozilla::gfx::Matrix::Rotation(float)+A6o
		dd offset $LN4_2
$LN4_2		dd 0FFFFFFE4h, 18h	; DATA XREF: .text$mn:000005D4o
		dd offset $LN3_2	; "newMatrix"
$LN3_2		db 'newMatrix',0        ; DATA XREF: .text$mn:000005E0o
		db 0Eh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct mozilla::gfx::Matrix *__thiscall mozilla::gfx::Matrix::NudgeToIntegers(mozilla::gfx::Matrix *__hidden this)
		public ?NudgeToIntegers@Matrix@gfx@mozilla@@QAEAAV123@XZ
?NudgeToIntegers@Matrix@gfx@mozilla@@QAEAAV123@XZ proc near

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		push	eax
		call	?NudgeToInteger@gfx@mozilla@@YAXPAM@Z ;	mozilla::gfx::NudgeToInteger(float *)
		add	esp, 4
		mov	ecx, [ebp+var_4]
		add	ecx, 4
		push	ecx
		call	?NudgeToInteger@gfx@mozilla@@YAXPAM@Z ;	mozilla::gfx::NudgeToInteger(float *)
		add	esp, 4
		mov	edx, [ebp+var_4]
		add	edx, 8
		push	edx
		call	?NudgeToInteger@gfx@mozilla@@YAXPAM@Z ;	mozilla::gfx::NudgeToInteger(float *)
		add	esp, 4
		mov	eax, [ebp+var_4]
		add	eax, 0Ch
		push	eax
		call	?NudgeToInteger@gfx@mozilla@@YAXPAM@Z ;	mozilla::gfx::NudgeToInteger(float *)
		add	esp, 4
		mov	ecx, [ebp+var_4]
		add	ecx, 10h
		push	ecx
		call	?NudgeToInteger@gfx@mozilla@@YAXPAM@Z ;	mozilla::gfx::NudgeToInteger(float *)
		add	esp, 4
		mov	edx, [ebp+var_4]
		add	edx, 14h
		push	edx
		call	?NudgeToInteger@gfx@mozilla@@YAXPAM@Z ;	mozilla::gfx::NudgeToInteger(float *)
		add	esp, 4
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?NudgeToIntegers@Matrix@gfx@mozilla@@QAEAAV123@XZ endp

; ---------------------------------------------------------------------------
		db 0Ah dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; double __cdecl mozilla::gfx::SafeTangent(mozilla::gfx	*this, double)
		public ?SafeTangent@gfx@mozilla@@YANN@Z
?SafeTangent@gfx@mozilla@@YANN@Z proc near

var_20		= qword	ptr -20h
var_18		= qword	ptr -18h
var_10		= qword	ptr -10h
var_8		= qword	ptr -8
this		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, 0CCCCCCCCh
		mov	dword ptr [ebp+var_18],	eax
		mov	dword ptr [ebp+var_18+4], eax
		mov	dword ptr [ebp+var_10],	eax
		mov	dword ptr [ebp+var_10+4], eax
		mov	dword ptr [ebp+var_8], eax
		mov	dword ptr [ebp+var_8+4], eax
		movsd	xmm0, ds:__real@3f1a36e2eb1c432d
		movsd	[ebp+var_8], xmm0
		sub	esp, 8
		movsd	xmm0, qword ptr	[ebp+this]
		movsd	[esp+20h+var_20], xmm0
		call	_sin
		add	esp, 8
		fstp	[ebp+var_10]
		sub	esp, 8
		movsd	xmm0, qword ptr	[ebp+this]
		movsd	[esp+20h+var_20], xmm0
		call	_cos
		add	esp, 8
		fstp	[ebp+var_18]
		movsd	xmm0, [ebp+var_18]
		comisd	xmm0, ds:__real@0000000000000000
		jb	short loc_6FD
		movsd	xmm0, [ebp+var_8]
		comisd	xmm0, [ebp+var_18]
		jbe	short loc_6FD
		movsd	xmm0, [ebp+var_8]
		movsd	[ebp+var_18], xmm0
		jmp	short loc_736
; ---------------------------------------------------------------------------

loc_6FD:				; CODE XREF: mozilla::gfx::SafeTangent(double)+67j
					; mozilla::gfx::SafeTangent(double)+73j
		movsd	xmm0, ds:__real@0000000000000000
		comisd	xmm0, [ebp+var_18]
		jbe	short loc_736
		movsd	xmm0, [ebp+var_8]
		xorpd	xmm0, ds:__xmm@80000000000000008000000000000000
		movsd	xmm1, [ebp+var_18]
		comisd	xmm1, xmm0
		jb	short loc_736
		movsd	xmm0, [ebp+var_8]
		xorpd	xmm0, ds:__xmm@80000000000000008000000000000000
		movsd	[ebp+var_18], xmm0

loc_736:				; CODE XREF: mozilla::gfx::SafeTangent(double)+7Fj
					; mozilla::gfx::SafeTangent(double)+8Ej ...
		movsd	xmm0, [ebp+var_10]
		divsd	xmm0, [ebp+var_18]
		sub	esp, 8
		movsd	[esp+20h+var_20], xmm0
		call	?FlushToZero@gfx@mozilla@@YANN@Z ; mozilla::gfx::FlushToZero(double)
		add	esp, 8
		add	esp, 18h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?SafeTangent@gfx@mozilla@@YANN@Z endp

; ---------------------------------------------------------------------------
		db 0Eh dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; double __cdecl mozilla::gfx::FlushToZero(mozilla::gfx	*this, double)
		public ?FlushToZero@gfx@mozilla@@YANN@Z
?FlushToZero@gfx@mozilla@@YANN@Z proc near
					; CODE XREF: mozilla::gfx::SafeTangent(double)+CCp

this		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		movsd	xmm0, qword ptr	[ebp+this]
		comisd	xmm0, ds:__real@be80000000000000
		jbe	short loc_793
		movsd	xmm0, ds:__real@3e80000000000000
		comisd	xmm0, qword ptr	[ebp+this]
		jbe	short loc_793
		fldz
		jmp	short loc_796
; ---------------------------------------------------------------------------
		jmp	short loc_796
; ---------------------------------------------------------------------------

loc_793:				; CODE XREF: mozilla::gfx::FlushToZero(double)+10j
					; mozilla::gfx::FlushToZero(double)+1Fj
		fld	qword ptr [ebp+this]

loc_796:				; CODE XREF: mozilla::gfx::FlushToZero(double)+23j
					; mozilla::gfx::FlushToZero(double)+25j
		pop	ebp
		retn
?FlushToZero@gfx@mozilla@@YANN@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 798h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl std::operator<<<std::char_traits<char>>(int, char	*Str)
		public ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z proc near
					; CODE XREF: mozilla::gfx::operator<<(std::basic_ostream<char,std::char_traits<char>> &,mozilla::gfx::Matrix const &)+ACp
					; mozilla::gfx::operator<<(std::basic_ostream<char,std::char_traits<char>> &,mozilla::gfx::Matrix const	&)+C7p	...

var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_7D		= byte ptr -7Dh
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_65		= byte ptr -65h
var_64		= dword	ptr -64h
var_60		= qword	ptr -60h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_30		= byte ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch

; FUNCTION CHUNK AT 00000B1C SIZE 00000009 BYTES
; FUNCTION CHUNK AT 00000B2C SIZE 00000068 BYTES

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
		mov	eax, large fs:0
		push	eax
		push	ecx
		sub	esp, 78h
		push	ebx
		push	esi
		push	edi
		lea	edi, [ebp+var_88]
		mov	ecx, 1Eh
		mov	eax, 0CCCCCCCCh
		rep stosd
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_14], 0
		mov	eax, [ebp+Str]
		push	eax		; Str
		call	?length@?$char_traits@D@std@@SAIPBD@Z ;	std::char_traits<char>::length(char const *)
		add	esp, 4
		xor	ecx, ecx
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], ecx
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	ecx, [ebp+arg_0]
		add	ecx, [eax+4]	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?width@ios_base@std@@QBE_JXZ	; std::ios_base::width(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_50], eax
		mov	[ebp+var_4C], edx
		cmp	[ebp+var_4C], 0
		jl	short loc_879
		jg	short loc_81F
		cmp	[ebp+var_50], 0
		jbe	short loc_879

loc_81F:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+7Fj
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	ecx, [ebp+arg_0]
		add	ecx, [edx+4]	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?width@ios_base@std@@QBE_JXZ	; std::ios_base::width(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_58], eax
		mov	[ebp+var_54], edx
		mov	eax, [ebp+var_54]
		cmp	eax, [ebp+var_18]
		jl	short loc_879
		jg	short loc_851
		mov	ecx, [ebp+var_58]
		cmp	ecx, [ebp+var_1C]
		jbe	short loc_879

loc_851:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+AFj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	ecx, [ebp+arg_0]
		add	ecx, [eax+4]	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?width@ios_base@std@@QBE_JXZ	; std::ios_base::width(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		sub	eax, [ebp+var_1C]
		sbb	edx, [ebp+var_18]
		mov	dword ptr [ebp+var_60],	eax
		mov	dword ptr [ebp+var_60+4], edx
		jmp	short loc_882
; ---------------------------------------------------------------------------

loc_879:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+7Dj
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+85j ...
		xorpd	xmm0, xmm0
		movlpd	[ebp+var_60], xmm0

loc_882:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+DFj
		mov	ecx, dword ptr [ebp+var_60]
		mov	[ebp+var_24], ecx
		mov	edx, dword ptr [ebp+var_60+4]
		mov	[ebp+var_20], edx
		mov	eax, [ebp+arg_0]
		push	eax
		lea	ecx, [ebp+var_30]
		call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)
		mov	[ebp+var_4], 0
		lea	ecx, [ebp+var_30]
		call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char>>::sentry::operator bool(void)
		movzx	ecx, al
		test	ecx, ecx
		jnz	short loc_8BE
		mov	edx, [ebp+var_14]
		or	edx, 4
		mov	[ebp+var_14], edx
		jmp	loc_B2C
; ---------------------------------------------------------------------------

loc_8BE:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+116j
		mov	byte ptr [ebp+var_4], 1
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx	; this
		call	dword ptr ds:__imp_?flags@ios_base@std@@QBEHXZ ; std::ios_base::flags(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_64], eax
		mov	eax, [ebp+var_64]
		and	eax, 1C0h
		cmp	eax, 40h ; '@'
		jz	loc_9A9
		jmp	short loc_906
; ---------------------------------------------------------------------------

loc_8F4:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *):loc_9A4j
		mov	ecx, [ebp+var_24]
		sub	ecx, 1
		mov	edx, [ebp+var_20]
		sbb	edx, 0
		mov	[ebp+var_24], ecx
		mov	[ebp+var_20], edx

loc_906:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+15Aj
		cmp	[ebp+var_20], 0
		jl	loc_9A9
		jg	short loc_91C
		cmp	[ebp+var_24], 0
		jbe	loc_9A9

loc_91C:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+178j
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx
		call	dword ptr ds:__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char>>::fill(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_65], al
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_6C], eax
		mov	esi, esp
		movzx	eax, [ebp+var_65]
		push	eax
		mov	ecx, [ebp+var_6C]
		call	dword ptr ds:__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_70], eax
		mov	ecx, [ebp+var_70]
		mov	[ebp+var_38], ecx
		call	?eof@?$char_traits@D@std@@SAHXZ	; std::char_traits<char>::eof(void)
		mov	[ebp+var_3C], eax
		lea	edx, [ebp+var_38]
		push	edx
		lea	eax, [ebp+var_3C]
		push	eax
		call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type(int const &,int const &)
		add	esp, 8
		movzx	ecx, al
		test	ecx, ecx
		jz	short loc_9A4
		mov	edx, [ebp+var_14]
		or	edx, 4
		mov	[ebp+var_14], edx
		jmp	short loc_9A9
; ---------------------------------------------------------------------------

loc_9A4:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1FFj
		jmp	loc_8F4
; ---------------------------------------------------------------------------

loc_9A9:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+154j
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+172j	...
		cmp	[ebp+var_14], 0
		jnz	short loc_A0B
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_74], eax
		mov	esi, esp
		mov	eax, [ebp+var_18]
		push	eax
		mov	ecx, [ebp+var_1C]
		push	ecx
		mov	edx, [ebp+Str]
		push	edx
		mov	ecx, [ebp+var_74]
		call	dword ptr ds:__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ;	std::basic_streambuf<char,std::char_traits<char>>::sputn(char const *,__int64)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_7C], eax
		mov	[ebp+var_78], edx
		mov	eax, [ebp+var_7C]
		cmp	eax, [ebp+var_1C]
		jnz	short loc_A02
		mov	ecx, [ebp+var_78]
		cmp	ecx, [ebp+var_18]
		jz	short loc_A0B

loc_A02:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+260j
		mov	edx, [ebp+var_14]
		or	edx, 4
		mov	[ebp+var_14], edx

loc_A0B:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+215j
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+268j
		cmp	[ebp+var_14], 0
		jnz	loc_AD4
		jmp	short loc_A29
; ---------------------------------------------------------------------------

loc_A17:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *):loc_ACFj
		mov	eax, [ebp+var_24]
		sub	eax, 1
		mov	ecx, [ebp+var_20]
		sbb	ecx, 0
		mov	[ebp+var_24], eax
		mov	[ebp+var_20], ecx

loc_A29:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+27Dj
		cmp	[ebp+var_20], 0
		jl	loc_AD4
		jg	short loc_A3F
		cmp	[ebp+var_24], 0
		jbe	loc_AD4

loc_A3F:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+29Bj
		mov	edx, [ebp+arg_0]
		mov	eax, [edx]
		mov	ecx, [ebp+arg_0]
		add	ecx, [eax+4]
		mov	esi, esp
		call	dword ptr ds:__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char>>::fill(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_7D], al
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	ecx, [ebp+arg_0]
		add	ecx, [edx+4]
		mov	esi, esp
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_84], eax
		mov	esi, esp
		movzx	eax, [ebp+var_7D]
		push	eax
		mov	ecx, [ebp+var_84]
		call	dword ptr ds:__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_88], eax
		mov	ecx, [ebp+var_88]
		mov	[ebp+var_40], ecx
		call	?eof@?$char_traits@D@std@@SAHXZ	; std::char_traits<char>::eof(void)
		mov	[ebp+var_44], eax
		lea	edx, [ebp+var_40]
		push	edx
		lea	eax, [ebp+var_44]
		push	eax
		call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type(int const &,int const &)
		add	esp, 8
		movzx	ecx, al
		test	ecx, ecx
		jz	short loc_ACF
		mov	edx, [ebp+var_14]
		or	edx, 4
		mov	[ebp+var_14], edx
		jmp	short loc_AD4
; ---------------------------------------------------------------------------

loc_ACF:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+32Aj
		jmp	loc_A17
; ---------------------------------------------------------------------------

loc_AD4:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+277j
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+295j	...
		mov	esi, esp
		push	0
		push	0		; __int64
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	ecx, edx	; this
		call	dword ptr ds:__imp_?width@ios_base@std@@QAE_J_J@Z ; std::ios_base::width(__int64)
		cmp	esi, esp
		call	__RTC_CheckEsp
		jmp	short loc_B1C
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z endp


; =============== S U B	R O U T	I N E =======================================


__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0 proc near
					; DATA XREF: .xdata$x:00002F74o
		mov	esi, esp
		push	1
		push	4
		mov	eax, [ebp+8]
		mov	ecx, [eax]
		mov	edx, [ebp+8]
		add	edx, [ecx+4]
		mov	ecx, edx
		call	dword ptr ds:__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z	; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, offset $LN23_0
		retn
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0 endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z

loc_B1C:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+35Cj
		mov	[ebp+var_4], 0
		jmp	short loc_B2C
; END OF FUNCTION CHUNK	FOR ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z

; =============== S U B	R O U T	I N E =======================================


$LN23_0		proc near		; DATA XREF: __catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0+20o
		mov	dword ptr [ebp-4], 0
$LN23_0		endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z

loc_B2C:				; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+121j
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+38Bj
		mov	esi, esp
		push	0
		mov	eax, [ebp+var_14]
		push	eax
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	ecx, [ebp+arg_0]
		add	ecx, [edx+4]
		call	dword ptr ds:__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z	; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_48], eax
		mov	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_30]
		call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ;	std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)
		mov	eax, [ebp+var_48]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN32
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 88h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
; END OF FUNCTION CHUNK	FOR ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
; ---------------------------------------------------------------------------
$LN32		dd 1			; DATA XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+3D0o
		dd offset $LN31
$LN31		dd 0FFFFFFD0h, 8	; DATA XREF: .text$mn:00000B98o
		dd offset $LN29
$LN29		dd 6B4F5Fh		; DATA XREF: .text$mn:00000BA4o
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 0BACh
; COMDAT (pick associative to section at 798)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2 proc near
					; DATA XREF: .xdata$x:00002F90o
		lea	ecx, [ebp-30h]
		jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ;	std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z	proc near
					; DATA XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-8Ch]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
		jmp	___CxxFrameHandler3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0BD4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; char * __cdecl std::_Allocate<char>(unsigned int, char *)
		public ??$_Allocate@D@std@@YAPADIPAD@Z
??$_Allocate@D@std@@YAPADIPAD@Z	proc near
					; CODE XREF: std::allocator<char>::allocate(uint)+14p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_BEF
		jmp	short loc_C19
; ---------------------------------------------------------------------------

loc_BEF:				; CODE XREF: std::_Allocate<char>(uint,char *)+17j
		cmp	[ebp+arg_0], 0FFFFFFFFh
		ja	short loc_C0A
		mov	eax, [ebp+arg_0]
		push	eax		; unsigned int
		call	??2@YAPAXI@Z	; operator new(uint)
		add	esp, 4
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_C19

loc_C0A:				; CODE XREF: std::_Allocate<char>(uint,char *)+1Fj
		mov	esi, esp
		call	dword ptr ds:__imp_?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_C19:				; CODE XREF: std::_Allocate<char>(uint,char *)+19j
					; std::_Allocate<char>(uint,char *)+34j
		mov	eax, [ebp+var_4]
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??$_Allocate@D@std@@YAPADIPAD@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C2Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct std::_Container_proxy * __cdecl std::_Allocate<struct std::_Container_proxy>(unsigned int, struct std::_Container_proxy *)
		public ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
					; CODE XREF: std::allocator<std::_Container_proxy>::allocate(uint)+14p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_C47
		jmp	short loc_C77
; ---------------------------------------------------------------------------

loc_C47:				; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+17j
		cmp	[ebp+arg_0], 1FFFFFFFh
		ja	short loc_C68
		mov	eax, [ebp+arg_0]
		shl	eax, 3
		push	eax		; unsigned int
		call	??2@YAPAXI@Z	; operator new(uint)
		add	esp, 4
		mov	[ebp+var_4], eax
		cmp	[ebp+var_4], 0
		jnz	short loc_C77

loc_C68:				; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+22j
		mov	esi, esp
		call	dword ptr ds:__imp_?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_C77:				; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+19j
					; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+3Aj
		mov	eax, [ebp+var_4]
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0C8Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl std::_Debug_pointer<char>(int, wchar_t *,	unsigned int)
		public ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+1Cp
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+22p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		cmp	[ebp+arg_0], 0
		jnz	short loc_CB5
		mov	esi, esp
		mov	eax, [ebp+arg_8]
		push	eax		; unsigned int
		mov	ecx, [ebp+arg_4]
		push	ecx		; wchar_t *
		push	offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
		call	dword ptr ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const	*,wchar_t const	*,uint)
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_CB5:				; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+8j
		pop	esi
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0CC0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; char * __cdecl std::addressof<char>(char &)
		public ??$addressof@D@std@@YAPADAAD@Z
??$addressof@D@std@@YAPADAAD@Z proc near
					; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+27p
					; std::_String_val<std::_Simple_types<char>>::_Myptr(void)+27p	...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		pop	ebp
		retn
??$addressof@D@std@@YAPADAAD@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0CC8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::_Wrap_alloc<std::allocator<char>>::construct<char *,char *	&>(void	*, int)
		public ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
					; CODE XREF: $LN19+4Bp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_4]
		push	eax
		call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
		add	esp, 4
		push	eax		; int
		mov	ecx, [ebp+arg_0]
		push	ecx		; void *
		mov	edx, [ebp+var_4]
		push	edx		; int
		call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ;	std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)
		add	esp, 0Ch
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0D04h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::allocator<char>::construct<char *,char * &>(void *, int)
		public ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
					; CODE XREF: std::allocator_traits<std::allocator<char>>::construct<char *,char	* &>(std::allocator<char> &,char * *,char * &)+17p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 10h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; void *
		push	4		; unsigned int
		call	??2@YAPAXIPAX@Z	; operator new(uint,void *)
		add	esp, 8
		mov	[ebp+var_18], eax
		mov	[ebp+var_4], 0
		cmp	[ebp+var_18], 0
		jz	short loc_D76
		mov	ecx, [ebp+arg_4]
		push	ecx
		call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
		add	esp, 4
		mov	edx, [ebp+var_18]
		mov	eax, [eax]
		mov	[edx], eax
		mov	ecx, [ebp+var_18]
		mov	[ebp+var_1C], ecx
		jmp	short loc_D7D
; ---------------------------------------------------------------------------

loc_D76:				; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+55j
		mov	[ebp+var_1C], 0

loc_D7D:				; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+70j
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_14], edx
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 1Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 0DA8h
; COMDAT (pick associative to section at D04)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
					; DATA XREF: .xdata$x:00003024o
		mov	eax, [ebp+8]
		push	eax
		mov	eax, [ebp-18h]
		push	eax		; void *
		call	??3@YAXPAX0@Z	; operator delete(void *,void *)
		add	esp, 8
		retn
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
					; DATA XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-14h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
		jmp	___CxxFrameHandler3
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp

_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0DD4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(int, void	*, int)
		public ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
					; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char *	&)+23p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		push	eax
		call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
		add	esp, 4
		push	eax		; int
		mov	ecx, [ebp+arg_4]
		push	ecx		; void *
		mov	ecx, [ebp+arg_0]
		call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char	* &>(char * *,char * &)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0DFCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
		public ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+49p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 10h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; void *
		push	8		; unsigned int
		call	??2@YAPAXIPAX@Z	; operator new(uint,void *)
		add	esp, 8
		mov	[ebp+var_18], eax
		mov	[ebp+var_4], 0
		cmp	[ebp+var_18], 0
		jz	short loc_E74
		mov	ecx, [ebp+arg_4]
		push	ecx
		call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
		add	esp, 4
		mov	edx, [eax]
		mov	eax, [eax+4]
		mov	ecx, [ebp+var_18]
		mov	[ecx], edx
		mov	[ecx+4], eax
		mov	edx, [ebp+var_18]
		mov	[ebp+var_1C], edx
		jmp	short loc_E7B
; ---------------------------------------------------------------------------

loc_E74:				; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+55j
		mov	[ebp+var_1C], 0

loc_E7B:				; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+76j
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_14], eax
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 1Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 0EA4h
; COMDAT (pick associative to section at DFC)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
					; DATA XREF: .xdata$x:00002FF8o
		mov	eax, [ebp+8]
		push	eax
		mov	eax, [ebp-18h]
		push	eax		; void *
		call	??3@YAXPAX0@Z	; operator delete(void *,void *)
		add	esp, 8
		retn
__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc	near
					; DATA XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-14h]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp

_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0ED0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::_Wrap_alloc<class std::allocator<char>>::destroy<char *>(char * *)
		public ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc	near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+4Fp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_4]
		push	ecx
		call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)
		add	esp, 8
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F00h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::allocator<char>::destroy<char *>(char * *)
		public ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
					; CODE XREF: std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char *	*)+Ap

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	esp, ebp
		pop	ebp
		retn	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F14h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static void __cdecl std::allocator_traits<class std::allocator<char>>::destroy<char *>(class std::allocator<char> &, char * *)
		public ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
					; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)+16p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		push	eax
		mov	ecx, [ebp+arg_0]
		call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ;	std::allocator<char>::destroy<char *>(char * *)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F2Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::allocator<struct	std::_Container_proxy>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
		public ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+3Ep

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	esp, ebp
		pop	ebp
		retn	4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F40h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; char * & __cdecl std::forward<char * &>(char * &)
		public ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
					; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char *	&)+12p
					; std::allocator<char>::construct<char *,char *	&>(char	* *,char * &)+5Bp ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		pop	ebp
		retn
??$forward@AAPAD@std@@YAAAPADAAPAD@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F48h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; struct std::_Container_proxy && __cdecl std::forward<struct std::_Container_proxy>(struct std::_Container_proxy &)
		public ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc	near
					; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+5Bp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		pop	ebp
		retn
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F50h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::gfx::BaseCoord<float, struct mozilla::gfx::CoordTyped<struct mozilla::gfx::UnknownUnits, float>>::BaseCoord<float, struct	mozilla::gfx::CoordTyped<struct	mozilla::gfx::UnknownUnits, float>>(float)
		public ??0?$BaseCoord@MU?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@gfx@mozilla@@QAE@M@Z
??0?$BaseCoord@MU?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@gfx@mozilla@@QAE@M@Z proc near
					; CODE XREF: mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>::CoordTyped<mozilla::gfx::UnknownUnits,float>(float)+1Cp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		movss	xmm0, [ebp+arg_0]
		movss	dword ptr [eax], xmm0
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn	4
??0?$BaseCoord@MU?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@gfx@mozilla@@QAE@M@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0F74h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::gfx::BasePoint<float, struct mozilla::gfx::PointTyped<struct mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::CoordTyped<struct mozilla::gfx::UnknownUnits, float>>::BasePoint<float, struct mozilla::gfx::PointTyped<struct mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::CoordTyped<struct mozilla::gfx::UnknownUnits, float>>(struct mozilla::gfx::CoordTyped<struct mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::CoordTyped<struct mozilla::gfx::UnknownUnits,	float>)
		public ??0?$BasePoint@MU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QAE@U?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@12@0@Z
??0?$BasePoint@MU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QAE@U?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@12@0@Z proc near
					; CODE XREF: mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>::PointTyped<mozilla::gfx::UnknownUnits,float>(float,float)+54p

var_4		= dword	ptr -4
arg_0		= byte ptr  8
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		lea	ecx, [ebp+arg_0]
		call	??B?$BaseCoord@MU?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@gfx@mozilla@@QBEMXZ ; mozilla::gfx::BaseCoord<float,mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>>::operator float(void)
		mov	eax, [ebp+var_4]
		fstp	dword ptr [eax]
		lea	ecx, [ebp+arg_8]
		call	??B?$BaseCoord@MU?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@gfx@mozilla@@QBEMXZ ; mozilla::gfx::BaseCoord<float,mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>>::operator float(void)
		mov	ecx, [ebp+var_4]
		fstp	dword ptr [ecx+4]
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	10h
??0?$BasePoint@MU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QAE@U?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@12@0@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0FB0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::gfx::BasePoint<float, struct mozilla::gfx::PointTyped<struct mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::CoordTyped<struct mozilla::gfx::UnknownUnits, float>>::BasePoint<float, struct mozilla::gfx::PointTyped<struct mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::CoordTyped<struct mozilla::gfx::UnknownUnits, float>>(void)
		public ??0?$BasePoint@MU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QAE@XZ
??0?$BasePoint@MU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QAE@XZ proc	near
					; CODE XREF: mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>::PointTyped<mozilla::gfx::UnknownUnits,float>(void)+11p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		movss	xmm0, ds:__real@00000000
		movss	dword ptr [eax], xmm0
		mov	ecx, [ebp+var_4]
		movss	xmm0, ds:__real@00000000
		movss	dword ptr [ecx+4], xmm0
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
??0?$BasePoint@MU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 0FE4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::gfx::BaseRect<float, struct mozilla::gfx::RectTyped<struct mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::PointTyped<struct mozilla::gfx::UnknownUnits,	float>,	struct mozilla::gfx::SizeTyped<struct mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::MarginTyped<struct mozilla::gfx::UnknownUnits, float>>::BaseRect<float, struct mozilla::gfx::RectTyped<struct mozilla::gfx::UnknownUnits, float>, struct	mozilla::gfx::PointTyped<struct	mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::SizeTyped<struct mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::MarginTyped<struct mozilla::gfx::UnknownUnits, float>>(float, float,	float, float)
		public ??0?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QAE@MMMM@Z
??0?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QAE@MMMM@Z proc near
					; CODE XREF: mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float>::RectTyped<mozilla::gfx::UnknownUnits,float>(float,float,float,float)+3Dp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		movss	xmm0, [ebp+arg_0]
		movss	dword ptr [eax], xmm0
		mov	ecx, [ebp+var_4]
		movss	xmm0, [ebp+arg_4]
		movss	dword ptr [ecx+4], xmm0
		mov	edx, [ebp+var_4]
		movss	xmm0, [ebp+arg_8]
		movss	dword ptr [edx+8], xmm0
		mov	eax, [ebp+var_4]
		movss	xmm0, [ebp+arg_C]
		movss	dword ptr [eax+0Ch], xmm0
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn	10h
??0?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QAE@MMMM@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1030h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::gfx::CoordTyped<struct mozilla::gfx::UnknownUnits, float>::CoordTyped<struct mozilla::gfx::UnknownUnits, float>(float)
		public ??0?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@M@Z
??0?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@M@Z proc near
					; CODE XREF: mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>::PointTyped<mozilla::gfx::UnknownUnits,float>(float,float)+2Bp
					; mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>::PointTyped<mozilla::gfx::UnknownUnits,float>(float,float)+45p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		push	ecx
		movss	xmm0, [ebp+arg_0]
		movss	[esp+8+var_8], xmm0
		mov	ecx, [ebp+var_4]
		call	??0?$BaseCoord@MU?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@gfx@mozilla@@QAE@M@Z ;	mozilla::gfx::BaseCoord<float,mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>>::BaseCoord<float,mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>>(float)
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@M@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1064h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::gfx::PointTyped<struct mozilla::gfx::UnknownUnits, float>::PointTyped<struct mozilla::gfx::UnknownUnits, float>(float, float)
		public ??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@MM@Z
??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@MM@Z proc	near
					; CODE XREF: mozilla::gfx::BaseRect<float,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::SizeTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::MarginTyped<mozilla::gfx::UnknownUnits,float>>::BottomLeft(void)+2Ap
					; mozilla::gfx::BaseRect<float,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::SizeTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::MarginTyped<mozilla::gfx::UnknownUnits,float>>::BottomRight(void)+29p ...

var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		push	ecx
		movss	xmm0, [ebp+arg_4]
		movss	[esp+18h+var_18], xmm0
		lea	ecx, [ebp+var_C]
		call	??0?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@M@Z ; mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>::CoordTyped<mozilla::gfx::UnknownUnits,float>(float)
		mov	ecx, [eax+4]
		push	ecx
		mov	edx, [eax]
		push	edx
		push	ecx
		movss	xmm0, [ebp+arg_0]
		movss	[esp+20h+var_20], xmm0
		lea	ecx, [ebp+var_14]
		call	??0?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@M@Z ; mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>::CoordTyped<mozilla::gfx::UnknownUnits,float>(float)
		mov	ecx, [eax+4]
		push	ecx
		mov	edx, [eax]
		push	edx
		mov	ecx, [ebp+var_4]
		call	??0?$BasePoint@MU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QAE@U?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@12@0@Z ; mozilla::gfx::BasePoint<float,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>>::BasePoint<float,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>>(mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>)
		mov	eax, [ebp+var_4]
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@MM@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10D0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::gfx::PointTyped<struct mozilla::gfx::UnknownUnits, float>::PointTyped<struct mozilla::gfx::UnknownUnits, float>(void)
		public ??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@XZ
??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@XZ proc near
					; CODE XREF: mozilla::gfx::Matrix::operator*(mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>	const &)+20p
					; DATA XREF: mozilla::gfx::Matrix::TransformBounds(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &)+2Bo

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	??0?$BasePoint@MU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QAE@XZ ; mozilla::gfx::BasePoint<float,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>>::BasePoint<float,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>>(void)
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 10F8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::gfx::RectTyped<struct mozilla::gfx::UnknownUnits,	float>::RectTyped<struct mozilla::gfx::UnknownUnits, float>(float, float, float, float)
		public ??0?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@MMMM@Z
??0?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@MMMM@Z proc near
					; CODE XREF: mozilla::gfx::Matrix::TransformBounds(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &)+1FBp

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		push	ecx
		movss	xmm0, [ebp+arg_C]
		movss	[esp+8+var_8], xmm0
		push	ecx
		movss	xmm0, [ebp+arg_8]
		movss	[esp+0Ch+var_C], xmm0
		push	ecx
		movss	xmm0, [ebp+arg_4]
		movss	[esp+10h+var_10], xmm0
		push	ecx
		movss	xmm0, [ebp+arg_0]
		movss	[esp+14h+var_14], xmm0
		mov	ecx, [ebp+var_4]
		call	??0?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QAE@MMMM@Z ; mozilla::gfx::BaseRect<float,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::SizeTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::MarginTyped<mozilla::gfx::UnknownUnits,float>>::BaseRect<float,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::SizeTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::MarginTyped<mozilla::gfx::UnknownUnits,float>>(float,float,float,float)
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	10h
??0?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@MMMM@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1150h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char,	class std::allocator<char>>>::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(class std::allocator<char> const &)
		public ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z	proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+42p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
		mov	eax, large fs:0
		push	eax
		push	ecx
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	ecx, [ebp+var_10]
		call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ;	std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)
		mov	[ebp+var_4], 0
		mov	ecx, [ebp+var_10]
		call	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ	; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 11BCh
; COMDAT (pick associative to section at 1150)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
					; DATA XREF: .xdata$x:00002E88o
		mov	ecx, [ebp-10h]
		jmp	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ;	std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
					; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char>	const &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-8]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 11E0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::_String_val<struct std::_Simple_types<char>>(void)
		public ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char>	const &)+30p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_4] ; this
		call	dword ptr ds:__imp_??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+14h], 0
		mov	ecx, [ebp+var_4]
		mov	dword ptr [ecx+18h], 0
		mov	eax, [ebp+var_4]
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1228h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::_Wrap_alloc<class std::allocator<char>>::_Wrap_alloc<class std::allocator<char>>(void)
		public ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)+11p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1250h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::allocator<char>::allocator<char>(void)
		public ??0?$allocator@D@std@@QAE@XZ
??0?$allocator@D@std@@QAE@XZ proc near	; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)+11p
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+39p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
??0?$allocator@D@std@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1268h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::allocator<struct std::_Container_proxy>::allocator<struct std::_Container_proxy>(void)
		public ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc	near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+23p
					; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+1Ep

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1280h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char *Str)
		public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
					; CODE XREF: std::_Generic_error_category::message(int)+57p
					; std::_Iostream_error_category::message(int)+2Cp ...

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Str		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
		mov	eax, large fs:0
		push	eax
		sub	esp, 8
		mov	[ebp+var_14], 0CCCCCCCCh
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		lea	ecx, [ebp+var_14+3]
		call	??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
		push	eax
		mov	ecx, [ebp+var_10]
		call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z	; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
		mov	[ebp+var_4], 0
		push	0		; Size
		push	0		; char
		mov	ecx, [ebp+var_10]
		call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
		mov	eax, [ebp+Str]
		push	eax		; Str
		mov	ecx, [ebp+var_10]
		call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 130Ch
; COMDAT (pick associative to section at 1280)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
					; DATA XREF: .xdata$x:00002EB4o
		mov	ecx, [ebp-10h]
		jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
					; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0Ch]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1330h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall mozilla::gfx::Matrix::Matrix(mozilla::gfx::Matrix *__hidden	this)
		public ??0Matrix@gfx@mozilla@@QAE@XZ
??0Matrix@gfx@mozilla@@QAE@XZ proc near	; CODE XREF: mozilla::gfx::Matrix::Rotation(float)+19p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		movss	xmm0, ds:__real@3f800000
		movss	dword ptr [eax], xmm0
		mov	ecx, [ebp+var_4]
		movss	xmm0, ds:__real@00000000
		movss	dword ptr [ecx+4], xmm0
		mov	edx, [ebp+var_4]
		movss	xmm0, ds:__real@00000000
		movss	dword ptr [edx+8], xmm0
		mov	eax, [ebp+var_4]
		movss	xmm0, ds:__real@3f800000
		movss	dword ptr [eax+0Ch], xmm0
		mov	ecx, [ebp+var_4]
		movss	xmm0, ds:__real@00000000
		movss	dword ptr [ecx+10h], xmm0
		mov	edx, [ebp+var_4]
		movss	xmm0, ds:__real@00000000
		movss	dword ptr [edx+14h], xmm0
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
??0Matrix@gfx@mozilla@@QAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 13A4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall std::_Container_proxy::_Container_proxy(std::_Container_proxy *__hidden this)
		public ??0_Container_proxy@std@@QAE@XZ
??0_Container_proxy@std@@QAE@XZ	proc near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+3Ap

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax], 0
		mov	ecx, [ebp+var_4]
		mov	dword ptr [ecx+4], 0
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
??0_Container_proxy@std@@QAE@XZ	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 13CCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall std::_Generic_error_category::_Generic_error_category(std::_Generic_error_category *__hidden this)
		public ??0_Generic_error_category@std@@QAE@XZ
??0_Generic_error_category@std@@QAE@XZ proc near
					; CODE XREF: std::_Iostream_error_category::_Iostream_error_category(void)+11p
					; std::_System_error_category::_System_error_category(void)+11p ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??0error_category@std@@QAE@XZ ;	std::error_category::error_category(void)
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax], offset	??_7_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`vftable'
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0_Generic_error_category@std@@QAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 13FCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall std::_Iostream_error_category::_Iostream_error_category(std::_Iostream_error_category *__hidden this)
		public ??0_Iostream_error_category@std@@QAE@XZ
??0_Iostream_error_category@std@@QAE@XZ	proc near
					; CODE XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax], offset	??_7_Iostream_error_category@std@@6B@ ;	const std::_Iostream_error_category::`vftable'
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0_Iostream_error_category@std@@QAE@XZ	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 142Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::_Sentry_base::_Sentry_base(class std::basic_ostream<char,	struct std::char_traits<char>> &)
		public ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z proc near
					; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+35p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	[eax], ecx
		mov	edx, [ebp+var_4]
		mov	eax, [edx]
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+var_8]
		mov	edx, [ecx]
		mov	ecx, [ebp+var_8]
		add	ecx, [edx+4]
		mov	esi, esp
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_14B0
		mov	eax, [ebp+var_4]
		mov	ecx, [eax]
		mov	[ebp+var_C], ecx
		mov	edx, [ebp+var_C]
		mov	eax, [edx]
		mov	ecx, [ebp+var_C]
		add	ecx, [eax+4]
		mov	esi, esp
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_10], eax
		mov	ecx, [ebp+var_10]
		mov	edx, [ecx]
		mov	esi, esp
		mov	ecx, [ebp+var_10]
		mov	eax, [edx+4]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_14B0:				; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::_Sentry_base(std::basic_ostream<char,std::char_traits<char>> &)+47j
		mov	eax, [ebp+var_4]
		pop	esi
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 14C4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall std::_System_error_category::_System_error_category(std::_System_error_category *__hidden this)
		public ??0_System_error_category@std@@QAE@XZ
??0_System_error_category@std@@QAE@XZ proc near
					; CODE XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax], offset	??_7_System_error_category@std@@6B@ ; const std::_System_error_category::`vftable'
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??0_System_error_category@std@@QAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 14F4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall std::error_category::error_category(std::error_category *__hidden this)
		public ??0error_category@std@@QAE@XZ
??0error_category@std@@QAE@XZ proc near	; CODE XREF: std::_Generic_error_category::_Generic_error_category(void)+11p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax], offset	??_7error_category@std@@6B@ ; const std::error_category::`vftable'
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
??0error_category@std@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1514h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall std::error_condition::error_condition(std::error_condition *this, int, const struct	std::error_category *)
		public ??0error_condition@std@@QAE@HABVerror_category@1@@Z
??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
					; CODE XREF: std::_System_error_category::default_error_condition(int)+36p
					; std::_System_error_category::default_error_condition(int)+4Fp ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	[eax], ecx
		mov	edx, [ebp+var_4]
		mov	eax, [ebp+arg_4]
		mov	[edx+4], eax
		mov	eax, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 153Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::sentry::sentry(class std::basic_ostream<char, struct std::char_traits<char>> &)
		public ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z proc near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+FDp

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
		mov	eax, large fs:0
		push	eax
		push	ecx
		push	esi
		mov	[ebp+var_10], 0CCCCCCCCh
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_10]
		call	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::_Sentry_base(std::basic_ostream<char,std::char_traits<char>>	&)
		mov	[ebp+var_4], 0
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	ecx, [ebp+arg_0]
		add	ecx, [edx+4]	; this
		mov	esi, esp
		call	dword ptr ds:__imp_?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		movzx	eax, al
		test	eax, eax
		jz	short loc_160A
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		mov	ecx, [ebp+arg_0]
		add	ecx, [edx+4]
		mov	esi, esp
		call	dword ptr ds:__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::tie(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_160A
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx
		call	dword ptr ds:__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::tie(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		cmp	eax, [ebp+arg_0]
		jz	short loc_160A
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx
		call	dword ptr ds:__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::tie(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	esi, esp
		mov	ecx, eax
		call	dword ptr ds:__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char>>::flush(void)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_160A:				; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+60j
					; std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+7Ej ...
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx	; this
		call	dword ptr ds:__imp_?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+var_10]
		mov	[ecx+4], al
		mov	[ebp+var_4], 0FFFFFFFFh
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		pop	ecx
		pop	esi
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 1654h
; COMDAT (pick associative to section at 153C)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0 proc near
					; DATA XREF: .xdata$x:00002FCCo
		mov	ecx, [ebp-10h]
		jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::~_Sentry_base(void)
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0 endp


; =============== S U B	R O U T	I N E =======================================


__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z	proc near
					; DATA XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-0Ch]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
		jmp	___CxxFrameHandler3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1678h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char,	class std::allocator<char>>>::~_String_alloc<0,	struct std::_String_base_types<char, class std::allocator<char>>>(void)
		public ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
					; CODE XREF: __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0+3j

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)
		mov	ecx, [ebp+var_4]
		call	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ;	std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 16A4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::~_String_val<struct std::_Simple_types<char>>(void)
		public ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
					; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0+3j
					; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+19p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	esi, esp
		mov	ecx, [ebp+var_4] ; this
		call	dword ptr ds:__imp_??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 16D4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall std::_Generic_error_category::~_Generic_error_category(std::_Generic_error_category	*__hidden this)
		public ??1_Generic_error_category@std@@UAE@XZ
??1_Generic_error_category@std@@UAE@XZ proc near
					; CODE XREF: std::_Iostream_error_category::~_Iostream_error_category(void)+11p
					; std::_System_error_category::~_System_error_category(void)+11p ...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??1error_category@std@@UAE@XZ ;	std::error_category::~error_category(void)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1_Generic_error_category@std@@UAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 16F8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall std::_Iostream_error_category::~_Iostream_error_category(std::_Iostream_error_category *__hidden this)
		public ??1_Iostream_error_category@std@@UAE@XZ
??1_Iostream_error_category@std@@UAE@XZ	proc near
					; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+11p
					; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1_Iostream_error_category@std@@UAE@XZ	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 171Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::_Sentry_base::~_Sentry_base(void)
		public ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ proc near
					; CODE XREF: __unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0+3j
					; std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+3Cp

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [eax]
		mov	[ebp+var_8], ecx
		mov	edx, [ebp+var_8]
		mov	eax, [edx]
		mov	ecx, [ebp+var_8]
		add	ecx, [eax+4]
		mov	esi, esp
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_179A
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx]
		mov	[ebp+var_C], edx
		mov	eax, [ebp+var_C]
		mov	ecx, [eax]
		mov	edx, [ebp+var_C]
		add	edx, [ecx+4]
		mov	esi, esp
		mov	ecx, edx
		call	dword ptr ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ	; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_10]
		mov	edx, [eax]
		mov	esi, esp
		mov	ecx, [ebp+var_10]
		mov	eax, [edx+8]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_179A:				; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::~_Sentry_base(void)+3Fj
		pop	esi
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 17ACh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall std::_System_error_category::~_System_error_category(std::_System_error_category *__hidden this)
		public ??1_System_error_category@std@@UAE@XZ
??1_System_error_category@std@@UAE@XZ proc near
					; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+11p
					; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1_System_error_category@std@@UAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 17D0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; _DWORD __thiscall std::error_category::~error_category(std::error_category *__hidden this)
		public ??1error_category@std@@UAE@XZ
??1error_category@std@@UAE@XZ proc near	; CODE XREF: std::_Generic_error_category::~_Generic_error_category(void)+11p
					; std::error_category::`scalar deleting	destructor'(uint)+11p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax], offset	??_7error_category@std@@6B@ ; const std::error_category::`vftable'
		mov	esp, ebp
		pop	ebp
		retn
??1error_category@std@@UAE@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 17ECh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::sentry::~sentry(void)
		public ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ proc near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+3C4p
					; __unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2+3j

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	esi, esp
		call	dword ptr ds:__imp_?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		movzx	eax, al
		test	eax, eax
		jnz	short loc_1825
		mov	esi, esp
		mov	ecx, [ebp+var_4]
		mov	ecx, [ecx]
		call	dword ptr ds:__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ;	std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)
		cmp	esi, esp
		call	__RTC_CheckEsp

loc_1825:				; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+23j
		mov	ecx, [ebp+var_4]
		call	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::~_Sentry_base(void)
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 183Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void *__cdecl	operator new(unsigned int, void	*)
		public ??2@YAPAXIPAX@Z
??2@YAPAXIPAX@Z	proc near		; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+3Fp
					; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+3Fp

arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		pop	ebp
		retn
??2@YAPAXIPAX@Z	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1844h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl operator	delete(void *)
		public ??3@YAXPAX0@Z
??3@YAXPAX0@Z	proc near		; CODE XREF: __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0+8p
					; __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0+8p
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
??3@YAXPAX0@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 184Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: bool __thiscall std::error_category::operator==(class	std::error_category const &)const
		public ??8error_category@std@@QBE_NABV01@@Z
??8error_category@std@@QBE_NABV01@@Z proc near
					; CODE XREF: std::error_condition::operator==(std::error_condition const &)+2Bp
					; std::error_category::equivalent(std::error_code const	&,int)+23p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		cmp	eax, [ebp+arg_0]
		jnz	short loc_1874
		mov	[ebp+var_8], 1
		jmp	short loc_187B
; ---------------------------------------------------------------------------

loc_1874:				; CODE XREF: std::error_category::operator==(std::error_category const &)+1Dj
		mov	[ebp+var_8], 0

loc_187B:				; CODE XREF: std::error_category::operator==(std::error_category const &)+26j
		mov	al, byte ptr [ebp+var_8]
		mov	esp, ebp
		pop	ebp
		retn	4
??8error_category@std@@QBE_NABV01@@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1884h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::error_condition::operator==(std::error_condition *)
		public ??8error_condition@std@@QBE_NABV01@@Z
??8error_condition@std@@QBE_NABV01@@Z proc near
					; CODE XREF: std::error_category::equivalent(int,std::error_condition const &)+43p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		push	esi
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+arg_0] ; this
		call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
		push	eax
		mov	ecx, [ebp+var_4] ; this
		call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
		mov	ecx, eax
		call	??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
		movzx	eax, al
		test	eax, eax
		jz	short loc_18DA
		mov	ecx, [ebp+var_4] ; this
		call	?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
		mov	esi, eax
		mov	ecx, [ebp+arg_0] ; this
		call	?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
		cmp	esi, eax
		jnz	short loc_18DA
		mov	[ebp+var_8], 1
		jmp	short loc_18E1
; ---------------------------------------------------------------------------

loc_18DA:				; CODE XREF: std::error_condition::operator==(std::error_condition const &)+35j
					; std::error_condition::operator==(std::error_condition	const &)+4Bj
		mov	[ebp+var_8], 0

loc_18E1:				; CODE XREF: std::error_condition::operator==(std::error_condition const &)+54j
		mov	al, byte ptr [ebp+var_8]
		pop	esi
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??8error_condition@std@@QBE_NABV01@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 18F8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall mozilla::gfx::BaseCoord<float, struct mozilla::gfx::CoordTyped<struct mozilla::gfx::UnknownUnits, float>>::operator float(void)const
		public ??B?$BaseCoord@MU?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@gfx@mozilla@@QBEMXZ
??B?$BaseCoord@MU?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@gfx@mozilla@@QBEMXZ proc near
					; CODE XREF: mozilla::gfx::BasePoint<float,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>>::BasePoint<float,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>>(mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>)+11p
					; mozilla::gfx::BasePoint<float,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>>::BasePoint<float,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>>(mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>)+1Ep

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		fld	dword ptr [eax]
		mov	esp, ebp
		pop	ebp
		retn
??B?$BaseCoord@MU?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@gfx@mozilla@@QBEMXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1910h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::sentry::operator bool(void)const
		public ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ proc near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+10Cp

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	al, [eax+4]
		mov	esp, ebp
		pop	ebp
		retn
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1928h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: struct mozilla::gfx::PointTyped<struct mozilla::gfx::UnknownUnits, float> __thiscall mozilla::gfx::Matrix::operator*(struct mozilla::gfx::PointTyped<struct mozilla::gfx::UnknownUnits, float> const &)const
		public ??DMatrix@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABU312@@Z
??DMatrix@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABU312@@Z proc near
					; CODE XREF: mozilla::gfx::Matrix::TransformBounds(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &)+51p
					; mozilla::gfx::Matrix::TransformBounds(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const	&)+7Fp	...

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		lea	ecx, [ebp+var_10]
		call	??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@XZ ; mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>::PointTyped<mozilla::gfx::UnknownUnits,float>(void)
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_4]
		movss	xmm0, dword ptr	[eax]
		mulss	xmm0, dword ptr	[ecx]
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+var_4]
		movss	xmm1, dword ptr	[edx+4]
		mulss	xmm1, dword ptr	[eax+8]
		addss	xmm0, xmm1
		mov	ecx, [ebp+var_4]
		addss	xmm0, dword ptr	[ecx+10h]
		movss	[ebp+var_10], xmm0
		mov	edx, [ebp+arg_4]
		mov	eax, [ebp+var_4]
		movss	xmm0, dword ptr	[edx]
		mulss	xmm0, dword ptr	[eax+4]
		mov	ecx, [ebp+arg_4]
		mov	edx, [ebp+var_4]
		movss	xmm1, dword ptr	[ecx+4]
		mulss	xmm1, dword ptr	[edx+0Ch]
		addss	xmm0, xmm1
		mov	eax, [ebp+var_4]
		addss	xmm0, dword ptr	[eax+14h]
		movss	[ebp+var_C], xmm0
		mov	ecx, [ebp+arg_0]
		mov	edx, [ebp+var_10]
		mov	[ecx], edx
		mov	eax, [ebp+var_C]
		mov	[ecx+4], eax
		mov	eax, [ebp+arg_0]
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_1
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		add	esp, 14h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
??DMatrix@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABU312@@Z endp

; ---------------------------------------------------------------------------
		align 10h
$LN5_1		dd 1			; DATA XREF: mozilla::gfx::Matrix::operator*(mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>	const &)+99o
		dd offset $LN4_1
$LN4_1		dd 0FFFFFFF0h, 8	; DATA XREF: .text$mn:000019E4o
		dd offset $LN3_1	; "retPoint"
$LN3_1		db 'retPoint',0         ; DATA XREF: .text$mn:000019F0o
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A00h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall std::_Generic_error_category::`scalar deleting destructor'(unsigned int)
		public ??_G_Generic_error_category@std@@UAEPAXI@Z
??_G_Generic_error_category@std@@UAEPAXI@Z proc	near

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_1A2A
		mov	ecx, [ebp+var_4]
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_1A2A:				; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_G_Generic_error_category@std@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A40h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall std::_Iostream_error_category::`scalar deleting destructor'(unsigned int)
		public ??_G_Iostream_error_category@std@@UAEPAXI@Z
??_G_Iostream_error_category@std@@UAEPAXI@Z proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??1_Iostream_error_category@std@@UAE@XZ	; std::_Iostream_error_category::~_Iostream_error_category(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_1A6A
		mov	ecx, [ebp+var_4]
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_1A6A:				; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_G_Iostream_error_category@std@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1A80h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall std::_System_error_category::`scalar deleting destructor'(unsigned int)
		public ??_G_System_error_category@std@@UAEPAXI@Z
??_G_System_error_category@std@@UAEPAXI@Z proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??1_System_error_category@std@@UAE@XZ ;	std::_System_error_category::~_System_error_category(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_1AAA
		mov	ecx, [ebp+var_4]
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_1AAA:				; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_G_System_error_category@std@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1AC0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual void * __thiscall std::error_category::`scalar deleting destructor'(unsigned int)
		public ??_Gerror_category@std@@UAEPAXI@Z
??_Gerror_category@std@@UAEPAXI@Z proc near

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4] ; this
		call	??1error_category@std@@UAE@XZ ;	std::error_category::~error_category(void)
		mov	eax, [ebp+arg_0]
		and	eax, 1
		jz	short loc_1AEA
		mov	ecx, [ebp+var_4]
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_1AEA:				; CODE XREF: std::error_category::`scalar deleting destructor'(uint)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
??_Gerror_category@std@@UAEPAXI@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1B00h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __stdcall `vector constructor iterator'(void *, unsigned int, int, void * (__thiscall *)(void *))
		public ??_H@YGXPAXIHP6EPAX0@Z@Z
??_H@YGXPAXIHP6EPAX0@Z@Z proc near	; CODE XREF: mozilla::gfx::Matrix::TransformBounds(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &)+38p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi

loc_1B04:				; CODE XREF: `vector constructor iterator'(void *,uint,int,void * (*)(void *))+27j
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[ebp+arg_8], eax
		js	short loc_1B29
		mov	esi, esp
		mov	ecx, [ebp+arg_0]
		call	[ebp+arg_C]
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, [ebp+arg_0]
		add	ecx, [ebp+arg_4]
		mov	[ebp+arg_0], ecx
		jmp	short loc_1B04
; ---------------------------------------------------------------------------

loc_1B29:				; CODE XREF: `vector constructor iterator'(void *,uint,int,void * (*)(void *))+Dj
		pop	esi
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn	10h
??_H@YGXPAXIHP6EPAX0@Z@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$di	segment	para public 'CODE' use32
		assume cs:_text$di
		;org 1B38h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl `dynamic	initializer for	'public: static class std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc	near
					; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Generic_object$initializer$)(void)o
		push	ebp
		mov	ebp, esp
		mov	ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
		call	??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
		push	offset ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; void (__cdecl *)()
		call	_atexit
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$di	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$di	segment	para public 'CODE' use32
		assume cs:_text$di
		;org 1B5Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl `dynamic	initializer for	'public: static class std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
					; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Iostream_object$initializer$)(void)o
		push	ebp
		mov	ebp, esp
		mov	ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
		call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category(void)
		push	offset ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; void (__cdecl *)()
		call	_atexit
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$di	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$di	segment	para public 'CODE' use32
		assume cs:_text$di
		;org 1B80h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl `dynamic	initializer for	'public: static class std::_System_error_category std::_Error_objects<int>::_System_object''(void)
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
					; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_System_object$initializer$)(void)o
		push	ebp
		mov	ebp, esp
		mov	ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
		call	??0_System_error_category@std@@QAE@XZ ;	std::_System_error_category::_System_error_category(void)
		push	offset ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ	; void (__cdecl	*)()
		call	_atexit
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$di	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$di	segment	para public 'CODE' use32
		assume cs:_text$di
		;org 1BA4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl std::`dynamic initializer for 'allocator_arg''(void)
??__Eallocator_arg@std@@YAXXZ proc near	; DATA XREF: .CRT$XCU:_allocator_arg$initializer$o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		xor	eax, eax
		mov	byte ptr [ebp+var_4+3],	al
		mov	esp, ebp
		pop	ebp
		retn
??__Eallocator_arg@std@@YAXXZ endp

_text$di	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$di	segment	para public 'CODE' use32
		assume cs:_text$di
		;org 1BB8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl std::`dynamic initializer for 'piecewise_construct''(void)
??__Epiecewise_construct@std@@YAXXZ proc near
					; DATA XREF: .CRT$XCU:_piecewise_construct$initializer$o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		xor	eax, eax
		mov	byte ptr [ebp+var_4+3],	al
		mov	esp, ebp
		pop	ebp
		retn
??__Epiecewise_construct@std@@YAXXZ endp

_text$di	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$yd	segment	para public 'CODE' use32
		assume cs:_text$yd
		;org 1BCCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl `dynamic	atexit destructor for 'public: static std::_Generic_error_category std::_Error_objects<int>::_Generic_object''()
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc	near
					; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+Do
		push	ebp
		mov	ebp, esp
		mov	ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
		call	??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$yd	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$yd	segment	para public 'CODE' use32
		assume cs:_text$yd
		;org 1BE4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl `dynamic	atexit destructor for 'public: static std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''()
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
					; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+Do
		push	ebp
		mov	ebp, esp
		mov	ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
		call	??1_Iostream_error_category@std@@UAE@XZ	; std::_Iostream_error_category::~_Iostream_error_category(void)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$yd	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$yd	segment	para public 'CODE' use32
		assume cs:_text$yd
		;org 1BFCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl `dynamic	atexit destructor for 'public: static std::_System_error_category std::_Error_objects<int>::_System_object''()
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
					; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+Do
		push	ebp
		mov	ebp, esp
		mov	ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
		call	??1_System_error_category@std@@UAE@XZ ;	std::_System_error_category::~_System_error_category(void)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$yd	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1C14h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: struct mozilla::gfx::PointTyped<struct mozilla::gfx::UnknownUnits, float> __thiscall mozilla::gfx::BaseRect<float, struct mozilla::gfx::RectTyped<struct mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::PointTyped<struct mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::SizeTyped<struct	mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::MarginTyped<struct mozilla::gfx::UnknownUnits,	float>>::BottomLeft(void)const
		public ?BottomLeft@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@XZ
?BottomLeft@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@XZ proc near
					; CODE XREF: mozilla::gfx::Matrix::TransformBounds(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &)+A0p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	?YMost@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBEMXZ ; mozilla::gfx::BaseRect<float,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::SizeTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::MarginTyped<mozilla::gfx::UnknownUnits,float>>::YMost(void)
		push	ecx
		fstp	[esp+8+var_8]
		mov	eax, [ebp+var_4]
		push	ecx
		movss	xmm0, dword ptr	[eax]
		movss	[esp+0Ch+var_C], xmm0
		mov	ecx, [ebp+arg_0]
		call	??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@MM@Z ; mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>::PointTyped<mozilla::gfx::UnknownUnits,float>(float,float)
		mov	eax, [ebp+arg_0]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?BottomLeft@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1C58h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: struct mozilla::gfx::PointTyped<struct mozilla::gfx::UnknownUnits, float> __thiscall mozilla::gfx::BaseRect<float, struct mozilla::gfx::RectTyped<struct mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::PointTyped<struct mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::SizeTyped<struct	mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::MarginTyped<struct mozilla::gfx::UnknownUnits,	float>>::BottomRight(void)const
		public ?BottomRight@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@XZ
?BottomRight@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@XZ proc near
					; CODE XREF: mozilla::gfx::Matrix::TransformBounds(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &)+CDp

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	?YMost@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBEMXZ ; mozilla::gfx::BaseRect<float,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::SizeTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::MarginTyped<mozilla::gfx::UnknownUnits,float>>::YMost(void)
		push	ecx
		fstp	[esp+8+var_8]
		mov	ecx, [ebp+var_4]
		call	?XMost@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBEMXZ ; mozilla::gfx::BaseRect<float,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::SizeTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::MarginTyped<mozilla::gfx::UnknownUnits,float>>::XMost(void)
		push	ecx
		fstp	[esp+0Ch+var_C]
		mov	ecx, [ebp+arg_0]
		call	??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@MM@Z ; mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>::PointTyped<mozilla::gfx::UnknownUnits,float>(float,float)
		mov	eax, [ebp+arg_0]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?BottomRight@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1C9Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: struct mozilla::gfx::PointTyped<struct mozilla::gfx::UnknownUnits, float> __thiscall mozilla::gfx::BaseRect<float, struct mozilla::gfx::RectTyped<struct mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::PointTyped<struct mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::SizeTyped<struct	mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::MarginTyped<struct mozilla::gfx::UnknownUnits,	float>>::TopLeft(void)const
		public ?TopLeft@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@XZ
?TopLeft@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@XZ proc near
					; CODE XREF: mozilla::gfx::Matrix::TransformBounds(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &)+44p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		push	ecx
		movss	xmm0, dword ptr	[eax+4]
		movss	[esp+8+var_8], xmm0
		mov	ecx, [ebp+var_4]
		push	ecx
		movss	xmm0, dword ptr	[ecx]
		movss	[esp+0Ch+var_C], xmm0
		mov	ecx, [ebp+arg_0]
		call	??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@MM@Z ; mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>::PointTyped<mozilla::gfx::UnknownUnits,float>(float,float)
		mov	eax, [ebp+arg_0]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?TopLeft@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1CE0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: struct mozilla::gfx::PointTyped<struct mozilla::gfx::UnknownUnits, float> __thiscall mozilla::gfx::BaseRect<float, struct mozilla::gfx::RectTyped<struct mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::PointTyped<struct mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::SizeTyped<struct	mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::MarginTyped<struct mozilla::gfx::UnknownUnits,	float>>::TopRight(void)const
		public ?TopRight@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@XZ
?TopRight@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@XZ proc	near
					; CODE XREF: mozilla::gfx::Matrix::TransformBounds(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &)+72p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		push	ecx
		movss	xmm0, dword ptr	[eax+4]
		movss	[esp+8+var_8], xmm0
		mov	ecx, [ebp+var_4]
		call	?XMost@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBEMXZ ; mozilla::gfx::BaseRect<float,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::SizeTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::MarginTyped<mozilla::gfx::UnknownUnits,float>>::XMost(void)
		push	ecx
		fstp	[esp+0Ch+var_C]
		mov	ecx, [ebp+arg_0]
		call	??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@MM@Z ; mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>::PointTyped<mozilla::gfx::UnknownUnits,float>(float,float)
		mov	eax, [ebp+arg_0]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?TopRight@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBE?AU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D24h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: float	__thiscall mozilla::gfx::BaseRect<float, struct	mozilla::gfx::RectTyped<struct mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::PointTyped<struct mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::SizeTyped<struct mozilla::gfx::UnknownUnits,	float>,	struct mozilla::gfx::MarginTyped<struct	mozilla::gfx::UnknownUnits, float>>::XMost(void)const
		public ?XMost@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBEMXZ
?XMost@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBEMXZ proc near
					; CODE XREF: mozilla::gfx::BaseRect<float,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::SizeTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::MarginTyped<mozilla::gfx::UnknownUnits,float>>::BottomRight(void)+1Dp
					; mozilla::gfx::BaseRect<float,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::SizeTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::MarginTyped<mozilla::gfx::UnknownUnits,float>>::TopRight(void)+1Fp

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+var_4]
		movss	xmm0, dword ptr	[eax]
		addss	xmm0, dword ptr	[ecx+8]
		movss	[ebp+var_8], xmm0
		fld	[ebp+var_8]
		mov	esp, ebp
		pop	ebp
		retn
?XMost@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBEMXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D58h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: float	__thiscall mozilla::gfx::BaseRect<float, struct	mozilla::gfx::RectTyped<struct mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::PointTyped<struct mozilla::gfx::UnknownUnits, float>, struct mozilla::gfx::SizeTyped<struct mozilla::gfx::UnknownUnits,	float>,	struct mozilla::gfx::MarginTyped<struct	mozilla::gfx::UnknownUnits, float>>::YMost(void)const
		public ?YMost@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBEMXZ
?YMost@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBEMXZ proc near
					; CODE XREF: mozilla::gfx::BaseRect<float,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::SizeTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::MarginTyped<mozilla::gfx::UnknownUnits,float>>::BottomLeft(void)+11p
					; mozilla::gfx::BaseRect<float,mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::SizeTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::MarginTyped<mozilla::gfx::UnknownUnits,float>>::BottomRight(void)+11p

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+var_4]
		movss	xmm0, dword ptr	[eax+4]
		addss	xmm0, dword ptr	[ecx+0Ch]
		movss	[ebp+var_8], xmm0
		fld	[ebp+var_8]
		mov	esp, ebp
		pop	ebp
		retn
?YMost@?$BaseRect@MU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@U?$MarginTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QBEMXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1D8Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::_String_alloc<0,	struct std::_String_base_types<char, class std::allocator<char>>>::_Alloc_proxy(void)
		public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ	proc near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char>	const &)+3Fp

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		lea	ecx, [ebp+var_C+3]
		call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
		push	1
		lea	ecx, [ebp+var_C+3]
		call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z	; std::allocator<std::_Container_proxy>::allocate(uint)
		mov	ecx, [ebp+var_4]
		mov	[ecx], eax
		lea	ecx, [ebp+var_18] ; this
		call	??0_Container_proxy@std@@QAE@XZ	; std::_Container_proxy::_Container_proxy(void)
		push	eax		; int
		mov	edx, [ebp+var_4]
		mov	eax, [edx]
		push	eax		; void *
		lea	ecx, [ebp+var_C+3]
		call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx]
		mov	eax, [ebp+var_4]
		mov	[edx], eax
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		add	esp, 18h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ	endp

; ---------------------------------------------------------------------------
		align 4
$LN5		dd 1			; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+5Co
		dd offset $LN4
$LN4		dd 0FFFFFFF7h, 1	; DATA XREF: .text$mn:00001E08o
		dd offset $LN3		; "_Alproxy"
$LN3		db '_Alproxy',0         ; DATA XREF: .text$mn:00001E14o
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 1E24h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Copy(unsigned int, unsigned int)
		public ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+4Cp

var_38		= byte ptr -38h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_25		= byte ptr -25h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= byte ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

; FUNCTION CHUNK AT 00001F6B SIZE 00000009 BYTES

		push	ebp
		mov	ebp, esp
		push	0FFFFFFFFh
		push	offset __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
		mov	eax, large fs:0
		push	eax
		push	ecx
		sub	esp, 28h
		push	ebx
		push	esi
		push	edi
		push	ecx
		lea	edi, [ebp+var_38]
		mov	ecx, 0Ah
		mov	eax, 0CCCCCCCCh
		rep stosd
		pop	ecx
		mov	eax, dword ptr ds:___security_cookie
		xor	eax, ebp
		push	eax
		lea	eax, [ebp+var_C]
		mov	large fs:0, eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_14], ecx
		mov	eax, [ebp+arg_0]
		or	eax, 0Fh
		mov	[ebp+var_18], eax
		mov	ecx, [ebp+var_14]
		call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
		cmp	eax, [ebp+var_18]
		jnb	short loc_1E82
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_18], ecx
		jmp	short loc_1ED4
; ---------------------------------------------------------------------------

loc_1E82:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+54j
		mov	eax, [ebp+var_18]
		xor	edx, edx
		mov	ecx, 3
		div	ecx
		mov	edx, [ebp+var_14]
		mov	ecx, [edx+18h]
		shr	ecx, 1
		cmp	ecx, eax
		ja	short loc_1E9C
		jmp	short loc_1ED4
; ---------------------------------------------------------------------------

loc_1E9C:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+74j
		mov	edx, [ebp+var_14]
		mov	esi, [edx+18h]
		shr	esi, 1
		mov	ecx, [ebp+var_14]
		call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
		sub	eax, esi
		mov	ecx, [ebp+var_14]
		cmp	[ecx+18h], eax
		ja	short loc_1EC9
		mov	edx, [ebp+var_14]
		mov	eax, [edx+18h]
		shr	eax, 1
		mov	ecx, [ebp+var_14]
		add	eax, [ecx+18h]
		mov	[ebp+var_18], eax
		jmp	short loc_1ED4
; ---------------------------------------------------------------------------

loc_1EC9:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+90j
		mov	ecx, [ebp+var_14]
		call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
		mov	[ebp+var_18], eax

loc_1ED4:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+5Cj
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+76j ...
		mov	[ebp+var_4], 0
		lea	edx, [ebp+var_25]
		push	edx
		mov	ecx, [ebp+var_14]
		call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+var_18]
		add	eax, 1
		push	eax
		mov	ecx, [ebp+var_2C]
		call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
		mov	[ebp+var_30], eax
		mov	ecx, [ebp+var_30]
		mov	[ebp+var_20], ecx
		jmp	short loc_1F6B
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp


; =============== S U B	R O U T	I N E =======================================


__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
					; DATA XREF: .xdata$x:00002EE8o

; FUNCTION CHUNK AT 00001F55 SIZE 00000009 BYTES
; FUNCTION CHUNK AT 00001F65 SIZE 00000006 BYTES

		mov	[ebp-10h], esp
		mov	edx, [ebp+8]
		mov	[ebp-18h], edx
		mov	byte ptr [ebp-4], 2
		lea	eax, [ebp-26h]
		push	eax
		mov	ecx, [ebp-14h]
		call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
		mov	[ebp-34h], eax
		mov	ecx, [ebp-18h]
		add	ecx, 1
		push	ecx
		mov	ecx, [ebp-34h]
		call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
		mov	[ebp-38h], eax
		mov	edx, [ebp-38h]
		mov	[ebp-20h], edx
		jmp	short loc_1F55
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
					; DATA XREF: .xdata$x:00002EF8o
		push	0		; Size
		push	1		; char
		mov	ecx, [ebp-14h]
		call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
		push	0
		push	0
		call	__CxxThrowException@8 ;	_CxxThrowException(x,x)
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 endp

; ---------------------------------------------------------------------------
		mov	eax, offset $LN17
		retn
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0

loc_1F55:				; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+34j
		mov	dword ptr [ebp-4], 1
		jmp	short loc_1F65
; END OF FUNCTION CHUNK	FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0

; =============== S U B	R O U T	I N E =======================================


$LN17		proc near		; DATA XREF: .text$mn:00001F4Fo
		mov	dword ptr [ebp-4], 1
$LN17		endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0

loc_1F65:				; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+58j
		mov	eax, offset $LN19
		retn
; END OF FUNCTION CHUNK	FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z

loc_1F6B:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+DEj
		mov	[ebp+var_4], 0FFFFFFFFh
		jmp	short loc_1F7B
; END OF FUNCTION CHUNK	FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z

; =============== S U B	R O U T	I N E =======================================


$LN19		proc near		; DATA XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:loc_1F65o
		mov	dword ptr [ebp-4], 0FFFFFFFFh

loc_1F7B:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+14Ej
		cmp	dword ptr [ebp+0Ch], 0
		jbe	short loc_1F9A
		mov	eax, [ebp+0Ch]
		push	eax		; Size
		mov	ecx, [ebp-14h]
		call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
		push	eax		; Src
		mov	ecx, [ebp-20h]
		push	ecx		; Dst
		call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
		add	esp, 0Ch

loc_1F9A:				; CODE XREF: $LN19+Bj
		push	0		; Size
		push	1		; char
		mov	ecx, [ebp-14h]
		call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
		lea	edx, [ebp-20h]
		push	edx		; int
		mov	eax, [ebp-14h]
		add	eax, 4
		push	eax		; void *
		lea	ecx, [ebp-27h]
		push	ecx
		mov	ecx, [ebp-14h]
		call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
		mov	ecx, eax
		call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char	*,char * &>(char * *,char * &)
		mov	edx, [ebp-14h]
		mov	eax, [ebp-18h]
		mov	[edx+18h], eax
		mov	ecx, [ebp+0Ch]
		push	ecx
		mov	ecx, [ebp-14h]
		call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN23
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		mov	ecx, [ebp-0Ch]
		mov	large fs:0, ecx
		pop	ecx
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 38h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
$LN19		endp ; sp-analysis failed

; ---------------------------------------------------------------------------
$LN23		dd 1			; DATA XREF: $LN19+69o
		dd offset $LN22
$LN22		dd 0FFFFFFE0h, 4	; DATA XREF: .text$mn:0000200Co
		dd offset $LN20		; "_Ptr"
$LN20		db '_Ptr',0             ; DATA XREF: .text$mn:00002018o
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$x		segment	para public 'CODE' use32
		assume cs:_text$x
		;org 2024h
; COMDAT (pick associative to section at 1E24)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
					; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+5o

arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		lea	eax, [edx+0Ch]
		mov	ecx, [edx-3Ch]
		xor	ecx, eax
		call	@__security_check_cookie@4 ; __security_check_cookie(x)
		mov	eax, offset __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z

loc_203A:				; DATA XREF: .rdata:$SG40040o
					; .rdata:$SG40042o
		jmp	___CxxFrameHandler3
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$x		ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2040h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Eos(unsigned int)
		public ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc	near
					; CODE XREF: $LN19+60p
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+98p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	byte ptr [ebp+var_8+3],	0

loc_205B:				; DATA XREF: .rdata:$SG40044o
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	[eax+14h], ecx
		lea	edx, [ebp+var_8+3]
		push	edx
		mov	ecx, [ebp+var_4]
		call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
		add	eax, [ebp+arg_0]
		push	eax
		call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign(char &,char const &)
		add	esp, 8
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 208Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::_String_alloc<0,	struct std::_String_base_types<char, class std::allocator<char>>>::_Free_proxy(void)
		public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+11p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		lea	ecx, [ebp+var_C+3]
		call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
		mov	esi, esp
		mov	ecx, [ebp+var_4] ; this
		call	dword ptr ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ ;	std::_Container_base12::_Orphan_all(void)
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	eax, [ebp+var_4]
		mov	ecx, [eax]
		push	ecx
		lea	ecx, [ebp+var_C+3]
		call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
		push	1		; int
		mov	edx, [ebp+var_4]
		mov	eax, [edx]
		push	eax		; void *
		lea	ecx, [ebp+var_C+3]
		call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
		mov	ecx, [ebp+var_4]
		mov	dword ptr [ecx], 0
		push	edx
		mov	ecx, ebp
		push	eax
		lea	edx, $LN5_0
		call	@_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
		pop	eax
		pop	edx
		pop	esi
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp

; ---------------------------------------------------------------------------
$LN5_0		dd 1			; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+60o
		dd offset $LN4_0
$LN4_0		dd 0FFFFFFF7h, 1	; DATA XREF: .text$mn:0000210Co
		dd offset $LN3_0	; "_Alproxy"
$LN3_0		db '_Alproxy',0         ; DATA XREF: .text$mn:00002118o
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2128h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: struct std::_Wrap_alloc<class	std::allocator<char>> __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Getal(void)const
		public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+BEp
					; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+14p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+arg_0]
		call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)
		mov	eax, [ebp+arg_0]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2154h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Grow(unsigned int, bool)
		public ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+78p
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+66p

var_C		= dword	ptr -0Ch
Size		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+Size], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+var_4]
		call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
		cmp	eax, [ebp+arg_0]
		jnb	short loc_2187
		mov	ecx, [ebp+var_4]
		call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)

loc_2187:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+29j
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+18h]
		cmp	ecx, [ebp+arg_0]
		jnb	short loc_21A7
		mov	edx, [ebp+var_4]
		mov	eax, [edx+14h]
		push	eax
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	ecx, [ebp+var_4]
		call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)
		jmp	short loc_21F1
; ---------------------------------------------------------------------------

loc_21A7:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+3Cj
		movzx	edx, [ebp+arg_4]
		test	edx, edx
		jz	short loc_21E1
		cmp	[ebp+arg_0], 10h
		jnb	short loc_21E1
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		cmp	ecx, [eax+14h]
		jnb	short loc_21C8
		mov	edx, [ebp+arg_0]
		mov	[ebp+Size], edx
		jmp	short loc_21D1
; ---------------------------------------------------------------------------

loc_21C8:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+6Aj
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+14h]
		mov	[ebp+Size], ecx

loc_21D1:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+72j
		mov	edx, [ebp+Size]
		push	edx		; Size
		push	1		; char
		mov	ecx, [ebp+var_4]
		call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ;	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
		jmp	short loc_21F1
; ---------------------------------------------------------------------------

loc_21E1:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+59j
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+5Fj
		cmp	[ebp+arg_0], 0
		jnz	short loc_21F1
		push	0
		mov	ecx, [ebp+var_4]
		call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)

loc_21F1:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+51j
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+8Bj ...
		cmp	[ebp+arg_0], 0
		jbe	short loc_2200
		mov	[ebp+var_C], 1
		jmp	short loc_2207
; ---------------------------------------------------------------------------

loc_2200:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+A1j
		mov	[ebp+var_C], 0

loc_2207:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+AAj
		mov	al, byte ptr [ebp+var_C]
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 221Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Inside(char const *)
		public ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+31p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		cmp	[ebp+arg_0], 0
		jz	short loc_2250
		mov	ecx, [ebp+var_4]
		call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
		cmp	[ebp+arg_0], eax
		jb	short loc_2250
		mov	ecx, [ebp+var_4]
		call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
		mov	ecx, [ebp+var_4]
		add	eax, [ecx+14h]
		cmp	eax, [ebp+arg_0]
		ja	short loc_2256

loc_2250:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+12j
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+1Fj
		xor	al, al
		jmp	short loc_2258
; ---------------------------------------------------------------------------
		jmp	short loc_2258
; ---------------------------------------------------------------------------

loc_2256:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+32j
		mov	al, 1

loc_2258:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+36j
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+38j
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2268h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: char * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)
		public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
					; CODE XREF: $LN19+14p
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+2Bp ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		cmp	dword ptr [eax+18h], 10h
		jb	short loc_229C
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+4]
		push	edx
		call	??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
		add	esp, 4
		mov	[ebp+var_8], eax
		jmp	short loc_22A5
; ---------------------------------------------------------------------------

loc_229C:				; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+1Ej
		mov	eax, [ebp+var_4]
		add	eax, 4
		mov	[ebp+var_8], eax

loc_22A5:				; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+32j
		mov	eax, [ebp+var_8]
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 22B8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: char const * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)const
		public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+8Bp

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		cmp	dword ptr [eax+18h], 10h
		jb	short loc_22EC
		mov	ecx, [ebp+var_4]
		mov	edx, [ecx+4]
		push	edx
		call	??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
		add	esp, 4
		mov	[ebp+var_8], eax
		jmp	short loc_22F5
; ---------------------------------------------------------------------------

loc_22EC:				; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+1Ej
		mov	eax, [ebp+var_4]
		add	eax, 4
		mov	[ebp+var_8], eax

loc_22F5:				; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+32j
		mov	eax, [ebp+var_8]
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2308h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(char, size_t	Size)
		public ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+55p
					; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1+7p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= byte ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		movzx	eax, [ebp+arg_0]
		test	eax, eax
		jnz	short loc_2330
		jmp	short loc_23A3
; ---------------------------------------------------------------------------

loc_2330:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+24j
		mov	ecx, [ebp+var_4]
		cmp	dword ptr [ecx+18h], 10h
		jb	short loc_23A3
		mov	edx, [ebp+var_4]
		mov	eax, [edx+4]
		mov	[ebp+var_8], eax
		mov	ecx, [ebp+var_4]
		add	ecx, 4
		push	ecx
		lea	edx, [ebp+var_C+3]
		push	edx
		mov	ecx, [ebp+var_4]
		call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
		mov	ecx, eax
		call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)
		cmp	[ebp+Size], 0
		jbe	short loc_2382
		mov	eax, [ebp+Size]
		push	eax		; Size
		mov	ecx, [ebp+var_8]
		push	ecx
		call	??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
		add	esp, 4
		push	eax		; Src
		mov	edx, [ebp+var_4]
		add	edx, 4
		push	edx		; Dst
		call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
		add	esp, 0Ch

loc_2382:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+58j
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+18h]
		add	ecx, 1
		push	ecx		; int
		mov	edx, [ebp+var_8]
		push	edx		; void *
		lea	eax, [ebp+var_C+2]
		push	eax
		mov	ecx, [ebp+var_4]
		call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
		mov	ecx, eax
		call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)

loc_23A3:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+26j
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+2Fj
		mov	ecx, [ebp+var_4]
		mov	dword ptr [ecx+18h], 0Fh
		mov	edx, [ebp+Size]
		push	edx
		mov	ecx, [ebp+var_4]
		call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 23CCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xlen(void)const
		public ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc	near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+2Ep

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	esi, esp
		push	offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
		call	dword ptr ds:__imp_?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2400h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xran(void)const
		public ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc	near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+27p
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+1Cp	...

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	esi, esp
		push	offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
		call	dword ptr ds:__imp_?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2434h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: char * __thiscall std::_Wrap_alloc<class std::allocator<char>>::allocate(unsigned int)
		public ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+D0p
					; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+26p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_0]
		push	eax
		mov	ecx, [ebp+var_4]
		call	?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2460h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: char * __thiscall std::allocator<char>::allocate(unsigned int)
		public ?allocate@?$allocator@D@std@@QAEPADI@Z
?allocate@?$allocator@D@std@@QAEPADI@Z proc near
					; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::allocate(uint)+15p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		push	0
		mov	eax, [ebp+arg_0]
		push	eax
		call	??$_Allocate@D@std@@YAPADIPAD@Z	; std::_Allocate<char>(uint,char *)
		add	esp, 8
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?allocate@?$allocator@D@std@@QAEPADI@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 248Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: struct std::_Container_proxy * __thiscall std::allocator<struct std::_Container_proxy>::allocate(unsigned int)
		public ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z	proc near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+2Dp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		push	0
		mov	eax, [ebp+arg_0]
		push	eax
		call	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)
		add	esp, 8
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 24B8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>> & __thiscall	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>>::assign(class std::basic_string<char, struct	std::char_traits<char>,	class std::allocator<char>> const &, unsigned int, unsigned int)
		public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+56p

Size		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+Size], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+arg_0]
		call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
		cmp	eax, [ebp+arg_4]
		jnb	short loc_24E4
		mov	ecx, [ebp+var_4]
		call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)

loc_24E4:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+22j
		mov	ecx, [ebp+arg_0]
		call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
		sub	eax, [ebp+arg_4]
		mov	[ebp+Size], eax
		mov	eax, [ebp+arg_8]
		cmp	eax, [ebp+Size]
		jnb	short loc_2500
		mov	ecx, [ebp+arg_8]
		mov	[ebp+Size], ecx

loc_2500:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+40j
		mov	edx, [ebp+var_4]
		cmp	edx, [ebp+arg_0]
		jnz	short loc_2527
		mov	eax, [ebp+arg_4]
		add	eax, [ebp+Size]
		push	eax
		mov	ecx, [ebp+var_4]
		call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)
		mov	ecx, [ebp+arg_4]
		push	ecx
		push	0
		mov	ecx, [ebp+var_4]
		call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)
		jmp	short loc_2569
; ---------------------------------------------------------------------------

loc_2527:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+4Ej
		push	0
		mov	edx, [ebp+Size]
		push	edx
		mov	ecx, [ebp+var_4]
		call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
		movzx	eax, al
		test	eax, eax
		jz	short loc_2569
		mov	ecx, [ebp+Size]
		push	ecx		; Size
		mov	ecx, [ebp+arg_0]
		call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
		add	eax, [ebp+arg_4]
		push	eax		; Src
		mov	ecx, [ebp+var_4]
		call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
		push	eax		; Dst
		call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
		add	esp, 0Ch
		mov	edx, [ebp+Size]
		push	edx
		mov	ecx, [ebp+var_4]
		call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)

loc_2569:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+6Dj
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&,uint,uint)+82j
		mov	eax, [ebp+var_4]
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	0Ch
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 257Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char *Str)
		public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+61p

var_4		= dword	ptr -4
Str		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		push	490h		; unsigned int
		push	offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
		mov	eax, [ebp+Str]
		push	eax		; int
		call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char	const *,wchar_t	const *,uint)
		add	esp, 0Ch
		mov	ecx, [ebp+Str]
		push	ecx		; Str
		call	?length@?$char_traits@D@std@@SAIPBD@Z ;	std::char_traits<char>::length(char const *)
		add	esp, 4
		push	eax		; Size
		mov	edx, [ebp+Str]
		push	edx		; Src
		mov	ecx, [ebp+var_4]
		call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char	const *,uint)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 25CCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(void *Src, size_t Size)
		public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+38p

var_4		= dword	ptr -4
Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		cmp	[ebp+Size], 0
		jz	short loc_25F6
		push	47Fh		; unsigned int
		push	offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
		mov	eax, [ebp+Src]
		push	eax		; int
		call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char	const *,wchar_t	const *,uint)
		add	esp, 0Ch

loc_25F6:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+12j
		mov	ecx, [ebp+Src]
		push	ecx
		mov	ecx, [ebp+var_4]
		call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
		movzx	edx, al
		test	edx, edx
		jz	short loc_2629
		mov	eax, [ebp+Size]
		push	eax
		mov	ecx, [ebp+var_4]
		call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
		mov	ecx, [ebp+Src]
		sub	ecx, eax
		push	ecx
		mov	edx, [ebp+var_4]
		push	edx
		mov	ecx, [ebp+var_4]
		call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
		jmp	short loc_2666
; ---------------------------------------------------------------------------

loc_2629:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+3Bj
		push	0
		mov	eax, [ebp+Size]
		push	eax
		mov	ecx, [ebp+var_4]
		call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
		movzx	ecx, al
		test	ecx, ecx
		jz	short loc_2663
		mov	edx, [ebp+Size]
		push	edx		; Size
		mov	eax, [ebp+Src]
		push	eax		; Src
		mov	ecx, [ebp+var_4]
		call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
		push	eax		; Dst
		call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
		add	esp, 0Ch
		mov	ecx, [ebp+Size]
		push	ecx
		mov	ecx, [ebp+var_4]
		call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)

loc_2663:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+70j
		mov	eax, [ebp+var_4]

loc_2666:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+5Bj
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2678h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static void __cdecl std::char_traits<char>::assign(char &, char const	&)
		public ?assign@?$char_traits@D@std@@SAXAADABD@Z
?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+34p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	dl, [ecx]
		mov	[eax], dl
		pop	ebp
		retn
?assign@?$char_traits@D@std@@SAXAADABD@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2688h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct std::error_category *__thiscall std::error_code::category(std::error_code *__hidden this)
		public ?category@error_code@std@@QBEABVerror_category@2@XZ
?category@error_code@std@@QBEABVerror_category@2@XZ proc near
					; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+1Ap

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	eax, [eax+4]
		mov	esp, ebp
		pop	ebp
		retn
?category@error_code@std@@QBEABVerror_category@2@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 26A0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct std::error_category *__thiscall std::error_condition::category(std::error_condition *__hidden this)
		public ?category@error_condition@std@@QBEABVerror_category@2@XZ
?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
					; CODE XREF: std::error_condition::operator==(std::error_condition const &)+1Bp
					; std::error_condition::operator==(std::error_condition	const &)+24p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	eax, [eax+4]
		mov	esp, ebp
		pop	ebp
		retn
?category@error_condition@std@@QBEABVerror_category@2@XZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 26B8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl std::char_traits<char>::copy(void	*Dst, void *Src, size_t	Size)
		public ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near ; CODE XREF: $LN19+1Ep
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+72p ...

var_4		= dword	ptr -4
Dst		= dword	ptr  8
Src		= dword	ptr  0Ch
Size		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		cmp	[ebp+Size], 0
		jnz	short loc_26D1
		mov	eax, [ebp+Dst]
		mov	[ebp+var_4], eax
		jmp	short loc_26E8
; ---------------------------------------------------------------------------

loc_26D1:				; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+Fj
		mov	ecx, [ebp+Size]
		push	ecx		; Size
		mov	edx, [ebp+Src]
		push	edx		; Src
		mov	eax, [ebp+Dst]
		push	eax		; Dst
		call	_memcpy
		add	esp, 0Ch
		mov	[ebp+var_4], eax

loc_26E8:				; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+17j
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 26FCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::_Wrap_alloc<std::allocator<char>>::deallocate(void	*, int)
		public ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+96p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_4]
		push	eax		; int
		mov	ecx, [ebp+arg_0]
		push	ecx		; void *
		mov	ecx, [ebp+var_4]
		call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 272Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::allocator<char>::deallocate(void *, int)
		public ?deallocate@?$allocator@D@std@@QAEXPADI@Z
?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
					; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)+19p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2758h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	std::allocator<std::_Container_proxy>::deallocate(void *, int)
		public ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc	near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+4Ep

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_0]
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2784h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual class	std::error_condition __thiscall	std::_System_error_category::default_error_condition(int)const
		public ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
					; DATA XREF: .rdata:000030F0o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax		; int
		call	dword ptr ds:__imp_?_Syserror_map@std@@YAPBDH@Z	; std::_Syserror_map(int)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		test	eax, eax
		jz	short loc_27C6
		call	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category(void)
		push	eax		; struct std::error_category *
		mov	ecx, [ebp+arg_4]
		push	ecx		; int
		mov	ecx, [ebp+arg_0] ; this
		call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
		mov	eax, [ebp+arg_0]
		jmp	short loc_27DB
; ---------------------------------------------------------------------------
		jmp	short loc_27DB
; ---------------------------------------------------------------------------

loc_27C6:				; CODE XREF: std::_System_error_category::default_error_condition(int)+27j
		call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category(void)
		push	eax		; struct std::error_category *
		mov	edx, [ebp+arg_4]
		push	edx		; int
		mov	ecx, [ebp+arg_0] ; this
		call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
		mov	eax, [ebp+arg_0]

loc_27DB:				; CODE XREF: std::_System_error_category::default_error_condition(int)+3Ej
					; std::_System_error_category::default_error_condition(int)+40j
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 27ECh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual class	std::error_condition __thiscall	std::error_category::default_error_condition(int)const
		public ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
					; DATA XREF: .rdata:00003060o
					; .rdata:0000307Co ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		push	eax		; struct std::error_category *
		mov	ecx, [ebp+arg_4]
		push	ecx		; int
		mov	ecx, [ebp+arg_0] ; this
		call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
		mov	eax, [ebp+arg_0]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2820h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static int __cdecl std::char_traits<char>::eof(void)
		public ?eof@?$char_traits@D@std@@SAHXZ
?eof@?$char_traits@D@std@@SAHXZ	proc near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1E2p
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+30Dp
		push	ebp
		mov	ebp, esp
		or	eax, 0FFFFFFFFh
		pop	ebp
		retn
?eof@?$char_traits@D@std@@SAHXZ	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2828h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static bool __cdecl std::char_traits<char>::eq_int_type(int const &, int const &)
		public ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z proc near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1F2p
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+31Dp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+arg_4]
		mov	edx, [eax]
		cmp	edx, [ecx]
		jnz	short loc_2848
		mov	[ebp+var_4], 1
		jmp	short loc_284F
; ---------------------------------------------------------------------------

loc_2848:				; CODE XREF: std::char_traits<char>::eq_int_type(int const &,int const &)+15j
		mov	[ebp+var_4], 0

loc_284F:				; CODE XREF: std::char_traits<char>::eq_int_type(int const &,int const &)+1Ej
		mov	al, byte ptr [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2858h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; bool __thiscall std::error_category::equivalent(std::error_category *this, const struct std::error_code *, int)
		public ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
					; DATA XREF: .rdata:00003064o
					; .rdata:00003080o ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+arg_0] ; this
		call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category(void)
		push	eax
		mov	ecx, [ebp+var_4]
		call	??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
		movzx	eax, al
		test	eax, eax
		jz	short loc_289D
		mov	ecx, [ebp+arg_0] ; this
		call	?value@error_code@std@@QBEHXZ ;	std::error_code::value(void)
		cmp	eax, [ebp+arg_4]
		jnz	short loc_289D
		mov	[ebp+var_8], 1
		jmp	short loc_28A4
; ---------------------------------------------------------------------------

loc_289D:				; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+2Dj
					; std::error_category::equivalent(std::error_code const	&,int)+3Aj
		mov	[ebp+var_8], 0

loc_28A4:				; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+43j
		mov	al, byte ptr [ebp+var_8]
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 28B8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; bool __thiscall std::error_category::equivalent(std::error_category *this, int, const	struct std::error_condition *)
		public ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
					; DATA XREF: .rdata:00003068o
					; .rdata:00003084o ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+arg_4]
		push	eax		; std::error_condition *
		mov	esi, esp
		mov	ecx, [ebp+arg_0]
		push	ecx
		lea	edx, [ebp+var_C]
		push	edx
		mov	eax, [ebp+var_4]
		mov	edx, [eax]
		mov	ecx, [ebp+var_4]
		mov	eax, [edx+0Ch]
		call	eax
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	ecx, eax
		call	??8error_condition@std@@QBE_NABV01@@Z ;	std::error_condition::operator==(std::error_condition const &)
		pop	esi
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2914h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>> & __thiscall	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int)
		public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Ap

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+14h]
		cmp	ecx, [ebp+arg_0]
		jnb	short loc_2935
		mov	ecx, [ebp+var_4]
		call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)

loc_2935:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+17j
		mov	edx, [ebp+arg_0]
		push	edx
		mov	ecx, [ebp+var_4]
		call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2954h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: class	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>> & __thiscall	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int,	unsigned int)
		public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+68p

var_C		= dword	ptr -0Ch
Dst		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	[ebp+var_C], 0CCCCCCCCh
		mov	[ebp+Dst], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	ecx, [eax+14h]
		cmp	ecx, [ebp+arg_0]
		jnb	short loc_2985
		mov	ecx, [ebp+var_4]
		call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)

loc_2985:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+27j
		mov	edx, [ebp+var_4]
		mov	eax, [edx+14h]
		sub	eax, [ebp+arg_0]
		cmp	eax, [ebp+arg_4]
		ja	short loc_29A1
		mov	ecx, [ebp+arg_0]
		push	ecx
		mov	ecx, [ebp+var_4]
		call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
		jmp	short loc_29E7
; ---------------------------------------------------------------------------

loc_29A1:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+3Dj
		cmp	[ebp+arg_4], 0
		jbe	short loc_29E7
		mov	ecx, [ebp+var_4]
		call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
		add	eax, [ebp+arg_0]
		mov	[ebp+Dst], eax
		mov	edx, [ebp+var_4]
		mov	eax, [edx+14h]
		sub	eax, [ebp+arg_4]
		mov	[ebp+var_C], eax
		mov	ecx, [ebp+var_C]
		sub	ecx, [ebp+arg_0]
		push	ecx		; Size
		mov	edx, [ebp+Dst]
		add	edx, [ebp+arg_4]
		push	edx		; Src
		mov	eax, [ebp+Dst]
		push	eax		; Dst
		call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
		add	esp, 0Ch
		mov	ecx, [ebp+var_C]
		push	ecx
		mov	ecx, [ebp+var_4]
		call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)

loc_29E7:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+4Bj
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+51j
		mov	eax, [ebp+var_4]
		add	esp, 0Ch
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 29FCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; float	__cdecl	fabs(float)
		public ?fabs@@YAMM@Z
?fabs@@YAMM@Z	proc near		; CODE XREF: mozilla::gfx::NudgeToInteger(float	*)+68p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		movss	xmm0, [ebp+arg_0]
		movss	[esp+4+var_4], xmm0
		call	_fabsf
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?fabs@@YAMM@Z	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2A1Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct std::error_category *__cdecl std::generic_category()
		public ?generic_category@std@@YAABVerror_category@1@XZ
?generic_category@std@@YAABVerror_category@1@XZ	proc near
					; CODE XREF: std::_System_error_category::default_error_condition(int)+29p
		push	ebp
		mov	ebp, esp
		mov	eax, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
		pop	ebp
		retn
?generic_category@std@@YAABVerror_category@1@XZ	endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2A28h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl std::char_traits<char>::length(char *Str)
		public ?length@?$char_traits@D@std@@SAIPBD@Z
?length@?$char_traits@D@std@@SAIPBD@Z proc near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+49p
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+28p

var_4		= dword	ptr -4
Str		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	eax, [ebp+Str]
		movsx	ecx, byte ptr [eax]
		test	ecx, ecx
		jnz	short loc_2A46
		mov	[ebp+var_4], 0
		jmp	short loc_2A55
; ---------------------------------------------------------------------------

loc_2A46:				; CODE XREF: std::char_traits<char>::length(char const *)+13j
		mov	edx, [ebp+Str]
		push	edx		; Str
		call	_strlen
		add	esp, 4
		mov	[ebp+var_4], eax

loc_2A55:				; CODE XREF: std::char_traits<char>::length(char const *)+1Cj
		mov	eax, [ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?length@?$char_traits@D@std@@SAIPBD@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2A68h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<char>>::max_size(void)const
		public ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+28p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		push	eax
		call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z	; std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)
		add	esp, 4
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2A90h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: unsigned int __thiscall std::allocator<char>::max_size(void)const
		public ?max_size@?$allocator@D@std@@QBEIXZ
?max_size@?$allocator@D@std@@QBEIXZ proc near
					; CODE XREF: std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char>	const &)+6p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		or	eax, 0FFFFFFFFh
		mov	esp, ebp
		pop	ebp
		retn
?max_size@?$allocator@D@std@@QBEIXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2AA8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<char>>::max_size(class	std::allocator<char> const &)
		public ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z	proc near
					; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::max_size(void)+12p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		call	?max_size@?$allocator@D@std@@QBEIXZ ; std::allocator<char>::max_size(void)
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z	endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2ABCh
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::max_size(void)const
		public ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+4Cp
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+83p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, 0CCCCCCCCh
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		lea	eax, [ebp+var_C+3]
		push	eax
		mov	ecx, [ebp+var_4]
		call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
		mov	ecx, eax
		call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char>>::max_size(void)
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 1
		ja	short loc_2AFB
		mov	[ebp+var_10], 1
		jmp	short loc_2B04
; ---------------------------------------------------------------------------

loc_2AFB:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+34j
		mov	ecx, [ebp+var_8]
		sub	ecx, 1
		mov	[ebp+var_10], ecx

loc_2B04:				; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+3Dj
		mov	eax, [ebp+var_10]
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2B18h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual class	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Generic_error_category::message(int)const
		public ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
					; CODE XREF: std::_Iostream_error_category::message(int)+4Cp
					; DATA XREF: .rdata:00003078o

Str		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+Str], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		mov	[ebp+var_C], 0
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax		; int
		call	dword ptr ds:__imp_?_Syserror_map@std@@YAPBDH@Z	; std::_Syserror_map(int)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_2B61
		mov	ecx, [ebp+var_8]
		mov	[ebp+Str], ecx
		jmp	short loc_2B68
; ---------------------------------------------------------------------------

loc_2B61:				; CODE XREF: std::_Generic_error_category::message(int)+3Fj
		mov	[ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@	; "unknown error"

loc_2B68:				; CODE XREF: std::_Generic_error_category::message(int)+47j
		mov	edx, [ebp+Str]
		push	edx		; Str
		mov	ecx, [ebp+arg_0]
		call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
		mov	eax, [ebp+var_C]
		or	eax, 1
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_0]
		pop	esi
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2B94h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual class	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Iostream_error_category::message(int)const
		public ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc	near
					; DATA XREF: .rdata:000030ACo

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	[ebp+var_8], 0CCCCCCCCh
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	[ebp+var_8], 0
		cmp	[ebp+arg_4], 1
		jnz	short loc_2BD5
		push	offset ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ ; "iostream stream error"
		mov	ecx, [ebp+arg_0]
		call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
		mov	eax, [ebp+var_8]
		or	eax, 1
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_0]
		jmp	short loc_2BF1
; ---------------------------------------------------------------------------
		jmp	short loc_2BF1
; ---------------------------------------------------------------------------

loc_2BD5:				; CODE XREF: std::_Iostream_error_category::message(int)+22j
		mov	ecx, [ebp+arg_4]
		push	ecx
		mov	edx, [ebp+arg_0]
		push	edx
		mov	ecx, [ebp+var_4]
		call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
		mov	eax, [ebp+var_8]
		or	eax, 1
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_0]

loc_2BF1:				; CODE XREF: std::_Iostream_error_category::message(int)+3Dj
					; std::_Iostream_error_category::message(int)+3Fj
		add	esp, 8
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2C04h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: virtual class	std::basic_string<char,	struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_System_error_category::message(int)const
		public ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
					; DATA XREF: .rdata:000030ECo

Str		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	eax, 0CCCCCCCCh
		mov	[ebp+Str], eax
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		mov	[ebp+var_4], ecx
		mov	[ebp+var_C], 0
		mov	esi, esp
		mov	eax, [ebp+arg_4]
		push	eax		; int
		call	dword ptr ds:__imp_?_Winerror_map@std@@YAPBDH@Z	; std::_Winerror_map(int)
		add	esp, 4
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_8], eax
		cmp	[ebp+var_8], 0
		jz	short loc_2C4D
		mov	ecx, [ebp+var_8]
		mov	[ebp+Str], ecx
		jmp	short loc_2C54
; ---------------------------------------------------------------------------

loc_2C4D:				; CODE XREF: std::_System_error_category::message(int)+3Fj
		mov	[ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@	; "unknown error"

loc_2C54:				; CODE XREF: std::_System_error_category::message(int)+47j
		mov	edx, [ebp+Str]
		push	edx		; Str
		mov	ecx, [ebp+arg_0]
		call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
		mov	eax, [ebp+var_C]
		or	eax, 1
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_0]
		pop	esi
		add	esp, 10h
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2C80h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl std::char_traits<char>::move(void	*Dst, void *Src, size_t	Size)
		public ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+7Fp

var_4		= dword	ptr -4
Dst		= dword	ptr  8
Src		= dword	ptr  0Ch
Size		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		cmp	[ebp+Size], 0
		jnz	short loc_2C9A
		mov	eax, [ebp+Dst]
		mov	[ebp+var_4], eax
		jmp	short loc_2CBB
; ---------------------------------------------------------------------------

loc_2C9A:				; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+10j
		mov	esi, esp
		mov	ecx, [ebp+Size]
		push	ecx		; Size
		mov	edx, [ebp+Src]
		push	edx		; Src
		mov	eax, [ebp+Dst]
		push	eax		; Dst
		call	dword ptr ds:__imp__memmove
		add	esp, 0Ch
		cmp	esi, esp
		call	__RTC_CheckEsp
		mov	[ebp+var_4], eax

loc_2CBB:				; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+18j
		mov	eax, [ebp+var_4]
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
?move@?$char_traits@D@std@@SAPADPADPBDI@Z endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2CD0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	char *__thiscall std::_Generic_error_category::name(std::_Generic_error_category *__hidden this)
		public ?name@_Generic_error_category@std@@UBEPBDXZ
?name@_Generic_error_category@std@@UBEPBDXZ proc near ;	DATA XREF: .rdata:00003074o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, offset ??_C@_07DCLBNMLN@generic?$AA@ ; "generic"
		mov	esp, ebp
		pop	ebp
		retn
?name@_Generic_error_category@std@@UBEPBDXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2CE8h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	char *__thiscall std::_Iostream_error_category::name(std::_Iostream_error_category *__hidden this)
		public ?name@_Iostream_error_category@std@@UBEPBDXZ
?name@_Iostream_error_category@std@@UBEPBDXZ proc near ; DATA XREF: .rdata:000030A8o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, offset ??_C@_08LLGCOLLL@iostream?$AA@ ; "iostream"
		mov	esp, ebp
		pop	ebp
		retn
?name@_Iostream_error_category@std@@UBEPBDXZ endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2D00h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	char *__thiscall std::_System_error_category::name(std::_System_error_category *__hidden this)
		public ?name@_System_error_category@std@@UBEPBDXZ
?name@_System_error_category@std@@UBEPBDXZ proc	near ; DATA XREF: .rdata:000030E8o

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, offset ??_C@_06FHFOAHML@system?$AA@ ; "system"
		mov	esp, ebp
		pop	ebp
		retn
?name@_System_error_category@std@@UBEPBDXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2D18h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::size(void)const
		public ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+1Ap
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const	&,uint,uint)+2Fp

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	eax, [eax+14h]
		mov	esp, ebp
		pop	ebp
		retn
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2D30h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; const	struct std::error_category *__cdecl std::system_category()
		public ?system_category@std@@YAABVerror_category@1@XZ
?system_category@std@@YAABVerror_category@1@XZ proc near
					; CODE XREF: std::_System_error_category::default_error_condition(int):loc_27C6p
		push	ebp
		mov	ebp, esp
		mov	eax, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_System_error_category std::_Error_objects<int>::_System_object
		pop	ebp
		retn
?system_category@std@@YAABVerror_category@1@XZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2D3Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall std::error_code::value(std::error_code	*__hidden this)
		public ?value@error_code@std@@QBEHXZ
?value@error_code@std@@QBEHXZ proc near	; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+32p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	eax, [eax]
		mov	esp, ebp
		pop	ebp
		retn
?value@error_code@std@@QBEHXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2D54h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall std::error_condition::value(std::error_condition *__hidden this)
		public ?value@error_condition@std@@QBEHXZ
?value@error_condition@std@@QBEHXZ proc	near
					; CODE XREF: std::error_condition::operator==(std::error_condition const &)+3Ap
					; std::error_condition::operator==(std::error_condition	const &)+44p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		mov	[ebp+var_4], ecx
		mov	eax, [ebp+var_4]
		mov	eax, [eax]
		mov	esp, ebp
		pop	ebp
		retn
?value@error_condition@std@@QBEHXZ endp

; ---------------------------------------------------------------------------
		align 4
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2D6Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _cosf
_cosf		proc near		; CODE XREF: mozilla::gfx::Matrix::Rotation(float)+3Fp

var_C		= qword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		cvtss2sd xmm0, [ebp+arg_0]
		sub	esp, 8
		movsd	[esp+0Ch+var_C], xmm0
		call	_cos
		add	esp, 8
		fstp	[ebp+var_4]
		fld	[ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_cosf		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2DA0h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _fabsf
_fabsf		proc near		; CODE XREF: fabs(float)+Ep

var_C		= qword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		cvtss2sd xmm0, [ebp+arg_0]
		sub	esp, 8
		movsd	[esp+0Ch+var_C], xmm0
		call	_fabs
		add	esp, 8
		fstp	[ebp+var_4]
		fld	[ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_fabsf		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2DD4h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _floorf
_floorf		proc near		; CODE XREF: mozilla::gfx::NudgeToInteger(float	*)+29p

var_10		= qword	ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	[ebp+var_4], 0CCCCCCCCh
		cvtss2sd xmm0, [ebp+arg_0]
		mov	esi, esp
		sub	esp, 8
		movsd	[esp+10h+var_10], xmm0
		call	dword ptr ds:__imp__floor
		add	esp, 8
		cmp	esi, esp
		call	__RTC_CheckEsp
		fstp	[ebp+var_4]
		fld	[ebp+var_4]
		pop	esi
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_floorf		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2E14h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _hypot
_hypot		proc near

var_14		= qword	ptr -14h
var_C		= qword	ptr -0Ch
arg_0		= qword	ptr  8
arg_8		= qword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, esp
		sub	esp, 8
		movsd	xmm0, [ebp+arg_8]
		movsd	[esp+0Ch+var_C], xmm0
		sub	esp, 8
		movsd	xmm0, [ebp+arg_0]
		movsd	[esp+14h+var_14], xmm0
		call	dword ptr ds:__imp___hypot
		add	esp, 10h
		cmp	esi, esp
		call	__RTC_CheckEsp
		pop	esi
		cmp	ebp, esp
		call	__RTC_CheckEsp
		pop	ebp
		retn
_hypot		endp

; ---------------------------------------------------------------------------
		align 10h
_text$mn	ends

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text$mn	segment	para public 'CODE' use32
		assume cs:_text$mn
		;org 2E50h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _sinf
_sinf		proc near		; CODE XREF: mozilla::gfx::Matrix::Rotation(float)+29p

var_C		= qword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	[ebp+var_4], 0CCCCCCCCh
		cvtss2sd xmm0, [ebp+arg_0]
		sub	esp, 8
		movsd	[esp+0Ch+var_C], xmm0
		call	_sin
		add	esp, 8
		fstp	[ebp+var_4]
		fld	[ebp+var_4]
		add	esp, 4
		cmp	ebp, esp
		call	__RTC_CheckEsp
		mov	esp, ebp
		pop	ebp
		retn
_sinf		endp

_text$mn	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 2E84h
; COMDAT (pick associative to section at 1150)
__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00002E94o
		dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
__ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z dd	19930522h, 1
					; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z+11o
		dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 2EB0h
; COMDAT (pick associative to section at 1280)
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00002EC0o
		dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z+11o
		dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 2EDCh
; COMDAT (pick associative to section at 1E24)
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 dd offset $SG4895
					; DATA XREF: .xdata$x:00002F64o
					; "Hit MOZ_CRASH(%s) at	%s:%d\n"
		dd 2 dup(0)
		dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 dd offset $SG4895
					; DATA XREF: .xdata$x:00002F50o
					; "Hit MOZ_CRASH(%s) at	%s:%d\n"
		dd 2 dup(0)
		dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z dd 0FFFFFFFFh, 0
					; DATA XREF: .xdata$x:00002F24o
		dd 0FFFFFFFFh, 0
		dd 1, 0
		dd 1, 0
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z dd 19930522h,	4
					; DATA XREF: __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z+11o
		dd offset __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
		dd 2
		dd offset __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
		dd 3 dup(0)
		dd 1
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z dd	2 dup(2), 3, 1
					; DATA XREF: .xdata$x:00002F2Co
		dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
		dd 2 dup(0)
		dd 3, 1
		dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 2F68h
; COMDAT (pick associative to section at 798)
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 dd offset $SG4895
					; DATA XREF: .xdata$x:00002F88o
					; "Hit MOZ_CRASH(%s) at	%s:%d\n"
		dd 2 dup(0)
		dd offset __catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z dd 2 dup(1), 2, 1
					; DATA XREF: .xdata$x:00002FB4o
		dd offset __catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00002FACo
		dd offset __unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
		dd 4 dup(0)
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z dd 19930522h, 3
					; DATA XREF: __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z+14o
		dd offset __unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
		dd 1
		dd offset __tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
		dd 3 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 2FC8h
; COMDAT (pick associative to section at 153C)
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00002FD8o
		dd offset __unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z+11o
		dd offset __unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 2FF4h
; COMDAT (pick associative to section at DFC)
__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z dd	0FFFFFFFFh
					; DATA XREF: .xdata$x:00003004o
		dd offset __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
__ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z+11o
		dd offset __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_xdata$x	segment	dword public 'DATA' use32
		assume cs:_xdata$x
		;org 3020h
; COMDAT (pick associative to section at D04)
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z	dd 0FFFFFFFFh
					; DATA XREF: .xdata$x:00003030o
		dd offset __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z dd 19930522h, 1
					; DATA XREF: __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z+11o
		dd offset __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
		dd 5 dup(0)
		dd 1
_xdata$x	ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	byte public 'BSS' use32
		assume cs:_bss
		;org 304Ch
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
_allocator_arg	db ?
_piecewise_construct db	?
		align 10h
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3050h
; COMDAT (pick largest)
		dd offset ??_R4error_category@std@@6B@ ; const std::error_category::`RTTI Complete Object Locator'
		public ??_7error_category@std@@6B@
; const	std::error_category::`vftable'
??_7error_category@std@@6B@ dd offset ??_Eerror_category@std@@UAEPAXI@Z
					; DATA XREF: std::error_category::error_category(void)+11o
					; std::error_category::~error_category(void)+11o
					; std::error_category::`vector deleting	destructor'(uint)
		dd offset __purecall
		dd offset __purecall
		dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
		dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
		dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z	; std::error_category::equivalent(int,std::error_condition const &)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 306Ch
; COMDAT (pick largest)
		dd offset ??_R4_Generic_error_category@std@@6B@	; const	std::_Generic_error_category::`RTTI Complete Object Locator'
		public ??_7_Generic_error_category@std@@6B@
; const	std::_Generic_error_category::`vftable'
??_7_Generic_error_category@std@@6B@ dd	offset ??_E_Generic_error_category@std@@UAEPAXI@Z
					; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+19o
					; std::_Generic_error_category::`vector	deleting destructor'(uint)
		dd offset ?name@_Generic_error_category@std@@UBEPBDXZ ;	std::_Generic_error_category::name(void)
		dd offset ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
		dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
		dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
		dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z	; std::error_category::equivalent(int,std::error_condition const &)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3088h
; COMDAT (pick any)
		public ??_C@_07DCLBNMLN@generic?$AA@
; `string'
??_C@_07DCLBNMLN@generic?$AA@ db 'generic',0
					; DATA XREF: std::_Generic_error_category::name(void)+Eo
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 3090h
; COMDAT (pick any)
		public ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
; `string'
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ db 'unknown error',0
					; DATA XREF: std::_Generic_error_category::message(int):loc_2B61o
					; std::_System_error_category::message(int):loc_2C4Do
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 30A0h
; COMDAT (pick largest)
		dd offset ??_R4_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
		public ??_7_Iostream_error_category@std@@6B@
; const	std::_Iostream_error_category::`vftable'
??_7_Iostream_error_category@std@@6B@ dd offset	??_E_Iostream_error_category@std@@UAEPAXI@Z
					; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+19o
					; std::_Iostream_error_category::`vector deleting destructor'(uint)
		dd offset ?name@_Iostream_error_category@std@@UBEPBDXZ ; std::_Iostream_error_category::name(void)
		dd offset ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message(int)
		dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
		dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
		dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z	; std::error_category::equivalent(int,std::error_condition const &)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 30BCh
; COMDAT (pick any)
		public ??_C@_08LLGCOLLL@iostream?$AA@
; `string'
??_C@_08LLGCOLLL@iostream?$AA@ db 'iostream',0
					; DATA XREF: std::_Iostream_error_category::name(void)+Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 30C8h
; COMDAT (pick any)
		public ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
; char `string'[]
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	db 'iostream stream error',0
					; DATA XREF: std::_Iostream_error_category::message(int)+24o
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 30E0h
; COMDAT (pick largest)
		dd offset ??_R4_System_error_category@std@@6B@ ; const std::_System_error_category::`RTTI Complete Object Locator'
		public ??_7_System_error_category@std@@6B@
; const	std::_System_error_category::`vftable'
??_7_System_error_category@std@@6B@ dd offset ??_E_System_error_category@std@@UAEPAXI@Z
					; DATA XREF: std::_System_error_category::_System_error_category(void)+19o
					; std::_System_error_category::`vector deleting	destructor'(uint)
		dd offset ?name@_System_error_category@std@@UBEPBDXZ ; std::_System_error_category::name(void)
		dd offset ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message(int)
		dd offset ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition(int)
		dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
		dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z	; std::error_category::equivalent(int,std::error_condition const &)
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 30FCh
; COMDAT (pick any)
		public ??_C@_06FHFOAHML@system?$AA@
; `string'
??_C@_06FHFOAHML@system?$AA@ db	'system',0
					; DATA XREF: std::_System_error_category::name(void)+Eo
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 3104h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
		public ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A dd ?
					; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o
					; `dynamic atexit destructor for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o ...
_bss		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 3108h
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
		public ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
; std::_Iostream_error_category	std::_Error_objects<int>::_Iostream_object
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A dd ?
					; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
					; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
_bss		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 310Ch
; COMDAT (pick any)
		assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
		public ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
; std::_System_error_category std::_Error_objects<int>::_System_object
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A dd	?
					; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o
					; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o ...
_bss		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 3110h
; COMDAT (pick any)
		public ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
; wchar_t `string'
??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
					; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+13o
					; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+19o
		unicode	0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
		unicode	0, <clude\xstring>,0
		align 10h
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 31A0h
; COMDAT (pick any)
		public ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
; char `string'[]
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ db 'string too long',0
					; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+11o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 31B0h
; COMDAT (pick any)
		public ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
; char `string'[]
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ db 'invalid string position',0
					; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+11o
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 31C8h
; COMDAT (pick any)
		public ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
; wchar_t `string'
??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@:
					; DATA XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+14o
		unicode	0, <invalid null pointer>,0
		align 4
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 31F4h
; COMDAT (pick any)
		public ??_R4error_category@std@@6B@
; const	std::error_category::`RTTI Complete Object Locator'
??_R4error_category@std@@6B@ dd	3 dup(0) ; DATA	XREF: .rdata:00003050o
		dd offset ??_R0?AVerror_category@std@@@8 ; std::error_category `RTTI Type Descriptor'
		dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 3208h
; COMDAT (pick any)
		public ??_R0?AVerror_category@std@@@8
; class	std::error_category `RTTI Type Descriptor'
??_R0?AVerror_category@std@@@8 dd offset ??_7type_info@@6B@ ; DATA XREF: .rdata$r:00003200o
					; .rdata$r:std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?averror_cate	db '.?AVerror_category@std@@',0
		align 4
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 322Ch
; COMDAT (pick any)
		public ??_R3error_category@std@@8
; std::error_category::`RTTI Class Hierarchy Descriptor'
??_R3error_category@std@@8 dd 2	dup(0)	; DATA XREF: .rdata$r:00003204o
					; .rdata$r:0000325Co
		dd 1
		dd offset ??_R2error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 323Ch
; COMDAT (pick any)
		public ??_R2error_category@std@@8
; std::error_category::`RTTI Base Class	Array'
??_R2error_category@std@@8 dd offset ??_R1A@?0A@EA@error_category@std@@8
					; DATA XREF: .rdata$r:00003238o
					; std::error_category::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 3244h
; COMDAT (pick any)
		public ??_R1A@?0A@EA@error_category@std@@8
; std::error_category::`RTTI Base Class	Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@error_category@std@@8 dd offset ??_R0?AVerror_category@std@@@8
					; DATA XREF: .rdata$r:std::error_category::`RTTI Base Class Array'o
					; .rdata$r:000032B4o ...
					; std::error_category `RTTI Type Descriptor'
		align 10h
		dd 0FFFFFFFFh, 0
		dd offset $SG4895	; "Hit MOZ_CRASH(%s) at	%s:%d\n"
		dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 3260h
; COMDAT (pick any)
		public ??_R4_Generic_error_category@std@@6B@
; const	std::_Generic_error_category::`RTTI Complete Object Locator'
??_R4_Generic_error_category@std@@6B@ dd 3 dup(0) ; DATA XREF: .rdata:0000306Co
		dd offset ??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category `RTTI Type Descriptor'
		dd offset ??_R3_Generic_error_category@std@@8 ;	std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 3274h
; COMDAT (pick any)
		public ??_R0?AV_Generic_error_category@std@@@8
; class	std::_Generic_error_category `RTTI Type	Descriptor'
??_R0?AV_Generic_error_category@std@@@8	dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:0000326Co
					; .rdata$r:std::_Generic_error_category::`RTTI Base Class Descriptor at	(0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?av_generic_e	db '.?AV_Generic_error_category@std@@',0
		align 10h
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 32A0h
; COMDAT (pick any)
		public ??_R3_Generic_error_category@std@@8
; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
??_R3_Generic_error_category@std@@8 dd 2 dup(0)	; DATA XREF: .rdata$r:00003270o
					; .rdata$r:000032D4o
		dd 2
		dd offset ??_R2_Generic_error_category@std@@8 ;	std::_Generic_error_category::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 32B0h
; COMDAT (pick any)
		public ??_R2_Generic_error_category@std@@8
; std::_Generic_error_category::`RTTI Base Class Array'
??_R2_Generic_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8
					; DATA XREF: .rdata$r:000032ACo
					; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@error_category@std@@8 ;	std::error_category::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 32BCh
; COMDAT (pick any)
		public ??_R1A@?0A@EA@_Generic_error_category@std@@8
; std::_Generic_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@_Generic_error_category@std@@8 dd	offset ??_R0?AV_Generic_error_category@std@@@8
					; DATA XREF: .rdata$r:std::_Generic_error_category::`RTTI Base Class Array'o
					; .rdata$r:0000332Co ...
					; std::_Generic_error_category `RTTI Type Descriptor'
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd offset $SG4895	; "Hit MOZ_CRASH(%s) at	%s:%d\n"
		dd offset ??_R3_Generic_error_category@std@@8 ;	std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 32D8h
; COMDAT (pick any)
		public ??_R4_Iostream_error_category@std@@6B@
; const	std::_Iostream_error_category::`RTTI Complete Object Locator'
??_R4_Iostream_error_category@std@@6B@ dd 3 dup(0) ; DATA XREF:	.rdata:000030A0o
		dd offset ??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category `RTTI Type Descriptor'
		dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 32ECh
; COMDAT (pick any)
		public ??_R0?AV_Iostream_error_category@std@@@8
; class	std::_Iostream_error_category `RTTI Type Descriptor'
??_R0?AV_Iostream_error_category@std@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:000032E4o
					; .rdata$r:std::_Iostream_error_category::`RTTI	Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		dd 0
a_?av_iostream_	db '.?AV_Iostream_error_category@std@@',0
		align 4
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 3318h
; COMDAT (pick any)
		public ??_R3_Iostream_error_category@std@@8
; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
??_R3_Iostream_error_category@std@@8 dd	2 dup(0) ; DATA	XREF: .rdata$r:000032E8o
					; .rdata$r:00003350o
		dd 3
		dd offset ??_R2_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 3328h
; COMDAT (pick any)
		public ??_R2_Iostream_error_category@std@@8
; std::_Iostream_error_category::`RTTI Base Class Array'
??_R2_Iostream_error_category@std@@8 dd	offset ??_R1A@?0A@EA@_Iostream_error_category@std@@8
					; DATA XREF: .rdata$r:00003324o
					; std::_Iostream_error_category::`RTTI Base Class Descriptor at	(0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@error_category@std@@8 ;	std::error_category::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 3338h
; COMDAT (pick any)
		public ??_R1A@?0A@EA@_Iostream_error_category@std@@8
; std::_Iostream_error_category::`RTTI Base Class Descriptor at	(0, -1,	0, 64)'
??_R1A@?0A@EA@_Iostream_error_category@std@@8 dd offset	??_R0?AV_Iostream_error_category@std@@@8
					; DATA XREF: .rdata$r:std::_Iostream_error_category::`RTTI Base	Class Array'o
					; std::_Iostream_error_category	`RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset $SG4895	; "Hit MOZ_CRASH(%s) at	%s:%d\n"
		dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 3354h
; COMDAT (pick any)
		public ??_R4_System_error_category@std@@6B@
; const	std::_System_error_category::`RTTI Complete Object Locator'
??_R4_System_error_category@std@@6B@ dd	3 dup(0) ; DATA	XREF: .rdata:000030E0o
		dd offset ??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category `RTTI Type Descriptor'
		dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data$r		segment	dword public 'DATA' use32
		assume cs:_data$r
		;org 3368h
; COMDAT (pick any)
		public ??_R0?AV_System_error_category@std@@@8
; class	std::_System_error_category `RTTI Type Descriptor'
??_R0?AV_System_error_category@std@@@8 dd offset ??_7type_info@@6B@
					; DATA XREF: .rdata$r:00003360o
					; .rdata$r:std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
					; const	type_info::`vftable'
		align 10h
a_?av_system_er	db '.?AV_System_error_category@std@@',0
		align 4
_data$r		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 3394h
; COMDAT (pick any)
		public ??_R3_System_error_category@std@@8
; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
??_R3_System_error_category@std@@8 dd 2	dup(0) ; DATA XREF: .rdata$r:00003364o
					; .rdata$r:000033CCo
		dd 3
		dd offset ??_R2_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 33A4h
; COMDAT (pick any)
		public ??_R2_System_error_category@std@@8
; std::_System_error_category::`RTTI Base Class	Array'
??_R2_System_error_category@std@@8 dd offset ??_R1A@?0A@EA@_System_error_category@std@@8
					; DATA XREF: .rdata$r:000033A0o
					; std::_System_error_category::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class	Descriptor at (0,-1,0,64)'
		dd offset ??_R1A@?0A@EA@error_category@std@@8 ;	std::error_category::`RTTI Base	Class Descriptor at (0,-1,0,64)'
		db 0
		align 4
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata$r	segment	dword public 'DATA' use32
		assume cs:_rdata$r
		;org 33B4h
; COMDAT (pick any)
		public ??_R1A@?0A@EA@_System_error_category@std@@8
; std::_System_error_category::`RTTI Base Class	Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@_System_error_category@std@@8 dd offset ??_R0?AV_System_error_category@std@@@8
					; DATA XREF: .rdata$r:std::_System_error_category::`RTTI Base Class Array'o
					; std::_System_error_category `RTTI Type Descriptor'
		dd 2, 0
		dd 0FFFFFFFFh, 0
		dd offset $SG4895	; "Hit MOZ_CRASH(%s) at	%s:%d\n"
		dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class	Hierarchy Descriptor'
_rdata$r	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$IMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$IMZ
		;org 33D0h
; COMDAT (pick any)
__RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
_rtc$IMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rtc$TMZ	segment	dword public 'DATA' use32
		assume cs:_rtc$TMZ
		;org 33D4h
; COMDAT (pick any)
__RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
_rtc$TMZ	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 33D8h
; COMDAT (pick any)
		public __real@00000000
__real@00000000	dd 0			; DATA XREF: mozilla::gfx::NudgeToInteger(float	*)+39r
					; mozilla::gfx::BasePoint<float,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>>::BasePoint<float,mozilla::gfx::PointTyped<mozilla::gfx::UnknownUnits,float>,mozilla::gfx::CoordTyped<mozilla::gfx::UnknownUnits,float>>(void)+11r ...
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 33DCh
; COMDAT (pick any)
		public __real@0000000000000000
__real@0000000000000000	dq 0		; DATA XREF: mozilla::gfx::SafeTangent(double)+5Fr
					; mozilla::gfx::SafeTangent(double):loc_6FDr
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 33E4h
; COMDAT (pick any)
		public __real@358637bd
__real@358637bd	dd 358637BDh		; DATA XREF: mozilla::gfx::NudgeToInteger(float	*)+46r
					; mozilla::gfx::NudgeToInteger(float *)+5Ar
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 33E8h
; COMDAT (pick any)
		public __real@3e80000000000000
__real@3e80000000000000	dq 3E80000000000000h
					; DATA XREF: mozilla::gfx::FlushToZero(double)+12r
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 33F0h
; COMDAT (pick any)
		public __real@3f000000
__real@3f000000	dd 3F000000h		; DATA XREF: mozilla::gfx::NudgeToInteger(float	*)+1Br
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 33F4h
; COMDAT (pick any)
		public __real@3f1a36e2eb1c432d
__real@3f1a36e2eb1c432d	dq 3F1A36E2EB1C432Dh
					; DATA XREF: mozilla::gfx::SafeTangent(double)+1Dr
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 33FCh
; COMDAT (pick any)
		public __real@3f800000
__real@3f800000	dd 3F800000h		; DATA XREF: mozilla::gfx::Matrix::Matrix(void)+11r
					; mozilla::gfx::Matrix::Matrix(void)+40r
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 3400h
; COMDAT (pick any)
		public __real@be80000000000000
__real@be80000000000000	dq 0BE80000000000000h
					; DATA XREF: mozilla::gfx::FlushToZero(double)+8r
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 3408h
; COMDAT (pick any)
		public __xmm@80000000000000008000000000000000
__xmm@80000000000000008000000000000000 xmmword 80000000000000008000000000000000h
					; DATA XREF: mozilla::gfx::SafeTangent(double)+95r
					; mozilla::gfx::SafeTangent(double)+ADr
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 3418h
; COMDAT (pick any)
		public __xmm@80000000800000008000000080000000
__xmm@80000000800000008000000080000000 xmmword 80000000800000008000000080000000h
					; DATA XREF: mozilla::gfx::Matrix::Rotation(float)+63r
_rdata		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_CRT$XCU	segment	dword public 'DATA' use32
		assume cs:_CRT$XCU
		;org 3428h
_piecewise_construct$initializer$ dd offset ??__Epiecewise_construct@std@@YAXXZ	; std::`dynamic	initializer for	'piecewise_construct''(void)
_allocator_arg$initializer$ dd offset ??__Eallocator_arg@std@@YAXXZ ; std::`dynamic initializer	for 'allocator_arg''(void)
_CRT$XCU	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_CRT$XCU	segment	dword public 'DATA' use32
		assume cs:_CRT$XCU
		;org 3430h
; COMDAT (pick associative to section at 3104)
; public: static void (__cdecl *std::_Error_objects<int>::_Generic_object$initializer$)(void)
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
_CRT$XCU	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_CRT$XCU	segment	dword public 'DATA' use32
		assume cs:_CRT$XCU
		;org 3434h
; COMDAT (pick associative to section at 3108)
; public: static void (__cdecl *std::_Error_objects<int>::_Iostream_object$initializer$)(void)
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA	dd offset ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
_CRT$XCU	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_CRT$XCU	segment	dword public 'DATA' use32
		assume cs:_CRT$XCU
		;org 3438h
; COMDAT (pick associative to section at 310C)
; public: static void (__cdecl *std::_Error_objects<int>::_System_object$initializer$)(void)
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset	??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic initializer	for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)
_CRT$XCU	ends

; ===========================================================================

; Segment type:	Externs
; UNDEF
		extrn __purecall:near	; DATA XREF: .rdata:00003058o
					; .rdata:0000305Co
; void *__cdecl	operator new(unsigned int)
		extrn ??2@YAPAXI@Z:near	; CODE XREF: std::_Allocate<char>(uint,char *)+25p
					; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+2Bp
; void __cdecl operator	delete(void *)
		extrn ??3@YAXPAX@Z:near	; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+22p
					; std::_Iostream_error_category::`scalar deleting destructor'(uint)+22p ...
; int __cdecl atexit(void (__cdecl *)())
		extrn _atexit:near	; CODE XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+12p
					; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+12p ...
; void *__cdecl	_memmove(void *Dst, const void *Src, size_t Size)
		extrn __imp__memmove:near
					; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+28p
					; DATA XREF: std::char_traits<char>::move(char *,char const *,uint)+28r
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn _memcpy:near	; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+25p
; size_t __cdecl strlen(const char *Str)
		extrn _strlen:near	; CODE XREF: std::char_traits<char>::length(char const *)+22p
		extrn _cos:near		; CODE XREF: mozilla::gfx::SafeTangent(double)+4Fp
					; _cosf+18p
		extrn _fabs:near	; CODE XREF: _fabsf+18p
		extrn _sin:near		; CODE XREF: mozilla::gfx::SafeTangent(double)+37p
					; _sinf+18p
		extrn __imp__floor:near	; CODE XREF: _floorf+1Bp
					; DATA XREF: _floorf+1Br
		extrn __imp___hypot:near ; CODE	XREF: _hypot+20p
					; DATA XREF: _hypot+20r
; bool __cdecl std::uncaught_exception()
		extrn __imp_?uncaught_exception@std@@YA_NXZ:near
					; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+11p
					; DATA XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+11r
; void __cdecl std::_Debug_message(const wchar_t *, const wchar_t *, unsigned int)
		extrn __imp_?_Debug_message@std@@YAXPB_W0I@Z:near
					; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+19p
					; DATA XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+19r
; _DWORD __thiscall std::_Container_base12::_Container_base12(std::_Container_base12 *__hidden this)
		extrn __imp_??0_Container_base12@std@@QAE@XZ:near
					; CODE XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+14p
					; DATA XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+14r
; _DWORD __thiscall std::_Container_base12::~_Container_base12(std::_Container_base12 *__hidden	this)
		extrn __imp_??1_Container_base12@std@@QAE@XZ:near
					; CODE XREF: std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)+14p
					; DATA XREF: std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)+14r
; void __thiscall std::_Container_base12::_Orphan_all(std::_Container_base12 *__hidden this)
		extrn __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ:near
					; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+28p
					; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+28r
; void __cdecl std::_Xbad_alloc()
		extrn __imp_?_Xbad_alloc@std@@YAXXZ:near
					; CODE XREF: std::_Allocate<char>(uint,char *)+38p
					; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+3Ep
					; DATA XREF: ...
; void __cdecl std::_Xlength_error(const char *)
		extrn __imp_?_Xlength_error@std@@YAXPBD@Z:near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+16p
					; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+16r
; void __cdecl std::_Xout_of_range(const char *)
		extrn __imp_?_Xout_of_range@std@@YAXPBD@Z:near
					; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+16p
					; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+16r
; public: virtual void * __thiscall std::error_category::`vector deleting destructor'(unsigned int)
		extrn ??_Eerror_category@std@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:const std::error_category::`vftable'o
; const	char *__cdecl std::_Syserror_map(int)
		extrn __imp_?_Syserror_map@std@@YAPBDH@Z:near
					; CODE XREF: std::_System_error_category::default_error_condition(int)+15p
					; std::_Generic_error_category::message(int)+28p
					; DATA XREF: ...
; const	char *__cdecl std::_Winerror_map(int)
		extrn __imp_?_Winerror_map@std@@YAPBDH@Z:near
					; CODE XREF: std::_System_error_category::message(int)+28p
					; DATA XREF: std::_System_error_category::message(int)+28r
; public: virtual void * __thiscall std::_Generic_error_category::`vector deleting destructor'(unsigned int)
		extrn ??_E_Generic_error_category@std@@UAEPAXI@Z:near ;	weak
					; DATA XREF: .rdata:const std::_Generic_error_category::`vftable'o
; public: virtual void * __thiscall std::_Iostream_error_category::`vector deleting destructor'(unsigned int)
		extrn ??_E_Iostream_error_category@std@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:const std::_Iostream_error_category::`vftable'o
; public: virtual void * __thiscall std::_System_error_category::`vector deleting destructor'(unsigned int)
		extrn ??_E_System_error_category@std@@UAEPAXI@Z:near ; weak
					; DATA XREF: .rdata:const std::_System_error_category::`vftable'o
; bool __thiscall std::ios_base::good(std::ios_base *__hidden this)
		extrn __imp_?good@ios_base@std@@QBE_NXZ:near
					; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+4Ep
					; std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+DDp
					; DATA XREF: ...
; int __thiscall std::ios_base::flags(std::ios_base *__hidden this)
		extrn __imp_?flags@ios_base@std@@QBEHXZ:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+139p
					; DATA XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+139r
; __int64 __thiscall std::ios_base::width(std::ios_base	*__hidden this)
		extrn __imp_?width@ios_base@std@@QBE_JXZ:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+66p
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+94p ...
; __int64 __thiscall std::ios_base::width(std::ios_base	*__hidden this,	__int64)
		extrn __imp_?width@ios_base@std@@QAE_J_J@Z:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+34Fp
					; DATA XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+34Fr
; __declspec(dllimport)	public:	int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::sputc(char)
		extrn __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1CCp
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+2F1p
					; DATA XREF: ...
; __declspec(dllimport)	public:	__int64	__thiscall std::basic_streambuf<char, struct std::char_traits<char>>::sputn(char const *, __int64)
		extrn __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+247p
					; DATA XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+247r
; __declspec(dllimport)	public:	void __thiscall	std::basic_ios<char, struct std::char_traits<char>>::setstate(int, bool)
		extrn __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:near
					; CODE XREF: __catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0+13p
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+3A7p
					; DATA XREF: ...
; __declspec(dllimport)	public:	class std::basic_ostream<char, struct std::char_traits<char>> *	__thiscall std::basic_ios<char,	struct std::char_traits<char>>::tie(void)const
		extrn __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:near
					; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+6Fp
					; std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+8Fp ...
; __declspec(dllimport)	public:	class std::basic_streambuf<char, struct	std::char_traits<char>>	* __thiscall std::basic_ios<char, struct std::char_traits<char>>::rdbuf(void)const
		extrn __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1B2p
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+226p	...
; __declspec(dllimport)	public:	char __thiscall	std::basic_ios<char, struct std::char_traits<char>>::fill(void)const
		extrn __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:near
					; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+193p
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+2B4p
					; DATA XREF: ...
; __declspec(dllimport)	public:	void __thiscall	std::basic_ostream<char, struct	std::char_traits<char>>::_Osfx(void)
		extrn __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:near
					; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+2Cp
					; DATA XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+2Cr
; __declspec(dllimport)	public:	class std::basic_ostream<char, struct std::char_traits<char>> &	__thiscall std::basic_ostream<char, struct std::char_traits<char>>::operator<<(float)
		extrn __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z:near
					; CODE XREF: mozilla::gfx::operator<<(std::basic_ostream<char,std::char_traits<char>> &,mozilla::gfx::Matrix const &)+B6p
					; mozilla::gfx::operator<<(std::basic_ostream<char,std::char_traits<char>> &,mozilla::gfx::Matrix const	&)+D1p	...
; __declspec(dllimport)	public:	class std::basic_ostream<char, struct std::char_traits<char>> &	__thiscall std::basic_ostream<char, struct std::char_traits<char>>::flush(void)
		extrn __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:near
					; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+C1p
					; DATA XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+C1r
; __fastcall _RTC_CheckStackVars(x, x)
		extrn @_RTC_CheckStackVars@8:near
					; CODE XREF: mozilla::gfx::Matrix::TransformBounds(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &)+20Dp
					; mozilla::gfx::Matrix::Rotation(float)+ACp ...
; __fastcall __security_check_cookie(x)
		extrn @__security_check_cookie@4:near
					; CODE XREF: mozilla::gfx::Matrix::TransformBounds(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &)+21Ap
					; __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z+Fp ...
; __stdcall _CxxThrowException(x, x)
		extrn __CxxThrowException@8:near
					; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1+10p
		extrn __RTC_CheckEsp:near
					; CODE XREF: mozilla::gfx::NudgeToInteger(float	*)+B6p
					; mozilla::gfx::operator<<(std::basic_ostream<char,std::char_traits<char>> &,mozilla::gfx::Matrix const	&)+C1p	...
		extrn __RTC_InitBase:near ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
		extrn __RTC_Shutdown:near ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
		extrn ___CxxFrameHandler3:near
					; CODE XREF: __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z+19j
					; __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z+16j ...
; const	type_info::`vftable'
		extrn ??_7type_info@@6B@:near
					; DATA XREF: .data$r:std::error_category `RTTI Type Descriptor'o
					; .data$r:std::_Generic_error_category `RTTI Type Descriptor'o ...
		extrn ___security_cookie:near
					; DATA XREF: mozilla::gfx::Matrix::TransformBounds(mozilla::gfx::RectTyped<mozilla::gfx::UnknownUnits,float> const &)+1Er
					; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+2Ar ...
		extrn __fltused:near


		end
